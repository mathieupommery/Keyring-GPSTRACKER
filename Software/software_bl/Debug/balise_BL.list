
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fa90  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c30  0801fbd0  0801fbd0  00020bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022800  08022800  00023800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022808  08022808  00023808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802280c  0802280c  0002380c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  08022810  00024008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000320  08022b28  00024320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000358  08022b5d  00024358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dd8  20000370  08022b6e  00024370  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003148  08022b6e  00025148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00026000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00026000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08022b6e  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004d0ea  00000000  00000000  00025a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a768  00000000  00000000  00072b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f50  00000000  00000000  0007d2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003079  00000000  00000000  00081240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000391e3  00000000  00000000  000842b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00055800  00000000  00000000  000bd49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e755  00000000  00000000  00112c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  002313f1  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001248c  00000000  00000000  00231434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  002438c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0801fbb8 	.word	0x0801fbb8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0801fbb8 	.word	0x0801fbb8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <PADS_continuous_init>:


}


uint8_t PADS_continuous_init(I2C_HandleTypeDef *i2c){
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af04      	add	r7, sp, #16
 8000f9a:	6078      	str	r0, [r7, #4]

	uint8_t ctrl_2=0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	72fb      	strb	r3, [r7, #11]
	uint8_t ctrl_1=0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	72bb      	strb	r3, [r7, #10]
	int check=0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Read(i2c, 0xB9, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8000fa8:	2364      	movs	r3, #100	@ 0x64
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	f107 030b 	add.w	r3, r7, #11
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	2211      	movs	r2, #17
 8000fba:	21b9      	movs	r1, #185	@ 0xb9
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f008 fb73 	bl	80096a8 <HAL_I2C_Mem_Read>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <PADS_continuous_init+0x38>
			check=1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	60fb      	str	r3, [r7, #12]
		}

	ctrl_2|=0b00000010;
 8000fcc:	7afb      	ldrb	r3, [r7, #11]
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	72fb      	strb	r3, [r7, #11]

	if(HAL_I2C_Mem_Write(i2c, 0xB8, 0x11, 1, &ctrl_2, 1, 100)!=HAL_OK){
 8000fd6:	2364      	movs	r3, #100	@ 0x64
 8000fd8:	9302      	str	r3, [sp, #8]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	9301      	str	r3, [sp, #4]
 8000fde:	f107 030b 	add.w	r3, r7, #11
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	2211      	movs	r2, #17
 8000fe8:	21b8      	movs	r1, #184	@ 0xb8
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f008 fa48 	bl	8009480 <HAL_I2C_Mem_Write>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <PADS_continuous_init+0x66>
			check=1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	60fb      	str	r3, [r7, #12]
		}

	if(HAL_I2C_Mem_Read(i2c, 0xB9, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 8000ffa:	2364      	movs	r3, #100	@ 0x64
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	f107 030a 	add.w	r3, r7, #10
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2210      	movs	r2, #16
 800100c:	21b9      	movs	r1, #185	@ 0xb9
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f008 fb4a 	bl	80096a8 <HAL_I2C_Mem_Read>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <PADS_continuous_init+0x8a>
				check=1;
 800101a:	2301      	movs	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
			}


	ctrl_1|=0b01001110;
 800101e:	7abb      	ldrb	r3, [r7, #10]
 8001020:	f043 034e 	orr.w	r3, r3, #78	@ 0x4e
 8001024:	b2db      	uxtb	r3, r3
 8001026:	72bb      	strb	r3, [r7, #10]

	ctrl_1&=0b11001111;
 8001028:	7abb      	ldrb	r3, [r7, #10]
 800102a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800102e:	b2db      	uxtb	r3, r3
 8001030:	72bb      	strb	r3, [r7, #10]

	if(HAL_I2C_Mem_Write(i2c, 0xB8, 0x10, 1, &ctrl_1, 1, 100)!=HAL_OK){
 8001032:	2364      	movs	r3, #100	@ 0x64
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2301      	movs	r3, #1
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	f107 030a 	add.w	r3, r7, #10
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	2301      	movs	r3, #1
 8001042:	2210      	movs	r2, #16
 8001044:	21b8      	movs	r1, #184	@ 0xb8
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f008 fa1a 	bl	8009480 <HAL_I2C_Mem_Write>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <PADS_continuous_init+0xc2>
				check=1;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
			}



	return check;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	b2db      	uxtb	r3, r3

}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	0000      	movs	r0, r0
 8001064:	0000      	movs	r0, r0
	...

08001068 <PADS_continuous_read>:

uint8_t PADS_continuous_read(I2C_HandleTypeDef *i2c){
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	ed2d 8b02 	vpush	{d8}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af04      	add	r7, sp, #16
 8001072:	6078      	str	r0, [r7, #4]
		int check=0;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8_t recarray[5];
		int16_t intbuffertemp=0;
 8001078:	2300      	movs	r3, #0
 800107a:	847b      	strh	r3, [r7, #34]	@ 0x22
		int32_t intbufferpres=0;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
		double tmoy=0;
 8001080:	f04f 0200 	mov.w	r2, #0
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e9c7 2304 	strd	r2, r3, [r7, #16]
		if(HAL_I2C_Mem_Read(i2c, 0xB9, 0x28, 1, &recarray[0], 1, 100)!=HAL_OK){
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2301      	movs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2228      	movs	r2, #40	@ 0x28
 800109e:	21b9      	movs	r1, #185	@ 0xb9
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f008 fb01 	bl	80096a8 <HAL_I2C_Mem_Read>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <PADS_continuous_read+0x48>
			check=1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xB9, 0x29, 1, &recarray[1], 1, 100)!=HAL_OK){
 80010b0:	2364      	movs	r3, #100	@ 0x64
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2301      	movs	r3, #1
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	f107 0308 	add.w	r3, r7, #8
 80010bc:	3301      	adds	r3, #1
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	2229      	movs	r2, #41	@ 0x29
 80010c4:	21b9      	movs	r1, #185	@ 0xb9
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f008 faee 	bl	80096a8 <HAL_I2C_Mem_Read>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <PADS_continuous_read+0x6e>
			check=1;
 80010d2:	2301      	movs	r3, #1
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xB9, 0x2A, 1, &recarray[2], 1, 100)!=HAL_OK){
 80010d6:	2364      	movs	r3, #100	@ 0x64
 80010d8:	9302      	str	r3, [sp, #8]
 80010da:	2301      	movs	r3, #1
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	3302      	adds	r3, #2
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	222a      	movs	r2, #42	@ 0x2a
 80010ea:	21b9      	movs	r1, #185	@ 0xb9
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f008 fadb 	bl	80096a8 <HAL_I2C_Mem_Read>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <PADS_continuous_read+0x94>
			check=1;
 80010f8:	2301      	movs	r3, #1
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xB9, 0x2B, 1, &recarray[3], 1, 100)!=HAL_OK){
 80010fc:	2364      	movs	r3, #100	@ 0x64
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	3303      	adds	r3, #3
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2301      	movs	r3, #1
 800110e:	222b      	movs	r2, #43	@ 0x2b
 8001110:	21b9      	movs	r1, #185	@ 0xb9
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f008 fac8 	bl	80096a8 <HAL_I2C_Mem_Read>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <PADS_continuous_read+0xba>
			check=1;
 800111e:	2301      	movs	r3, #1
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if(HAL_I2C_Mem_Read(i2c, 0xB9, 0x2C, 1, &recarray[4], 1, 100)!=HAL_OK){
 8001122:	2364      	movs	r3, #100	@ 0x64
 8001124:	9302      	str	r3, [sp, #8]
 8001126:	2301      	movs	r3, #1
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	f107 0308 	add.w	r3, r7, #8
 800112e:	3304      	adds	r3, #4
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	222c      	movs	r2, #44	@ 0x2c
 8001136:	21b9      	movs	r1, #185	@ 0xb9
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f008 fab5 	bl	80096a8 <HAL_I2C_Mem_Read>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <PADS_continuous_read+0xe0>
			check=1;
 8001144:	2301      	movs	r3, #1
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		if(check==0){
 8001148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114a:	2b00      	cmp	r3, #0
 800114c:	f040 80d0 	bne.w	80012f0 <PADS_continuous_read+0x288>

		intbufferpres=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 8001150:	7abb      	ldrb	r3, [r7, #10]
 8001152:	041a      	lsls	r2, r3, #16
 8001154:	7a7b      	ldrb	r3, [r7, #9]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	4313      	orrs	r3, r2
 800115a:	7a3a      	ldrb	r2, [r7, #8]
 800115c:	4313      	orrs	r3, r2
 800115e:	61fb      	str	r3, [r7, #28]
		intbuffertemp=(recarray[4]<<8)|(recarray[3]);
 8001160:	7b3b      	ldrb	r3, [r7, #12]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	847b      	strh	r3, [r7, #34]	@ 0x22
		inttemp=intbuffertemp;
 800116e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001172:	4a6f      	ldr	r2, [pc, #444]	@ (8001330 <PADS_continuous_read+0x2c8>)
 8001174:	6013      	str	r3, [r2, #0]
		intpress=intbufferpres;
 8001176:	4a6f      	ldr	r2, [pc, #444]	@ (8001334 <PADS_continuous_read+0x2cc>)
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	6013      	str	r3, [r2, #0]
		finaltemp=(float)intbuffertemp*0.01;
 800117c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ee17 0a90 	vmov	r0, s15
 800118c:	f7ff f9b4 	bl	80004f8 <__aeabi_f2d>
 8001190:	a35b      	add	r3, pc, #364	@ (adr r3, 8001300 <PADS_continuous_read+0x298>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa07 	bl	80005a8 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fcf9 	bl	8000b98 <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a63      	ldr	r2, [pc, #396]	@ (8001338 <PADS_continuous_read+0x2d0>)
 80011aa:	6013      	str	r3, [r2, #0]
		finalpress=(float) intbufferpres*(0.00002441406);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b6:	ee17 0a90 	vmov	r0, s15
 80011ba:	f7ff f99d 	bl	80004f8 <__aeabi_f2d>
 80011be:	a352      	add	r3, pc, #328	@ (adr r3, 8001308 <PADS_continuous_read+0x2a0>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff f9f0 	bl	80005a8 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fce2 	bl	8000b98 <__aeabi_d2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a59      	ldr	r2, [pc, #356]	@ (800133c <PADS_continuous_read+0x2d4>)
 80011d8:	6013      	str	r3, [r2, #0]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		alt=(float) ((8.314*293.15)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 80011da:	4b58      	ldr	r3, [pc, #352]	@ (800133c <PADS_continuous_read+0x2d4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f98a 	bl	80004f8 <__aeabi_f2d>
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b55      	ldr	r3, [pc, #340]	@ (8001340 <PADS_continuous_read+0x2d8>)
 80011ea:	f7ff f9dd 	bl	80005a8 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	a147      	add	r1, pc, #284	@ (adr r1, 8001310 <PADS_continuous_read+0x2a8>)
 80011f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011f8:	f7ff fb00 	bl	80007fc <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fcc8 	bl	8000b98 <__aeabi_d2f>
 8001208:	4603      	mov	r3, r0
 800120a:	ee00 3a10 	vmov	s0, r3
 800120e:	f01c ff15 	bl	801e03c <logf>
 8001212:	eef0 7a40 	vmov.f32	s15, s0
 8001216:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001344 <PADS_continuous_read+0x2dc>
 800121a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121e:	4b4a      	ldr	r3, [pc, #296]	@ (8001348 <PADS_continuous_read+0x2e0>)
 8001220:	edc3 7a00 	vstr	s15, [r3]
		tmoy=(float) 293.15+finaltemp+(0.0065*alt)/2;
 8001224:	4b44      	ldr	r3, [pc, #272]	@ (8001338 <PADS_continuous_read+0x2d0>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800134c <PADS_continuous_read+0x2e4>
 800122e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001232:	ee17 0a90 	vmov	r0, s15
 8001236:	f7ff f95f 	bl	80004f8 <__aeabi_f2d>
 800123a:	4604      	mov	r4, r0
 800123c:	460d      	mov	r5, r1
 800123e:	4b42      	ldr	r3, [pc, #264]	@ (8001348 <PADS_continuous_read+0x2e0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f958 	bl	80004f8 <__aeabi_f2d>
 8001248:	a333      	add	r3, pc, #204	@ (adr r3, 8001318 <PADS_continuous_read+0x2b0>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9ab 	bl	80005a8 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001262:	f7ff facb 	bl	80007fc <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7fe ffe5 	bl	800023c <__adddf3>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	e9c7 2304 	strd	r2, r3, [r7, #16]
		alt=(float) ((8.314*tmoy)/(9.80665*0.028964))*logf((float)101325.0/(finalpress*1000.0));
 800127a:	a329      	add	r3, pc, #164	@ (adr r3, 8001320 <PADS_continuous_read+0x2b8>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001284:	f7ff f990 	bl	80005a8 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	a325      	add	r3, pc, #148	@ (adr r3, 8001328 <PADS_continuous_read+0x2c0>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff fab1 	bl	80007fc <__aeabi_ddiv>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4610      	mov	r0, r2
 80012a0:	4619      	mov	r1, r3
 80012a2:	f7ff fc79 	bl	8000b98 <__aeabi_d2f>
 80012a6:	ee08 0a10 	vmov	s16, r0
 80012aa:	4b24      	ldr	r3, [pc, #144]	@ (800133c <PADS_continuous_read+0x2d4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f922 	bl	80004f8 <__aeabi_f2d>
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <PADS_continuous_read+0x2d8>)
 80012ba:	f7ff f975 	bl	80005a8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	a113      	add	r1, pc, #76	@ (adr r1, 8001310 <PADS_continuous_read+0x2a8>)
 80012c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012c8:	f7ff fa98 	bl	80007fc <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f7ff fc60 	bl	8000b98 <__aeabi_d2f>
 80012d8:	4603      	mov	r3, r0
 80012da:	ee00 3a10 	vmov	s0, r3
 80012de:	f01c fead 	bl	801e03c <logf>
 80012e2:	eef0 7a40 	vmov.f32	s15, s0
 80012e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80012ea:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <PADS_continuous_read+0x2e0>)
 80012ec:	edc3 7a00 	vstr	s15, [r3]



		}

		return check;
 80012f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f2:	b2db      	uxtb	r3, r3





}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3728      	adds	r7, #40	@ 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	ecbd 8b02 	vpop	{d8}
 80012fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001300:	47ae147b 	.word	0x47ae147b
 8001304:	3f847ae1 	.word	0x3f847ae1
 8001308:	6d9e99d7 	.word	0x6d9e99d7
 800130c:	3ef99999 	.word	0x3ef99999
 8001310:	00000000 	.word	0x00000000
 8001314:	40f8bcd0 	.word	0x40f8bcd0
 8001318:	76c8b439 	.word	0x76c8b439
 800131c:	3f7a9fbe 	.word	0x3f7a9fbe
 8001320:	9ba5e354 	.word	0x9ba5e354
 8001324:	4020a0c4 	.word	0x4020a0c4
 8001328:	50527f89 	.word	0x50527f89
 800132c:	3fd22db5 	.word	0x3fd22db5
 8001330:	20000398 	.word	0x20000398
 8001334:	2000039c 	.word	0x2000039c
 8001338:	2000038c 	.word	0x2000038c
 800133c:	20000390 	.word	0x20000390
 8001340:	408f4000 	.word	0x408f4000
 8001344:	460612a4 	.word	0x460612a4
 8001348:	20000394 	.word	0x20000394
 800134c:	43929333 	.word	0x43929333

08001350 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800135c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800135e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4313      	orrs	r3, r2
 8001366:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800136c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4013      	ands	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001374:	68fb      	ldr	r3, [r7, #12]
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800139a:	4b38      	ldr	r3, [pc, #224]	@ (800147c <MX_ADC1_Init+0xf8>)
 800139c:	4a38      	ldr	r2, [pc, #224]	@ (8001480 <MX_ADC1_Init+0xfc>)
 800139e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013a0:	4b36      	ldr	r3, [pc, #216]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013a6:	4b35      	ldr	r3, [pc, #212]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013ac:	4b33      	ldr	r3, [pc, #204]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013b2:	4b32      	ldr	r3, [pc, #200]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b8:	4b30      	ldr	r3, [pc, #192]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013ba:	2204      	movs	r2, #4
 80013bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013be:	4b2f      	ldr	r3, [pc, #188]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013c4:	4b2d      	ldr	r3, [pc, #180]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80013ca:	4b2c      	ldr	r3, [pc, #176]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013cc:	2203      	movs	r2, #3
 80013ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013d0:	4b2a      	ldr	r3, [pc, #168]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80013d8:	4b28      	ldr	r3, [pc, #160]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013da:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 80013de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80013e0:	4b26      	ldr	r3, [pc, #152]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013f0:	4b22      	ldr	r3, [pc, #136]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80013f6:	4b21      	ldr	r3, [pc, #132]	@ (800147c <MX_ADC1_Init+0xf8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013fe:	481f      	ldr	r0, [pc, #124]	@ (800147c <MX_ADC1_Init+0xf8>)
 8001400:	f006 fa1c 	bl	800783c <HAL_ADC_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800140a:	f001 fdf3 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <MX_ADC1_Init+0x100>)
 8001410:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001412:	2306      	movs	r3, #6
 8001414:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001416:	2307      	movs	r3, #7
 8001418:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800141a:	237f      	movs	r3, #127	@ 0x7f
 800141c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800141e:	2304      	movs	r3, #4
 8001420:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001426:	463b      	mov	r3, r7
 8001428:	4619      	mov	r1, r3
 800142a:	4814      	ldr	r0, [pc, #80]	@ (800147c <MX_ADC1_Init+0xf8>)
 800142c:	f006 fbea 	bl	8007c04 <HAL_ADC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001436:	f001 fddd 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800143a:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <MX_ADC1_Init+0x104>)
 800143c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800143e:	230c      	movs	r3, #12
 8001440:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	463b      	mov	r3, r7
 8001444:	4619      	mov	r1, r3
 8001446:	480d      	ldr	r0, [pc, #52]	@ (800147c <MX_ADC1_Init+0xf8>)
 8001448:	f006 fbdc 	bl	8007c04 <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001452:	f001 fdcf 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001456:	4b0d      	ldr	r3, [pc, #52]	@ (800148c <MX_ADC1_Init+0x108>)
 8001458:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800145a:	2312      	movs	r3, #18
 800145c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145e:	463b      	mov	r3, r7
 8001460:	4619      	mov	r1, r3
 8001462:	4806      	ldr	r0, [pc, #24]	@ (800147c <MX_ADC1_Init+0xf8>)
 8001464:	f006 fbce 	bl	8007c04 <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800146e:	f001 fdc1 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	200003a0 	.word	0x200003a0
 8001480:	50040000 	.word	0x50040000
 8001484:	80000001 	.word	0x80000001
 8001488:	c7520000 	.word	0xc7520000
 800148c:	25b00200 	.word	0x25b00200

08001490 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a22      	ldr	r2, [pc, #136]	@ (8001538 <HAL_ADC_MspInit+0xa8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d13e      	bne.n	8001530 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014b2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014b6:	f7ff ff4b 	bl	8001350 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ba:	2001      	movs	r0, #1
 80014bc:	f7ff ff48 	bl	8001350 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c0:	2310      	movs	r3, #16
 80014c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c4:	2303      	movs	r3, #3
 80014c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014d6:	f007 fd41 	bl	8008f5c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014da:	4b18      	ldr	r3, [pc, #96]	@ (800153c <HAL_ADC_MspInit+0xac>)
 80014dc:	4a18      	ldr	r2, [pc, #96]	@ (8001540 <HAL_ADC_MspInit+0xb0>)
 80014de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014e0:	4b16      	ldr	r3, [pc, #88]	@ (800153c <HAL_ADC_MspInit+0xac>)
 80014e2:	2205      	movs	r2, #5
 80014e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e6:	4b15      	ldr	r3, [pc, #84]	@ (800153c <HAL_ADC_MspInit+0xac>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <HAL_ADC_MspInit+0xac>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014f2:	4b12      	ldr	r3, [pc, #72]	@ (800153c <HAL_ADC_MspInit+0xac>)
 80014f4:	2280      	movs	r2, #128	@ 0x80
 80014f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014f8:	4b10      	ldr	r3, [pc, #64]	@ (800153c <HAL_ADC_MspInit+0xac>)
 80014fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001500:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_ADC_MspInit+0xac>)
 8001502:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001506:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001508:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <HAL_ADC_MspInit+0xac>)
 800150a:	2220      	movs	r2, #32
 800150c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800150e:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <HAL_ADC_MspInit+0xac>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001514:	4809      	ldr	r0, [pc, #36]	@ (800153c <HAL_ADC_MspInit+0xac>)
 8001516:	f007 f9e3 	bl	80088e0 <HAL_DMA_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001520:	f001 fd68 	bl	8002ff4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a05      	ldr	r2, [pc, #20]	@ (800153c <HAL_ADC_MspInit+0xac>)
 8001528:	64da      	str	r2, [r3, #76]	@ 0x4c
 800152a:	4a04      	ldr	r2, [pc, #16]	@ (800153c <HAL_ADC_MspInit+0xac>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001530:	bf00      	nop
 8001532:	3720      	adds	r7, #32
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	50040000 	.word	0x50040000
 800153c:	20000404 	.word	0x20000404
 8001540:	40020008 	.word	0x40020008
 8001544:	00000000 	.word	0x00000000

08001548 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001548:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a54      	ldr	r2, [pc, #336]	@ (80016a8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001558:	4293      	cmp	r3, r2
 800155a:	f040 8091 	bne.w	8001680 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800155e:	4b53      	ldr	r3, [pc, #332]	@ (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffb6 	bl	80004d4 <__aeabi_i2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	a14a      	add	r1, pc, #296	@ (adr r1, 8001698 <HAL_ADC_ConvCpltCallback+0x150>)
 800156e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001572:	f7ff f943 	bl	80007fc <__aeabi_ddiv>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb0b 	bl	8000b98 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	4a4a      	ldr	r2, [pc, #296]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001586:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 8001588:	4b4a      	ldr	r3, [pc, #296]	@ (80016b4 <HAL_ADC_ConvCpltCallback+0x16c>)
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	4b4a      	ldr	r3, [pc, #296]	@ (80016b8 <HAL_ADC_ConvCpltCallback+0x170>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001598:	ee17 0a90 	vmov	r0, s15
 800159c:	f7fe ffac 	bl	80004f8 <__aeabi_f2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	4944      	ldr	r1, [pc, #272]	@ (80016bc <HAL_ADC_ConvCpltCallback+0x174>)
 80015aa:	f7ff f927 	bl	80007fc <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4690      	mov	r8, r2
 80015b4:	4699      	mov	r9, r3
 80015b6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 80015b8:	885b      	ldrh	r3, [r3, #2]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe ff8a 	bl	80004d4 <__aeabi_i2d>
 80015c0:	4604      	mov	r4, r0
 80015c2:	460d      	mov	r5, r1
 80015c4:	4b3a      	ldr	r3, [pc, #232]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x168>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7fe ff95 	bl	80004f8 <__aeabi_f2d>
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	4b3b      	ldr	r3, [pc, #236]	@ (80016c0 <HAL_ADC_ConvCpltCallback+0x178>)
 80015d4:	f7ff f912 	bl	80007fc <__aeabi_ddiv>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe ffe2 	bl	80005a8 <__aeabi_dmul>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4614      	mov	r4, r2
 80015ea:	461d      	mov	r5, r3
 80015ec:	4b32      	ldr	r3, [pc, #200]	@ (80016b8 <HAL_ADC_ConvCpltCallback+0x170>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff81 	bl	80004f8 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4620      	mov	r0, r4
 80015fc:	4629      	mov	r1, r5
 80015fe:	f7fe fe1b 	bl	8000238 <__aeabi_dsub>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4640      	mov	r0, r8
 8001608:	4649      	mov	r1, r9
 800160a:	f7fe ffcd 	bl	80005a8 <__aeabi_dmul>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff fabf 	bl	8000b98 <__aeabi_d2f>
 800161a:	ee07 0a10 	vmov	s14, r0
 800161e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001628:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800162c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 800162e:	889b      	ldrh	r3, [r3, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff4f 	bl	80004d4 <__aeabi_i2d>
 8001636:	a31a      	add	r3, pc, #104	@ (adr r3, 80016a0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163c:	f7ff f8de 	bl	80007fc <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	f7fe fdf6 	bl	800023c <__adddf3>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x168>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff4b 	bl	80004f8 <__aeabi_f2d>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe ff9d 	bl	80005a8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa8f 	bl	8000b98 <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <HAL_ADC_ConvCpltCallback+0x180>)
 800167e:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001680:	2203      	movs	r2, #3
 8001682:	490a      	ldr	r1, [pc, #40]	@ (80016ac <HAL_ADC_ConvCpltCallback+0x164>)
 8001684:	4811      	ldr	r0, [pc, #68]	@ (80016cc <HAL_ADC_ConvCpltCallback+0x184>)
 8001686:	f006 fa25 	bl	8007ad4 <HAL_ADC_Start_DMA>



}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001694:	f3af 8000 	nop.w
 8001698:	d70a3d70 	.word	0xd70a3d70
 800169c:	40b36323 	.word	0x40b36323
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40affe00 	.word	0x40affe00
 80016a8:	50040000 	.word	0x50040000
 80016ac:	200008a0 	.word	0x200008a0
 80016b0:	200008ac 	.word	0x200008ac
 80016b4:	20000008 	.word	0x20000008
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	40590000 	.word	0x40590000
 80016c0:	40080000 	.word	0x40080000
 80016c4:	200008a8 	.word	0x200008a8
 80016c8:	200008b0 	.word	0x200008b0
 80016cc:	200003a0 	.word	0x200003a0

080016d0 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80016d0:	b5b0      	push	{r4, r5, r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80016d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001704 <APPD_EnableCPU2+0x34>)
 80016d8:	1d3c      	adds	r4, r7, #4
 80016da:	461d      	mov	r5, r3
 80016dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016e4:	c403      	stmia	r4!, {r0, r1}
 80016e6:	8022      	strh	r2, [r4, #0]
 80016e8:	3402      	adds	r4, #2
 80016ea:	0c13      	lsrs	r3, r2, #16
 80016ec:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80016ee:	f015 fa9d 	bl	8016c2c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4618      	mov	r0, r3
 80016f6:	f014 fd2e 	bl	8016156 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80016fa:	bf00      	nop
}
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	bdb0      	pop	{r4, r5, r7, pc}
 8001702:	bf00      	nop
 8001704:	0801fbd0 	.word	0x0801fbd0

08001708 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001710:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <LL_C2_PWR_SetPowerMode+0x28>)
 8001712:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001716:	f023 0207 	bic.w	r2, r3, #7
 800171a:	4905      	ldr	r1, [pc, #20]	@ (8001730 <LL_C2_PWR_SetPowerMode+0x28>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4313      	orrs	r3, r2
 8001720:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	58000400 	.word	0x58000400

08001734 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <LL_EXTI_EnableIT_32_63+0x24>)
 800173e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001742:	4905      	ldr	r1, [pc, #20]	@ (8001758 <LL_EXTI_EnableIT_32_63+0x24>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4313      	orrs	r3, r2
 8001748:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	58000800 	.word	0x58000800

0800175c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001768:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 800176a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001772:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001776:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001782:	4313      	orrs	r3, r2
 8001784:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	cafecafe 	.word	0xcafecafe

08001798 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80017a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80017aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80017c4:	4b04      	ldr	r3, [pc, #16]	@ (80017d8 <LL_DBGMCU_GetDeviceID+0x18>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e0042000 	.word	0xe0042000

080017dc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <LL_DBGMCU_GetRevisionID+0x18>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	b29b      	uxth	r3, r3
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e0042000 	.word	0xe0042000

080017f8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <LL_LPM_EnableSleep+0x1c>)
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <LL_LPM_EnableSleep+0x1c>)
 8001802:	f023 0304 	bic.w	r3, r3, #4
 8001806:	6113      	str	r3, [r2, #16]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	e000ed00 	.word	0xe000ed00

08001818 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	22ff      	movs	r2, #255	@ 0xff
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	22ca      	movs	r2, #202	@ 0xca
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2253      	movs	r2, #83	@ 0x53
 8001844:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 0207 	bic.w	r2, r3, #7
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	431a      	orrs	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	609a      	str	r2, [r3, #8]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <MX_APPE_Config+0x18>)
 800187e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001882:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001884:	f000 f824 	bl	80018d0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001888:	f000 f829 	bl	80018de <Config_HSE>

  return;
 800188c:	bf00      	nop
}
 800188e:	bd80      	pop	{r7, pc}
 8001890:	58004000 	.word	0x58004000

08001894 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001898:	f000 f835 	bl	8001906 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800189c:	f000 f84e 	bl	800193c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80018a0:	4903      	ldr	r1, [pc, #12]	@ (80018b0 <MX_APPE_Init+0x1c>)
 80018a2:	2000      	movs	r0, #0
 80018a4:	f000 fe3c 	bl	8002520 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80018a8:	f000 f856 	bl	8001958 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80018ac:	bf00      	nop
}
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000d38 	.word	0x20000d38

080018b4 <Init_Smps>:

void Init_Smps(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80018b8:	bf00      	nop
}
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <Init_Exti>:

void Init_Exti(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80018c6:	2050      	movs	r0, #80	@ 0x50
 80018c8:	f7ff ff34 	bl	8001734 <LL_EXTI_EnableIT_32_63>

  return;
 80018cc:	bf00      	nop
}
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80018d4:	bf00      	nop
}
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f015 fa2d 	bl	8016d44 <OTP_Read>
 80018ea:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	799b      	ldrb	r3, [r3, #6]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff30 	bl	800175c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
}
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <System_Init>:

static void System_Init(void)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	af00      	add	r7, sp, #0
  Init_Smps();
 800190a:	f7ff ffd3 	bl	80018b4 <Init_Smps>

  Init_Exti();
 800190e:	f7ff ffd8 	bl	80018c2 <Init_Exti>

  Init_Rtc();
 8001912:	f000 f803 	bl	800191c <Init_Rtc>

  return;
 8001916:	bf00      	nop
}
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <Init_Rtc>:

static void Init_Rtc(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001920:	4805      	ldr	r0, [pc, #20]	@ (8001938 <Init_Rtc+0x1c>)
 8001922:	f7ff ff86 	bl	8001832 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001926:	2100      	movs	r1, #0
 8001928:	4803      	ldr	r0, [pc, #12]	@ (8001938 <Init_Rtc+0x1c>)
 800192a:	f7ff ff92 	bl	8001852 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800192e:	4802      	ldr	r0, [pc, #8]	@ (8001938 <Init_Rtc+0x1c>)
 8001930:	f7ff ff72 	bl	8001818 <LL_RTC_EnableWriteProtection>

  return;
 8001934:	bf00      	nop
}
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40002800 	.word	0x40002800

0800193c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001940:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001944:	f7ff ff28 	bl	8001798 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001948:	f017 fbac 	bl	80190a4 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800194c:	2004      	movs	r0, #4
 800194e:	f7ff fedb 	bl	8001708 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001952:	bf00      	nop
}
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800195e:	f014 ffaf 	bl	80168c0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001962:	4a11      	ldr	r2, [pc, #68]	@ (80019a8 <appe_Tl_Init+0x50>)
 8001964:	2100      	movs	r1, #0
 8001966:	2008      	movs	r0, #8
 8001968:	f017 fcda 	bl	8019320 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800196c:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <appe_Tl_Init+0x54>)
 800196e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001970:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <appe_Tl_Init+0x58>)
 8001972:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	480e      	ldr	r0, [pc, #56]	@ (80019b4 <appe_Tl_Init+0x5c>)
 800197a:	f014 fe63 	bl	8016644 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <appe_Tl_Init+0x60>)
 8001980:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <appe_Tl_Init+0x64>)
 8001984:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <appe_Tl_Init+0x68>)
 8001988:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800198a:	f240 533c 	movw	r3, #1340	@ 0x53c
 800198e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	4618      	mov	r0, r3
 8001996:	f015 f8d5 	bl	8016b44 <TL_MM_Init>

  TL_Enable();
 800199a:	f014 ff8b 	bl	80168b4 <TL_Enable>

  return;
 800199e:	bf00      	nop
}
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	0801667d 	.word	0x0801667d
 80019ac:	20030734 	.word	0x20030734
 80019b0:	080019c5 	.word	0x080019c5
 80019b4:	080019dd 	.word	0x080019dd
 80019b8:	2003094c 	.word	0x2003094c
 80019bc:	20030840 	.word	0x20030840
 80019c0:	200301f8 	.word	0x200301f8

080019c4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80019ce:	bf00      	nop
}
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	330b      	adds	r3, #11
 80019ea:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80019f6:	2b07      	cmp	r3, #7
 80019f8:	d81f      	bhi.n	8001a3a <APPE_SysUserEvtRx+0x5e>
 80019fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001a00 <APPE_SysUserEvtRx+0x24>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a21 	.word	0x08001a21
 8001a04:	08001a33 	.word	0x08001a33
 8001a08:	08001a3b 	.word	0x08001a3b
 8001a0c:	08001a3b 	.word	0x08001a3b
 8001a10:	08001a3b 	.word	0x08001a3b
 8001a14:	08001a3b 	.word	0x08001a3b
 8001a18:	08001a3b 	.word	0x08001a3b
 8001a1c:	08001a3b 	.word	0x08001a3b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	4618      	mov	r0, r3
 8001a26:	f014 fbc3 	bl	80161b0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f81b 	bl	8001a66 <APPE_SysEvtReadyProcessing>
    break;
 8001a30:	e004      	b.n	8001a3c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f806 	bl	8001a44 <APPE_SysEvtError>
    break;
 8001a38:	e000      	b.n	8001a3c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001a3a:	bf00      	nop
  }

  return;
 8001a3c:	bf00      	nop
}
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	330b      	adds	r3, #11
 8001a52:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3302      	adds	r3, #2
 8001a58:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001a5a:	bf00      	nop
}
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b08a      	sub	sp, #40	@ 0x28
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	330b      	adds	r3, #11
 8001a8a:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	3302      	adds	r3, #2
 8001a90:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d11d      	bne.n	8001ad6 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001a9a:	f7ff fe19 	bl	80016d0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001a9e:	230f      	movs	r3, #15
 8001aa0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001aa2:	237f      	movs	r3, #127	@ 0x7f
 8001aa4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001aa6:	f7ff fe99 	bl	80017dc <LL_DBGMCU_GetRevisionID>
 8001aaa:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001ab2:	f7ff fe85 	bl	80017c0 <LL_DBGMCU_GetDeviceID>
 8001ab6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f014 fb5e 	bl	8016184 <SHCI_C2_Config>

    APP_BLE_Init();
 8001ac8:	f015 ff40 	bl	801794c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001acc:	2100      	movs	r1, #0
 8001ace:	2001      	movs	r0, #1
 8001ad0:	f017 fafa 	bl	80190c8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001ad4:	e007      	b.n	8001ae6 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d103      	bne.n	8001ae6 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
  return;
 8001ae4:	bf00      	nop
 8001ae6:	bf00      	nop
}
 8001ae8:	3728      	adds	r7, #40	@ 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af6:	f005 fcb5 	bl	8007464 <HAL_GetTick>
 8001afa:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b06:	d00a      	beq.n	8001b1e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001b08:	f005 fcc4 	bl	8007494 <HAL_GetTickFreq>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b16:	e002      	b.n	8001b1e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001b18:	f7ff fe6e 	bl	80017f8 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001b1c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001b1e:	f005 fca1 	bl	8007464 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d8f4      	bhi.n	8001b18 <HAL_Delay+0x2a>
  }
}
 8001b2e:	bf00      	nop
 8001b30:	bf00      	nop
 8001b32:	3710      	adds	r7, #16
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f017 faf2 	bl	8019128 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001b4c:	bf00      	nop
}
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f017 fae0 	bl	8019128 <UTIL_SEQ_Run>
  return;
 8001b68:	bf00      	nop
}
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2008      	movs	r0, #8
 8001b7c:	f017 fbf2 	bl	8019364 <UTIL_SEQ_SetTask>
  return;
 8001b80:	bf00      	nop
}
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001b90:	2002      	movs	r0, #2
 8001b92:	f017 fc53 	bl	801943c <UTIL_SEQ_SetEvt>
  return;
 8001b96:	bf00      	nop
}
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f017 fc68 	bl	801947c <UTIL_SEQ_WaitEvt>
  return;
 8001bac:	bf00      	nop
}
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <LL_AHB1_GRP1_EnableClock>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001bc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bea:	2004      	movs	r0, #4
 8001bec:	f7ff ffe2 	bl	8001bb4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff ffdf 	bl	8001bb4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	200b      	movs	r0, #11
 8001bfc:	f006 fe11 	bl	8008822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c00:	200b      	movs	r0, #11
 8001c02:	f006 fe28 	bl	8008856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2102      	movs	r1, #2
 8001c0a:	200c      	movs	r0, #12
 8001c0c:	f006 fe09 	bl	8008822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c10:	200c      	movs	r0, #12
 8001c12:	f006 fe20 	bl	8008856 <HAL_NVIC_EnableIRQ>

}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <LL_AHB2_GRP1_EnableClock>:
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c60:	2004      	movs	r0, #4
 8001c62:	f7ff ffda 	bl	8001c1a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	2002      	movs	r0, #2
 8001c68:	f7ff ffd7 	bl	8001c1a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	f7ff ffd4 	bl	8001c1a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2101      	movs	r1, #1
 8001c76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c7a:	f007 faf7 	bl	800926c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2183      	movs	r1, #131	@ 0x83
 8001c82:	481b      	ldr	r0, [pc, #108]	@ (8001cf0 <MX_GPIO_Init+0xa4>)
 8001c84:	f007 faf2 	bl	800926c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001c88:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001c8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c8e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001c92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4815      	ldr	r0, [pc, #84]	@ (8001cf4 <MX_GPIO_Init+0xa8>)
 8001c9e:	f007 f95d 	bl	8008f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cba:	f007 f94f 	bl	8008f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 8001cbe:	2383      	movs	r3, #131	@ 0x83
 8001cc0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <MX_GPIO_Init+0xa4>)
 8001cd4:	f007 f942 	bl	8008f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2101      	movs	r1, #1
 8001cdc:	2028      	movs	r0, #40	@ 0x28
 8001cde:	f006 fda0 	bl	8008822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ce2:	2028      	movs	r0, #40	@ 0x28
 8001ce4:	f006 fdb7 	bl	8008856 <HAL_NVIC_EnableIRQ>

}
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	48000800 	.word	0x48000800

08001cf8 <LL_EXTI_EnableIT_0_31>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <LL_EXTI_EnableIT_0_31+0x24>)
 8001d02:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001d06:	4905      	ldr	r1, [pc, #20]	@ (8001d1c <LL_EXTI_EnableIT_0_31+0x24>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	58000800 	.word	0x58000800

08001d20 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4904      	ldr	r1, [pc, #16]	@ (8001d40 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]

}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	58000800 	.word	0x58000800

08001d44 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001d80 <ReadRtcSsrValue+0x3c>)
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d52:	4b0b      	ldr	r3, [pc, #44]	@ (8001d80 <ReadRtcSsrValue+0x3c>)
 8001d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001d5a:	e005      	b.n	8001d68 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d60:	4b07      	ldr	r3, [pc, #28]	@ (8001d80 <ReadRtcSsrValue+0x3c>)
 8001d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1f5      	bne.n	8001d5c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001d70:	683b      	ldr	r3, [r7, #0]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40002800 	.word	0x40002800

08001d84 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001d94:	79ba      	ldrb	r2, [r7, #6]
 8001d96:	491d      	ldr	r1, [pc, #116]	@ (8001e0c <LinkTimerAfter+0x88>)
 8001d98:	4613      	mov	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	3315      	adds	r3, #21
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d009      	beq.n	8001dc2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	4916      	ldr	r1, [pc, #88]	@ (8001e0c <LinkTimerAfter+0x88>)
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	440b      	add	r3, r1
 8001dbc:	3314      	adds	r3, #20
 8001dbe:	79fa      	ldrb	r2, [r7, #7]
 8001dc0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001dc2:	79fa      	ldrb	r2, [r7, #7]
 8001dc4:	4911      	ldr	r1, [pc, #68]	@ (8001e0c <LinkTimerAfter+0x88>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	440b      	add	r3, r1
 8001dd0:	3315      	adds	r3, #21
 8001dd2:	7bfa      	ldrb	r2, [r7, #15]
 8001dd4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001dd6:	79fa      	ldrb	r2, [r7, #7]
 8001dd8:	490c      	ldr	r1, [pc, #48]	@ (8001e0c <LinkTimerAfter+0x88>)
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	440b      	add	r3, r1
 8001de4:	3314      	adds	r3, #20
 8001de6:	79ba      	ldrb	r2, [r7, #6]
 8001de8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001dea:	79ba      	ldrb	r2, [r7, #6]
 8001dec:	4907      	ldr	r1, [pc, #28]	@ (8001e0c <LinkTimerAfter+0x88>)
 8001dee:	4613      	mov	r3, r2
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	4413      	add	r3, r2
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	440b      	add	r3, r1
 8001df8:	3315      	adds	r3, #21
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	701a      	strb	r2, [r3, #0]

  return;
 8001dfe:	bf00      	nop
}
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000464 	.word	0x20000464

08001e10 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b085      	sub	sp, #20
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	460a      	mov	r2, r1
 8001e1a:	71fb      	strb	r3, [r7, #7]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001e20:	4b29      	ldr	r3, [pc, #164]	@ (8001ec8 <LinkTimerBefore+0xb8>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	79ba      	ldrb	r2, [r7, #6]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d032      	beq.n	8001e92 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001e2c:	79ba      	ldrb	r2, [r7, #6]
 8001e2e:	4927      	ldr	r1, [pc, #156]	@ (8001ecc <LinkTimerBefore+0xbc>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	3314      	adds	r3, #20
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001e40:	7bfa      	ldrb	r2, [r7, #15]
 8001e42:	4922      	ldr	r1, [pc, #136]	@ (8001ecc <LinkTimerBefore+0xbc>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	4413      	add	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	440b      	add	r3, r1
 8001e4e:	3315      	adds	r3, #21
 8001e50:	79fa      	ldrb	r2, [r7, #7]
 8001e52:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e54:	79fa      	ldrb	r2, [r7, #7]
 8001e56:	491d      	ldr	r1, [pc, #116]	@ (8001ecc <LinkTimerBefore+0xbc>)
 8001e58:	4613      	mov	r3, r2
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	440b      	add	r3, r1
 8001e62:	3315      	adds	r3, #21
 8001e64:	79ba      	ldrb	r2, [r7, #6]
 8001e66:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e68:	79fa      	ldrb	r2, [r7, #7]
 8001e6a:	4918      	ldr	r1, [pc, #96]	@ (8001ecc <LinkTimerBefore+0xbc>)
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4413      	add	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	440b      	add	r3, r1
 8001e76:	3314      	adds	r3, #20
 8001e78:	7bfa      	ldrb	r2, [r7, #15]
 8001e7a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e7c:	79ba      	ldrb	r2, [r7, #6]
 8001e7e:	4913      	ldr	r1, [pc, #76]	@ (8001ecc <LinkTimerBefore+0xbc>)
 8001e80:	4613      	mov	r3, r2
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	4413      	add	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	440b      	add	r3, r1
 8001e8a:	3314      	adds	r3, #20
 8001e8c:	79fa      	ldrb	r2, [r7, #7]
 8001e8e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001e90:	e014      	b.n	8001ebc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e92:	79fa      	ldrb	r2, [r7, #7]
 8001e94:	490d      	ldr	r1, [pc, #52]	@ (8001ecc <LinkTimerBefore+0xbc>)
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	3315      	adds	r3, #21
 8001ea2:	79ba      	ldrb	r2, [r7, #6]
 8001ea4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001ea6:	79ba      	ldrb	r2, [r7, #6]
 8001ea8:	4908      	ldr	r1, [pc, #32]	@ (8001ecc <LinkTimerBefore+0xbc>)
 8001eaa:	4613      	mov	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3314      	adds	r3, #20
 8001eb6:	79fa      	ldrb	r2, [r7, #7]
 8001eb8:	701a      	strb	r2, [r3, #0]
  return;
 8001eba:	bf00      	nop
}
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200004f4 	.word	0x200004f4
 8001ecc:	20000464 	.word	0x20000464

08001ed0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001eda:	4b4e      	ldr	r3, [pc, #312]	@ (8002014 <linkTimer+0x144>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b06      	cmp	r3, #6
 8001ee2:	d118      	bne.n	8001f16 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8002014 <linkTimer+0x144>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b4b      	ldr	r3, [pc, #300]	@ (8002018 <linkTimer+0x148>)
 8001eec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001eee:	4a49      	ldr	r2, [pc, #292]	@ (8002014 <linkTimer+0x144>)
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	4949      	ldr	r1, [pc, #292]	@ (800201c <linkTimer+0x14c>)
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	3315      	adds	r3, #21
 8001f04:	2206      	movs	r2, #6
 8001f06:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f08:	4b45      	ldr	r3, [pc, #276]	@ (8002020 <linkTimer+0x150>)
 8001f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f0e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	81fb      	strh	r3, [r7, #14]
 8001f14:	e078      	b.n	8002008 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001f16:	f000 f909 	bl	800212c <ReturnTimeElapsed>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001f1e:	79fa      	ldrb	r2, [r7, #7]
 8001f20:	493e      	ldr	r1, [pc, #248]	@ (800201c <linkTimer+0x14c>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3308      	adds	r3, #8
 8001f2e:	6819      	ldr	r1, [r3, #0]
 8001f30:	89fb      	ldrh	r3, [r7, #14]
 8001f32:	79fa      	ldrb	r2, [r7, #7]
 8001f34:	4419      	add	r1, r3
 8001f36:	4839      	ldr	r0, [pc, #228]	@ (800201c <linkTimer+0x14c>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4403      	add	r3, r0
 8001f42:	3308      	adds	r3, #8
 8001f44:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	4934      	ldr	r1, [pc, #208]	@ (800201c <linkTimer+0x14c>)
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3308      	adds	r3, #8
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8002014 <linkTimer+0x144>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	4619      	mov	r1, r3
 8001f62:	4a2e      	ldr	r2, [pc, #184]	@ (800201c <linkTimer+0x14c>)
 8001f64:	460b      	mov	r3, r1
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	440b      	add	r3, r1
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3308      	adds	r3, #8
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d337      	bcc.n	8001fe8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001f78:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <linkTimer+0x144>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f7e:	7b7a      	ldrb	r2, [r7, #13]
 8001f80:	4926      	ldr	r1, [pc, #152]	@ (800201c <linkTimer+0x14c>)
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3315      	adds	r3, #21
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f92:	e013      	b.n	8001fbc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001f94:	7b7a      	ldrb	r2, [r7, #13]
 8001f96:	4921      	ldr	r1, [pc, #132]	@ (800201c <linkTimer+0x14c>)
 8001f98:	4613      	mov	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	3315      	adds	r3, #21
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001fa8:	7b7a      	ldrb	r2, [r7, #13]
 8001faa:	491c      	ldr	r1, [pc, #112]	@ (800201c <linkTimer+0x14c>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	440b      	add	r3, r1
 8001fb6:	3315      	adds	r3, #21
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001fbc:	7b3b      	ldrb	r3, [r7, #12]
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d00b      	beq.n	8001fda <linkTimer+0x10a>
 8001fc2:	7b3a      	ldrb	r2, [r7, #12]
 8001fc4:	4915      	ldr	r1, [pc, #84]	@ (800201c <linkTimer+0x14c>)
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	440b      	add	r3, r1
 8001fd0:	3308      	adds	r3, #8
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d2dc      	bcs.n	8001f94 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001fda:	7b7a      	ldrb	r2, [r7, #13]
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	4611      	mov	r1, r2
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fecf 	bl	8001d84 <LinkTimerAfter>
 8001fe6:	e00f      	b.n	8002008 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8002014 <linkTimer+0x144>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff0c 	bl	8001e10 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <linkTimer+0x144>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <linkTimer+0x148>)
 8002000:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002002:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <linkTimer+0x144>)
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002008:	89fb      	ldrh	r3, [r7, #14]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200004f4 	.word	0x200004f4
 8002018:	200004f5 	.word	0x200004f5
 800201c:	20000464 	.word	0x20000464
 8002020:	200004f8 	.word	0x200004f8

08002024 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	460a      	mov	r2, r1
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	4613      	mov	r3, r2
 8002032:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002034:	4b39      	ldr	r3, [pc, #228]	@ (800211c <UnlinkTimer+0xf8>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	79fa      	ldrb	r2, [r7, #7]
 800203c:	429a      	cmp	r2, r3
 800203e:	d111      	bne.n	8002064 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002040:	4b36      	ldr	r3, [pc, #216]	@ (800211c <UnlinkTimer+0xf8>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b36      	ldr	r3, [pc, #216]	@ (8002120 <UnlinkTimer+0xfc>)
 8002048:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800204a:	79fa      	ldrb	r2, [r7, #7]
 800204c:	4935      	ldr	r1, [pc, #212]	@ (8002124 <UnlinkTimer+0x100>)
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	3315      	adds	r3, #21
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4b2f      	ldr	r3, [pc, #188]	@ (800211c <UnlinkTimer+0xf8>)
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e03e      	b.n	80020e2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002064:	79fa      	ldrb	r2, [r7, #7]
 8002066:	492f      	ldr	r1, [pc, #188]	@ (8002124 <UnlinkTimer+0x100>)
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3314      	adds	r3, #20
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002078:	79fa      	ldrb	r2, [r7, #7]
 800207a:	492a      	ldr	r1, [pc, #168]	@ (8002124 <UnlinkTimer+0x100>)
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	3315      	adds	r3, #21
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800208c:	79f9      	ldrb	r1, [r7, #7]
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	4824      	ldr	r0, [pc, #144]	@ (8002124 <UnlinkTimer+0x100>)
 8002092:	460b      	mov	r3, r1
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	440b      	add	r3, r1
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4403      	add	r3, r0
 800209c:	3315      	adds	r3, #21
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	b2d8      	uxtb	r0, r3
 80020a2:	4920      	ldr	r1, [pc, #128]	@ (8002124 <UnlinkTimer+0x100>)
 80020a4:	4613      	mov	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	3315      	adds	r3, #21
 80020b0:	4602      	mov	r2, r0
 80020b2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020b4:	7bbb      	ldrb	r3, [r7, #14]
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d013      	beq.n	80020e2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80020ba:	79f9      	ldrb	r1, [r7, #7]
 80020bc:	7bba      	ldrb	r2, [r7, #14]
 80020be:	4819      	ldr	r0, [pc, #100]	@ (8002124 <UnlinkTimer+0x100>)
 80020c0:	460b      	mov	r3, r1
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	440b      	add	r3, r1
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	4403      	add	r3, r0
 80020ca:	3314      	adds	r3, #20
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b2d8      	uxtb	r0, r3
 80020d0:	4914      	ldr	r1, [pc, #80]	@ (8002124 <UnlinkTimer+0x100>)
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	440b      	add	r3, r1
 80020dc:	3314      	adds	r3, #20
 80020de:	4602      	mov	r2, r0
 80020e0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80020e2:	79fa      	ldrb	r2, [r7, #7]
 80020e4:	490f      	ldr	r1, [pc, #60]	@ (8002124 <UnlinkTimer+0x100>)
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	330c      	adds	r3, #12
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80020f6:	4b09      	ldr	r3, [pc, #36]	@ (800211c <UnlinkTimer+0xf8>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b06      	cmp	r3, #6
 80020fe:	d107      	bne.n	8002110 <UnlinkTimer+0xec>
 8002100:	79bb      	ldrb	r3, [r7, #6]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d104      	bne.n	8002110 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002106:	4b08      	ldr	r3, [pc, #32]	@ (8002128 <UnlinkTimer+0x104>)
 8002108:	f04f 32ff 	mov.w	r2, #4294967295
 800210c:	601a      	str	r2, [r3, #0]
  }

  return;
 800210e:	bf00      	nop
 8002110:	bf00      	nop
}
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	200004f4 	.word	0x200004f4
 8002120:	200004f5 	.word	0x200004f5
 8002124:	20000464 	.word	0x20000464
 8002128:	200004f8 	.word	0x200004f8

0800212c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002132:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <ReturnTimeElapsed+0x70>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213a:	d026      	beq.n	800218a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800213c:	f7ff fe02 	bl	8001d44 <ReadRtcSsrValue>
 8002140:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002142:	4b16      	ldr	r3, [pc, #88]	@ (800219c <ReturnTimeElapsed+0x70>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	429a      	cmp	r2, r3
 800214a:	d805      	bhi.n	8002158 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800214c:	4b13      	ldr	r3, [pc, #76]	@ (800219c <ReturnTimeElapsed+0x70>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	e00a      	b.n	800216e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <ReturnTimeElapsed+0x74>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002164:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <ReturnTimeElapsed+0x70>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	4413      	add	r3, r2
 800216c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <ReturnTimeElapsed+0x78>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800217c:	4b0a      	ldr	r3, [pc, #40]	@ (80021a8 <ReturnTimeElapsed+0x7c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	40d3      	lsrs	r3, r2
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	e001      	b.n	800218e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	b29b      	uxth	r3, r3
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200004f8 	.word	0x200004f8
 80021a0:	20000500 	.word	0x20000500
 80021a4:	200004fe 	.word	0x200004fe
 80021a8:	200004fd 	.word	0x200004fd

080021ac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d108      	bne.n	80021ce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021bc:	f7ff fdc2 	bl	8001d44 <ReadRtcSsrValue>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4a21      	ldr	r2, [pc, #132]	@ (8002248 <RestartWakeupCounter+0x9c>)
 80021c4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021c6:	2003      	movs	r0, #3
 80021c8:	f006 fb6d 	bl	80088a6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80021cc:	e039      	b.n	8002242 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d803      	bhi.n	80021dc <RestartWakeupCounter+0x30>
 80021d4:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <RestartWakeupCounter+0xa0>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d002      	beq.n	80021e2 <RestartWakeupCounter+0x36>
      Value -= 1;
 80021dc:	88fb      	ldrh	r3, [r7, #6]
 80021de:	3b01      	subs	r3, #1
 80021e0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80021e2:	bf00      	nop
 80021e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <RestartWakeupCounter+0xa4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f8      	beq.n	80021e4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80021f2:	4b17      	ldr	r3, [pc, #92]	@ (8002250 <RestartWakeupCounter+0xa4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <RestartWakeupCounter+0xa4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002202:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002204:	4b13      	ldr	r3, [pc, #76]	@ (8002254 <RestartWakeupCounter+0xa8>)
 8002206:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800220a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800220c:	2003      	movs	r0, #3
 800220e:	f006 fb58 	bl	80088c2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <RestartWakeupCounter+0xac>)
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	0c1b      	lsrs	r3, r3, #16
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	88fa      	ldrh	r2, [r7, #6]
 800221c:	490e      	ldr	r1, [pc, #56]	@ (8002258 <RestartWakeupCounter+0xac>)
 800221e:	4313      	orrs	r3, r2
 8002220:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002222:	f7ff fd8f 	bl	8001d44 <ReadRtcSsrValue>
 8002226:	4603      	mov	r3, r0
 8002228:	4a07      	ldr	r2, [pc, #28]	@ (8002248 <RestartWakeupCounter+0x9c>)
 800222a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800222c:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <RestartWakeupCounter+0xa4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	4b07      	ldr	r3, [pc, #28]	@ (8002250 <RestartWakeupCounter+0xa4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800223a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800223c:	f3af 8000 	nop.w
  return ;
 8002240:	bf00      	nop
}
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200004f8 	.word	0x200004f8
 800224c:	200004fd 	.word	0x200004fd
 8002250:	20000d38 	.word	0x20000d38
 8002254:	58000800 	.word	0x58000800
 8002258:	40002800 	.word	0x40002800

0800225c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002262:	4b45      	ldr	r3, [pc, #276]	@ (8002378 <RescheduleTimerList+0x11c>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800226a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226e:	d107      	bne.n	8002280 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002270:	bf00      	nop
 8002272:	4b42      	ldr	r3, [pc, #264]	@ (800237c <RescheduleTimerList+0x120>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f8      	bne.n	8002272 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002280:	4b3e      	ldr	r3, [pc, #248]	@ (800237c <RescheduleTimerList+0x120>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	4b3d      	ldr	r3, [pc, #244]	@ (800237c <RescheduleTimerList+0x120>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800228e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002290:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <RescheduleTimerList+0x124>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002296:	7bfa      	ldrb	r2, [r7, #15]
 8002298:	493a      	ldr	r1, [pc, #232]	@ (8002384 <RescheduleTimerList+0x128>)
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	3308      	adds	r3, #8
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80022aa:	f7ff ff3f 	bl	800212c <ReturnTimeElapsed>
 80022ae:	4603      	mov	r3, r0
 80022b0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d205      	bcs.n	80022c6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022be:	4b32      	ldr	r3, [pc, #200]	@ (8002388 <RescheduleTimerList+0x12c>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e04d      	b.n	8002362 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80022c6:	88fb      	ldrh	r3, [r7, #6]
 80022c8:	4a30      	ldr	r2, [pc, #192]	@ (800238c <RescheduleTimerList+0x130>)
 80022ca:	8812      	ldrh	r2, [r2, #0]
 80022cc:	b292      	uxth	r2, r2
 80022ce:	4413      	add	r3, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d906      	bls.n	80022e6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80022d8:	4b2c      	ldr	r3, [pc, #176]	@ (800238c <RescheduleTimerList+0x130>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80022de:	4b2a      	ldr	r3, [pc, #168]	@ (8002388 <RescheduleTimerList+0x12c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e03d      	b.n	8002362 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <RescheduleTimerList+0x12c>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022f6:	e034      	b.n	8002362 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	4922      	ldr	r1, [pc, #136]	@ (8002384 <RescheduleTimerList+0x128>)
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	440b      	add	r3, r1
 8002306:	3308      	adds	r3, #8
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	429a      	cmp	r2, r3
 800230e:	d20a      	bcs.n	8002326 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002310:	7bfa      	ldrb	r2, [r7, #15]
 8002312:	491c      	ldr	r1, [pc, #112]	@ (8002384 <RescheduleTimerList+0x128>)
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	440b      	add	r3, r1
 800231e:	3308      	adds	r3, #8
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e013      	b.n	800234e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002326:	7bfa      	ldrb	r2, [r7, #15]
 8002328:	4916      	ldr	r1, [pc, #88]	@ (8002384 <RescheduleTimerList+0x128>)
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	440b      	add	r3, r1
 8002334:	3308      	adds	r3, #8
 8002336:	6819      	ldr	r1, [r3, #0]
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	1ac9      	subs	r1, r1, r3
 800233e:	4811      	ldr	r0, [pc, #68]	@ (8002384 <RescheduleTimerList+0x128>)
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4403      	add	r3, r0
 800234a:	3308      	adds	r3, #8
 800234c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	490c      	ldr	r1, [pc, #48]	@ (8002384 <RescheduleTimerList+0x128>)
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	3315      	adds	r3, #21
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b06      	cmp	r3, #6
 8002366:	d1c7      	bne.n	80022f8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002368:	89bb      	ldrh	r3, [r7, #12]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff1e 	bl	80021ac <RestartWakeupCounter>

  return ;
 8002370:	bf00      	nop
}
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40002800 	.word	0x40002800
 800237c:	20000d38 	.word	0x20000d38
 8002380:	200004f4 	.word	0x200004f4
 8002384:	20000464 	.word	0x20000464
 8002388:	200004fc 	.word	0x200004fc
 800238c:	20000502 	.word	0x20000502

08002390 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	@ 0x28
 8002394:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002396:	f3ef 8310 	mrs	r3, PRIMASK
 800239a:	617b      	str	r3, [r7, #20]
  return(result);
 800239c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80023a0:	b672      	cpsid	i
}
 80023a2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023a4:	4b59      	ldr	r3, [pc, #356]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	22ca      	movs	r2, #202	@ 0xca
 80023aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80023ac:	4b57      	ldr	r3, [pc, #348]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2253      	movs	r2, #83	@ 0x53
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80023b4:	4b55      	ldr	r3, [pc, #340]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b54      	ldr	r3, [pc, #336]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023c2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80023c4:	4b52      	ldr	r3, [pc, #328]	@ (8002510 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80023cc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023d0:	4950      	ldr	r1, [pc, #320]	@ (8002514 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	440b      	add	r3, r1
 80023dc:	330c      	adds	r3, #12
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d16e      	bne.n	80024c4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80023e6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023ea:	494a      	ldr	r1, [pc, #296]	@ (8002514 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	440b      	add	r3, r1
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80023fa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023fe:	4945      	ldr	r1, [pc, #276]	@ (8002514 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002400:	4613      	mov	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	4413      	add	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	440b      	add	r3, r1
 800240a:	3310      	adds	r3, #16
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002410:	4b41      	ldr	r3, [pc, #260]	@ (8002518 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	d04c      	beq.n	80024b4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800241a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800241e:	493d      	ldr	r1, [pc, #244]	@ (8002514 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	330d      	adds	r3, #13
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d124      	bne.n	800247e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002434:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002438:	2101      	movs	r1, #1
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fdf2 	bl	8002024 <UnlinkTimer>
 8002440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002442:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f383 8810 	msr	PRIMASK, r3
}
 800244a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800244c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002450:	4930      	ldr	r1, [pc, #192]	@ (8002514 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002452:	4613      	mov	r3, r2
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	4413      	add	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	440b      	add	r3, r1
 800245c:	3304      	adds	r3, #4
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f9b8 	bl	80027dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	22ca      	movs	r2, #202	@ 0xca
 8002472:	625a      	str	r2, [r3, #36]	@ 0x24
 8002474:	4b25      	ldr	r3, [pc, #148]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2253      	movs	r2, #83	@ 0x53
 800247a:	625a      	str	r2, [r3, #36]	@ 0x24
 800247c:	e012      	b.n	80024a4 <HW_TS_RTC_Wakeup_Handler+0x114>
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f383 8810 	msr	PRIMASK, r3
}
 8002488:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800248a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f920 	bl	80026d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002494:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	22ca      	movs	r2, #202	@ 0xca
 800249a:	625a      	str	r2, [r3, #36]	@ 0x24
 800249c:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2253      	movs	r2, #83	@ 0x53
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80024a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	4619      	mov	r1, r3
 80024ac:	69b8      	ldr	r0, [r7, #24]
 80024ae:	f000 fa1b 	bl	80028e8 <HW_TS_RTC_Int_AppNot>
 80024b2:	e022      	b.n	80024fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80024b4:	f7ff fed2 	bl	800225c <RescheduleTimerList>
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f383 8810 	msr	PRIMASK, r3
}
 80024c2:	e01a      	b.n	80024fa <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024c4:	bf00      	nop
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f8      	beq.n	80024c6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80024e4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80024e6:	4b0d      	ldr	r3, [pc, #52]	@ (800251c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80024e8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f383 8810 	msr	PRIMASK, r3
}
 80024f8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024fa:	4b04      	ldr	r3, [pc, #16]	@ (800250c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	22ff      	movs	r2, #255	@ 0xff
 8002500:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002502:	bf00      	nop
}
 8002504:	3728      	adds	r7, #40	@ 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000d38 	.word	0x20000d38
 8002510:	200004f4 	.word	0x200004f4
 8002514:	20000464 	.word	0x20000464
 8002518:	200004fc 	.word	0x200004fc
 800251c:	58000800 	.word	0x58000800

08002520 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	6039      	str	r1, [r7, #0]
 800252a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800252c:	4b5e      	ldr	r3, [pc, #376]	@ (80026a8 <HW_TS_Init+0x188>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	22ca      	movs	r2, #202	@ 0xca
 8002532:	625a      	str	r2, [r3, #36]	@ 0x24
 8002534:	4b5c      	ldr	r3, [pc, #368]	@ (80026a8 <HW_TS_Init+0x188>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2253      	movs	r2, #83	@ 0x53
 800253a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800253c:	4b5b      	ldr	r3, [pc, #364]	@ (80026ac <HW_TS_Init+0x18c>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4a5a      	ldr	r2, [pc, #360]	@ (80026ac <HW_TS_Init+0x18c>)
 8002542:	f043 0320 	orr.w	r3, r3, #32
 8002546:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002548:	4b58      	ldr	r3, [pc, #352]	@ (80026ac <HW_TS_Init+0x18c>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f1c3 0304 	rsb	r3, r3, #4
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b55      	ldr	r3, [pc, #340]	@ (80026b0 <HW_TS_Init+0x190>)
 800255c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800255e:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HW_TS_Init+0x18c>)
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002566:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800256a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	fa92 f2a2 	rbit	r2, r2
 8002572:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002574:	68fa      	ldr	r2, [r7, #12]
 8002576:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	2a00      	cmp	r2, #0
 800257c:	d101      	bne.n	8002582 <HW_TS_Init+0x62>
  {
    return 32U;
 800257e:	2220      	movs	r2, #32
 8002580:	e003      	b.n	800258a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	fab2 f282 	clz	r2, r2
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	40d3      	lsrs	r3, r2
 800258c:	b2db      	uxtb	r3, r3
 800258e:	3301      	adds	r3, #1
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b48      	ldr	r3, [pc, #288]	@ (80026b4 <HW_TS_Init+0x194>)
 8002594:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002596:	4b45      	ldr	r3, [pc, #276]	@ (80026ac <HW_TS_Init+0x18c>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	b29b      	uxth	r3, r3
 800259c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	3301      	adds	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	4b44      	ldr	r3, [pc, #272]	@ (80026b8 <HW_TS_Init+0x198>)
 80025a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80025aa:	4b43      	ldr	r3, [pc, #268]	@ (80026b8 <HW_TS_Init+0x198>)
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	4a40      	ldr	r2, [pc, #256]	@ (80026b4 <HW_TS_Init+0x194>)
 80025b2:	7812      	ldrb	r2, [r2, #0]
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025bc:	4a3c      	ldr	r2, [pc, #240]	@ (80026b0 <HW_TS_Init+0x190>)
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	40d3      	lsrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d904      	bls.n	80025d8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80025ce:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <HW_TS_Init+0x19c>)
 80025d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025d4:	801a      	strh	r2, [r3, #0]
 80025d6:	e003      	b.n	80025e0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	4b37      	ldr	r3, [pc, #220]	@ (80026bc <HW_TS_Init+0x19c>)
 80025de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025e4:	f7ff fb9c 	bl	8001d20 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80025e8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025ec:	f7ff fb84 	bl	8001cf8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d13d      	bne.n	8002672 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80025f6:	4b32      	ldr	r3, [pc, #200]	@ (80026c0 <HW_TS_Init+0x1a0>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80025fc:	4b31      	ldr	r3, [pc, #196]	@ (80026c4 <HW_TS_Init+0x1a4>)
 80025fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002602:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002604:	2300      	movs	r3, #0
 8002606:	77fb      	strb	r3, [r7, #31]
 8002608:	e00c      	b.n	8002624 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800260a:	7ffa      	ldrb	r2, [r7, #31]
 800260c:	492e      	ldr	r1, [pc, #184]	@ (80026c8 <HW_TS_Init+0x1a8>)
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	440b      	add	r3, r1
 8002618:	330c      	adds	r3, #12
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800261e:	7ffb      	ldrb	r3, [r7, #31]
 8002620:	3301      	adds	r3, #1
 8002622:	77fb      	strb	r3, [r7, #31]
 8002624:	7ffb      	ldrb	r3, [r7, #31]
 8002626:	2b05      	cmp	r3, #5
 8002628:	d9ef      	bls.n	800260a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800262a:	4b28      	ldr	r3, [pc, #160]	@ (80026cc <HW_TS_Init+0x1ac>)
 800262c:	2206      	movs	r2, #6
 800262e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002630:	4b1d      	ldr	r3, [pc, #116]	@ (80026a8 <HW_TS_Init+0x188>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <HW_TS_Init+0x188>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800263e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002640:	4b19      	ldr	r3, [pc, #100]	@ (80026a8 <HW_TS_Init+0x188>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <HW_TS_Init+0x188>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002650:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002652:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <HW_TS_Init+0x1b0>)
 8002654:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002658:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800265a:	2003      	movs	r0, #3
 800265c:	f006 f931 	bl	80088c2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002660:	4b11      	ldr	r3, [pc, #68]	@ (80026a8 <HW_TS_Init+0x188>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	4b10      	ldr	r3, [pc, #64]	@ (80026a8 <HW_TS_Init+0x188>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	e009      	b.n	8002686 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002672:	4b0d      	ldr	r3, [pc, #52]	@ (80026a8 <HW_TS_Init+0x188>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002680:	2003      	movs	r0, #3
 8002682:	f006 f910 	bl	80088a6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002686:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HW_TS_Init+0x188>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	22ff      	movs	r2, #255	@ 0xff
 800268c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800268e:	2200      	movs	r2, #0
 8002690:	2103      	movs	r1, #3
 8002692:	2003      	movs	r0, #3
 8002694:	f006 f8c5 	bl	8008822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002698:	2003      	movs	r0, #3
 800269a:	f006 f8dc 	bl	8008856 <HAL_NVIC_EnableIRQ>

  return;
 800269e:	bf00      	nop
}
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000d38 	.word	0x20000d38
 80026ac:	40002800 	.word	0x40002800
 80026b0:	200004fd 	.word	0x200004fd
 80026b4:	200004fe 	.word	0x200004fe
 80026b8:	20000500 	.word	0x20000500
 80026bc:	20000502 	.word	0x20000502
 80026c0:	200004fc 	.word	0x200004fc
 80026c4:	200004f8 	.word	0x200004f8
 80026c8:	20000464 	.word	0x20000464
 80026cc:	200004f4 	.word	0x200004f4
 80026d0:	58000800 	.word	0x58000800

080026d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026de:	f3ef 8310 	mrs	r3, PRIMASK
 80026e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80026e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80026e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80026e8:	b672      	cpsid	i
}
 80026ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80026ec:	2003      	movs	r0, #3
 80026ee:	f006 f8c0 	bl	8008872 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80026f2:	4b34      	ldr	r3, [pc, #208]	@ (80027c4 <HW_TS_Stop+0xf0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	22ca      	movs	r2, #202	@ 0xca
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80026fa:	4b32      	ldr	r3, [pc, #200]	@ (80027c4 <HW_TS_Stop+0xf0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2253      	movs	r2, #83	@ 0x53
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002702:	79fa      	ldrb	r2, [r7, #7]
 8002704:	4930      	ldr	r1, [pc, #192]	@ (80027c8 <HW_TS_Stop+0xf4>)
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	330c      	adds	r3, #12
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d142      	bne.n	80027a0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fc80 	bl	8002024 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002724:	4b29      	ldr	r3, [pc, #164]	@ (80027cc <HW_TS_Stop+0xf8>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800272a:	7cfb      	ldrb	r3, [r7, #19]
 800272c:	2b06      	cmp	r3, #6
 800272e:	d12f      	bne.n	8002790 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002730:	4b27      	ldr	r3, [pc, #156]	@ (80027d0 <HW_TS_Stop+0xfc>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273c:	d107      	bne.n	800274e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800273e:	bf00      	nop
 8002740:	4b20      	ldr	r3, [pc, #128]	@ (80027c4 <HW_TS_Stop+0xf0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f8      	bne.n	8002740 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800274e:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HW_TS_Stop+0xf0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <HW_TS_Stop+0xf0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800275c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800275e:	bf00      	nop
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <HW_TS_Stop+0xf0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f8      	beq.n	8002760 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800276e:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <HW_TS_Stop+0xf0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	4b13      	ldr	r3, [pc, #76]	@ (80027c4 <HW_TS_Stop+0xf0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800277e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002780:	4b14      	ldr	r3, [pc, #80]	@ (80027d4 <HW_TS_Stop+0x100>)
 8002782:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002786:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002788:	2003      	movs	r0, #3
 800278a:	f006 f89a 	bl	80088c2 <HAL_NVIC_ClearPendingIRQ>
 800278e:	e007      	b.n	80027a0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002790:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HW_TS_Stop+0x104>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	b2db      	uxtb	r3, r3
 8002796:	7cfa      	ldrb	r2, [r7, #19]
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800279c:	f7ff fd5e 	bl	800225c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HW_TS_Stop+0xf0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	22ff      	movs	r2, #255	@ 0xff
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80027a8:	2003      	movs	r0, #3
 80027aa:	f006 f854 	bl	8008856 <HAL_NVIC_EnableIRQ>
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f383 8810 	msr	PRIMASK, r3
}
 80027b8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80027ba:	bf00      	nop
}
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	20000d38 	.word	0x20000d38
 80027c8:	20000464 	.word	0x20000464
 80027cc:	200004f4 	.word	0x200004f4
 80027d0:	40002800 	.word	0x40002800
 80027d4:	58000800 	.word	0x58000800
 80027d8:	200004f5 	.word	0x200004f5

080027dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	6039      	str	r1, [r7, #0]
 80027e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80027e8:	79fa      	ldrb	r2, [r7, #7]
 80027ea:	493b      	ldr	r1, [pc, #236]	@ (80028d8 <HW_TS_Start+0xfc>)
 80027ec:	4613      	mov	r3, r2
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4413      	add	r3, r2
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	440b      	add	r3, r1
 80027f6:	330c      	adds	r3, #12
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d103      	bne.n	8002808 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002800:	79fb      	ldrb	r3, [r7, #7]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff ff66 	bl	80026d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002808:	f3ef 8310 	mrs	r3, PRIMASK
 800280c:	60fb      	str	r3, [r7, #12]
  return(result);
 800280e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002810:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002812:	b672      	cpsid	i
}
 8002814:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002816:	2003      	movs	r0, #3
 8002818:	f006 f82b 	bl	8008872 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800281c:	4b2f      	ldr	r3, [pc, #188]	@ (80028dc <HW_TS_Start+0x100>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	22ca      	movs	r2, #202	@ 0xca
 8002822:	625a      	str	r2, [r3, #36]	@ 0x24
 8002824:	4b2d      	ldr	r3, [pc, #180]	@ (80028dc <HW_TS_Start+0x100>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2253      	movs	r2, #83	@ 0x53
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800282c:	79fa      	ldrb	r2, [r7, #7]
 800282e:	492a      	ldr	r1, [pc, #168]	@ (80028d8 <HW_TS_Start+0xfc>)
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	440b      	add	r3, r1
 800283a:	330c      	adds	r3, #12
 800283c:	2202      	movs	r2, #2
 800283e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002840:	79fa      	ldrb	r2, [r7, #7]
 8002842:	4925      	ldr	r1, [pc, #148]	@ (80028d8 <HW_TS_Start+0xfc>)
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3308      	adds	r3, #8
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002854:	79fa      	ldrb	r2, [r7, #7]
 8002856:	4920      	ldr	r1, [pc, #128]	@ (80028d8 <HW_TS_Start+0xfc>)
 8002858:	4613      	mov	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	440b      	add	r3, r1
 8002862:	3304      	adds	r3, #4
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fb30 	bl	8001ed0 <linkTimer>
 8002870:	4603      	mov	r3, r0
 8002872:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <HW_TS_Start+0x104>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800287a:	4b1a      	ldr	r3, [pc, #104]	@ (80028e4 <HW_TS_Start+0x108>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	7c7a      	ldrb	r2, [r7, #17]
 8002882:	429a      	cmp	r2, r3
 8002884:	d002      	beq.n	800288c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002886:	f7ff fce9 	bl	800225c <RescheduleTimerList>
 800288a:	e013      	b.n	80028b4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800288c:	79fa      	ldrb	r2, [r7, #7]
 800288e:	4912      	ldr	r1, [pc, #72]	@ (80028d8 <HW_TS_Start+0xfc>)
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	440b      	add	r3, r1
 800289a:	3308      	adds	r3, #8
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	8a7b      	ldrh	r3, [r7, #18]
 80028a0:	79fa      	ldrb	r2, [r7, #7]
 80028a2:	1ac9      	subs	r1, r1, r3
 80028a4:	480c      	ldr	r0, [pc, #48]	@ (80028d8 <HW_TS_Start+0xfc>)
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4403      	add	r3, r0
 80028b0:	3308      	adds	r3, #8
 80028b2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80028b4:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <HW_TS_Start+0x100>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	22ff      	movs	r2, #255	@ 0xff
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80028bc:	2003      	movs	r0, #3
 80028be:	f005 ffca 	bl	8008856 <HAL_NVIC_EnableIRQ>
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f383 8810 	msr	PRIMASK, r3
}
 80028cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80028ce:	bf00      	nop
}
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000464 	.word	0x20000464
 80028dc:	20000d38 	.word	0x20000d38
 80028e0:	200004f4 	.word	0x200004f4
 80028e4:	200004f5 	.word	0x200004f5

080028e8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	460b      	mov	r3, r1
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4798      	blx	r3

  return;
 80028fa:	bf00      	nop
}
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <LL_AHB2_GRP1_EnableClock>:
{
 8002902:	b480      	push	{r7}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800290a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002910:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4313      	orrs	r3, r2
 8002918:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800291a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800291e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4013      	ands	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002926:	68fb      	ldr	r3, [r7, #12]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800293c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002940:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002942:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4313      	orrs	r3, r2
 800294a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002950:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4013      	ands	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002958:	68fb      	ldr	r3, [r7, #12]
}
 800295a:	bf00      	nop
 800295c:	3714      	adds	r7, #20
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800296c:	4b1b      	ldr	r3, [pc, #108]	@ (80029dc <MX_I2C1_Init+0x74>)
 800296e:	4a1c      	ldr	r2, [pc, #112]	@ (80029e0 <MX_I2C1_Init+0x78>)
 8002970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8002972:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <MX_I2C1_Init+0x74>)
 8002974:	4a1b      	ldr	r2, [pc, #108]	@ (80029e4 <MX_I2C1_Init+0x7c>)
 8002976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002978:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <MX_I2C1_Init+0x74>)
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800297e:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <MX_I2C1_Init+0x74>)
 8002980:	2201      	movs	r2, #1
 8002982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002984:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <MX_I2C1_Init+0x74>)
 8002986:	2200      	movs	r2, #0
 8002988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800298a:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <MX_I2C1_Init+0x74>)
 800298c:	2200      	movs	r2, #0
 800298e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002990:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <MX_I2C1_Init+0x74>)
 8002992:	2200      	movs	r2, #0
 8002994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002996:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <MX_I2C1_Init+0x74>)
 8002998:	2200      	movs	r2, #0
 800299a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800299c:	4b0f      	ldr	r3, [pc, #60]	@ (80029dc <MX_I2C1_Init+0x74>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80029a2:	480e      	ldr	r0, [pc, #56]	@ (80029dc <MX_I2C1_Init+0x74>)
 80029a4:	f006 fcd0 	bl	8009348 <HAL_I2C_Init>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80029ae:	f000 fb21 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029b2:	2100      	movs	r1, #0
 80029b4:	4809      	ldr	r0, [pc, #36]	@ (80029dc <MX_I2C1_Init+0x74>)
 80029b6:	f007 fa53 	bl	8009e60 <HAL_I2CEx_ConfigAnalogFilter>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80029c0:	f000 fb18 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80029c4:	2100      	movs	r1, #0
 80029c6:	4805      	ldr	r0, [pc, #20]	@ (80029dc <MX_I2C1_Init+0x74>)
 80029c8:	f007 fa95 	bl	8009ef6 <HAL_I2CEx_ConfigDigitalFilter>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80029d2:	f000 fb0f 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000504 	.word	0x20000504
 80029e0:	40005400 	.word	0x40005400
 80029e4:	10707dbc 	.word	0x10707dbc

080029e8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 80029ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002a68 <MX_I2C3_Init+0x80>)
 80029f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300B29;
 80029f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 80029f4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a6c <MX_I2C3_Init+0x84>)
 80029f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a04:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002a10:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a16:	4b13      	ldr	r3, [pc, #76]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a1c:	4b11      	ldr	r3, [pc, #68]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002a22:	4810      	ldr	r0, [pc, #64]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 8002a24:	f006 fc90 	bl	8009348 <HAL_I2C_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002a2e:	f000 fae1 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a32:	2100      	movs	r1, #0
 8002a34:	480b      	ldr	r0, [pc, #44]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 8002a36:	f007 fa13 	bl	8009e60 <HAL_I2CEx_ConfigAnalogFilter>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002a40:	f000 fad8 	bl	8002ff4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002a44:	2100      	movs	r1, #0
 8002a46:	4807      	ldr	r0, [pc, #28]	@ (8002a64 <MX_I2C3_Init+0x7c>)
 8002a48:	f007 fa55 	bl	8009ef6 <HAL_I2CEx_ConfigDigitalFilter>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002a52:	f000 facf 	bl	8002ff4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8002a56:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002a5a:	f007 fa99 	bl	8009f90 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20000558 	.word	0x20000558
 8002a68:	40005c00 	.word	0x40005c00
 8002a6c:	00300b29 	.word	0x00300b29

08002a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b09c      	sub	sp, #112	@ 0x70
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	2250      	movs	r2, #80	@ 0x50
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f018 fcde 	bl	801b452 <memset>
  if(i2cHandle->Instance==I2C1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a37      	ldr	r2, [pc, #220]	@ (8002b78 <HAL_I2C_MspInit+0x108>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d127      	bne.n	8002af0 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002aa0:	2304      	movs	r3, #4
 8002aa2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002aa4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8002aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aaa:	f107 030c 	add.w	r3, r7, #12
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f00a fb5d 	bl	800d16e <HAL_RCCEx_PeriphCLKConfig>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002aba:	f000 fa9b 	bl	8002ff4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002abe:	2002      	movs	r0, #2
 8002ac0:	f7ff ff1f 	bl	8002902 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ac4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aca:	2312      	movs	r3, #18
 8002acc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ada:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4826      	ldr	r0, [pc, #152]	@ (8002b7c <HAL_I2C_MspInit+0x10c>)
 8002ae2:	f006 fa3b 	bl	8008f5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ae6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002aea:	f7ff ff23 	bl	8002934 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002aee:	e03e      	b.n	8002b6e <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a22      	ldr	r2, [pc, #136]	@ (8002b80 <HAL_I2C_MspInit+0x110>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d139      	bne.n	8002b6e <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002afa:	2308      	movs	r3, #8
 8002afc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002afe:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f00a fb30 	bl	800d16e <HAL_RCCEx_PeriphCLKConfig>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002b14:	f000 fa6e 	bl	8002ff4 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b18:	2001      	movs	r0, #1
 8002b1a:	f7ff fef2 	bl	8002902 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f7ff feef 	bl	8002902 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b24:	2380      	movs	r3, #128	@ 0x80
 8002b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b28:	2312      	movs	r3, #18
 8002b2a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2300      	movs	r3, #0
 8002b32:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b34:	2304      	movs	r3, #4
 8002b36:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b42:	f006 fa0b 	bl	8008f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002b46:	2310      	movs	r3, #16
 8002b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b4a:	2312      	movs	r3, #18
 8002b4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b56:	2304      	movs	r3, #4
 8002b58:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4806      	ldr	r0, [pc, #24]	@ (8002b7c <HAL_I2C_MspInit+0x10c>)
 8002b62:	f006 f9fb 	bl	8008f5c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b66:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002b6a:	f7ff fee3 	bl	8002934 <LL_APB1_GRP1_EnableClock>
}
 8002b6e:	bf00      	nop
 8002b70:	3770      	adds	r7, #112	@ 0x70
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40005400 	.word	0x40005400
 8002b7c:	48000400 	.word	0x48000400
 8002b80:	40005c00 	.word	0x40005c00

08002b84 <LL_AHB3_GRP1_EnableClock>:
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002b9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
	...

08002bb8 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002bbc:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <MX_IPCC_Init+0x20>)
 8002bbe:	4a07      	ldr	r2, [pc, #28]	@ (8002bdc <MX_IPCC_Init+0x24>)
 8002bc0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002bc2:	4805      	ldr	r0, [pc, #20]	@ (8002bd8 <MX_IPCC_Init+0x20>)
 8002bc4:	f007 f9f6 	bl	8009fb4 <HAL_IPCC_Init>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002bce:	f000 fa11 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002bd2:	bf00      	nop
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	200005ac 	.word	0x200005ac
 8002bdc:	58000c00 	.word	0x58000c00

08002be0 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	@ (8002c24 <HAL_IPCC_MspInit+0x44>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002bf2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002bf6:	f7ff ffc5 	bl	8002b84 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	202c      	movs	r0, #44	@ 0x2c
 8002c00:	f005 fe0f 	bl	8008822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002c04:	202c      	movs	r0, #44	@ 0x2c
 8002c06:	f005 fe26 	bl	8008856 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	202d      	movs	r0, #45	@ 0x2d
 8002c10:	f005 fe07 	bl	8008822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002c14:	202d      	movs	r0, #45	@ 0x2d
 8002c16:	f005 fe1e 	bl	8008856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	58000c00 	.word	0x58000c00

08002c28 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	3220      	adds	r2, #32
 8002c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c3c:	4a05      	ldr	r2, [pc, #20]	@ (8002c54 <LL_HSEM_1StepLock+0x2c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d001      	beq.n	8002c46 <LL_HSEM_1StepLock+0x1e>
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <LL_HSEM_1StepLock+0x20>
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	80000400 	.word	0x80000400

08002c58 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c68:	d12f      	bne.n	8002cca <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002c6a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002c6e:	4833      	ldr	r0, [pc, #204]	@ (8002d3c <HAL_GPIO_EXTI_Callback+0xe4>)
 8002c70:	f006 fae4 	bl	800923c <HAL_GPIO_ReadPin>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002c7a:	4b31      	ldr	r3, [pc, #196]	@ (8002d40 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8002c80:	f004 fbf0 	bl	8007464 <HAL_GetTick>
 8002c84:	4603      	mov	r3, r0
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b2e      	ldr	r3, [pc, #184]	@ (8002d44 <HAL_GPIO_EXTI_Callback+0xec>)
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	e010      	b.n	8002cb0 <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 8002c8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002d48 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	3301      	adds	r3, #1
 8002c94:	4a2c      	ldr	r2, [pc, #176]	@ (8002d48 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002c96:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002c98:	f004 fbe4 	bl	8007464 <HAL_GetTick>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4a29      	ldr	r2, [pc, #164]	@ (8002d44 <HAL_GPIO_EXTI_Callback+0xec>)
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b26      	ldr	r3, [pc, #152]	@ (8002d40 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002ca8:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002caa:	4b26      	ldr	r3, [pc, #152]	@ (8002d44 <HAL_GPIO_EXTI_Callback+0xec>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8002cb0:	4b23      	ldr	r3, [pc, #140]	@ (8002d40 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002cb8:	db07      	blt.n	8002cca <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8002cba:	4b24      	ldr	r3, [pc, #144]	@ (8002d4c <HAL_GPIO_EXTI_Callback+0xf4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	4a22      	ldr	r2, [pc, #136]	@ (8002d4c <HAL_GPIO_EXTI_Callback+0xf4>)
 8002cc2:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8002cc4:	4b20      	ldr	r3, [pc, #128]	@ (8002d48 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cd0:	d12f      	bne.n	8002d32 <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 8002cd2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cd6:	4819      	ldr	r0, [pc, #100]	@ (8002d3c <HAL_GPIO_EXTI_Callback+0xe4>)
 8002cd8:	f006 fab0 	bl	800923c <HAL_GPIO_ReadPin>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d50 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8002ce8:	f004 fbbc 	bl	8007464 <HAL_GetTick>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b18      	ldr	r3, [pc, #96]	@ (8002d54 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e010      	b.n	8002d18 <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 8002cf6:	4b18      	ldr	r3, [pc, #96]	@ (8002d58 <HAL_GPIO_EXTI_Callback+0x100>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a16      	ldr	r2, [pc, #88]	@ (8002d58 <HAL_GPIO_EXTI_Callback+0x100>)
 8002cfe:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8002d00:	f004 fbb0 	bl	8007464 <HAL_GetTick>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4a13      	ldr	r2, [pc, #76]	@ (8002d54 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d10:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8002d18:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <HAL_GPIO_EXTI_Callback+0xf8>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002d20:	db07      	blt.n	8002d32 <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <HAL_GPIO_EXTI_Callback+0x104>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a0c      	ldr	r2, [pc, #48]	@ (8002d5c <HAL_GPIO_EXTI_Callback+0x104>)
 8002d2a:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_GPIO_EXTI_Callback+0x100>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	48000800 	.word	0x48000800
 8002d40:	20000b9c 	.word	0x20000b9c
 8002d44:	20000ba4 	.word	0x20000ba4
 8002d48:	20000878 	.word	0x20000878
 8002d4c:	20000bb0 	.word	0x20000bb0
 8002d50:	20000ba0 	.word	0x20000ba0
 8002d54:	20000ba8 	.word	0x20000ba8
 8002d58:	2000087c 	.word	0x2000087c
 8002d5c:	20000bac 	.word	0x20000bac

08002d60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d66:	f004 fb0f 	bl	8007388 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002d6a:	f7fe fd85 	bl	8001878 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d6e:	f000 f8a3 	bl	8002eb8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002d72:	f000 f905 	bl	8002f80 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002d76:	f7ff ff1f 	bl	8002bb8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002d7a:	f000 fd45 	bl	8003808 <MX_RF_Init>
  MX_GPIO_Init();
 8002d7e:	f7fe ff65 	bl	8001c4c <MX_GPIO_Init>
  MX_DMA_Init();
 8002d82:	f7fe ff30 	bl	8001be6 <MX_DMA_Init>
  MX_ADC1_Init();
 8002d86:	f7fe fafd 	bl	8001384 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002d8a:	f7ff fded 	bl	8002968 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002d8e:	f7ff fe2b 	bl	80029e8 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002d92:	f004 f8f5 	bl	8006f80 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002d96:	f003 fe49 	bl	8006a2c <MX_TIM2_Init>
  MX_TIM16_Init();
 8002d9a:	f003 fe95 	bl	8006ac8 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002d9e:	f003 febb 	bl	8006b18 <MX_TIM17_Init>
  MX_SPI1_Init();
 8002da2:	f000 fe37 	bl	8003a14 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002da6:	f004 f937 	bl	8007018 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002daa:	f015 fc2b 	bl	8018604 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002dae:	f000 fd5d 	bl	800386c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */



  	ssd1306_Init();
 8002db2:	f001 f8b5 	bl	8003f20 <ssd1306_Init>

  	HAL_Delay(10);
 8002db6:	200a      	movs	r0, #10
 8002db8:	f7fe fe99 	bl	8001aee <HAL_Delay>
  	ssd1306_Fill(Black);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f001 f919 	bl	8003ff4 <ssd1306_Fill>

  	ssd1306_DrawBitmap(32, 32, startimg, 64, 32, White);
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	9301      	str	r3, [sp, #4]
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	9300      	str	r3, [sp, #0]
 8002dca:	2340      	movs	r3, #64	@ 0x40
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8002e78 <main+0x118>)
 8002dce:	2120      	movs	r1, #32
 8002dd0:	2020      	movs	r0, #32
 8002dd2:	f001 fb5a 	bl	800448a <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002dd6:	f001 f925 	bl	8004024 <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002dda:	2203      	movs	r2, #3
 8002ddc:	4927      	ldr	r1, [pc, #156]	@ (8002e7c <main+0x11c>)
 8002dde:	4828      	ldr	r0, [pc, #160]	@ (8002e80 <main+0x120>)
 8002de0:	f004 fe78 	bl	8007ad4 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002de4:	4827      	ldr	r0, [pc, #156]	@ (8002e84 <main+0x124>)
 8002de6:	f00c f82f 	bl	800ee48 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002dea:	4827      	ldr	r0, [pc, #156]	@ (8002e88 <main+0x128>)
 8002dec:	f00c f872 	bl	800eed4 <HAL_TIM_Base_Start_IT>
  	//HAL_TIM_Base_Start_IT(&htim17);

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002df0:	2201      	movs	r2, #1
 8002df2:	2101      	movs	r1, #1
 8002df4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002df8:	f006 fa38 	bl	800926c <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002dfc:	2064      	movs	r0, #100	@ 0x64
 8002dfe:	f7fe fe76 	bl	8001aee <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002e02:	4822      	ldr	r0, [pc, #136]	@ (8002e8c <main+0x12c>)
 8002e04:	f00c fd2c 	bl	800f860 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002e08:	2240      	movs	r2, #64	@ 0x40
 8002e0a:	4921      	ldr	r1, [pc, #132]	@ (8002e90 <main+0x130>)
 8002e0c:	481f      	ldr	r0, [pc, #124]	@ (8002e8c <main+0x12c>)
 8002e0e:	f00c fcdb 	bl	800f7c8 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8002e12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e16:	2131      	movs	r1, #49	@ 0x31
 8002e18:	481e      	ldr	r0, [pc, #120]	@ (8002e94 <main+0x134>)
 8002e1a:	f018 fb1a 	bl	801b452 <memset>
  	memset(flashwrite,'\0',256);
 8002e1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e22:	2100      	movs	r1, #0
 8002e24:	481c      	ldr	r0, [pc, #112]	@ (8002e98 <main+0x138>)
 8002e26:	f018 fb14 	bl	801b452 <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002e2a:	2232      	movs	r2, #50	@ 0x32
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	481b      	ldr	r0, [pc, #108]	@ (8002e9c <main+0x13c>)
 8002e30:	f018 fb0f 	bl	801b452 <memset>



  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea0 <main+0x140>)
 8002e38:	491a      	ldr	r1, [pc, #104]	@ (8002ea4 <main+0x144>)
 8002e3a:	481b      	ldr	r0, [pc, #108]	@ (8002ea8 <main+0x148>)
 8002e3c:	f014 fc49 	bl	80176d2 <SPIF_Init>





  	getindex();
 8002e40:	f000 ff3a 	bl	8003cb8 <getindex>

  	ssd1306_Fill(Black);
 8002e44:	2000      	movs	r0, #0
 8002e46:	f001 f8d5 	bl	8003ff4 <ssd1306_Fill>

  	state=STATE_SPEED;
 8002e4a:	4b18      	ldr	r3, [pc, #96]	@ (8002eac <main+0x14c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
  	BTN_A=0;
 8002e50:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <main+0x150>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
  	BTN_A_LONG=0;
 8002e56:	4b17      	ldr	r3, [pc, #92]	@ (8002eb4 <main+0x154>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

  	HAL_Delay(700);
 8002e5c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002e60:	f7fe fe45 	bl	8001aee <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002e64:	f7fe fd16 	bl	8001894 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002e68:	f7fe fe66 	bl	8001b38 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002e6c:	f001 fd78 	bl	8004960 <statemachine>
	  ssd1306_UpdateScreen();
 8002e70:	f001 f8d8 	bl	8004024 <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002e74:	bf00      	nop
 8002e76:	e7f7      	b.n	8002e68 <main+0x108>
 8002e78:	08020068 	.word	0x08020068
 8002e7c:	200008a0 	.word	0x200008a0
 8002e80:	200003a0 	.word	0x200003a0
 8002e84:	20001204 	.word	0x20001204
 8002e88:	20001250 	.word	0x20001250
 8002e8c:	200012e8 	.word	0x200012e8
 8002e90:	200005f4 	.word	0x200005f4
 8002e94:	200009b4 	.word	0x200009b4
 8002e98:	200008b4 	.word	0x200008b4
 8002e9c:	20000ad8 	.word	0x20000ad8
 8002ea0:	48000400 	.word	0x48000400
 8002ea4:	20000d90 	.word	0x20000d90
 8002ea8:	20000880 	.word	0x20000880
 8002eac:	200005e8 	.word	0x200005e8
 8002eb0:	20000878 	.word	0x20000878
 8002eb4:	20000bb0 	.word	0x20000bb0

08002eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b09a      	sub	sp, #104	@ 0x68
 8002ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ebe:	f107 0320 	add.w	r3, r7, #32
 8002ec2:	2248      	movs	r2, #72	@ 0x48
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f018 fac3 	bl	801b452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	605a      	str	r2, [r3, #4]
 8002ed4:	609a      	str	r2, [r3, #8]
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	611a      	str	r2, [r3, #16]
 8002eda:	615a      	str	r2, [r3, #20]
 8002edc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ede:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <SystemClock_Config+0xc4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee6:	4a25      	ldr	r2, [pc, #148]	@ (8002f7c <SystemClock_Config+0xc4>)
 8002ee8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	4b23      	ldr	r3, [pc, #140]	@ (8002f7c <SystemClock_Config+0xc4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002efa:	2303      	movs	r3, #3
 8002efc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002efe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f0a:	2340      	movs	r3, #64	@ 0x40
 8002f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f0e:	2302      	movs	r3, #2
 8002f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002f12:	2303      	movs	r3, #3
 8002f14:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002f16:	2310      	movs	r3, #16
 8002f18:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002f24:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002f28:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002f2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f2e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f30:	f107 0320 	add.w	r3, r7, #32
 8002f34:	4618      	mov	r0, r3
 8002f36:	f009 f969 	bl	800c20c <HAL_RCC_OscConfig>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002f40:	f000 f858 	bl	8002ff4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002f44:	236f      	movs	r3, #111	@ 0x6f
 8002f46:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f50:	2300      	movs	r3, #0
 8002f52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002f58:	2380      	movs	r3, #128	@ 0x80
 8002f5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002f60:	1d3b      	adds	r3, r7, #4
 8002f62:	2103      	movs	r1, #3
 8002f64:	4618      	mov	r0, r3
 8002f66:	f009 fcc5 	bl	800c8f4 <HAL_RCC_ClockConfig>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002f70:	f000 f840 	bl	8002ff4 <Error_Handler>
  }
}
 8002f74:	bf00      	nop
 8002f76:	3768      	adds	r7, #104	@ 0x68
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	58000400 	.word	0x58000400

08002f80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b094      	sub	sp, #80	@ 0x50
 8002f84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f86:	463b      	mov	r3, r7
 8002f88:	2250      	movs	r2, #80	@ 0x50
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f018 fa60 	bl	801b452 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002f92:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002f96:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002f98:	2306      	movs	r3, #6
 8002f9a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002f9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fa0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002fa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fa6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002fa8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002fac:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002fae:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002fb2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002fb4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002fb8:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002fba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002fc0:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002fc4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002fca:	2310      	movs	r3, #16
 8002fcc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fce:	463b      	mov	r3, r7
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f00a f8cc 	bl	800d16e <HAL_RCCEx_PeriphCLKConfig>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002fdc:	f000 f80a 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002fe0:	2105      	movs	r1, #5
 8002fe2:	4803      	ldr	r0, [pc, #12]	@ (8002ff0 <PeriphCommonClock_Config+0x70>)
 8002fe4:	f7ff fe20 	bl	8002c28 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8002fe8:	bf00      	nop
 8002fea:	3750      	adds	r7, #80	@ 0x50
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	58001400 	.word	0x58001400

08002ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff8:	b672      	cpsid	i
}
 8002ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <Error_Handler+0x8>

08003000 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7fd f909 	bl	8000220 <strlen>
 800300e:	4603      	mov	r3, r0
 8003010:	2b04      	cmp	r3, #4
 8003012:	d801      	bhi.n	8003018 <gps_checksum+0x18>
 8003014:	2300      	movs	r3, #0
 8003016:	e038      	b.n	800308a <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7fd f901 	bl	8000220 <strlen>
 800301e:	4603      	mov	r3, r0
 8003020:	3b04      	subs	r3, #4
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd f8f8 	bl	8000220 <strlen>
 8003030:	4603      	mov	r3, r0
 8003032:	3b03      	subs	r3, #3
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	4413      	add	r3, r2
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e00a      	b.n	800305c <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	4413      	add	r3, r2
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	461a      	mov	r2, r3
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	4053      	eors	r3, r2
 8003054:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3301      	adds	r3, #1
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fd f8df 	bl	8000220 <strlen>
 8003062:	4603      	mov	r3, r0
 8003064:	1f5a      	subs	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	429a      	cmp	r2, r3
 800306a:	d8ec      	bhi.n	8003046 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 800306c:	f107 0308 	add.w	r3, r7, #8
 8003070:	2210      	movs	r2, #16
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f017 fa1d 	bl	801a4b4 <strtol>
 800307a:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	429a      	cmp	r2, r3
 8003082:	d101      	bne.n	8003088 <gps_checksum+0x88>
        return 1;
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <gps_checksum+0x8a>
    }
    else{
        return 0;
 8003088:	2300      	movs	r3, #0
    }
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b0b7      	sub	sp, #220	@ 0xdc
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 80030a4:	f107 0320 	add.w	r3, r7, #32
 80030a8:	2264      	movs	r2, #100	@ 0x64
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f018 f9d0 	bl	801b452 <memset>
    char *marker = strtok(inputString, ",");
 80030b2:	49c2      	ldr	r1, [pc, #776]	@ (80033bc <nmea_GPGGA+0x328>)
 80030b4:	6838      	ldr	r0, [r7, #0]
 80030b6:	f018 f9e7 	bl	801b488 <strtok>
 80030ba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80030be:	e027      	b.n	8003110 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80030c0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80030c4:	f7fd f8ac 	bl	8000220 <strlen>
 80030c8:	4603      	mov	r3, r0
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 80030d0:	1c63      	adds	r3, r4, #1
 80030d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80030d6:	4610      	mov	r0, r2
 80030d8:	f016 fa44 	bl	8019564 <malloc>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	00a3      	lsls	r3, r4, #2
 80030e2:	33d8      	adds	r3, #216	@ 0xd8
 80030e4:	443b      	add	r3, r7
 80030e6:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 80030ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030ee:	3b01      	subs	r3, #1
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	33d8      	adds	r3, #216	@ 0xd8
 80030f4:	443b      	add	r3, r7
 80030f6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030fa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80030fe:	4618      	mov	r0, r3
 8003100:	f018 fabb 	bl	801b67a <strcpy>
        marker = strtok(NULL, ",");
 8003104:	49ad      	ldr	r1, [pc, #692]	@ (80033bc <nmea_GPGGA+0x328>)
 8003106:	2000      	movs	r0, #0
 8003108:	f018 f9be 	bl	801b488 <strtok>
 800310c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8003110:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1d3      	bne.n	80030c0 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8003118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8003120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	332c      	adds	r3, #44	@ 0x2c
 800312c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312e:	4611      	mov	r1, r2
 8003130:	4618      	mov	r0, r3
 8003132:	f018 faa2 	bl	801b67a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8003136:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800313a:	2b53      	cmp	r3, #83	@ 0x53
 800313c:	d004      	beq.n	8003148 <nmea_GPGGA+0xb4>
 800313e:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8003142:	2b4e      	cmp	r3, #78	@ 0x4e
 8003144:	f040 8159 	bne.w	80033fa <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8003148:	2300      	movs	r3, #0
 800314a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800314e:	e010      	b.n	8003172 <nmea_GPGGA+0xde>
 8003150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003152:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003156:	4413      	add	r3, r2
 8003158:	7819      	ldrb	r1, [r3, #0]
 800315a:	f107 021c 	add.w	r2, r7, #28
 800315e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003162:	4413      	add	r3, r2
 8003164:	460a      	mov	r2, r1
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800316c:	3301      	adds	r3, #1
 800316e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003172:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003176:	2b01      	cmp	r3, #1
 8003178:	ddea      	ble.n	8003150 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003180:	e011      	b.n	80031a6 <nmea_GPGGA+0x112>
 8003182:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003188:	3302      	adds	r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	7819      	ldrb	r1, [r3, #0]
 800318e:	f107 0214 	add.w	r2, r7, #20
 8003192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003196:	4413      	add	r3, r2
 8003198:	460a      	mov	r2, r1
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031a0:	3301      	adds	r3, #1
 80031a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031aa:	2b05      	cmp	r3, #5
 80031ac:	dde9      	ble.n	8003182 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80031ae:	f107 031c 	add.w	r3, r7, #28
 80031b2:	220a      	movs	r2, #10
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f017 f97c 	bl	801a4b4 <strtol>
 80031bc:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f017 f894 	bl	801a2f4 <strtof>
 80031cc:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80031d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80031d4:	ee07 3a90 	vmov	s15, r3
 80031d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031dc:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 80031e0:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80033c0 <nmea_GPGGA+0x32c>
 80031e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	ee17 0a90 	vmov	r0, s15
 80031f0:	f7fd f982 	bl	80004f8 <__aeabi_f2d>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80031fc:	2300      	movs	r3, #0
 80031fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003202:	e010      	b.n	8003226 <nmea_GPGGA+0x192>
 8003204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800320a:	4413      	add	r3, r2
 800320c:	7819      	ldrb	r1, [r3, #0]
 800320e:	f107 0210 	add.w	r2, r7, #16
 8003212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003216:	4413      	add	r3, r2
 8003218:	460a      	mov	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]
 800321c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003220:	3301      	adds	r3, #1
 8003222:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800322a:	2b02      	cmp	r3, #2
 800322c:	ddea      	ble.n	8003204 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003234:	e011      	b.n	800325a <nmea_GPGGA+0x1c6>
 8003236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003238:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800323c:	3303      	adds	r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	7819      	ldrb	r1, [r3, #0]
 8003242:	f107 0208 	add.w	r2, r7, #8
 8003246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800324a:	4413      	add	r3, r2
 800324c:	460a      	mov	r2, r1
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003254:	3301      	adds	r3, #1
 8003256:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800325a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800325e:	2b05      	cmp	r3, #5
 8003260:	dde9      	ble.n	8003236 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003262:	f107 0310 	add.w	r3, r7, #16
 8003266:	220a      	movs	r2, #10
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f017 f922 	bl	801a4b4 <strtol>
 8003270:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8003274:	f107 0308 	add.w	r3, r7, #8
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f017 f83a 	bl	801a2f4 <strtof>
 8003280:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003284:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003288:	ee07 3a90 	vmov	s15, r3
 800328c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003290:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8003294:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80033c0 <nmea_GPGGA+0x32c>
 8003298:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800329c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a0:	ee17 0a90 	vmov	r0, s15
 80032a4:	f7fd f928 	bl	80004f8 <__aeabi_f2d>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80032bc:	f7fd fbdc 	bl	8000a78 <__aeabi_dcmpeq>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d176      	bne.n	80033b4 <nmea_GPGGA+0x320>
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80032d2:	f7fd fbd1 	bl	8000a78 <__aeabi_dcmpeq>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d16b      	bne.n	80033b4 <nmea_GPGGA+0x320>
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	4b38      	ldr	r3, [pc, #224]	@ (80033c4 <nmea_GPGGA+0x330>)
 80032e2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80032e6:	f7fd fbd1 	bl	8000a8c <__aeabi_dcmplt>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d061      	beq.n	80033b4 <nmea_GPGGA+0x320>
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	4b34      	ldr	r3, [pc, #208]	@ (80033c8 <nmea_GPGGA+0x334>)
 80032f6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80032fa:	f7fd fbc7 	bl	8000a8c <__aeabi_dcmplt>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d057      	beq.n	80033b4 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800330a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8003314:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800331c:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8003326:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f016 ffe1 	bl	801a2f4 <strtof>
 8003332:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 8003336:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800333a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800333e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003342:	d102      	bne.n	800334a <nmea_GPGGA+0x2b6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	e001      	b.n	800334e <nmea_GPGGA+0x2ba>
 800334a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 8003352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003354:	220a      	movs	r2, #10
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f017 f8ab 	bl	801a4b4 <strtol>
 800335e:	4602      	mov	r2, r0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8003364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003366:	220a      	movs	r2, #10
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f017 f8a2 	bl	801a4b4 <strtol>
 8003370:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8003374:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003378:	2b00      	cmp	r3, #0
 800337a:	bfcc      	ite	gt
 800337c:	2301      	movgt	r3, #1
 800337e:	2300      	movle	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	461a      	mov	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8003388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800338a:	2100      	movs	r1, #0
 800338c:	4618      	mov	r0, r3
 800338e:	f016 ffb1 	bl	801a2f4 <strtof>
 8003392:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8003396:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800339a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	d102      	bne.n	80033aa <nmea_GPGGA+0x316>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	e001      	b.n	80033ae <nmea_GPGGA+0x31a>
 80033aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80033b2:	e022      	b.n	80033fa <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80033b4:	2300      	movs	r3, #0
 80033b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033ba:	e016      	b.n	80033ea <nmea_GPGGA+0x356>
 80033bc:	0801fbec 	.word	0x0801fbec
 80033c0:	42700000 	.word	0x42700000
 80033c4:	40568000 	.word	0x40568000
 80033c8:	40668000 	.word	0x40668000
 80033cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	33d8      	adds	r3, #216	@ 0xd8
 80033d4:	443b      	add	r3, r7
 80033d6:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80033da:	4618      	mov	r0, r3
 80033dc:	f016 f8ca 	bl	8019574 <free>
 80033e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80033e4:	3301      	adds	r3, #1
 80033e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80033ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80033ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80033f2:	429a      	cmp	r2, r3
 80033f4:	dbea      	blt.n	80033cc <nmea_GPGGA+0x338>
            return 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e019      	b.n	800342e <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80033fa:	2300      	movs	r3, #0
 80033fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003400:	e00e      	b.n	8003420 <nmea_GPGGA+0x38c>
 8003402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	33d8      	adds	r3, #216	@ 0xd8
 800340a:	443b      	add	r3, r7
 800340c:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003410:	4618      	mov	r0, r3
 8003412:	f016 f8af 	bl	8019574 <free>
 8003416:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800341a:	3301      	adds	r3, #1
 800341c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003420:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003424:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003428:	429a      	cmp	r2, r3
 800342a:	dbea      	blt.n	8003402 <nmea_GPGGA+0x36e>
    return 1;
 800342c:	2301      	movs	r3, #1
}
 800342e:	4618      	mov	r0, r3
 8003430:	37dc      	adds	r7, #220	@ 0xdc
 8003432:	46bd      	mov	sp, r7
 8003434:	bd90      	pop	{r4, r7, pc}
 8003436:	bf00      	nop

08003438 <nmea_GNRMC>:
//    return 1;
//}



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8003438:	b590      	push	{r4, r7, lr}
 800343a:	b0a1      	sub	sp, #132	@ 0x84
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	2264      	movs	r2, #100	@ 0x64
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f017 ffff 	bl	801b452 <memset>
    char *marker = strtok(inputString, ",");
 8003454:	4930      	ldr	r1, [pc, #192]	@ (8003518 <nmea_GNRMC+0xe0>)
 8003456:	6838      	ldr	r0, [r7, #0]
 8003458:	f018 f816 	bl	801b488 <strtok>
 800345c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800345e:	e021      	b.n	80034a4 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003460:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003462:	f7fc fedd 	bl	8000220 <strlen>
 8003466:	4603      	mov	r3, r0
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800346c:	1c63      	adds	r3, r4, #1
 800346e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003470:	4610      	mov	r0, r2
 8003472:	f016 f877 	bl	8019564 <malloc>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	00a3      	lsls	r3, r4, #2
 800347c:	3380      	adds	r3, #128	@ 0x80
 800347e:	443b      	add	r3, r7
 8003480:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8003484:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003486:	3b01      	subs	r3, #1
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	3380      	adds	r3, #128	@ 0x80
 800348c:	443b      	add	r3, r7
 800348e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003492:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003494:	4618      	mov	r0, r3
 8003496:	f018 f8f0 	bl	801b67a <strcpy>
        marker = strtok(NULL, ",");
 800349a:	491f      	ldr	r1, [pc, #124]	@ (8003518 <nmea_GNRMC+0xe0>)
 800349c:	2000      	movs	r0, #0
 800349e:	f017 fff3 	bl	801b488 <strtok>
 80034a2:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 80034a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1da      	bne.n	8003460 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80034aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f016 ff20 	bl	801a2f4 <strtof>
 80034b4:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 80034b8:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80034ba:	f7fd f81d 	bl	80004f8 <__aeabi_f2d>
 80034be:	a314      	add	r3, pc, #80	@ (adr r3, 8003510 <nmea_GNRMC+0xd8>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f7fd f99a 	bl	80007fc <__aeabi_ddiv>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	f7fd fb62 	bl	8000b98 <__aeabi_d2f>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80034da:	2300      	movs	r3, #0
 80034dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80034de:	e00b      	b.n	80034f8 <nmea_GNRMC+0xc0>
 80034e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	3380      	adds	r3, #128	@ 0x80
 80034e6:	443b      	add	r3, r7
 80034e8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f016 f841 	bl	8019574 <free>
 80034f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034f4:	3301      	adds	r3, #1
 80034f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80034f8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80034fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034fc:	429a      	cmp	r2, r3
 80034fe:	dbef      	blt.n	80034e0 <nmea_GNRMC+0xa8>
    return 1;
 8003500:	2301      	movs	r3, #1
}
 8003502:	4618      	mov	r0, r3
 8003504:	3784      	adds	r7, #132	@ 0x84
 8003506:	46bd      	mov	sp, r7
 8003508:	bd90      	pop	{r4, r7, pc}
 800350a:	bf00      	nop
 800350c:	f3af 8000 	nop.w
 8003510:	be76c8b4 	.word	0xbe76c8b4
 8003514:	3fff1a9f 	.word	0x3fff1a9f
 8003518:	0801fbec 	.word	0x0801fbec

0800351c <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 800351c:	b590      	push	{r4, r7, lr}
 800351e:	b089      	sub	sp, #36	@ 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8003526:	223c      	movs	r2, #60	@ 0x3c
 8003528:	2100      	movs	r1, #0
 800352a:	484c      	ldr	r0, [pc, #304]	@ (800365c <nmea_parse+0x140>)
 800352c:	f017 ff91 	bl	801b452 <memset>
    char * token = strtok(buffer, "$");
 8003530:	494b      	ldr	r1, [pc, #300]	@ (8003660 <nmea_parse+0x144>)
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f017 ffa8 	bl	801b488 <strtok>
 8003538:	61f8      	str	r0, [r7, #28]
    int cnt = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
    int cnt12=0;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
    while(token !=NULL){
 8003542:	e01d      	b.n	8003580 <nmea_parse+0x64>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003544:	69f8      	ldr	r0, [r7, #28]
 8003546:	f7fc fe6b 	bl	8000220 <strlen>
 800354a:	4603      	mov	r3, r0
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	69bc      	ldr	r4, [r7, #24]
 8003550:	1c63      	adds	r3, r4, #1
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	4610      	mov	r0, r2
 8003556:	f016 f805 	bl	8019564 <malloc>
 800355a:	4603      	mov	r3, r0
 800355c:	461a      	mov	r2, r3
 800355e:	4b3f      	ldr	r3, [pc, #252]	@ (800365c <nmea_parse+0x140>)
 8003560:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	3b01      	subs	r3, #1
 8003568:	4a3c      	ldr	r2, [pc, #240]	@ (800365c <nmea_parse+0x140>)
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	69f9      	ldr	r1, [r7, #28]
 8003570:	4618      	mov	r0, r3
 8003572:	f018 f882 	bl	801b67a <strcpy>
        token = strtok(NULL, "$");
 8003576:	493a      	ldr	r1, [pc, #232]	@ (8003660 <nmea_parse+0x144>)
 8003578:	2000      	movs	r0, #0
 800357a:	f017 ff85 	bl	801b488 <strtok>
 800357e:	61f8      	str	r0, [r7, #28]
    while(token !=NULL){
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1de      	bne.n	8003544 <nmea_parse+0x28>
    }
    for(int i = 0; i<cnt; i++){
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	e048      	b.n	800361e <nmea_parse+0x102>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 800358c:	4a33      	ldr	r2, [pc, #204]	@ (800365c <nmea_parse+0x140>)
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003594:	4933      	ldr	r1, [pc, #204]	@ (8003664 <nmea_parse+0x148>)
 8003596:	4618      	mov	r0, r3
 8003598:	f017 ffd2 	bl	801b540 <strstr>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d03a      	beq.n	8003618 <nmea_parse+0xfc>
 80035a2:	4a2e      	ldr	r2, [pc, #184]	@ (800365c <nmea_parse+0x140>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fd28 	bl	8003000 <gps_checksum>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d030      	beq.n	8003618 <nmea_parse+0xfc>
           if(strstr(data[i], "GNRMC")!=NULL){
 80035b6:	4a29      	ldr	r2, [pc, #164]	@ (800365c <nmea_parse+0x140>)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035be:	492a      	ldr	r1, [pc, #168]	@ (8003668 <nmea_parse+0x14c>)
 80035c0:	4618      	mov	r0, r3
 80035c2:	f017 ffbd 	bl	801b540 <strstr>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00d      	beq.n	80035e8 <nmea_parse+0xcc>
        	   nmea_GNRMC(gps_data, data[i]);
 80035cc:	4a23      	ldr	r2, [pc, #140]	@ (800365c <nmea_parse+0x140>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d4:	4619      	mov	r1, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff2e 	bl	8003438 <nmea_GNRMC>
        	   if(cnt12>=1){
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	dc22      	bgt.n	8003628 <nmea_parse+0x10c>
        		  break;
        	   }
               cnt12=1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e017      	b.n	8003618 <nmea_parse+0xfc>

           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80035e8:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <nmea_parse+0x140>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f0:	491e      	ldr	r1, [pc, #120]	@ (800366c <nmea_parse+0x150>)
 80035f2:	4618      	mov	r0, r3
 80035f4:	f017 ffa4 	bl	801b540 <strstr>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00c      	beq.n	8003618 <nmea_parse+0xfc>
               nmea_GPGGA(gps_data, data[i]);
 80035fe:	4a17      	ldr	r2, [pc, #92]	@ (800365c <nmea_parse+0x140>)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003606:	4619      	mov	r1, r3
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7ff fd43 	bl	8003094 <nmea_GPGGA>
               if(cnt12>=1){
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	dc0b      	bgt.n	800362c <nmea_parse+0x110>
              	   break;
               }
               cnt12=1;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
    for(int i = 0; i<cnt; i++){
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	3301      	adds	r3, #1
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	429a      	cmp	r2, r3
 8003624:	dbb2      	blt.n	800358c <nmea_parse+0x70>
 8003626:	e002      	b.n	800362e <nmea_parse+0x112>
        		  break;
 8003628:	bf00      	nop
 800362a:	e000      	b.n	800362e <nmea_parse+0x112>
              	   break;
 800362c:	bf00      	nop
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	e009      	b.n	8003648 <nmea_parse+0x12c>
 8003634:	4a09      	ldr	r2, [pc, #36]	@ (800365c <nmea_parse+0x140>)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800363c:	4618      	mov	r0, r3
 800363e:	f015 ff99 	bl	8019574 <free>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	3301      	adds	r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	429a      	cmp	r2, r3
 800364e:	dbf1      	blt.n	8003634 <nmea_parse+0x118>


}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd90      	pop	{r4, r7, pc}
 800365a:	bf00      	nop
 800365c:	20000cfc 	.word	0x20000cfc
 8003660:	0801fbf0 	.word	0x0801fbf0
 8003664:	0801fbf4 	.word	0x0801fbf4
 8003668:	0801fbf8 	.word	0x0801fbf8
 800366c:	0801fc00 	.word	0x0801fc00

08003670 <distancecalc>:

double distancecalc(double lat1, double lat2, double long1, double long2){
 8003670:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003674:	b08a      	sub	sp, #40	@ 0x28
 8003676:	af00      	add	r7, sp, #0
 8003678:	ed87 0b06 	vstr	d0, [r7, #24]
 800367c:	ed87 1b04 	vstr	d1, [r7, #16]
 8003680:	ed87 2b02 	vstr	d2, [r7, #8]
 8003684:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 8003694:	a358      	add	r3, pc, #352	@ (adr r3, 80037f8 <distancecalc+0x188>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800369e:	f7fc ff83 	bl	80005a8 <__aeabi_dmul>
 80036a2:	4602      	mov	r2, r0
 80036a4:	460b      	mov	r3, r1
 80036a6:	ec43 2b17 	vmov	d7, r2, r3
 80036aa:	eeb0 0a47 	vmov.f32	s0, s14
 80036ae:	eef0 0a67 	vmov.f32	s1, s15
 80036b2:	f01a fd51 	bl	801e158 <sinl>
 80036b6:	ec55 4b10 	vmov	r4, r5, d0
 80036ba:	a34f      	add	r3, pc, #316	@ (adr r3, 80037f8 <distancecalc+0x188>)
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036c4:	f7fc ff70 	bl	80005a8 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	ec43 2b17 	vmov	d7, r2, r3
 80036d0:	eeb0 0a47 	vmov.f32	s0, s14
 80036d4:	eef0 0a67 	vmov.f32	s1, s15
 80036d8:	f01a fd3e 	bl	801e158 <sinl>
 80036dc:	ec53 2b10 	vmov	r2, r3, d0
 80036e0:	4620      	mov	r0, r4
 80036e2:	4629      	mov	r1, r5
 80036e4:	f7fc ff60 	bl	80005a8 <__aeabi_dmul>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4614      	mov	r4, r2
 80036ee:	461d      	mov	r5, r3
 80036f0:	a341      	add	r3, pc, #260	@ (adr r3, 80037f8 <distancecalc+0x188>)
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036fa:	f7fc ff55 	bl	80005a8 <__aeabi_dmul>
 80036fe:	4602      	mov	r2, r0
 8003700:	460b      	mov	r3, r1
 8003702:	ec43 2b17 	vmov	d7, r2, r3
 8003706:	eeb0 0a47 	vmov.f32	s0, s14
 800370a:	eef0 0a67 	vmov.f32	s1, s15
 800370e:	f01a fd21 	bl	801e154 <cosl>
 8003712:	ec59 8b10 	vmov	r8, r9, d0
 8003716:	a338      	add	r3, pc, #224	@ (adr r3, 80037f8 <distancecalc+0x188>)
 8003718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003720:	f7fc ff42 	bl	80005a8 <__aeabi_dmul>
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	ec43 2b17 	vmov	d7, r2, r3
 800372c:	eeb0 0a47 	vmov.f32	s0, s14
 8003730:	eef0 0a67 	vmov.f32	s1, s15
 8003734:	f01a fd0e 	bl	801e154 <cosl>
 8003738:	ec53 2b10 	vmov	r2, r3, d0
 800373c:	4640      	mov	r0, r8
 800373e:	4649      	mov	r1, r9
 8003740:	f7fc ff32 	bl	80005a8 <__aeabi_dmul>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4690      	mov	r8, r2
 800374a:	4699      	mov	r9, r3
 800374c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003750:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003754:	f7fc fd70 	bl	8000238 <__aeabi_dsub>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	a325      	add	r3, pc, #148	@ (adr r3, 80037f8 <distancecalc+0x188>)
 8003762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003766:	f7fc ff1f 	bl	80005a8 <__aeabi_dmul>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	ec43 2b17 	vmov	d7, r2, r3
 8003772:	eeb0 0a47 	vmov.f32	s0, s14
 8003776:	eef0 0a67 	vmov.f32	s1, s15
 800377a:	f01a fceb 	bl	801e154 <cosl>
 800377e:	ec53 2b10 	vmov	r2, r3, d0
 8003782:	4640      	mov	r0, r8
 8003784:	4649      	mov	r1, r9
 8003786:	f7fc ff0f 	bl	80005a8 <__aeabi_dmul>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4620      	mov	r0, r4
 8003790:	4629      	mov	r1, r5
 8003792:	f7fc fd53 	bl	800023c <__adddf3>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	ec43 2b17 	vmov	d7, r2, r3
 800379e:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80037f0 <distancecalc+0x180>
 80037a2:	eeb0 0a47 	vmov.f32	s0, s14
 80037a6:	eef0 0a67 	vmov.f32	s1, s15
 80037aa:	f01a fc75 	bl	801e098 <fmin>
 80037ae:	eeb0 7a40 	vmov.f32	s14, s0
 80037b2:	eef0 7a60 	vmov.f32	s15, s1
 80037b6:	eeb0 0a47 	vmov.f32	s0, s14
 80037ba:	eef0 0a67 	vmov.f32	s1, s15
 80037be:	f01a fccd 	bl	801e15c <acosl>
 80037c2:	ec51 0b10 	vmov	r0, r1, d0
 80037c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8003800 <distancecalc+0x190>)
 80037c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037cc:	f7fc feec 	bl	80005a8 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80037d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037dc:	ec43 2b17 	vmov	d7, r2, r3
}
 80037e0:	eeb0 0a47 	vmov.f32	s0, s14
 80037e4:	eef0 0a67 	vmov.f32	s1, s15
 80037e8:	3728      	adds	r7, #40	@ 0x28
 80037ea:	46bd      	mov	sp, r7
 80037ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037f0:	00000000 	.word	0x00000000
 80037f4:	3ff00000 	.word	0x3ff00000
 80037f8:	a2529d39 	.word	0xa2529d39
 80037fc:	3f91df46 	.word	0x3f91df46
 8003800:	00000000 	.word	0x00000000
 8003804:	41584dae 	.word	0x41584dae

08003808 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800381e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003822:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003826:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800382a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800382e:	bf00      	nop
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <LL_APB1_GRP1_EnableClock>:
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003840:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003844:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003846:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4313      	orrs	r3, r2
 800384e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003854:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4013      	ands	r3, r2
 800385a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800385c:	68fb      	ldr	r3, [r7, #12]
}
 800385e:	bf00      	nop
 8003860:	3714      	adds	r7, #20
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003872:	1d3b      	adds	r3, r7, #4
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	609a      	str	r2, [r3, #8]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003880:	2300      	movs	r3, #0
 8003882:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003884:	4b2c      	ldr	r3, [pc, #176]	@ (8003938 <MX_RTC_Init+0xcc>)
 8003886:	4a2d      	ldr	r2, [pc, #180]	@ (800393c <MX_RTC_Init+0xd0>)
 8003888:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800388a:	4b2b      	ldr	r3, [pc, #172]	@ (8003938 <MX_RTC_Init+0xcc>)
 800388c:	2200      	movs	r2, #0
 800388e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003890:	4b29      	ldr	r3, [pc, #164]	@ (8003938 <MX_RTC_Init+0xcc>)
 8003892:	227f      	movs	r2, #127	@ 0x7f
 8003894:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003896:	4b28      	ldr	r3, [pc, #160]	@ (8003938 <MX_RTC_Init+0xcc>)
 8003898:	f641 6284 	movw	r2, #7812	@ 0x1e84
 800389c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800389e:	4b26      	ldr	r3, [pc, #152]	@ (8003938 <MX_RTC_Init+0xcc>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80038a4:	4b24      	ldr	r3, [pc, #144]	@ (8003938 <MX_RTC_Init+0xcc>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80038aa:	4b23      	ldr	r3, [pc, #140]	@ (8003938 <MX_RTC_Init+0xcc>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80038b0:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <MX_RTC_Init+0xcc>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80038b6:	4820      	ldr	r0, [pc, #128]	@ (8003938 <MX_RTC_Init+0xcc>)
 80038b8:	f009 fee0 	bl	800d67c <HAL_RTC_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80038c2:	f7ff fb97 	bl	8002ff4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80038c6:	2300      	movs	r3, #0
 80038c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	2201      	movs	r2, #1
 80038e2:	4619      	mov	r1, r3
 80038e4:	4814      	ldr	r0, [pc, #80]	@ (8003938 <MX_RTC_Init+0xcc>)
 80038e6:	f009 ff79 	bl	800d7dc <HAL_RTC_SetTime>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <MX_RTC_Init+0x88>
  {
    Error_Handler();
 80038f0:	f7ff fb80 	bl	8002ff4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80038f4:	2301      	movs	r3, #1
 80038f6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80038f8:	2301      	movs	r3, #1
 80038fa:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80038fc:	2301      	movs	r3, #1
 80038fe:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003900:	2300      	movs	r3, #0
 8003902:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003904:	463b      	mov	r3, r7
 8003906:	2201      	movs	r2, #1
 8003908:	4619      	mov	r1, r3
 800390a:	480b      	ldr	r0, [pc, #44]	@ (8003938 <MX_RTC_Init+0xcc>)
 800390c:	f00a f82a 	bl	800d964 <HAL_RTC_SetDate>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_RTC_Init+0xae>
  {
    Error_Handler();
 8003916:	f7ff fb6d 	bl	8002ff4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 800391a:	2204      	movs	r2, #4
 800391c:	2100      	movs	r1, #0
 800391e:	4806      	ldr	r0, [pc, #24]	@ (8003938 <MX_RTC_Init+0xcc>)
 8003920:	f00a f93e 	bl	800dba0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800392a:	f7ff fb63 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000d38 	.word	0x20000d38
 800393c:	40002800 	.word	0x40002800

08003940 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b096      	sub	sp, #88	@ 0x58
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003948:	f107 0308 	add.w	r3, r7, #8
 800394c:	2250      	movs	r2, #80	@ 0x50
 800394e:	2100      	movs	r1, #0
 8003950:	4618      	mov	r0, r3
 8003952:	f017 fd7e 	bl	801b452 <memset>
  if(rtcHandle->Instance==RTC)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a14      	ldr	r2, [pc, #80]	@ (80039ac <HAL_RTC_MspInit+0x6c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d121      	bne.n	80039a4 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003960:	f008 f8b0 	bl	800bac4 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 8003964:	f008 f8ae 	bl	800bac4 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003968:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800396c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800396e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003972:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003974:	f107 0308 	add.w	r3, r7, #8
 8003978:	4618      	mov	r0, r3
 800397a:	f009 fbf8 	bl	800d16e <HAL_RCCEx_PeriphCLKConfig>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003984:	f7ff fb36 	bl	8002ff4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003988:	f7ff ff45 	bl	8003816 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800398c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003990:	f7ff ff52 	bl	8003838 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003994:	2200      	movs	r2, #0
 8003996:	2100      	movs	r1, #0
 8003998:	2003      	movs	r0, #3
 800399a:	f004 ff42 	bl	8008822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800399e:	2003      	movs	r0, #3
 80039a0:	f004 ff59 	bl	8008856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80039a4:	bf00      	nop
 80039a6:	3758      	adds	r7, #88	@ 0x58
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40002800 	.word	0x40002800

080039b0 <LL_AHB2_GRP1_EnableClock>:
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80039b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80039c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039d4:	68fb      	ldr	r3, [r7, #12]
}
 80039d6:	bf00      	nop
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b085      	sub	sp, #20
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80039fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4013      	ands	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a06:	68fb      	ldr	r3, [r7, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003a18:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a8c <MX_SPI1_Init+0x78>)
 8003a1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a26:	4b18      	ldr	r3, [pc, #96]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a2c:	4b16      	ldr	r3, [pc, #88]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a2e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003a32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a34:	4b14      	ldr	r3, [pc, #80]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a3a:	4b13      	ldr	r3, [pc, #76]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003a40:	4b11      	ldr	r3, [pc, #68]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003a48:	4b0f      	ldr	r3, [pc, #60]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a54:	4b0c      	ldr	r3, [pc, #48]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003a60:	4b09      	ldr	r3, [pc, #36]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a62:	2207      	movs	r2, #7
 8003a64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a66:	4b08      	ldr	r3, [pc, #32]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a6e:	2208      	movs	r2, #8
 8003a70:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a72:	4805      	ldr	r0, [pc, #20]	@ (8003a88 <MX_SPI1_Init+0x74>)
 8003a74:	f00a f950 	bl	800dd18 <HAL_SPI_Init>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a7e:	f7ff fab9 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000d90 	.word	0x20000d90
 8003a8c:	40013000 	.word	0x40013000

08003a90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a98:	f107 030c 	add.w	r3, r7, #12
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1c      	ldr	r2, [pc, #112]	@ (8003b20 <HAL_SPI_MspInit+0x90>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d132      	bne.n	8003b18 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003ab6:	f7ff ff94 	bl	80039e2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aba:	2001      	movs	r0, #1
 8003abc:	f7ff ff78 	bl	80039b0 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac0:	2002      	movs	r0, #2
 8003ac2:	f7ff ff75 	bl	80039b0 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8003ac6:	2342      	movs	r3, #66	@ 0x42
 8003ac8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003ad6:	2305      	movs	r3, #5
 8003ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ae4:	f005 fa3a 	bl	8008f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ae8:	2320      	movs	r3, #32
 8003aea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aec:	2302      	movs	r3, #2
 8003aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003af8:	2305      	movs	r3, #5
 8003afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afc:	f107 030c 	add.w	r3, r7, #12
 8003b00:	4619      	mov	r1, r3
 8003b02:	4808      	ldr	r0, [pc, #32]	@ (8003b24 <HAL_SPI_MspInit+0x94>)
 8003b04:	f005 fa2a 	bl	8008f5c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	2022      	movs	r0, #34	@ 0x22
 8003b0e:	f004 fe88 	bl	8008822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003b12:	2022      	movs	r0, #34	@ 0x22
 8003b14:	f004 fe9f 	bl	8008856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003b18:	bf00      	nop
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40013000 	.word	0x40013000
 8003b24:	48000400 	.word	0x48000400

08003b28 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8003b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2c:	ed2d 8b02 	vpush	{d8}
 8003b30:	b0a7      	sub	sp, #156	@ 0x9c
 8003b32:	af16      	add	r7, sp, #88	@ 0x58
 8003b34:	6378      	str	r0, [r7, #52]	@ 0x34
 8003b36:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8003b3a:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003b3e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b40:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b42:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003b4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b4c:	f7fc fcd4 	bl	80004f8 <__aeabi_f2d>
 8003b50:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003b54:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b56:	f7fc fccf 	bl	80004f8 <__aeabi_f2d>
 8003b5a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fcc8 	bl	80004f8 <__aeabi_f2d>
 8003b68:	a332      	add	r3, pc, #200	@ (adr r3, 8003c34 <csvframe+0x10c>)
 8003b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6e:	f7fc fd1b 	bl	80005a8 <__aeabi_dmul>
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	ec43 2b18 	vmov	d8, r2, r3
 8003b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b82:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fc fcb4 	bl	80004f8 <__aeabi_f2d>
 8003b90:	4682      	mov	sl, r0
 8003b92:	468b      	mov	fp, r1
 8003b94:	6a38      	ldr	r0, [r7, #32]
 8003b96:	f7fc fcaf 	bl	80004f8 <__aeabi_f2d>
 8003b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8003c18 <csvframe+0xf0>)
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <csvframe+0xf4>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c20 <csvframe+0xf8>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <csvframe+0xfc>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	461e      	mov	r6, r3
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <csvframe+0x100>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c2c <csvframe+0x104>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	9315      	str	r3, [sp, #84]	@ 0x54
 8003bbe:	9214      	str	r2, [sp, #80]	@ 0x50
 8003bc0:	9613      	str	r6, [sp, #76]	@ 0x4c
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	9212      	str	r2, [sp, #72]	@ 0x48
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	9211      	str	r2, [sp, #68]	@ 0x44
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	9310      	str	r3, [sp, #64]	@ 0x40
 8003bce:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8003bd6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003bda:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003bde:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003be2:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003be6:	ed97 7b04 	vldr	d7, [r7, #16]
 8003bea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003bee:	ed97 7b06 	vldr	d7, [r7, #24]
 8003bf2:	ed8d 7b00 	vstr	d7, [sp]
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8003c30 <csvframe+0x108>)
 8003bf8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003bfc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003bfe:	f017 fb91 	bl	801b324 <sniprintf>
 8003c02:	63f8      	str	r0, [r7, #60]	@ 0x3c
	return framesize;
 8003c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3744      	adds	r7, #68	@ 0x44
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	ecbd 8b02 	vpop	{d8}
 8003c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c14:	f3af 8000 	nop.w
 8003c18:	20000012 	.word	0x20000012
 8003c1c:	20000011 	.word	0x20000011
 8003c20:	20000010 	.word	0x20000010
 8003c24:	20000b95 	.word	0x20000b95
 8003c28:	20000b96 	.word	0x20000b96
 8003c2c:	20000b94 	.word	0x20000b94
 8003c30:	0801fc08 	.word	0x0801fc08
 8003c34:	cccccccd 	.word	0xcccccccd
 8003c38:	400ccccc 	.word	0x400ccccc

08003c3c <storeindex>:


void storeindex(void){
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b09c      	sub	sp, #112	@ 0x70
 8003c40:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8003c42:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003c46:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003c48:	463b      	mov	r3, r7
 8003c4a:	2264      	movs	r2, #100	@ 0x64
 8003c4c:	2100      	movs	r1, #0
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f017 fbff 	bl	801b452 <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8003c54:	4b14      	ldr	r3, [pc, #80]	@ (8003ca8 <storeindex+0x6c>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <storeindex+0x70>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	4a13      	ldr	r2, [pc, #76]	@ (8003cb0 <storeindex+0x74>)
 8003c64:	2164      	movs	r1, #100	@ 0x64
 8003c66:	f017 fb5d 	bl	801b324 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003c6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	da00      	bge.n	8003c72 <storeindex+0x36>
 8003c70:	330f      	adds	r3, #15
 8003c72:	111b      	asrs	r3, r3, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fc fc2d 	bl	80004d4 <__aeabi_i2d>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4610      	mov	r0, r2
 8003c80:	4619      	mov	r1, r3
 8003c82:	f7fc ff41 	bl	8000b08 <__aeabi_d2iz>
 8003c86:	4603      	mov	r3, r0
 8003c88:	4619      	mov	r1, r3
 8003c8a:	480a      	ldr	r0, [pc, #40]	@ (8003cb4 <storeindex+0x78>)
 8003c8c:	f013 fd6d 	bl	801776a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003c90:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003c92:	463a      	mov	r2, r7
 8003c94:	2300      	movs	r3, #0
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	2364      	movs	r3, #100	@ 0x64
 8003c9a:	4806      	ldr	r0, [pc, #24]	@ (8003cb4 <storeindex+0x78>)
 8003c9c:	f013 fde8 	bl	8017870 <SPIF_WritePage>

}
 8003ca0:	bf00      	nop
 8003ca2:	3768      	adds	r7, #104	@ 0x68
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20000ab4 	.word	0x20000ab4
 8003cac:	20000ab8 	.word	0x20000ab8
 8003cb0:	0801fc5c 	.word	0x0801fc5c
 8003cb4:	20000880 	.word	0x20000880

08003cb8 <getindex>:

void getindex(void){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003cbe:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003cc2:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2332      	movs	r3, #50	@ 0x32
 8003ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8003d7c <getindex+0xc4>)
 8003cce:	482c      	ldr	r0, [pc, #176]	@ (8003d80 <getindex+0xc8>)
 8003cd0:	f013 fdec 	bl	80178ac <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	2124      	movs	r1, #36	@ 0x24
 8003cd8:	482a      	ldr	r0, [pc, #168]	@ (8003d84 <getindex+0xcc>)
 8003cda:	f017 fbba 	bl	801b452 <memset>
	memset(numbuf2,'$',10);
 8003cde:	220a      	movs	r2, #10
 8003ce0:	2124      	movs	r1, #36	@ 0x24
 8003ce2:	4829      	ldr	r0, [pc, #164]	@ (8003d88 <getindex+0xd0>)
 8003ce4:	f017 fbb5 	bl	801b452 <memset>
	int cnt=0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003cec:	4b23      	ldr	r3, [pc, #140]	@ (8003d7c <getindex+0xc4>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	2b09      	cmp	r3, #9
 8003cf6:	dc3a      	bgt.n	8003d6e <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003cf8:	e00b      	b.n	8003d12 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003cfa:	4a20      	ldr	r2, [pc, #128]	@ (8003d7c <getindex+0xc4>)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4413      	add	r3, r2
 8003d00:	7819      	ldrb	r1, [r3, #0]
 8003d02:	4a20      	ldr	r2, [pc, #128]	@ (8003d84 <getindex+0xcc>)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4413      	add	r3, r2
 8003d08:	460a      	mov	r2, r1
 8003d0a:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003d12:	4a1a      	ldr	r2, [pc, #104]	@ (8003d7c <getindex+0xc4>)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4413      	add	r3, r2
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b24      	cmp	r3, #36	@ 0x24
 8003d1c:	d1ed      	bne.n	8003cfa <getindex+0x42>
		  }
		  cnt++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3301      	adds	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003d28:	e00e      	b.n	8003d48 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003d2a:	4a14      	ldr	r2, [pc, #80]	@ (8003d7c <getindex+0xc4>)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	7819      	ldrb	r1, [r3, #0]
 8003d32:	4a15      	ldr	r2, [pc, #84]	@ (8003d88 <getindex+0xd0>)
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4413      	add	r3, r2
 8003d38:	460a      	mov	r2, r1
 8003d3a:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3301      	adds	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003d48:	4a0c      	ldr	r2, [pc, #48]	@ (8003d7c <getindex+0xc4>)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b24      	cmp	r3, #36	@ 0x24
 8003d52:	d1ea      	bne.n	8003d2a <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003d54:	480b      	ldr	r0, [pc, #44]	@ (8003d84 <getindex+0xcc>)
 8003d56:	f015 fc01 	bl	801955c <atoi>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4a0b      	ldr	r2, [pc, #44]	@ (8003d8c <getindex+0xd4>)
 8003d5e:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003d60:	4809      	ldr	r0, [pc, #36]	@ (8003d88 <getindex+0xd0>)
 8003d62:	f015 fbfb 	bl	801955c <atoi>
 8003d66:	4603      	mov	r3, r0
 8003d68:	4a09      	ldr	r2, [pc, #36]	@ (8003d90 <getindex+0xd8>)
 8003d6a:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003d6c:	e001      	b.n	8003d72 <getindex+0xba>
		storeindex();
 8003d6e:	f7ff ff65 	bl	8003c3c <storeindex>
}
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000d5c 	.word	0x20000d5c
 8003d80:	20000880 	.word	0x20000880
 8003d84:	20000ac0 	.word	0x20000ac0
 8003d88:	20000acc 	.word	0x20000acc
 8003d8c:	20000ab4 	.word	0x20000ab4
 8003d90:	20000ab8 	.word	0x20000ab8

08003d94 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e9c <writebuffertoflash+0x108>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3301      	adds	r3, #1
 8003da4:	f003 030f 	and.w	r3, r3, #15
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11b      	bne.n	8003de4 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003dac:	4b3c      	ldr	r3, [pc, #240]	@ (8003ea0 <writebuffertoflash+0x10c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d117      	bne.n	8003de4 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003db4:	4b39      	ldr	r3, [pc, #228]	@ (8003e9c <writebuffertoflash+0x108>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	da00      	bge.n	8003dc0 <writebuffertoflash+0x2c>
 8003dbe:	330f      	adds	r3, #15
 8003dc0:	111b      	asrs	r3, r3, #4
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fb86 	bl	80004d4 <__aeabi_i2d>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f7fc fe9a 	bl	8000b08 <__aeabi_d2iz>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4832      	ldr	r0, [pc, #200]	@ (8003ea4 <writebuffertoflash+0x110>)
 8003dda:	f013 fcc6 	bl	801776a <SPIF_EraseSector>
		sectoreraseen=1;
 8003dde:	4b30      	ldr	r3, [pc, #192]	@ (8003ea0 <writebuffertoflash+0x10c>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003de4:	4b30      	ldr	r3, [pc, #192]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	2bff      	cmp	r3, #255	@ 0xff
 8003dee:	dc11      	bgt.n	8003e14 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003df0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e9c <writebuffertoflash+0x108>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4619      	mov	r1, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	9200      	str	r2, [sp, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4828      	ldr	r0, [pc, #160]	@ (8003ea4 <writebuffertoflash+0x110>)
 8003e02:	f013 fd35 	bl	8017870 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003e06:	4b28      	ldr	r3, [pc, #160]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	4a26      	ldr	r2, [pc, #152]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e03c      	b.n	8003e8e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003e14:	4b21      	ldr	r3, [pc, #132]	@ (8003e9c <writebuffertoflash+0x108>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4b23      	ldr	r3, [pc, #140]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b20      	ldr	r3, [pc, #128]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	481d      	ldr	r0, [pc, #116]	@ (8003ea4 <writebuffertoflash+0x110>)
 8003e30:	f013 fd1e 	bl	8017870 <SPIF_WritePage>
		HAL_Delay(100);
 8003e34:	2064      	movs	r0, #100	@ 0x64
 8003e36:	f7fd fe5a 	bl	8001aee <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003e3a:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <writebuffertoflash+0x108>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	4618      	mov	r0, r3
 8003e42:	4b19      	ldr	r3, [pc, #100]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	1899      	adds	r1, r3, r2
 8003e50:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2300      	movs	r3, #0
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	460a      	mov	r2, r1
 8003e66:	4601      	mov	r1, r0
 8003e68:	480e      	ldr	r0, [pc, #56]	@ (8003ea4 <writebuffertoflash+0x110>)
 8003e6a:	f013 fd01 	bl	8017870 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e9c <writebuffertoflash+0x108>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3301      	adds	r3, #1
 8003e74:	4a09      	ldr	r2, [pc, #36]	@ (8003e9c <writebuffertoflash+0x108>)
 8003e76:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003e78:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <writebuffertoflash+0x10c>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003e86:	683a      	ldr	r2, [r7, #0]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	4a07      	ldr	r2, [pc, #28]	@ (8003ea8 <writebuffertoflash+0x114>)
 8003e8c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003e8e:	f7ff fed5 	bl	8003c3c <storeindex>

}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	20000ab8 	.word	0x20000ab8
 8003ea0:	20000abc 	.word	0x20000abc
 8003ea4:	20000880 	.word	0x20000880
 8003ea8:	20000ab4 	.word	0x20000ab4

08003eac <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003eb0:	bf00      	nop
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af04      	add	r7, sp, #16
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eca:	9302      	str	r3, [sp, #8]
 8003ecc:	2301      	movs	r3, #1
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	1dfb      	adds	r3, r7, #7
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2178      	movs	r1, #120	@ 0x78
 8003eda:	4803      	ldr	r0, [pc, #12]	@ (8003ee8 <ssd1306_WriteCommand+0x2c>)
 8003edc:	f005 fad0 	bl	8009480 <HAL_I2C_Mem_Write>
}
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20000558 	.word	0x20000558

08003eec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af04      	add	r7, sp, #16
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	f04f 32ff 	mov.w	r2, #4294967295
 8003efe:	9202      	str	r2, [sp, #8]
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2301      	movs	r3, #1
 8003f08:	2240      	movs	r2, #64	@ 0x40
 8003f0a:	2178      	movs	r1, #120	@ 0x78
 8003f0c:	4803      	ldr	r0, [pc, #12]	@ (8003f1c <ssd1306_WriteData+0x30>)
 8003f0e:	f005 fab7 	bl	8009480 <HAL_I2C_Mem_Write>
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000558 	.word	0x20000558

08003f20 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003f24:	f7ff ffc2 	bl	8003eac <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003f28:	2064      	movs	r0, #100	@ 0x64
 8003f2a:	f7fd fde0 	bl	8001aee <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003f2e:	2000      	movs	r0, #0
 8003f30:	f000 fb1a 	bl	8004568 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003f34:	2020      	movs	r0, #32
 8003f36:	f7ff ffc1 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	f7ff ffbe 	bl	8003ebc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003f40:	20b0      	movs	r0, #176	@ 0xb0
 8003f42:	f7ff ffbb 	bl	8003ebc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003f46:	20c8      	movs	r0, #200	@ 0xc8
 8003f48:	f7ff ffb8 	bl	8003ebc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f7ff ffb5 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003f52:	2010      	movs	r0, #16
 8003f54:	f7ff ffb2 	bl	8003ebc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003f58:	2040      	movs	r0, #64	@ 0x40
 8003f5a:	f7ff ffaf 	bl	8003ebc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003f5e:	20ff      	movs	r0, #255	@ 0xff
 8003f60:	f000 faee 	bl	8004540 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003f64:	20a1      	movs	r0, #161	@ 0xa1
 8003f66:	f7ff ffa9 	bl	8003ebc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003f6a:	20a6      	movs	r0, #166	@ 0xa6
 8003f6c:	f7ff ffa6 	bl	8003ebc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003f70:	20a8      	movs	r0, #168	@ 0xa8
 8003f72:	f7ff ffa3 	bl	8003ebc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003f76:	203f      	movs	r0, #63	@ 0x3f
 8003f78:	f7ff ffa0 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003f7c:	20a4      	movs	r0, #164	@ 0xa4
 8003f7e:	f7ff ff9d 	bl	8003ebc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003f82:	20d3      	movs	r0, #211	@ 0xd3
 8003f84:	f7ff ff9a 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7ff ff97 	bl	8003ebc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003f8e:	20d5      	movs	r0, #213	@ 0xd5
 8003f90:	f7ff ff94 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003f94:	20f0      	movs	r0, #240	@ 0xf0
 8003f96:	f7ff ff91 	bl	8003ebc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003f9a:	20d9      	movs	r0, #217	@ 0xd9
 8003f9c:	f7ff ff8e 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003fa0:	2022      	movs	r0, #34	@ 0x22
 8003fa2:	f7ff ff8b 	bl	8003ebc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003fa6:	20da      	movs	r0, #218	@ 0xda
 8003fa8:	f7ff ff88 	bl	8003ebc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003fac:	2012      	movs	r0, #18
 8003fae:	f7ff ff85 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003fb2:	20db      	movs	r0, #219	@ 0xdb
 8003fb4:	f7ff ff82 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003fb8:	2020      	movs	r0, #32
 8003fba:	f7ff ff7f 	bl	8003ebc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003fbe:	208d      	movs	r0, #141	@ 0x8d
 8003fc0:	f7ff ff7c 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003fc4:	2014      	movs	r0, #20
 8003fc6:	f7ff ff79 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f000 facc 	bl	8004568 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f000 f80f 	bl	8003ff4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003fd6:	f000 f825 	bl	8004024 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003fda:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <ssd1306_Init+0xd0>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	@ (8003ff0 <ssd1306_Init+0xd0>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003fe6:	4b02      	ldr	r3, [pc, #8]	@ (8003ff0 <ssd1306_Init+0xd0>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	711a      	strb	r2, [r3, #4]
}
 8003fec:	bf00      	nop
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	200011f4 	.word	0x200011f4

08003ff4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <ssd1306_Fill+0x14>
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <ssd1306_Fill+0x16>
 8004008:	23ff      	movs	r3, #255	@ 0xff
 800400a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800400e:	4619      	mov	r1, r3
 8004010:	4803      	ldr	r0, [pc, #12]	@ (8004020 <ssd1306_Fill+0x2c>)
 8004012:	f017 fa1e 	bl	801b452 <memset>
}
 8004016:	bf00      	nop
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000df4 	.word	0x20000df4

08004024 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800402a:	2300      	movs	r3, #0
 800402c:	71fb      	strb	r3, [r7, #7]
 800402e:	e016      	b.n	800405e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	3b50      	subs	r3, #80	@ 0x50
 8004034:	b2db      	uxtb	r3, r3
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff ff40 	bl	8003ebc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800403c:	2000      	movs	r0, #0
 800403e:	f7ff ff3d 	bl	8003ebc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004042:	2010      	movs	r0, #16
 8004044:	f7ff ff3a 	bl	8003ebc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	01db      	lsls	r3, r3, #7
 800404c:	4a08      	ldr	r2, [pc, #32]	@ (8004070 <ssd1306_UpdateScreen+0x4c>)
 800404e:	4413      	add	r3, r2
 8004050:	2180      	movs	r1, #128	@ 0x80
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff ff4a 	bl	8003eec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	3301      	adds	r3, #1
 800405c:	71fb      	strb	r3, [r7, #7]
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	2b07      	cmp	r3, #7
 8004062:	d9e5      	bls.n	8004030 <ssd1306_UpdateScreen+0xc>
    }
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3708      	adds	r7, #8
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	20000df4 	.word	0x20000df4

08004074 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
 800407e:	460b      	mov	r3, r1
 8004080:	71bb      	strb	r3, [r7, #6]
 8004082:	4613      	mov	r3, r2
 8004084:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800408a:	2b00      	cmp	r3, #0
 800408c:	db3d      	blt.n	800410a <ssd1306_DrawPixel+0x96>
 800408e:	79bb      	ldrb	r3, [r7, #6]
 8004090:	2b3f      	cmp	r3, #63	@ 0x3f
 8004092:	d83a      	bhi.n	800410a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004094:	797b      	ldrb	r3, [r7, #5]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d11a      	bne.n	80040d0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800409a:	79fa      	ldrb	r2, [r7, #7]
 800409c:	79bb      	ldrb	r3, [r7, #6]
 800409e:	08db      	lsrs	r3, r3, #3
 80040a0:	b2d8      	uxtb	r0, r3
 80040a2:	4603      	mov	r3, r0
 80040a4:	01db      	lsls	r3, r3, #7
 80040a6:	4413      	add	r3, r2
 80040a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <ssd1306_DrawPixel+0xa4>)
 80040aa:	5cd3      	ldrb	r3, [r2, r3]
 80040ac:	b25a      	sxtb	r2, r3
 80040ae:	79bb      	ldrb	r3, [r7, #6]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	4313      	orrs	r3, r2
 80040be:	b259      	sxtb	r1, r3
 80040c0:	79fa      	ldrb	r2, [r7, #7]
 80040c2:	4603      	mov	r3, r0
 80040c4:	01db      	lsls	r3, r3, #7
 80040c6:	4413      	add	r3, r2
 80040c8:	b2c9      	uxtb	r1, r1
 80040ca:	4a13      	ldr	r2, [pc, #76]	@ (8004118 <ssd1306_DrawPixel+0xa4>)
 80040cc:	54d1      	strb	r1, [r2, r3]
 80040ce:	e01d      	b.n	800410c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80040d0:	79fa      	ldrb	r2, [r7, #7]
 80040d2:	79bb      	ldrb	r3, [r7, #6]
 80040d4:	08db      	lsrs	r3, r3, #3
 80040d6:	b2d8      	uxtb	r0, r3
 80040d8:	4603      	mov	r3, r0
 80040da:	01db      	lsls	r3, r3, #7
 80040dc:	4413      	add	r3, r2
 80040de:	4a0e      	ldr	r2, [pc, #56]	@ (8004118 <ssd1306_DrawPixel+0xa4>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	b25a      	sxtb	r2, r3
 80040e4:	79bb      	ldrb	r3, [r7, #6]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	2101      	movs	r1, #1
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	b25b      	sxtb	r3, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	b25b      	sxtb	r3, r3
 80040f6:	4013      	ands	r3, r2
 80040f8:	b259      	sxtb	r1, r3
 80040fa:	79fa      	ldrb	r2, [r7, #7]
 80040fc:	4603      	mov	r3, r0
 80040fe:	01db      	lsls	r3, r3, #7
 8004100:	4413      	add	r3, r2
 8004102:	b2c9      	uxtb	r1, r1
 8004104:	4a04      	ldr	r2, [pc, #16]	@ (8004118 <ssd1306_DrawPixel+0xa4>)
 8004106:	54d1      	strb	r1, [r2, r3]
 8004108:	e000      	b.n	800410c <ssd1306_DrawPixel+0x98>
        return;
 800410a:	bf00      	nop
    }
}
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000df4 	.word	0x20000df4

0800411c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800411c:	b590      	push	{r4, r7, lr}
 800411e:	b089      	sub	sp, #36	@ 0x24
 8004120:	af00      	add	r7, sp, #0
 8004122:	4604      	mov	r4, r0
 8004124:	1d38      	adds	r0, r7, #4
 8004126:	e880 0006 	stmia.w	r0, {r1, r2}
 800412a:	461a      	mov	r2, r3
 800412c:	4623      	mov	r3, r4
 800412e:	73fb      	strb	r3, [r7, #15]
 8004130:	4613      	mov	r3, r2
 8004132:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2b1f      	cmp	r3, #31
 8004138:	d902      	bls.n	8004140 <ssd1306_WriteChar+0x24>
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b7e      	cmp	r3, #126	@ 0x7e
 800413e:	d901      	bls.n	8004144 <ssd1306_WriteChar+0x28>
        return 0;
 8004140:	2300      	movs	r3, #0
 8004142:	e06c      	b.n	800421e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004144:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <ssd1306_WriteChar+0x10c>)
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	793b      	ldrb	r3, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	2b80      	cmp	r3, #128	@ 0x80
 8004150:	dc06      	bgt.n	8004160 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004152:	4b35      	ldr	r3, [pc, #212]	@ (8004228 <ssd1306_WriteChar+0x10c>)
 8004154:	885b      	ldrh	r3, [r3, #2]
 8004156:	461a      	mov	r2, r3
 8004158:	797b      	ldrb	r3, [r7, #5]
 800415a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800415c:	2b40      	cmp	r3, #64	@ 0x40
 800415e:	dd01      	ble.n	8004164 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004160:	2300      	movs	r3, #0
 8004162:	e05c      	b.n	800421e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	e04c      	b.n	8004204 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800416a:	68ba      	ldr	r2, [r7, #8]
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	3b20      	subs	r3, #32
 8004170:	7979      	ldrb	r1, [r7, #5]
 8004172:	fb01 f303 	mul.w	r3, r1, r3
 8004176:	4619      	mov	r1, r3
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	440b      	add	r3, r1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004184:	2300      	movs	r3, #0
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e034      	b.n	80041f4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d012      	beq.n	80041c0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800419a:	4b23      	ldr	r3, [pc, #140]	@ (8004228 <ssd1306_WriteChar+0x10c>)
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	b2d8      	uxtb	r0, r3
 80041a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004228 <ssd1306_WriteChar+0x10c>)
 80041aa:	885b      	ldrh	r3, [r3, #2]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	4413      	add	r3, r2
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	7bba      	ldrb	r2, [r7, #14]
 80041b8:	4619      	mov	r1, r3
 80041ba:	f7ff ff5b 	bl	8004074 <ssd1306_DrawPixel>
 80041be:	e016      	b.n	80041ee <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80041c0:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <ssd1306_WriteChar+0x10c>)
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	4413      	add	r3, r2
 80041cc:	b2d8      	uxtb	r0, r3
 80041ce:	4b16      	ldr	r3, [pc, #88]	@ (8004228 <ssd1306_WriteChar+0x10c>)
 80041d0:	885b      	ldrh	r3, [r3, #2]
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	4413      	add	r3, r2
 80041da:	b2d9      	uxtb	r1, r3
 80041dc:	7bbb      	ldrb	r3, [r7, #14]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	f7ff ff43 	bl	8004074 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	3301      	adds	r3, #1
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	793b      	ldrb	r3, [r7, #4]
 80041f6:	461a      	mov	r2, r3
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d3c5      	bcc.n	800418a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3301      	adds	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	797b      	ldrb	r3, [r7, #5]
 8004206:	461a      	mov	r2, r3
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	4293      	cmp	r3, r2
 800420c:	d3ad      	bcc.n	800416a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800420e:	4b06      	ldr	r3, [pc, #24]	@ (8004228 <ssd1306_WriteChar+0x10c>)
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	793a      	ldrb	r2, [r7, #4]
 8004214:	4413      	add	r3, r2
 8004216:	b29a      	uxth	r2, r3
 8004218:	4b03      	ldr	r3, [pc, #12]	@ (8004228 <ssd1306_WriteChar+0x10c>)
 800421a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3724      	adds	r7, #36	@ 0x24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}
 8004226:	bf00      	nop
 8004228:	200011f4 	.word	0x200011f4

0800422c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	1d38      	adds	r0, r7, #4
 8004236:	e880 0006 	stmia.w	r0, {r1, r2}
 800423a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800423c:	e012      	b.n	8004264 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	7818      	ldrb	r0, [r3, #0]
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	1d3a      	adds	r2, r7, #4
 8004246:	ca06      	ldmia	r2, {r1, r2}
 8004248:	f7ff ff68 	bl	800411c <ssd1306_WriteChar>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d002      	beq.n	800425e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	e008      	b.n	8004270 <ssd1306_WriteString+0x44>
        }
        str++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3301      	adds	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1e8      	bne.n	800423e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	781b      	ldrb	r3, [r3, #0]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	460a      	mov	r2, r1
 8004282:	71fb      	strb	r3, [r7, #7]
 8004284:	4613      	mov	r3, r2
 8004286:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	b29a      	uxth	r2, r3
 800428c:	4b05      	ldr	r3, [pc, #20]	@ (80042a4 <ssd1306_SetCursor+0x2c>)
 800428e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004290:	79bb      	ldrb	r3, [r7, #6]
 8004292:	b29a      	uxth	r2, r3
 8004294:	4b03      	ldr	r3, [pc, #12]	@ (80042a4 <ssd1306_SetCursor+0x2c>)
 8004296:	805a      	strh	r2, [r3, #2]
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	200011f4 	.word	0x200011f4

080042a8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b089      	sub	sp, #36	@ 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4604      	mov	r4, r0
 80042b0:	4608      	mov	r0, r1
 80042b2:	4611      	mov	r1, r2
 80042b4:	461a      	mov	r2, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	71fb      	strb	r3, [r7, #7]
 80042ba:	4603      	mov	r3, r0
 80042bc:	71bb      	strb	r3, [r7, #6]
 80042be:	460b      	mov	r3, r1
 80042c0:	717b      	strb	r3, [r7, #5]
 80042c2:	4613      	mov	r3, r2
 80042c4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80042c6:	797a      	ldrb	r2, [r7, #5]
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bfb8      	it	lt
 80042d0:	425b      	neglt	r3, r3
 80042d2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80042d4:	793a      	ldrb	r2, [r7, #4]
 80042d6:	79bb      	ldrb	r3, [r7, #6]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bfb8      	it	lt
 80042de:	425b      	neglt	r3, r3
 80042e0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80042e2:	79fa      	ldrb	r2, [r7, #7]
 80042e4:	797b      	ldrb	r3, [r7, #5]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d201      	bcs.n	80042ee <ssd1306_Line+0x46>
 80042ea:	2301      	movs	r3, #1
 80042ec:	e001      	b.n	80042f2 <ssd1306_Line+0x4a>
 80042ee:	f04f 33ff 	mov.w	r3, #4294967295
 80042f2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80042f4:	79ba      	ldrb	r2, [r7, #6]
 80042f6:	793b      	ldrb	r3, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d201      	bcs.n	8004300 <ssd1306_Line+0x58>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e001      	b.n	8004304 <ssd1306_Line+0x5c>
 8004300:	f04f 33ff 	mov.w	r3, #4294967295
 8004304:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800430e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004312:	7939      	ldrb	r1, [r7, #4]
 8004314:	797b      	ldrb	r3, [r7, #5]
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff feac 	bl	8004074 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800431c:	e024      	b.n	8004368 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800431e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004322:	79b9      	ldrb	r1, [r7, #6]
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	4618      	mov	r0, r3
 8004328:	f7ff fea4 	bl	8004074 <ssd1306_DrawPixel>
        error2 = error * 2;
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	425b      	negs	r3, r3
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	dd08      	ble.n	800434e <ssd1306_Line+0xa6>
            error -= deltaY;
 800433c:	69fa      	ldr	r2, [r7, #28]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	4413      	add	r3, r2
 800434c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	429a      	cmp	r2, r3
 8004354:	da08      	bge.n	8004368 <ssd1306_Line+0xc0>
            error += deltaX;
 8004356:	69fa      	ldr	r2, [r7, #28]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	4413      	add	r3, r2
 800435c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	b2da      	uxtb	r2, r3
 8004362:	79bb      	ldrb	r3, [r7, #6]
 8004364:	4413      	add	r3, r2
 8004366:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004368:	79fa      	ldrb	r2, [r7, #7]
 800436a:	797b      	ldrb	r3, [r7, #5]
 800436c:	429a      	cmp	r2, r3
 800436e:	d1d6      	bne.n	800431e <ssd1306_Line+0x76>
 8004370:	79ba      	ldrb	r2, [r7, #6]
 8004372:	793b      	ldrb	r3, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d1d2      	bne.n	800431e <ssd1306_Line+0x76>
        }
    }
    return;
 8004378:	bf00      	nop
}
 800437a:	3724      	adds	r7, #36	@ 0x24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd90      	pop	{r4, r7, pc}

08004380 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004380:	b590      	push	{r4, r7, lr}
 8004382:	b085      	sub	sp, #20
 8004384:	af02      	add	r7, sp, #8
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	4611      	mov	r1, r2
 800438c:	461a      	mov	r2, r3
 800438e:	4623      	mov	r3, r4
 8004390:	71fb      	strb	r3, [r7, #7]
 8004392:	4603      	mov	r3, r0
 8004394:	71bb      	strb	r3, [r7, #6]
 8004396:	460b      	mov	r3, r1
 8004398:	717b      	strb	r3, [r7, #5]
 800439a:	4613      	mov	r3, r2
 800439c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800439e:	79bc      	ldrb	r4, [r7, #6]
 80043a0:	797a      	ldrb	r2, [r7, #5]
 80043a2:	79b9      	ldrb	r1, [r7, #6]
 80043a4:	79f8      	ldrb	r0, [r7, #7]
 80043a6:	7e3b      	ldrb	r3, [r7, #24]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	4623      	mov	r3, r4
 80043ac:	f7ff ff7c 	bl	80042a8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80043b0:	793c      	ldrb	r4, [r7, #4]
 80043b2:	797a      	ldrb	r2, [r7, #5]
 80043b4:	79b9      	ldrb	r1, [r7, #6]
 80043b6:	7978      	ldrb	r0, [r7, #5]
 80043b8:	7e3b      	ldrb	r3, [r7, #24]
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	4623      	mov	r3, r4
 80043be:	f7ff ff73 	bl	80042a8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80043c2:	793c      	ldrb	r4, [r7, #4]
 80043c4:	79fa      	ldrb	r2, [r7, #7]
 80043c6:	7939      	ldrb	r1, [r7, #4]
 80043c8:	7978      	ldrb	r0, [r7, #5]
 80043ca:	7e3b      	ldrb	r3, [r7, #24]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	4623      	mov	r3, r4
 80043d0:	f7ff ff6a 	bl	80042a8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80043d4:	79bc      	ldrb	r4, [r7, #6]
 80043d6:	79fa      	ldrb	r2, [r7, #7]
 80043d8:	7939      	ldrb	r1, [r7, #4]
 80043da:	79f8      	ldrb	r0, [r7, #7]
 80043dc:	7e3b      	ldrb	r3, [r7, #24]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	4623      	mov	r3, r4
 80043e2:	f7ff ff61 	bl	80042a8 <ssd1306_Line>

    return;
 80043e6:	bf00      	nop
}
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd90      	pop	{r4, r7, pc}

080043ee <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80043ee:	b590      	push	{r4, r7, lr}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	4604      	mov	r4, r0
 80043f6:	4608      	mov	r0, r1
 80043f8:	4611      	mov	r1, r2
 80043fa:	461a      	mov	r2, r3
 80043fc:	4623      	mov	r3, r4
 80043fe:	71fb      	strb	r3, [r7, #7]
 8004400:	4603      	mov	r3, r0
 8004402:	71bb      	strb	r3, [r7, #6]
 8004404:	460b      	mov	r3, r1
 8004406:	717b      	strb	r3, [r7, #5]
 8004408:	4613      	mov	r3, r2
 800440a:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800440c:	79fa      	ldrb	r2, [r7, #7]
 800440e:	797b      	ldrb	r3, [r7, #5]
 8004410:	4293      	cmp	r3, r2
 8004412:	bf28      	it	cs
 8004414:	4613      	movcs	r3, r2
 8004416:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004418:	797a      	ldrb	r2, [r7, #5]
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	4293      	cmp	r3, r2
 800441e:	bf38      	it	cc
 8004420:	4613      	movcc	r3, r2
 8004422:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8004424:	79ba      	ldrb	r2, [r7, #6]
 8004426:	793b      	ldrb	r3, [r7, #4]
 8004428:	4293      	cmp	r3, r2
 800442a:	bf28      	it	cs
 800442c:	4613      	movcs	r3, r2
 800442e:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004430:	793a      	ldrb	r2, [r7, #4]
 8004432:	79bb      	ldrb	r3, [r7, #6]
 8004434:	4293      	cmp	r3, r2
 8004436:	bf38      	it	cc
 8004438:	4613      	movcc	r3, r2
 800443a:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800443c:	7afb      	ldrb	r3, [r7, #11]
 800443e:	73fb      	strb	r3, [r7, #15]
 8004440:	e017      	b.n	8004472 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004442:	7b7b      	ldrb	r3, [r7, #13]
 8004444:	73bb      	strb	r3, [r7, #14]
 8004446:	e009      	b.n	800445c <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004448:	f897 2020 	ldrb.w	r2, [r7, #32]
 800444c:	7bf9      	ldrb	r1, [r7, #15]
 800444e:	7bbb      	ldrb	r3, [r7, #14]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fe0f 	bl	8004074 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004456:	7bbb      	ldrb	r3, [r7, #14]
 8004458:	3301      	adds	r3, #1
 800445a:	73bb      	strb	r3, [r7, #14]
 800445c:	7bba      	ldrb	r2, [r7, #14]
 800445e:	7b3b      	ldrb	r3, [r7, #12]
 8004460:	429a      	cmp	r2, r3
 8004462:	d803      	bhi.n	800446c <ssd1306_FillRectangle+0x7e>
 8004464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004468:	2b00      	cmp	r3, #0
 800446a:	daed      	bge.n	8004448 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	3301      	adds	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	7bfa      	ldrb	r2, [r7, #15]
 8004474:	7abb      	ldrb	r3, [r7, #10]
 8004476:	429a      	cmp	r2, r3
 8004478:	d803      	bhi.n	8004482 <ssd1306_FillRectangle+0x94>
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b3f      	cmp	r3, #63	@ 0x3f
 800447e:	d9e0      	bls.n	8004442 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004480:	bf00      	nop
 8004482:	bf00      	nop
}
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	bd90      	pop	{r4, r7, pc}

0800448a <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	603a      	str	r2, [r7, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	4603      	mov	r3, r0
 8004496:	71fb      	strb	r3, [r7, #7]
 8004498:	460b      	mov	r3, r1
 800449a:	71bb      	strb	r3, [r7, #6]
 800449c:	4613      	mov	r3, r2
 800449e:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80044a0:	797b      	ldrb	r3, [r7, #5]
 80044a2:	3307      	adds	r3, #7
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	da00      	bge.n	80044aa <ssd1306_DrawBitmap+0x20>
 80044a8:	3307      	adds	r3, #7
 80044aa:	10db      	asrs	r3, r3, #3
 80044ac:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80044ae:	2300      	movs	r3, #0
 80044b0:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80044b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db3e      	blt.n	8004538 <ssd1306_DrawBitmap+0xae>
 80044ba:	79bb      	ldrb	r3, [r7, #6]
 80044bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80044be:	d83b      	bhi.n	8004538 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80044c0:	2300      	movs	r3, #0
 80044c2:	73bb      	strb	r3, [r7, #14]
 80044c4:	e033      	b.n	800452e <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80044c6:	2300      	movs	r3, #0
 80044c8:	737b      	strb	r3, [r7, #13]
 80044ca:	e026      	b.n	800451a <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80044cc:	7b7b      	ldrb	r3, [r7, #13]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
 80044dc:	e00d      	b.n	80044fa <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80044de:	7bbb      	ldrb	r3, [r7, #14]
 80044e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80044e4:	fb02 f303 	mul.w	r3, r2, r3
 80044e8:	7b7a      	ldrb	r2, [r7, #13]
 80044ea:	08d2      	lsrs	r2, r2, #3
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	4413      	add	r3, r2
 80044f0:	461a      	mov	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	4413      	add	r3, r2
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80044fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	da08      	bge.n	8004514 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8004502:	79fa      	ldrb	r2, [r7, #7]
 8004504:	7b7b      	ldrb	r3, [r7, #13]
 8004506:	4413      	add	r3, r2
 8004508:	b2db      	uxtb	r3, r3
 800450a:	7f3a      	ldrb	r2, [r7, #28]
 800450c:	79b9      	ldrb	r1, [r7, #6]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff fdb0 	bl	8004074 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8004514:	7b7b      	ldrb	r3, [r7, #13]
 8004516:	3301      	adds	r3, #1
 8004518:	737b      	strb	r3, [r7, #13]
 800451a:	7b7a      	ldrb	r2, [r7, #13]
 800451c:	797b      	ldrb	r3, [r7, #5]
 800451e:	429a      	cmp	r2, r3
 8004520:	d3d4      	bcc.n	80044cc <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8004522:	7bbb      	ldrb	r3, [r7, #14]
 8004524:	3301      	adds	r3, #1
 8004526:	73bb      	strb	r3, [r7, #14]
 8004528:	79bb      	ldrb	r3, [r7, #6]
 800452a:	3301      	adds	r3, #1
 800452c:	71bb      	strb	r3, [r7, #6]
 800452e:	7bba      	ldrb	r2, [r7, #14]
 8004530:	7e3b      	ldrb	r3, [r7, #24]
 8004532:	429a      	cmp	r2, r3
 8004534:	d3c7      	bcc.n	80044c6 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004536:	e000      	b.n	800453a <ssd1306_DrawBitmap+0xb0>
        return;
 8004538:	bf00      	nop
}
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	4603      	mov	r3, r0
 8004548:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800454a:	2381      	movs	r3, #129	@ 0x81
 800454c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	4618      	mov	r0, r3
 8004552:	f7ff fcb3 	bl	8003ebc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fcaf 	bl	8003ebc <ssd1306_WriteCommand>
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004572:	79fb      	ldrb	r3, [r7, #7]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004578:	23af      	movs	r3, #175	@ 0xaf
 800457a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800457c:	4b08      	ldr	r3, [pc, #32]	@ (80045a0 <ssd1306_SetDisplayOn+0x38>)
 800457e:	2201      	movs	r2, #1
 8004580:	715a      	strb	r2, [r3, #5]
 8004582:	e004      	b.n	800458e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004584:	23ae      	movs	r3, #174	@ 0xae
 8004586:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004588:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <ssd1306_SetDisplayOn+0x38>)
 800458a:	2200      	movs	r2, #0
 800458c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fc93 	bl	8003ebc <ssd1306_WriteCommand>
}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	200011f4 	.word	0x200011f4
 80045a4:	00000000 	.word	0x00000000

080045a8 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80045b2:	60b8      	str	r0, [r7, #8]
 80045b4:	6079      	str	r1, [r7, #4]
 80045b6:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	330f      	adds	r3, #15
 80045be:	b2d8      	uxtb	r0, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	3301      	adds	r3, #1
 80045c6:	b2d9      	uxtb	r1, r3
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	330f      	adds	r3, #15
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	3305      	adds	r3, #5
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2401      	movs	r4, #1
 80045da:	9400      	str	r4, [sp, #0]
 80045dc:	f7ff fe64 	bl	80042a8 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	3310      	adds	r3, #16
 80045e6:	b2d8      	uxtb	r0, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	3301      	adds	r3, #1
 80045ee:	b2d9      	uxtb	r1, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3310      	adds	r3, #16
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	3305      	adds	r3, #5
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2401      	movs	r4, #1
 8004602:	9400      	str	r4, [sp, #0]
 8004604:	f7ff fe50 	bl	80042a8 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	b2d8      	uxtb	r0, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	b2d9      	uxtb	r1, r3
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	b2db      	uxtb	r3, r3
 8004614:	330e      	adds	r3, #14
 8004616:	b2da      	uxtb	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	3306      	adds	r3, #6
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2401      	movs	r4, #1
 8004622:	9400      	str	r4, [sp, #0]
 8004624:	f7ff feac 	bl	8004380 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f7fb ff65 	bl	80004f8 <__aeabi_f2d>
 800462e:	a396      	add	r3, pc, #600	@ (adr r3, 8004888 <batterygauge+0x2e0>)
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f7fc fa34 	bl	8000aa0 <__aeabi_dcmple>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d02a      	beq.n	8004694 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	3302      	adds	r3, #2
 8004644:	b2d8      	uxtb	r0, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	b2db      	uxtb	r3, r3
 800464a:	3302      	adds	r3, #2
 800464c:	b2d9      	uxtb	r1, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	b2db      	uxtb	r3, r3
 8004652:	3303      	adds	r3, #3
 8004654:	b2da      	uxtb	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	3304      	adds	r3, #4
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2401      	movs	r4, #1
 8004660:	9400      	str	r4, [sp, #0]
 8004662:	f7ff fe8d 	bl	8004380 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d113      	bne.n	8004694 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3302      	adds	r3, #2
 8004672:	b2d8      	uxtb	r0, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	3302      	adds	r3, #2
 800467a:	b2d9      	uxtb	r1, r3
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	3303      	adds	r3, #3
 8004682:	b2da      	uxtb	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	3304      	adds	r3, #4
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2401      	movs	r4, #1
 800468e:	9400      	str	r4, [sp, #0]
 8004690:	f7ff fe76 	bl	8004380 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7fb ff2f 	bl	80004f8 <__aeabi_f2d>
 800469a:	a37b      	add	r3, pc, #492	@ (adr r3, 8004888 <batterygauge+0x2e0>)
 800469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a0:	f7fc fa12 	bl	8000ac8 <__aeabi_dcmpgt>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d035      	beq.n	8004716 <batterygauge+0x16e>
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7fb ff24 	bl	80004f8 <__aeabi_f2d>
 80046b0:	a377      	add	r3, pc, #476	@ (adr r3, 8004890 <batterygauge+0x2e8>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f7fc f9f3 	bl	8000aa0 <__aeabi_dcmple>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d02a      	beq.n	8004716 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3302      	adds	r3, #2
 80046c6:	b2d8      	uxtb	r0, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3302      	adds	r3, #2
 80046ce:	b2d9      	uxtb	r1, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3303      	adds	r3, #3
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	3304      	adds	r3, #4
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2401      	movs	r4, #1
 80046e2:	9400      	str	r4, [sp, #0]
 80046e4:	f7ff fe4c 	bl	8004380 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d113      	bne.n	8004716 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	3305      	adds	r3, #5
 80046f4:	b2d8      	uxtb	r0, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	3302      	adds	r3, #2
 80046fc:	b2d9      	uxtb	r1, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	3306      	adds	r3, #6
 8004704:	b2da      	uxtb	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	3304      	adds	r3, #4
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2401      	movs	r4, #1
 8004710:	9400      	str	r4, [sp, #0]
 8004712:	f7ff fe35 	bl	8004380 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f7fb feee 	bl	80004f8 <__aeabi_f2d>
 800471c:	a35c      	add	r3, pc, #368	@ (adr r3, 8004890 <batterygauge+0x2e8>)
 800471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004722:	f7fc f9d1 	bl	8000ac8 <__aeabi_dcmpgt>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d049      	beq.n	80047c0 <batterygauge+0x218>
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7fb fee3 	bl	80004f8 <__aeabi_f2d>
 8004732:	a359      	add	r3, pc, #356	@ (adr r3, 8004898 <batterygauge+0x2f0>)
 8004734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004738:	f7fc f9b2 	bl	8000aa0 <__aeabi_dcmple>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d03e      	beq.n	80047c0 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	3302      	adds	r3, #2
 8004748:	b2d8      	uxtb	r0, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	3302      	adds	r3, #2
 8004750:	b2d9      	uxtb	r1, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	3303      	adds	r3, #3
 8004758:	b2da      	uxtb	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	3304      	adds	r3, #4
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2401      	movs	r4, #1
 8004764:	9400      	str	r4, [sp, #0]
 8004766:	f7ff fe0b 	bl	8004380 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	3305      	adds	r3, #5
 8004770:	b2d8      	uxtb	r0, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	3302      	adds	r3, #2
 8004778:	b2d9      	uxtb	r1, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	b2db      	uxtb	r3, r3
 800477e:	3306      	adds	r3, #6
 8004780:	b2da      	uxtb	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	3304      	adds	r3, #4
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2401      	movs	r4, #1
 800478c:	9400      	str	r4, [sp, #0]
 800478e:	f7ff fdf7 	bl	8004380 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d113      	bne.n	80047c0 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	3308      	adds	r3, #8
 800479e:	b2d8      	uxtb	r0, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3302      	adds	r3, #2
 80047a6:	b2d9      	uxtb	r1, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	3309      	adds	r3, #9
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	3304      	adds	r3, #4
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2401      	movs	r4, #1
 80047ba:	9400      	str	r4, [sp, #0]
 80047bc:	f7ff fde0 	bl	8004380 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f7fb fe99 	bl	80004f8 <__aeabi_f2d>
 80047c6:	a334      	add	r3, pc, #208	@ (adr r3, 8004898 <batterygauge+0x2f0>)
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f7fc f97c 	bl	8000ac8 <__aeabi_dcmpgt>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d100      	bne.n	80047d8 <batterygauge+0x230>
	}




}
 80047d6:	e052      	b.n	800487e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3302      	adds	r3, #2
 80047de:	b2d8      	uxtb	r0, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	3302      	adds	r3, #2
 80047e6:	b2d9      	uxtb	r1, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3303      	adds	r3, #3
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3304      	adds	r3, #4
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2401      	movs	r4, #1
 80047fa:	9400      	str	r4, [sp, #0]
 80047fc:	f7ff fdc0 	bl	8004380 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	3305      	adds	r3, #5
 8004806:	b2d8      	uxtb	r0, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3302      	adds	r3, #2
 800480e:	b2d9      	uxtb	r1, r3
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3306      	adds	r3, #6
 8004816:	b2da      	uxtb	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	3304      	adds	r3, #4
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2401      	movs	r4, #1
 8004822:	9400      	str	r4, [sp, #0]
 8004824:	f7ff fdac 	bl	8004380 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	3308      	adds	r3, #8
 800482e:	b2d8      	uxtb	r0, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	3302      	adds	r3, #2
 8004836:	b2d9      	uxtb	r1, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	b2db      	uxtb	r3, r3
 800483c:	3309      	adds	r3, #9
 800483e:	b2da      	uxtb	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3304      	adds	r3, #4
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2401      	movs	r4, #1
 800484a:	9400      	str	r4, [sp, #0]
 800484c:	f7ff fd98 	bl	8004380 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d113      	bne.n	800487e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	b2db      	uxtb	r3, r3
 800485a:	330b      	adds	r3, #11
 800485c:	b2d8      	uxtb	r0, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	3302      	adds	r3, #2
 8004864:	b2d9      	uxtb	r1, r3
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	330c      	adds	r3, #12
 800486c:	b2da      	uxtb	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	b2db      	uxtb	r3, r3
 8004872:	3304      	adds	r3, #4
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2401      	movs	r4, #1
 8004878:	9400      	str	r4, [sp, #0]
 800487a:	f7ff fd81 	bl	8004380 <ssd1306_DrawRectangle>
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	bd90      	pop	{r4, r7, pc}
 8004886:	bf00      	nop
 8004888:	9999999a 	.word	0x9999999a
 800488c:	400d9999 	.word	0x400d9999
 8004890:	33333333 	.word	0x33333333
 8004894:	400f3333 	.word	0x400f3333
 8004898:	66666666 	.word	0x66666666
 800489c:	40106666 	.word	0x40106666

080048a0 <percentage>:

void percentage(float percent){
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fb fe24 	bl	80004f8 <__aeabi_f2d>
 80048b0:	a329      	add	r3, pc, #164	@ (adr r3, 8004958 <percentage+0xb8>)
 80048b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b6:	f7fb fe77 	bl	80005a8 <__aeabi_dmul>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4610      	mov	r0, r2
 80048c0:	4619      	mov	r1, r3
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	4b20      	ldr	r3, [pc, #128]	@ (8004948 <percentage+0xa8>)
 80048c8:	f7fb fcb8 	bl	800023c <__adddf3>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	ec43 2b17 	vmov	d7, r2, r3
 80048d4:	eeb0 0a47 	vmov.f32	s0, s14
 80048d8:	eef0 0a67 	vmov.f32	s1, s15
 80048dc:	f019 fc40 	bl	801e160 <floor>
 80048e0:	ec53 2b10 	vmov	r2, r3, d0
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	f7fc f936 	bl	8000b58 <__aeabi_d2uiz>
 80048ec:	4603      	mov	r3, r0
 80048ee:	b2da      	uxtb	r2, r3
 80048f0:	2301      	movs	r3, #1
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2338      	movs	r3, #56	@ 0x38
 80048f6:	2128      	movs	r1, #40	@ 0x28
 80048f8:	2020      	movs	r0, #32
 80048fa:	f7ff fd78 	bl	80043ee <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 95, 56, White);
 80048fe:	2301      	movs	r3, #1
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	2338      	movs	r3, #56	@ 0x38
 8004904:	225f      	movs	r2, #95	@ 0x5f
 8004906:	2128      	movs	r1, #40	@ 0x28
 8004908:	2020      	movs	r0, #32
 800490a:	f7ff fd39 	bl	8004380 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fb fdf2 	bl	80004f8 <__aeabi_f2d>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	e9cd 2300 	strd	r2, r3, [sp]
 800491c:	4a0b      	ldr	r2, [pc, #44]	@ (800494c <percentage+0xac>)
 800491e:	2114      	movs	r1, #20
 8004920:	480b      	ldr	r0, [pc, #44]	@ (8004950 <percentage+0xb0>)
 8004922:	f016 fcff 	bl	801b324 <sniprintf>
	ssd1306_SetCursor(45,44);
 8004926:	212c      	movs	r1, #44	@ 0x2c
 8004928:	202d      	movs	r0, #45	@ 0x2d
 800492a:	f7ff fca5 	bl	8004278 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 800492e:	4a09      	ldr	r2, [pc, #36]	@ (8004954 <percentage+0xb4>)
 8004930:	2301      	movs	r3, #1
 8004932:	ca06      	ldmia	r2, {r1, r2}
 8004934:	4806      	ldr	r0, [pc, #24]	@ (8004950 <percentage+0xb0>)
 8004936:	f7ff fc79 	bl	800422c <ssd1306_WriteString>


}
 800493a:	bf00      	nop
 800493c:	3708      	adds	r7, #8
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	f3af 8000 	nop.w
 8004948:	40400000 	.word	0x40400000
 800494c:	0801fc64 	.word	0x0801fc64
 8004950:	20000ad8 	.word	0x20000ad8
 8004954:	20000014 	.word	0x20000014
 8004958:	47ae147b 	.word	0x47ae147b
 800495c:	3fe47ae1 	.word	0x3fe47ae1

08004960 <statemachine>:

int flagpads=0;



void statemachine(void){
 8004960:	b5b0      	push	{r4, r5, r7, lr}
 8004962:	ed2d 8b02 	vpush	{d8}
 8004966:	b08a      	sub	sp, #40	@ 0x28
 8004968:	af04      	add	r7, sp, #16
	switch(state){
 800496a:	4bb9      	ldr	r3, [pc, #740]	@ (8004c50 <statemachine+0x2f0>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b05      	cmp	r3, #5
 8004970:	f201 85bd 	bhi.w	80064ee <statemachine+0x1b8e>
 8004974:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <statemachine+0x1c>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	08004995 	.word	0x08004995
 8004980:	08004d2f 	.word	0x08004d2f
 8004984:	08005579 	.word	0x08005579
 8004988:	08005c29 	.word	0x08005c29
 800498c:	08005ea3 	.word	0x08005ea3
 8004990:	080063af 	.word	0x080063af
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8004994:	2000      	movs	r0, #0
 8004996:	f7ff fb2d 	bl	8003ff4 <ssd1306_Fill>

				 if(myData.speed>=vitmax){
 800499a:	4bae      	ldr	r3, [pc, #696]	@ (8004c54 <statemachine+0x2f4>)
 800499c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80049a0:	4bad      	ldr	r3, [pc, #692]	@ (8004c58 <statemachine+0x2f8>)
 80049a2:	edd3 7a00 	vldr	s15, [r3]
 80049a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ae:	db03      	blt.n	80049b8 <statemachine+0x58>
									 vitmax=myData.speed;
 80049b0:	4ba8      	ldr	r3, [pc, #672]	@ (8004c54 <statemachine+0x2f4>)
 80049b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b4:	4aa8      	ldr	r2, [pc, #672]	@ (8004c58 <statemachine+0x2f8>)
 80049b6:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	617b      	str	r3, [r7, #20]
								 float sec=0;
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 80049c4:	4ba3      	ldr	r3, [pc, #652]	@ (8004c54 <statemachine+0x2f4>)
 80049c6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80049ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d2:	d032      	beq.n	8004a3a <statemachine+0xda>
									 pace=1000/(60*myData.speed);
 80049d4:	4b9f      	ldr	r3, [pc, #636]	@ (8004c54 <statemachine+0x2f4>)
 80049d6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80049da:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004c5c <statemachine+0x2fc>
 80049de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049e2:	eddf 6a9f 	vldr	s13, [pc, #636]	@ 8004c60 <statemachine+0x300>
 80049e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ea:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f7fb fd82 	bl	80004f8 <__aeabi_f2d>
 80049f4:	4604      	mov	r4, r0
 80049f6:	460d      	mov	r5, r1
 80049f8:	6978      	ldr	r0, [r7, #20]
 80049fa:	f7fb fd7d 	bl	80004f8 <__aeabi_f2d>
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	ec43 2b10 	vmov	d0, r2, r3
 8004a06:	f019 fbab 	bl	801e160 <floor>
 8004a0a:	ec53 2b10 	vmov	r2, r3, d0
 8004a0e:	4620      	mov	r0, r4
 8004a10:	4629      	mov	r1, r5
 8004a12:	f7fb fc11 	bl	8000238 <__aeabi_dsub>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	4b90      	ldr	r3, [pc, #576]	@ (8004c64 <statemachine+0x304>)
 8004a24:	f7fb fdc0 	bl	80005a8 <__aeabi_dmul>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	4619      	mov	r1, r3
 8004a30:	f7fc f8b2 	bl	8000b98 <__aeabi_d2f>
 8004a34:	4603      	mov	r3, r0
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e001      	b.n	8004a3e <statemachine+0xde>
								 }
								 else {
									 pace=99;
 8004a3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004c68 <statemachine+0x308>)
 8004a3c:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 8004a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8004c6c <statemachine+0x30c>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	f000 8087 	beq.w	8004b56 <statemachine+0x1f6>
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	f300 812a 	bgt.w	8004ca2 <statemachine+0x342>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <statemachine+0xf8>
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d040      	beq.n	8004ad8 <statemachine+0x178>
 8004a56:	e124      	b.n	8004ca2 <statemachine+0x342>


				 case STATE_GROS:


						ssd1306_SetCursor(32, 32);
 8004a58:	2120      	movs	r1, #32
 8004a5a:	2020      	movs	r0, #32
 8004a5c:	f7ff fc0c 	bl	8004278 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004a60:	4b7c      	ldr	r3, [pc, #496]	@ (8004c54 <statemachine+0x2f4>)
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fb fd47 	bl	80004f8 <__aeabi_f2d>
 8004a6a:	a377      	add	r3, pc, #476	@ (adr r3, 8004c48 <statemachine+0x2e8>)
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f7fb fd9a 	bl	80005a8 <__aeabi_dmul>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	e9cd 2300 	strd	r2, r3, [sp]
 8004a7c:	4a7c      	ldr	r2, [pc, #496]	@ (8004c70 <statemachine+0x310>)
 8004a7e:	210f      	movs	r1, #15
 8004a80:	487c      	ldr	r0, [pc, #496]	@ (8004c74 <statemachine+0x314>)
 8004a82:	f016 fc4f 	bl	801b324 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8004a86:	4a7c      	ldr	r2, [pc, #496]	@ (8004c78 <statemachine+0x318>)
 8004a88:	2301      	movs	r3, #1
 8004a8a:	ca06      	ldmia	r2, {r1, r2}
 8004a8c:	4879      	ldr	r0, [pc, #484]	@ (8004c74 <statemachine+0x314>)
 8004a8e:	f7ff fbcd 	bl	800422c <ssd1306_WriteString>
						ssd1306_SetCursor(32, 56);
 8004a92:	2138      	movs	r1, #56	@ 0x38
 8004a94:	2020      	movs	r0, #32
 8004a96:	f7ff fbef 	bl	8004278 <ssd1306_SetCursor>
						ssd1306_WriteString("Vit(kmh)", Font_6x8, White);
 8004a9a:	4a78      	ldr	r2, [pc, #480]	@ (8004c7c <statemachine+0x31c>)
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	ca06      	ldmia	r2, {r1, r2}
 8004aa0:	4877      	ldr	r0, [pc, #476]	@ (8004c80 <statemachine+0x320>)
 8004aa2:	f7ff fbc3 	bl	800422c <ssd1306_WriteString>
						batterygauge(vbat,79, 57,1);
 8004aa6:	4b77      	ldr	r3, [pc, #476]	@ (8004c84 <statemachine+0x324>)
 8004aa8:	edd3 7a00 	vldr	s15, [r3]
 8004aac:	2201      	movs	r2, #1
 8004aae:	2139      	movs	r1, #57	@ 0x39
 8004ab0:	204f      	movs	r0, #79	@ 0x4f
 8004ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab6:	f7ff fd77 	bl	80045a8 <batterygauge>

					 if(BTN_B>=1){
 8004aba:	4b73      	ldr	r3, [pc, #460]	@ (8004c88 <statemachine+0x328>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f340 80bb 	ble.w	8004c3a <statemachine+0x2da>
							spdstate++;
 8004ac4:	4b69      	ldr	r3, [pc, #420]	@ (8004c6c <statemachine+0x30c>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	4b67      	ldr	r3, [pc, #412]	@ (8004c6c <statemachine+0x30c>)
 8004ace:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 8004ad0:	4b6d      	ldr	r3, [pc, #436]	@ (8004c88 <statemachine+0x328>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
					 					 				  	}




				  break;
 8004ad6:	e0b0      	b.n	8004c3a <statemachine+0x2da>
				 case STATE_GROS1:

					 ssd1306_SetCursor(32, 32);
 8004ad8:	2120      	movs	r1, #32
 8004ada:	2020      	movs	r0, #32
 8004adc:	f7ff fbcc 	bl	8004278 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1f",vitmax*3.6);
 8004ae0:	4b5d      	ldr	r3, [pc, #372]	@ (8004c58 <statemachine+0x2f8>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fb fd07 	bl	80004f8 <__aeabi_f2d>
 8004aea:	a357      	add	r3, pc, #348	@ (adr r3, 8004c48 <statemachine+0x2e8>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f7fb fd5a 	bl	80005a8 <__aeabi_dmul>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	e9cd 2300 	strd	r2, r3, [sp]
 8004afc:	4a5c      	ldr	r2, [pc, #368]	@ (8004c70 <statemachine+0x310>)
 8004afe:	210f      	movs	r1, #15
 8004b00:	485c      	ldr	r0, [pc, #368]	@ (8004c74 <statemachine+0x314>)
 8004b02:	f016 fc0f 	bl	801b324 <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8004b06:	4a5c      	ldr	r2, [pc, #368]	@ (8004c78 <statemachine+0x318>)
 8004b08:	2301      	movs	r3, #1
 8004b0a:	ca06      	ldmia	r2, {r1, r2}
 8004b0c:	4859      	ldr	r0, [pc, #356]	@ (8004c74 <statemachine+0x314>)
 8004b0e:	f7ff fb8d 	bl	800422c <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 56);
 8004b12:	2138      	movs	r1, #56	@ 0x38
 8004b14:	2020      	movs	r0, #32
 8004b16:	f7ff fbaf 	bl	8004278 <ssd1306_SetCursor>
					 ssd1306_WriteString("maxV", Font_6x8, White);
 8004b1a:	4a58      	ldr	r2, [pc, #352]	@ (8004c7c <statemachine+0x31c>)
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	ca06      	ldmia	r2, {r1, r2}
 8004b20:	485a      	ldr	r0, [pc, #360]	@ (8004c8c <statemachine+0x32c>)
 8004b22:	f7ff fb83 	bl	800422c <ssd1306_WriteString>
					 batterygauge(vbat,79, 57,1);
 8004b26:	4b57      	ldr	r3, [pc, #348]	@ (8004c84 <statemachine+0x324>)
 8004b28:	edd3 7a00 	vldr	s15, [r3]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	2139      	movs	r1, #57	@ 0x39
 8004b30:	204f      	movs	r0, #79	@ 0x4f
 8004b32:	eeb0 0a67 	vmov.f32	s0, s15
 8004b36:	f7ff fd37 	bl	80045a8 <batterygauge>





					 if(BTN_B>=1){
 8004b3a:	4b53      	ldr	r3, [pc, #332]	@ (8004c88 <statemachine+0x328>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	dd7d      	ble.n	8004c3e <statemachine+0x2de>
					 							spdstate++;
 8004b42:	4b4a      	ldr	r3, [pc, #296]	@ (8004c6c <statemachine+0x30c>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	4b48      	ldr	r3, [pc, #288]	@ (8004c6c <statemachine+0x30c>)
 8004b4c:	701a      	strb	r2, [r3, #0]
					 							BTN_B=0;
 8004b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8004c88 <statemachine+0x328>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

					 					 					 				  	}



					 break;
 8004b54:	e073      	b.n	8004c3e <statemachine+0x2de>
				  case STATE_SUMMARY:
				  						ssd1306_SetCursor(32, 32);
 8004b56:	2120      	movs	r1, #32
 8004b58:	2020      	movs	r0, #32
 8004b5a:	f7ff fb8d 	bl	8004278 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 8004b5e:	6978      	ldr	r0, [r7, #20]
 8004b60:	f7fb fcca 	bl	80004f8 <__aeabi_f2d>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	ec43 2b10 	vmov	d0, r2, r3
 8004b6c:	f019 faf8 	bl	801e160 <floor>
 8004b70:	eeb0 8a40 	vmov.f32	s16, s0
 8004b74:	eef0 8a60 	vmov.f32	s17, s1
 8004b78:	6938      	ldr	r0, [r7, #16]
 8004b7a:	f7fb fcbd 	bl	80004f8 <__aeabi_f2d>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	460b      	mov	r3, r1
 8004b82:	ec43 2b10 	vmov	d0, r2, r3
 8004b86:	f019 faeb 	bl	801e160 <floor>
 8004b8a:	eeb0 7a40 	vmov.f32	s14, s0
 8004b8e:	eef0 7a60 	vmov.f32	s15, s1
 8004b92:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b96:	ed8d 8b00 	vstr	d8, [sp]
 8004b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8004c90 <statemachine+0x330>)
 8004b9c:	210f      	movs	r1, #15
 8004b9e:	4835      	ldr	r0, [pc, #212]	@ (8004c74 <statemachine+0x314>)
 8004ba0:	f016 fbc0 	bl	801b324 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8004c94 <statemachine+0x334>)
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	ca06      	ldmia	r2, {r1, r2}
 8004baa:	4832      	ldr	r0, [pc, #200]	@ (8004c74 <statemachine+0x314>)
 8004bac:	f7ff fb3e 	bl	800422c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 42);
 8004bb0:	212a      	movs	r1, #42	@ 0x2a
 8004bb2:	2020      	movs	r0, #32
 8004bb4:	f7ff fb60 	bl	8004278 <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 8004bb8:	4a30      	ldr	r2, [pc, #192]	@ (8004c7c <statemachine+0x31c>)
 8004bba:	2301      	movs	r3, #1
 8004bbc:	ca06      	ldmia	r2, {r1, r2}
 8004bbe:	4836      	ldr	r0, [pc, #216]	@ (8004c98 <statemachine+0x338>)
 8004bc0:	f7ff fb34 	bl	800422c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 56);
 8004bc4:	2138      	movs	r1, #56	@ 0x38
 8004bc6:	2020      	movs	r0, #32
 8004bc8:	f7ff fb56 	bl	8004278 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 8004bcc:	4b22      	ldr	r3, [pc, #136]	@ (8004c58 <statemachine+0x2f8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fb fc91 	bl	80004f8 <__aeabi_f2d>
 8004bd6:	a31c      	add	r3, pc, #112	@ (adr r3, 8004c48 <statemachine+0x2e8>)
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fce4 	bl	80005a8 <__aeabi_dmul>
 8004be0:	4602      	mov	r2, r0
 8004be2:	460b      	mov	r3, r1
 8004be4:	e9cd 2300 	strd	r2, r3, [sp]
 8004be8:	4a2c      	ldr	r2, [pc, #176]	@ (8004c9c <statemachine+0x33c>)
 8004bea:	210f      	movs	r1, #15
 8004bec:	4821      	ldr	r0, [pc, #132]	@ (8004c74 <statemachine+0x314>)
 8004bee:	f016 fb99 	bl	801b324 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004bf2:	4a22      	ldr	r2, [pc, #136]	@ (8004c7c <statemachine+0x31c>)
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	ca06      	ldmia	r2, {r1, r2}
 8004bf8:	481e      	ldr	r0, [pc, #120]	@ (8004c74 <statemachine+0x314>)
 8004bfa:	f7ff fb17 	bl	800422c <ssd1306_WriteString>
				  						batterygauge(vbat,79, 43,1);
 8004bfe:	4b21      	ldr	r3, [pc, #132]	@ (8004c84 <statemachine+0x324>)
 8004c00:	edd3 7a00 	vldr	s15, [r3]
 8004c04:	2201      	movs	r2, #1
 8004c06:	212b      	movs	r1, #43	@ 0x2b
 8004c08:	204f      	movs	r0, #79	@ 0x4f
 8004c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0e:	f7ff fccb 	bl	80045a8 <batterygauge>



				  					 if(BTN_B>=1){
 8004c12:	4b1d      	ldr	r3, [pc, #116]	@ (8004c88 <statemachine+0x328>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	dd42      	ble.n	8004ca0 <statemachine+0x340>
				  								spdstate--;
 8004c1a:	4b14      	ldr	r3, [pc, #80]	@ (8004c6c <statemachine+0x30c>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4b12      	ldr	r3, [pc, #72]	@ (8004c6c <statemachine+0x30c>)
 8004c24:	701a      	strb	r2, [r3, #0]
				  								spdstate--;
 8004c26:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <statemachine+0x30c>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b2da      	uxtb	r2, r3
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c6c <statemachine+0x30c>)
 8004c30:	701a      	strb	r2, [r3, #0]
				  								BTN_B=0;
 8004c32:	4b15      	ldr	r3, [pc, #84]	@ (8004c88 <statemachine+0x328>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	601a      	str	r2, [r3, #0]
				  					 					 				  	}




				  					 break;
 8004c38:	e032      	b.n	8004ca0 <statemachine+0x340>
				  break;
 8004c3a:	bf00      	nop
 8004c3c:	e031      	b.n	8004ca2 <statemachine+0x342>
					 break;
 8004c3e:	bf00      	nop
 8004c40:	e02f      	b.n	8004ca2 <statemachine+0x342>
 8004c42:	bf00      	nop
 8004c44:	f3af 8000 	nop.w
 8004c48:	cccccccd 	.word	0xcccccccd
 8004c4c:	400ccccc 	.word	0x400ccccc
 8004c50:	200005e8 	.word	0x200005e8
 8004c54:	20000838 	.word	0x20000838
 8004c58:	20000b4c 	.word	0x20000b4c
 8004c5c:	42700000 	.word	0x42700000
 8004c60:	447a0000 	.word	0x447a0000
 8004c64:	404e0000 	.word	0x404e0000
 8004c68:	42c60000 	.word	0x42c60000
 8004c6c:	200005e9 	.word	0x200005e9
 8004c70:	0801fc70 	.word	0x0801fc70
 8004c74:	20000ad8 	.word	0x20000ad8
 8004c78:	20000024 	.word	0x20000024
 8004c7c:	20000014 	.word	0x20000014
 8004c80:	0801fc78 	.word	0x0801fc78
 8004c84:	200008b0 	.word	0x200008b0
 8004c88:	2000087c 	.word	0x2000087c
 8004c8c:	0801fc84 	.word	0x0801fc84
 8004c90:	0801fc8c 	.word	0x0801fc8c
 8004c94:	2000001c 	.word	0x2000001c
 8004c98:	0801fc9c 	.word	0x0801fc9c
 8004c9c:	0801fca4 	.word	0x0801fca4
				  					 break;
 8004ca0:	bf00      	nop
				  }
				  					if(BTN_A>=1){
 8004ca2:	4b84      	ldr	r3, [pc, #528]	@ (8004eb4 <statemachine+0x554>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	dd0b      	ble.n	8004cc2 <statemachine+0x362>
				  									 					state++;
 8004caa:	4b83      	ldr	r3, [pc, #524]	@ (8004eb8 <statemachine+0x558>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4b81      	ldr	r3, [pc, #516]	@ (8004eb8 <statemachine+0x558>)
 8004cb4:	701a      	strb	r2, [r3, #0]
				  									 					BTN_A=0;
 8004cb6:	4b7f      	ldr	r3, [pc, #508]	@ (8004eb4 <statemachine+0x554>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
				  									 					BTN_B=0;
 8004cbc:	4b7f      	ldr	r3, [pc, #508]	@ (8004ebc <statemachine+0x55c>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]
				  									  	}
				  									 	 if(BTN_A_LONG>=1){
 8004cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec0 <statemachine+0x560>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	dd23      	ble.n	8004d12 <statemachine+0x3b2>
				  									 						 				 									state++;
 8004cca:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb8 <statemachine+0x558>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	4b79      	ldr	r3, [pc, #484]	@ (8004eb8 <statemachine+0x558>)
 8004cd4:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cd6:	4b78      	ldr	r3, [pc, #480]	@ (8004eb8 <statemachine+0x558>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	4b76      	ldr	r3, [pc, #472]	@ (8004eb8 <statemachine+0x558>)
 8004ce0:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004ce2:	4b75      	ldr	r3, [pc, #468]	@ (8004eb8 <statemachine+0x558>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	4b73      	ldr	r3, [pc, #460]	@ (8004eb8 <statemachine+0x558>)
 8004cec:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cee:	4b72      	ldr	r3, [pc, #456]	@ (8004eb8 <statemachine+0x558>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	b2da      	uxtb	r2, r3
 8004cf6:	4b70      	ldr	r3, [pc, #448]	@ (8004eb8 <statemachine+0x558>)
 8004cf8:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8004eb8 <statemachine+0x558>)
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	4b6d      	ldr	r3, [pc, #436]	@ (8004eb8 <statemachine+0x558>)
 8004d04:	701a      	strb	r2, [r3, #0]

				  									 						 				 									  			 	BTN_A_LONG=0;
 8004d06:	4b6e      	ldr	r3, [pc, #440]	@ (8004ec0 <statemachine+0x560>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	601a      	str	r2, [r3, #0]
				  									 						 				 									  			 	BTN_B=0;
 8004d0c:	4b6b      	ldr	r3, [pc, #428]	@ (8004ebc <statemachine+0x55c>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	601a      	str	r2, [r3, #0]
				  									 						 				 									  	}
				  									 	 if(BTN_B_LONG>=1){
 8004d12:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec4 <statemachine+0x564>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f341 83dd 	ble.w	80064d6 <statemachine+0x1b76>
				  									 					  							  vitmax=0;
 8004d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec8 <statemachine+0x568>)
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
				  									 					  							BTN_B_LONG=0;
 8004d24:	4b67      	ldr	r3, [pc, #412]	@ (8004ec4 <statemachine+0x564>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
				  									 					  						}
				  									 	 break;
 8004d2a:	f001 bbd4 	b.w	80064d6 <statemachine+0x1b76>


				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f7ff f960 	bl	8003ff4 <ssd1306_Fill>

					  if(settimeen==0){
 8004d34:	4b65      	ldr	r3, [pc, #404]	@ (8004ecc <statemachine+0x56c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d145      	bne.n	8004dc8 <statemachine+0x468>

						  if(myData.fix==1){
 8004d3c:	4b64      	ldr	r3, [pc, #400]	@ (8004ed0 <statemachine+0x570>)
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d141      	bne.n	8004dc8 <statemachine+0x468>
							settimeen=1;
 8004d44:	4b61      	ldr	r3, [pc, #388]	@ (8004ecc <statemachine+0x56c>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004d4a:	4b61      	ldr	r3, [pc, #388]	@ (8004ed0 <statemachine+0x570>)
 8004d4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004d50:	f003 030f 	and.w	r3, r3, #15
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	0092      	lsls	r2, r2, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed0 <statemachine+0x570>)
 8004d62:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	4b58      	ldr	r3, [pc, #352]	@ (8004ed4 <statemachine+0x574>)
 8004d72:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004d74:	4b56      	ldr	r3, [pc, #344]	@ (8004ed0 <statemachine+0x570>)
 8004d76:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	0092      	lsls	r2, r2, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	4b51      	ldr	r3, [pc, #324]	@ (8004ed0 <statemachine+0x570>)
 8004d8c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d90:	f003 030f 	and.w	r3, r3, #15
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed8 <statemachine+0x578>)
 8004d9c:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004ed0 <statemachine+0x570>)
 8004da0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	0092      	lsls	r2, r2, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	4b46      	ldr	r3, [pc, #280]	@ (8004ed0 <statemachine+0x570>)
 8004db6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	4413      	add	r3, r2
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	4b45      	ldr	r3, [pc, #276]	@ (8004edc <statemachine+0x57c>)
 8004dc6:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8004dc8:	4b45      	ldr	r3, [pc, #276]	@ (8004ee0 <statemachine+0x580>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	f000 837b 	beq.w	80054c8 <statemachine+0xb68>
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	f301 8381 	bgt.w	80064da <statemachine+0x1b7a>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <statemachine+0x486>
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	f000 8093 	beq.w	8004f08 <statemachine+0x5a8>
						  				 									 									  	}

					  }


					  break;
 8004de2:	f001 bb7a 	b.w	80064da <statemachine+0x1b7a>
						  ssd1306_SetCursor(32,32);
 8004de6:	2120      	movs	r1, #32
 8004de8:	2020      	movs	r0, #32
 8004dea:	f7ff fa45 	bl	8004278 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004dee:	4a3d      	ldr	r2, [pc, #244]	@ (8004ee4 <statemachine+0x584>)
 8004df0:	2301      	movs	r3, #1
 8004df2:	ca06      	ldmia	r2, {r1, r2}
 8004df4:	483c      	ldr	r0, [pc, #240]	@ (8004ee8 <statemachine+0x588>)
 8004df6:	f7ff fa19 	bl	800422c <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8004dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8004eec <statemachine+0x58c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3c      	ldr	r2, [pc, #240]	@ (8004ef0 <statemachine+0x590>)
 8004e00:	2132      	movs	r1, #50	@ 0x32
 8004e02:	483c      	ldr	r0, [pc, #240]	@ (8004ef4 <statemachine+0x594>)
 8004e04:	f016 fa8e 	bl	801b324 <sniprintf>
						  ssd1306_SetCursor(32,42);
 8004e08:	212a      	movs	r1, #42	@ 0x2a
 8004e0a:	2020      	movs	r0, #32
 8004e0c:	f7ff fa34 	bl	8004278 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004e10:	4a39      	ldr	r2, [pc, #228]	@ (8004ef8 <statemachine+0x598>)
 8004e12:	2301      	movs	r3, #1
 8004e14:	ca06      	ldmia	r2, {r1, r2}
 8004e16:	4837      	ldr	r0, [pc, #220]	@ (8004ef4 <statemachine+0x594>)
 8004e18:	f7ff fa08 	bl	800422c <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004e1c:	4b37      	ldr	r3, [pc, #220]	@ (8004efc <statemachine+0x59c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a37      	ldr	r2, [pc, #220]	@ (8004f00 <statemachine+0x5a0>)
 8004e22:	2132      	movs	r1, #50	@ 0x32
 8004e24:	4833      	ldr	r0, [pc, #204]	@ (8004ef4 <statemachine+0x594>)
 8004e26:	f016 fa7d 	bl	801b324 <sniprintf>
						  ssd1306_SetCursor(32,52);
 8004e2a:	2134      	movs	r1, #52	@ 0x34
 8004e2c:	2020      	movs	r0, #32
 8004e2e:	f7ff fa23 	bl	8004278 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004e32:	4a31      	ldr	r2, [pc, #196]	@ (8004ef8 <statemachine+0x598>)
 8004e34:	2301      	movs	r3, #1
 8004e36:	ca06      	ldmia	r2, {r1, r2}
 8004e38:	482e      	ldr	r0, [pc, #184]	@ (8004ef4 <statemachine+0x594>)
 8004e3a:	f7ff f9f7 	bl	800422c <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8004e3e:	4b21      	ldr	r3, [pc, #132]	@ (8004ec4 <statemachine+0x564>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	dd0e      	ble.n	8004e64 <statemachine+0x504>
							balisestate++;
 8004e46:	4b26      	ldr	r3, [pc, #152]	@ (8004ee0 <statemachine+0x580>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	4b24      	ldr	r3, [pc, #144]	@ (8004ee0 <statemachine+0x580>)
 8004e50:	701a      	strb	r2, [r3, #0]
							BTN_B_LONG=0;
 8004e52:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec4 <statemachine+0x564>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8004e58:	4b16      	ldr	r3, [pc, #88]	@ (8004eb4 <statemachine+0x554>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8004e5e:	4829      	ldr	r0, [pc, #164]	@ (8004f04 <statemachine+0x5a4>)
 8004e60:	f00a f838 	bl	800eed4 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8004e64:	4b13      	ldr	r3, [pc, #76]	@ (8004eb4 <statemachine+0x554>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	dd0e      	ble.n	8004e8a <statemachine+0x52a>
						  				  			 	state++;
 8004e6c:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <statemachine+0x558>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <statemachine+0x558>)
 8004e76:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004e78:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb4 <statemachine+0x554>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <statemachine+0x55c>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004e84:	4b11      	ldr	r3, [pc, #68]	@ (8004ecc <statemachine+0x56c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <statemachine+0x560>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f340 836c 	ble.w	800556c <statemachine+0xc0c>
									  state--;
 8004e94:	4b08      	ldr	r3, [pc, #32]	@ (8004eb8 <statemachine+0x558>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b2da      	uxtb	r2, r3
 8004e9c:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <statemachine+0x558>)
 8004e9e:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <statemachine+0x560>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8004ea6:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <statemachine+0x55c>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004eac:	4b07      	ldr	r3, [pc, #28]	@ (8004ecc <statemachine+0x56c>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
						  break;
 8004eb2:	e35b      	b.n	800556c <statemachine+0xc0c>
 8004eb4:	20000878 	.word	0x20000878
 8004eb8:	200005e8 	.word	0x200005e8
 8004ebc:	2000087c 	.word	0x2000087c
 8004ec0:	20000bb0 	.word	0x20000bb0
 8004ec4:	20000bac 	.word	0x20000bac
 8004ec8:	20000b4c 	.word	0x20000b4c
 8004ecc:	20000b98 	.word	0x20000b98
 8004ed0:	20000838 	.word	0x20000838
 8004ed4:	20000b95 	.word	0x20000b95
 8004ed8:	20000b96 	.word	0x20000b96
 8004edc:	20000b94 	.word	0x20000b94
 8004ee0:	200005ed 	.word	0x200005ed
 8004ee4:	20000014 	.word	0x20000014
 8004ee8:	0801fcb0 	.word	0x0801fcb0
 8004eec:	20000ab4 	.word	0x20000ab4
 8004ef0:	0801fcb8 	.word	0x0801fcb8
 8004ef4:	20000ad8 	.word	0x20000ad8
 8004ef8:	2000001c 	.word	0x2000001c
 8004efc:	20000ab8 	.word	0x20000ab8
 8004f00:	0801fcc4 	.word	0x0801fcc4
 8004f04:	2000129c 	.word	0x2000129c
						  if(myData.speed>=vitmax){
 8004f08:	4ba3      	ldr	r3, [pc, #652]	@ (8005198 <statemachine+0x838>)
 8004f0a:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004f0e:	4ba3      	ldr	r3, [pc, #652]	@ (800519c <statemachine+0x83c>)
 8004f10:	edd3 7a00 	vldr	s15, [r3]
 8004f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1c:	db03      	blt.n	8004f26 <statemachine+0x5c6>
						  									 vitmax=myData.speed;
 8004f1e:	4b9e      	ldr	r3, [pc, #632]	@ (8005198 <statemachine+0x838>)
 8004f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f22:	4a9e      	ldr	r2, [pc, #632]	@ (800519c <statemachine+0x83c>)
 8004f24:	6013      	str	r3, [r2, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004f26:	4b9e      	ldr	r3, [pc, #632]	@ (80051a0 <statemachine+0x840>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	dd05      	ble.n	8004f3e <statemachine+0x5de>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8004f32:	489c      	ldr	r0, [pc, #624]	@ (80051a4 <statemachine+0x844>)
 8004f34:	f00a f81c 	bl	800ef70 <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8004f38:	4b9b      	ldr	r3, [pc, #620]	@ (80051a8 <statemachine+0x848>)
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8004f3e:	4b9b      	ldr	r3, [pc, #620]	@ (80051ac <statemachine+0x84c>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	f040 80b0 	bne.w	80050a8 <statemachine+0x748>
							  oldlat=myData.latitude;
 8004f48:	4b93      	ldr	r3, [pc, #588]	@ (8005198 <statemachine+0x838>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	4998      	ldr	r1, [pc, #608]	@ (80051b0 <statemachine+0x850>)
 8004f50:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8004f54:	4b90      	ldr	r3, [pc, #576]	@ (8005198 <statemachine+0x838>)
 8004f56:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004f5a:	4996      	ldr	r1, [pc, #600]	@ (80051b4 <statemachine+0x854>)
 8004f5c:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8004f60:	4995      	ldr	r1, [pc, #596]	@ (80051b8 <statemachine+0x858>)
 8004f62:	488d      	ldr	r0, [pc, #564]	@ (8005198 <statemachine+0x838>)
 8004f64:	f7fe fada 	bl	800351c <nmea_parse>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004f68:	4b91      	ldr	r3, [pc, #580]	@ (80051b0 <statemachine+0x850>)
 8004f6a:	ed93 7b00 	vldr	d7, [r3]
 8004f6e:	4b8a      	ldr	r3, [pc, #552]	@ (8005198 <statemachine+0x838>)
 8004f70:	ed93 6b00 	vldr	d6, [r3]
 8004f74:	4b8f      	ldr	r3, [pc, #572]	@ (80051b4 <statemachine+0x854>)
 8004f76:	ed93 5b00 	vldr	d5, [r3]
 8004f7a:	4b87      	ldr	r3, [pc, #540]	@ (8005198 <statemachine+0x838>)
 8004f7c:	ed93 4b04 	vldr	d4, [r3, #16]
 8004f80:	eeb0 3a44 	vmov.f32	s6, s8
 8004f84:	eef0 3a64 	vmov.f32	s7, s9
 8004f88:	eeb0 2a45 	vmov.f32	s4, s10
 8004f8c:	eef0 2a65 	vmov.f32	s5, s11
 8004f90:	eeb0 1a46 	vmov.f32	s2, s12
 8004f94:	eef0 1a66 	vmov.f32	s3, s13
 8004f98:	eeb0 0a47 	vmov.f32	s0, s14
 8004f9c:	eef0 0a67 	vmov.f32	s1, s15
 8004fa0:	f7fe fb66 	bl	8003670 <distancecalc>
 8004fa4:	ec51 0b10 	vmov	r0, r1, d0
 8004fa8:	a379      	add	r3, pc, #484	@ (adr r3, 8005190 <statemachine+0x830>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb fd8b 	bl	8000ac8 <__aeabi_dcmpgt>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d02b      	beq.n	8005010 <statemachine+0x6b0>
								  myData.latitude=oldlat;
 8004fb8:	4b7d      	ldr	r3, [pc, #500]	@ (80051b0 <statemachine+0x850>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	4976      	ldr	r1, [pc, #472]	@ (8005198 <statemachine+0x838>)
 8004fc0:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8004fc4:	4b7b      	ldr	r3, [pc, #492]	@ (80051b4 <statemachine+0x854>)
 8004fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fca:	4973      	ldr	r1, [pc, #460]	@ (8005198 <statemachine+0x838>)
 8004fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004fd0:	4b7a      	ldr	r3, [pc, #488]	@ (80051bc <statemachine+0x85c>)
 8004fd2:	edd3 7a00 	vldr	s15, [r3]
 8004fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80051c0 <statemachine+0x860>)
 8004fd8:	ed93 7a00 	vldr	s14, [r3]
 8004fdc:	4b6e      	ldr	r3, [pc, #440]	@ (8005198 <statemachine+0x838>)
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	4a6d      	ldr	r2, [pc, #436]	@ (8005198 <statemachine+0x838>)
 8004fe2:	edd2 6a08 	vldr	s13, [r2, #32]
 8004fe6:	eeb0 1a66 	vmov.f32	s2, s13
 8004fea:	461a      	mov	r2, r3
 8004fec:	496a      	ldr	r1, [pc, #424]	@ (8005198 <statemachine+0x838>)
 8004fee:	eef0 0a47 	vmov.f32	s1, s14
 8004ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff6:	4873      	ldr	r0, [pc, #460]	@ (80051c4 <statemachine+0x864>)
 8004ff8:	f7fe fd96 	bl	8003b28 <csvframe>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	4a72      	ldr	r2, [pc, #456]	@ (80051c8 <statemachine+0x868>)
 8005000:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8005002:	4b71      	ldr	r3, [pc, #452]	@ (80051c8 <statemachine+0x868>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4619      	mov	r1, r3
 8005008:	486e      	ldr	r0, [pc, #440]	@ (80051c4 <statemachine+0x864>)
 800500a:	f7fe fec3 	bl	8003d94 <writebuffertoflash>
 800500e:	e048      	b.n	80050a2 <statemachine+0x742>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8005010:	4b67      	ldr	r3, [pc, #412]	@ (80051b0 <statemachine+0x850>)
 8005012:	ed93 7b00 	vldr	d7, [r3]
 8005016:	4b60      	ldr	r3, [pc, #384]	@ (8005198 <statemachine+0x838>)
 8005018:	ed93 6b00 	vldr	d6, [r3]
 800501c:	4b65      	ldr	r3, [pc, #404]	@ (80051b4 <statemachine+0x854>)
 800501e:	ed93 5b00 	vldr	d5, [r3]
 8005022:	4b5d      	ldr	r3, [pc, #372]	@ (8005198 <statemachine+0x838>)
 8005024:	ed93 4b04 	vldr	d4, [r3, #16]
 8005028:	eeb0 3a44 	vmov.f32	s6, s8
 800502c:	eef0 3a64 	vmov.f32	s7, s9
 8005030:	eeb0 2a45 	vmov.f32	s4, s10
 8005034:	eef0 2a65 	vmov.f32	s5, s11
 8005038:	eeb0 1a46 	vmov.f32	s2, s12
 800503c:	eef0 1a66 	vmov.f32	s3, s13
 8005040:	eeb0 0a47 	vmov.f32	s0, s14
 8005044:	eef0 0a67 	vmov.f32	s1, s15
 8005048:	f7fe fb12 	bl	8003670 <distancecalc>
 800504c:	ec51 0b10 	vmov	r0, r1, d0
 8005050:	4b5e      	ldr	r3, [pc, #376]	@ (80051cc <statemachine+0x86c>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb f8f1 	bl	800023c <__adddf3>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	495b      	ldr	r1, [pc, #364]	@ (80051cc <statemachine+0x86c>)
 8005060:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8005064:	4b55      	ldr	r3, [pc, #340]	@ (80051bc <statemachine+0x85c>)
 8005066:	edd3 7a00 	vldr	s15, [r3]
 800506a:	4b55      	ldr	r3, [pc, #340]	@ (80051c0 <statemachine+0x860>)
 800506c:	ed93 7a00 	vldr	s14, [r3]
 8005070:	4b49      	ldr	r3, [pc, #292]	@ (8005198 <statemachine+0x838>)
 8005072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005074:	4a48      	ldr	r2, [pc, #288]	@ (8005198 <statemachine+0x838>)
 8005076:	edd2 6a08 	vldr	s13, [r2, #32]
 800507a:	eeb0 1a66 	vmov.f32	s2, s13
 800507e:	461a      	mov	r2, r3
 8005080:	4945      	ldr	r1, [pc, #276]	@ (8005198 <statemachine+0x838>)
 8005082:	eef0 0a47 	vmov.f32	s1, s14
 8005086:	eeb0 0a67 	vmov.f32	s0, s15
 800508a:	484e      	ldr	r0, [pc, #312]	@ (80051c4 <statemachine+0x864>)
 800508c:	f7fe fd4c 	bl	8003b28 <csvframe>
 8005090:	4603      	mov	r3, r0
 8005092:	4a4d      	ldr	r2, [pc, #308]	@ (80051c8 <statemachine+0x868>)
 8005094:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8005096:	4b4c      	ldr	r3, [pc, #304]	@ (80051c8 <statemachine+0x868>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4619      	mov	r1, r3
 800509c:	4849      	ldr	r0, [pc, #292]	@ (80051c4 <statemachine+0x864>)
 800509e:	f7fe fe79 	bl	8003d94 <writebuffertoflash>
							  enablewrite=0;
 80050a2:	4b42      	ldr	r3, [pc, #264]	@ (80051ac <statemachine+0x84c>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
						  ssd1306_SetCursor(32,32);
 80050a8:	2120      	movs	r1, #32
 80050aa:	2020      	movs	r0, #32
 80050ac:	f7ff f8e4 	bl	8004278 <ssd1306_SetCursor>
						  switch(ecranstate){
 80050b0:	4b47      	ldr	r3, [pc, #284]	@ (80051d0 <statemachine+0x870>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b05      	cmp	r3, #5
 80050b6:	f200 818c 	bhi.w	80053d2 <statemachine+0xa72>
 80050ba:	a201      	add	r2, pc, #4	@ (adr r2, 80050c0 <statemachine+0x760>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050d9 	.word	0x080050d9
 80050c4:	0800512b 	.word	0x0800512b
 80050c8:	080051fd 	.word	0x080051fd
 80050cc:	08005267 	.word	0x08005267
 80050d0:	080052c7 	.word	0x080052c7
 80050d4:	08005325 	.word	0x08005325
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 80050d8:	4b31      	ldr	r3, [pc, #196]	@ (80051a0 <statemachine+0x840>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3d      	ldr	r2, [pc, #244]	@ (80051d4 <statemachine+0x874>)
 80050de:	2132      	movs	r1, #50	@ 0x32
 80050e0:	483d      	ldr	r0, [pc, #244]	@ (80051d8 <statemachine+0x878>)
 80050e2:	f016 f91f 	bl	801b324 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80050e6:	4a3d      	ldr	r2, [pc, #244]	@ (80051dc <statemachine+0x87c>)
 80050e8:	2301      	movs	r3, #1
 80050ea:	ca06      	ldmia	r2, {r1, r2}
 80050ec:	483a      	ldr	r0, [pc, #232]	@ (80051d8 <statemachine+0x878>)
 80050ee:	f7ff f89d 	bl	800422c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 80050f2:	212a      	movs	r1, #42	@ 0x2a
 80050f4:	2020      	movs	r0, #32
 80050f6:	f7ff f8bf 	bl	8004278 <ssd1306_SetCursor>
							  ssd1306_WriteString("PageNb",Font_6x8,White);
 80050fa:	4a39      	ldr	r2, [pc, #228]	@ (80051e0 <statemachine+0x880>)
 80050fc:	2301      	movs	r3, #1
 80050fe:	ca06      	ldmia	r2, {r1, r2}
 8005100:	4838      	ldr	r0, [pc, #224]	@ (80051e4 <statemachine+0x884>)
 8005102:	f7ff f893 	bl	800422c <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005106:	4b38      	ldr	r3, [pc, #224]	@ (80051e8 <statemachine+0x888>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f340 8156 	ble.w	80053bc <statemachine+0xa5c>
														  ecranstate++;
 8005110:	4b2f      	ldr	r3, [pc, #188]	@ (80051d0 <statemachine+0x870>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	b2da      	uxtb	r2, r3
 8005118:	4b2d      	ldr	r3, [pc, #180]	@ (80051d0 <statemachine+0x870>)
 800511a:	701a      	strb	r2, [r3, #0]
													  	BTN_B=0;
 800511c:	4b32      	ldr	r3, [pc, #200]	@ (80051e8 <statemachine+0x888>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
													  	BTN_A=0;
 8005122:	4b32      	ldr	r3, [pc, #200]	@ (80051ec <statemachine+0x88c>)
 8005124:	2200      	movs	r2, #0
 8005126:	601a      	str	r2, [r3, #0]
							  break;
 8005128:	e148      	b.n	80053bc <statemachine+0xa5c>
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 800512a:	4b28      	ldr	r3, [pc, #160]	@ (80051cc <statemachine+0x86c>)
 800512c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	4b2e      	ldr	r3, [pc, #184]	@ (80051f0 <statemachine+0x890>)
 8005136:	f7fb fb61 	bl	80007fc <__aeabi_ddiv>
 800513a:	4602      	mov	r2, r0
 800513c:	460b      	mov	r3, r1
 800513e:	e9cd 2300 	strd	r2, r3, [sp]
 8005142:	4a2c      	ldr	r2, [pc, #176]	@ (80051f4 <statemachine+0x894>)
 8005144:	2132      	movs	r1, #50	@ 0x32
 8005146:	4824      	ldr	r0, [pc, #144]	@ (80051d8 <statemachine+0x878>)
 8005148:	f016 f8ec 	bl	801b324 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800514c:	4a23      	ldr	r2, [pc, #140]	@ (80051dc <statemachine+0x87c>)
 800514e:	2301      	movs	r3, #1
 8005150:	ca06      	ldmia	r2, {r1, r2}
 8005152:	4821      	ldr	r0, [pc, #132]	@ (80051d8 <statemachine+0x878>)
 8005154:	f7ff f86a 	bl	800422c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8005158:	212a      	movs	r1, #42	@ 0x2a
 800515a:	2020      	movs	r0, #32
 800515c:	f7ff f88c 	bl	8004278 <ssd1306_SetCursor>
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 8005160:	4a1f      	ldr	r2, [pc, #124]	@ (80051e0 <statemachine+0x880>)
 8005162:	2301      	movs	r3, #1
 8005164:	ca06      	ldmia	r2, {r1, r2}
 8005166:	4824      	ldr	r0, [pc, #144]	@ (80051f8 <statemachine+0x898>)
 8005168:	f7ff f860 	bl	800422c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800516c:	4b1e      	ldr	r3, [pc, #120]	@ (80051e8 <statemachine+0x888>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	f340 8125 	ble.w	80053c0 <statemachine+0xa60>
							  														  ecranstate++;
 8005176:	4b16      	ldr	r3, [pc, #88]	@ (80051d0 <statemachine+0x870>)
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	3301      	adds	r3, #1
 800517c:	b2da      	uxtb	r2, r3
 800517e:	4b14      	ldr	r3, [pc, #80]	@ (80051d0 <statemachine+0x870>)
 8005180:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005182:	4b19      	ldr	r3, [pc, #100]	@ (80051e8 <statemachine+0x888>)
 8005184:	2200      	movs	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005188:	4b18      	ldr	r3, [pc, #96]	@ (80051ec <statemachine+0x88c>)
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
							  break;
 800518e:	e117      	b.n	80053c0 <statemachine+0xa60>
 8005190:	00000000 	.word	0x00000000
 8005194:	40616000 	.word	0x40616000
 8005198:	20000838 	.word	0x20000838
 800519c:	20000b4c 	.word	0x20000b4c
 80051a0:	20000ab8 	.word	0x20000ab8
 80051a4:	2000129c 	.word	0x2000129c
 80051a8:	200005ed 	.word	0x200005ed
 80051ac:	20000b90 	.word	0x20000b90
 80051b0:	20000b80 	.word	0x20000b80
 80051b4:	20000b88 	.word	0x20000b88
 80051b8:	20000634 	.word	0x20000634
 80051bc:	200008a8 	.word	0x200008a8
 80051c0:	200008b0 	.word	0x200008b0
 80051c4:	200008b4 	.word	0x200008b4
 80051c8:	20000b64 	.word	0x20000b64
 80051cc:	20000b78 	.word	0x20000b78
 80051d0:	20000cf8 	.word	0x20000cf8
 80051d4:	0801fccc 	.word	0x0801fccc
 80051d8:	20000ad8 	.word	0x20000ad8
 80051dc:	2000001c 	.word	0x2000001c
 80051e0:	20000014 	.word	0x20000014
 80051e4:	0801fcd0 	.word	0x0801fcd0
 80051e8:	2000087c 	.word	0x2000087c
 80051ec:	20000878 	.word	0x20000878
 80051f0:	408f4000 	.word	0x408f4000
 80051f4:	0801fcd8 	.word	0x0801fcd8
 80051f8:	0801fce0 	.word	0x0801fce0
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.speed*3.6);
 80051fc:	4b9e      	ldr	r3, [pc, #632]	@ (8005478 <statemachine+0xb18>)
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	4618      	mov	r0, r3
 8005202:	f7fb f979 	bl	80004f8 <__aeabi_f2d>
 8005206:	a39a      	add	r3, pc, #616	@ (adr r3, 8005470 <statemachine+0xb10>)
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f7fb f9cc 	bl	80005a8 <__aeabi_dmul>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	e9cd 2300 	strd	r2, r3, [sp]
 8005218:	4a98      	ldr	r2, [pc, #608]	@ (800547c <statemachine+0xb1c>)
 800521a:	2132      	movs	r1, #50	@ 0x32
 800521c:	4898      	ldr	r0, [pc, #608]	@ (8005480 <statemachine+0xb20>)
 800521e:	f016 f881 	bl	801b324 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8005222:	4a98      	ldr	r2, [pc, #608]	@ (8005484 <statemachine+0xb24>)
 8005224:	2301      	movs	r3, #1
 8005226:	ca06      	ldmia	r2, {r1, r2}
 8005228:	4895      	ldr	r0, [pc, #596]	@ (8005480 <statemachine+0xb20>)
 800522a:	f7fe ffff 	bl	800422c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 800522e:	212a      	movs	r1, #42	@ 0x2a
 8005230:	2020      	movs	r0, #32
 8005232:	f7ff f821 	bl	8004278 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 8005236:	4a94      	ldr	r2, [pc, #592]	@ (8005488 <statemachine+0xb28>)
 8005238:	2301      	movs	r3, #1
 800523a:	ca06      	ldmia	r2, {r1, r2}
 800523c:	4893      	ldr	r0, [pc, #588]	@ (800548c <statemachine+0xb2c>)
 800523e:	f7fe fff5 	bl	800422c <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005242:	4b93      	ldr	r3, [pc, #588]	@ (8005490 <statemachine+0xb30>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f340 80bc 	ble.w	80053c4 <statemachine+0xa64>
							  														  ecranstate++;
 800524c:	4b91      	ldr	r3, [pc, #580]	@ (8005494 <statemachine+0xb34>)
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	3301      	adds	r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	4b8f      	ldr	r3, [pc, #572]	@ (8005494 <statemachine+0xb34>)
 8005256:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005258:	4b8d      	ldr	r3, [pc, #564]	@ (8005490 <statemachine+0xb30>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800525e:	4b8e      	ldr	r3, [pc, #568]	@ (8005498 <statemachine+0xb38>)
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
							  break;
 8005264:	e0ae      	b.n	80053c4 <statemachine+0xa64>
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.altitude);
 8005266:	4b84      	ldr	r3, [pc, #528]	@ (8005478 <statemachine+0xb18>)
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	4618      	mov	r0, r3
 800526c:	f7fb f944 	bl	80004f8 <__aeabi_f2d>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	e9cd 2300 	strd	r2, r3, [sp]
 8005278:	4a80      	ldr	r2, [pc, #512]	@ (800547c <statemachine+0xb1c>)
 800527a:	2132      	movs	r1, #50	@ 0x32
 800527c:	4880      	ldr	r0, [pc, #512]	@ (8005480 <statemachine+0xb20>)
 800527e:	f016 f851 	bl	801b324 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8005282:	4a80      	ldr	r2, [pc, #512]	@ (8005484 <statemachine+0xb24>)
 8005284:	2301      	movs	r3, #1
 8005286:	ca06      	ldmia	r2, {r1, r2}
 8005288:	487d      	ldr	r0, [pc, #500]	@ (8005480 <statemachine+0xb20>)
 800528a:	f7fe ffcf 	bl	800422c <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 800528e:	212a      	movs	r1, #42	@ 0x2a
 8005290:	2020      	movs	r0, #32
 8005292:	f7fe fff1 	bl	8004278 <ssd1306_SetCursor>
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 8005296:	4a7c      	ldr	r2, [pc, #496]	@ (8005488 <statemachine+0xb28>)
 8005298:	2301      	movs	r3, #1
 800529a:	ca06      	ldmia	r2, {r1, r2}
 800529c:	487f      	ldr	r0, [pc, #508]	@ (800549c <statemachine+0xb3c>)
 800529e:	f7fe ffc5 	bl	800422c <ssd1306_WriteString>
							  if(BTN_B>=1){
 80052a2:	4b7b      	ldr	r3, [pc, #492]	@ (8005490 <statemachine+0xb30>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f340 808e 	ble.w	80053c8 <statemachine+0xa68>
							  														  ecranstate++;
 80052ac:	4b79      	ldr	r3, [pc, #484]	@ (8005494 <statemachine+0xb34>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	4b77      	ldr	r3, [pc, #476]	@ (8005494 <statemachine+0xb34>)
 80052b6:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80052b8:	4b75      	ldr	r3, [pc, #468]	@ (8005490 <statemachine+0xb30>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80052be:	4b76      	ldr	r3, [pc, #472]	@ (8005498 <statemachine+0xb38>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
							  break;
 80052c4:	e080      	b.n	80053c8 <statemachine+0xa68>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 80052c6:	4b76      	ldr	r3, [pc, #472]	@ (80054a0 <statemachine+0xb40>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7fb f914 	bl	80004f8 <__aeabi_f2d>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	e9cd 2300 	strd	r2, r3, [sp]
 80052d8:	4a68      	ldr	r2, [pc, #416]	@ (800547c <statemachine+0xb1c>)
 80052da:	2132      	movs	r1, #50	@ 0x32
 80052dc:	4868      	ldr	r0, [pc, #416]	@ (8005480 <statemachine+0xb20>)
 80052de:	f016 f821 	bl	801b324 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80052e2:	4a68      	ldr	r2, [pc, #416]	@ (8005484 <statemachine+0xb24>)
 80052e4:	2301      	movs	r3, #1
 80052e6:	ca06      	ldmia	r2, {r1, r2}
 80052e8:	4865      	ldr	r0, [pc, #404]	@ (8005480 <statemachine+0xb20>)
 80052ea:	f7fe ff9f 	bl	800422c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 80052ee:	212a      	movs	r1, #42	@ 0x2a
 80052f0:	2020      	movs	r0, #32
 80052f2:	f7fe ffc1 	bl	8004278 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 80052f6:	4a64      	ldr	r2, [pc, #400]	@ (8005488 <statemachine+0xb28>)
 80052f8:	2301      	movs	r3, #1
 80052fa:	ca06      	ldmia	r2, {r1, r2}
 80052fc:	4869      	ldr	r0, [pc, #420]	@ (80054a4 <statemachine+0xb44>)
 80052fe:	f7fe ff95 	bl	800422c <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005302:	4b63      	ldr	r3, [pc, #396]	@ (8005490 <statemachine+0xb30>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	dd60      	ble.n	80053cc <statemachine+0xa6c>
							  														  ecranstate++;
 800530a:	4b62      	ldr	r3, [pc, #392]	@ (8005494 <statemachine+0xb34>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	3301      	adds	r3, #1
 8005310:	b2da      	uxtb	r2, r3
 8005312:	4b60      	ldr	r3, [pc, #384]	@ (8005494 <statemachine+0xb34>)
 8005314:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005316:	4b5e      	ldr	r3, [pc, #376]	@ (8005490 <statemachine+0xb30>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800531c:	4b5e      	ldr	r3, [pc, #376]	@ (8005498 <statemachine+0xb38>)
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
							  break;
 8005322:	e053      	b.n	80053cc <statemachine+0xa6c>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 8005324:	4b60      	ldr	r3, [pc, #384]	@ (80054a8 <statemachine+0xb48>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f7fb f8e5 	bl	80004f8 <__aeabi_f2d>
 800532e:	a350      	add	r3, pc, #320	@ (adr r3, 8005470 <statemachine+0xb10>)
 8005330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005334:	f7fb f938 	bl	80005a8 <__aeabi_dmul>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	e9cd 2300 	strd	r2, r3, [sp]
 8005340:	4a4e      	ldr	r2, [pc, #312]	@ (800547c <statemachine+0xb1c>)
 8005342:	2132      	movs	r1, #50	@ 0x32
 8005344:	484e      	ldr	r0, [pc, #312]	@ (8005480 <statemachine+0xb20>)
 8005346:	f015 ffed 	bl	801b324 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800534a:	4a4e      	ldr	r2, [pc, #312]	@ (8005484 <statemachine+0xb24>)
 800534c:	2301      	movs	r3, #1
 800534e:	ca06      	ldmia	r2, {r1, r2}
 8005350:	484b      	ldr	r0, [pc, #300]	@ (8005480 <statemachine+0xb20>)
 8005352:	f7fe ff6b 	bl	800422c <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 8005356:	212a      	movs	r1, #42	@ 0x2a
 8005358:	2020      	movs	r0, #32
 800535a:	f7fe ff8d 	bl	8004278 <ssd1306_SetCursor>
							  							ssd1306_WriteString("MaxV",Font_6x8,White);
 800535e:	4a4a      	ldr	r2, [pc, #296]	@ (8005488 <statemachine+0xb28>)
 8005360:	2301      	movs	r3, #1
 8005362:	ca06      	ldmia	r2, {r1, r2}
 8005364:	4851      	ldr	r0, [pc, #324]	@ (80054ac <statemachine+0xb4c>)
 8005366:	f7fe ff61 	bl	800422c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800536a:	4b49      	ldr	r3, [pc, #292]	@ (8005490 <statemachine+0xb30>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	dd2e      	ble.n	80053d0 <statemachine+0xa70>
							  														ecranstate--;
 8005372:	4b48      	ldr	r3, [pc, #288]	@ (8005494 <statemachine+0xb34>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	3b01      	subs	r3, #1
 8005378:	b2da      	uxtb	r2, r3
 800537a:	4b46      	ldr	r3, [pc, #280]	@ (8005494 <statemachine+0xb34>)
 800537c:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800537e:	4b45      	ldr	r3, [pc, #276]	@ (8005494 <statemachine+0xb34>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	3b01      	subs	r3, #1
 8005384:	b2da      	uxtb	r2, r3
 8005386:	4b43      	ldr	r3, [pc, #268]	@ (8005494 <statemachine+0xb34>)
 8005388:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800538a:	4b42      	ldr	r3, [pc, #264]	@ (8005494 <statemachine+0xb34>)
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	3b01      	subs	r3, #1
 8005390:	b2da      	uxtb	r2, r3
 8005392:	4b40      	ldr	r3, [pc, #256]	@ (8005494 <statemachine+0xb34>)
 8005394:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005396:	4b3f      	ldr	r3, [pc, #252]	@ (8005494 <statemachine+0xb34>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	3b01      	subs	r3, #1
 800539c:	b2da      	uxtb	r2, r3
 800539e:	4b3d      	ldr	r3, [pc, #244]	@ (8005494 <statemachine+0xb34>)
 80053a0:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80053a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005494 <statemachine+0xb34>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005494 <statemachine+0xb34>)
 80053ac:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80053ae:	4b38      	ldr	r3, [pc, #224]	@ (8005490 <statemachine+0xb30>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80053b4:	4b38      	ldr	r3, [pc, #224]	@ (8005498 <statemachine+0xb38>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	601a      	str	r2, [r3, #0]
							  break;
 80053ba:	e009      	b.n	80053d0 <statemachine+0xa70>
							  break;
 80053bc:	bf00      	nop
 80053be:	e008      	b.n	80053d2 <statemachine+0xa72>
							  break;
 80053c0:	bf00      	nop
 80053c2:	e006      	b.n	80053d2 <statemachine+0xa72>
							  break;
 80053c4:	bf00      	nop
 80053c6:	e004      	b.n	80053d2 <statemachine+0xa72>
							  break;
 80053c8:	bf00      	nop
 80053ca:	e002      	b.n	80053d2 <statemachine+0xa72>
							  break;
 80053cc:	bf00      	nop
 80053ce:	e000      	b.n	80053d2 <statemachine+0xa72>
							  break;
 80053d0:	bf00      	nop
						 	batterygauge(vbat,79, 42,1);
 80053d2:	4b33      	ldr	r3, [pc, #204]	@ (80054a0 <statemachine+0xb40>)
 80053d4:	edd3 7a00 	vldr	s15, [r3]
 80053d8:	2201      	movs	r2, #1
 80053da:	212a      	movs	r1, #42	@ 0x2a
 80053dc:	204f      	movs	r0, #79	@ 0x4f
 80053de:	eeb0 0a67 	vmov.f32	s0, s15
 80053e2:	f7ff f8e1 	bl	80045a8 <batterygauge>
						 	ssd1306_SetCursor(32,52);
 80053e6:	2134      	movs	r1, #52	@ 0x34
 80053e8:	2020      	movs	r0, #32
 80053ea:	f7fe ff45 	bl	8004278 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 80053ee:	4b2c      	ldr	r3, [pc, #176]	@ (80054a0 <statemachine+0xb40>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fb f880 	bl	80004f8 <__aeabi_f2d>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	e9cd 2300 	strd	r2, r3, [sp]
 8005400:	4a2b      	ldr	r2, [pc, #172]	@ (80054b0 <statemachine+0xb50>)
 8005402:	2132      	movs	r1, #50	@ 0x32
 8005404:	481e      	ldr	r0, [pc, #120]	@ (8005480 <statemachine+0xb20>)
 8005406:	f015 ff8d 	bl	801b324 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800540a:	4a1f      	ldr	r2, [pc, #124]	@ (8005488 <statemachine+0xb28>)
 800540c:	2301      	movs	r3, #1
 800540e:	ca06      	ldmia	r2, {r1, r2}
 8005410:	481b      	ldr	r0, [pc, #108]	@ (8005480 <statemachine+0xb20>)
 8005412:	f7fe ff0b 	bl	800422c <ssd1306_WriteString>
						 	ssd1306_SetCursor(65,52);
 8005416:	2134      	movs	r1, #52	@ 0x34
 8005418:	2041      	movs	r0, #65	@ 0x41
 800541a:	f7fe ff2d 	bl	8004278 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 800541e:	4b16      	ldr	r3, [pc, #88]	@ (8005478 <statemachine+0xb18>)
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	4a24      	ldr	r2, [pc, #144]	@ (80054b4 <statemachine+0xb54>)
 8005424:	2132      	movs	r1, #50	@ 0x32
 8005426:	4816      	ldr	r0, [pc, #88]	@ (8005480 <statemachine+0xb20>)
 8005428:	f015 ff7c 	bl	801b324 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800542c:	4a16      	ldr	r2, [pc, #88]	@ (8005488 <statemachine+0xb28>)
 800542e:	2301      	movs	r3, #1
 8005430:	ca06      	ldmia	r2, {r1, r2}
 8005432:	4813      	ldr	r0, [pc, #76]	@ (8005480 <statemachine+0xb20>)
 8005434:	f7fe fefa 	bl	800422c <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8005438:	4b1f      	ldr	r3, [pc, #124]	@ (80054b8 <statemachine+0xb58>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	f340 8098 	ble.w	8005572 <statemachine+0xc12>
						  						  balisestate--;
 8005442:	4b1e      	ldr	r3, [pc, #120]	@ (80054bc <statemachine+0xb5c>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	3b01      	subs	r3, #1
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4b1c      	ldr	r3, [pc, #112]	@ (80054bc <statemachine+0xb5c>)
 800544c:	701a      	strb	r2, [r3, #0]
						  						  BTN_B_LONG=0;
 800544e:	4b1a      	ldr	r3, [pc, #104]	@ (80054b8 <statemachine+0xb58>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 8005454:	4b10      	ldr	r3, [pc, #64]	@ (8005498 <statemachine+0xb38>)
 8005456:	2200      	movs	r2, #0
 8005458:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 800545a:	4819      	ldr	r0, [pc, #100]	@ (80054c0 <statemachine+0xb60>)
 800545c:	f009 fd88 	bl	800ef70 <HAL_TIM_Base_Stop_IT>
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8005460:	2200      	movs	r2, #0
 8005462:	2102      	movs	r1, #2
 8005464:	4817      	ldr	r0, [pc, #92]	@ (80054c4 <statemachine+0xb64>)
 8005466:	f003 ff01 	bl	800926c <HAL_GPIO_WritePin>
						  break;
 800546a:	e082      	b.n	8005572 <statemachine+0xc12>
 800546c:	f3af 8000 	nop.w
 8005470:	cccccccd 	.word	0xcccccccd
 8005474:	400ccccc 	.word	0x400ccccc
 8005478:	20000838 	.word	0x20000838
 800547c:	0801fc70 	.word	0x0801fc70
 8005480:	20000ad8 	.word	0x20000ad8
 8005484:	2000001c 	.word	0x2000001c
 8005488:	20000014 	.word	0x20000014
 800548c:	0801fc78 	.word	0x0801fc78
 8005490:	2000087c 	.word	0x2000087c
 8005494:	20000cf8 	.word	0x20000cf8
 8005498:	20000878 	.word	0x20000878
 800549c:	0801fcec 	.word	0x0801fcec
 80054a0:	200008b0 	.word	0x200008b0
 80054a4:	0801fcf4 	.word	0x0801fcf4
 80054a8:	20000b4c 	.word	0x20000b4c
 80054ac:	0801fcfc 	.word	0x0801fcfc
 80054b0:	0801fd04 	.word	0x0801fd04
 80054b4:	0801fd0c 	.word	0x0801fd0c
 80054b8:	20000bac 	.word	0x20000bac
 80054bc:	200005ed 	.word	0x200005ed
 80054c0:	2000129c 	.word	0x2000129c
 80054c4:	48000400 	.word	0x48000400
						  ssd1306_SetCursor(32,32);
 80054c8:	2120      	movs	r1, #32
 80054ca:	2020      	movs	r0, #32
 80054cc:	f7fe fed4 	bl	8004278 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 80054d0:	4a97      	ldr	r2, [pc, #604]	@ (8005730 <statemachine+0xdd0>)
 80054d2:	2301      	movs	r3, #1
 80054d4:	ca06      	ldmia	r2, {r1, r2}
 80054d6:	4897      	ldr	r0, [pc, #604]	@ (8005734 <statemachine+0xdd4>)
 80054d8:	f7fe fea8 	bl	800422c <ssd1306_WriteString>
						  ssd1306_SetCursor(32,42);
 80054dc:	212a      	movs	r1, #42	@ 0x2a
 80054de:	2020      	movs	r0, #32
 80054e0:	f7fe feca 	bl	8004278 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 80054e4:	4a92      	ldr	r2, [pc, #584]	@ (8005730 <statemachine+0xdd0>)
 80054e6:	2301      	movs	r3, #1
 80054e8:	ca06      	ldmia	r2, {r1, r2}
 80054ea:	4893      	ldr	r0, [pc, #588]	@ (8005738 <statemachine+0xdd8>)
 80054ec:	f7fe fe9e 	bl	800422c <ssd1306_WriteString>
						  ssd1306_SetCursor(32,52);
 80054f0:	2134      	movs	r1, #52	@ 0x34
 80054f2:	2020      	movs	r0, #32
 80054f4:	f7fe fec0 	bl	8004278 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 80054f8:	4b90      	ldr	r3, [pc, #576]	@ (800573c <statemachine+0xddc>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b90      	ldr	r3, [pc, #576]	@ (8005740 <statemachine+0xde0>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	4613      	mov	r3, r2
 8005504:	4a8f      	ldr	r2, [pc, #572]	@ (8005744 <statemachine+0xde4>)
 8005506:	2132      	movs	r1, #50	@ 0x32
 8005508:	488f      	ldr	r0, [pc, #572]	@ (8005748 <statemachine+0xde8>)
 800550a:	f015 ff0b 	bl	801b324 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800550e:	4a88      	ldr	r2, [pc, #544]	@ (8005730 <statemachine+0xdd0>)
 8005510:	2301      	movs	r3, #1
 8005512:	ca06      	ldmia	r2, {r1, r2}
 8005514:	488c      	ldr	r0, [pc, #560]	@ (8005748 <statemachine+0xde8>)
 8005516:	f7fe fe89 	bl	800422c <ssd1306_WriteString>
						  if(BTN_A>=1){
 800551a:	4b8c      	ldr	r3, [pc, #560]	@ (800574c <statemachine+0xdec>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	dd0e      	ble.n	8005540 <statemachine+0xbe0>
						  				  			 	state++;
 8005522:	4b8b      	ldr	r3, [pc, #556]	@ (8005750 <statemachine+0xdf0>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	b2da      	uxtb	r2, r3
 800552a:	4b89      	ldr	r3, [pc, #548]	@ (8005750 <statemachine+0xdf0>)
 800552c:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 800552e:	4b87      	ldr	r3, [pc, #540]	@ (800574c <statemachine+0xdec>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8005534:	4b87      	ldr	r3, [pc, #540]	@ (8005754 <statemachine+0xdf4>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 800553a:	4b87      	ldr	r3, [pc, #540]	@ (8005758 <statemachine+0xdf8>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8005540:	4b86      	ldr	r3, [pc, #536]	@ (800575c <statemachine+0xdfc>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f340 87c8 	ble.w	80064da <statemachine+0x1b7a>
						  				 									 									  			 	state--;
 800554a:	4b81      	ldr	r3, [pc, #516]	@ (8005750 <statemachine+0xdf0>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	3b01      	subs	r3, #1
 8005550:	b2da      	uxtb	r2, r3
 8005552:	4b7f      	ldr	r3, [pc, #508]	@ (8005750 <statemachine+0xdf0>)
 8005554:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 8005556:	4b7d      	ldr	r3, [pc, #500]	@ (800574c <statemachine+0xdec>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 800555c:	4b7d      	ldr	r3, [pc, #500]	@ (8005754 <statemachine+0xdf4>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 8005562:	4b7e      	ldr	r3, [pc, #504]	@ (800575c <statemachine+0xdfc>)
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
					  break;
 8005568:	f000 bfb7 	b.w	80064da <statemachine+0x1b7a>
						  break;
 800556c:	bf00      	nop
 800556e:	f000 bfb4 	b.w	80064da <statemachine+0x1b7a>
						  break;
 8005572:	bf00      	nop
					  break;
 8005574:	f000 bfb1 	b.w	80064da <statemachine+0x1b7a>

	case STATE_POS:
			  ssd1306_Fill(Black);
 8005578:	2000      	movs	r0, #0
 800557a:	f7fe fd3b 	bl	8003ff4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 800557e:	4978      	ldr	r1, [pc, #480]	@ (8005760 <statemachine+0xe00>)
 8005580:	4878      	ldr	r0, [pc, #480]	@ (8005764 <statemachine+0xe04>)
 8005582:	f7fd ffcb 	bl	800351c <nmea_parse>
			  switch(posstate){
 8005586:	4b78      	ldr	r3, [pc, #480]	@ (8005768 <statemachine+0xe08>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b05      	cmp	r3, #5
 800558c:	f200 8326 	bhi.w	8005bdc <statemachine+0x127c>
 8005590:	a201      	add	r2, pc, #4	@ (adr r2, 8005598 <statemachine+0xc38>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	080055b1 	.word	0x080055b1
 800559c:	0800565b 	.word	0x0800565b
 80055a0:	08005795 	.word	0x08005795
 80055a4:	08005853 	.word	0x08005853
 80055a8:	08005911 	.word	0x08005911
 80055ac:	08005a65 	.word	0x08005a65

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 32);
 80055b0:	2120      	movs	r1, #32
 80055b2:	2020      	movs	r0, #32
 80055b4:	f7fe fe60 	bl	8004278 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80055b8:	4a6c      	ldr	r2, [pc, #432]	@ (800576c <statemachine+0xe0c>)
 80055ba:	210f      	movs	r1, #15
 80055bc:	4862      	ldr	r0, [pc, #392]	@ (8005748 <statemachine+0xde8>)
 80055be:	f015 feb1 	bl	801b324 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055c2:	4a5b      	ldr	r2, [pc, #364]	@ (8005730 <statemachine+0xdd0>)
 80055c4:	2301      	movs	r3, #1
 80055c6:	ca06      	ldmia	r2, {r1, r2}
 80055c8:	485f      	ldr	r0, [pc, #380]	@ (8005748 <statemachine+0xde8>)
 80055ca:	f7fe fe2f 	bl	800422c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80055ce:	4b65      	ldr	r3, [pc, #404]	@ (8005764 <statemachine+0xe04>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	e9cd 2300 	strd	r2, r3, [sp]
 80055d8:	4a65      	ldr	r2, [pc, #404]	@ (8005770 <statemachine+0xe10>)
 80055da:	210f      	movs	r1, #15
 80055dc:	485a      	ldr	r0, [pc, #360]	@ (8005748 <statemachine+0xde8>)
 80055de:	f015 fea1 	bl	801b324 <sniprintf>
						ssd1306_SetCursor(32, 40);
 80055e2:	2128      	movs	r1, #40	@ 0x28
 80055e4:	2020      	movs	r0, #32
 80055e6:	f7fe fe47 	bl	8004278 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055ea:	4a51      	ldr	r2, [pc, #324]	@ (8005730 <statemachine+0xdd0>)
 80055ec:	2301      	movs	r3, #1
 80055ee:	ca06      	ldmia	r2, {r1, r2}
 80055f0:	4855      	ldr	r0, [pc, #340]	@ (8005748 <statemachine+0xde8>)
 80055f2:	f7fe fe1b 	bl	800422c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 80055f6:	4a5f      	ldr	r2, [pc, #380]	@ (8005774 <statemachine+0xe14>)
 80055f8:	210f      	movs	r1, #15
 80055fa:	4853      	ldr	r0, [pc, #332]	@ (8005748 <statemachine+0xde8>)
 80055fc:	f015 fe92 	bl	801b324 <sniprintf>
						ssd1306_SetCursor(32, 48);
 8005600:	2130      	movs	r1, #48	@ 0x30
 8005602:	2020      	movs	r0, #32
 8005604:	f7fe fe38 	bl	8004278 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005608:	4a49      	ldr	r2, [pc, #292]	@ (8005730 <statemachine+0xdd0>)
 800560a:	2301      	movs	r3, #1
 800560c:	ca06      	ldmia	r2, {r1, r2}
 800560e:	484e      	ldr	r0, [pc, #312]	@ (8005748 <statemachine+0xde8>)
 8005610:	f7fe fe0c 	bl	800422c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005614:	4b53      	ldr	r3, [pc, #332]	@ (8005764 <statemachine+0xe04>)
 8005616:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800561a:	e9cd 2300 	strd	r2, r3, [sp]
 800561e:	4a54      	ldr	r2, [pc, #336]	@ (8005770 <statemachine+0xe10>)
 8005620:	210f      	movs	r1, #15
 8005622:	4849      	ldr	r0, [pc, #292]	@ (8005748 <statemachine+0xde8>)
 8005624:	f015 fe7e 	bl	801b324 <sniprintf>
						ssd1306_SetCursor(32, 56);
 8005628:	2138      	movs	r1, #56	@ 0x38
 800562a:	2020      	movs	r0, #32
 800562c:	f7fe fe24 	bl	8004278 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005630:	4a3f      	ldr	r2, [pc, #252]	@ (8005730 <statemachine+0xdd0>)
 8005632:	2301      	movs	r3, #1
 8005634:	ca06      	ldmia	r2, {r1, r2}
 8005636:	4844      	ldr	r0, [pc, #272]	@ (8005748 <statemachine+0xde8>)
 8005638:	f7fe fdf8 	bl	800422c <ssd1306_WriteString>
				  if(BTN_B>=1){
 800563c:	4b45      	ldr	r3, [pc, #276]	@ (8005754 <statemachine+0xdf4>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f340 82c0 	ble.w	8005bc6 <statemachine+0x1266>
					  posstate++;
 8005646:	4b48      	ldr	r3, [pc, #288]	@ (8005768 <statemachine+0xe08>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4b46      	ldr	r3, [pc, #280]	@ (8005768 <statemachine+0xe08>)
 8005650:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8005652:	4b40      	ldr	r3, [pc, #256]	@ (8005754 <statemachine+0xdf4>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
				  }



				  break;
 8005658:	e2b5      	b.n	8005bc6 <statemachine+0x1266>
			  case STATE_INFO:
				ssd1306_Fill(Black);
 800565a:	2000      	movs	r0, #0
 800565c:	f7fe fcca 	bl	8003ff4 <ssd1306_Fill>
				nmea_parse(&myData, DataBuffer);
 8005660:	493f      	ldr	r1, [pc, #252]	@ (8005760 <statemachine+0xe00>)
 8005662:	4840      	ldr	r0, [pc, #256]	@ (8005764 <statemachine+0xe04>)
 8005664:	f7fd ff5a 	bl	800351c <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 8005668:	4b3e      	ldr	r3, [pc, #248]	@ (8005764 <statemachine+0xe04>)
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	4618      	mov	r0, r3
 800566e:	f7fa ff43 	bl	80004f8 <__aeabi_f2d>
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	e9cd 2300 	strd	r2, r3, [sp]
 800567a:	4a3f      	ldr	r2, [pc, #252]	@ (8005778 <statemachine+0xe18>)
 800567c:	210f      	movs	r1, #15
 800567e:	4832      	ldr	r0, [pc, #200]	@ (8005748 <statemachine+0xde8>)
 8005680:	f015 fe50 	bl	801b324 <sniprintf>
				ssd1306_SetCursor(32, 32);
 8005684:	2120      	movs	r1, #32
 8005686:	2020      	movs	r0, #32
 8005688:	f7fe fdf6 	bl	8004278 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 800568c:	4a3b      	ldr	r2, [pc, #236]	@ (800577c <statemachine+0xe1c>)
 800568e:	2301      	movs	r3, #1
 8005690:	ca06      	ldmia	r2, {r1, r2}
 8005692:	482d      	ldr	r0, [pc, #180]	@ (8005748 <statemachine+0xde8>)
 8005694:	f7fe fdca 	bl	800422c <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 8005698:	4b39      	ldr	r3, [pc, #228]	@ (8005780 <statemachine+0xe20>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f7fa ff2b 	bl	80004f8 <__aeabi_f2d>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	e9cd 2300 	strd	r2, r3, [sp]
 80056aa:	4a36      	ldr	r2, [pc, #216]	@ (8005784 <statemachine+0xe24>)
 80056ac:	2114      	movs	r1, #20
 80056ae:	4826      	ldr	r0, [pc, #152]	@ (8005748 <statemachine+0xde8>)
 80056b0:	f015 fe38 	bl	801b324 <sniprintf>
				ssd1306_SetCursor(32, 42);
 80056b4:	212a      	movs	r1, #42	@ 0x2a
 80056b6:	2020      	movs	r0, #32
 80056b8:	f7fe fdde 	bl	8004278 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80056bc:	4a2f      	ldr	r2, [pc, #188]	@ (800577c <statemachine+0xe1c>)
 80056be:	2301      	movs	r3, #1
 80056c0:	ca06      	ldmia	r2, {r1, r2}
 80056c2:	4821      	ldr	r0, [pc, #132]	@ (8005748 <statemachine+0xde8>)
 80056c4:	f7fe fdb2 	bl	800422c <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 80056c8:	2134      	movs	r1, #52	@ 0x34
 80056ca:	2020      	movs	r0, #32
 80056cc:	f7fe fdd4 	bl	8004278 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 80056d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005788 <statemachine+0xe28>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fa ff0f 	bl	80004f8 <__aeabi_f2d>
 80056da:	4602      	mov	r2, r0
 80056dc:	460b      	mov	r3, r1
 80056de:	e9cd 2300 	strd	r2, r3, [sp]
 80056e2:	4a2a      	ldr	r2, [pc, #168]	@ (800578c <statemachine+0xe2c>)
 80056e4:	210f      	movs	r1, #15
 80056e6:	4818      	ldr	r0, [pc, #96]	@ (8005748 <statemachine+0xde8>)
 80056e8:	f015 fe1c 	bl	801b324 <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80056ec:	4a23      	ldr	r2, [pc, #140]	@ (800577c <statemachine+0xe1c>)
 80056ee:	2301      	movs	r3, #1
 80056f0:	ca06      	ldmia	r2, {r1, r2}
 80056f2:	4815      	ldr	r0, [pc, #84]	@ (8005748 <statemachine+0xde8>)
 80056f4:	f7fe fd9a 	bl	800422c <ssd1306_WriteString>
				 if(BTN_B>=1){
 80056f8:	4b16      	ldr	r3, [pc, #88]	@ (8005754 <statemachine+0xdf4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	dd08      	ble.n	8005712 <statemachine+0xdb2>
								  					  posstate++;
 8005700:	4b19      	ldr	r3, [pc, #100]	@ (8005768 <statemachine+0xe08>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	b2da      	uxtb	r2, r3
 8005708:	4b17      	ldr	r3, [pc, #92]	@ (8005768 <statemachine+0xe08>)
 800570a:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 800570c:	4b11      	ldr	r3, [pc, #68]	@ (8005754 <statemachine+0xdf4>)
 800570e:	2200      	movs	r2, #0
 8005710:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 8005712:	4b1f      	ldr	r3, [pc, #124]	@ (8005790 <statemachine+0xe30>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	f340 8257 	ble.w	8005bca <statemachine+0x126a>
													  posstate--;
 800571c:	4b12      	ldr	r3, [pc, #72]	@ (8005768 <statemachine+0xe08>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	3b01      	subs	r3, #1
 8005722:	b2da      	uxtb	r2, r3
 8005724:	4b10      	ldr	r3, [pc, #64]	@ (8005768 <statemachine+0xe08>)
 8005726:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 8005728:	4b19      	ldr	r3, [pc, #100]	@ (8005790 <statemachine+0xe30>)
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
												}

				  break;
 800572e:	e24c      	b.n	8005bca <statemachine+0x126a>
 8005730:	20000014 	.word	0x20000014
 8005734:	0801fd14 	.word	0x0801fd14
 8005738:	0801fd1c 	.word	0x0801fd1c
 800573c:	20000ab4 	.word	0x20000ab4
 8005740:	20000ab8 	.word	0x20000ab8
 8005744:	0801fd24 	.word	0x0801fd24
 8005748:	20000ad8 	.word	0x20000ad8
 800574c:	20000878 	.word	0x20000878
 8005750:	200005e8 	.word	0x200005e8
 8005754:	2000087c 	.word	0x2000087c
 8005758:	20000b98 	.word	0x20000b98
 800575c:	20000bb0 	.word	0x20000bb0
 8005760:	20000634 	.word	0x20000634
 8005764:	20000838 	.word	0x20000838
 8005768:	200005ea 	.word	0x200005ea
 800576c:	0801fd2c 	.word	0x0801fd2c
 8005770:	0801fd38 	.word	0x0801fd38
 8005774:	0801fd40 	.word	0x0801fd40
 8005778:	0801fd4c 	.word	0x0801fd4c
 800577c:	2000001c 	.word	0x2000001c
 8005780:	200008b0 	.word	0x200008b0
 8005784:	0801fd58 	.word	0x0801fd58
 8005788:	200008a8 	.word	0x200008a8
 800578c:	0801fd64 	.word	0x0801fd64
 8005790:	20000bac 	.word	0x20000bac
			  case STATE_LAT:
						ssd1306_SetCursor(32, 32);
 8005794:	2120      	movs	r1, #32
 8005796:	2020      	movs	r0, #32
 8005798:	f7fe fd6e 	bl	8004278 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 800579c:	4aa0      	ldr	r2, [pc, #640]	@ (8005a20 <statemachine+0x10c0>)
 800579e:	210f      	movs	r1, #15
 80057a0:	48a0      	ldr	r0, [pc, #640]	@ (8005a24 <statemachine+0x10c4>)
 80057a2:	f015 fdbf 	bl	801b324 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80057a6:	4aa0      	ldr	r2, [pc, #640]	@ (8005a28 <statemachine+0x10c8>)
 80057a8:	2301      	movs	r3, #1
 80057aa:	ca06      	ldmia	r2, {r1, r2}
 80057ac:	489d      	ldr	r0, [pc, #628]	@ (8005a24 <statemachine+0x10c4>)
 80057ae:	f7fe fd3d 	bl	800422c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80057b2:	4b9e      	ldr	r3, [pc, #632]	@ (8005a2c <statemachine+0x10cc>)
 80057b4:	7a1b      	ldrb	r3, [r3, #8]
 80057b6:	4a9e      	ldr	r2, [pc, #632]	@ (8005a30 <statemachine+0x10d0>)
 80057b8:	210f      	movs	r1, #15
 80057ba:	489a      	ldr	r0, [pc, #616]	@ (8005a24 <statemachine+0x10c4>)
 80057bc:	f015 fdb2 	bl	801b324 <sniprintf>
						ssd1306_SetCursor(32, 40);
 80057c0:	2128      	movs	r1, #40	@ 0x28
 80057c2:	2020      	movs	r0, #32
 80057c4:	f7fe fd58 	bl	8004278 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80057c8:	4a97      	ldr	r2, [pc, #604]	@ (8005a28 <statemachine+0x10c8>)
 80057ca:	2301      	movs	r3, #1
 80057cc:	ca06      	ldmia	r2, {r1, r2}
 80057ce:	4895      	ldr	r0, [pc, #596]	@ (8005a24 <statemachine+0x10c4>)
 80057d0:	f7fe fd2c 	bl	800422c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80057d4:	4a97      	ldr	r2, [pc, #604]	@ (8005a34 <statemachine+0x10d4>)
 80057d6:	210f      	movs	r1, #15
 80057d8:	4892      	ldr	r0, [pc, #584]	@ (8005a24 <statemachine+0x10c4>)
 80057da:	f015 fda3 	bl	801b324 <sniprintf>
						ssd1306_SetCursor(32, 48);
 80057de:	2130      	movs	r1, #48	@ 0x30
 80057e0:	2020      	movs	r0, #32
 80057e2:	f7fe fd49 	bl	8004278 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80057e6:	4a90      	ldr	r2, [pc, #576]	@ (8005a28 <statemachine+0x10c8>)
 80057e8:	2301      	movs	r3, #1
 80057ea:	ca06      	ldmia	r2, {r1, r2}
 80057ec:	488d      	ldr	r0, [pc, #564]	@ (8005a24 <statemachine+0x10c4>)
 80057ee:	f7fe fd1d 	bl	800422c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 80057f2:	4b8e      	ldr	r3, [pc, #568]	@ (8005a2c <statemachine+0x10cc>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	e9cd 2300 	strd	r2, r3, [sp]
 80057fc:	4a8e      	ldr	r2, [pc, #568]	@ (8005a38 <statemachine+0x10d8>)
 80057fe:	210f      	movs	r1, #15
 8005800:	4888      	ldr	r0, [pc, #544]	@ (8005a24 <statemachine+0x10c4>)
 8005802:	f015 fd8f 	bl	801b324 <sniprintf>
						ssd1306_SetCursor(32, 56);
 8005806:	2138      	movs	r1, #56	@ 0x38
 8005808:	2020      	movs	r0, #32
 800580a:	f7fe fd35 	bl	8004278 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800580e:	4a86      	ldr	r2, [pc, #536]	@ (8005a28 <statemachine+0x10c8>)
 8005810:	2301      	movs	r3, #1
 8005812:	ca06      	ldmia	r2, {r1, r2}
 8005814:	4883      	ldr	r0, [pc, #524]	@ (8005a24 <statemachine+0x10c4>)
 8005816:	f7fe fd09 	bl	800422c <ssd1306_WriteString>


				  if(BTN_B>=1){
 800581a:	4b88      	ldr	r3, [pc, #544]	@ (8005a3c <statemachine+0x10dc>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	dd08      	ble.n	8005834 <statemachine+0xed4>
				  					  posstate++;
 8005822:	4b87      	ldr	r3, [pc, #540]	@ (8005a40 <statemachine+0x10e0>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	3301      	adds	r3, #1
 8005828:	b2da      	uxtb	r2, r3
 800582a:	4b85      	ldr	r3, [pc, #532]	@ (8005a40 <statemachine+0x10e0>)
 800582c:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 800582e:	4b83      	ldr	r3, [pc, #524]	@ (8005a3c <statemachine+0x10dc>)
 8005830:	2200      	movs	r2, #0
 8005832:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005834:	4b83      	ldr	r3, [pc, #524]	@ (8005a44 <statemachine+0x10e4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f340 81c8 	ble.w	8005bce <statemachine+0x126e>
									  posstate--;
 800583e:	4b80      	ldr	r3, [pc, #512]	@ (8005a40 <statemachine+0x10e0>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	3b01      	subs	r3, #1
 8005844:	b2da      	uxtb	r2, r3
 8005846:	4b7e      	ldr	r3, [pc, #504]	@ (8005a40 <statemachine+0x10e0>)
 8005848:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 800584a:	4b7e      	ldr	r3, [pc, #504]	@ (8005a44 <statemachine+0x10e4>)
 800584c:	2200      	movs	r2, #0
 800584e:	601a      	str	r2, [r3, #0]
								}



				  break;
 8005850:	e1bd      	b.n	8005bce <statemachine+0x126e>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 32);
 8005852:	2120      	movs	r1, #32
 8005854:	2020      	movs	r0, #32
 8005856:	f7fe fd0f 	bl	8004278 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 800585a:	4a7b      	ldr	r2, [pc, #492]	@ (8005a48 <statemachine+0x10e8>)
 800585c:	210f      	movs	r1, #15
 800585e:	4871      	ldr	r0, [pc, #452]	@ (8005a24 <statemachine+0x10c4>)
 8005860:	f015 fd60 	bl	801b324 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005864:	4a70      	ldr	r2, [pc, #448]	@ (8005a28 <statemachine+0x10c8>)
 8005866:	2301      	movs	r3, #1
 8005868:	ca06      	ldmia	r2, {r1, r2}
 800586a:	486e      	ldr	r0, [pc, #440]	@ (8005a24 <statemachine+0x10c4>)
 800586c:	f7fe fcde 	bl	800422c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005870:	4b6e      	ldr	r3, [pc, #440]	@ (8005a2c <statemachine+0x10cc>)
 8005872:	7e1b      	ldrb	r3, [r3, #24]
 8005874:	4a6e      	ldr	r2, [pc, #440]	@ (8005a30 <statemachine+0x10d0>)
 8005876:	210f      	movs	r1, #15
 8005878:	486a      	ldr	r0, [pc, #424]	@ (8005a24 <statemachine+0x10c4>)
 800587a:	f015 fd53 	bl	801b324 <sniprintf>
					ssd1306_SetCursor(32, 40);
 800587e:	2128      	movs	r1, #40	@ 0x28
 8005880:	2020      	movs	r0, #32
 8005882:	f7fe fcf9 	bl	8004278 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005886:	4a68      	ldr	r2, [pc, #416]	@ (8005a28 <statemachine+0x10c8>)
 8005888:	2301      	movs	r3, #1
 800588a:	ca06      	ldmia	r2, {r1, r2}
 800588c:	4865      	ldr	r0, [pc, #404]	@ (8005a24 <statemachine+0x10c4>)
 800588e:	f7fe fccd 	bl	800422c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 8005892:	4a6e      	ldr	r2, [pc, #440]	@ (8005a4c <statemachine+0x10ec>)
 8005894:	210f      	movs	r1, #15
 8005896:	4863      	ldr	r0, [pc, #396]	@ (8005a24 <statemachine+0x10c4>)
 8005898:	f015 fd44 	bl	801b324 <sniprintf>
					ssd1306_SetCursor(32, 48);
 800589c:	2130      	movs	r1, #48	@ 0x30
 800589e:	2020      	movs	r0, #32
 80058a0:	f7fe fcea 	bl	8004278 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80058a4:	4a60      	ldr	r2, [pc, #384]	@ (8005a28 <statemachine+0x10c8>)
 80058a6:	2301      	movs	r3, #1
 80058a8:	ca06      	ldmia	r2, {r1, r2}
 80058aa:	485e      	ldr	r0, [pc, #376]	@ (8005a24 <statemachine+0x10c4>)
 80058ac:	f7fe fcbe 	bl	800422c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80058b0:	4b5e      	ldr	r3, [pc, #376]	@ (8005a2c <statemachine+0x10cc>)
 80058b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80058b6:	e9cd 2300 	strd	r2, r3, [sp]
 80058ba:	4a5f      	ldr	r2, [pc, #380]	@ (8005a38 <statemachine+0x10d8>)
 80058bc:	210f      	movs	r1, #15
 80058be:	4859      	ldr	r0, [pc, #356]	@ (8005a24 <statemachine+0x10c4>)
 80058c0:	f015 fd30 	bl	801b324 <sniprintf>
					ssd1306_SetCursor(32, 56);
 80058c4:	2138      	movs	r1, #56	@ 0x38
 80058c6:	2020      	movs	r0, #32
 80058c8:	f7fe fcd6 	bl	8004278 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80058cc:	4a56      	ldr	r2, [pc, #344]	@ (8005a28 <statemachine+0x10c8>)
 80058ce:	2301      	movs	r3, #1
 80058d0:	ca06      	ldmia	r2, {r1, r2}
 80058d2:	4854      	ldr	r0, [pc, #336]	@ (8005a24 <statemachine+0x10c4>)
 80058d4:	f7fe fcaa 	bl	800422c <ssd1306_WriteString>

				  if(BTN_B>=1){
 80058d8:	4b58      	ldr	r3, [pc, #352]	@ (8005a3c <statemachine+0x10dc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	dd08      	ble.n	80058f2 <statemachine+0xf92>
				  					  posstate++;
 80058e0:	4b57      	ldr	r3, [pc, #348]	@ (8005a40 <statemachine+0x10e0>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	3301      	adds	r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	4b55      	ldr	r3, [pc, #340]	@ (8005a40 <statemachine+0x10e0>)
 80058ea:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80058ec:	4b53      	ldr	r3, [pc, #332]	@ (8005a3c <statemachine+0x10dc>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80058f2:	4b54      	ldr	r3, [pc, #336]	@ (8005a44 <statemachine+0x10e4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f340 816b 	ble.w	8005bd2 <statemachine+0x1272>
									  posstate--;
 80058fc:	4b50      	ldr	r3, [pc, #320]	@ (8005a40 <statemachine+0x10e0>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	3b01      	subs	r3, #1
 8005902:	b2da      	uxtb	r2, r3
 8005904:	4b4e      	ldr	r3, [pc, #312]	@ (8005a40 <statemachine+0x10e0>)
 8005906:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 8005908:	4b4e      	ldr	r3, [pc, #312]	@ (8005a44 <statemachine+0x10e4>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
								}

				  break;
 800590e:	e160      	b.n	8005bd2 <statemachine+0x1272>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 32);
 8005910:	2120      	movs	r1, #32
 8005912:	2020      	movs	r0, #32
 8005914:	f7fe fcb0 	bl	8004278 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 8005918:	4a4d      	ldr	r2, [pc, #308]	@ (8005a50 <statemachine+0x10f0>)
 800591a:	210f      	movs	r1, #15
 800591c:	4841      	ldr	r0, [pc, #260]	@ (8005a24 <statemachine+0x10c4>)
 800591e:	f015 fd01 	bl	801b324 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005922:	4a41      	ldr	r2, [pc, #260]	@ (8005a28 <statemachine+0x10c8>)
 8005924:	2301      	movs	r3, #1
 8005926:	ca06      	ldmia	r2, {r1, r2}
 8005928:	483e      	ldr	r0, [pc, #248]	@ (8005a24 <statemachine+0x10c4>)
 800592a:	f7fe fc7f 	bl	800422c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 800592e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a2c <statemachine+0x10cc>)
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	4618      	mov	r0, r3
 8005934:	f7fa fde0 	bl	80004f8 <__aeabi_f2d>
 8005938:	4602      	mov	r2, r0
 800593a:	460b      	mov	r3, r1
 800593c:	e9cd 2300 	strd	r2, r3, [sp]
 8005940:	4a44      	ldr	r2, [pc, #272]	@ (8005a54 <statemachine+0x10f4>)
 8005942:	210f      	movs	r1, #15
 8005944:	4837      	ldr	r0, [pc, #220]	@ (8005a24 <statemachine+0x10c4>)
 8005946:	f015 fced 	bl	801b324 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800594a:	2128      	movs	r1, #40	@ 0x28
 800594c:	2020      	movs	r0, #32
 800594e:	f7fe fc93 	bl	8004278 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005952:	4a35      	ldr	r2, [pc, #212]	@ (8005a28 <statemachine+0x10c8>)
 8005954:	2301      	movs	r3, #1
 8005956:	ca06      	ldmia	r2, {r1, r2}
 8005958:	4832      	ldr	r0, [pc, #200]	@ (8005a24 <statemachine+0x10c4>)
 800595a:	f7fe fc67 	bl	800422c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 800595e:	4a3e      	ldr	r2, [pc, #248]	@ (8005a58 <statemachine+0x10f8>)
 8005960:	210f      	movs	r1, #15
 8005962:	4830      	ldr	r0, [pc, #192]	@ (8005a24 <statemachine+0x10c4>)
 8005964:	f015 fcde 	bl	801b324 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 8005968:	2130      	movs	r1, #48	@ 0x30
 800596a:	2020      	movs	r0, #32
 800596c:	f7fe fc84 	bl	8004278 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005970:	4a2d      	ldr	r2, [pc, #180]	@ (8005a28 <statemachine+0x10c8>)
 8005972:	2301      	movs	r3, #1
 8005974:	ca06      	ldmia	r2, {r1, r2}
 8005976:	482b      	ldr	r0, [pc, #172]	@ (8005a24 <statemachine+0x10c4>)
 8005978:	f7fe fc58 	bl	800422c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 800597c:	4b2b      	ldr	r3, [pc, #172]	@ (8005a2c <statemachine+0x10cc>)
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	4618      	mov	r0, r3
 8005982:	f7fa fdb9 	bl	80004f8 <__aeabi_f2d>
 8005986:	a324      	add	r3, pc, #144	@ (adr r3, 8005a18 <statemachine+0x10b8>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fa fe0c 	bl	80005a8 <__aeabi_dmul>
 8005990:	4602      	mov	r2, r0
 8005992:	460b      	mov	r3, r1
 8005994:	4610      	mov	r0, r2
 8005996:	4619      	mov	r1, r3
 8005998:	f7fb f8fe 	bl	8000b98 <__aeabi_d2f>
 800599c:	4603      	mov	r3, r0
 800599e:	ee00 3a10 	vmov	s0, r3
 80059a2:	f018 fb15 	bl	801dfd0 <expf>
 80059a6:	eef0 7a40 	vmov.f32	s15, s0
 80059aa:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005a5c <statemachine+0x10fc>
 80059ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059b2:	ee17 0a90 	vmov	r0, s15
 80059b6:	f7fa fd9f 	bl	80004f8 <__aeabi_f2d>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	e9cd 2300 	strd	r2, r3, [sp]
 80059c2:	4a27      	ldr	r2, [pc, #156]	@ (8005a60 <statemachine+0x1100>)
 80059c4:	210f      	movs	r1, #15
 80059c6:	4817      	ldr	r0, [pc, #92]	@ (8005a24 <statemachine+0x10c4>)
 80059c8:	f015 fcac 	bl	801b324 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 80059cc:	2138      	movs	r1, #56	@ 0x38
 80059ce:	2020      	movs	r0, #32
 80059d0:	f7fe fc52 	bl	8004278 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80059d4:	4a14      	ldr	r2, [pc, #80]	@ (8005a28 <statemachine+0x10c8>)
 80059d6:	2301      	movs	r3, #1
 80059d8:	ca06      	ldmia	r2, {r1, r2}
 80059da:	4812      	ldr	r0, [pc, #72]	@ (8005a24 <statemachine+0x10c4>)
 80059dc:	f7fe fc26 	bl	800422c <ssd1306_WriteString>

				  if(BTN_B>=1){
 80059e0:	4b16      	ldr	r3, [pc, #88]	@ (8005a3c <statemachine+0x10dc>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dd08      	ble.n	80059fa <statemachine+0x109a>
				  					posstate++;
 80059e8:	4b15      	ldr	r3, [pc, #84]	@ (8005a40 <statemachine+0x10e0>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	3301      	adds	r3, #1
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	4b13      	ldr	r3, [pc, #76]	@ (8005a40 <statemachine+0x10e0>)
 80059f2:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80059f4:	4b11      	ldr	r3, [pc, #68]	@ (8005a3c <statemachine+0x10dc>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80059fa:	4b12      	ldr	r3, [pc, #72]	@ (8005a44 <statemachine+0x10e4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f340 80e9 	ble.w	8005bd6 <statemachine+0x1276>
					  posstate--;
 8005a04:	4b0e      	ldr	r3, [pc, #56]	@ (8005a40 <statemachine+0x10e0>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <statemachine+0x10e0>)
 8005a0e:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8005a10:	4b0c      	ldr	r3, [pc, #48]	@ (8005a44 <statemachine+0x10e4>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
				}
				  break;
 8005a16:	e0de      	b.n	8005bd6 <statemachine+0x1276>
 8005a18:	fb798882 	.word	0xfb798882
 8005a1c:	bf1e1818 	.word	0xbf1e1818
 8005a20:	0801fd70 	.word	0x0801fd70
 8005a24:	20000ad8 	.word	0x20000ad8
 8005a28:	20000014 	.word	0x20000014
 8005a2c:	20000838 	.word	0x20000838
 8005a30:	0801fd7c 	.word	0x0801fd7c
 8005a34:	0801fd2c 	.word	0x0801fd2c
 8005a38:	0801fd38 	.word	0x0801fd38
 8005a3c:	2000087c 	.word	0x2000087c
 8005a40:	200005ea 	.word	0x200005ea
 8005a44:	20000bac 	.word	0x20000bac
 8005a48:	0801fd80 	.word	0x0801fd80
 8005a4c:	0801fd40 	.word	0x0801fd40
 8005a50:	0801fd8c 	.word	0x0801fd8c
 8005a54:	0801fd98 	.word	0x0801fd98
 8005a58:	0801fda0 	.word	0x0801fda0
 8005a5c:	447a0000 	.word	0x447a0000
 8005a60:	0801fdac 	.word	0x0801fdac
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 8005a64:	2000      	movs	r0, #0
 8005a66:	f7fe fac5 	bl	8003ff4 <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 8005a6a:	4999      	ldr	r1, [pc, #612]	@ (8005cd0 <statemachine+0x1370>)
 8005a6c:	4899      	ldr	r0, [pc, #612]	@ (8005cd4 <statemachine+0x1374>)
 8005a6e:	f7fd fd55 	bl	800351c <nmea_parse>
			  			  if(settimeen==0){
 8005a72:	4b99      	ldr	r3, [pc, #612]	@ (8005cd8 <statemachine+0x1378>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d141      	bne.n	8005afe <statemachine+0x119e>

			  							settimeen=1;
 8005a7a:	4b97      	ldr	r3, [pc, #604]	@ (8005cd8 <statemachine+0x1378>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005a80:	4b94      	ldr	r3, [pc, #592]	@ (8005cd4 <statemachine+0x1374>)
 8005a82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a86:	f003 030f 	and.w	r3, r3, #15
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	0092      	lsls	r2, r2, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	4b8f      	ldr	r3, [pc, #572]	@ (8005cd4 <statemachine+0x1374>)
 8005a98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8005a9c:	f003 030f 	and.w	r3, r3, #15
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	4413      	add	r3, r2
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	4b8d      	ldr	r3, [pc, #564]	@ (8005cdc <statemachine+0x137c>)
 8005aa8:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8005aaa:	4b8a      	ldr	r3, [pc, #552]	@ (8005cd4 <statemachine+0x1374>)
 8005aac:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	0092      	lsls	r2, r2, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	4b84      	ldr	r3, [pc, #528]	@ (8005cd4 <statemachine+0x1374>)
 8005ac2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ac6:	f003 030f 	and.w	r3, r3, #15
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	4413      	add	r3, r2
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	4b83      	ldr	r3, [pc, #524]	@ (8005ce0 <statemachine+0x1380>)
 8005ad2:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8005ad4:	4b7f      	ldr	r3, [pc, #508]	@ (8005cd4 <statemachine+0x1374>)
 8005ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	0092      	lsls	r2, r2, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	4b7a      	ldr	r3, [pc, #488]	@ (8005cd4 <statemachine+0x1374>)
 8005aec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005af0:	f003 030f 	and.w	r3, r3, #15
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	4413      	add	r3, r2
 8005af8:	b2da      	uxtb	r2, r3
 8005afa:	4b7a      	ldr	r3, [pc, #488]	@ (8005ce4 <statemachine+0x1384>)
 8005afc:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 32);
 8005afe:	2120      	movs	r1, #32
 8005b00:	2020      	movs	r0, #32
 8005b02:	f7fe fbb9 	bl	8004278 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 8005b06:	4a78      	ldr	r2, [pc, #480]	@ (8005ce8 <statemachine+0x1388>)
 8005b08:	2301      	movs	r3, #1
 8005b0a:	ca06      	ldmia	r2, {r1, r2}
 8005b0c:	4877      	ldr	r0, [pc, #476]	@ (8005cec <statemachine+0x138c>)
 8005b0e:	f7fe fb8d 	bl	800422c <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 42);
 8005b12:	212a      	movs	r1, #42	@ 0x2a
 8005b14:	2020      	movs	r0, #32
 8005b16:	f7fe fbaf 	bl	8004278 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8005b1a:	4b70      	ldr	r3, [pc, #448]	@ (8005cdc <statemachine+0x137c>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4b6f      	ldr	r3, [pc, #444]	@ (8005ce0 <statemachine+0x1380>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	4a71      	ldr	r2, [pc, #452]	@ (8005cf0 <statemachine+0x1390>)
 8005b2a:	210f      	movs	r1, #15
 8005b2c:	4871      	ldr	r0, [pc, #452]	@ (8005cf4 <statemachine+0x1394>)
 8005b2e:	f015 fbf9 	bl	801b324 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005b32:	4a71      	ldr	r2, [pc, #452]	@ (8005cf8 <statemachine+0x1398>)
 8005b34:	2301      	movs	r3, #1
 8005b36:	ca06      	ldmia	r2, {r1, r2}
 8005b38:	486e      	ldr	r0, [pc, #440]	@ (8005cf4 <statemachine+0x1394>)
 8005b3a:	f7fe fb77 	bl	800422c <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 52);
 8005b3e:	2134      	movs	r1, #52	@ 0x34
 8005b40:	2020      	movs	r0, #32
 8005b42:	f7fe fb99 	bl	8004278 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 8005b46:	4b67      	ldr	r3, [pc, #412]	@ (8005ce4 <statemachine+0x1384>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	4a6c      	ldr	r2, [pc, #432]	@ (8005cfc <statemachine+0x139c>)
 8005b4c:	210f      	movs	r1, #15
 8005b4e:	4869      	ldr	r0, [pc, #420]	@ (8005cf4 <statemachine+0x1394>)
 8005b50:	f015 fbe8 	bl	801b324 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005b54:	4a68      	ldr	r2, [pc, #416]	@ (8005cf8 <statemachine+0x1398>)
 8005b56:	2301      	movs	r3, #1
 8005b58:	ca06      	ldmia	r2, {r1, r2}
 8005b5a:	4866      	ldr	r0, [pc, #408]	@ (8005cf4 <statemachine+0x1394>)
 8005b5c:	f7fe fb66 	bl	800422c <ssd1306_WriteString>
			  				if(BTN_B>=1){
 8005b60:	4b67      	ldr	r3, [pc, #412]	@ (8005d00 <statemachine+0x13a0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dd20      	ble.n	8005baa <statemachine+0x124a>
			  					posstate--;
 8005b68:	4b66      	ldr	r3, [pc, #408]	@ (8005d04 <statemachine+0x13a4>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	4b64      	ldr	r3, [pc, #400]	@ (8005d04 <statemachine+0x13a4>)
 8005b72:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005b74:	4b63      	ldr	r3, [pc, #396]	@ (8005d04 <statemachine+0x13a4>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	4b61      	ldr	r3, [pc, #388]	@ (8005d04 <statemachine+0x13a4>)
 8005b7e:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005b80:	4b60      	ldr	r3, [pc, #384]	@ (8005d04 <statemachine+0x13a4>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	4b5e      	ldr	r3, [pc, #376]	@ (8005d04 <statemachine+0x13a4>)
 8005b8a:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005b8c:	4b5d      	ldr	r3, [pc, #372]	@ (8005d04 <statemachine+0x13a4>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b2da      	uxtb	r2, r3
 8005b94:	4b5b      	ldr	r3, [pc, #364]	@ (8005d04 <statemachine+0x13a4>)
 8005b96:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005b98:	4b5a      	ldr	r3, [pc, #360]	@ (8005d04 <statemachine+0x13a4>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b2da      	uxtb	r2, r3
 8005ba0:	4b58      	ldr	r3, [pc, #352]	@ (8005d04 <statemachine+0x13a4>)
 8005ba2:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 8005ba4:	4b56      	ldr	r3, [pc, #344]	@ (8005d00 <statemachine+0x13a0>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8005baa:	4b57      	ldr	r3, [pc, #348]	@ (8005d08 <statemachine+0x13a8>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	dd13      	ble.n	8005bda <statemachine+0x127a>
			  							  					posstate--;
 8005bb2:	4b54      	ldr	r3, [pc, #336]	@ (8005d04 <statemachine+0x13a4>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b2da      	uxtb	r2, r3
 8005bba:	4b52      	ldr	r3, [pc, #328]	@ (8005d04 <statemachine+0x13a4>)
 8005bbc:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 8005bbe:	4b52      	ldr	r3, [pc, #328]	@ (8005d08 <statemachine+0x13a8>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 8005bc4:	e009      	b.n	8005bda <statemachine+0x127a>
				  break;
 8005bc6:	bf00      	nop
 8005bc8:	e008      	b.n	8005bdc <statemachine+0x127c>
				  break;
 8005bca:	bf00      	nop
 8005bcc:	e006      	b.n	8005bdc <statemachine+0x127c>
				  break;
 8005bce:	bf00      	nop
 8005bd0:	e004      	b.n	8005bdc <statemachine+0x127c>
				  break;
 8005bd2:	bf00      	nop
 8005bd4:	e002      	b.n	8005bdc <statemachine+0x127c>
				  break;
 8005bd6:	bf00      	nop
 8005bd8:	e000      	b.n	8005bdc <statemachine+0x127c>
			  			break;
 8005bda:	bf00      	nop
			  }

					if(BTN_A>=1){
 8005bdc:	4b4b      	ldr	r3, [pc, #300]	@ (8005d0c <statemachine+0x13ac>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dd0b      	ble.n	8005bfc <statemachine+0x129c>
							state++;
 8005be4:	4b4a      	ldr	r3, [pc, #296]	@ (8005d10 <statemachine+0x13b0>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	4b48      	ldr	r3, [pc, #288]	@ (8005d10 <statemachine+0x13b0>)
 8005bee:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005bf0:	4b46      	ldr	r3, [pc, #280]	@ (8005d0c <statemachine+0x13ac>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005bf6:	4b42      	ldr	r3, [pc, #264]	@ (8005d00 <statemachine+0x13a0>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8005bfc:	4b45      	ldr	r3, [pc, #276]	@ (8005d14 <statemachine+0x13b4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f340 846c 	ble.w	80064de <statemachine+0x1b7e>
									 									 									  			 	state--;
 8005c06:	4b42      	ldr	r3, [pc, #264]	@ (8005d10 <statemachine+0x13b0>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	4b40      	ldr	r3, [pc, #256]	@ (8005d10 <statemachine+0x13b0>)
 8005c10:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8005c12:	4b3e      	ldr	r3, [pc, #248]	@ (8005d0c <statemachine+0x13ac>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8005c18:	4b39      	ldr	r3, [pc, #228]	@ (8005d00 <statemachine+0x13a0>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8005c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d14 <statemachine+0x13b4>)
 8005c20:	2200      	movs	r2, #0
 8005c22:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8005c24:	f000 bc5b 	b.w	80064de <statemachine+0x1b7e>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005c28:	2000      	movs	r0, #0
 8005c2a:	f7fe f9e3 	bl	8003ff4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8005c2e:	2120      	movs	r1, #32
 8005c30:	2020      	movs	r0, #32
 8005c32:	f7fe fb21 	bl	8004278 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8005c36:	4a2c      	ldr	r2, [pc, #176]	@ (8005ce8 <statemachine+0x1388>)
 8005c38:	2301      	movs	r3, #1
 8005c3a:	ca06      	ldmia	r2, {r1, r2}
 8005c3c:	4836      	ldr	r0, [pc, #216]	@ (8005d18 <statemachine+0x13b8>)
 8005c3e:	f7fe faf5 	bl	800422c <ssd1306_WriteString>
			  ssd1306_SetCursor(32,40);
 8005c42:	2128      	movs	r1, #40	@ 0x28
 8005c44:	2020      	movs	r0, #32
 8005c46:	f7fe fb17 	bl	8004278 <ssd1306_SetCursor>

			  switch(chronostate){
 8005c4a:	4b34      	ldr	r3, [pc, #208]	@ (8005d1c <statemachine+0x13bc>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d072      	beq.n	8005d38 <statemachine+0x13d8>
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	f300 80a1 	bgt.w	8005d9a <statemachine+0x143a>
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <statemachine+0x1302>
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d01e      	beq.n	8005c9e <statemachine+0x133e>
 8005c60:	e09b      	b.n	8005d9a <statemachine+0x143a>
			  case STATE_RESET:
				  min=0;
 8005c62:	4b2f      	ldr	r3, [pc, #188]	@ (8005d20 <statemachine+0x13c0>)
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005c6a:	4b2e      	ldr	r3, [pc, #184]	@ (8005d24 <statemachine+0x13c4>)
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8005c72:	4b2d      	ldr	r3, [pc, #180]	@ (8005d28 <statemachine+0x13c8>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005c78:	4b21      	ldr	r3, [pc, #132]	@ (8005d00 <statemachine+0x13a0>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f340 8087 	ble.w	8005d90 <statemachine+0x1430>
				  		chronostate++;
 8005c82:	4b26      	ldr	r3, [pc, #152]	@ (8005d1c <statemachine+0x13bc>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	b2da      	uxtb	r2, r3
 8005c8a:	4b24      	ldr	r3, [pc, #144]	@ (8005d1c <statemachine+0x13bc>)
 8005c8c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005d00 <statemachine+0x13a0>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8005c94:	4b25      	ldr	r3, [pc, #148]	@ (8005d2c <statemachine+0x13cc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a25      	ldr	r2, [pc, #148]	@ (8005d30 <statemachine+0x13d0>)
 8005c9a:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005c9c:	e078      	b.n	8005d90 <statemachine+0x1430>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005c9e:	4b23      	ldr	r3, [pc, #140]	@ (8005d2c <statemachine+0x13cc>)
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4b23      	ldr	r3, [pc, #140]	@ (8005d30 <statemachine+0x13d0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	1ad2      	subs	r2, r2, r3
 8005ca8:	4b22      	ldr	r3, [pc, #136]	@ (8005d34 <statemachine+0x13d4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4413      	add	r3, r2
 8005cae:	4a1e      	ldr	r2, [pc, #120]	@ (8005d28 <statemachine+0x13c8>)
 8005cb0:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005cb2:	4b13      	ldr	r3, [pc, #76]	@ (8005d00 <statemachine+0x13a0>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	dd6c      	ble.n	8005d94 <statemachine+0x1434>
				  		chronostate++;
 8005cba:	4b18      	ldr	r3, [pc, #96]	@ (8005d1c <statemachine+0x13bc>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	4b16      	ldr	r3, [pc, #88]	@ (8005d1c <statemachine+0x13bc>)
 8005cc4:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005d00 <statemachine+0x13a0>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8005ccc:	e062      	b.n	8005d94 <statemachine+0x1434>
 8005cce:	bf00      	nop
 8005cd0:	20000634 	.word	0x20000634
 8005cd4:	20000838 	.word	0x20000838
 8005cd8:	20000b98 	.word	0x20000b98
 8005cdc:	20000b95 	.word	0x20000b95
 8005ce0:	20000b96 	.word	0x20000b96
 8005ce4:	20000b94 	.word	0x20000b94
 8005ce8:	20000014 	.word	0x20000014
 8005cec:	0801fdb8 	.word	0x0801fdb8
 8005cf0:	0801fdc0 	.word	0x0801fdc0
 8005cf4:	20000ad8 	.word	0x20000ad8
 8005cf8:	2000001c 	.word	0x2000001c
 8005cfc:	0801fdcc 	.word	0x0801fdcc
 8005d00:	2000087c 	.word	0x2000087c
 8005d04:	200005ea 	.word	0x200005ea
 8005d08:	20000bac 	.word	0x20000bac
 8005d0c:	20000878 	.word	0x20000878
 8005d10:	200005e8 	.word	0x200005e8
 8005d14:	20000bb0 	.word	0x20000bb0
 8005d18:	0801fdd8 	.word	0x0801fdd8
 8005d1c:	200005eb 	.word	0x200005eb
 8005d20:	20000b54 	.word	0x20000b54
 8005d24:	20000b50 	.word	0x20000b50
 8005d28:	20000b5c 	.word	0x20000b5c
 8005d2c:	20001470 	.word	0x20001470
 8005d30:	20000b58 	.word	0x20000b58
 8005d34:	20000b60 	.word	0x20000b60
			  case STATE_PAUSE:
				  timehandler=calctime;
 8005d38:	4b88      	ldr	r3, [pc, #544]	@ (8005f5c <statemachine+0x15fc>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a88      	ldr	r2, [pc, #544]	@ (8005f60 <statemachine+0x1600>)
 8005d3e:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005d40:	4b88      	ldr	r3, [pc, #544]	@ (8005f64 <statemachine+0x1604>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dd0c      	ble.n	8005d62 <statemachine+0x1402>
				  			chronostate--;
 8005d48:	4b87      	ldr	r3, [pc, #540]	@ (8005f68 <statemachine+0x1608>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	4b85      	ldr	r3, [pc, #532]	@ (8005f68 <statemachine+0x1608>)
 8005d52:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8005d54:	4b83      	ldr	r3, [pc, #524]	@ (8005f64 <statemachine+0x1604>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8005d5a:	4b84      	ldr	r3, [pc, #528]	@ (8005f6c <statemachine+0x160c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a84      	ldr	r2, [pc, #528]	@ (8005f70 <statemachine+0x1610>)
 8005d60:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005d62:	4b84      	ldr	r3, [pc, #528]	@ (8005f74 <statemachine+0x1614>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	dd16      	ble.n	8005d98 <statemachine+0x1438>
				  				  	chronostate--;
 8005d6a:	4b7f      	ldr	r3, [pc, #508]	@ (8005f68 <statemachine+0x1608>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	4b7d      	ldr	r3, [pc, #500]	@ (8005f68 <statemachine+0x1608>)
 8005d74:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005d76:	4b7c      	ldr	r3, [pc, #496]	@ (8005f68 <statemachine+0x1608>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8005f68 <statemachine+0x1608>)
 8005d80:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005d82:	4b7c      	ldr	r3, [pc, #496]	@ (8005f74 <statemachine+0x1614>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005d88:	4b75      	ldr	r3, [pc, #468]	@ (8005f60 <statemachine+0x1600>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005d8e:	e003      	b.n	8005d98 <statemachine+0x1438>
				  break;
 8005d90:	bf00      	nop
 8005d92:	e002      	b.n	8005d9a <statemachine+0x143a>
				  break;
 8005d94:	bf00      	nop
 8005d96:	e000      	b.n	8005d9a <statemachine+0x143a>
				  break;
 8005d98:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005d9a:	4b70      	ldr	r3, [pc, #448]	@ (8005f5c <statemachine+0x15fc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005f78 <statemachine+0x1618>
 8005daa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005dae:	ee16 0a90 	vmov	r0, s13
 8005db2:	f7fa fba1 	bl	80004f8 <__aeabi_f2d>
 8005db6:	4602      	mov	r2, r0
 8005db8:	460b      	mov	r3, r1
 8005dba:	ec43 2b10 	vmov	d0, r2, r3
 8005dbe:	f018 f9cf 	bl	801e160 <floor>
 8005dc2:	ec53 2b10 	vmov	r2, r3, d0
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4619      	mov	r1, r3
 8005dca:	f7fa fee5 	bl	8000b98 <__aeabi_d2f>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	4a6a      	ldr	r2, [pc, #424]	@ (8005f7c <statemachine+0x161c>)
 8005dd2:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005dd4:	4b61      	ldr	r3, [pc, #388]	@ (8005f5c <statemachine+0x15fc>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	ee07 3a90 	vmov	s15, r3
 8005ddc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005de0:	4b66      	ldr	r3, [pc, #408]	@ (8005f7c <statemachine+0x161c>)
 8005de2:	edd3 7a00 	vldr	s15, [r3]
 8005de6:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8005f78 <statemachine+0x1618>
 8005dea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005dee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005df2:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005f80 <statemachine+0x1620>
 8005df6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dfa:	4b62      	ldr	r3, [pc, #392]	@ (8005f84 <statemachine+0x1624>)
 8005dfc:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005e00:	4b5e      	ldr	r3, [pc, #376]	@ (8005f7c <statemachine+0x161c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fa fb77 	bl	80004f8 <__aeabi_f2d>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	e9cd 2300 	strd	r2, r3, [sp]
 8005e12:	4a5d      	ldr	r2, [pc, #372]	@ (8005f88 <statemachine+0x1628>)
 8005e14:	210f      	movs	r1, #15
 8005e16:	485d      	ldr	r0, [pc, #372]	@ (8005f8c <statemachine+0x162c>)
 8005e18:	f015 fa84 	bl	801b324 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005e1c:	4a5c      	ldr	r2, [pc, #368]	@ (8005f90 <statemachine+0x1630>)
 8005e1e:	2301      	movs	r3, #1
 8005e20:	ca06      	ldmia	r2, {r1, r2}
 8005e22:	485a      	ldr	r0, [pc, #360]	@ (8005f8c <statemachine+0x162c>)
 8005e24:	f7fe fa02 	bl	800422c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8005e28:	2132      	movs	r1, #50	@ 0x32
 8005e2a:	2020      	movs	r0, #32
 8005e2c:	f7fe fa24 	bl	8004278 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8005e30:	4b54      	ldr	r3, [pc, #336]	@ (8005f84 <statemachine+0x1624>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fa fb5f 	bl	80004f8 <__aeabi_f2d>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	e9cd 2300 	strd	r2, r3, [sp]
 8005e42:	4a54      	ldr	r2, [pc, #336]	@ (8005f94 <statemachine+0x1634>)
 8005e44:	210f      	movs	r1, #15
 8005e46:	4851      	ldr	r0, [pc, #324]	@ (8005f8c <statemachine+0x162c>)
 8005e48:	f015 fa6c 	bl	801b324 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005e4c:	4a50      	ldr	r2, [pc, #320]	@ (8005f90 <statemachine+0x1630>)
 8005e4e:	2301      	movs	r3, #1
 8005e50:	ca06      	ldmia	r2, {r1, r2}
 8005e52:	484e      	ldr	r0, [pc, #312]	@ (8005f8c <statemachine+0x162c>)
 8005e54:	f7fe f9ea 	bl	800422c <ssd1306_WriteString>


			  if(BTN_A>=1){
 8005e58:	4b4f      	ldr	r3, [pc, #316]	@ (8005f98 <statemachine+0x1638>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dd0b      	ble.n	8005e78 <statemachine+0x1518>
			 	state++;
 8005e60:	4b4e      	ldr	r3, [pc, #312]	@ (8005f9c <statemachine+0x163c>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	4b4c      	ldr	r3, [pc, #304]	@ (8005f9c <statemachine+0x163c>)
 8005e6a:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005e6c:	4b4a      	ldr	r3, [pc, #296]	@ (8005f98 <statemachine+0x1638>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005e72:	4b3c      	ldr	r3, [pc, #240]	@ (8005f64 <statemachine+0x1604>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005e78:	4b49      	ldr	r3, [pc, #292]	@ (8005fa0 <statemachine+0x1640>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f340 8330 	ble.w	80064e2 <statemachine+0x1b82>
			  				 									 									  			 	state--;
 8005e82:	4b46      	ldr	r3, [pc, #280]	@ (8005f9c <statemachine+0x163c>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	4b44      	ldr	r3, [pc, #272]	@ (8005f9c <statemachine+0x163c>)
 8005e8c:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005e8e:	4b42      	ldr	r3, [pc, #264]	@ (8005f98 <statemachine+0x1638>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005e94:	4b33      	ldr	r3, [pc, #204]	@ (8005f64 <statemachine+0x1604>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005e9a:	4b41      	ldr	r3, [pc, #260]	@ (8005fa0 <statemachine+0x1640>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005ea0:	e31f      	b.n	80064e2 <statemachine+0x1b82>




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fe f8a6 	bl	8003ff4 <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 8005ea8:	2120      	movs	r1, #32
 8005eaa:	2020      	movs	r0, #32
 8005eac:	f7fe f9e4 	bl	8004278 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8005fa4 <statemachine+0x1644>)
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	ca06      	ldmia	r2, {r1, r2}
 8005eb6:	483c      	ldr	r0, [pc, #240]	@ (8005fa8 <statemachine+0x1648>)
 8005eb8:	f7fe f9b8 	bl	800422c <ssd1306_WriteString>
				  switch(usbstate){
 8005ebc:	4b3b      	ldr	r3, [pc, #236]	@ (8005fac <statemachine+0x164c>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	f000 815a 	beq.w	800617a <statemachine+0x181a>
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	f300 830d 	bgt.w	80064e6 <statemachine+0x1b86>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <statemachine+0x1576>
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d071      	beq.n	8005fb8 <statemachine+0x1658>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005ed4:	e307      	b.n	80064e6 <statemachine+0x1b86>
				 					  ssd1306_SetCursor(32,40);
 8005ed6:	2128      	movs	r1, #40	@ 0x28
 8005ed8:	2020      	movs	r0, #32
 8005eda:	f7fe f9cd 	bl	8004278 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005ede:	4a31      	ldr	r2, [pc, #196]	@ (8005fa4 <statemachine+0x1644>)
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	ca06      	ldmia	r2, {r1, r2}
 8005ee4:	4832      	ldr	r0, [pc, #200]	@ (8005fb0 <statemachine+0x1650>)
 8005ee6:	f7fe f9a1 	bl	800422c <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005eea:	4b32      	ldr	r3, [pc, #200]	@ (8005fb4 <statemachine+0x1654>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8005ef0:	4b1c      	ldr	r3, [pc, #112]	@ (8005f64 <statemachine+0x1604>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	dd0b      	ble.n	8005f10 <statemachine+0x15b0>
				 						  usbstate++;
 8005ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8005fac <statemachine+0x164c>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	b2da      	uxtb	r2, r3
 8005f00:	4b2a      	ldr	r3, [pc, #168]	@ (8005fac <statemachine+0x164c>)
 8005f02:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005f04:	4b17      	ldr	r3, [pc, #92]	@ (8005f64 <statemachine+0x1604>)
 8005f06:	2200      	movs	r2, #0
 8005f08:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005f0a:	4b23      	ldr	r3, [pc, #140]	@ (8005f98 <statemachine+0x1638>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005f10:	4b21      	ldr	r3, [pc, #132]	@ (8005f98 <statemachine+0x1638>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	dd0b      	ble.n	8005f30 <statemachine+0x15d0>
				 						 state++;
 8005f18:	4b20      	ldr	r3, [pc, #128]	@ (8005f9c <statemachine+0x163c>)
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	4b1e      	ldr	r3, [pc, #120]	@ (8005f9c <statemachine+0x163c>)
 8005f22:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005f24:	4b1c      	ldr	r3, [pc, #112]	@ (8005f98 <statemachine+0x1638>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f64 <statemachine+0x1604>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005f30:	4b1b      	ldr	r3, [pc, #108]	@ (8005fa0 <statemachine+0x1640>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f340 8234 	ble.w	80063a2 <statemachine+0x1a42>
				 									 									 									  			 	state--;
 8005f3a:	4b18      	ldr	r3, [pc, #96]	@ (8005f9c <statemachine+0x163c>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	4b16      	ldr	r3, [pc, #88]	@ (8005f9c <statemachine+0x163c>)
 8005f44:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005f46:	4b14      	ldr	r3, [pc, #80]	@ (8005f98 <statemachine+0x1638>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005f4c:	4b05      	ldr	r3, [pc, #20]	@ (8005f64 <statemachine+0x1604>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8005f52:	4b13      	ldr	r3, [pc, #76]	@ (8005fa0 <statemachine+0x1640>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
				 					  break;
 8005f58:	e223      	b.n	80063a2 <statemachine+0x1a42>
 8005f5a:	bf00      	nop
 8005f5c:	20000b5c 	.word	0x20000b5c
 8005f60:	20000b60 	.word	0x20000b60
 8005f64:	2000087c 	.word	0x2000087c
 8005f68:	200005eb 	.word	0x200005eb
 8005f6c:	20001470 	.word	0x20001470
 8005f70:	20000b58 	.word	0x20000b58
 8005f74:	20000bac 	.word	0x20000bac
 8005f78:	476a6000 	.word	0x476a6000
 8005f7c:	20000b54 	.word	0x20000b54
 8005f80:	447a0000 	.word	0x447a0000
 8005f84:	20000b50 	.word	0x20000b50
 8005f88:	0801fde0 	.word	0x0801fde0
 8005f8c:	20000ad8 	.word	0x20000ad8
 8005f90:	2000001c 	.word	0x2000001c
 8005f94:	0801fdec 	.word	0x0801fdec
 8005f98:	20000878 	.word	0x20000878
 8005f9c:	200005e8 	.word	0x200005e8
 8005fa0:	20000bb0 	.word	0x20000bb0
 8005fa4:	20000014 	.word	0x20000014
 8005fa8:	0801fdf4 	.word	0x0801fdf4
 8005fac:	200005ec 	.word	0x200005ec
 8005fb0:	0801fdf8 	.word	0x0801fdf8
 8005fb4:	20000b70 	.word	0x20000b70
				 					 ssd1306_SetCursor(32,40);
 8005fb8:	2128      	movs	r1, #40	@ 0x28
 8005fba:	2020      	movs	r0, #32
 8005fbc:	f7fe f95c 	bl	8004278 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005fc0:	4ab6      	ldr	r2, [pc, #728]	@ (800629c <statemachine+0x193c>)
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	ca06      	ldmia	r2, {r1, r2}
 8005fc6:	48b6      	ldr	r0, [pc, #728]	@ (80062a0 <statemachine+0x1940>)
 8005fc8:	f7fe f930 	bl	800422c <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8005fcc:	2130      	movs	r1, #48	@ 0x30
 8005fce:	2020      	movs	r0, #32
 8005fd0:	f7fe f952 	bl	8004278 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005fd4:	4ab1      	ldr	r2, [pc, #708]	@ (800629c <statemachine+0x193c>)
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	ca06      	ldmia	r2, {r1, r2}
 8005fda:	48b2      	ldr	r0, [pc, #712]	@ (80062a4 <statemachine+0x1944>)
 8005fdc:	f7fe f926 	bl	800422c <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005fe0:	4bb1      	ldr	r3, [pc, #708]	@ (80062a8 <statemachine+0x1948>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d137      	bne.n	8006058 <statemachine+0x16f8>
					 					 ssd1306_Fill(Black);
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f7fe f803 	bl	8003ff4 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8005fee:	2120      	movs	r1, #32
 8005ff0:	2020      	movs	r0, #32
 8005ff2:	f7fe f941 	bl	8004278 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005ff6:	4aa9      	ldr	r2, [pc, #676]	@ (800629c <statemachine+0x193c>)
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	ca06      	ldmia	r2, {r1, r2}
 8005ffc:	48ab      	ldr	r0, [pc, #684]	@ (80062ac <statemachine+0x194c>)
 8005ffe:	f7fe f915 	bl	800422c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,42);
 8006002:	212a      	movs	r1, #42	@ 0x2a
 8006004:	2020      	movs	r0, #32
 8006006:	f7fe f937 	bl	8004278 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 800600a:	4aa9      	ldr	r2, [pc, #676]	@ (80062b0 <statemachine+0x1950>)
 800600c:	2301      	movs	r3, #1
 800600e:	ca06      	ldmia	r2, {r1, r2}
 8006010:	48a8      	ldr	r0, [pc, #672]	@ (80062b4 <statemachine+0x1954>)
 8006012:	f7fe f90b 	bl	800422c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 8006016:	2138      	movs	r1, #56	@ 0x38
 8006018:	2020      	movs	r0, #32
 800601a:	f7fe f92d 	bl	8004278 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 800601e:	4ba6      	ldr	r3, [pc, #664]	@ (80062b8 <statemachine+0x1958>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800602a:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 80062bc <statemachine+0x195c>
 800602e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006032:	ee16 0a90 	vmov	r0, s13
 8006036:	f7fa fa5f 	bl	80004f8 <__aeabi_f2d>
 800603a:	4602      	mov	r2, r0
 800603c:	460b      	mov	r3, r1
 800603e:	e9cd 2300 	strd	r2, r3, [sp]
 8006042:	4a9f      	ldr	r2, [pc, #636]	@ (80062c0 <statemachine+0x1960>)
 8006044:	2132      	movs	r1, #50	@ 0x32
 8006046:	489f      	ldr	r0, [pc, #636]	@ (80062c4 <statemachine+0x1964>)
 8006048:	f015 f96c 	bl	801b324 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800604c:	4a93      	ldr	r2, [pc, #588]	@ (800629c <statemachine+0x193c>)
 800604e:	2301      	movs	r3, #1
 8006050:	ca06      	ldmia	r2, {r1, r2}
 8006052:	489c      	ldr	r0, [pc, #624]	@ (80062c4 <statemachine+0x1964>)
 8006054:	f7fe f8ea 	bl	800422c <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8006058:	4b9b      	ldr	r3, [pc, #620]	@ (80062c8 <statemachine+0x1968>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	dd7a      	ble.n	8006156 <statemachine+0x17f6>
				 						erasetime=HAL_GetTick();
 8006060:	f001 fa00 	bl	8007464 <HAL_GetTick>
 8006064:	4603      	mov	r3, r0
 8006066:	461a      	mov	r2, r3
 8006068:	4b93      	ldr	r3, [pc, #588]	@ (80062b8 <statemachine+0x1958>)
 800606a:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
 8006070:	e03f      	b.n	80060f2 <statemachine+0x1792>
				 							ssd1306_Fill(Black);
 8006072:	2000      	movs	r0, #0
 8006074:	f7fd ffbe 	bl	8003ff4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8006078:	2120      	movs	r1, #32
 800607a:	2020      	movs	r0, #32
 800607c:	f7fe f8fc 	bl	8004278 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8006080:	4a86      	ldr	r2, [pc, #536]	@ (800629c <statemachine+0x193c>)
 8006082:	2301      	movs	r3, #1
 8006084:	ca06      	ldmia	r2, {r1, r2}
 8006086:	4889      	ldr	r0, [pc, #548]	@ (80062ac <statemachine+0x194c>)
 8006088:	f7fe f8d0 	bl	800422c <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4619      	mov	r1, r3
 8006090:	488e      	ldr	r0, [pc, #568]	@ (80062cc <statemachine+0x196c>)
 8006092:	f011 fb6a 	bl	801776a <SPIF_EraseSector>
				 							if(i>=1){
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b00      	cmp	r3, #0
 800609a:	dd21      	ble.n	80060e0 <statemachine+0x1780>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2264      	movs	r2, #100	@ 0x64
 80060a0:	fb02 f303 	mul.w	r3, r2, r3
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80060ac:	4b88      	ldr	r3, [pc, #544]	@ (80062d0 <statemachine+0x1970>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	da00      	bge.n	80060b6 <statemachine+0x1756>
 80060b4:	330f      	adds	r3, #15
 80060b6:	111b      	asrs	r3, r3, #4
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fa fa0b 	bl	80004d4 <__aeabi_i2d>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	f7fa fd1f 	bl	8000b08 <__aeabi_d2iz>
 80060ca:	ee07 0a90 	vmov	s15, r0
 80060ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060d2:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80060d6:	eeb0 0a47 	vmov.f32	s0, s14
 80060da:	f7fe fbe1 	bl	80048a0 <percentage>
 80060de:	e003      	b.n	80060e8 <statemachine+0x1788>
				 								percentage((float) 0);
 80060e0:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 80062d4 <statemachine+0x1974>
 80060e4:	f7fe fbdc 	bl	80048a0 <percentage>
				 							ssd1306_UpdateScreen();
 80060e8:	f7fd ff9c 	bl	8004024 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3301      	adds	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]
 80060f2:	4b77      	ldr	r3, [pc, #476]	@ (80062d0 <statemachine+0x1970>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	da00      	bge.n	80060fc <statemachine+0x179c>
 80060fa:	330f      	adds	r3, #15
 80060fc:	111b      	asrs	r3, r3, #4
 80060fe:	4618      	mov	r0, r3
 8006100:	f7fa f9e8 	bl	80004d4 <__aeabi_i2d>
 8006104:	4602      	mov	r2, r0
 8006106:	460b      	mov	r3, r1
 8006108:	4610      	mov	r0, r2
 800610a:	4619      	mov	r1, r3
 800610c:	f7fa fcfc 	bl	8000b08 <__aeabi_d2iz>
 8006110:	4602      	mov	r2, r0
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4293      	cmp	r3, r2
 8006116:	ddac      	ble.n	8006072 <statemachine+0x1712>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8006118:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 800611c:	486b      	ldr	r0, [pc, #428]	@ (80062cc <statemachine+0x196c>)
 800611e:	f011 fb24 	bl	801776a <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8006122:	f001 f99f 	bl	8007464 <HAL_GetTick>
 8006126:	4603      	mov	r3, r0
 8006128:	4a63      	ldr	r2, [pc, #396]	@ (80062b8 <statemachine+0x1958>)
 800612a:	6812      	ldr	r2, [r2, #0]
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	461a      	mov	r2, r3
 8006130:	4b61      	ldr	r3, [pc, #388]	@ (80062b8 <statemachine+0x1958>)
 8006132:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8006134:	4b5c      	ldr	r3, [pc, #368]	@ (80062a8 <statemachine+0x1948>)
 8006136:	2201      	movs	r2, #1
 8006138:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 800613a:	4b67      	ldr	r3, [pc, #412]	@ (80062d8 <statemachine+0x1978>)
 800613c:	2200      	movs	r2, #0
 800613e:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8006140:	4b63      	ldr	r3, [pc, #396]	@ (80062d0 <statemachine+0x1970>)
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8006146:	f7fd fd79 	bl	8003c3c <storeindex>
				 						BTN_A=0;
 800614a:	4b5f      	ldr	r3, [pc, #380]	@ (80062c8 <statemachine+0x1968>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8006150:	4b62      	ldr	r3, [pc, #392]	@ (80062dc <statemachine+0x197c>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8006156:	4b61      	ldr	r3, [pc, #388]	@ (80062dc <statemachine+0x197c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f340 8123 	ble.w	80063a6 <statemachine+0x1a46>
					 						usbstate++;
 8006160:	4b5f      	ldr	r3, [pc, #380]	@ (80062e0 <statemachine+0x1980>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	3301      	adds	r3, #1
 8006166:	b2da      	uxtb	r2, r3
 8006168:	4b5d      	ldr	r3, [pc, #372]	@ (80062e0 <statemachine+0x1980>)
 800616a:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 800616c:	4b5b      	ldr	r3, [pc, #364]	@ (80062dc <statemachine+0x197c>)
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8006172:	4b55      	ldr	r3, [pc, #340]	@ (80062c8 <statemachine+0x1968>)
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
				 			  break;
 8006178:	e115      	b.n	80063a6 <statemachine+0x1a46>
				 					ssd1306_Fill(Black);
 800617a:	2000      	movs	r0, #0
 800617c:	f7fd ff3a 	bl	8003ff4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 8006180:	2128      	movs	r1, #40	@ 0x28
 8006182:	2020      	movs	r0, #32
 8006184:	f7fe f878 	bl	8004278 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8006188:	4a44      	ldr	r2, [pc, #272]	@ (800629c <statemachine+0x193c>)
 800618a:	2301      	movs	r3, #1
 800618c:	ca06      	ldmia	r2, {r1, r2}
 800618e:	4855      	ldr	r0, [pc, #340]	@ (80062e4 <statemachine+0x1984>)
 8006190:	f7fe f84c 	bl	800422c <ssd1306_WriteString>
				 					if(pagenumber>0){
 8006194:	4b4e      	ldr	r3, [pc, #312]	@ (80062d0 <statemachine+0x1970>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f340 80b1 	ble.w	8006300 <statemachine+0x19a0>
				 					int i=0;
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 80061a2:	4b51      	ldr	r3, [pc, #324]	@ (80062e8 <statemachine+0x1988>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d165      	bne.n	8006276 <statemachine+0x1916>
				 						while(i<pagenumber){
 80061aa:	e036      	b.n	800621a <statemachine+0x18ba>
				 							ssd1306_Fill(Black);
 80061ac:	2000      	movs	r0, #0
 80061ae:	f7fd ff21 	bl	8003ff4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 80061b2:	2120      	movs	r1, #32
 80061b4:	2020      	movs	r0, #32
 80061b6:	f7fe f85f 	bl	8004278 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 80061ba:	4a38      	ldr	r2, [pc, #224]	@ (800629c <statemachine+0x193c>)
 80061bc:	2301      	movs	r3, #1
 80061be:	ca06      	ldmia	r2, {r1, r2}
 80061c0:	4848      	ldr	r0, [pc, #288]	@ (80062e4 <statemachine+0x1984>)
 80061c2:	f7fe f833 	bl	800422c <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	2300      	movs	r3, #0
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061d0:	4a46      	ldr	r2, [pc, #280]	@ (80062ec <statemachine+0x198c>)
 80061d2:	483e      	ldr	r0, [pc, #248]	@ (80062cc <statemachine+0x196c>)
 80061d4:	f011 fb6a 	bl	80178ac <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 80061d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80061dc:	4843      	ldr	r0, [pc, #268]	@ (80062ec <statemachine+0x198c>)
 80061de:	f012 fae5 	bl	80187ac <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	2264      	movs	r2, #100	@ 0x64
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061f2:	4b37      	ldr	r3, [pc, #220]	@ (80062d0 <statemachine+0x1970>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006202:	eeb0 0a66 	vmov.f32	s0, s13
 8006206:	f7fe fb4b 	bl	80048a0 <percentage>
				 							ssd1306_UpdateScreen();
 800620a:	f7fd ff0b 	bl	8004024 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 800620e:	207d      	movs	r0, #125	@ 0x7d
 8006210:	f7fb fc6d 	bl	8001aee <HAL_Delay>
				 							i++;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	3301      	adds	r3, #1
 8006218:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 800621a:	4b2d      	ldr	r3, [pc, #180]	@ (80062d0 <statemachine+0x1970>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	429a      	cmp	r2, r3
 8006222:	dbc3      	blt.n	80061ac <statemachine+0x184c>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8006224:	4b2a      	ldr	r3, [pc, #168]	@ (80062d0 <statemachine+0x1970>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	4b2b      	ldr	r3, [pc, #172]	@ (80062d8 <statemachine+0x1978>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	461a      	mov	r2, r3
 8006230:	2300      	movs	r3, #0
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	4613      	mov	r3, r2
 8006236:	4a2d      	ldr	r2, [pc, #180]	@ (80062ec <statemachine+0x198c>)
 8006238:	4824      	ldr	r0, [pc, #144]	@ (80062cc <statemachine+0x196c>)
 800623a:	f011 fb37 	bl	80178ac <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 800623e:	4b26      	ldr	r3, [pc, #152]	@ (80062d8 <statemachine+0x1978>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	4619      	mov	r1, r3
 8006246:	4829      	ldr	r0, [pc, #164]	@ (80062ec <statemachine+0x198c>)
 8006248:	f012 fab0 	bl	80187ac <CDC_Transmit_FS>
				 						HAL_Delay(125);
 800624c:	207d      	movs	r0, #125	@ 0x7d
 800624e:	f7fb fc4e 	bl	8001aee <HAL_Delay>
				 						int taillefin=0;
 8006252:	2300      	movs	r3, #0
 8006254:	607b      	str	r3, [r7, #4]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8006256:	4a26      	ldr	r2, [pc, #152]	@ (80062f0 <statemachine+0x1990>)
 8006258:	2140      	movs	r1, #64	@ 0x40
 800625a:	4826      	ldr	r0, [pc, #152]	@ (80062f4 <statemachine+0x1994>)
 800625c:	f015 f862 	bl	801b324 <sniprintf>
 8006260:	6078      	str	r0, [r7, #4]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	b29b      	uxth	r3, r3
 8006266:	4619      	mov	r1, r3
 8006268:	4822      	ldr	r0, [pc, #136]	@ (80062f4 <statemachine+0x1994>)
 800626a:	f012 fa9f 	bl	80187ac <CDC_Transmit_FS>
				 						usbtransmiten=1;
 800626e:	4b1e      	ldr	r3, [pc, #120]	@ (80062e8 <statemachine+0x1988>)
 8006270:	2201      	movs	r2, #1
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	e003      	b.n	800627e <statemachine+0x191e>
				 						usbpercent=1;
 8006276:	4b20      	ldr	r3, [pc, #128]	@ (80062f8 <statemachine+0x1998>)
 8006278:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800627c:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 800627e:	2000      	movs	r0, #0
 8006280:	f7fd feb8 	bl	8003ff4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,48);
 8006284:	2130      	movs	r1, #48	@ 0x30
 8006286:	2020      	movs	r0, #32
 8006288:	f7fd fff6 	bl	8004278 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 800628c:	4a08      	ldr	r2, [pc, #32]	@ (80062b0 <statemachine+0x1950>)
 800628e:	2301      	movs	r3, #1
 8006290:	ca06      	ldmia	r2, {r1, r2}
 8006292:	481a      	ldr	r0, [pc, #104]	@ (80062fc <statemachine+0x199c>)
 8006294:	f7fd ffca 	bl	800422c <ssd1306_WriteString>
 8006298:	e049      	b.n	800632e <statemachine+0x19ce>
 800629a:	bf00      	nop
 800629c:	20000014 	.word	0x20000014
 80062a0:	0801fe04 	.word	0x0801fe04
 80062a4:	0801fe0c 	.word	0x0801fe0c
 80062a8:	20000b6c 	.word	0x20000b6c
 80062ac:	0801fdf4 	.word	0x0801fdf4
 80062b0:	2000001c 	.word	0x2000001c
 80062b4:	0801fe18 	.word	0x0801fe18
 80062b8:	20000b68 	.word	0x20000b68
 80062bc:	447a0000 	.word	0x447a0000
 80062c0:	0801fe1c 	.word	0x0801fe1c
 80062c4:	20000ad8 	.word	0x20000ad8
 80062c8:	20000878 	.word	0x20000878
 80062cc:	20000880 	.word	0x20000880
 80062d0:	20000ab8 	.word	0x20000ab8
 80062d4:	00000000 	.word	0x00000000
 80062d8:	20000ab4 	.word	0x20000ab4
 80062dc:	2000087c 	.word	0x2000087c
 80062e0:	200005ec 	.word	0x200005ec
 80062e4:	0801fe24 	.word	0x0801fe24
 80062e8:	20000b70 	.word	0x20000b70
 80062ec:	200009b4 	.word	0x200009b4
 80062f0:	0801fe2c 	.word	0x0801fe2c
 80062f4:	20000b0c 	.word	0x20000b0c
 80062f8:	20000b74 	.word	0x20000b74
 80062fc:	0801fe3c 	.word	0x0801fe3c
				 							ssd1306_Fill(Black);
 8006300:	2000      	movs	r0, #0
 8006302:	f7fd fe77 	bl	8003ff4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 8006306:	2128      	movs	r1, #40	@ 0x28
 8006308:	2020      	movs	r0, #32
 800630a:	f7fd ffb5 	bl	8004278 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_7x10,White);
 800630e:	4a7b      	ldr	r2, [pc, #492]	@ (80064fc <statemachine+0x1b9c>)
 8006310:	2301      	movs	r3, #1
 8006312:	ca06      	ldmia	r2, {r1, r2}
 8006314:	487a      	ldr	r0, [pc, #488]	@ (8006500 <statemachine+0x1ba0>)
 8006316:	f7fd ff89 	bl	800422c <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,50);
 800631a:	2132      	movs	r1, #50	@ 0x32
 800631c:	2020      	movs	r0, #32
 800631e:	f7fd ffab 	bl	8004278 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_7x10,White);
 8006322:	4a76      	ldr	r2, [pc, #472]	@ (80064fc <statemachine+0x1b9c>)
 8006324:	2301      	movs	r3, #1
 8006326:	ca06      	ldmia	r2, {r1, r2}
 8006328:	4876      	ldr	r0, [pc, #472]	@ (8006504 <statemachine+0x1ba4>)
 800632a:	f7fd ff7f 	bl	800422c <ssd1306_WriteString>
				 					if(BTN_B>=1){
 800632e:	4b76      	ldr	r3, [pc, #472]	@ (8006508 <statemachine+0x1ba8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	dd11      	ble.n	800635a <statemachine+0x19fa>
				 									 						usbstate--;
 8006336:	4b75      	ldr	r3, [pc, #468]	@ (800650c <statemachine+0x1bac>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	3b01      	subs	r3, #1
 800633c:	b2da      	uxtb	r2, r3
 800633e:	4b73      	ldr	r3, [pc, #460]	@ (800650c <statemachine+0x1bac>)
 8006340:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8006342:	4b72      	ldr	r3, [pc, #456]	@ (800650c <statemachine+0x1bac>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	3b01      	subs	r3, #1
 8006348:	b2da      	uxtb	r2, r3
 800634a:	4b70      	ldr	r3, [pc, #448]	@ (800650c <statemachine+0x1bac>)
 800634c:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 800634e:	4b6e      	ldr	r3, [pc, #440]	@ (8006508 <statemachine+0x1ba8>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8006354:	4b6e      	ldr	r3, [pc, #440]	@ (8006510 <statemachine+0x1bb0>)
 8006356:	2200      	movs	r2, #0
 8006358:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 800635a:	4b6d      	ldr	r3, [pc, #436]	@ (8006510 <statemachine+0x1bb0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	dd0b      	ble.n	800637a <statemachine+0x1a1a>
				 									  			 	state++;
 8006362:	4b6c      	ldr	r3, [pc, #432]	@ (8006514 <statemachine+0x1bb4>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	3301      	adds	r3, #1
 8006368:	b2da      	uxtb	r2, r3
 800636a:	4b6a      	ldr	r3, [pc, #424]	@ (8006514 <statemachine+0x1bb4>)
 800636c:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 800636e:	4b68      	ldr	r3, [pc, #416]	@ (8006510 <statemachine+0x1bb0>)
 8006370:	2200      	movs	r2, #0
 8006372:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8006374:	4b64      	ldr	r3, [pc, #400]	@ (8006508 <statemachine+0x1ba8>)
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 800637a:	4b67      	ldr	r3, [pc, #412]	@ (8006518 <statemachine+0x1bb8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	dd13      	ble.n	80063aa <statemachine+0x1a4a>
				 									 									  			 	state--;
 8006382:	4b64      	ldr	r3, [pc, #400]	@ (8006514 <statemachine+0x1bb4>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	3b01      	subs	r3, #1
 8006388:	b2da      	uxtb	r2, r3
 800638a:	4b62      	ldr	r3, [pc, #392]	@ (8006514 <statemachine+0x1bb4>)
 800638c:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 800638e:	4b60      	ldr	r3, [pc, #384]	@ (8006510 <statemachine+0x1bb0>)
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 8006394:	4b5c      	ldr	r3, [pc, #368]	@ (8006508 <statemachine+0x1ba8>)
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 800639a:	4b5f      	ldr	r3, [pc, #380]	@ (8006518 <statemachine+0x1bb8>)
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
				 					 break;
 80063a0:	e003      	b.n	80063aa <statemachine+0x1a4a>
				 					  break;
 80063a2:	bf00      	nop
 80063a4:	e09f      	b.n	80064e6 <statemachine+0x1b86>
				 			  break;
 80063a6:	bf00      	nop
 80063a8:	e09d      	b.n	80064e6 <statemachine+0x1b86>
				 					 break;
 80063aa:	bf00      	nop
				  break;
 80063ac:	e09b      	b.n	80064e6 <statemachine+0x1b86>

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 80063ae:	2000      	movs	r0, #0
 80063b0:	f7fd fe20 	bl	8003ff4 <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 80063b4:	2120      	movs	r1, #32
 80063b6:	2020      	movs	r0, #32
 80063b8:	f7fd ff5e 	bl	8004278 <ssd1306_SetCursor>
					  ssd1306_WriteString("bluetooth",Font_6x8,White);
 80063bc:	4a57      	ldr	r2, [pc, #348]	@ (800651c <statemachine+0x1bbc>)
 80063be:	2301      	movs	r3, #1
 80063c0:	ca06      	ldmia	r2, {r1, r2}
 80063c2:	4857      	ldr	r0, [pc, #348]	@ (8006520 <statemachine+0x1bc0>)
 80063c4:	f7fd ff32 	bl	800422c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,42);
 80063c8:	212a      	movs	r1, #42	@ 0x2a
 80063ca:	2020      	movs	r0, #32
 80063cc:	f7fd ff54 	bl	8004278 <ssd1306_SetCursor>


					  ssd1306_WriteString((char *) blereceivebuf, Font_7x10, White);
 80063d0:	4a4a      	ldr	r2, [pc, #296]	@ (80064fc <statemachine+0x1b9c>)
 80063d2:	2301      	movs	r3, #1
 80063d4:	ca06      	ldmia	r2, {r1, r2}
 80063d6:	4853      	ldr	r0, [pc, #332]	@ (8006524 <statemachine+0x1bc4>)
 80063d8:	f7fd ff28 	bl	800422c <ssd1306_WriteString>





						if(BTN_B_LONG>=1){
 80063dc:	4b52      	ldr	r3, [pc, #328]	@ (8006528 <statemachine+0x1bc8>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	dd11      	ble.n	8006408 <statemachine+0x1aa8>
												BTN_A=0;
 80063e4:	4b4a      	ldr	r3, [pc, #296]	@ (8006510 <statemachine+0x1bb0>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
												BTN_B=0;
 80063ea:	4b47      	ldr	r3, [pc, #284]	@ (8006508 <statemachine+0x1ba8>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]
												BTN_A_LONG=0;
 80063f0:	4b49      	ldr	r3, [pc, #292]	@ (8006518 <statemachine+0x1bb8>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
												BTN_B_LONG=0;
 80063f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006528 <statemachine+0x1bc8>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
												PADS_continuous_init(&hi2c1);
 80063fc:	484b      	ldr	r0, [pc, #300]	@ (800652c <statemachine+0x1bcc>)
 80063fe:	f7fa fdc9 	bl	8000f94 <PADS_continuous_init>
												flagpads=1;
 8006402:	4b4b      	ldr	r3, [pc, #300]	@ (8006530 <statemachine+0x1bd0>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]
												}

						if(flagpads==1){
 8006408:	4b49      	ldr	r3, [pc, #292]	@ (8006530 <statemachine+0x1bd0>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b01      	cmp	r3, #1
 800640e:	d113      	bne.n	8006438 <statemachine+0x1ad8>

							 ssd1306_SetCursor(32,52);
 8006410:	2134      	movs	r1, #52	@ 0x34
 8006412:	2020      	movs	r0, #32
 8006414:	f7fd ff30 	bl	8004278 <ssd1306_SetCursor>
												  PADS_continuous_read(&hi2c1);
 8006418:	4844      	ldr	r0, [pc, #272]	@ (800652c <statemachine+0x1bcc>)
 800641a:	f7fa fe25 	bl	8001068 <PADS_continuous_read>
												  snprintf((char  *)bufferscreen,50,"t=%d",inttemp);
 800641e:	4b45      	ldr	r3, [pc, #276]	@ (8006534 <statemachine+0x1bd4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a45      	ldr	r2, [pc, #276]	@ (8006538 <statemachine+0x1bd8>)
 8006424:	2132      	movs	r1, #50	@ 0x32
 8006426:	4845      	ldr	r0, [pc, #276]	@ (800653c <statemachine+0x1bdc>)
 8006428:	f014 ff7c 	bl	801b324 <sniprintf>
												  ssd1306_WriteString((char  *)bufferscreen, Font_6x8, White);
 800642c:	4a3b      	ldr	r2, [pc, #236]	@ (800651c <statemachine+0x1bbc>)
 800642e:	2301      	movs	r3, #1
 8006430:	ca06      	ldmia	r2, {r1, r2}
 8006432:	4842      	ldr	r0, [pc, #264]	@ (800653c <statemachine+0x1bdc>)
 8006434:	f7fd fefa 	bl	800422c <ssd1306_WriteString>
						}




					  if(BTN_B>=1){
 8006438:	4b33      	ldr	r3, [pc, #204]	@ (8006508 <statemachine+0x1ba8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	dd08      	ble.n	8006452 <statemachine+0x1af2>


						  bluetoothsend=1;
 8006440:	4b3f      	ldr	r3, [pc, #252]	@ (8006540 <statemachine+0x1be0>)
 8006442:	2201      	movs	r2, #1
 8006444:	601a      	str	r2, [r3, #0]
						  BTN_B=0;
 8006446:	4b30      	ldr	r3, [pc, #192]	@ (8006508 <statemachine+0x1ba8>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
						  BTN_B_LONG=0;
 800644c:	4b36      	ldr	r3, [pc, #216]	@ (8006528 <statemachine+0x1bc8>)
 800644e:	2200      	movs	r2, #0
 8006450:	601a      	str	r2, [r3, #0]
					  }


				  if(BTN_A>=1){
 8006452:	4b2f      	ldr	r3, [pc, #188]	@ (8006510 <statemachine+0x1bb0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	dd26      	ble.n	80064a8 <statemachine+0x1b48>
						state--;
 800645a:	4b2e      	ldr	r3, [pc, #184]	@ (8006514 <statemachine+0x1bb4>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	3b01      	subs	r3, #1
 8006460:	b2da      	uxtb	r2, r3
 8006462:	4b2c      	ldr	r3, [pc, #176]	@ (8006514 <statemachine+0x1bb4>)
 8006464:	701a      	strb	r2, [r3, #0]
						state--;
 8006466:	4b2b      	ldr	r3, [pc, #172]	@ (8006514 <statemachine+0x1bb4>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	3b01      	subs	r3, #1
 800646c:	b2da      	uxtb	r2, r3
 800646e:	4b29      	ldr	r3, [pc, #164]	@ (8006514 <statemachine+0x1bb4>)
 8006470:	701a      	strb	r2, [r3, #0]
						state--;
 8006472:	4b28      	ldr	r3, [pc, #160]	@ (8006514 <statemachine+0x1bb4>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	3b01      	subs	r3, #1
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4b26      	ldr	r3, [pc, #152]	@ (8006514 <statemachine+0x1bb4>)
 800647c:	701a      	strb	r2, [r3, #0]
						state--;
 800647e:	4b25      	ldr	r3, [pc, #148]	@ (8006514 <statemachine+0x1bb4>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	3b01      	subs	r3, #1
 8006484:	b2da      	uxtb	r2, r3
 8006486:	4b23      	ldr	r3, [pc, #140]	@ (8006514 <statemachine+0x1bb4>)
 8006488:	701a      	strb	r2, [r3, #0]
						state--;
 800648a:	4b22      	ldr	r3, [pc, #136]	@ (8006514 <statemachine+0x1bb4>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	3b01      	subs	r3, #1
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b20      	ldr	r3, [pc, #128]	@ (8006514 <statemachine+0x1bb4>)
 8006494:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 8006496:	4b1e      	ldr	r3, [pc, #120]	@ (8006510 <statemachine+0x1bb0>)
 8006498:	2200      	movs	r2, #0
 800649a:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 800649c:	4b1a      	ldr	r3, [pc, #104]	@ (8006508 <statemachine+0x1ba8>)
 800649e:	2200      	movs	r2, #0
 80064a0:	601a      	str	r2, [r3, #0]
						flagpads=0;
 80064a2:	4b23      	ldr	r3, [pc, #140]	@ (8006530 <statemachine+0x1bd0>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 80064a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006518 <statemachine+0x1bb8>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	dd1c      	ble.n	80064ea <statemachine+0x1b8a>
							state--;
 80064b0:	4b18      	ldr	r3, [pc, #96]	@ (8006514 <statemachine+0x1bb4>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	4b16      	ldr	r3, [pc, #88]	@ (8006514 <statemachine+0x1bb4>)
 80064ba:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 80064bc:	4b14      	ldr	r3, [pc, #80]	@ (8006510 <statemachine+0x1bb0>)
 80064be:	2200      	movs	r2, #0
 80064c0:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 80064c2:	4b11      	ldr	r3, [pc, #68]	@ (8006508 <statemachine+0x1ba8>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 80064c8:	4b13      	ldr	r3, [pc, #76]	@ (8006518 <statemachine+0x1bb8>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
							flagpads=0;
 80064ce:	4b18      	ldr	r3, [pc, #96]	@ (8006530 <statemachine+0x1bd0>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]
							}



					  break;
 80064d4:	e009      	b.n	80064ea <statemachine+0x1b8a>
				  									 	 break;
 80064d6:	bf00      	nop
 80064d8:	e008      	b.n	80064ec <statemachine+0x1b8c>
					  break;
 80064da:	bf00      	nop
 80064dc:	e006      	b.n	80064ec <statemachine+0x1b8c>
			  break;
 80064de:	bf00      	nop
 80064e0:	e004      	b.n	80064ec <statemachine+0x1b8c>
			  break;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <statemachine+0x1b8c>
				  break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <statemachine+0x1b8c>
					  break;
 80064ea:	bf00      	nop




	}
return ;
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
}
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	ecbd 8b02 	vpop	{d8}
 80064f8:	bdb0      	pop	{r4, r5, r7, pc}
 80064fa:	bf00      	nop
 80064fc:	2000001c 	.word	0x2000001c
 8006500:	0801fe24 	.word	0x0801fe24
 8006504:	0801fe44 	.word	0x0801fe44
 8006508:	2000087c 	.word	0x2000087c
 800650c:	200005ec 	.word	0x200005ec
 8006510:	20000878 	.word	0x20000878
 8006514:	200005e8 	.word	0x200005e8
 8006518:	20000bb0 	.word	0x20000bb0
 800651c:	20000014 	.word	0x20000014
 8006520:	0801fe4c 	.word	0x0801fe4c
 8006524:	20000bb8 	.word	0x20000bb8
 8006528:	20000bac 	.word	0x20000bac
 800652c:	20000504 	.word	0x20000504
 8006530:	200011fc 	.word	0x200011fc
 8006534:	20000398 	.word	0x20000398
 8006538:	0801fe58 	.word	0x0801fe58
 800653c:	20000ad8 	.word	0x20000ad8
 8006540:	20000bb4 	.word	0x20000bb4

08006544 <LL_AHB3_GRP1_EnableClock>:
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800654c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006550:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006552:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4313      	orrs	r3, r2
 800655a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800655c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006560:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006568:	68fb      	ldr	r3, [r7, #12]
}
 800656a:	bf00      	nop
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800657a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800657e:	f7ff ffe1 	bl	8006544 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8006582:	2200      	movs	r2, #0
 8006584:	2100      	movs	r1, #0
 8006586:	202e      	movs	r0, #46	@ 0x2e
 8006588:	f002 f94b 	bl	8008822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800658c:	202e      	movs	r0, #46	@ 0x2e
 800658e:	f002 f962 	bl	8008856 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006592:	bf00      	nop
 8006594:	bd80      	pop	{r7, pc}
	...

08006598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 800659c:	2114      	movs	r1, #20
 800659e:	2020      	movs	r0, #32
 80065a0:	f7fd fe6a 	bl	8004278 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 80065a4:	4a04      	ldr	r2, [pc, #16]	@ (80065b8 <NMI_Handler+0x20>)
 80065a6:	2301      	movs	r3, #1
 80065a8:	ca06      	ldmia	r2, {r1, r2}
 80065aa:	4804      	ldr	r0, [pc, #16]	@ (80065bc <NMI_Handler+0x24>)
 80065ac:	f7fd fe3e 	bl	800422c <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 80065b0:	f7fd fd38 	bl	8004024 <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 80065b4:	bf00      	nop
 80065b6:	e7f1      	b.n	800659c <NMI_Handler+0x4>
 80065b8:	2000001c 	.word	0x2000001c
 80065bc:	0801fe60 	.word	0x0801fe60

080065c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80065c4:	2114      	movs	r1, #20
 80065c6:	2020      	movs	r0, #32
 80065c8:	f7fd fe56 	bl	8004278 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 80065cc:	4a04      	ldr	r2, [pc, #16]	@ (80065e0 <HardFault_Handler+0x20>)
 80065ce:	2301      	movs	r3, #1
 80065d0:	ca06      	ldmia	r2, {r1, r2}
 80065d2:	4804      	ldr	r0, [pc, #16]	@ (80065e4 <HardFault_Handler+0x24>)
 80065d4:	f7fd fe2a 	bl	800422c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80065d8:	f7fd fd24 	bl	8004024 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80065dc:	bf00      	nop
 80065de:	e7f1      	b.n	80065c4 <HardFault_Handler+0x4>
 80065e0:	2000001c 	.word	0x2000001c
 80065e4:	0801fe64 	.word	0x0801fe64

080065e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80065ec:	2114      	movs	r1, #20
 80065ee:	2020      	movs	r0, #32
 80065f0:	f7fd fe42 	bl	8004278 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 80065f4:	4a04      	ldr	r2, [pc, #16]	@ (8006608 <MemManage_Handler+0x20>)
 80065f6:	2301      	movs	r3, #1
 80065f8:	ca06      	ldmia	r2, {r1, r2}
 80065fa:	4804      	ldr	r0, [pc, #16]	@ (800660c <MemManage_Handler+0x24>)
 80065fc:	f7fd fe16 	bl	800422c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006600:	f7fd fd10 	bl	8004024 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006604:	bf00      	nop
 8006606:	e7f1      	b.n	80065ec <MemManage_Handler+0x4>
 8006608:	2000001c 	.word	0x2000001c
 800660c:	0801fe70 	.word	0x0801fe70

08006610 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006614:	2114      	movs	r1, #20
 8006616:	2020      	movs	r0, #32
 8006618:	f7fd fe2e 	bl	8004278 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 800661c:	4a04      	ldr	r2, [pc, #16]	@ (8006630 <BusFault_Handler+0x20>)
 800661e:	2301      	movs	r3, #1
 8006620:	ca06      	ldmia	r2, {r1, r2}
 8006622:	4804      	ldr	r0, [pc, #16]	@ (8006634 <BusFault_Handler+0x24>)
 8006624:	f7fd fe02 	bl	800422c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006628:	f7fd fcfc 	bl	8004024 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 800662c:	bf00      	nop
 800662e:	e7f1      	b.n	8006614 <BusFault_Handler+0x4>
 8006630:	2000001c 	.word	0x2000001c
 8006634:	0801fe74 	.word	0x0801fe74

08006638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 800663c:	2114      	movs	r1, #20
 800663e:	2020      	movs	r0, #32
 8006640:	f7fd fe1a 	bl	8004278 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 8006644:	4a04      	ldr	r2, [pc, #16]	@ (8006658 <UsageFault_Handler+0x20>)
 8006646:	2301      	movs	r3, #1
 8006648:	ca06      	ldmia	r2, {r1, r2}
 800664a:	4804      	ldr	r0, [pc, #16]	@ (800665c <UsageFault_Handler+0x24>)
 800664c:	f7fd fdee 	bl	800422c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006650:	f7fd fce8 	bl	8004024 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006654:	bf00      	nop
 8006656:	e7f1      	b.n	800663c <UsageFault_Handler+0x4>
 8006658:	2000001c 	.word	0x2000001c
 800665c:	0801fe78 	.word	0x0801fe78

08006660 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800666e:	b480      	push	{r7}
 8006670:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006672:	bf00      	nop
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006680:	bf00      	nop
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800668e:	f000 fed5 	bl	800743c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006692:	bf00      	nop
 8006694:	bd80      	pop	{r7, pc}

08006696 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800669a:	f7fb fe79 	bl	8002390 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800669e:	bf00      	nop
 80066a0:	bd80      	pop	{r7, pc}
	...

080066a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80066a8:	4802      	ldr	r0, [pc, #8]	@ (80066b4 <DMA1_Channel1_IRQHandler+0x10>)
 80066aa:	f002 fafa 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80066ae:	bf00      	nop
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	20000404 	.word	0x20000404

080066b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80066bc:	4802      	ldr	r0, [pc, #8]	@ (80066c8 <DMA1_Channel2_IRQHandler+0x10>)
 80066be:	f002 faf0 	bl	8008ca2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80066c2:	bf00      	nop
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20001410 	.word	0x20001410

080066cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80066d0:	4802      	ldr	r0, [pc, #8]	@ (80066dc <USB_LP_IRQHandler+0x10>)
 80066d2:	f003 fde5 	bl	800a2a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80066d6:	bf00      	nop
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	20002a60 	.word	0x20002a60

080066e0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80066e4:	4806      	ldr	r0, [pc, #24]	@ (8006700 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80066e6:	f008 fc72 	bl	800efce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 80066ea:	f000 fa75 	bl	8006bd8 <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80066ee:	2101      	movs	r1, #1
 80066f0:	4804      	ldr	r0, [pc, #16]	@ (8006704 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80066f2:	f002 fdd3 	bl	800929c <HAL_GPIO_TogglePin>
  bluetoothsend=1;
 80066f6:	4b04      	ldr	r3, [pc, #16]	@ (8006708 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80066f8:	2201      	movs	r2, #1
 80066fa:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80066fc:	bf00      	nop
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20001250 	.word	0x20001250
 8006704:	48000400 	.word	0x48000400
 8006708:	20000bb4 	.word	0x20000bb4

0800670c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8006710:	4805      	ldr	r0, [pc, #20]	@ (8006728 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8006712:	f008 fc5c 	bl	800efce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8006716:	2102      	movs	r1, #2
 8006718:	4804      	ldr	r0, [pc, #16]	@ (800672c <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 800671a:	f002 fdbf 	bl	800929c <HAL_GPIO_TogglePin>
  enablewrite=1;
 800671e:	4b04      	ldr	r3, [pc, #16]	@ (8006730 <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8006724:	bf00      	nop
 8006726:	bd80      	pop	{r7, pc}
 8006728:	2000129c 	.word	0x2000129c
 800672c:	48000400 	.word	0x48000400
 8006730:	20000b90 	.word	0x20000b90

08006734 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8006738:	4802      	ldr	r0, [pc, #8]	@ (8006744 <SPI1_IRQHandler+0x10>)
 800673a:	f008 f85d 	bl	800e7f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800673e:	bf00      	nop
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000d90 	.word	0x20000d90

08006748 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800674c:	4802      	ldr	r0, [pc, #8]	@ (8006758 <LPUART1_IRQHandler+0x10>)
 800674e:	f009 f995 	bl	800fa7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006752:	bf00      	nop
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	200012e8 	.word	0x200012e8

0800675c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8006760:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006764:	f002 fdb4 	bl	80092d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8006768:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800676c:	f002 fdb0 	bl	80092d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006770:	bf00      	nop
 8006772:	bd80      	pop	{r7, pc}

08006774 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8006778:	f011 fe06 	bl	8018388 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800677c:	bf00      	nop
 800677e:	bd80      	pop	{r7, pc}

08006780 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8006784:	f011 fe36 	bl	80183f4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8006788:	bf00      	nop
 800678a:	bd80      	pop	{r7, pc}

0800678c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8006790:	f002 fdb6 	bl	8009300 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8006794:	bf00      	nop
 8006796:	bd80      	pop	{r7, pc}

08006798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006798:	b480      	push	{r7}
 800679a:	af00      	add	r7, sp, #0
  return 1;
 800679c:	2301      	movs	r3, #1
}
 800679e:	4618      	mov	r0, r3
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <_kill>:

int _kill(int pid, int sig)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80067b2:	f014 ff35 	bl	801b620 <__errno>
 80067b6:	4603      	mov	r3, r0
 80067b8:	2216      	movs	r2, #22
 80067ba:	601a      	str	r2, [r3, #0]
  return -1;
 80067bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3708      	adds	r7, #8
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <_exit>:

void _exit (int status)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80067d0:	f04f 31ff 	mov.w	r1, #4294967295
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f7ff ffe7 	bl	80067a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <_exit+0x12>

080067de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b086      	sub	sp, #24
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	60f8      	str	r0, [r7, #12]
 80067e6:	60b9      	str	r1, [r7, #8]
 80067e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	e00a      	b.n	8006806 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80067f0:	f3af 8000 	nop.w
 80067f4:	4601      	mov	r1, r0
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	1c5a      	adds	r2, r3, #1
 80067fa:	60ba      	str	r2, [r7, #8]
 80067fc:	b2ca      	uxtb	r2, r1
 80067fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	3301      	adds	r3, #1
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	429a      	cmp	r2, r3
 800680c:	dbf0      	blt.n	80067f0 <_read+0x12>
  }

  return len;
 800680e:	687b      	ldr	r3, [r7, #4]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3718      	adds	r7, #24
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e009      	b.n	800683e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	60ba      	str	r2, [r7, #8]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	3301      	adds	r3, #1
 800683c:	617b      	str	r3, [r7, #20]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	dbf1      	blt.n	800682a <_write+0x12>
  }
  return len;
 8006846:	687b      	ldr	r3, [r7, #4]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3718      	adds	r7, #24
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <_close>:

int _close(int file)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006878:	605a      	str	r2, [r3, #4]
  return 0;
 800687a:	2300      	movs	r3, #0
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <_isatty>:

int _isatty(int file)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006890:	2301      	movs	r3, #1
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800689e:	b480      	push	{r7}
 80068a0:	b085      	sub	sp, #20
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	60f8      	str	r0, [r7, #12]
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068c0:	4a14      	ldr	r2, [pc, #80]	@ (8006914 <_sbrk+0x5c>)
 80068c2:	4b15      	ldr	r3, [pc, #84]	@ (8006918 <_sbrk+0x60>)
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068cc:	4b13      	ldr	r3, [pc, #76]	@ (800691c <_sbrk+0x64>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d102      	bne.n	80068da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80068d4:	4b11      	ldr	r3, [pc, #68]	@ (800691c <_sbrk+0x64>)
 80068d6:	4a12      	ldr	r2, [pc, #72]	@ (8006920 <_sbrk+0x68>)
 80068d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068da:	4b10      	ldr	r3, [pc, #64]	@ (800691c <_sbrk+0x64>)
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4413      	add	r3, r2
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d207      	bcs.n	80068f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068e8:	f014 fe9a 	bl	801b620 <__errno>
 80068ec:	4603      	mov	r3, r0
 80068ee:	220c      	movs	r2, #12
 80068f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80068f2:	f04f 33ff 	mov.w	r3, #4294967295
 80068f6:	e009      	b.n	800690c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068f8:	4b08      	ldr	r3, [pc, #32]	@ (800691c <_sbrk+0x64>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068fe:	4b07      	ldr	r3, [pc, #28]	@ (800691c <_sbrk+0x64>)
 8006900:	681a      	ldr	r2, [r3, #0]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4413      	add	r3, r2
 8006906:	4a05      	ldr	r2, [pc, #20]	@ (800691c <_sbrk+0x64>)
 8006908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800690a:	68fb      	ldr	r3, [r7, #12]
}
 800690c:	4618      	mov	r0, r3
 800690e:	3718      	adds	r7, #24
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	20030000 	.word	0x20030000
 8006918:	00000400 	.word	0x00000400
 800691c:	20001200 	.word	0x20001200
 8006920:	20003148 	.word	0x20003148

08006924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006924:	b480      	push	{r7}
 8006926:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8006928:	4b24      	ldr	r3, [pc, #144]	@ (80069bc <SystemInit+0x98>)
 800692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800692e:	4a23      	ldr	r2, [pc, #140]	@ (80069bc <SystemInit+0x98>)
 8006930:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006934:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006938:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006942:	f043 0301 	orr.w	r3, r3, #1
 8006946:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8006948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800694c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8006950:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800695c:	4b18      	ldr	r3, [pc, #96]	@ (80069c0 <SystemInit+0x9c>)
 800695e:	4013      	ands	r3, r2
 8006960:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8006962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006966:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800696a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800696e:	f023 0305 	bic.w	r3, r3, #5
 8006972:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8006976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800697a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800697e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006982:	f023 0301 	bic.w	r3, r3, #1
 8006986:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800698a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800698e:	4a0d      	ldr	r2, [pc, #52]	@ (80069c4 <SystemInit+0xa0>)
 8006990:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006996:	4a0b      	ldr	r2, [pc, #44]	@ (80069c4 <SystemInit+0xa0>)
 8006998:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800699a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069a8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80069aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ae:	2200      	movs	r2, #0
 80069b0:	619a      	str	r2, [r3, #24]
}
 80069b2:	bf00      	nop
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	e000ed00 	.word	0xe000ed00
 80069c0:	faf6fefb 	.word	0xfaf6fefb
 80069c4:	22041000 	.word	0x22041000

080069c8 <LL_APB1_GRP1_EnableClock>:
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80069d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80069d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4313      	orrs	r3, r2
 80069de:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80069e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4013      	ands	r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069ec:	68fb      	ldr	r3, [r7, #12]
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <LL_APB2_GRP1_EnableClock>:
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006a02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
}
 8006a20:	bf00      	nop
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b088      	sub	sp, #32
 8006a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006a32:	f107 0310 	add.w	r3, r7, #16
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
 8006a3a:	605a      	str	r2, [r3, #4]
 8006a3c:	609a      	str	r2, [r3, #8]
 8006a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006a40:	1d3b      	adds	r3, r7, #4
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	605a      	str	r2, [r3, #4]
 8006a48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006ac4 <MX_TIM2_Init+0x98>)
 8006a4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8006a52:	4b1c      	ldr	r3, [pc, #112]	@ (8006ac4 <MX_TIM2_Init+0x98>)
 8006a54:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8006a58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ac4 <MX_TIM2_Init+0x98>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8006a60:	4b18      	ldr	r3, [pc, #96]	@ (8006ac4 <MX_TIM2_Init+0x98>)
 8006a62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006a66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a68:	4b16      	ldr	r3, [pc, #88]	@ (8006ac4 <MX_TIM2_Init+0x98>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a6e:	4b15      	ldr	r3, [pc, #84]	@ (8006ac4 <MX_TIM2_Init+0x98>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006a74:	4813      	ldr	r0, [pc, #76]	@ (8006ac4 <MX_TIM2_Init+0x98>)
 8006a76:	f008 f98f 	bl	800ed98 <HAL_TIM_Base_Init>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006a80:	f7fc fab8 	bl	8002ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006a8a:	f107 0310 	add.w	r3, r7, #16
 8006a8e:	4619      	mov	r1, r3
 8006a90:	480c      	ldr	r0, [pc, #48]	@ (8006ac4 <MX_TIM2_Init+0x98>)
 8006a92:	f008 fba3 	bl	800f1dc <HAL_TIM_ConfigClockSource>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8006a9c:	f7fc faaa 	bl	8002ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006aa0:	2320      	movs	r3, #32
 8006aa2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006aa8:	1d3b      	adds	r3, r7, #4
 8006aaa:	4619      	mov	r1, r3
 8006aac:	4805      	ldr	r0, [pc, #20]	@ (8006ac4 <MX_TIM2_Init+0x98>)
 8006aae:	f008 fd9d 	bl	800f5ec <HAL_TIMEx_MasterConfigSynchronization>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8006ab8:	f7fc fa9c 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006abc:	bf00      	nop
 8006abe:	3720      	adds	r7, #32
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20001204 	.word	0x20001204

08006ac8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006acc:	4b10      	ldr	r3, [pc, #64]	@ (8006b10 <MX_TIM16_Init+0x48>)
 8006ace:	4a11      	ldr	r2, [pc, #68]	@ (8006b14 <MX_TIM16_Init+0x4c>)
 8006ad0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b10 <MX_TIM16_Init+0x48>)
 8006ad4:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006ad8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ada:	4b0d      	ldr	r3, [pc, #52]	@ (8006b10 <MX_TIM16_Init+0x48>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <MX_TIM16_Init+0x48>)
 8006ae2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006ae6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ae8:	4b09      	ldr	r3, [pc, #36]	@ (8006b10 <MX_TIM16_Init+0x48>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006aee:	4b08      	ldr	r3, [pc, #32]	@ (8006b10 <MX_TIM16_Init+0x48>)
 8006af0:	2200      	movs	r2, #0
 8006af2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006af4:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <MX_TIM16_Init+0x48>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006afa:	4805      	ldr	r0, [pc, #20]	@ (8006b10 <MX_TIM16_Init+0x48>)
 8006afc:	f008 f94c 	bl	800ed98 <HAL_TIM_Base_Init>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8006b06:	f7fc fa75 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006b0a:	bf00      	nop
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	20001250 	.word	0x20001250
 8006b14:	40014400 	.word	0x40014400

08006b18 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006b1c:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <MX_TIM17_Init+0x48>)
 8006b1e:	4a11      	ldr	r2, [pc, #68]	@ (8006b64 <MX_TIM17_Init+0x4c>)
 8006b20:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8006b22:	4b0f      	ldr	r3, [pc, #60]	@ (8006b60 <MX_TIM17_Init+0x48>)
 8006b24:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8006b28:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <MX_TIM17_Init+0x48>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8006b30:	4b0b      	ldr	r3, [pc, #44]	@ (8006b60 <MX_TIM17_Init+0x48>)
 8006b32:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006b36:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b38:	4b09      	ldr	r3, [pc, #36]	@ (8006b60 <MX_TIM17_Init+0x48>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006b3e:	4b08      	ldr	r3, [pc, #32]	@ (8006b60 <MX_TIM17_Init+0x48>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b44:	4b06      	ldr	r3, [pc, #24]	@ (8006b60 <MX_TIM17_Init+0x48>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006b4a:	4805      	ldr	r0, [pc, #20]	@ (8006b60 <MX_TIM17_Init+0x48>)
 8006b4c:	f008 f924 	bl	800ed98 <HAL_TIM_Base_Init>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8006b56:	f7fc fa4d 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8006b5a:	bf00      	nop
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	2000129c 	.word	0x2000129c
 8006b64:	40014800 	.word	0x40014800

08006b68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b78:	d103      	bne.n	8006b82 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b7a:	2001      	movs	r0, #1
 8006b7c:	f7ff ff24 	bl	80069c8 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006b80:	e022      	b.n	8006bc8 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a12      	ldr	r2, [pc, #72]	@ (8006bd0 <HAL_TIM_Base_MspInit+0x68>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d10c      	bne.n	8006ba6 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006b8c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006b90:	f7ff ff33 	bl	80069fa <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8006b94:	2200      	movs	r2, #0
 8006b96:	2104      	movs	r1, #4
 8006b98:	2019      	movs	r0, #25
 8006b9a:	f001 fe42 	bl	8008822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006b9e:	2019      	movs	r0, #25
 8006ba0:	f001 fe59 	bl	8008856 <HAL_NVIC_EnableIRQ>
}
 8006ba4:	e010      	b.n	8006bc8 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a0a      	ldr	r2, [pc, #40]	@ (8006bd4 <HAL_TIM_Base_MspInit+0x6c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d10b      	bne.n	8006bc8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006bb0:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8006bb4:	f7ff ff21 	bl	80069fa <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2102      	movs	r1, #2
 8006bbc:	201a      	movs	r0, #26
 8006bbe:	f001 fe30 	bl	8008822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006bc2:	201a      	movs	r0, #26
 8006bc4:	f001 fe47 	bl	8008856 <HAL_NVIC_EnableIRQ>
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	40014400 	.word	0x40014400
 8006bd4:	40014800 	.word	0x40014800

08006bd8 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0

	SEC+=1;
 8006bdc:	4b98      	ldr	r3, [pc, #608]	@ (8006e40 <updatedate+0x268>)
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	3301      	adds	r3, #1
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	4b96      	ldr	r3, [pc, #600]	@ (8006e40 <updatedate+0x268>)
 8006be6:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006be8:	4b95      	ldr	r3, [pc, #596]	@ (8006e40 <updatedate+0x268>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b3b      	cmp	r3, #59	@ 0x3b
 8006bee:	d908      	bls.n	8006c02 <updatedate+0x2a>
		SEC=0;
 8006bf0:	4b93      	ldr	r3, [pc, #588]	@ (8006e40 <updatedate+0x268>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006bf6:	4b93      	ldr	r3, [pc, #588]	@ (8006e44 <updatedate+0x26c>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	4b91      	ldr	r3, [pc, #580]	@ (8006e44 <updatedate+0x26c>)
 8006c00:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8006c02:	4b90      	ldr	r3, [pc, #576]	@ (8006e44 <updatedate+0x26c>)
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b3b      	cmp	r3, #59	@ 0x3b
 8006c08:	d908      	bls.n	8006c1c <updatedate+0x44>

		MINUTE=0;
 8006c0a:	4b8e      	ldr	r3, [pc, #568]	@ (8006e44 <updatedate+0x26c>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8006c10:	4b8d      	ldr	r3, [pc, #564]	@ (8006e48 <updatedate+0x270>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	3301      	adds	r3, #1
 8006c16:	b2da      	uxtb	r2, r3
 8006c18:	4b8b      	ldr	r3, [pc, #556]	@ (8006e48 <updatedate+0x270>)
 8006c1a:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8006c1c:	4b8a      	ldr	r3, [pc, #552]	@ (8006e48 <updatedate+0x270>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b17      	cmp	r3, #23
 8006c22:	d908      	bls.n	8006c36 <updatedate+0x5e>
		HR=0;
 8006c24:	4b88      	ldr	r3, [pc, #544]	@ (8006e48 <updatedate+0x270>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8006c2a:	4b88      	ldr	r3, [pc, #544]	@ (8006e4c <updatedate+0x274>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	4b86      	ldr	r3, [pc, #536]	@ (8006e4c <updatedate+0x274>)
 8006c34:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8006c36:	4b86      	ldr	r3, [pc, #536]	@ (8006e50 <updatedate+0x278>)
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b0b      	cmp	r3, #11
 8006c3c:	f200 8137 	bhi.w	8006eae <updatedate+0x2d6>
 8006c40:	a201      	add	r2, pc, #4	@ (adr r2, 8006c48 <updatedate+0x70>)
 8006c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c46:	bf00      	nop
 8006c48:	08006c79 	.word	0x08006c79
 8006c4c:	08006ca3 	.word	0x08006ca3
 8006c50:	08006ccd 	.word	0x08006ccd
 8006c54:	08006cf7 	.word	0x08006cf7
 8006c58:	08006d21 	.word	0x08006d21
 8006c5c:	08006d4b 	.word	0x08006d4b
 8006c60:	08006d75 	.word	0x08006d75
 8006c64:	08006d9f 	.word	0x08006d9f
 8006c68:	08006dc7 	.word	0x08006dc7
 8006c6c:	08006def 	.word	0x08006def
 8006c70:	08006e17 	.word	0x08006e17
 8006c74:	08006e59 	.word	0x08006e59

	case JANVIER:
		if(JOURS>31){
 8006c78:	4b74      	ldr	r3, [pc, #464]	@ (8006e4c <updatedate+0x274>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b1f      	cmp	r3, #31
 8006c7e:	f240 80ff 	bls.w	8006e80 <updatedate+0x2a8>
			JOURS=1;
 8006c82:	4b72      	ldr	r3, [pc, #456]	@ (8006e4c <updatedate+0x274>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	701a      	strb	r2, [r3, #0]
			mois++;
 8006c88:	4b71      	ldr	r3, [pc, #452]	@ (8006e50 <updatedate+0x278>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	4b6f      	ldr	r3, [pc, #444]	@ (8006e50 <updatedate+0x278>)
 8006c92:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8006c94:	4b6f      	ldr	r3, [pc, #444]	@ (8006e54 <updatedate+0x27c>)
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	4b6d      	ldr	r3, [pc, #436]	@ (8006e54 <updatedate+0x27c>)
 8006c9e:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006ca0:	e0ee      	b.n	8006e80 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8006ca2:	4b6a      	ldr	r3, [pc, #424]	@ (8006e4c <updatedate+0x274>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	2b1d      	cmp	r3, #29
 8006ca8:	f240 80ec 	bls.w	8006e84 <updatedate+0x2ac>
					JOURS=1;
 8006cac:	4b67      	ldr	r3, [pc, #412]	@ (8006e4c <updatedate+0x274>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	701a      	strb	r2, [r3, #0]
					mois++;
 8006cb2:	4b67      	ldr	r3, [pc, #412]	@ (8006e50 <updatedate+0x278>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	4b65      	ldr	r3, [pc, #404]	@ (8006e50 <updatedate+0x278>)
 8006cbc:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006cbe:	4b65      	ldr	r3, [pc, #404]	@ (8006e54 <updatedate+0x27c>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	4b63      	ldr	r3, [pc, #396]	@ (8006e54 <updatedate+0x27c>)
 8006cc8:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006cca:	e0db      	b.n	8006e84 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8006ccc:	4b5f      	ldr	r3, [pc, #380]	@ (8006e4c <updatedate+0x274>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b1f      	cmp	r3, #31
 8006cd2:	f240 80d9 	bls.w	8006e88 <updatedate+0x2b0>
					JOURS=1;
 8006cd6:	4b5d      	ldr	r3, [pc, #372]	@ (8006e4c <updatedate+0x274>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	701a      	strb	r2, [r3, #0]
					mois++;
 8006cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8006e50 <updatedate+0x278>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8006e50 <updatedate+0x278>)
 8006ce6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8006e54 <updatedate+0x27c>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	3301      	adds	r3, #1
 8006cee:	b2da      	uxtb	r2, r3
 8006cf0:	4b58      	ldr	r3, [pc, #352]	@ (8006e54 <updatedate+0x27c>)
 8006cf2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006cf4:	e0c8      	b.n	8006e88 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006cf6:	4b55      	ldr	r3, [pc, #340]	@ (8006e4c <updatedate+0x274>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	2b1e      	cmp	r3, #30
 8006cfc:	f240 80c6 	bls.w	8006e8c <updatedate+0x2b4>
					JOURS=1;
 8006d00:	4b52      	ldr	r3, [pc, #328]	@ (8006e4c <updatedate+0x274>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d06:	4b52      	ldr	r3, [pc, #328]	@ (8006e50 <updatedate+0x278>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	4b50      	ldr	r3, [pc, #320]	@ (8006e50 <updatedate+0x278>)
 8006d10:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d12:	4b50      	ldr	r3, [pc, #320]	@ (8006e54 <updatedate+0x27c>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	3301      	adds	r3, #1
 8006d18:	b2da      	uxtb	r2, r3
 8006d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8006e54 <updatedate+0x27c>)
 8006d1c:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d1e:	e0b5      	b.n	8006e8c <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8006d20:	4b4a      	ldr	r3, [pc, #296]	@ (8006e4c <updatedate+0x274>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	2b1f      	cmp	r3, #31
 8006d26:	f240 80b3 	bls.w	8006e90 <updatedate+0x2b8>
					JOURS=1;
 8006d2a:	4b48      	ldr	r3, [pc, #288]	@ (8006e4c <updatedate+0x274>)
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d30:	4b47      	ldr	r3, [pc, #284]	@ (8006e50 <updatedate+0x278>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	4b45      	ldr	r3, [pc, #276]	@ (8006e50 <updatedate+0x278>)
 8006d3a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d3c:	4b45      	ldr	r3, [pc, #276]	@ (8006e54 <updatedate+0x27c>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	3301      	adds	r3, #1
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	4b43      	ldr	r3, [pc, #268]	@ (8006e54 <updatedate+0x27c>)
 8006d46:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d48:	e0a2      	b.n	8006e90 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8006d4a:	4b40      	ldr	r3, [pc, #256]	@ (8006e4c <updatedate+0x274>)
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b1e      	cmp	r3, #30
 8006d50:	f240 80a0 	bls.w	8006e94 <updatedate+0x2bc>
					JOURS=1;
 8006d54:	4b3d      	ldr	r3, [pc, #244]	@ (8006e4c <updatedate+0x274>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e50 <updatedate+0x278>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	4b3b      	ldr	r3, [pc, #236]	@ (8006e50 <updatedate+0x278>)
 8006d64:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d66:	4b3b      	ldr	r3, [pc, #236]	@ (8006e54 <updatedate+0x27c>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	4b39      	ldr	r3, [pc, #228]	@ (8006e54 <updatedate+0x27c>)
 8006d70:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d72:	e08f      	b.n	8006e94 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006d74:	4b35      	ldr	r3, [pc, #212]	@ (8006e4c <updatedate+0x274>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	2b1f      	cmp	r3, #31
 8006d7a:	f240 808d 	bls.w	8006e98 <updatedate+0x2c0>
					JOURS=1;
 8006d7e:	4b33      	ldr	r3, [pc, #204]	@ (8006e4c <updatedate+0x274>)
 8006d80:	2201      	movs	r2, #1
 8006d82:	701a      	strb	r2, [r3, #0]
					mois++;
 8006d84:	4b32      	ldr	r3, [pc, #200]	@ (8006e50 <updatedate+0x278>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	4b30      	ldr	r3, [pc, #192]	@ (8006e50 <updatedate+0x278>)
 8006d8e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006d90:	4b30      	ldr	r3, [pc, #192]	@ (8006e54 <updatedate+0x27c>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	3301      	adds	r3, #1
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	4b2e      	ldr	r3, [pc, #184]	@ (8006e54 <updatedate+0x27c>)
 8006d9a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d9c:	e07c      	b.n	8006e98 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8006d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8006e4c <updatedate+0x274>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b1f      	cmp	r3, #31
 8006da4:	d97a      	bls.n	8006e9c <updatedate+0x2c4>
					JOURS=1;
 8006da6:	4b29      	ldr	r3, [pc, #164]	@ (8006e4c <updatedate+0x274>)
 8006da8:	2201      	movs	r2, #1
 8006daa:	701a      	strb	r2, [r3, #0]
					mois++;
 8006dac:	4b28      	ldr	r3, [pc, #160]	@ (8006e50 <updatedate+0x278>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	4b26      	ldr	r3, [pc, #152]	@ (8006e50 <updatedate+0x278>)
 8006db6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006db8:	4b26      	ldr	r3, [pc, #152]	@ (8006e54 <updatedate+0x27c>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	4b24      	ldr	r3, [pc, #144]	@ (8006e54 <updatedate+0x27c>)
 8006dc2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006dc4:	e06a      	b.n	8006e9c <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006dc6:	4b21      	ldr	r3, [pc, #132]	@ (8006e4c <updatedate+0x274>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b1e      	cmp	r3, #30
 8006dcc:	d968      	bls.n	8006ea0 <updatedate+0x2c8>
					JOURS=1;
 8006dce:	4b1f      	ldr	r3, [pc, #124]	@ (8006e4c <updatedate+0x274>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	701a      	strb	r2, [r3, #0]
					mois++;
 8006dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8006e50 <updatedate+0x278>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	b2da      	uxtb	r2, r3
 8006ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8006e50 <updatedate+0x278>)
 8006dde:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006de0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e54 <updatedate+0x27c>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	3301      	adds	r3, #1
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	4b1a      	ldr	r3, [pc, #104]	@ (8006e54 <updatedate+0x27c>)
 8006dea:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006dec:	e058      	b.n	8006ea0 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8006dee:	4b17      	ldr	r3, [pc, #92]	@ (8006e4c <updatedate+0x274>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b1f      	cmp	r3, #31
 8006df4:	d956      	bls.n	8006ea4 <updatedate+0x2cc>
					JOURS=1;
 8006df6:	4b15      	ldr	r3, [pc, #84]	@ (8006e4c <updatedate+0x274>)
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
					mois++;
 8006dfc:	4b14      	ldr	r3, [pc, #80]	@ (8006e50 <updatedate+0x278>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	4b12      	ldr	r3, [pc, #72]	@ (8006e50 <updatedate+0x278>)
 8006e06:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e08:	4b12      	ldr	r3, [pc, #72]	@ (8006e54 <updatedate+0x27c>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	3301      	adds	r3, #1
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	4b10      	ldr	r3, [pc, #64]	@ (8006e54 <updatedate+0x27c>)
 8006e12:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e14:	e046      	b.n	8006ea4 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006e16:	4b0d      	ldr	r3, [pc, #52]	@ (8006e4c <updatedate+0x274>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	2b1e      	cmp	r3, #30
 8006e1c:	d944      	bls.n	8006ea8 <updatedate+0x2d0>
					JOURS=1;
 8006e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8006e4c <updatedate+0x274>)
 8006e20:	2201      	movs	r2, #1
 8006e22:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e24:	4b0a      	ldr	r3, [pc, #40]	@ (8006e50 <updatedate+0x278>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	4b08      	ldr	r3, [pc, #32]	@ (8006e50 <updatedate+0x278>)
 8006e2e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e30:	4b08      	ldr	r3, [pc, #32]	@ (8006e54 <updatedate+0x27c>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	4b06      	ldr	r3, [pc, #24]	@ (8006e54 <updatedate+0x27c>)
 8006e3a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e3c:	e034      	b.n	8006ea8 <updatedate+0x2d0>
 8006e3e:	bf00      	nop
 8006e40:	20000b94 	.word	0x20000b94
 8006e44:	20000b96 	.word	0x20000b96
 8006e48:	20000b95 	.word	0x20000b95
 8006e4c:	20000010 	.word	0x20000010
 8006e50:	20000b97 	.word	0x20000b97
 8006e54:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8006e58:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed8 <updatedate+0x300>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	2b1f      	cmp	r3, #31
 8006e5e:	d925      	bls.n	8006eac <updatedate+0x2d4>
					JOURS=1;
 8006e60:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed8 <updatedate+0x300>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	701a      	strb	r2, [r3, #0]
					mois++;
 8006e66:	4b1d      	ldr	r3, [pc, #116]	@ (8006edc <updatedate+0x304>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8006edc <updatedate+0x304>)
 8006e70:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006e72:	4b1b      	ldr	r3, [pc, #108]	@ (8006ee0 <updatedate+0x308>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	3301      	adds	r3, #1
 8006e78:	b2da      	uxtb	r2, r3
 8006e7a:	4b19      	ldr	r3, [pc, #100]	@ (8006ee0 <updatedate+0x308>)
 8006e7c:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006e7e:	e015      	b.n	8006eac <updatedate+0x2d4>
		break;
 8006e80:	bf00      	nop
 8006e82:	e014      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006e84:	bf00      	nop
 8006e86:	e012      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006e88:	bf00      	nop
 8006e8a:	e010      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006e8c:	bf00      	nop
 8006e8e:	e00e      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006e90:	bf00      	nop
 8006e92:	e00c      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006e94:	bf00      	nop
 8006e96:	e00a      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006e98:	bf00      	nop
 8006e9a:	e008      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006e9c:	bf00      	nop
 8006e9e:	e006      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006ea0:	bf00      	nop
 8006ea2:	e004      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006ea4:	bf00      	nop
 8006ea6:	e002      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006ea8:	bf00      	nop
 8006eaa:	e000      	b.n	8006eae <updatedate+0x2d6>
		break;
 8006eac:	bf00      	nop

	}

	if(MOIS>12){
 8006eae:	4b0c      	ldr	r3, [pc, #48]	@ (8006ee0 <updatedate+0x308>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b0c      	cmp	r3, #12
 8006eb4:	d90b      	bls.n	8006ece <updatedate+0x2f6>
		mois=JANVIER;
 8006eb6:	4b09      	ldr	r3, [pc, #36]	@ (8006edc <updatedate+0x304>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8006ebc:	4b08      	ldr	r3, [pc, #32]	@ (8006ee0 <updatedate+0x308>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8006ec2:	4b08      	ldr	r3, [pc, #32]	@ (8006ee4 <updatedate+0x30c>)
 8006ec4:	881b      	ldrh	r3, [r3, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	4b06      	ldr	r3, [pc, #24]	@ (8006ee4 <updatedate+0x30c>)
 8006ecc:	801a      	strh	r2, [r3, #0]
	}
}
 8006ece:	bf00      	nop
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	20000010 	.word	0x20000010
 8006edc:	20000b97 	.word	0x20000b97
 8006ee0:	20000011 	.word	0x20000011
 8006ee4:	20000012 	.word	0x20000012

08006ee8 <LL_AHB2_GRP1_EnableClock>:
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006ef0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ef4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ef6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4013      	ands	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
}
 8006f0e:	bf00      	nop
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <LL_APB1_GRP2_EnableClock>:
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006f22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f28:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
}
 8006f40:	bf00      	nop
 8006f42:	3714      	adds	r7, #20
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <LL_APB2_GRP1_EnableClock>:
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006f54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f58:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006f70:	68fb      	ldr	r3, [r7, #12]
}
 8006f72:	bf00      	nop
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
	...

08006f80 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006f84:	4b22      	ldr	r3, [pc, #136]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006f86:	4a23      	ldr	r2, [pc, #140]	@ (8007014 <MX_LPUART1_UART_Init+0x94>)
 8006f88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8006f8a:	4b21      	ldr	r3, [pc, #132]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006f8c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006f90:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f92:	4b1f      	ldr	r3, [pc, #124]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006f98:	4b1d      	ldr	r3, [pc, #116]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fa6:	220c      	movs	r2, #12
 8006fa8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006faa:	4b19      	ldr	r3, [pc, #100]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fb0:	4b17      	ldr	r3, [pc, #92]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006fb6:	4b16      	ldr	r3, [pc, #88]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006fbc:	4b14      	ldr	r3, [pc, #80]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006fc2:	4b13      	ldr	r3, [pc, #76]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006fc8:	4811      	ldr	r0, [pc, #68]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fca:	f008 fbad 	bl	800f728 <HAL_UART_Init>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006fd4:	f7fc f80e 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006fd8:	2100      	movs	r1, #0
 8006fda:	480d      	ldr	r0, [pc, #52]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fdc:	f009 ff72 	bl	8010ec4 <HAL_UARTEx_SetTxFifoThreshold>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d001      	beq.n	8006fea <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006fe6:	f7fc f805 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006fea:	2100      	movs	r1, #0
 8006fec:	4808      	ldr	r0, [pc, #32]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006fee:	f009 ffa7 	bl	8010f40 <HAL_UARTEx_SetRxFifoThreshold>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006ff8:	f7fb fffc 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006ffc:	4804      	ldr	r0, [pc, #16]	@ (8007010 <MX_LPUART1_UART_Init+0x90>)
 8006ffe:	f009 ff28 	bl	8010e52 <HAL_UARTEx_DisableFifoMode>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007008:	f7fb fff4 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800700c:	bf00      	nop
 800700e:	bd80      	pop	{r7, pc}
 8007010:	200012e8 	.word	0x200012e8
 8007014:	40008000 	.word	0x40008000

08007018 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800701c:	4b22      	ldr	r3, [pc, #136]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 800701e:	4a23      	ldr	r2, [pc, #140]	@ (80070ac <MX_USART1_UART_Init+0x94>)
 8007020:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007022:	4b21      	ldr	r3, [pc, #132]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8007028:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800702a:	4b1f      	ldr	r3, [pc, #124]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 800702c:	2200      	movs	r2, #0
 800702e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007030:	4b1d      	ldr	r3, [pc, #116]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007032:	2200      	movs	r2, #0
 8007034:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007036:	4b1c      	ldr	r3, [pc, #112]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007038:	2200      	movs	r2, #0
 800703a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800703c:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 800703e:	220c      	movs	r2, #12
 8007040:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007042:	4b19      	ldr	r3, [pc, #100]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007044:	2200      	movs	r2, #0
 8007046:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007048:	4b17      	ldr	r3, [pc, #92]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 800704a:	2200      	movs	r2, #0
 800704c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800704e:	4b16      	ldr	r3, [pc, #88]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007050:	2200      	movs	r2, #0
 8007052:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007054:	4b14      	ldr	r3, [pc, #80]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007056:	2200      	movs	r2, #0
 8007058:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800705a:	4b13      	ldr	r3, [pc, #76]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 800705c:	2200      	movs	r2, #0
 800705e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007060:	4811      	ldr	r0, [pc, #68]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007062:	f008 fb61 	bl	800f728 <HAL_UART_Init>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800706c:	f7fb ffc2 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007070:	2100      	movs	r1, #0
 8007072:	480d      	ldr	r0, [pc, #52]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007074:	f009 ff26 	bl	8010ec4 <HAL_UARTEx_SetTxFifoThreshold>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800707e:	f7fb ffb9 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007082:	2100      	movs	r1, #0
 8007084:	4808      	ldr	r0, [pc, #32]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007086:	f009 ff5b 	bl	8010f40 <HAL_UARTEx_SetRxFifoThreshold>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d001      	beq.n	8007094 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007090:	f7fb ffb0 	bl	8002ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007094:	4804      	ldr	r0, [pc, #16]	@ (80070a8 <MX_USART1_UART_Init+0x90>)
 8007096:	f009 fedc 	bl	8010e52 <HAL_UARTEx_DisableFifoMode>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80070a0:	f7fb ffa8 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80070a4:	bf00      	nop
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	2000137c 	.word	0x2000137c
 80070ac:	40013800 	.word	0x40013800

080070b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b09c      	sub	sp, #112	@ 0x70
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]
 80070c0:	605a      	str	r2, [r3, #4]
 80070c2:	609a      	str	r2, [r3, #8]
 80070c4:	60da      	str	r2, [r3, #12]
 80070c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80070c8:	f107 030c 	add.w	r3, r7, #12
 80070cc:	2250      	movs	r2, #80	@ 0x50
 80070ce:	2100      	movs	r1, #0
 80070d0:	4618      	mov	r0, r3
 80070d2:	f014 f9be 	bl	801b452 <memset>
  if(uartHandle->Instance==LPUART1)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a46      	ldr	r2, [pc, #280]	@ (80071f4 <HAL_UART_MspInit+0x144>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d158      	bne.n	8007192 <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80070e0:	2302      	movs	r3, #2
 80070e2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 80070e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80070e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80070ea:	f107 030c 	add.w	r3, r7, #12
 80070ee:	4618      	mov	r0, r3
 80070f0:	f006 f83d 	bl	800d16e <HAL_RCCEx_PeriphCLKConfig>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80070fa:	f7fb ff7b 	bl	8002ff4 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80070fe:	2001      	movs	r0, #1
 8007100:	f7ff ff0b 	bl	8006f1a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007104:	2001      	movs	r0, #1
 8007106:	f7ff feef 	bl	8006ee8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800710a:	230c      	movs	r3, #12
 800710c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800710e:	2302      	movs	r3, #2
 8007110:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007112:	2300      	movs	r3, #0
 8007114:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007116:	2300      	movs	r3, #0
 8007118:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800711a:	2308      	movs	r3, #8
 800711c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800711e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007122:	4619      	mov	r1, r3
 8007124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007128:	f001 ff18 	bl	8008f5c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 800712c:	4b32      	ldr	r3, [pc, #200]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 800712e:	4a33      	ldr	r2, [pc, #204]	@ (80071fc <HAL_UART_MspInit+0x14c>)
 8007130:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007132:	4b31      	ldr	r3, [pc, #196]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 8007134:	2210      	movs	r2, #16
 8007136:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007138:	4b2f      	ldr	r3, [pc, #188]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 800713a:	2200      	movs	r2, #0
 800713c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800713e:	4b2e      	ldr	r3, [pc, #184]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 8007140:	2200      	movs	r2, #0
 8007142:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007144:	4b2c      	ldr	r3, [pc, #176]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 8007146:	2280      	movs	r2, #128	@ 0x80
 8007148:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800714a:	4b2b      	ldr	r3, [pc, #172]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 800714c:	2200      	movs	r2, #0
 800714e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007150:	4b29      	ldr	r3, [pc, #164]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 8007152:	2200      	movs	r2, #0
 8007154:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8007156:	4b28      	ldr	r3, [pc, #160]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 8007158:	2220      	movs	r2, #32
 800715a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800715c:	4b26      	ldr	r3, [pc, #152]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 800715e:	2200      	movs	r2, #0
 8007160:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007162:	4825      	ldr	r0, [pc, #148]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 8007164:	f001 fbbc 	bl	80088e0 <HAL_DMA_Init>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800716e:	f7fb ff41 	bl	8002ff4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a20      	ldr	r2, [pc, #128]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 8007176:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800717a:	4a1f      	ldr	r2, [pc, #124]	@ (80071f8 <HAL_UART_MspInit+0x148>)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8007180:	2200      	movs	r2, #0
 8007182:	2102      	movs	r1, #2
 8007184:	2025      	movs	r0, #37	@ 0x25
 8007186:	f001 fb4c 	bl	8008822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800718a:	2025      	movs	r0, #37	@ 0x25
 800718c:	f001 fb63 	bl	8008856 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007190:	e02b      	b.n	80071ea <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART1)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a1a      	ldr	r2, [pc, #104]	@ (8007200 <HAL_UART_MspInit+0x150>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d126      	bne.n	80071ea <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800719c:	2301      	movs	r3, #1
 800719e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80071a0:	2300      	movs	r3, #0
 80071a2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80071a4:	f107 030c 	add.w	r3, r7, #12
 80071a8:	4618      	mov	r0, r3
 80071aa:	f005 ffe0 	bl	800d16e <HAL_RCCEx_PeriphCLKConfig>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <HAL_UART_MspInit+0x108>
      Error_Handler();
 80071b4:	f7fb ff1e 	bl	8002ff4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80071b8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80071bc:	f7ff fec6 	bl	8006f4c <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071c0:	2001      	movs	r0, #1
 80071c2:	f7ff fe91 	bl	8006ee8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80071c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80071ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071cc:	2302      	movs	r3, #2
 80071ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071d4:	2300      	movs	r3, #0
 80071d6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80071d8:	2307      	movs	r3, #7
 80071da:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80071e0:	4619      	mov	r1, r3
 80071e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80071e6:	f001 feb9 	bl	8008f5c <HAL_GPIO_Init>
}
 80071ea:	bf00      	nop
 80071ec:	3770      	adds	r7, #112	@ 0x70
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	40008000 	.word	0x40008000
 80071f8:	20001410 	.word	0x20001410
 80071fc:	4002001c 	.word	0x4002001c
 8007200:	40013800 	.word	0x40013800

08007204 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]

	oldPos = newPos; //keep track of the last position in the buffer
 800720c:	4b3a      	ldr	r3, [pc, #232]	@ (80072f8 <HAL_UART_RxCpltCallback+0xf4>)
 800720e:	881a      	ldrh	r2, [r3, #0]
 8007210:	4b3a      	ldr	r3, [pc, #232]	@ (80072fc <HAL_UART_RxCpltCallback+0xf8>)
 8007212:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8007214:	4b39      	ldr	r3, [pc, #228]	@ (80072fc <HAL_UART_RxCpltCallback+0xf8>)
 8007216:	881b      	ldrh	r3, [r3, #0]
 8007218:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800721c:	d922      	bls.n	8007264 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 800721e:	4b37      	ldr	r3, [pc, #220]	@ (80072fc <HAL_UART_RxCpltCallback+0xf8>)
 8007220:	881b      	ldrh	r3, [r3, #0]
 8007222:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007226:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 8007228:	4b34      	ldr	r3, [pc, #208]	@ (80072fc <HAL_UART_RxCpltCallback+0xf8>)
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	4b34      	ldr	r3, [pc, #208]	@ (8007300 <HAL_UART_RxCpltCallback+0xfc>)
 8007230:	4413      	add	r3, r2
 8007232:	89fa      	ldrh	r2, [r7, #14]
 8007234:	4933      	ldr	r1, [pc, #204]	@ (8007304 <HAL_UART_RxCpltCallback+0x100>)
 8007236:	4618      	mov	r0, r3
 8007238:	f014 fa27 	bl	801b68a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 800723c:	4b2f      	ldr	r3, [pc, #188]	@ (80072fc <HAL_UART_RxCpltCallback+0xf8>)
 800723e:	2200      	movs	r2, #0
 8007240:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8007242:	89fb      	ldrh	r3, [r7, #14]
 8007244:	4a2f      	ldr	r2, [pc, #188]	@ (8007304 <HAL_UART_RxCpltCallback+0x100>)
 8007246:	1899      	adds	r1, r3, r2
 8007248:	89fb      	ldrh	r3, [r7, #14]
 800724a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800724e:	461a      	mov	r2, r3
 8007250:	482b      	ldr	r0, [pc, #172]	@ (8007300 <HAL_UART_RxCpltCallback+0xfc>)
 8007252:	f014 fa1a 	bl	801b68a <memcpy>
				newPos = (64-datatocopy);  // update the position
 8007256:	89fb      	ldrh	r3, [r7, #14]
 8007258:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800725c:	b29a      	uxth	r2, r3
 800725e:	4b26      	ldr	r3, [pc, #152]	@ (80072f8 <HAL_UART_RxCpltCallback+0xf4>)
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	e01e      	b.n	80072a2 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8007264:	4b25      	ldr	r3, [pc, #148]	@ (80072fc <HAL_UART_RxCpltCallback+0xf8>)
 8007266:	881b      	ldrh	r3, [r3, #0]
 8007268:	461a      	mov	r2, r3
 800726a:	4b25      	ldr	r3, [pc, #148]	@ (8007300 <HAL_UART_RxCpltCallback+0xfc>)
 800726c:	441a      	add	r2, r3
 800726e:	4b25      	ldr	r3, [pc, #148]	@ (8007304 <HAL_UART_RxCpltCallback+0x100>)
 8007270:	4610      	mov	r0, r2
 8007272:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8007276:	4602      	mov	r2, r0
 8007278:	4619      	mov	r1, r3
 800727a:	f8d1 c000 	ldr.w	ip, [r1]
 800727e:	684e      	ldr	r6, [r1, #4]
 8007280:	688d      	ldr	r5, [r1, #8]
 8007282:	68c9      	ldr	r1, [r1, #12]
 8007284:	f8c2 c000 	str.w	ip, [r2]
 8007288:	6056      	str	r6, [r2, #4]
 800728a:	6095      	str	r5, [r2, #8]
 800728c:	60d1      	str	r1, [r2, #12]
 800728e:	3310      	adds	r3, #16
 8007290:	3010      	adds	r0, #16
 8007292:	42a3      	cmp	r3, r4
 8007294:	d1ef      	bne.n	8007276 <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 8007296:	4b19      	ldr	r3, [pc, #100]	@ (80072fc <HAL_UART_RxCpltCallback+0xf8>)
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	3340      	adds	r3, #64	@ 0x40
 800729c:	b29a      	uxth	r2, r3
 800729e:	4b16      	ldr	r3, [pc, #88]	@ (80072f8 <HAL_UART_RxCpltCallback+0xf4>)
 80072a0:	801a      	strh	r2, [r3, #0]

			}


			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80072a2:	2240      	movs	r2, #64	@ 0x40
 80072a4:	4917      	ldr	r1, [pc, #92]	@ (8007304 <HAL_UART_RxCpltCallback+0x100>)
 80072a6:	4818      	ldr	r0, [pc, #96]	@ (8007308 <HAL_UART_RxCpltCallback+0x104>)
 80072a8:	f008 fa8e 	bl	800f7c8 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80072ac:	4b17      	ldr	r3, [pc, #92]	@ (800730c <HAL_UART_RxCpltCallback+0x108>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	4b16      	ldr	r3, [pc, #88]	@ (800730c <HAL_UART_RxCpltCallback+0x108>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0204 	bic.w	r2, r2, #4
 80072ba:	601a      	str	r2, [r3, #0]
			memcpy((uint8_t *) receivedtrame,(uint8_t *)RxBuffer,64);
 80072bc:	4a14      	ldr	r2, [pc, #80]	@ (8007310 <HAL_UART_RxCpltCallback+0x10c>)
 80072be:	4b11      	ldr	r3, [pc, #68]	@ (8007304 <HAL_UART_RxCpltCallback+0x100>)
 80072c0:	4610      	mov	r0, r2
 80072c2:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80072c6:	4602      	mov	r2, r0
 80072c8:	4619      	mov	r1, r3
 80072ca:	f8d1 c000 	ldr.w	ip, [r1]
 80072ce:	684e      	ldr	r6, [r1, #4]
 80072d0:	688d      	ldr	r5, [r1, #8]
 80072d2:	68c9      	ldr	r1, [r1, #12]
 80072d4:	f8c2 c000 	str.w	ip, [r2]
 80072d8:	6056      	str	r6, [r2, #4]
 80072da:	6095      	str	r5, [r2, #8]
 80072dc:	60d1      	str	r1, [r2, #12]
 80072de:	3310      	adds	r3, #16
 80072e0:	3010      	adds	r0, #16
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	d1ef      	bne.n	80072c6 <HAL_UART_RxCpltCallback+0xc2>


	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 80072e6:	2240      	movs	r2, #64	@ 0x40
 80072e8:	4906      	ldr	r1, [pc, #24]	@ (8007304 <HAL_UART_RxCpltCallback+0x100>)
 80072ea:	4807      	ldr	r0, [pc, #28]	@ (8007308 <HAL_UART_RxCpltCallback+0x104>)
 80072ec:	f008 fa6c 	bl	800f7c8 <HAL_UART_Receive_DMA>
}
 80072f0:	bf00      	nop
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f8:	200005f0 	.word	0x200005f0
 80072fc:	200005ee 	.word	0x200005ee
 8007300:	20000634 	.word	0x20000634
 8007304:	200005f4 	.word	0x200005f4
 8007308:	200012e8 	.word	0x200012e8
 800730c:	20001410 	.word	0x20001410
 8007310:	20000cb8 	.word	0x20000cb8

08007314 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007314:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007316:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007318:	3304      	adds	r3, #4

0800731a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800731a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800731c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800731e:	d3f9      	bcc.n	8007314 <CopyDataInit>
  bx lr
 8007320:	4770      	bx	lr

08007322 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007322:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007324:	3004      	adds	r0, #4

08007326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8007326:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007328:	d3fb      	bcc.n	8007322 <FillZerobss>
  bx lr
 800732a:	4770      	bx	lr

0800732c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800732c:	480c      	ldr	r0, [pc, #48]	@ (8007360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800732e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007330:	f7ff faf8 	bl	8006924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007334:	480b      	ldr	r0, [pc, #44]	@ (8007364 <LoopForever+0x6>)
 8007336:	490c      	ldr	r1, [pc, #48]	@ (8007368 <LoopForever+0xa>)
 8007338:	4a0c      	ldr	r2, [pc, #48]	@ (800736c <LoopForever+0xe>)
 800733a:	2300      	movs	r3, #0
 800733c:	f7ff ffed 	bl	800731a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007340:	480b      	ldr	r0, [pc, #44]	@ (8007370 <LoopForever+0x12>)
 8007342:	490c      	ldr	r1, [pc, #48]	@ (8007374 <LoopForever+0x16>)
 8007344:	4a0c      	ldr	r2, [pc, #48]	@ (8007378 <LoopForever+0x1a>)
 8007346:	2300      	movs	r3, #0
 8007348:	f7ff ffe7 	bl	800731a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800734c:	480b      	ldr	r0, [pc, #44]	@ (800737c <LoopForever+0x1e>)
 800734e:	490c      	ldr	r1, [pc, #48]	@ (8007380 <LoopForever+0x22>)
 8007350:	2300      	movs	r3, #0
 8007352:	f7ff ffe8 	bl	8007326 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007356:	f014 f969 	bl	801b62c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800735a:	f7fb fd01 	bl	8002d60 <main>

0800735e <LoopForever>:

LoopForever:
  b LoopForever
 800735e:	e7fe      	b.n	800735e <LoopForever>
  ldr   r0, =_estack
 8007360:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007364:	20000008 	.word	0x20000008
 8007368:	20000320 	.word	0x20000320
 800736c:	08022810 	.word	0x08022810
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007370:	200301e4 	.word	0x200301e4
 8007374:	20030a67 	.word	0x20030a67
 8007378:	08022b6e 	.word	0x08022b6e
  INIT_BSS _sbss, _ebss
 800737c:	20000370 	.word	0x20000370
 8007380:	20003148 	.word	0x20003148

08007384 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007384:	e7fe      	b.n	8007384 <ADC1_IRQHandler>
	...

08007388 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007392:	4b0c      	ldr	r3, [pc, #48]	@ (80073c4 <HAL_Init+0x3c>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a0b      	ldr	r2, [pc, #44]	@ (80073c4 <HAL_Init+0x3c>)
 8007398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800739c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800739e:	2003      	movs	r0, #3
 80073a0:	f001 fa34 	bl	800880c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80073a4:	200f      	movs	r0, #15
 80073a6:	f000 f80f 	bl	80073c8 <HAL_InitTick>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	71fb      	strb	r3, [r7, #7]
 80073b4:	e001      	b.n	80073ba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80073b6:	f7ff f8de 	bl	8006576 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80073ba:	79fb      	ldrb	r3, [r7, #7]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3708      	adds	r7, #8
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	58004000 	.word	0x58004000

080073c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80073d4:	4b17      	ldr	r3, [pc, #92]	@ (8007434 <HAL_InitTick+0x6c>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d024      	beq.n	8007426 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80073dc:	f005 fc36 	bl	800cc4c <HAL_RCC_GetHCLKFreq>
 80073e0:	4602      	mov	r2, r0
 80073e2:	4b14      	ldr	r3, [pc, #80]	@ (8007434 <HAL_InitTick+0x6c>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	4619      	mov	r1, r3
 80073e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80073ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80073f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f4:	4618      	mov	r0, r3
 80073f6:	f001 fa4a 	bl	800888e <HAL_SYSTICK_Config>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10f      	bne.n	8007420 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b0f      	cmp	r3, #15
 8007404:	d809      	bhi.n	800741a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007406:	2200      	movs	r2, #0
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	f04f 30ff 	mov.w	r0, #4294967295
 800740e:	f001 fa08 	bl	8008822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007412:	4a09      	ldr	r2, [pc, #36]	@ (8007438 <HAL_InitTick+0x70>)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6013      	str	r3, [r2, #0]
 8007418:	e007      	b.n	800742a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	73fb      	strb	r3, [r7, #15]
 800741e:	e004      	b.n	800742a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	73fb      	strb	r3, [r7, #15]
 8007424:	e001      	b.n	800742a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000034 	.word	0x20000034
 8007438:	20000030 	.word	0x20000030

0800743c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007440:	4b06      	ldr	r3, [pc, #24]	@ (800745c <HAL_IncTick+0x20>)
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	4b06      	ldr	r3, [pc, #24]	@ (8007460 <HAL_IncTick+0x24>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4413      	add	r3, r2
 800744c:	4a04      	ldr	r2, [pc, #16]	@ (8007460 <HAL_IncTick+0x24>)
 800744e:	6013      	str	r3, [r2, #0]
}
 8007450:	bf00      	nop
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	20000034 	.word	0x20000034
 8007460:	20001470 	.word	0x20001470

08007464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  return uwTick;
 8007468:	4b03      	ldr	r3, [pc, #12]	@ (8007478 <HAL_GetTick+0x14>)
 800746a:	681b      	ldr	r3, [r3, #0]
}
 800746c:	4618      	mov	r0, r3
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20001470 	.word	0x20001470

0800747c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800747c:	b480      	push	{r7}
 800747e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007480:	4b03      	ldr	r3, [pc, #12]	@ (8007490 <HAL_GetTickPrio+0x14>)
 8007482:	681b      	ldr	r3, [r3, #0]
}
 8007484:	4618      	mov	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000030 	.word	0x20000030

08007494 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007498:	4b03      	ldr	r3, [pc, #12]	@ (80074a8 <HAL_GetTickFreq+0x14>)
 800749a:	781b      	ldrb	r3, [r3, #0]
}
 800749c:	4618      	mov	r0, r3
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	20000034 	.word	0x20000034

080074ac <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	431a      	orrs	r2, r3
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	609a      	str	r2, [r3, #8]
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8007508:	4618      	mov	r0, r3
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007514:	b480      	push	{r7}
 8007516:	b087      	sub	sp, #28
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3360      	adds	r3, #96	@ 0x60
 8007526:	461a      	mov	r2, r3
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	4b08      	ldr	r3, [pc, #32]	@ (8007558 <LL_ADC_SetOffset+0x44>)
 8007536:	4013      	ands	r3, r2
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	4313      	orrs	r3, r2
 8007544:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800754c:	bf00      	nop
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	03fff000 	.word	0x03fff000

0800755c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3360      	adds	r3, #96	@ 0x60
 800756a:	461a      	mov	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007588:	b480      	push	{r7}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	3360      	adds	r3, #96	@ 0x60
 8007598:	461a      	mov	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	431a      	orrs	r2, r3
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e000      	b.n	80075d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80075d6:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b087      	sub	sp, #28
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	3330      	adds	r3, #48	@ 0x30
 80075f4:	461a      	mov	r2, r3
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	0a1b      	lsrs	r3, r3, #8
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	f003 030c 	and.w	r3, r3, #12
 8007600:	4413      	add	r3, r2
 8007602:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	211f      	movs	r1, #31
 8007610:	fa01 f303 	lsl.w	r3, r1, r3
 8007614:	43db      	mvns	r3, r3
 8007616:	401a      	ands	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	0e9b      	lsrs	r3, r3, #26
 800761c:	f003 011f 	and.w	r1, r3, #31
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f003 031f 	and.w	r3, r3, #31
 8007626:	fa01 f303 	lsl.w	r3, r1, r3
 800762a:	431a      	orrs	r2, r3
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007630:	bf00      	nop
 8007632:	371c      	adds	r7, #28
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3314      	adds	r3, #20
 800764c:	461a      	mov	r2, r3
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	0e5b      	lsrs	r3, r3, #25
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	4413      	add	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	0d1b      	lsrs	r3, r3, #20
 8007664:	f003 031f 	and.w	r3, r3, #31
 8007668:	2107      	movs	r1, #7
 800766a:	fa01 f303 	lsl.w	r3, r1, r3
 800766e:	43db      	mvns	r3, r3
 8007670:	401a      	ands	r2, r3
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	0d1b      	lsrs	r3, r3, #20
 8007676:	f003 031f 	and.w	r3, r3, #31
 800767a:	6879      	ldr	r1, [r7, #4]
 800767c:	fa01 f303 	lsl.w	r3, r1, r3
 8007680:	431a      	orrs	r2, r3
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007686:	bf00      	nop
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
	...

08007694 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076ac:	43db      	mvns	r3, r3
 80076ae:	401a      	ands	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f003 0318 	and.w	r3, r3, #24
 80076b6:	4908      	ldr	r1, [pc, #32]	@ (80076d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80076b8:	40d9      	lsrs	r1, r3
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	400b      	ands	r3, r1
 80076be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c2:	431a      	orrs	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80076ca:	bf00      	nop
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	0007ffff 	.word	0x0007ffff

080076dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80076ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	6093      	str	r3, [r2, #8]
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007714:	d101      	bne.n	800771a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007738:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800773c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007760:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007764:	d101      	bne.n	800776a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007766:	2301      	movs	r3, #1
 8007768:	e000      	b.n	800776c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007788:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800778c:	f043 0201 	orr.w	r2, r3, #1
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007794:	bf00      	nop
 8007796:	370c      	adds	r7, #12
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 0301 	and.w	r3, r3, #1
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d101      	bne.n	80077b8 <LL_ADC_IsEnabled+0x18>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <LL_ADC_IsEnabled+0x1a>
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr

080077c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80077c6:	b480      	push	{r7}
 80077c8:	b083      	sub	sp, #12
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80077da:	f043 0204 	orr.w	r2, r3, #4
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80077e2:	bf00      	nop
 80077e4:	370c      	adds	r7, #12
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80077ee:	b480      	push	{r7}
 80077f0:	b083      	sub	sp, #12
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	f003 0304 	and.w	r3, r3, #4
 80077fe:	2b04      	cmp	r3, #4
 8007800:	d101      	bne.n	8007806 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b08      	cmp	r3, #8
 8007826:	d101      	bne.n	800782c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr
	...

0800783c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007844:	2300      	movs	r3, #0
 8007846:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8007848:	2300      	movs	r3, #0
 800784a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800784c:	2300      	movs	r3, #0
 800784e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e12e      	b.n	8007ab8 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007864:	2b00      	cmp	r3, #0
 8007866:	d109      	bne.n	800787c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f7f9 fe11 	bl	8001490 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff ff3d 	bl	8007700 <LL_ADC_IsDeepPowerDownEnabled>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d004      	beq.n	8007896 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff ff23 	bl	80076dc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff ff58 	bl	8007750 <LL_ADC_IsInternalRegulatorEnabled>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d115      	bne.n	80078d2 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff ff3c 	bl	8007728 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80078b0:	4b83      	ldr	r3, [pc, #524]	@ (8007ac0 <HAL_ADC_Init+0x284>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	099b      	lsrs	r3, r3, #6
 80078b6:	4a83      	ldr	r2, [pc, #524]	@ (8007ac4 <HAL_ADC_Init+0x288>)
 80078b8:	fba2 2303 	umull	r2, r3, r2, r3
 80078bc:	099b      	lsrs	r3, r3, #6
 80078be:	3301      	adds	r3, #1
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80078c4:	e002      	b.n	80078cc <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	3b01      	subs	r3, #1
 80078ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1f9      	bne.n	80078c6 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff ff3a 	bl	8007750 <LL_ADC_IsInternalRegulatorEnabled>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10d      	bne.n	80078fe <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e6:	f043 0210 	orr.w	r2, r3, #16
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078f2:	f043 0201 	orr.w	r2, r3, #1
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff ff73 	bl	80077ee <LL_ADC_REG_IsConversionOngoing>
 8007908:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b00      	cmp	r3, #0
 8007914:	f040 80c7 	bne.w	8007aa6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	f040 80c3 	bne.w	8007aa6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007924:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007928:	f043 0202 	orr.w	r2, r3, #2
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4618      	mov	r0, r3
 8007936:	f7ff ff33 	bl	80077a0 <LL_ADC_IsEnabled>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10b      	bne.n	8007958 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007940:	4861      	ldr	r0, [pc, #388]	@ (8007ac8 <HAL_ADC_Init+0x28c>)
 8007942:	f7ff ff2d 	bl	80077a0 <LL_ADC_IsEnabled>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	4619      	mov	r1, r3
 8007952:	485e      	ldr	r0, [pc, #376]	@ (8007acc <HAL_ADC_Init+0x290>)
 8007954:	f7ff fdaa 	bl	80074ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	7e5b      	ldrb	r3, [r3, #25]
 800795c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007962:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007968:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800796e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007976:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8007978:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	4313      	orrs	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d106      	bne.n	8007998 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798e:	3b01      	subs	r3, #1
 8007990:	045b      	lsls	r3, r3, #17
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	4313      	orrs	r3, r2
 8007996:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800799c:	2b00      	cmp	r3, #0
 800799e:	d009      	beq.n	80079b4 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80079ae:	69ba      	ldr	r2, [r7, #24]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68da      	ldr	r2, [r3, #12]
 80079ba:	4b45      	ldr	r3, [pc, #276]	@ (8007ad0 <HAL_ADC_Init+0x294>)
 80079bc:	4013      	ands	r3, r2
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	69b9      	ldr	r1, [r7, #24]
 80079c4:	430b      	orrs	r3, r1
 80079c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7ff ff0e 	bl	80077ee <LL_ADC_REG_IsConversionOngoing>
 80079d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff ff1b 	bl	8007814 <LL_ADC_INJ_IsConversionOngoing>
 80079de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d13d      	bne.n	8007a62 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d13a      	bne.n	8007a62 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80079f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80079f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80079fa:	4313      	orrs	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a08:	f023 0302 	bic.w	r3, r3, #2
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	69b9      	ldr	r1, [r7, #24]
 8007a12:	430b      	orrs	r3, r1
 8007a14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d118      	bne.n	8007a52 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007a2a:	f023 0304 	bic.w	r3, r3, #4
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007a36:	4311      	orrs	r1, r2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007a3c:	4311      	orrs	r1, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007a42:	430a      	orrs	r2, r1
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0201 	orr.w	r2, r2, #1
 8007a4e:	611a      	str	r2, [r3, #16]
 8007a50:	e007      	b.n	8007a62 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	691a      	ldr	r2, [r3, #16]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	d10c      	bne.n	8007a84 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a70:	f023 010f 	bic.w	r1, r3, #15
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	1e5a      	subs	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a82:	e007      	b.n	8007a94 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f022 020f 	bic.w	r2, r2, #15
 8007a92:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a98:	f023 0303 	bic.w	r3, r3, #3
 8007a9c:	f043 0201 	orr.w	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	655a      	str	r2, [r3, #84]	@ 0x54
 8007aa4:	e007      	b.n	8007ab6 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aaa:	f043 0210 	orr.w	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007ab6:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3720      	adds	r7, #32
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	2000002c 	.word	0x2000002c
 8007ac4:	053e2d63 	.word	0x053e2d63
 8007ac8:	50040000 	.word	0x50040000
 8007acc:	50040300 	.word	0x50040300
 8007ad0:	fff0c007 	.word	0xfff0c007

08007ad4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fe82 	bl	80077ee <LL_ADC_REG_IsConversionOngoing>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d167      	bne.n	8007bc0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_ADC_Start_DMA+0x2a>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e063      	b.n	8007bc6 <HAL_ADC_Start_DMA+0xf2>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007b06:	68f8      	ldr	r0, [r7, #12]
 8007b08:	f000 fc42 	bl	8008390 <ADC_Enable>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d14f      	bne.n	8007bb6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b1e:	f023 0301 	bic.w	r3, r3, #1
 8007b22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d006      	beq.n	8007b44 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3a:	f023 0206 	bic.w	r2, r3, #6
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b42:	e002      	b.n	8007b4a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b4e:	4a20      	ldr	r2, [pc, #128]	@ (8007bd0 <HAL_ADC_Start_DMA+0xfc>)
 8007b50:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b56:	4a1f      	ldr	r2, [pc, #124]	@ (8007bd4 <HAL_ADC_Start_DMA+0x100>)
 8007b58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8007bd8 <HAL_ADC_Start_DMA+0x104>)
 8007b60:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	221c      	movs	r2, #28
 8007b68:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f042 0210 	orr.w	r2, r2, #16
 8007b80:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0201 	orr.w	r2, r2, #1
 8007b90:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3340      	adds	r3, #64	@ 0x40
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f000 ff45 	bl	8008a30 <HAL_DMA_Start_IT>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff fe09 	bl	80077c6 <LL_ADC_REG_StartConversion>
 8007bb4:	e006      	b.n	8007bc4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007bbe:	e001      	b.n	8007bc4 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3718      	adds	r7, #24
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	08008485 	.word	0x08008485
 8007bd4:	0800855d 	.word	0x0800855d
 8007bd8:	08008579 	.word	0x08008579

08007bdc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b0b6      	sub	sp, #216	@ 0xd8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007c14:	2300      	movs	r3, #0
 8007c16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d101      	bne.n	8007c26 <HAL_ADC_ConfigChannel+0x22>
 8007c22:	2302      	movs	r3, #2
 8007c24:	e39f      	b.n	8008366 <HAL_ADC_ConfigChannel+0x762>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff fddb 	bl	80077ee <LL_ADC_REG_IsConversionOngoing>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f040 8384 	bne.w	8008348 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6818      	ldr	r0, [r3, #0]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	6859      	ldr	r1, [r3, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f7ff fcc9 	bl	80075e4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff fdc9 	bl	80077ee <LL_ADC_REG_IsConversionOngoing>
 8007c5c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff fdd5 	bl	8007814 <LL_ADC_INJ_IsConversionOngoing>
 8007c6a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007c6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f040 81a6 	bne.w	8007fc4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007c78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f040 81a1 	bne.w	8007fc4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6818      	ldr	r0, [r3, #0]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	6819      	ldr	r1, [r3, #0]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	461a      	mov	r2, r3
 8007c90:	f7ff fcd4 	bl	800763c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	695a      	ldr	r2, [r3, #20]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	08db      	lsrs	r3, r3, #3
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d00a      	beq.n	8007ccc <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6818      	ldr	r0, [r3, #0]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	6919      	ldr	r1, [r3, #16]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cc6:	f7ff fc25 	bl	8007514 <LL_ADC_SetOffset>
 8007cca:	e17b      	b.n	8007fc4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7ff fc42 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <HAL_ADC_ConfigChannel+0xf4>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fc37 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	0e9b      	lsrs	r3, r3, #26
 8007cf2:	f003 021f 	and.w	r2, r3, #31
 8007cf6:	e01e      	b.n	8007d36 <HAL_ADC_ConfigChannel+0x132>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7ff fc2c 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d0a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007d0e:	fa93 f3a3 	rbit	r3, r3
 8007d12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8007d16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8007d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d101      	bne.n	8007d2a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8007d26:	2320      	movs	r3, #32
 8007d28:	e004      	b.n	8007d34 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8007d2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d2e:	fab3 f383 	clz	r3, r3
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	461a      	mov	r2, r3
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d105      	bne.n	8007d4e <HAL_ADC_ConfigChannel+0x14a>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	0e9b      	lsrs	r3, r3, #26
 8007d48:	f003 031f 	and.w	r3, r3, #31
 8007d4c:	e018      	b.n	8007d80 <HAL_ADC_ConfigChannel+0x17c>
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007d5a:	fa93 f3a3 	rbit	r3, r3
 8007d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007d6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007d72:	2320      	movs	r3, #32
 8007d74:	e004      	b.n	8007d80 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007d76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d7a:	fab3 f383 	clz	r3, r3
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d106      	bne.n	8007d92 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7ff fbfb 	bl	8007588 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2101      	movs	r1, #1
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff fbdf 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10a      	bne.n	8007dbe <HAL_ADC_ConfigChannel+0x1ba>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2101      	movs	r1, #1
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7ff fbd4 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007db4:	4603      	mov	r3, r0
 8007db6:	0e9b      	lsrs	r3, r3, #26
 8007db8:	f003 021f 	and.w	r2, r3, #31
 8007dbc:	e01e      	b.n	8007dfc <HAL_ADC_ConfigChannel+0x1f8>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7ff fbc9 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007dd4:	fa93 f3a3 	rbit	r3, r3
 8007dd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007ddc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007de0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007dec:	2320      	movs	r3, #32
 8007dee:	e004      	b.n	8007dfa <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007df0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007df4:	fab3 f383 	clz	r3, r3
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d105      	bne.n	8007e14 <HAL_ADC_ConfigChannel+0x210>
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	0e9b      	lsrs	r3, r3, #26
 8007e0e:	f003 031f 	and.w	r3, r3, #31
 8007e12:	e018      	b.n	8007e46 <HAL_ADC_ConfigChannel+0x242>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007e20:	fa93 f3a3 	rbit	r3, r3
 8007e24:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007e28:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007e2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007e38:	2320      	movs	r3, #32
 8007e3a:	e004      	b.n	8007e46 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007e3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007e40:	fab3 f383 	clz	r3, r3
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d106      	bne.n	8007e58 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2101      	movs	r1, #1
 8007e52:	4618      	mov	r0, r3
 8007e54:	f7ff fb98 	bl	8007588 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2102      	movs	r1, #2
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7ff fb7c 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10a      	bne.n	8007e84 <HAL_ADC_ConfigChannel+0x280>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2102      	movs	r1, #2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f7ff fb71 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	0e9b      	lsrs	r3, r3, #26
 8007e7e:	f003 021f 	and.w	r2, r3, #31
 8007e82:	e01e      	b.n	8007ec2 <HAL_ADC_ConfigChannel+0x2be>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2102      	movs	r1, #2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7ff fb66 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007e90:	4603      	mov	r3, r0
 8007e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e9a:	fa93 f3a3 	rbit	r3, r3
 8007e9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007ea2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d101      	bne.n	8007eb6 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007eb2:	2320      	movs	r3, #32
 8007eb4:	e004      	b.n	8007ec0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007eb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007eba:	fab3 f383 	clz	r3, r3
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d105      	bne.n	8007eda <HAL_ADC_ConfigChannel+0x2d6>
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	0e9b      	lsrs	r3, r3, #26
 8007ed4:	f003 031f 	and.w	r3, r3, #31
 8007ed8:	e016      	b.n	8007f08 <HAL_ADC_ConfigChannel+0x304>
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ee2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007ee6:	fa93 f3a3 	rbit	r3, r3
 8007eea:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007eec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007efa:	2320      	movs	r3, #32
 8007efc:	e004      	b.n	8007f08 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f02:	fab3 f383 	clz	r3, r3
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d106      	bne.n	8007f1a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2200      	movs	r2, #0
 8007f12:	2102      	movs	r1, #2
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7ff fb37 	bl	8007588 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2103      	movs	r1, #3
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff fb1b 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10a      	bne.n	8007f46 <HAL_ADC_ConfigChannel+0x342>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2103      	movs	r1, #3
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7ff fb10 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	0e9b      	lsrs	r3, r3, #26
 8007f40:	f003 021f 	and.w	r2, r3, #31
 8007f44:	e017      	b.n	8007f76 <HAL_ADC_ConfigChannel+0x372>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2103      	movs	r1, #3
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7ff fb05 	bl	800755c <LL_ADC_GetOffsetChannel>
 8007f52:	4603      	mov	r3, r0
 8007f54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f58:	fa93 f3a3 	rbit	r3, r3
 8007f5c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f60:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007f62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007f68:	2320      	movs	r3, #32
 8007f6a:	e003      	b.n	8007f74 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007f6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f6e:	fab3 f383 	clz	r3, r3
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	461a      	mov	r2, r3
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d105      	bne.n	8007f8e <HAL_ADC_ConfigChannel+0x38a>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	0e9b      	lsrs	r3, r3, #26
 8007f88:	f003 031f 	and.w	r3, r3, #31
 8007f8c:	e011      	b.n	8007fb2 <HAL_ADC_ConfigChannel+0x3ae>
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007f96:	fa93 f3a3 	rbit	r3, r3
 8007f9a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007f9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007fa6:	2320      	movs	r3, #32
 8007fa8:	e003      	b.n	8007fb2 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fac:	fab3 f383 	clz	r3, r3
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d106      	bne.n	8007fc4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2103      	movs	r1, #3
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff fae2 	bl	8007588 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff fbe9 	bl	80077a0 <LL_ADC_IsEnabled>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 81c2 	bne.w	800835a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6819      	ldr	r1, [r3, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	f7ff fb56 	bl	8007694 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	4a8e      	ldr	r2, [pc, #568]	@ (8008228 <HAL_ADC_ConfigChannel+0x624>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	f040 8130 	bne.w	8008254 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10b      	bne.n	800801c <HAL_ADC_ConfigChannel+0x418>
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	0e9b      	lsrs	r3, r3, #26
 800800a:	3301      	adds	r3, #1
 800800c:	f003 031f 	and.w	r3, r3, #31
 8008010:	2b09      	cmp	r3, #9
 8008012:	bf94      	ite	ls
 8008014:	2301      	movls	r3, #1
 8008016:	2300      	movhi	r3, #0
 8008018:	b2db      	uxtb	r3, r3
 800801a:	e019      	b.n	8008050 <HAL_ADC_ConfigChannel+0x44c>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008024:	fa93 f3a3 	rbit	r3, r3
 8008028:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800802a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800802c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800802e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008030:	2b00      	cmp	r3, #0
 8008032:	d101      	bne.n	8008038 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8008034:	2320      	movs	r3, #32
 8008036:	e003      	b.n	8008040 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8008038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800803a:	fab3 f383 	clz	r3, r3
 800803e:	b2db      	uxtb	r3, r3
 8008040:	3301      	adds	r3, #1
 8008042:	f003 031f 	and.w	r3, r3, #31
 8008046:	2b09      	cmp	r3, #9
 8008048:	bf94      	ite	ls
 800804a:	2301      	movls	r3, #1
 800804c:	2300      	movhi	r3, #0
 800804e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008050:	2b00      	cmp	r3, #0
 8008052:	d079      	beq.n	8008148 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800805c:	2b00      	cmp	r3, #0
 800805e:	d107      	bne.n	8008070 <HAL_ADC_ConfigChannel+0x46c>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	0e9b      	lsrs	r3, r3, #26
 8008066:	3301      	adds	r3, #1
 8008068:	069b      	lsls	r3, r3, #26
 800806a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800806e:	e015      	b.n	800809c <HAL_ADC_ConfigChannel+0x498>
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008078:	fa93 f3a3 	rbit	r3, r3
 800807c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800807e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008080:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008088:	2320      	movs	r3, #32
 800808a:	e003      	b.n	8008094 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800808c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800808e:	fab3 f383 	clz	r3, r3
 8008092:	b2db      	uxtb	r3, r3
 8008094:	3301      	adds	r3, #1
 8008096:	069b      	lsls	r3, r3, #26
 8008098:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d109      	bne.n	80080bc <HAL_ADC_ConfigChannel+0x4b8>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	0e9b      	lsrs	r3, r3, #26
 80080ae:	3301      	adds	r3, #1
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2101      	movs	r1, #1
 80080b6:	fa01 f303 	lsl.w	r3, r1, r3
 80080ba:	e017      	b.n	80080ec <HAL_ADC_ConfigChannel+0x4e8>
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080c4:	fa93 f3a3 	rbit	r3, r3
 80080c8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80080ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80080ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80080d4:	2320      	movs	r3, #32
 80080d6:	e003      	b.n	80080e0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80080d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080da:	fab3 f383 	clz	r3, r3
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	3301      	adds	r3, #1
 80080e2:	f003 031f 	and.w	r3, r3, #31
 80080e6:	2101      	movs	r1, #1
 80080e8:	fa01 f303 	lsl.w	r3, r1, r3
 80080ec:	ea42 0103 	orr.w	r1, r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d10a      	bne.n	8008112 <HAL_ADC_ConfigChannel+0x50e>
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	0e9b      	lsrs	r3, r3, #26
 8008102:	3301      	adds	r3, #1
 8008104:	f003 021f 	and.w	r2, r3, #31
 8008108:	4613      	mov	r3, r2
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	4413      	add	r3, r2
 800810e:	051b      	lsls	r3, r3, #20
 8008110:	e018      	b.n	8008144 <HAL_ADC_ConfigChannel+0x540>
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800811a:	fa93 f3a3 	rbit	r3, r3
 800811e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8008120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8008124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800812a:	2320      	movs	r3, #32
 800812c:	e003      	b.n	8008136 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800812e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008130:	fab3 f383 	clz	r3, r3
 8008134:	b2db      	uxtb	r3, r3
 8008136:	3301      	adds	r3, #1
 8008138:	f003 021f 	and.w	r2, r3, #31
 800813c:	4613      	mov	r3, r2
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	4413      	add	r3, r2
 8008142:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008144:	430b      	orrs	r3, r1
 8008146:	e080      	b.n	800824a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008150:	2b00      	cmp	r3, #0
 8008152:	d107      	bne.n	8008164 <HAL_ADC_ConfigChannel+0x560>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	0e9b      	lsrs	r3, r3, #26
 800815a:	3301      	adds	r3, #1
 800815c:	069b      	lsls	r3, r3, #26
 800815e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008162:	e015      	b.n	8008190 <HAL_ADC_ConfigChannel+0x58c>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800816a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800816c:	fa93 f3a3 	rbit	r3, r3
 8008170:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8008172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008174:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8008176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 800817c:	2320      	movs	r3, #32
 800817e:	e003      	b.n	8008188 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8008180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008182:	fab3 f383 	clz	r3, r3
 8008186:	b2db      	uxtb	r3, r3
 8008188:	3301      	adds	r3, #1
 800818a:	069b      	lsls	r3, r3, #26
 800818c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008198:	2b00      	cmp	r3, #0
 800819a:	d109      	bne.n	80081b0 <HAL_ADC_ConfigChannel+0x5ac>
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	0e9b      	lsrs	r3, r3, #26
 80081a2:	3301      	adds	r3, #1
 80081a4:	f003 031f 	and.w	r3, r3, #31
 80081a8:	2101      	movs	r1, #1
 80081aa:	fa01 f303 	lsl.w	r3, r1, r3
 80081ae:	e017      	b.n	80081e0 <HAL_ADC_ConfigChannel+0x5dc>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	fa93 f3a3 	rbit	r3, r3
 80081bc:	61fb      	str	r3, [r7, #28]
  return result;
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80081c8:	2320      	movs	r3, #32
 80081ca:	e003      	b.n	80081d4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80081cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ce:	fab3 f383 	clz	r3, r3
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	3301      	adds	r3, #1
 80081d6:	f003 031f 	and.w	r3, r3, #31
 80081da:	2101      	movs	r1, #1
 80081dc:	fa01 f303 	lsl.w	r3, r1, r3
 80081e0:	ea42 0103 	orr.w	r1, r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10d      	bne.n	800820c <HAL_ADC_ConfigChannel+0x608>
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	0e9b      	lsrs	r3, r3, #26
 80081f6:	3301      	adds	r3, #1
 80081f8:	f003 021f 	and.w	r2, r3, #31
 80081fc:	4613      	mov	r3, r2
 80081fe:	005b      	lsls	r3, r3, #1
 8008200:	4413      	add	r3, r2
 8008202:	3b1e      	subs	r3, #30
 8008204:	051b      	lsls	r3, r3, #20
 8008206:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800820a:	e01d      	b.n	8008248 <HAL_ADC_ConfigChannel+0x644>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	fa93 f3a3 	rbit	r3, r3
 8008218:	613b      	str	r3, [r7, #16]
  return result;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d103      	bne.n	800822c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8008224:	2320      	movs	r3, #32
 8008226:	e005      	b.n	8008234 <HAL_ADC_ConfigChannel+0x630>
 8008228:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	fab3 f383 	clz	r3, r3
 8008232:	b2db      	uxtb	r3, r3
 8008234:	3301      	adds	r3, #1
 8008236:	f003 021f 	and.w	r2, r3, #31
 800823a:	4613      	mov	r3, r2
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4413      	add	r3, r2
 8008240:	3b1e      	subs	r3, #30
 8008242:	051b      	lsls	r3, r3, #20
 8008244:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008248:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800824e:	4619      	mov	r1, r3
 8008250:	f7ff f9f4 	bl	800763c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	4b45      	ldr	r3, [pc, #276]	@ (8008370 <HAL_ADC_ConfigChannel+0x76c>)
 800825a:	4013      	ands	r3, r2
 800825c:	2b00      	cmp	r3, #0
 800825e:	d07c      	beq.n	800835a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008260:	4844      	ldr	r0, [pc, #272]	@ (8008374 <HAL_ADC_ConfigChannel+0x770>)
 8008262:	f7ff f949 	bl	80074f8 <LL_ADC_GetCommonPathInternalCh>
 8008266:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800826a:	4843      	ldr	r0, [pc, #268]	@ (8008378 <HAL_ADC_ConfigChannel+0x774>)
 800826c:	f7ff fa98 	bl	80077a0 <LL_ADC_IsEnabled>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d15e      	bne.n	8008334 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a40      	ldr	r2, [pc, #256]	@ (800837c <HAL_ADC_ConfigChannel+0x778>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d127      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x6cc>
 8008280:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008284:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d121      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a39      	ldr	r2, [pc, #228]	@ (8008378 <HAL_ADC_ConfigChannel+0x774>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d161      	bne.n	800835a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008296:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800829a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800829e:	4619      	mov	r1, r3
 80082a0:	4834      	ldr	r0, [pc, #208]	@ (8008374 <HAL_ADC_ConfigChannel+0x770>)
 80082a2:	f7ff f916 	bl	80074d2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80082a6:	4b36      	ldr	r3, [pc, #216]	@ (8008380 <HAL_ADC_ConfigChannel+0x77c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	099b      	lsrs	r3, r3, #6
 80082ac:	4a35      	ldr	r2, [pc, #212]	@ (8008384 <HAL_ADC_ConfigChannel+0x780>)
 80082ae:	fba2 2303 	umull	r2, r3, r2, r3
 80082b2:	099b      	lsrs	r3, r3, #6
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	4613      	mov	r3, r2
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80082c0:	e002      	b.n	80082c8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1f9      	bne.n	80082c2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80082ce:	e044      	b.n	800835a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008388 <HAL_ADC_ConfigChannel+0x784>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d113      	bne.n	8008302 <HAL_ADC_ConfigChannel+0x6fe>
 80082da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10d      	bne.n	8008302 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a23      	ldr	r2, [pc, #140]	@ (8008378 <HAL_ADC_ConfigChannel+0x774>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d134      	bne.n	800835a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80082f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80082f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082f8:	4619      	mov	r1, r3
 80082fa:	481e      	ldr	r0, [pc, #120]	@ (8008374 <HAL_ADC_ConfigChannel+0x770>)
 80082fc:	f7ff f8e9 	bl	80074d2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008300:	e02b      	b.n	800835a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a21      	ldr	r2, [pc, #132]	@ (800838c <HAL_ADC_ConfigChannel+0x788>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d126      	bne.n	800835a <HAL_ADC_ConfigChannel+0x756>
 800830c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008310:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d120      	bne.n	800835a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a16      	ldr	r2, [pc, #88]	@ (8008378 <HAL_ADC_ConfigChannel+0x774>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d11b      	bne.n	800835a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008322:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008326:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800832a:	4619      	mov	r1, r3
 800832c:	4811      	ldr	r0, [pc, #68]	@ (8008374 <HAL_ADC_ConfigChannel+0x770>)
 800832e:	f7ff f8d0 	bl	80074d2 <LL_ADC_SetCommonPathInternalCh>
 8008332:	e012      	b.n	800835a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008338:	f043 0220 	orr.w	r2, r3, #32
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8008346:	e008      	b.n	800835a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800834c:	f043 0220 	orr.w	r2, r3, #32
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8008362:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8008366:	4618      	mov	r0, r3
 8008368:	37d8      	adds	r7, #216	@ 0xd8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	80080000 	.word	0x80080000
 8008374:	50040300 	.word	0x50040300
 8008378:	50040000 	.word	0x50040000
 800837c:	c7520000 	.word	0xc7520000
 8008380:	2000002c 	.word	0x2000002c
 8008384:	053e2d63 	.word	0x053e2d63
 8008388:	cb840000 	.word	0xcb840000
 800838c:	80000001 	.word	0x80000001

08008390 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008398:	2300      	movs	r3, #0
 800839a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7ff f9fd 	bl	80077a0 <LL_ADC_IsEnabled>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d15e      	bne.n	800846a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	4b30      	ldr	r3, [pc, #192]	@ (8008474 <ADC_Enable+0xe4>)
 80083b4:	4013      	ands	r3, r2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00d      	beq.n	80083d6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083be:	f043 0210 	orr.w	r2, r3, #16
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083ca:	f043 0201 	orr.w	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e04a      	b.n	800846c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff f9cc 	bl	8007778 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80083e0:	4825      	ldr	r0, [pc, #148]	@ (8008478 <ADC_Enable+0xe8>)
 80083e2:	f7ff f889 	bl	80074f8 <LL_ADC_GetCommonPathInternalCh>
 80083e6:	4603      	mov	r3, r0
 80083e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00f      	beq.n	8008410 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80083f0:	4b22      	ldr	r3, [pc, #136]	@ (800847c <ADC_Enable+0xec>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	099b      	lsrs	r3, r3, #6
 80083f6:	4a22      	ldr	r2, [pc, #136]	@ (8008480 <ADC_Enable+0xf0>)
 80083f8:	fba2 2303 	umull	r2, r3, r2, r3
 80083fc:	099b      	lsrs	r3, r3, #6
 80083fe:	3301      	adds	r3, #1
 8008400:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008402:	e002      	b.n	800840a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	3b01      	subs	r3, #1
 8008408:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1f9      	bne.n	8008404 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8008410:	f7ff f828 	bl	8007464 <HAL_GetTick>
 8008414:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008416:	e021      	b.n	800845c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f7ff f9bf 	bl	80077a0 <LL_ADC_IsEnabled>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	d104      	bne.n	8008432 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff f9a3 	bl	8007778 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008432:	f7ff f817 	bl	8007464 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d90d      	bls.n	800845c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008444:	f043 0210 	orr.w	r2, r3, #16
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008450:	f043 0201 	orr.w	r2, r3, #1
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e007      	b.n	800846c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b01      	cmp	r3, #1
 8008468:	d1d6      	bne.n	8008418 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	8000003f 	.word	0x8000003f
 8008478:	50040300 	.word	0x50040300
 800847c:	2000002c 	.word	0x2000002c
 8008480:	053e2d63 	.word	0x053e2d63

08008484 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008490:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008496:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800849a:	2b00      	cmp	r3, #0
 800849c:	d14b      	bne.n	8008536 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084a2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 0308 	and.w	r3, r3, #8
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d021      	beq.n	80084fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f7ff f87e 	bl	80075be <LL_ADC_REG_IsTriggerSourceSWStart>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d032      	beq.n	800852e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d12b      	bne.n	800852e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d11f      	bne.n	800852e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f2:	f043 0201 	orr.w	r2, r3, #1
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80084fa:	e018      	b.n	800852e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f003 0302 	and.w	r3, r3, #2
 8008506:	2b00      	cmp	r3, #0
 8008508:	d111      	bne.n	800852e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800850e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d105      	bne.n	800852e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008526:	f043 0201 	orr.w	r2, r3, #1
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f7f9 f80a 	bl	8001548 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008534:	e00e      	b.n	8008554 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853a:	f003 0310 	and.w	r3, r3, #16
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f7ff fb54 	bl	8007bf0 <HAL_ADC_ErrorCallback>
}
 8008548:	e004      	b.n	8008554 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800854e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	4798      	blx	r3
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008568:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fb36 	bl	8007bdc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800858a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008596:	f043 0204 	orr.w	r2, r3, #4
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7ff fb26 	bl	8007bf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80085a4:	bf00      	nop
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085bc:	4b0c      	ldr	r3, [pc, #48]	@ (80085f0 <__NVIC_SetPriorityGrouping+0x44>)
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80085c8:	4013      	ands	r3, r2
 80085ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80085d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80085d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085de:	4a04      	ldr	r2, [pc, #16]	@ (80085f0 <__NVIC_SetPriorityGrouping+0x44>)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	60d3      	str	r3, [r2, #12]
}
 80085e4:	bf00      	nop
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	e000ed00 	.word	0xe000ed00

080085f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085f4:	b480      	push	{r7}
 80085f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085f8:	4b04      	ldr	r3, [pc, #16]	@ (800860c <__NVIC_GetPriorityGrouping+0x18>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	0a1b      	lsrs	r3, r3, #8
 80085fe:	f003 0307 	and.w	r3, r3, #7
}
 8008602:	4618      	mov	r0, r3
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr
 800860c:	e000ed00 	.word	0xe000ed00

08008610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	4603      	mov	r3, r0
 8008618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800861a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800861e:	2b00      	cmp	r3, #0
 8008620:	db0b      	blt.n	800863a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	f003 021f 	and.w	r2, r3, #31
 8008628:	4907      	ldr	r1, [pc, #28]	@ (8008648 <__NVIC_EnableIRQ+0x38>)
 800862a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800862e:	095b      	lsrs	r3, r3, #5
 8008630:	2001      	movs	r0, #1
 8008632:	fa00 f202 	lsl.w	r2, r0, r2
 8008636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	e000e100 	.word	0xe000e100

0800864c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865a:	2b00      	cmp	r3, #0
 800865c:	db12      	blt.n	8008684 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	f003 021f 	and.w	r2, r3, #31
 8008664:	490a      	ldr	r1, [pc, #40]	@ (8008690 <__NVIC_DisableIRQ+0x44>)
 8008666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	2001      	movs	r0, #1
 800866e:	fa00 f202 	lsl.w	r2, r0, r2
 8008672:	3320      	adds	r3, #32
 8008674:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8008678:	f3bf 8f4f 	dsb	sy
}
 800867c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800867e:	f3bf 8f6f 	isb	sy
}
 8008682:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008684:	bf00      	nop
 8008686:	370c      	adds	r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr
 8008690:	e000e100 	.word	0xe000e100

08008694 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	4603      	mov	r3, r0
 800869c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800869e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	db0c      	blt.n	80086c0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	f003 021f 	and.w	r2, r3, #31
 80086ac:	4907      	ldr	r1, [pc, #28]	@ (80086cc <__NVIC_SetPendingIRQ+0x38>)
 80086ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	2001      	movs	r0, #1
 80086b6:	fa00 f202 	lsl.w	r2, r0, r2
 80086ba:	3340      	adds	r3, #64	@ 0x40
 80086bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	e000e100 	.word	0xe000e100

080086d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	db0c      	blt.n	80086fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086e2:	79fb      	ldrb	r3, [r7, #7]
 80086e4:	f003 021f 	and.w	r2, r3, #31
 80086e8:	4907      	ldr	r1, [pc, #28]	@ (8008708 <__NVIC_ClearPendingIRQ+0x38>)
 80086ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ee:	095b      	lsrs	r3, r3, #5
 80086f0:	2001      	movs	r0, #1
 80086f2:	fa00 f202 	lsl.w	r2, r0, r2
 80086f6:	3360      	adds	r3, #96	@ 0x60
 80086f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	e000e100 	.word	0xe000e100

0800870c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	4603      	mov	r3, r0
 8008714:	6039      	str	r1, [r7, #0]
 8008716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800871c:	2b00      	cmp	r3, #0
 800871e:	db0a      	blt.n	8008736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	b2da      	uxtb	r2, r3
 8008724:	490c      	ldr	r1, [pc, #48]	@ (8008758 <__NVIC_SetPriority+0x4c>)
 8008726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800872a:	0112      	lsls	r2, r2, #4
 800872c:	b2d2      	uxtb	r2, r2
 800872e:	440b      	add	r3, r1
 8008730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008734:	e00a      	b.n	800874c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	b2da      	uxtb	r2, r3
 800873a:	4908      	ldr	r1, [pc, #32]	@ (800875c <__NVIC_SetPriority+0x50>)
 800873c:	79fb      	ldrb	r3, [r7, #7]
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	3b04      	subs	r3, #4
 8008744:	0112      	lsls	r2, r2, #4
 8008746:	b2d2      	uxtb	r2, r2
 8008748:	440b      	add	r3, r1
 800874a:	761a      	strb	r2, [r3, #24]
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	e000e100 	.word	0xe000e100
 800875c:	e000ed00 	.word	0xe000ed00

08008760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008760:	b480      	push	{r7}
 8008762:	b089      	sub	sp, #36	@ 0x24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f003 0307 	and.w	r3, r3, #7
 8008772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	f1c3 0307 	rsb	r3, r3, #7
 800877a:	2b04      	cmp	r3, #4
 800877c:	bf28      	it	cs
 800877e:	2304      	movcs	r3, #4
 8008780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	3304      	adds	r3, #4
 8008786:	2b06      	cmp	r3, #6
 8008788:	d902      	bls.n	8008790 <NVIC_EncodePriority+0x30>
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	3b03      	subs	r3, #3
 800878e:	e000      	b.n	8008792 <NVIC_EncodePriority+0x32>
 8008790:	2300      	movs	r3, #0
 8008792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008794:	f04f 32ff 	mov.w	r2, #4294967295
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	fa02 f303 	lsl.w	r3, r2, r3
 800879e:	43da      	mvns	r2, r3
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	401a      	ands	r2, r3
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087a8:	f04f 31ff 	mov.w	r1, #4294967295
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	fa01 f303 	lsl.w	r3, r1, r3
 80087b2:	43d9      	mvns	r1, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087b8:	4313      	orrs	r3, r2
         );
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3724      	adds	r7, #36	@ 0x24
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
	...

080087c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087d8:	d301      	bcc.n	80087de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80087da:	2301      	movs	r3, #1
 80087dc:	e00f      	b.n	80087fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80087de:	4a0a      	ldr	r2, [pc, #40]	@ (8008808 <SysTick_Config+0x40>)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3b01      	subs	r3, #1
 80087e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80087e6:	210f      	movs	r1, #15
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	f7ff ff8e 	bl	800870c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80087f0:	4b05      	ldr	r3, [pc, #20]	@ (8008808 <SysTick_Config+0x40>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80087f6:	4b04      	ldr	r3, [pc, #16]	@ (8008808 <SysTick_Config+0x40>)
 80087f8:	2207      	movs	r2, #7
 80087fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3708      	adds	r7, #8
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	e000e010 	.word	0xe000e010

0800880c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff fec9 	bl	80085ac <__NVIC_SetPriorityGrouping>
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b086      	sub	sp, #24
 8008826:	af00      	add	r7, sp, #0
 8008828:	4603      	mov	r3, r0
 800882a:	60b9      	str	r1, [r7, #8]
 800882c:	607a      	str	r2, [r7, #4]
 800882e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008830:	f7ff fee0 	bl	80085f4 <__NVIC_GetPriorityGrouping>
 8008834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	6978      	ldr	r0, [r7, #20]
 800883c:	f7ff ff90 	bl	8008760 <NVIC_EncodePriority>
 8008840:	4602      	mov	r2, r0
 8008842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff ff5f 	bl	800870c <__NVIC_SetPriority>
}
 800884e:	bf00      	nop
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	4603      	mov	r3, r0
 800885e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008864:	4618      	mov	r0, r3
 8008866:	f7ff fed3 	bl	8008610 <__NVIC_EnableIRQ>
}
 800886a:	bf00      	nop
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	4603      	mov	r3, r0
 800887a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800887c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008880:	4618      	mov	r0, r3
 8008882:	f7ff fee3 	bl	800864c <__NVIC_DisableIRQ>
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff ff96 	bl	80087c8 <SysTick_Config>
 800889c:	4603      	mov	r3, r0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	4603      	mov	r3, r0
 80088ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80088b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff feed 	bl	8008694 <__NVIC_SetPendingIRQ>
}
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	4603      	mov	r3, r0
 80088ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80088cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7ff fefd 	bl	80086d0 <__NVIC_ClearPendingIRQ>
}
 80088d6:	bf00      	nop
 80088d8:	3708      	adds	r7, #8
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e08e      	b.n	8008a10 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	461a      	mov	r2, r3
 80088f8:	4b47      	ldr	r3, [pc, #284]	@ (8008a18 <HAL_DMA_Init+0x138>)
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d80f      	bhi.n	800891e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	4b45      	ldr	r3, [pc, #276]	@ (8008a1c <HAL_DMA_Init+0x13c>)
 8008906:	4413      	add	r3, r2
 8008908:	4a45      	ldr	r2, [pc, #276]	@ (8008a20 <HAL_DMA_Init+0x140>)
 800890a:	fba2 2303 	umull	r2, r3, r2, r3
 800890e:	091b      	lsrs	r3, r3, #4
 8008910:	009a      	lsls	r2, r3, #2
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a42      	ldr	r2, [pc, #264]	@ (8008a24 <HAL_DMA_Init+0x144>)
 800891a:	641a      	str	r2, [r3, #64]	@ 0x40
 800891c:	e00e      	b.n	800893c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	4b40      	ldr	r3, [pc, #256]	@ (8008a28 <HAL_DMA_Init+0x148>)
 8008926:	4413      	add	r3, r2
 8008928:	4a3d      	ldr	r2, [pc, #244]	@ (8008a20 <HAL_DMA_Init+0x140>)
 800892a:	fba2 2303 	umull	r2, r3, r2, r3
 800892e:	091b      	lsrs	r3, r3, #4
 8008930:	009a      	lsls	r2, r3, #2
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a3c      	ldr	r2, [pc, #240]	@ (8008a2c <HAL_DMA_Init+0x14c>)
 800893a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008956:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	691b      	ldr	r3, [r3, #16]
 8008966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800896c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fa80 	bl	8008e94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800899c:	d102      	bne.n	80089a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089ac:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80089b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80089ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d010      	beq.n	80089e6 <HAL_DMA_Init+0x106>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	2b04      	cmp	r3, #4
 80089ca:	d80c      	bhi.n	80089e6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fa9f 	bl	8008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80089e2:	605a      	str	r2, [r3, #4]
 80089e4:	e008      	b.n	80089f8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	40020407 	.word	0x40020407
 8008a1c:	bffdfff8 	.word	0xbffdfff8
 8008a20:	cccccccd 	.word	0xcccccccd
 8008a24:	40020000 	.word	0x40020000
 8008a28:	bffdfbf8 	.word	0xbffdfbf8
 8008a2c:	40020400 	.word	0x40020400

08008a30 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b086      	sub	sp, #24
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d101      	bne.n	8008a50 <HAL_DMA_Start_IT+0x20>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	e066      	b.n	8008b1e <HAL_DMA_Start_IT+0xee>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d155      	bne.n	8008b10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f022 0201 	bic.w	r2, r2, #1
 8008a80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	68b9      	ldr	r1, [r7, #8]
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f000 f9c5 	bl	8008e18 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d008      	beq.n	8008aa8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f042 020e 	orr.w	r2, r2, #14
 8008aa4:	601a      	str	r2, [r3, #0]
 8008aa6:	e00f      	b.n	8008ac8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0204 	bic.w	r2, r2, #4
 8008ab6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 020a 	orr.w	r2, r2, #10
 8008ac6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d007      	beq.n	8008ae6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ae0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ae4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d007      	beq.n	8008afe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008afc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f042 0201 	orr.w	r2, r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	e005      	b.n	8008b1c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2200      	movs	r2, #0
 8008b14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008b18:	2302      	movs	r3, #2
 8008b1a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3718      	adds	r7, #24
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b083      	sub	sp, #12
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d101      	bne.n	8008b38 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e04f      	b.n	8008bd8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d008      	beq.n	8008b56 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2204      	movs	r2, #4
 8008b48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e040      	b.n	8008bd8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 020e 	bic.w	r2, r2, #14
 8008b64:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008b74:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0201 	bic.w	r2, r2, #1
 8008b84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b8a:	f003 021c 	and.w	r2, r3, #28
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b92:	2101      	movs	r1, #1
 8008b94:	fa01 f202 	lsl.w	r2, r1, r2
 8008b98:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008ba2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00c      	beq.n	8008bc6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008bba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008bc4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d005      	beq.n	8008c08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2204      	movs	r2, #4
 8008c00:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	73fb      	strb	r3, [r7, #15]
 8008c06:	e047      	b.n	8008c98 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f022 020e 	bic.w	r2, r2, #14
 8008c16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0201 	bic.w	r2, r2, #1
 8008c26:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3c:	f003 021c 	and.w	r2, r3, #28
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c44:	2101      	movs	r1, #1
 8008c46:	fa01 f202 	lsl.w	r2, r1, r2
 8008c4a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008c54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00c      	beq.n	8008c78 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008c76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d003      	beq.n	8008c98 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
    }
  }
  return status;
 8008c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}

08008ca2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b084      	sub	sp, #16
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cbe:	f003 031c 	and.w	r3, r3, #28
 8008cc2:	2204      	movs	r2, #4
 8008cc4:	409a      	lsls	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d026      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x7a>
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f003 0304 	and.w	r3, r3, #4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d021      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f003 0320 	and.w	r3, r3, #32
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d107      	bne.n	8008cf6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0204 	bic.w	r2, r2, #4
 8008cf4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cfa:	f003 021c 	and.w	r2, r3, #28
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d02:	2104      	movs	r1, #4
 8008d04:	fa01 f202 	lsl.w	r2, r1, r2
 8008d08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d071      	beq.n	8008df6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008d1a:	e06c      	b.n	8008df6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d20:	f003 031c 	and.w	r3, r3, #28
 8008d24:	2202      	movs	r2, #2
 8008d26:	409a      	lsls	r2, r3
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d02e      	beq.n	8008d8e <HAL_DMA_IRQHandler+0xec>
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d029      	beq.n	8008d8e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 0320 	and.w	r3, r3, #32
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10b      	bne.n	8008d60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 020a 	bic.w	r2, r2, #10
 8008d56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d64:	f003 021c 	and.w	r2, r3, #28
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6c:	2102      	movs	r1, #2
 8008d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8008d72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d038      	beq.n	8008df6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008d8c:	e033      	b.n	8008df6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d92:	f003 031c 	and.w	r3, r3, #28
 8008d96:	2208      	movs	r2, #8
 8008d98:	409a      	lsls	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d02a      	beq.n	8008df8 <HAL_DMA_IRQHandler+0x156>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f003 0308 	and.w	r3, r3, #8
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d025      	beq.n	8008df8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 020e 	bic.w	r2, r2, #14
 8008dba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc0:	f003 021c 	and.w	r2, r3, #28
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc8:	2101      	movs	r1, #1
 8008dca:	fa01 f202 	lsl.w	r2, r1, r2
 8008dce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2201      	movs	r2, #1
 8008dda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d004      	beq.n	8008df8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008df6:	bf00      	nop
 8008df8:	bf00      	nop
}
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
 8008e24:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008e2e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e3c:	68fa      	ldr	r2, [r7, #12]
 8008e3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008e40:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e46:	f003 021c 	and.w	r2, r3, #28
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e4e:	2101      	movs	r1, #1
 8008e50:	fa01 f202 	lsl.w	r2, r1, r2
 8008e54:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d108      	bne.n	8008e78 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008e76:	e007      	b.n	8008e88 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	60da      	str	r2, [r3, #12]
}
 8008e88:	bf00      	nop
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4b17      	ldr	r3, [pc, #92]	@ (8008f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d80a      	bhi.n	8008ebe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eac:	089b      	lsrs	r3, r3, #2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008eb4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	6493      	str	r3, [r2, #72]	@ 0x48
 8008ebc:	e007      	b.n	8008ece <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec2:	089b      	lsrs	r3, r3, #2
 8008ec4:	009a      	lsls	r2, r3, #2
 8008ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008ec8:	4413      	add	r3, r2
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	3b08      	subs	r3, #8
 8008ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8008f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8008edc:	091b      	lsrs	r3, r3, #4
 8008ede:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8008f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008ee4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f003 031f 	and.w	r3, r3, #31
 8008eec:	2201      	movs	r2, #1
 8008eee:	409a      	lsls	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008ef4:	bf00      	nop
 8008ef6:	3714      	adds	r7, #20
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr
 8008f00:	40020407 	.word	0x40020407
 8008f04:	4002081c 	.word	0x4002081c
 8008f08:	cccccccd 	.word	0xcccccccd
 8008f0c:	40020880 	.word	0x40020880

08008f10 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f20:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f22:	68fa      	ldr	r2, [r7, #12]
 8008f24:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a09      	ldr	r2, [pc, #36]	@ (8008f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008f34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	2201      	movs	r2, #1
 8008f40:	409a      	lsls	r2, r3
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008f46:	bf00      	nop
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	1000823f 	.word	0x1000823f
 8008f58:	40020940 	.word	0x40020940

08008f5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b087      	sub	sp, #28
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f6a:	e14c      	b.n	8009206 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	2101      	movs	r1, #1
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	fa01 f303 	lsl.w	r3, r1, r3
 8008f78:	4013      	ands	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 813e 	beq.w	8009200 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f003 0303 	and.w	r3, r3, #3
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d005      	beq.n	8008f9c <HAL_GPIO_Init+0x40>
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f003 0303 	and.w	r3, r3, #3
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d130      	bne.n	8008ffe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fac:	43db      	mvns	r3, r3
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	4013      	ands	r3, r2
 8008fb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	68da      	ldr	r2, [r3, #12]
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fda:	43db      	mvns	r3, r3
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	4013      	ands	r3, r2
 8008fe0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	091b      	lsrs	r3, r3, #4
 8008fe8:	f003 0201 	and.w	r2, r3, #1
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	4313      	orrs	r3, r2
 8008ff6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f003 0303 	and.w	r3, r3, #3
 8009006:	2b03      	cmp	r3, #3
 8009008:	d017      	beq.n	800903a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	005b      	lsls	r3, r3, #1
 8009014:	2203      	movs	r2, #3
 8009016:	fa02 f303 	lsl.w	r3, r2, r3
 800901a:	43db      	mvns	r3, r3
 800901c:	693a      	ldr	r2, [r7, #16]
 800901e:	4013      	ands	r3, r2
 8009020:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	689a      	ldr	r2, [r3, #8]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	005b      	lsls	r3, r3, #1
 800902a:	fa02 f303 	lsl.w	r3, r2, r3
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	4313      	orrs	r3, r2
 8009032:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	f003 0303 	and.w	r3, r3, #3
 8009042:	2b02      	cmp	r3, #2
 8009044:	d123      	bne.n	800908e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	08da      	lsrs	r2, r3, #3
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3208      	adds	r2, #8
 800904e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009052:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	220f      	movs	r2, #15
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	43db      	mvns	r3, r3
 8009064:	693a      	ldr	r2, [r7, #16]
 8009066:	4013      	ands	r3, r2
 8009068:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	691a      	ldr	r2, [r3, #16]
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f003 0307 	and.w	r3, r3, #7
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	693a      	ldr	r2, [r7, #16]
 800907c:	4313      	orrs	r3, r2
 800907e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	08da      	lsrs	r2, r3, #3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3208      	adds	r2, #8
 8009088:	6939      	ldr	r1, [r7, #16]
 800908a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	2203      	movs	r2, #3
 800909a:	fa02 f303 	lsl.w	r3, r2, r3
 800909e:	43db      	mvns	r3, r3
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	4013      	ands	r3, r2
 80090a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f003 0203 	and.w	r2, r3, #3
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	fa02 f303 	lsl.w	r3, r2, r3
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 8098 	beq.w	8009200 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80090d0:	4a54      	ldr	r2, [pc, #336]	@ (8009224 <HAL_GPIO_Init+0x2c8>)
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	089b      	lsrs	r3, r3, #2
 80090d6:	3302      	adds	r3, #2
 80090d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f003 0303 	and.w	r3, r3, #3
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	220f      	movs	r2, #15
 80090e8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ec:	43db      	mvns	r3, r3
 80090ee:	693a      	ldr	r2, [r7, #16]
 80090f0:	4013      	ands	r3, r2
 80090f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80090fa:	d019      	beq.n	8009130 <HAL_GPIO_Init+0x1d4>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a4a      	ldr	r2, [pc, #296]	@ (8009228 <HAL_GPIO_Init+0x2cc>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d013      	beq.n	800912c <HAL_GPIO_Init+0x1d0>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a49      	ldr	r2, [pc, #292]	@ (800922c <HAL_GPIO_Init+0x2d0>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d00d      	beq.n	8009128 <HAL_GPIO_Init+0x1cc>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a48      	ldr	r2, [pc, #288]	@ (8009230 <HAL_GPIO_Init+0x2d4>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d007      	beq.n	8009124 <HAL_GPIO_Init+0x1c8>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a47      	ldr	r2, [pc, #284]	@ (8009234 <HAL_GPIO_Init+0x2d8>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d101      	bne.n	8009120 <HAL_GPIO_Init+0x1c4>
 800911c:	2304      	movs	r3, #4
 800911e:	e008      	b.n	8009132 <HAL_GPIO_Init+0x1d6>
 8009120:	2307      	movs	r3, #7
 8009122:	e006      	b.n	8009132 <HAL_GPIO_Init+0x1d6>
 8009124:	2303      	movs	r3, #3
 8009126:	e004      	b.n	8009132 <HAL_GPIO_Init+0x1d6>
 8009128:	2302      	movs	r3, #2
 800912a:	e002      	b.n	8009132 <HAL_GPIO_Init+0x1d6>
 800912c:	2301      	movs	r3, #1
 800912e:	e000      	b.n	8009132 <HAL_GPIO_Init+0x1d6>
 8009130:	2300      	movs	r3, #0
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	f002 0203 	and.w	r2, r2, #3
 8009138:	0092      	lsls	r2, r2, #2
 800913a:	4093      	lsls	r3, r2
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	4313      	orrs	r3, r2
 8009140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009142:	4938      	ldr	r1, [pc, #224]	@ (8009224 <HAL_GPIO_Init+0x2c8>)
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	089b      	lsrs	r3, r3, #2
 8009148:	3302      	adds	r3, #2
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009150:	4b39      	ldr	r3, [pc, #228]	@ (8009238 <HAL_GPIO_Init+0x2dc>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	43db      	mvns	r3, r3
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4013      	ands	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4313      	orrs	r3, r2
 8009172:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009174:	4a30      	ldr	r2, [pc, #192]	@ (8009238 <HAL_GPIO_Init+0x2dc>)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800917a:	4b2f      	ldr	r3, [pc, #188]	@ (8009238 <HAL_GPIO_Init+0x2dc>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	43db      	mvns	r3, r3
 8009184:	693a      	ldr	r2, [r7, #16]
 8009186:	4013      	ands	r3, r2
 8009188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4313      	orrs	r3, r2
 800919c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800919e:	4a26      	ldr	r2, [pc, #152]	@ (8009238 <HAL_GPIO_Init+0x2dc>)
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80091a4:	4b24      	ldr	r3, [pc, #144]	@ (8009238 <HAL_GPIO_Init+0x2dc>)
 80091a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80091aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	43db      	mvns	r3, r3
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4013      	ands	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4313      	orrs	r3, r2
 80091c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80091ca:	4a1b      	ldr	r2, [pc, #108]	@ (8009238 <HAL_GPIO_Init+0x2dc>)
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80091d2:	4b19      	ldr	r3, [pc, #100]	@ (8009238 <HAL_GPIO_Init+0x2dc>)
 80091d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	43db      	mvns	r3, r3
 80091de:	693a      	ldr	r2, [r7, #16]
 80091e0:	4013      	ands	r3, r2
 80091e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d003      	beq.n	80091f8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80091f8:	4a0f      	ldr	r2, [pc, #60]	@ (8009238 <HAL_GPIO_Init+0x2dc>)
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	3301      	adds	r3, #1
 8009204:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	f47f aeab 	bne.w	8008f6c <HAL_GPIO_Init+0x10>
  }
}
 8009216:	bf00      	nop
 8009218:	bf00      	nop
 800921a:	371c      	adds	r7, #28
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	40010000 	.word	0x40010000
 8009228:	48000400 	.word	0x48000400
 800922c:	48000800 	.word	0x48000800
 8009230:	48000c00 	.word	0x48000c00
 8009234:	48001000 	.word	0x48001000
 8009238:	58000800 	.word	0x58000800

0800923c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	887b      	ldrh	r3, [r7, #2]
 800924e:	4013      	ands	r3, r2
 8009250:	2b00      	cmp	r3, #0
 8009252:	d002      	beq.n	800925a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009254:	2301      	movs	r3, #1
 8009256:	73fb      	strb	r3, [r7, #15]
 8009258:	e001      	b.n	800925e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800925e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	460b      	mov	r3, r1
 8009276:	807b      	strh	r3, [r7, #2]
 8009278:	4613      	mov	r3, r2
 800927a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800927c:	787b      	ldrb	r3, [r7, #1]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009282:	887a      	ldrh	r2, [r7, #2]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009288:	e002      	b.n	8009290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800928a:	887a      	ldrh	r2, [r7, #2]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800929c:	b480      	push	{r7}
 800929e:	b085      	sub	sp, #20
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	695b      	ldr	r3, [r3, #20]
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80092ae:	887a      	ldrh	r2, [r7, #2]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	4013      	ands	r3, r2
 80092b4:	041a      	lsls	r2, r3, #16
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	43d9      	mvns	r1, r3
 80092ba:	887b      	ldrh	r3, [r7, #2]
 80092bc:	400b      	ands	r3, r1
 80092be:	431a      	orrs	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	619a      	str	r2, [r3, #24]
}
 80092c4:	bf00      	nop
 80092c6:	3714      	adds	r7, #20
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr

080092d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	4603      	mov	r3, r0
 80092d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80092da:	4b08      	ldr	r3, [pc, #32]	@ (80092fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092dc:	68da      	ldr	r2, [r3, #12]
 80092de:	88fb      	ldrh	r3, [r7, #6]
 80092e0:	4013      	ands	r3, r2
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d006      	beq.n	80092f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80092e6:	4a05      	ldr	r2, [pc, #20]	@ (80092fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80092ec:	88fb      	ldrh	r3, [r7, #6]
 80092ee:	4618      	mov	r0, r3
 80092f0:	f7f9 fcb2 	bl	8002c58 <HAL_GPIO_EXTI_Callback>
  }
}
 80092f4:	bf00      	nop
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	58000800 	.word	0x58000800

08009300 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8009306:	4b0a      	ldr	r3, [pc, #40]	@ (8009330 <HAL_HSEM_IRQHandler+0x30>)
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800930c:	4b08      	ldr	r3, [pc, #32]	@ (8009330 <HAL_HSEM_IRQHandler+0x30>)
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	43db      	mvns	r3, r3
 8009314:	4906      	ldr	r1, [pc, #24]	@ (8009330 <HAL_HSEM_IRQHandler+0x30>)
 8009316:	4013      	ands	r3, r2
 8009318:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800931a:	4a05      	ldr	r2, [pc, #20]	@ (8009330 <HAL_HSEM_IRQHandler+0x30>)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f807 	bl	8009334 <HAL_HSEM_FreeCallback>
}
 8009326:	bf00      	nop
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	58001500 	.word	0x58001500

08009334 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d101      	bne.n	800935a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e08d      	b.n	8009476 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d106      	bne.n	8009374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7f9 fb7e 	bl	8002a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2224      	movs	r2, #36	@ 0x24
 8009378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 0201 	bic.w	r2, r2, #1
 800938a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685a      	ldr	r2, [r3, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009398:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80093a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	68db      	ldr	r3, [r3, #12]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d107      	bne.n	80093c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689a      	ldr	r2, [r3, #8]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80093be:	609a      	str	r2, [r3, #8]
 80093c0:	e006      	b.n	80093d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80093ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d108      	bne.n	80093ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093e6:	605a      	str	r2, [r3, #4]
 80093e8:	e007      	b.n	80093fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	6812      	ldr	r2, [r2, #0]
 8009404:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800940c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800941c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691a      	ldr	r2, [r3, #16]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	69d9      	ldr	r1, [r3, #28]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a1a      	ldr	r2, [r3, #32]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0201 	orr.w	r2, r2, #1
 8009456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2220      	movs	r2, #32
 8009462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2200      	movs	r2, #0
 8009470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
	...

08009480 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b088      	sub	sp, #32
 8009484:	af02      	add	r7, sp, #8
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	4608      	mov	r0, r1
 800948a:	4611      	mov	r1, r2
 800948c:	461a      	mov	r2, r3
 800948e:	4603      	mov	r3, r0
 8009490:	817b      	strh	r3, [r7, #10]
 8009492:	460b      	mov	r3, r1
 8009494:	813b      	strh	r3, [r7, #8]
 8009496:	4613      	mov	r3, r2
 8009498:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	f040 80f9 	bne.w	800969a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80094a8:	6a3b      	ldr	r3, [r7, #32]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d002      	beq.n	80094b4 <HAL_I2C_Mem_Write+0x34>
 80094ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d105      	bne.n	80094c0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e0ed      	b.n	800969c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d101      	bne.n	80094ce <HAL_I2C_Mem_Write+0x4e>
 80094ca:	2302      	movs	r3, #2
 80094cc:	e0e6      	b.n	800969c <HAL_I2C_Mem_Write+0x21c>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094d6:	f7fd ffc5 	bl	8007464 <HAL_GetTick>
 80094da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	9300      	str	r3, [sp, #0]
 80094e0:	2319      	movs	r3, #25
 80094e2:	2201      	movs	r2, #1
 80094e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f000 fac3 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d001      	beq.n	80094f8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	e0d1      	b.n	800969c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2221      	movs	r2, #33	@ 0x21
 80094fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2240      	movs	r2, #64	@ 0x40
 8009504:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2200      	movs	r2, #0
 800950c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6a3a      	ldr	r2, [r7, #32]
 8009512:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009518:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2200      	movs	r2, #0
 800951e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009520:	88f8      	ldrh	r0, [r7, #6]
 8009522:	893a      	ldrh	r2, [r7, #8]
 8009524:	8979      	ldrh	r1, [r7, #10]
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	4603      	mov	r3, r0
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f000 f9d3 	bl	80098dc <I2C_RequestMemoryWrite>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d005      	beq.n	8009548 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e0a9      	b.n	800969c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800954c:	b29b      	uxth	r3, r3
 800954e:	2bff      	cmp	r3, #255	@ 0xff
 8009550:	d90e      	bls.n	8009570 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	22ff      	movs	r2, #255	@ 0xff
 8009556:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800955c:	b2da      	uxtb	r2, r3
 800955e:	8979      	ldrh	r1, [r7, #10]
 8009560:	2300      	movs	r3, #0
 8009562:	9300      	str	r3, [sp, #0]
 8009564:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 fc47 	bl	8009dfc <I2C_TransferConfig>
 800956e:	e00f      	b.n	8009590 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800957e:	b2da      	uxtb	r2, r3
 8009580:	8979      	ldrh	r1, [r7, #10]
 8009582:	2300      	movs	r3, #0
 8009584:	9300      	str	r3, [sp, #0]
 8009586:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 fc36 	bl	8009dfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 fac6 	bl	8009b26 <I2C_WaitOnTXISFlagUntilTimeout>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d001      	beq.n	80095a4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e07b      	b.n	800969c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a8:	781a      	ldrb	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095be:	b29b      	uxth	r3, r3
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095cc:	3b01      	subs	r3, #1
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095d8:	b29b      	uxth	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d034      	beq.n	8009648 <HAL_I2C_Mem_Write+0x1c8>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d130      	bne.n	8009648 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	9300      	str	r3, [sp, #0]
 80095ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095ec:	2200      	movs	r2, #0
 80095ee:	2180      	movs	r1, #128	@ 0x80
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 fa3f 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d001      	beq.n	8009600 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e04d      	b.n	800969c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009604:	b29b      	uxth	r3, r3
 8009606:	2bff      	cmp	r3, #255	@ 0xff
 8009608:	d90e      	bls.n	8009628 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	22ff      	movs	r2, #255	@ 0xff
 800960e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009614:	b2da      	uxtb	r2, r3
 8009616:	8979      	ldrh	r1, [r7, #10]
 8009618:	2300      	movs	r3, #0
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 fbeb 	bl	8009dfc <I2C_TransferConfig>
 8009626:	e00f      	b.n	8009648 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800962c:	b29a      	uxth	r2, r3
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009636:	b2da      	uxtb	r2, r3
 8009638:	8979      	ldrh	r1, [r7, #10]
 800963a:	2300      	movs	r3, #0
 800963c:	9300      	str	r3, [sp, #0]
 800963e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 fbda 	bl	8009dfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800964c:	b29b      	uxth	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d19e      	bne.n	8009590 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009656:	68f8      	ldr	r0, [r7, #12]
 8009658:	f000 faac 	bl	8009bb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e01a      	b.n	800969c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2220      	movs	r2, #32
 800966c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6859      	ldr	r1, [r3, #4]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	4b0a      	ldr	r3, [pc, #40]	@ (80096a4 <HAL_I2C_Mem_Write+0x224>)
 800967a:	400b      	ands	r3, r1
 800967c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2220      	movs	r2, #32
 8009682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	e000      	b.n	800969c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800969a:	2302      	movs	r3, #2
  }
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	fe00e800 	.word	0xfe00e800

080096a8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b088      	sub	sp, #32
 80096ac:	af02      	add	r7, sp, #8
 80096ae:	60f8      	str	r0, [r7, #12]
 80096b0:	4608      	mov	r0, r1
 80096b2:	4611      	mov	r1, r2
 80096b4:	461a      	mov	r2, r3
 80096b6:	4603      	mov	r3, r0
 80096b8:	817b      	strh	r3, [r7, #10]
 80096ba:	460b      	mov	r3, r1
 80096bc:	813b      	strh	r3, [r7, #8]
 80096be:	4613      	mov	r3, r2
 80096c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b20      	cmp	r3, #32
 80096cc:	f040 80fd 	bne.w	80098ca <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d002      	beq.n	80096dc <HAL_I2C_Mem_Read+0x34>
 80096d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d105      	bne.n	80096e8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096e2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e0f1      	b.n	80098cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d101      	bne.n	80096f6 <HAL_I2C_Mem_Read+0x4e>
 80096f2:	2302      	movs	r3, #2
 80096f4:	e0ea      	b.n	80098cc <HAL_I2C_Mem_Read+0x224>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2201      	movs	r2, #1
 80096fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80096fe:	f7fd feb1 	bl	8007464 <HAL_GetTick>
 8009702:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	2319      	movs	r3, #25
 800970a:	2201      	movs	r2, #1
 800970c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 f9af 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e0d5      	b.n	80098cc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2222      	movs	r2, #34	@ 0x22
 8009724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2240      	movs	r2, #64	@ 0x40
 800972c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6a3a      	ldr	r2, [r7, #32]
 800973a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009740:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009748:	88f8      	ldrh	r0, [r7, #6]
 800974a:	893a      	ldrh	r2, [r7, #8]
 800974c:	8979      	ldrh	r1, [r7, #10]
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	9301      	str	r3, [sp, #4]
 8009752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009754:	9300      	str	r3, [sp, #0]
 8009756:	4603      	mov	r3, r0
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f913 	bl	8009984 <I2C_RequestMemoryRead>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2200      	movs	r2, #0
 8009768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e0ad      	b.n	80098cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009774:	b29b      	uxth	r3, r3
 8009776:	2bff      	cmp	r3, #255	@ 0xff
 8009778:	d90e      	bls.n	8009798 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	22ff      	movs	r2, #255	@ 0xff
 800977e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009784:	b2da      	uxtb	r2, r3
 8009786:	8979      	ldrh	r1, [r7, #10]
 8009788:	4b52      	ldr	r3, [pc, #328]	@ (80098d4 <HAL_I2C_Mem_Read+0x22c>)
 800978a:	9300      	str	r3, [sp, #0]
 800978c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 fb33 	bl	8009dfc <I2C_TransferConfig>
 8009796:	e00f      	b.n	80097b8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800979c:	b29a      	uxth	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	8979      	ldrh	r1, [r7, #10]
 80097aa:	4b4a      	ldr	r3, [pc, #296]	@ (80098d4 <HAL_I2C_Mem_Read+0x22c>)
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	f000 fb22 	bl	8009dfc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097be:	2200      	movs	r2, #0
 80097c0:	2104      	movs	r1, #4
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 f956 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e07c      	b.n	80098cc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097dc:	b2d2      	uxtb	r2, r2
 80097de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e4:	1c5a      	adds	r2, r3, #1
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097ee:	3b01      	subs	r3, #1
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	3b01      	subs	r3, #1
 80097fe:	b29a      	uxth	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009808:	b29b      	uxth	r3, r3
 800980a:	2b00      	cmp	r3, #0
 800980c:	d034      	beq.n	8009878 <HAL_I2C_Mem_Read+0x1d0>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009812:	2b00      	cmp	r3, #0
 8009814:	d130      	bne.n	8009878 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981c:	2200      	movs	r2, #0
 800981e:	2180      	movs	r1, #128	@ 0x80
 8009820:	68f8      	ldr	r0, [r7, #12]
 8009822:	f000 f927 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d001      	beq.n	8009830 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e04d      	b.n	80098cc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009834:	b29b      	uxth	r3, r3
 8009836:	2bff      	cmp	r3, #255	@ 0xff
 8009838:	d90e      	bls.n	8009858 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	22ff      	movs	r2, #255	@ 0xff
 800983e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009844:	b2da      	uxtb	r2, r3
 8009846:	8979      	ldrh	r1, [r7, #10]
 8009848:	2300      	movs	r3, #0
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 fad3 	bl	8009dfc <I2C_TransferConfig>
 8009856:	e00f      	b.n	8009878 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800985c:	b29a      	uxth	r2, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009866:	b2da      	uxtb	r2, r3
 8009868:	8979      	ldrh	r1, [r7, #10]
 800986a:	2300      	movs	r3, #0
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 fac2 	bl	8009dfc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800987c:	b29b      	uxth	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d19a      	bne.n	80097b8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 f994 	bl	8009bb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e01a      	b.n	80098cc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2220      	movs	r2, #32
 800989c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6859      	ldr	r1, [r3, #4]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	4b0b      	ldr	r3, [pc, #44]	@ (80098d8 <HAL_I2C_Mem_Read+0x230>)
 80098aa:	400b      	ands	r3, r1
 80098ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2220      	movs	r2, #32
 80098b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	e000      	b.n	80098cc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80098ca:	2302      	movs	r3, #2
  }
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	80002400 	.word	0x80002400
 80098d8:	fe00e800 	.word	0xfe00e800

080098dc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b086      	sub	sp, #24
 80098e0:	af02      	add	r7, sp, #8
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	4608      	mov	r0, r1
 80098e6:	4611      	mov	r1, r2
 80098e8:	461a      	mov	r2, r3
 80098ea:	4603      	mov	r3, r0
 80098ec:	817b      	strh	r3, [r7, #10]
 80098ee:	460b      	mov	r3, r1
 80098f0:	813b      	strh	r3, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80098f6:	88fb      	ldrh	r3, [r7, #6]
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	8979      	ldrh	r1, [r7, #10]
 80098fc:	4b20      	ldr	r3, [pc, #128]	@ (8009980 <I2C_RequestMemoryWrite+0xa4>)
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 fa79 	bl	8009dfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800990a:	69fa      	ldr	r2, [r7, #28]
 800990c:	69b9      	ldr	r1, [r7, #24]
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 f909 	bl	8009b26 <I2C_WaitOnTXISFlagUntilTimeout>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e02c      	b.n	8009978 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800991e:	88fb      	ldrh	r3, [r7, #6]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d105      	bne.n	8009930 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009924:	893b      	ldrh	r3, [r7, #8]
 8009926:	b2da      	uxtb	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	629a      	str	r2, [r3, #40]	@ 0x28
 800992e:	e015      	b.n	800995c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009930:	893b      	ldrh	r3, [r7, #8]
 8009932:	0a1b      	lsrs	r3, r3, #8
 8009934:	b29b      	uxth	r3, r3
 8009936:	b2da      	uxtb	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800993e:	69fa      	ldr	r2, [r7, #28]
 8009940:	69b9      	ldr	r1, [r7, #24]
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f000 f8ef 	bl	8009b26 <I2C_WaitOnTXISFlagUntilTimeout>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e012      	b.n	8009978 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009952:	893b      	ldrh	r3, [r7, #8]
 8009954:	b2da      	uxtb	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	2200      	movs	r2, #0
 8009964:	2180      	movs	r1, #128	@ 0x80
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 f884 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e000      	b.n	8009978 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009976:	2300      	movs	r3, #0
}
 8009978:	4618      	mov	r0, r3
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	80002000 	.word	0x80002000

08009984 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af02      	add	r7, sp, #8
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	4608      	mov	r0, r1
 800998e:	4611      	mov	r1, r2
 8009990:	461a      	mov	r2, r3
 8009992:	4603      	mov	r3, r0
 8009994:	817b      	strh	r3, [r7, #10]
 8009996:	460b      	mov	r3, r1
 8009998:	813b      	strh	r3, [r7, #8]
 800999a:	4613      	mov	r3, r2
 800999c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800999e:	88fb      	ldrh	r3, [r7, #6]
 80099a0:	b2da      	uxtb	r2, r3
 80099a2:	8979      	ldrh	r1, [r7, #10]
 80099a4:	4b20      	ldr	r3, [pc, #128]	@ (8009a28 <I2C_RequestMemoryRead+0xa4>)
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	2300      	movs	r3, #0
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 fa26 	bl	8009dfc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099b0:	69fa      	ldr	r2, [r7, #28]
 80099b2:	69b9      	ldr	r1, [r7, #24]
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f000 f8b6 	bl	8009b26 <I2C_WaitOnTXISFlagUntilTimeout>
 80099ba:	4603      	mov	r3, r0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d001      	beq.n	80099c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	e02c      	b.n	8009a1e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80099c4:	88fb      	ldrh	r3, [r7, #6]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d105      	bne.n	80099d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099ca:	893b      	ldrh	r3, [r7, #8]
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80099d4:	e015      	b.n	8009a02 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80099d6:	893b      	ldrh	r3, [r7, #8]
 80099d8:	0a1b      	lsrs	r3, r3, #8
 80099da:	b29b      	uxth	r3, r3
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	69b9      	ldr	r1, [r7, #24]
 80099e8:	68f8      	ldr	r0, [r7, #12]
 80099ea:	f000 f89c 	bl	8009b26 <I2C_WaitOnTXISFlagUntilTimeout>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e012      	b.n	8009a1e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80099f8:	893b      	ldrh	r3, [r7, #8]
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2140      	movs	r1, #64	@ 0x40
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 f831 	bl	8009a74 <I2C_WaitOnFlagUntilTimeout>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e000      	b.n	8009a1e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	80002000 	.word	0x80002000

08009a2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	699b      	ldr	r3, [r3, #24]
 8009a3a:	f003 0302 	and.w	r3, r3, #2
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	d103      	bne.n	8009a4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	2200      	movs	r2, #0
 8009a48:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	f003 0301 	and.w	r3, r3, #1
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d007      	beq.n	8009a68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	699a      	ldr	r2, [r3, #24]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f042 0201 	orr.w	r2, r2, #1
 8009a66:	619a      	str	r2, [r3, #24]
  }
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	603b      	str	r3, [r7, #0]
 8009a80:	4613      	mov	r3, r2
 8009a82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a84:	e03b      	b.n	8009afe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a86:	69ba      	ldr	r2, [r7, #24]
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f000 f8d6 	bl	8009c3c <I2C_IsErrorOccurred>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d001      	beq.n	8009a9a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e041      	b.n	8009b1e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa0:	d02d      	beq.n	8009afe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aa2:	f7fd fcdf 	bl	8007464 <HAL_GetTick>
 8009aa6:	4602      	mov	r2, r0
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	1ad3      	subs	r3, r2, r3
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d302      	bcc.n	8009ab8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d122      	bne.n	8009afe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	699a      	ldr	r2, [r3, #24]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	68ba      	ldr	r2, [r7, #8]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	bf0c      	ite	eq
 8009ac8:	2301      	moveq	r3, #1
 8009aca:	2300      	movne	r3, #0
 8009acc:	b2db      	uxtb	r3, r3
 8009ace:	461a      	mov	r2, r3
 8009ad0:	79fb      	ldrb	r3, [r7, #7]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d113      	bne.n	8009afe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ada:	f043 0220 	orr.w	r2, r3, #32
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e00f      	b.n	8009b1e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	699a      	ldr	r2, [r3, #24]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	4013      	ands	r3, r2
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	bf0c      	ite	eq
 8009b0e:	2301      	moveq	r3, #1
 8009b10:	2300      	movne	r3, #0
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	461a      	mov	r2, r3
 8009b16:	79fb      	ldrb	r3, [r7, #7]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d0b4      	beq.n	8009a86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b26:	b580      	push	{r7, lr}
 8009b28:	b084      	sub	sp, #16
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	60f8      	str	r0, [r7, #12]
 8009b2e:	60b9      	str	r1, [r7, #8]
 8009b30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b32:	e033      	b.n	8009b9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	68b9      	ldr	r1, [r7, #8]
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f000 f87f 	bl	8009c3c <I2C_IsErrorOccurred>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d001      	beq.n	8009b48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e031      	b.n	8009bac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b4e:	d025      	beq.n	8009b9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b50:	f7fd fc88 	bl	8007464 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	1ad3      	subs	r3, r2, r3
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d302      	bcc.n	8009b66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d11a      	bne.n	8009b9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b02      	cmp	r3, #2
 8009b72:	d013      	beq.n	8009b9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b78:	f043 0220 	orr.w	r2, r3, #32
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e007      	b.n	8009bac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	699b      	ldr	r3, [r3, #24]
 8009ba2:	f003 0302 	and.w	r3, r3, #2
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d1c4      	bne.n	8009b34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bc0:	e02f      	b.n	8009c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	68b9      	ldr	r1, [r7, #8]
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f000 f838 	bl	8009c3c <I2C_IsErrorOccurred>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d001      	beq.n	8009bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e02d      	b.n	8009c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd6:	f7fd fc45 	bl	8007464 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	68ba      	ldr	r2, [r7, #8]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d302      	bcc.n	8009bec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d11a      	bne.n	8009c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	f003 0320 	and.w	r3, r3, #32
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d013      	beq.n	8009c22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfe:	f043 0220 	orr.w	r2, r3, #32
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e007      	b.n	8009c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f003 0320 	and.w	r3, r3, #32
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d1c8      	bne.n	8009bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b08a      	sub	sp, #40	@ 0x28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d068      	beq.n	8009d3a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2210      	movs	r2, #16
 8009c6e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c70:	e049      	b.n	8009d06 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c78:	d045      	beq.n	8009d06 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c7a:	f7fd fbf3 	bl	8007464 <HAL_GetTick>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d302      	bcc.n	8009c90 <I2C_IsErrorOccurred+0x54>
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d13a      	bne.n	8009d06 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c9a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009ca2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009cb2:	d121      	bne.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009cba:	d01d      	beq.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009cbc:	7cfb      	ldrb	r3, [r7, #19]
 8009cbe:	2b20      	cmp	r3, #32
 8009cc0:	d01a      	beq.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009cd0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009cd2:	f7fd fbc7 	bl	8007464 <HAL_GetTick>
 8009cd6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cd8:	e00e      	b.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009cda:	f7fd fbc3 	bl	8007464 <HAL_GetTick>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	1ad3      	subs	r3, r2, r3
 8009ce4:	2b19      	cmp	r3, #25
 8009ce6:	d907      	bls.n	8009cf8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	f043 0320 	orr.w	r3, r3, #32
 8009cee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009cf6:	e006      	b.n	8009d06 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f003 0320 	and.w	r3, r3, #32
 8009d02:	2b20      	cmp	r3, #32
 8009d04:	d1e9      	bne.n	8009cda <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	f003 0320 	and.w	r3, r3, #32
 8009d10:	2b20      	cmp	r3, #32
 8009d12:	d003      	beq.n	8009d1c <I2C_IsErrorOccurred+0xe0>
 8009d14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0aa      	beq.n	8009c72 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d103      	bne.n	8009d2c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2220      	movs	r2, #32
 8009d2a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	f043 0304 	orr.w	r3, r3, #4
 8009d32:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009d34:	2301      	movs	r3, #1
 8009d36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00b      	beq.n	8009d64 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009d4c:	6a3b      	ldr	r3, [r7, #32]
 8009d4e:	f043 0301 	orr.w	r3, r3, #1
 8009d52:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00b      	beq.n	8009d86 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009d6e:	6a3b      	ldr	r3, [r7, #32]
 8009d70:	f043 0308 	orr.w	r3, r3, #8
 8009d74:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009d7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00b      	beq.n	8009da8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	f043 0302 	orr.w	r3, r3, #2
 8009d96:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009da0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009da8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d01c      	beq.n	8009dea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f7ff fe3b 	bl	8009a2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6859      	ldr	r1, [r3, #4]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8009df8 <I2C_IsErrorOccurred+0x1bc>)
 8009dc2:	400b      	ands	r3, r1
 8009dc4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	431a      	orrs	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009dea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3728      	adds	r7, #40	@ 0x28
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	fe00e800 	.word	0xfe00e800

08009dfc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b087      	sub	sp, #28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	607b      	str	r3, [r7, #4]
 8009e06:	460b      	mov	r3, r1
 8009e08:	817b      	strh	r3, [r7, #10]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e0e:	897b      	ldrh	r3, [r7, #10]
 8009e10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009e14:	7a7b      	ldrb	r3, [r7, #9]
 8009e16:	041b      	lsls	r3, r3, #16
 8009e18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	0d5b      	lsrs	r3, r3, #21
 8009e36:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009e3a:	4b08      	ldr	r3, [pc, #32]	@ (8009e5c <I2C_TransferConfig+0x60>)
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	43db      	mvns	r3, r3
 8009e40:	ea02 0103 	and.w	r1, r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	697a      	ldr	r2, [r7, #20]
 8009e4a:	430a      	orrs	r2, r1
 8009e4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009e4e:	bf00      	nop
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	03ff63ff 	.word	0x03ff63ff

08009e60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b20      	cmp	r3, #32
 8009e74:	d138      	bne.n	8009ee8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d101      	bne.n	8009e84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e80:	2302      	movs	r3, #2
 8009e82:	e032      	b.n	8009eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2224      	movs	r2, #36	@ 0x24
 8009e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 0201 	bic.w	r2, r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009eb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6819      	ldr	r1, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	683a      	ldr	r2, [r7, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f042 0201 	orr.w	r2, r2, #1
 8009ed2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2220      	movs	r2, #32
 8009ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	e000      	b.n	8009eea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ee8:	2302      	movs	r3, #2
  }
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b085      	sub	sp, #20
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	2b20      	cmp	r3, #32
 8009f0a:	d139      	bne.n	8009f80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e033      	b.n	8009f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2224      	movs	r2, #36	@ 0x24
 8009f26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f022 0201 	bic.w	r2, r2, #1
 8009f38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009f48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	021b      	lsls	r3, r3, #8
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	4313      	orrs	r3, r2
 8009f52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0201 	orr.w	r2, r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2220      	movs	r2, #32
 8009f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	e000      	b.n	8009f82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f80:	2302      	movs	r3, #2
  }
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3714      	adds	r7, #20
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
	...

08009f90 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009f98:	4b05      	ldr	r3, [pc, #20]	@ (8009fb0 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	4904      	ldr	r1, [pc, #16]	@ (8009fb0 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	604b      	str	r3, [r1, #4]
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	40010000 	.word	0x40010000

08009fb4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d01e      	beq.n	800a004 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009fc6:	4b13      	ldr	r3, [pc, #76]	@ (800a014 <HAL_IPCC_Init+0x60>)
 8009fc8:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f7f8 fe02 	bl	8002be0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009fdc:	68b8      	ldr	r0, [r7, #8]
 8009fde:	f000 f85b 	bl	800a098 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f82c 	bl	800a04c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800a002:	e001      	b.n	800a008 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	58000c00 	.word	0x58000c00

0800a018 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a018:	b480      	push	{r7}
 800a01a:	b085      	sub	sp, #20
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	4613      	mov	r3, r2
 800a024:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800a026:	bf00      	nop
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800a032:	b480      	push	{r7}
 800a034:	b085      	sub	sp, #20
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	4613      	mov	r3, r2
 800a03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800a040:	bf00      	nop
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a054:	2300      	movs	r3, #0
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e00f      	b.n	800a07a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	4a0b      	ldr	r2, [pc, #44]	@ (800a090 <IPCC_SetDefaultCallbacks+0x44>)
 800a064:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3306      	adds	r3, #6
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4413      	add	r3, r2
 800a070:	4a08      	ldr	r2, [pc, #32]	@ (800a094 <IPCC_SetDefaultCallbacks+0x48>)
 800a072:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	3301      	adds	r3, #1
 800a078:	60fb      	str	r3, [r7, #12]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2b05      	cmp	r3, #5
 800a07e:	d9ec      	bls.n	800a05a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a080:	bf00      	nop
 800a082:	bf00      	nop
 800a084:	3714      	adds	r7, #20
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	0800a019 	.word	0x0800a019
 800a094:	0800a033 	.word	0x0800a033

0800a098 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a0ac:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	223f      	movs	r2, #63	@ 0x3f
 800a0b2:	609a      	str	r2, [r3, #8]
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e0c0      	b.n	800a254 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d106      	bne.n	800a0ec <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f00e fcda 	bl	8018aa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2203      	movs	r2, #3
 800a0f0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f006 ffc4 	bl	8011086 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0fe:	2300      	movs	r3, #0
 800a100:	73fb      	strb	r3, [r7, #15]
 800a102:	e03e      	b.n	800a182 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a104:	7bfa      	ldrb	r2, [r7, #15]
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	4613      	mov	r3, r2
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	440b      	add	r3, r1
 800a112:	3311      	adds	r3, #17
 800a114:	2201      	movs	r2, #1
 800a116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a118:	7bfa      	ldrb	r2, [r7, #15]
 800a11a:	6879      	ldr	r1, [r7, #4]
 800a11c:	4613      	mov	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4413      	add	r3, r2
 800a122:	00db      	lsls	r3, r3, #3
 800a124:	440b      	add	r3, r1
 800a126:	3310      	adds	r3, #16
 800a128:	7bfa      	ldrb	r2, [r7, #15]
 800a12a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a12c:	7bfa      	ldrb	r2, [r7, #15]
 800a12e:	6879      	ldr	r1, [r7, #4]
 800a130:	4613      	mov	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	00db      	lsls	r3, r3, #3
 800a138:	440b      	add	r3, r1
 800a13a:	3313      	adds	r3, #19
 800a13c:	2200      	movs	r2, #0
 800a13e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a140:	7bfa      	ldrb	r2, [r7, #15]
 800a142:	6879      	ldr	r1, [r7, #4]
 800a144:	4613      	mov	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	00db      	lsls	r3, r3, #3
 800a14c:	440b      	add	r3, r1
 800a14e:	3320      	adds	r3, #32
 800a150:	2200      	movs	r2, #0
 800a152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a154:	7bfa      	ldrb	r2, [r7, #15]
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	4613      	mov	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	440b      	add	r3, r1
 800a162:	3324      	adds	r3, #36	@ 0x24
 800a164:	2200      	movs	r2, #0
 800a166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a168:	7bfb      	ldrb	r3, [r7, #15]
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	1c5a      	adds	r2, r3, #1
 800a16e:	4613      	mov	r3, r2
 800a170:	009b      	lsls	r3, r3, #2
 800a172:	4413      	add	r3, r2
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	440b      	add	r3, r1
 800a178:	2200      	movs	r2, #0
 800a17a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	3301      	adds	r3, #1
 800a180:	73fb      	strb	r3, [r7, #15]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	791b      	ldrb	r3, [r3, #4]
 800a186:	7bfa      	ldrb	r2, [r7, #15]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d3bb      	bcc.n	800a104 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
 800a190:	e044      	b.n	800a21c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a192:	7bfa      	ldrb	r2, [r7, #15]
 800a194:	6879      	ldr	r1, [r7, #4]
 800a196:	4613      	mov	r3, r2
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	4413      	add	r3, r2
 800a19c:	00db      	lsls	r3, r3, #3
 800a19e:	440b      	add	r3, r1
 800a1a0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a1a8:	7bfa      	ldrb	r2, [r7, #15]
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	440b      	add	r3, r1
 800a1b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a1ba:	7bfa      	ldrb	r2, [r7, #15]
 800a1bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a1be:	7bfa      	ldrb	r2, [r7, #15]
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	00db      	lsls	r3, r3, #3
 800a1ca:	440b      	add	r3, r1
 800a1cc:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a1d4:	7bfa      	ldrb	r2, [r7, #15]
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	009b      	lsls	r3, r3, #2
 800a1dc:	4413      	add	r3, r2
 800a1de:	00db      	lsls	r3, r3, #3
 800a1e0:	440b      	add	r3, r1
 800a1e2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a1ea:	7bfa      	ldrb	r2, [r7, #15]
 800a1ec:	6879      	ldr	r1, [r7, #4]
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	00db      	lsls	r3, r3, #3
 800a1f6:	440b      	add	r3, r1
 800a1f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a200:	7bfa      	ldrb	r2, [r7, #15]
 800a202:	6879      	ldr	r1, [r7, #4]
 800a204:	4613      	mov	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	4413      	add	r3, r2
 800a20a:	00db      	lsls	r3, r3, #3
 800a20c:	440b      	add	r3, r1
 800a20e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a216:	7bfb      	ldrb	r3, [r7, #15]
 800a218:	3301      	adds	r3, #1
 800a21a:	73fb      	strb	r3, [r7, #15]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	791b      	ldrb	r3, [r3, #4]
 800a220:	7bfa      	ldrb	r2, [r7, #15]
 800a222:	429a      	cmp	r2, r3
 800a224:	d3b5      	bcc.n	800a192 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3304      	adds	r3, #4
 800a22e:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a232:	f006 ff43 	bl	80110bc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	7a9b      	ldrb	r3, [r3, #10]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d102      	bne.n	800a252 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f001 fc0e 	bl	800ba6e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b082      	sub	sp, #8
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d101      	bne.n	800a272 <HAL_PCD_Start+0x16>
 800a26e:	2302      	movs	r3, #2
 800a270:	e012      	b.n	800a298 <HAL_PCD_Start+0x3c>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	4618      	mov	r0, r3
 800a280:	f006 feea 	bl	8011058 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	f008 fcc7 	bl	8012c1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3708      	adds	r7, #8
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f008 fccc 	bl	8012c4a <USB_ReadInterrupts>
 800a2b2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fb06 	bl	800a8d0 <PCD_EP_ISR_Handler>

    return;
 800a2c4:	e110      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d013      	beq.n	800a2f8 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2e2:	b292      	uxth	r2, r2
 800a2e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f00e fc66 	bl	8018bba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f8fc 	bl	800a4ee <HAL_PCD_SetAddress>

    return;
 800a2f6:	e0f7      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00c      	beq.n	800a31c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a314:	b292      	uxth	r2, r2
 800a316:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a31a:	e0e5      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00c      	beq.n	800a340 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a32e:	b29a      	uxth	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a338:	b292      	uxth	r2, r2
 800a33a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a33e:	e0d3      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a346:	2b00      	cmp	r3, #0
 800a348:	d034      	beq.n	800a3b4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a352:	b29a      	uxth	r2, r3
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0204 	bic.w	r2, r2, #4
 800a35c:	b292      	uxth	r2, r2
 800a35e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 0208 	bic.w	r2, r2, #8
 800a374:	b292      	uxth	r2, r2
 800a376:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a380:	2b01      	cmp	r3, #1
 800a382:	d107      	bne.n	800a394 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a38c:	2100      	movs	r1, #0
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f00e fe08 	bl	8018fa4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f00e fc49 	bl	8018c2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a3a2:	b29a      	uxth	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a3ac:	b292      	uxth	r2, r2
 800a3ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a3b2:	e099      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d027      	beq.n	800a40e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f042 0208 	orr.w	r2, r2, #8
 800a3d0:	b292      	uxth	r2, r2
 800a3d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a3e8:	b292      	uxth	r2, r2
 800a3ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f042 0204 	orr.w	r2, r2, #4
 800a400:	b292      	uxth	r2, r2
 800a402:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f00e fbf6 	bl	8018bf8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a40c:	e06c      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a414:	2b00      	cmp	r3, #0
 800a416:	d040      	beq.n	800a49a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a420:	b29a      	uxth	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a42a:	b292      	uxth	r2, r2
 800a42c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a436:	2b00      	cmp	r3, #0
 800a438:	d12b      	bne.n	800a492 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a442:	b29a      	uxth	r2, r3
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f042 0204 	orr.w	r2, r2, #4
 800a44c:	b292      	uxth	r2, r2
 800a44e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f042 0208 	orr.w	r2, r2, #8
 800a464:	b292      	uxth	r2, r2
 800a466:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2201      	movs	r2, #1
 800a46e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	089b      	lsrs	r3, r3, #2
 800a47e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a488:	2101      	movs	r1, #1
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f00e fd8a 	bl	8018fa4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a490:	e02a      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f00e fbb0 	bl	8018bf8 <HAL_PCD_SuspendCallback>
    return;
 800a498:	e026      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00f      	beq.n	800a4c4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a4b6:	b292      	uxth	r2, r2
 800a4b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f00e fb6e 	bl	8018b9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a4c2:	e011      	b.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00c      	beq.n	800a4e8 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a4e0:	b292      	uxth	r2, r2
 800a4e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a4e6:	bf00      	nop
  }
}
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <HAL_PCD_SetAddress+0x1a>
 800a504:	2302      	movs	r3, #2
 800a506:	e012      	b.n	800a52e <HAL_PCD_SetAddress+0x40>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	78fa      	ldrb	r2, [r7, #3]
 800a514:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	78fa      	ldrb	r2, [r7, #3]
 800a51c:	4611      	mov	r1, r2
 800a51e:	4618      	mov	r0, r3
 800a520:	f008 fb68 	bl	8012bf4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
 800a53e:	4608      	mov	r0, r1
 800a540:	4611      	mov	r1, r2
 800a542:	461a      	mov	r2, r3
 800a544:	4603      	mov	r3, r0
 800a546:	70fb      	strb	r3, [r7, #3]
 800a548:	460b      	mov	r3, r1
 800a54a:	803b      	strh	r3, [r7, #0]
 800a54c:	4613      	mov	r3, r2
 800a54e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	da0e      	bge.n	800a57a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	f003 0207 	and.w	r2, r3, #7
 800a562:	4613      	mov	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	00db      	lsls	r3, r3, #3
 800a56a:	3310      	adds	r3, #16
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	4413      	add	r3, r2
 800a570:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	705a      	strb	r2, [r3, #1]
 800a578:	e00e      	b.n	800a598 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a57a:	78fb      	ldrb	r3, [r7, #3]
 800a57c:	f003 0207 	and.w	r2, r3, #7
 800a580:	4613      	mov	r3, r2
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	4413      	add	r3, r2
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	4413      	add	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a598:	78fb      	ldrb	r3, [r7, #3]
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a5a4:	883b      	ldrh	r3, [r7, #0]
 800a5a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	78ba      	ldrb	r2, [r7, #2]
 800a5b2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a5b4:	78bb      	ldrb	r3, [r7, #2]
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d102      	bne.n	800a5c0 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d101      	bne.n	800a5ce <HAL_PCD_EP_Open+0x98>
 800a5ca:	2302      	movs	r3, #2
 800a5cc:	e00e      	b.n	800a5ec <HAL_PCD_EP_Open+0xb6>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	68f9      	ldr	r1, [r7, #12]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f006 fd8b 	bl	80110f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a5ea:	7afb      	ldrb	r3, [r7, #11]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a604:	2b00      	cmp	r3, #0
 800a606:	da0e      	bge.n	800a626 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	f003 0207 	and.w	r2, r3, #7
 800a60e:	4613      	mov	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	4413      	add	r3, r2
 800a614:	00db      	lsls	r3, r3, #3
 800a616:	3310      	adds	r3, #16
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	4413      	add	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2201      	movs	r2, #1
 800a622:	705a      	strb	r2, [r3, #1]
 800a624:	e00e      	b.n	800a644 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a626:	78fb      	ldrb	r3, [r7, #3]
 800a628:	f003 0207 	and.w	r2, r3, #7
 800a62c:	4613      	mov	r3, r2
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	4413      	add	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a644:	78fb      	ldrb	r3, [r7, #3]
 800a646:	f003 0307 	and.w	r3, r3, #7
 800a64a:	b2da      	uxtb	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a656:	2b01      	cmp	r3, #1
 800a658:	d101      	bne.n	800a65e <HAL_PCD_EP_Close+0x6a>
 800a65a:	2302      	movs	r3, #2
 800a65c:	e00e      	b.n	800a67c <HAL_PCD_EP_Close+0x88>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68f9      	ldr	r1, [r7, #12]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f007 fa2b 	bl	8011ac8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2200      	movs	r2, #0
 800a676:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b086      	sub	sp, #24
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60f8      	str	r0, [r7, #12]
 800a68c:	607a      	str	r2, [r7, #4]
 800a68e:	603b      	str	r3, [r7, #0]
 800a690:	460b      	mov	r3, r1
 800a692:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a694:	7afb      	ldrb	r3, [r7, #11]
 800a696:	f003 0207 	and.w	r2, r3, #7
 800a69a:	4613      	mov	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	4413      	add	r3, r2
 800a6a0:	00db      	lsls	r3, r3, #3
 800a6a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	4413      	add	r3, r2
 800a6aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6c4:	7afb      	ldrb	r3, [r7, #11]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6979      	ldr	r1, [r7, #20]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f007 fbe3 	bl	8011ea2 <USB_EPStartXfer>

  return HAL_OK;
 800a6dc:	2300      	movs	r3, #0
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3718      	adds	r7, #24
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a6e6:	b480      	push	{r7}
 800a6e8:	b083      	sub	sp, #12
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a6f2:	78fb      	ldrb	r3, [r7, #3]
 800a6f4:	f003 0207 	and.w	r2, r3, #7
 800a6f8:	6879      	ldr	r1, [r7, #4]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	00db      	lsls	r3, r3, #3
 800a702:	440b      	add	r3, r1
 800a704:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a708:	681b      	ldr	r3, [r3, #0]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr

0800a716 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b086      	sub	sp, #24
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	60f8      	str	r0, [r7, #12]
 800a71e:	607a      	str	r2, [r7, #4]
 800a720:	603b      	str	r3, [r7, #0]
 800a722:	460b      	mov	r3, r1
 800a724:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a726:	7afb      	ldrb	r3, [r7, #11]
 800a728:	f003 0207 	and.w	r2, r3, #7
 800a72c:	4613      	mov	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4413      	add	r3, r2
 800a732:	00db      	lsls	r3, r3, #3
 800a734:	3310      	adds	r3, #16
 800a736:	68fa      	ldr	r2, [r7, #12]
 800a738:	4413      	add	r3, r2
 800a73a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	683a      	ldr	r2, [r7, #0]
 800a754:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2200      	movs	r2, #0
 800a75a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2201      	movs	r2, #1
 800a760:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a762:	7afb      	ldrb	r3, [r7, #11]
 800a764:	f003 0307 	and.w	r3, r3, #7
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	6979      	ldr	r1, [r7, #20]
 800a774:	4618      	mov	r0, r3
 800a776:	f007 fb94 	bl	8011ea2 <USB_EPStartXfer>

  return HAL_OK;
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3718      	adds	r7, #24
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
 800a78c:	460b      	mov	r3, r1
 800a78e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a790:	78fb      	ldrb	r3, [r7, #3]
 800a792:	f003 0307 	and.w	r3, r3, #7
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	7912      	ldrb	r2, [r2, #4]
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d901      	bls.n	800a7a2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e03e      	b.n	800a820 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a7a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	da0e      	bge.n	800a7c8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7aa:	78fb      	ldrb	r3, [r7, #3]
 800a7ac:	f003 0207 	and.w	r2, r3, #7
 800a7b0:	4613      	mov	r3, r2
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	00db      	lsls	r3, r3, #3
 800a7b8:	3310      	adds	r3, #16
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	4413      	add	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2201      	movs	r2, #1
 800a7c4:	705a      	strb	r2, [r3, #1]
 800a7c6:	e00c      	b.n	800a7e2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a7c8:	78fa      	ldrb	r2, [r7, #3]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	4413      	add	r3, r2
 800a7da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a7e8:	78fb      	ldrb	r3, [r7, #3]
 800a7ea:	f003 0307 	and.w	r3, r3, #7
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d101      	bne.n	800a802 <HAL_PCD_EP_SetStall+0x7e>
 800a7fe:	2302      	movs	r3, #2
 800a800:	e00e      	b.n	800a820 <HAL_PCD_EP_SetStall+0x9c>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68f9      	ldr	r1, [r7, #12]
 800a810:	4618      	mov	r0, r3
 800a812:	f008 f8f5 	bl	8012a00 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	460b      	mov	r3, r1
 800a832:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a834:	78fb      	ldrb	r3, [r7, #3]
 800a836:	f003 030f 	and.w	r3, r3, #15
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	7912      	ldrb	r2, [r2, #4]
 800a83e:	4293      	cmp	r3, r2
 800a840:	d901      	bls.n	800a846 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	e040      	b.n	800a8c8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	da0e      	bge.n	800a86c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a84e:	78fb      	ldrb	r3, [r7, #3]
 800a850:	f003 0207 	and.w	r2, r3, #7
 800a854:	4613      	mov	r3, r2
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	00db      	lsls	r3, r3, #3
 800a85c:	3310      	adds	r3, #16
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	4413      	add	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2201      	movs	r2, #1
 800a868:	705a      	strb	r2, [r3, #1]
 800a86a:	e00e      	b.n	800a88a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a86c:	78fb      	ldrb	r3, [r7, #3]
 800a86e:	f003 0207 	and.w	r2, r3, #7
 800a872:	4613      	mov	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	00db      	lsls	r3, r3, #3
 800a87a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	4413      	add	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2200      	movs	r2, #0
 800a888:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a890:	78fb      	ldrb	r3, [r7, #3]
 800a892:	f003 0307 	and.w	r3, r3, #7
 800a896:	b2da      	uxtb	r2, r3
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	d101      	bne.n	800a8aa <HAL_PCD_EP_ClrStall+0x82>
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	e00e      	b.n	800a8c8 <HAL_PCD_EP_ClrStall+0xa0>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f008 f8f2 	bl	8012aa2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b092      	sub	sp, #72	@ 0x48
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a8d8:	e333      	b.n	800af42 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a8e2:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a8e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	f003 030f 	and.w	r3, r3, #15
 800a8ec:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a8f0:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f040 8108 	bne.w	800ab0a <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a8fa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a8fc:	f003 0310 	and.w	r3, r3, #16
 800a900:	2b00      	cmp	r3, #0
 800a902:	d14c      	bne.n	800a99e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a914:	813b      	strh	r3, [r7, #8]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	893b      	ldrh	r3, [r7, #8]
 800a91c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a924:	b29b      	uxth	r3, r3
 800a926:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3310      	adds	r3, #16
 800a92c:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a936:	b29b      	uxth	r3, r3
 800a938:	461a      	mov	r2, r3
 800a93a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	4413      	add	r3, r2
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6812      	ldr	r2, [r2, #0]
 800a946:	4413      	add	r3, r2
 800a948:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a94c:	881b      	ldrh	r3, [r3, #0]
 800a94e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a954:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a958:	695a      	ldr	r2, [r3, #20]
 800a95a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	441a      	add	r2, r3
 800a960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a962:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a964:	2100      	movs	r1, #0
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f00e f8ff 	bl	8018b6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	7b1b      	ldrb	r3, [r3, #12]
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 82e5 	beq.w	800af42 <PCD_EP_ISR_Handler+0x672>
 800a978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f040 82e0 	bne.w	800af42 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	7b1b      	ldrb	r3, [r3, #12]
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a98c:	b2da      	uxtb	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	731a      	strb	r2, [r3, #12]
 800a99c:	e2d1      	b.n	800af42 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a9a4:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	881b      	ldrh	r3, [r3, #0]
 800a9ac:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a9ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a9b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d032      	beq.n	800aa1e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	00db      	lsls	r3, r3, #3
 800a9ca:	4413      	add	r3, r2
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	6812      	ldr	r2, [r2, #0]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a9dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9de:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800a9ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9ec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9f0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f008 f97b 	bl	8012cee <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	881b      	ldrh	r3, [r3, #0]
 800a9fe:	b29a      	uxth	r2, r3
 800aa00:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800aa04:	4013      	ands	r3, r2
 800aa06:	817b      	strh	r3, [r7, #10]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	897a      	ldrh	r2, [r7, #10]
 800aa0e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aa12:	b292      	uxth	r2, r2
 800aa14:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f00e f87a 	bl	8018b10 <HAL_PCD_SetupStageCallback>
 800aa1c:	e291      	b.n	800af42 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800aa1e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f280 828d 	bge.w	800af42 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800aa34:	4013      	ands	r3, r2
 800aa36:	81fb      	strh	r3, [r7, #14]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	89fa      	ldrh	r2, [r7, #14]
 800aa3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aa42:	b292      	uxth	r2, r2
 800aa44:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	461a      	mov	r2, r3
 800aa52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	4413      	add	r3, r2
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	6812      	ldr	r2, [r2, #0]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa64:	881b      	ldrh	r3, [r3, #0]
 800aa66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aa6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa6c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800aa6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa70:	69db      	ldr	r3, [r3, #28]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d019      	beq.n	800aaaa <PCD_EP_ISR_Handler+0x1da>
 800aa76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa78:	695b      	ldr	r3, [r3, #20]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d015      	beq.n	800aaaa <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6818      	ldr	r0, [r3, #0]
 800aa82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa84:	6959      	ldr	r1, [r3, #20]
 800aa86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa88:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800aa8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa8c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	f008 f92d 	bl	8012cee <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800aa94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa96:	695a      	ldr	r2, [r3, #20]
 800aa98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa9a:	69db      	ldr	r3, [r3, #28]
 800aa9c:	441a      	add	r2, r3
 800aa9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aaa0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f00e f845 	bl	8018b34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800aab2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f040 8242 	bne.w	800af42 <PCD_EP_ISR_Handler+0x672>
 800aabe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aac0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800aac4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aac8:	f000 823b 	beq.w	800af42 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aadc:	81bb      	strh	r3, [r7, #12]
 800aade:	89bb      	ldrh	r3, [r7, #12]
 800aae0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aae4:	81bb      	strh	r3, [r7, #12]
 800aae6:	89bb      	ldrh	r3, [r7, #12]
 800aae8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aaec:	81bb      	strh	r3, [r7, #12]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	89bb      	ldrh	r3, [r7, #12]
 800aaf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aafc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	8013      	strh	r3, [r2, #0]
 800ab08:	e21b      	b.n	800af42 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ab14:	009b      	lsls	r3, r3, #2
 800ab16:	4413      	add	r3, r2
 800ab18:	881b      	ldrh	r3, [r3, #0]
 800ab1a:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800ab1c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f280 80f1 	bge.w	800ad08 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800ab3c:	4013      	ands	r3, r2
 800ab3e:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	461a      	mov	r2, r3
 800ab46:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ab50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ab54:	b292      	uxth	r2, r2
 800ab56:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800ab58:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ab6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab70:	7b1b      	ldrb	r3, [r3, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d123      	bne.n	800abbe <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab7e:	b29b      	uxth	r3, r3
 800ab80:	461a      	mov	r2, r3
 800ab82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	4413      	add	r3, r2
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	6812      	ldr	r2, [r2, #0]
 800ab8e:	4413      	add	r3, r2
 800ab90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab9a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800ab9e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f000 808b 	beq.w	800acbe <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abae:	6959      	ldr	r1, [r3, #20]
 800abb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abb2:	88da      	ldrh	r2, [r3, #6]
 800abb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800abb8:	f008 f899 	bl	8012cee <USB_ReadPMA>
 800abbc:	e07f      	b.n	800acbe <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800abbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abc0:	78db      	ldrb	r3, [r3, #3]
 800abc2:	2b02      	cmp	r3, #2
 800abc4:	d109      	bne.n	800abda <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800abc6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800abc8:	461a      	mov	r2, r3
 800abca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f9c6 	bl	800af5e <HAL_PCD_EP_DB_Receive>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800abd8:	e071      	b.n	800acbe <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	009b      	lsls	r3, r3, #2
 800abe6:	4413      	add	r3, r2
 800abe8:	881b      	ldrh	r3, [r3, #0]
 800abea:	b29b      	uxth	r3, r3
 800abec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abf4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	441a      	add	r2, r3
 800ac04:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800ac06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	881b      	ldrh	r3, [r3, #0]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d022      	beq.n	800ac7a <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	461a      	mov	r2, r3
 800ac40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	4413      	add	r3, r2
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	6812      	ldr	r2, [r2, #0]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac52:	881b      	ldrh	r3, [r3, #0]
 800ac54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac58:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ac5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d02c      	beq.n	800acbe <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac6a:	6959      	ldr	r1, [r3, #20]
 800ac6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac6e:	891a      	ldrh	r2, [r3, #8]
 800ac70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac74:	f008 f83b 	bl	8012cee <USB_ReadPMA>
 800ac78:	e021      	b.n	800acbe <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	461a      	mov	r2, r3
 800ac86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	4413      	add	r3, r2
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	6812      	ldr	r2, [r2, #0]
 800ac92:	4413      	add	r3, r2
 800ac94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac9e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800aca2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d009      	beq.n	800acbe <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6818      	ldr	r0, [r3, #0]
 800acae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb0:	6959      	ldr	r1, [r3, #20]
 800acb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acb4:	895a      	ldrh	r2, [r3, #10]
 800acb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800acba:	f008 f818 	bl	8012cee <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800acbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acc0:	69da      	ldr	r2, [r3, #28]
 800acc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800acc6:	441a      	add	r2, r3
 800acc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800accc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acce:	695a      	ldr	r2, [r3, #20]
 800acd0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800acd4:	441a      	add	r2, r3
 800acd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acd8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800acda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d005      	beq.n	800acee <PCD_EP_ISR_Handler+0x41e>
 800ace2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ace6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	429a      	cmp	r2, r3
 800acec:	d206      	bcs.n	800acfc <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800acee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	4619      	mov	r1, r3
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f00d ff1d 	bl	8018b34 <HAL_PCD_DataOutStageCallback>
 800acfa:	e005      	b.n	800ad08 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ad02:	4618      	mov	r0, r3
 800ad04:	f007 f8cd 	bl	8011ea2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800ad08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 8117 	beq.w	800af42 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800ad14:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800ad18:	4613      	mov	r3, r2
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	4413      	add	r3, r2
 800ad1e:	00db      	lsls	r3, r3, #3
 800ad20:	3310      	adds	r3, #16
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	4413      	add	r3, r2
 800ad26:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	4413      	add	r3, r2
 800ad36:	881b      	ldrh	r3, [r3, #0]
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800ad3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad42:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	461a      	mov	r2, r3
 800ad4a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	441a      	add	r2, r3
 800ad52:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800ad54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800ad60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad62:	78db      	ldrb	r3, [r3, #3]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	f040 80a1 	bne.w	800aeac <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800ad6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ad70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad72:	7b1b      	ldrb	r3, [r3, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	f000 8092 	beq.w	800ae9e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ad7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d046      	beq.n	800ae12 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ad84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad86:	785b      	ldrb	r3, [r3, #1]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d126      	bne.n	800adda <PCD_EP_ISR_Handler+0x50a>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	617b      	str	r3, [r7, #20]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	4413      	add	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]
 800ada4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	00da      	lsls	r2, r3, #3
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	4413      	add	r3, r2
 800adae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800adb2:	613b      	str	r3, [r7, #16]
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	881b      	ldrh	r3, [r3, #0]
 800adb8:	b29b      	uxth	r3, r3
 800adba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adbe:	b29a      	uxth	r2, r3
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	801a      	strh	r2, [r3, #0]
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	881b      	ldrh	r3, [r3, #0]
 800adc8:	b29b      	uxth	r3, r3
 800adca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800add2:	b29a      	uxth	r2, r3
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	801a      	strh	r2, [r3, #0]
 800add8:	e061      	b.n	800ae9e <PCD_EP_ISR_Handler+0x5ce>
 800adda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800addc:	785b      	ldrb	r3, [r3, #1]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d15d      	bne.n	800ae9e <PCD_EP_ISR_Handler+0x5ce>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	61fb      	str	r3, [r7, #28]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	461a      	mov	r2, r3
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	4413      	add	r3, r2
 800adf8:	61fb      	str	r3, [r7, #28]
 800adfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	00da      	lsls	r2, r3, #3
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	4413      	add	r3, r2
 800ae04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae08:	61bb      	str	r3, [r7, #24]
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	801a      	strh	r2, [r3, #0]
 800ae10:	e045      	b.n	800ae9e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae1a:	785b      	ldrb	r3, [r3, #1]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d126      	bne.n	800ae6e <PCD_EP_ISR_Handler+0x59e>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae34:	4413      	add	r3, r2
 800ae36:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	00da      	lsls	r2, r3, #3
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae40:	4413      	add	r3, r2
 800ae42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae46:	623b      	str	r3, [r7, #32]
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	801a      	strh	r2, [r3, #0]
 800ae58:	6a3b      	ldr	r3, [r7, #32]
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	6a3b      	ldr	r3, [r7, #32]
 800ae6a:	801a      	strh	r2, [r3, #0]
 800ae6c:	e017      	b.n	800ae9e <PCD_EP_ISR_Handler+0x5ce>
 800ae6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d113      	bne.n	800ae9e <PCD_EP_ISR_Handler+0x5ce>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	461a      	mov	r2, r3
 800ae82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae84:	4413      	add	r3, r2
 800ae86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	00da      	lsls	r2, r3, #3
 800ae8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae90:	4413      	add	r3, r2
 800ae92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae96:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ae9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f00d fe60 	bl	8018b6a <HAL_PCD_DataInStageCallback>
 800aeaa:	e04a      	b.n	800af42 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800aeac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d13f      	bne.n	800af36 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	461a      	mov	r2, r3
 800aec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	4413      	add	r3, r2
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	6812      	ldr	r2, [r2, #0]
 800aece:	4413      	add	r3, r2
 800aed0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aeda:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800aedc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aede:	699a      	ldr	r2, [r3, #24]
 800aee0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d906      	bls.n	800aef4 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800aee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aee8:	699a      	ldr	r2, [r3, #24]
 800aeea:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aeec:	1ad2      	subs	r2, r2, r3
 800aeee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef0:	619a      	str	r2, [r3, #24]
 800aef2:	e002      	b.n	800aefa <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800aef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef6:	2200      	movs	r2, #0
 800aef8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800aefa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aefc:	699b      	ldr	r3, [r3, #24]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d106      	bne.n	800af10 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	4619      	mov	r1, r3
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f00d fe2e 	bl	8018b6a <HAL_PCD_DataInStageCallback>
 800af0e:	e018      	b.n	800af42 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800af10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af12:	695a      	ldr	r2, [r3, #20]
 800af14:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800af16:	441a      	add	r2, r3
 800af18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af1a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800af1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af1e:	69da      	ldr	r2, [r3, #28]
 800af20:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800af22:	441a      	add	r2, r3
 800af24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af26:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af2e:	4618      	mov	r0, r3
 800af30:	f006 ffb7 	bl	8011ea2 <USB_EPStartXfer>
 800af34:	e005      	b.n	800af42 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800af36:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800af38:	461a      	mov	r2, r3
 800af3a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f917 	bl	800b170 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	b21b      	sxth	r3, r3
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f6ff acc3 	blt.w	800a8da <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3748      	adds	r7, #72	@ 0x48
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800af5e:	b580      	push	{r7, lr}
 800af60:	b088      	sub	sp, #32
 800af62:	af00      	add	r7, sp, #0
 800af64:	60f8      	str	r0, [r7, #12]
 800af66:	60b9      	str	r1, [r7, #8]
 800af68:	4613      	mov	r3, r2
 800af6a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af72:	2b00      	cmp	r3, #0
 800af74:	d07c      	beq.n	800b070 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af7e:	b29b      	uxth	r3, r3
 800af80:	461a      	mov	r2, r3
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	00db      	lsls	r3, r3, #3
 800af88:	4413      	add	r3, r2
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	6812      	ldr	r2, [r2, #0]
 800af8e:	4413      	add	r3, r2
 800af90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	699a      	ldr	r2, [r3, #24]
 800afa0:	8b7b      	ldrh	r3, [r7, #26]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d306      	bcc.n	800afb4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	699a      	ldr	r2, [r3, #24]
 800afaa:	8b7b      	ldrh	r3, [r7, #26]
 800afac:	1ad2      	subs	r2, r2, r3
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	619a      	str	r2, [r3, #24]
 800afb2:	e002      	b.n	800afba <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	2200      	movs	r2, #0
 800afb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d123      	bne.n	800b00a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	461a      	mov	r2, r3
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	881b      	ldrh	r3, [r3, #0]
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afdc:	833b      	strh	r3, [r7, #24]
 800afde:	8b3b      	ldrh	r3, [r7, #24]
 800afe0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800afe4:	833b      	strh	r3, [r7, #24]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	461a      	mov	r2, r3
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	441a      	add	r2, r3
 800aff4:	8b3b      	ldrh	r3, [r7, #24]
 800aff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800affa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800affe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b006:	b29b      	uxth	r3, r3
 800b008:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b00a:	88fb      	ldrh	r3, [r7, #6]
 800b00c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b010:	2b00      	cmp	r3, #0
 800b012:	d01f      	beq.n	800b054 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	461a      	mov	r2, r3
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	881b      	ldrh	r3, [r3, #0]
 800b024:	b29b      	uxth	r3, r3
 800b026:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b02a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b02e:	82fb      	strh	r3, [r7, #22]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	461a      	mov	r2, r3
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	009b      	lsls	r3, r3, #2
 800b03c:	441a      	add	r2, r3
 800b03e:	8afb      	ldrh	r3, [r7, #22]
 800b040:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b044:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b04c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b050:	b29b      	uxth	r3, r3
 800b052:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b054:	8b7b      	ldrh	r3, [r7, #26]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 8085 	beq.w	800b166 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6818      	ldr	r0, [r3, #0]
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	6959      	ldr	r1, [r3, #20]
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	891a      	ldrh	r2, [r3, #8]
 800b068:	8b7b      	ldrh	r3, [r7, #26]
 800b06a:	f007 fe40 	bl	8012cee <USB_ReadPMA>
 800b06e:	e07a      	b.n	800b166 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b078:	b29b      	uxth	r3, r3
 800b07a:	461a      	mov	r2, r3
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	00db      	lsls	r3, r3, #3
 800b082:	4413      	add	r3, r2
 800b084:	68fa      	ldr	r2, [r7, #12]
 800b086:	6812      	ldr	r2, [r2, #0]
 800b088:	4413      	add	r3, r2
 800b08a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b094:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	699a      	ldr	r2, [r3, #24]
 800b09a:	8b7b      	ldrh	r3, [r7, #26]
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d306      	bcc.n	800b0ae <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	699a      	ldr	r2, [r3, #24]
 800b0a4:	8b7b      	ldrh	r3, [r7, #26]
 800b0a6:	1ad2      	subs	r2, r2, r3
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	619a      	str	r2, [r3, #24]
 800b0ac:	e002      	b.n	800b0b4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	699b      	ldr	r3, [r3, #24]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d123      	bne.n	800b104 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	4413      	add	r3, r2
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b0d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0d6:	83fb      	strh	r3, [r7, #30]
 800b0d8:	8bfb      	ldrh	r3, [r7, #30]
 800b0da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b0de:	83fb      	strh	r3, [r7, #30]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	441a      	add	r2, r3
 800b0ee:	8bfb      	ldrh	r3, [r7, #30]
 800b0f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b100:	b29b      	uxth	r3, r3
 800b102:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b104:	88fb      	ldrh	r3, [r7, #6]
 800b106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d11f      	bne.n	800b14e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	461a      	mov	r2, r3
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	881b      	ldrh	r3, [r3, #0]
 800b11e:	b29b      	uxth	r3, r3
 800b120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b128:	83bb      	strh	r3, [r7, #28]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	461a      	mov	r2, r3
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	441a      	add	r2, r3
 800b138:	8bbb      	ldrh	r3, [r7, #28]
 800b13a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b13e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b146:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b14e:	8b7b      	ldrh	r3, [r7, #26]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d008      	beq.n	800b166 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6818      	ldr	r0, [r3, #0]
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	6959      	ldr	r1, [r3, #20]
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	895a      	ldrh	r2, [r3, #10]
 800b160:	8b7b      	ldrh	r3, [r7, #26]
 800b162:	f007 fdc4 	bl	8012cee <USB_ReadPMA>
    }
  }

  return count;
 800b166:	8b7b      	ldrh	r3, [r7, #26]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3720      	adds	r7, #32
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b0a6      	sub	sp, #152	@ 0x98
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	4613      	mov	r3, r2
 800b17c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b17e:	88fb      	ldrh	r3, [r7, #6]
 800b180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b184:	2b00      	cmp	r3, #0
 800b186:	f000 81f7 	beq.w	800b578 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b192:	b29b      	uxth	r3, r3
 800b194:	461a      	mov	r2, r3
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	00db      	lsls	r3, r3, #3
 800b19c:	4413      	add	r3, r2
 800b19e:	68fa      	ldr	r2, [r7, #12]
 800b1a0:	6812      	ldr	r2, [r2, #0]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1ae:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d907      	bls.n	800b1ce <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	699a      	ldr	r2, [r3, #24]
 800b1c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b1c6:	1ad2      	subs	r2, r2, r3
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	619a      	str	r2, [r3, #24]
 800b1cc:	e002      	b.n	800b1d4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f040 80e1 	bne.w	800b3a0 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	785b      	ldrb	r3, [r3, #1]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d126      	bne.n	800b234 <HAL_PCD_EP_DB_Transmit+0xc4>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fa:	4413      	add	r3, r2
 800b1fc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	00da      	lsls	r2, r3, #3
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	4413      	add	r3, r2
 800b208:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b20c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b210:	881b      	ldrh	r3, [r3, #0]
 800b212:	b29b      	uxth	r3, r3
 800b214:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b218:	b29a      	uxth	r2, r3
 800b21a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b21c:	801a      	strh	r2, [r3, #0]
 800b21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b220:	881b      	ldrh	r3, [r3, #0]
 800b222:	b29b      	uxth	r3, r3
 800b224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b230:	801a      	strh	r2, [r3, #0]
 800b232:	e01a      	b.n	800b26a <HAL_PCD_EP_DB_Transmit+0xfa>
 800b234:	68bb      	ldr	r3, [r7, #8]
 800b236:	785b      	ldrb	r3, [r3, #1]
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d116      	bne.n	800b26a <HAL_PCD_EP_DB_Transmit+0xfa>
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	461a      	mov	r2, r3
 800b24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b250:	4413      	add	r3, r2
 800b252:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	00da      	lsls	r2, r3, #3
 800b25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25c:	4413      	add	r3, r2
 800b25e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b262:	637b      	str	r3, [r7, #52]	@ 0x34
 800b264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b266:	2200      	movs	r2, #0
 800b268:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	785b      	ldrb	r3, [r3, #1]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d126      	bne.n	800b2c6 <HAL_PCD_EP_DB_Transmit+0x156>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	623b      	str	r3, [r7, #32]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b286:	b29b      	uxth	r3, r3
 800b288:	461a      	mov	r2, r3
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	4413      	add	r3, r2
 800b28e:	623b      	str	r3, [r7, #32]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	781b      	ldrb	r3, [r3, #0]
 800b294:	00da      	lsls	r2, r3, #3
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	4413      	add	r3, r2
 800b29a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b29e:	61fb      	str	r3, [r7, #28]
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	881b      	ldrh	r3, [r3, #0]
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	801a      	strh	r2, [r3, #0]
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	881b      	ldrh	r3, [r3, #0]
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	69fb      	ldr	r3, [r7, #28]
 800b2c2:	801a      	strh	r2, [r3, #0]
 800b2c4:	e017      	b.n	800b2f6 <HAL_PCD_EP_DB_Transmit+0x186>
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	785b      	ldrb	r3, [r3, #1]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d113      	bne.n	800b2f6 <HAL_PCD_EP_DB_Transmit+0x186>
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	461a      	mov	r2, r3
 800b2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2dc:	4413      	add	r3, r2
 800b2de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	00da      	lsls	r2, r3, #3
 800b2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b2ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	78db      	ldrb	r3, [r3, #3]
 800b2fa:	2b02      	cmp	r3, #2
 800b2fc:	d123      	bne.n	800b346 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	461a      	mov	r2, r3
 800b304:	68bb      	ldr	r3, [r7, #8]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	4413      	add	r3, r2
 800b30c:	881b      	ldrh	r3, [r3, #0]
 800b30e:	b29b      	uxth	r3, r3
 800b310:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b314:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b318:	837b      	strh	r3, [r7, #26]
 800b31a:	8b7b      	ldrh	r3, [r7, #26]
 800b31c:	f083 0320 	eor.w	r3, r3, #32
 800b320:	837b      	strh	r3, [r7, #26]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	441a      	add	r2, r3
 800b330:	8b7b      	ldrh	r3, [r7, #26]
 800b332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b33a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b342:	b29b      	uxth	r3, r3
 800b344:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	4619      	mov	r1, r3
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f00d fc0c 	bl	8018b6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b352:	88fb      	ldrh	r3, [r7, #6]
 800b354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d01f      	beq.n	800b39c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	461a      	mov	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	881b      	ldrh	r3, [r3, #0]
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b376:	833b      	strh	r3, [r7, #24]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	461a      	mov	r2, r3
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	441a      	add	r2, r3
 800b386:	8b3b      	ldrh	r3, [r7, #24]
 800b388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b38c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b390:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b398:	b29b      	uxth	r3, r3
 800b39a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b39c:	2300      	movs	r3, #0
 800b39e:	e31f      	b.n	800b9e0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b3a0:	88fb      	ldrh	r3, [r7, #6]
 800b3a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d021      	beq.n	800b3ee <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4413      	add	r3, r2
 800b3b8:	881b      	ldrh	r3, [r3, #0]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3c4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	441a      	add	r2, r3
 800b3d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b3da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b3de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b3e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b3e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	f040 82ca 	bne.w	800b98e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	695a      	ldr	r2, [r3, #20]
 800b3fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b402:	441a      	add	r2, r3
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	69da      	ldr	r2, [r3, #28]
 800b40c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b410:	441a      	add	r2, r3
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	6a1a      	ldr	r2, [r3, #32]
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	691b      	ldr	r3, [r3, #16]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d309      	bcc.n	800b436 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	6a1a      	ldr	r2, [r3, #32]
 800b42c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b42e:	1ad2      	subs	r2, r2, r3
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	621a      	str	r2, [r3, #32]
 800b434:	e015      	b.n	800b462 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	6a1b      	ldr	r3, [r3, #32]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d107      	bne.n	800b44e <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b43e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b442:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	2200      	movs	r2, #0
 800b448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b44c:	e009      	b.n	800b462 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	2200      	movs	r2, #0
 800b452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2200      	movs	r2, #0
 800b460:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	785b      	ldrb	r3, [r3, #1]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d15f      	bne.n	800b52a <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b478:	b29b      	uxth	r3, r3
 800b47a:	461a      	mov	r2, r3
 800b47c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b47e:	4413      	add	r3, r2
 800b480:	643b      	str	r3, [r7, #64]	@ 0x40
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	00da      	lsls	r2, r3, #3
 800b488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b48a:	4413      	add	r3, r2
 800b48c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	b29b      	uxth	r3, r3
 800b498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a0:	801a      	strh	r2, [r3, #0]
 800b4a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10a      	bne.n	800b4be <HAL_PCD_EP_DB_Transmit+0x34e>
 800b4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4aa:	881b      	ldrh	r3, [r3, #0]
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ba:	801a      	strh	r2, [r3, #0]
 800b4bc:	e051      	b.n	800b562 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b4be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800b4c2:	d816      	bhi.n	800b4f2 <HAL_PCD_EP_DB_Transmit+0x382>
 800b4c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4c6:	085b      	lsrs	r3, r3, #1
 800b4c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4cc:	f003 0301 	and.w	r3, r3, #1
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <HAL_PCD_EP_DB_Transmit+0x36a>
 800b4d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4dc:	881b      	ldrh	r3, [r3, #0]
 800b4de:	b29a      	uxth	r2, r3
 800b4e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	029b      	lsls	r3, r3, #10
 800b4e6:	b29b      	uxth	r3, r3
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4ee:	801a      	strh	r2, [r3, #0]
 800b4f0:	e037      	b.n	800b562 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b4f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4f4:	095b      	lsrs	r3, r3, #5
 800b4f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4fa:	f003 031f 	and.w	r3, r3, #31
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d102      	bne.n	800b508 <HAL_PCD_EP_DB_Transmit+0x398>
 800b502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b504:	3b01      	subs	r3, #1
 800b506:	653b      	str	r3, [r7, #80]	@ 0x50
 800b508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b50a:	881b      	ldrh	r3, [r3, #0]
 800b50c:	b29a      	uxth	r2, r3
 800b50e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b510:	b29b      	uxth	r3, r3
 800b512:	029b      	lsls	r3, r3, #10
 800b514:	b29b      	uxth	r3, r3
 800b516:	4313      	orrs	r3, r2
 800b518:	b29b      	uxth	r3, r3
 800b51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b522:	b29a      	uxth	r2, r3
 800b524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b526:	801a      	strh	r2, [r3, #0]
 800b528:	e01b      	b.n	800b562 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	785b      	ldrb	r3, [r3, #1]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d117      	bne.n	800b562 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b540:	b29b      	uxth	r3, r3
 800b542:	461a      	mov	r2, r3
 800b544:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b546:	4413      	add	r3, r2
 800b548:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	00da      	lsls	r2, r3, #3
 800b550:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b552:	4413      	add	r3, r2
 800b554:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b558:	647b      	str	r3, [r7, #68]	@ 0x44
 800b55a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b560:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6818      	ldr	r0, [r3, #0]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	6959      	ldr	r1, [r3, #20]
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	891a      	ldrh	r2, [r3, #8]
 800b56e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b570:	b29b      	uxth	r3, r3
 800b572:	f007 fb7a 	bl	8012c6a <USB_WritePMA>
 800b576:	e20a      	b.n	800b98e <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b580:	b29b      	uxth	r3, r3
 800b582:	461a      	mov	r2, r3
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	4413      	add	r3, r2
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	6812      	ldr	r2, [r2, #0]
 800b590:	4413      	add	r3, r2
 800b592:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b59c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	699a      	ldr	r2, [r3, #24]
 800b5a4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d307      	bcc.n	800b5bc <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	699a      	ldr	r2, [r3, #24]
 800b5b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5b4:	1ad2      	subs	r2, r2, r3
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	619a      	str	r2, [r3, #24]
 800b5ba:	e002      	b.n	800b5c2 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	699b      	ldr	r3, [r3, #24]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f040 80f6 	bne.w	800b7b8 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	785b      	ldrb	r3, [r3, #1]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d126      	bne.n	800b622 <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	677b      	str	r3, [r7, #116]	@ 0x74
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5e8:	4413      	add	r3, r2
 800b5ea:	677b      	str	r3, [r7, #116]	@ 0x74
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	00da      	lsls	r2, r3, #3
 800b5f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5f4:	4413      	add	r3, r2
 800b5f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b5fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5fe:	881b      	ldrh	r3, [r3, #0]
 800b600:	b29b      	uxth	r3, r3
 800b602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b606:	b29a      	uxth	r2, r3
 800b608:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b60a:	801a      	strh	r2, [r3, #0]
 800b60c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b60e:	881b      	ldrh	r3, [r3, #0]
 800b610:	b29b      	uxth	r3, r3
 800b612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b61e:	801a      	strh	r2, [r3, #0]
 800b620:	e01a      	b.n	800b658 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	785b      	ldrb	r3, [r3, #1]
 800b626:	2b01      	cmp	r3, #1
 800b628:	d116      	bne.n	800b658 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b638:	b29b      	uxth	r3, r3
 800b63a:	461a      	mov	r2, r3
 800b63c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b63e:	4413      	add	r3, r2
 800b640:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	00da      	lsls	r2, r3, #3
 800b648:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b64a:	4413      	add	r3, r2
 800b64c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b650:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b652:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b654:	2200      	movs	r2, #0
 800b656:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	785b      	ldrb	r3, [r3, #1]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d12f      	bne.n	800b6c8 <HAL_PCD_EP_DB_Transmit+0x558>
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b678:	b29b      	uxth	r3, r3
 800b67a:	461a      	mov	r2, r3
 800b67c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b680:	4413      	add	r3, r2
 800b682:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	00da      	lsls	r2, r3, #3
 800b68c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b690:	4413      	add	r3, r2
 800b692:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b696:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b69a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b69e:	881b      	ldrh	r3, [r3, #0]
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b6ac:	801a      	strh	r2, [r3, #0]
 800b6ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b6b2:	881b      	ldrh	r3, [r3, #0]
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b6c4:	801a      	strh	r2, [r3, #0]
 800b6c6:	e01c      	b.n	800b702 <HAL_PCD_EP_DB_Transmit+0x592>
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	785b      	ldrb	r3, [r3, #1]
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d118      	bne.n	800b702 <HAL_PCD_EP_DB_Transmit+0x592>
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	00da      	lsls	r2, r3, #3
 800b6ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b6f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b6fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b6fe:	2200      	movs	r2, #0
 800b700:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	78db      	ldrb	r3, [r3, #3]
 800b706:	2b02      	cmp	r3, #2
 800b708:	d127      	bne.n	800b75a <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	461a      	mov	r2, r3
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	4413      	add	r3, r2
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b724:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b728:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b72c:	f083 0320 	eor.w	r3, r3, #32
 800b730:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	461a      	mov	r2, r3
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	441a      	add	r2, r3
 800b742:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b74a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b74e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b756:	b29b      	uxth	r3, r3
 800b758:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	4619      	mov	r1, r3
 800b760:	68f8      	ldr	r0, [r7, #12]
 800b762:	f00d fa02 	bl	8018b6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b766:	88fb      	ldrh	r3, [r7, #6]
 800b768:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d121      	bne.n	800b7b4 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	461a      	mov	r2, r3
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	4413      	add	r3, r2
 800b77e:	881b      	ldrh	r3, [r3, #0]
 800b780:	b29b      	uxth	r3, r3
 800b782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b78a:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	461a      	mov	r2, r3
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	441a      	add	r2, r3
 800b79c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b7a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b7ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e113      	b.n	800b9e0 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b7b8:	88fb      	ldrh	r3, [r7, #6]
 800b7ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d121      	bne.n	800b806 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	009b      	lsls	r3, r3, #2
 800b7ce:	4413      	add	r3, r2
 800b7d0:	881b      	ldrh	r3, [r3, #0]
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b7d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7dc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	441a      	add	r2, r3
 800b7ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b7f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b7fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b802:	b29b      	uxth	r3, r3
 800b804:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	f040 80be 	bne.w	800b98e <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	695a      	ldr	r2, [r3, #20]
 800b816:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b81a:	441a      	add	r2, r3
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	69da      	ldr	r2, [r3, #28]
 800b824:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b828:	441a      	add	r2, r3
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	6a1a      	ldr	r2, [r3, #32]
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	429a      	cmp	r2, r3
 800b838:	d309      	bcc.n	800b84e <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	6a1a      	ldr	r2, [r3, #32]
 800b844:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b846:	1ad2      	subs	r2, r2, r3
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	621a      	str	r2, [r3, #32]
 800b84c:	e015      	b.n	800b87a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d107      	bne.n	800b866 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b856:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b85a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2200      	movs	r2, #0
 800b860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b864:	e009      	b.n	800b87a <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	2200      	movs	r2, #0
 800b870:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	2200      	movs	r2, #0
 800b876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	785b      	ldrb	r3, [r3, #1]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d15f      	bne.n	800b948 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b896:	b29b      	uxth	r3, r3
 800b898:	461a      	mov	r2, r3
 800b89a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b89c:	4413      	add	r3, r2
 800b89e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	00da      	lsls	r2, r3, #3
 800b8a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b8ae:	667b      	str	r3, [r7, #100]	@ 0x64
 800b8b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8b2:	881b      	ldrh	r3, [r3, #0]
 800b8b4:	b29b      	uxth	r3, r3
 800b8b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8ba:	b29a      	uxth	r2, r3
 800b8bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8be:	801a      	strh	r2, [r3, #0]
 800b8c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10a      	bne.n	800b8dc <HAL_PCD_EP_DB_Transmit+0x76c>
 800b8c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8c8:	881b      	ldrh	r3, [r3, #0]
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8d8:	801a      	strh	r2, [r3, #0]
 800b8da:	e04e      	b.n	800b97a <HAL_PCD_EP_DB_Transmit+0x80a>
 800b8dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8de:	2b3e      	cmp	r3, #62	@ 0x3e
 800b8e0:	d816      	bhi.n	800b910 <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b8e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8e4:	085b      	lsrs	r3, r3, #1
 800b8e6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <HAL_PCD_EP_DB_Transmit+0x788>
 800b8f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8fa:	881b      	ldrh	r3, [r3, #0]
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b900:	b29b      	uxth	r3, r3
 800b902:	029b      	lsls	r3, r3, #10
 800b904:	b29b      	uxth	r3, r3
 800b906:	4313      	orrs	r3, r2
 800b908:	b29a      	uxth	r2, r3
 800b90a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b90c:	801a      	strh	r2, [r3, #0]
 800b90e:	e034      	b.n	800b97a <HAL_PCD_EP_DB_Transmit+0x80a>
 800b910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b912:	095b      	lsrs	r3, r3, #5
 800b914:	663b      	str	r3, [r7, #96]	@ 0x60
 800b916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b918:	f003 031f 	and.w	r3, r3, #31
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d102      	bne.n	800b926 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b920:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b922:	3b01      	subs	r3, #1
 800b924:	663b      	str	r3, [r7, #96]	@ 0x60
 800b926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b928:	881b      	ldrh	r3, [r3, #0]
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b92e:	b29b      	uxth	r3, r3
 800b930:	029b      	lsls	r3, r3, #10
 800b932:	b29b      	uxth	r3, r3
 800b934:	4313      	orrs	r3, r2
 800b936:	b29b      	uxth	r3, r3
 800b938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b93c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b940:	b29a      	uxth	r2, r3
 800b942:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b944:	801a      	strh	r2, [r3, #0]
 800b946:	e018      	b.n	800b97a <HAL_PCD_EP_DB_Transmit+0x80a>
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	785b      	ldrb	r3, [r3, #1]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d114      	bne.n	800b97a <HAL_PCD_EP_DB_Transmit+0x80a>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b958:	b29b      	uxth	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b95e:	4413      	add	r3, r2
 800b960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	00da      	lsls	r2, r3, #3
 800b968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b96a:	4413      	add	r3, r2
 800b96c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b970:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b974:	b29a      	uxth	r2, r3
 800b976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b978:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6818      	ldr	r0, [r3, #0]
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	6959      	ldr	r1, [r3, #20]
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	895a      	ldrh	r2, [r3, #10]
 800b986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f007 f96e 	bl	8012c6a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	461a      	mov	r2, r3
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	881b      	ldrh	r3, [r3, #0]
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9a8:	82fb      	strh	r3, [r7, #22]
 800b9aa:	8afb      	ldrh	r3, [r7, #22]
 800b9ac:	f083 0310 	eor.w	r3, r3, #16
 800b9b0:	82fb      	strh	r3, [r7, #22]
 800b9b2:	8afb      	ldrh	r3, [r7, #22]
 800b9b4:	f083 0320 	eor.w	r3, r3, #32
 800b9b8:	82fb      	strh	r3, [r7, #22]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	441a      	add	r2, r3
 800b9c8:	8afb      	ldrh	r3, [r7, #22]
 800b9ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9da:	b29b      	uxth	r3, r3
 800b9dc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3798      	adds	r7, #152	@ 0x98
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b087      	sub	sp, #28
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	60f8      	str	r0, [r7, #12]
 800b9f0:	607b      	str	r3, [r7, #4]
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	817b      	strh	r3, [r7, #10]
 800b9f6:	4613      	mov	r3, r2
 800b9f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b9fa:	897b      	ldrh	r3, [r7, #10]
 800b9fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba00:	b29b      	uxth	r3, r3
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00b      	beq.n	800ba1e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba06:	897b      	ldrh	r3, [r7, #10]
 800ba08:	f003 0207 	and.w	r2, r3, #7
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	4413      	add	r3, r2
 800ba12:	00db      	lsls	r3, r3, #3
 800ba14:	3310      	adds	r3, #16
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	4413      	add	r3, r2
 800ba1a:	617b      	str	r3, [r7, #20]
 800ba1c:	e009      	b.n	800ba32 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ba1e:	897a      	ldrh	r2, [r7, #10]
 800ba20:	4613      	mov	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4413      	add	r3, r2
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	4413      	add	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ba32:	893b      	ldrh	r3, [r7, #8]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d107      	bne.n	800ba48 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	b29a      	uxth	r2, r3
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	80da      	strh	r2, [r3, #6]
 800ba46:	e00b      	b.n	800ba60 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	0c1b      	lsrs	r3, r3, #16
 800ba5a:	b29a      	uxth	r2, r3
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	371c      	adds	r7, #28
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b085      	sub	sp, #20
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2200      	movs	r2, #0
 800ba88:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	f043 0301 	orr.w	r3, r3, #1
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f043 0302 	orr.w	r3, r3, #2
 800baac:	b29a      	uxth	r2, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3714      	adds	r7, #20
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
	...

0800bac4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800bac4:	b480      	push	{r7}
 800bac6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bac8:	4b05      	ldr	r3, [pc, #20]	@ (800bae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4a04      	ldr	r2, [pc, #16]	@ (800bae0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800bace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bad2:	6013      	str	r3, [r2, #0]
}
 800bad4:	bf00      	nop
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	58000400 	.word	0x58000400

0800bae4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800bae4:	b480      	push	{r7}
 800bae6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800bae8:	4b04      	ldr	r3, [pc, #16]	@ (800bafc <HAL_PWREx_GetVoltageRange+0x18>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	58000400 	.word	0x58000400

0800bb00 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800bb00:	b480      	push	{r7}
 800bb02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800bb04:	4b05      	ldr	r3, [pc, #20]	@ (800bb1c <HAL_PWREx_EnableVddUSB+0x1c>)
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	4a04      	ldr	r2, [pc, #16]	@ (800bb1c <HAL_PWREx_EnableVddUSB+0x1c>)
 800bb0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bb0e:	6053      	str	r3, [r2, #4]
}
 800bb10:	bf00      	nop
 800bb12:	46bd      	mov	sp, r7
 800bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb18:	4770      	bx	lr
 800bb1a:	bf00      	nop
 800bb1c:	58000400 	.word	0x58000400

0800bb20 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800bb20:	b480      	push	{r7}
 800bb22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bb24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bb2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb32:	d101      	bne.n	800bb38 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bb34:	2301      	movs	r3, #1
 800bb36:	e000      	b.n	800bb3a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr

0800bb44 <LL_RCC_HSE_Enable>:
{
 800bb44:	b480      	push	{r7}
 800bb46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bb48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb56:	6013      	str	r3, [r2, #0]
}
 800bb58:	bf00      	nop
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <LL_RCC_HSE_Disable>:
{
 800bb62:	b480      	push	{r7}
 800bb64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bb66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb74:	6013      	str	r3, [r2, #0]
}
 800bb76:	bf00      	nop
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <LL_RCC_HSE_IsReady>:
{
 800bb80:	b480      	push	{r7}
 800bb82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bb84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb92:	d101      	bne.n	800bb98 <LL_RCC_HSE_IsReady+0x18>
 800bb94:	2301      	movs	r3, #1
 800bb96:	e000      	b.n	800bb9a <LL_RCC_HSE_IsReady+0x1a>
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr

0800bba4 <LL_RCC_HSI_Enable>:
{
 800bba4:	b480      	push	{r7}
 800bba6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800bba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bbb6:	6013      	str	r3, [r2, #0]
}
 800bbb8:	bf00      	nop
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <LL_RCC_HSI_Disable>:
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800bbc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbd4:	6013      	str	r3, [r2, #0]
}
 800bbd6:	bf00      	nop
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <LL_RCC_HSI_IsReady>:
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bbe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbf2:	d101      	bne.n	800bbf8 <LL_RCC_HSI_IsReady+0x18>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e000      	b.n	800bbfa <LL_RCC_HSI_IsReady+0x1a>
 800bbf8:	2300      	movs	r3, #0
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <LL_RCC_HSI_SetCalibTrimming>:
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800bc0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc10:	685b      	ldr	r3, [r3, #4]
 800bc12:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	061b      	lsls	r3, r3, #24
 800bc1a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	604b      	str	r3, [r1, #4]
}
 800bc22:	bf00      	nop
 800bc24:	370c      	adds	r7, #12
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr

0800bc2e <LL_RCC_HSI48_Enable>:
{
 800bc2e:	b480      	push	{r7}
 800bc30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bc32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc3e:	f043 0301 	orr.w	r3, r3, #1
 800bc42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bc46:	bf00      	nop
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <LL_RCC_HSI48_Disable>:
{
 800bc50:	b480      	push	{r7}
 800bc52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bc54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc60:	f023 0301 	bic.w	r3, r3, #1
 800bc64:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bc68:	bf00      	nop
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <LL_RCC_HSI48_IsReady>:
{
 800bc72:	b480      	push	{r7}
 800bc74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800bc76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc7e:	f003 0302 	and.w	r3, r3, #2
 800bc82:	2b02      	cmp	r3, #2
 800bc84:	d101      	bne.n	800bc8a <LL_RCC_HSI48_IsReady+0x18>
 800bc86:	2301      	movs	r3, #1
 800bc88:	e000      	b.n	800bc8c <LL_RCC_HSI48_IsReady+0x1a>
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <LL_RCC_LSE_Enable>:
{
 800bc96:	b480      	push	{r7}
 800bc98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bc9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bca2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bca6:	f043 0301 	orr.w	r3, r3, #1
 800bcaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bcae:	bf00      	nop
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <LL_RCC_LSE_Disable>:
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bcbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bcc8:	f023 0301 	bic.w	r3, r3, #1
 800bccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bcd0:	bf00      	nop
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <LL_RCC_LSE_EnableBypass>:
{
 800bcda:	b480      	push	{r7}
 800bcdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bcde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bce6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bcea:	f043 0304 	orr.w	r3, r3, #4
 800bcee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bcf2:	bf00      	nop
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <LL_RCC_LSE_DisableBypass>:
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bd00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd0c:	f023 0304 	bic.w	r3, r3, #4
 800bd10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bd14:	bf00      	nop
 800bd16:	46bd      	mov	sp, r7
 800bd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1c:	4770      	bx	lr

0800bd1e <LL_RCC_LSE_IsReady>:
{
 800bd1e:	b480      	push	{r7}
 800bd20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bd22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd2a:	f003 0302 	and.w	r3, r3, #2
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d101      	bne.n	800bd36 <LL_RCC_LSE_IsReady+0x18>
 800bd32:	2301      	movs	r3, #1
 800bd34:	e000      	b.n	800bd38 <LL_RCC_LSE_IsReady+0x1a>
 800bd36:	2300      	movs	r3, #0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr

0800bd42 <LL_RCC_LSI1_Enable>:
{
 800bd42:	b480      	push	{r7}
 800bd44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bd46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd52:	f043 0301 	orr.w	r3, r3, #1
 800bd56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bd5a:	bf00      	nop
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <LL_RCC_LSI1_Disable>:
{
 800bd64:	b480      	push	{r7}
 800bd66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bd68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd74:	f023 0301 	bic.w	r3, r3, #1
 800bd78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bd7c:	bf00      	nop
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd84:	4770      	bx	lr

0800bd86 <LL_RCC_LSI1_IsReady>:
{
 800bd86:	b480      	push	{r7}
 800bd88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800bd8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd92:	f003 0302 	and.w	r3, r3, #2
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d101      	bne.n	800bd9e <LL_RCC_LSI1_IsReady+0x18>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	e000      	b.n	800bda0 <LL_RCC_LSI1_IsReady+0x1a>
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <LL_RCC_LSI2_Enable>:
{
 800bdaa:	b480      	push	{r7}
 800bdac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bdae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdba:	f043 0304 	orr.w	r3, r3, #4
 800bdbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bdc2:	bf00      	nop
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <LL_RCC_LSI2_Disable>:
{
 800bdcc:	b480      	push	{r7}
 800bdce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bdd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bddc:	f023 0304 	bic.w	r3, r3, #4
 800bde0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bde4:	bf00      	nop
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <LL_RCC_LSI2_IsReady>:
{
 800bdee:	b480      	push	{r7}
 800bdf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800bdf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdfa:	f003 0308 	and.w	r3, r3, #8
 800bdfe:	2b08      	cmp	r3, #8
 800be00:	d101      	bne.n	800be06 <LL_RCC_LSI2_IsReady+0x18>
 800be02:	2301      	movs	r3, #1
 800be04:	e000      	b.n	800be08 <LL_RCC_LSI2_IsReady+0x1a>
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <LL_RCC_LSI2_SetTrimming>:
{
 800be12:	b480      	push	{r7}
 800be14:	b083      	sub	sp, #12
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800be1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800be22:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	021b      	lsls	r3, r3, #8
 800be2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be2e:	4313      	orrs	r3, r2
 800be30:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <LL_RCC_MSI_Enable>:
{
 800be40:	b480      	push	{r7}
 800be42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800be44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be4e:	f043 0301 	orr.w	r3, r3, #1
 800be52:	6013      	str	r3, [r2, #0]
}
 800be54:	bf00      	nop
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <LL_RCC_MSI_Disable>:
{
 800be5e:	b480      	push	{r7}
 800be60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800be62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be6c:	f023 0301 	bic.w	r3, r3, #1
 800be70:	6013      	str	r3, [r2, #0]
}
 800be72:	bf00      	nop
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <LL_RCC_MSI_IsReady>:
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800be80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 0302 	and.w	r3, r3, #2
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d101      	bne.n	800be92 <LL_RCC_MSI_IsReady+0x16>
 800be8e:	2301      	movs	r3, #1
 800be90:	e000      	b.n	800be94 <LL_RCC_MSI_IsReady+0x18>
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <LL_RCC_MSI_SetRange>:
{
 800be9e:	b480      	push	{r7}
 800bea0:	b083      	sub	sp, #12
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800beb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	600b      	str	r3, [r1, #0]
}
 800beba:	bf00      	nop
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr

0800bec6 <LL_RCC_MSI_GetRange>:
{
 800bec6:	b480      	push	{r7}
 800bec8:	b083      	sub	sp, #12
 800beca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800becc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bed6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2bb0      	cmp	r3, #176	@ 0xb0
 800bedc:	d901      	bls.n	800bee2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800bede:	23b0      	movs	r3, #176	@ 0xb0
 800bee0:	607b      	str	r3, [r7, #4]
  return msiRange;
 800bee2:	687b      	ldr	r3, [r7, #4]
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	370c      	adds	r7, #12
 800bee8:	46bd      	mov	sp, r7
 800beea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beee:	4770      	bx	lr

0800bef0 <LL_RCC_MSI_SetCalibTrimming>:
{
 800bef0:	b480      	push	{r7}
 800bef2:	b083      	sub	sp, #12
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800bef8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	021b      	lsls	r3, r3, #8
 800bf06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	604b      	str	r3, [r1, #4]
}
 800bf0e:	bf00      	nop
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <LL_RCC_SetSysClkSource>:
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bf22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f023 0203 	bic.w	r2, r3, #3
 800bf2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	608b      	str	r3, [r1, #8]
}
 800bf36:	bf00      	nop
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <LL_RCC_GetSysClkSource>:
{
 800bf42:	b480      	push	{r7}
 800bf44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bf46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf4a:	689b      	ldr	r3, [r3, #8]
 800bf4c:	f003 030c 	and.w	r3, r3, #12
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr

0800bf5a <LL_RCC_SetAHBPrescaler>:
{
 800bf5a:	b480      	push	{r7}
 800bf5c:	b083      	sub	sp, #12
 800bf5e:	af00      	add	r7, sp, #0
 800bf60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bf62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	608b      	str	r3, [r1, #8]
}
 800bf76:	bf00      	nop
 800bf78:	370c      	adds	r7, #12
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf80:	4770      	bx	lr

0800bf82 <LL_C2_RCC_SetAHBPrescaler>:
{
 800bf82:	b480      	push	{r7}
 800bf84:	b083      	sub	sp, #12
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800bf8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf8e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bf92:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4313      	orrs	r3, r2
 800bf9e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bfa2:	bf00      	nop
 800bfa4:	370c      	adds	r7, #12
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfac:	4770      	bx	lr

0800bfae <LL_RCC_SetAHB4Prescaler>:
{
 800bfae:	b480      	push	{r7}
 800bfb0:	b083      	sub	sp, #12
 800bfb2:	af00      	add	r7, sp, #0
 800bfb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bfb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bfbe:	f023 020f 	bic.w	r2, r3, #15
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	091b      	lsrs	r3, r3, #4
 800bfc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <LL_RCC_SetAPB1Prescaler>:
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bfe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bfee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4313      	orrs	r3, r2
 800bff6:	608b      	str	r3, [r1, #8]
}
 800bff8:	bf00      	nop
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <LL_RCC_SetAPB2Prescaler>:
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800c00c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c010:	689b      	ldr	r3, [r3, #8]
 800c012:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c016:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	608b      	str	r3, [r1, #8]
}
 800c020:	bf00      	nop
 800c022:	370c      	adds	r7, #12
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <LL_RCC_GetAHBPrescaler>:
{
 800c02c:	b480      	push	{r7}
 800c02e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800c030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <LL_RCC_GetAHB4Prescaler>:
{
 800c044:	b480      	push	{r7}
 800c046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800c048:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c04c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c050:	011b      	lsls	r3, r3, #4
 800c052:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800c056:	4618      	mov	r0, r3
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <LL_RCC_GetAPB1Prescaler>:
{
 800c060:	b480      	push	{r7}
 800c062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800c06e:	4618      	mov	r0, r3
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <LL_RCC_GetAPB2Prescaler>:
{
 800c078:	b480      	push	{r7}
 800c07a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c07c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800c086:	4618      	mov	r0, r3
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c090:	b480      	push	{r7}
 800c092:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c09e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c0a2:	6013      	str	r3, [r2, #0]
}
 800c0a4:	bf00      	nop
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c0b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c0bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0c0:	6013      	str	r3, [r2, #0]
}
 800c0c2:	bf00      	nop
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c0d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c0de:	d101      	bne.n	800c0e4 <LL_RCC_PLL_IsReady+0x18>
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	e000      	b.n	800c0e6 <LL_RCC_PLL_IsReady+0x1a>
 800c0e4:	2300      	movs	r3, #0
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c0f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0f8:	68db      	ldr	r3, [r3, #12]
 800c0fa:	0a1b      	lsrs	r3, r3, #8
 800c0fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800c100:	4618      	mov	r0, r3
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c10a:	b480      	push	{r7}
 800c10c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c10e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800c118:	4618      	mov	r0, r3
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr

0800c122 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c122:	b480      	push	{r7}
 800c124:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c130:	4618      	mov	r0, r3
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c13a:	b480      	push	{r7}
 800c13c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c13e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	f003 0303 	and.w	r3, r3, #3
}
 800c148:	4618      	mov	r0, r3
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr

0800c152 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c152:	b480      	push	{r7}
 800c154:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c15a:	689b      	ldr	r3, [r3, #8]
 800c15c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c164:	d101      	bne.n	800c16a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c166:	2301      	movs	r3, #1
 800c168:	e000      	b.n	800c16c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c176:	b480      	push	{r7}
 800c178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c17a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c17e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c186:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c18a:	d101      	bne.n	800c190 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c18c:	2301      	movs	r3, #1
 800c18e:	e000      	b.n	800c192 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c190:	2300      	movs	r3, #0
}
 800c192:	4618      	mov	r0, r3
 800c194:	46bd      	mov	sp, r7
 800c196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19a:	4770      	bx	lr

0800c19c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c19c:	b480      	push	{r7}
 800c19e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c1a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c1a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1b0:	d101      	bne.n	800c1b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e000      	b.n	800c1b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c1c2:	b480      	push	{r7}
 800c1c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c1c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c1d4:	d101      	bne.n	800c1da <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	e000      	b.n	800c1dc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c1da:	2300      	movs	r3, #0
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e4:	4770      	bx	lr

0800c1e6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c1ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c1f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c1f8:	d101      	bne.n	800c1fe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e000      	b.n	800c200 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
	...

0800c20c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c20c:	b590      	push	{r4, r7, lr}
 800c20e:	b08d      	sub	sp, #52	@ 0x34
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c21a:	2301      	movs	r3, #1
 800c21c:	e363      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f003 0320 	and.w	r3, r3, #32
 800c226:	2b00      	cmp	r3, #0
 800c228:	f000 808d 	beq.w	800c346 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c22c:	f7ff fe89 	bl	800bf42 <LL_RCC_GetSysClkSource>
 800c230:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c232:	f7ff ff82 	bl	800c13a <LL_RCC_PLL_GetMainSource>
 800c236:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d005      	beq.n	800c24a <HAL_RCC_OscConfig+0x3e>
 800c23e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c240:	2b0c      	cmp	r3, #12
 800c242:	d147      	bne.n	800c2d4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c246:	2b01      	cmp	r3, #1
 800c248:	d144      	bne.n	800c2d4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	69db      	ldr	r3, [r3, #28]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d101      	bne.n	800c256 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e347      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c25a:	f7ff fe34 	bl	800bec6 <LL_RCC_MSI_GetRange>
 800c25e:	4603      	mov	r3, r0
 800c260:	429c      	cmp	r4, r3
 800c262:	d914      	bls.n	800c28e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c268:	4618      	mov	r0, r3
 800c26a:	f000 fd2f 	bl	800cccc <RCC_SetFlashLatencyFromMSIRange>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d001      	beq.n	800c278 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e336      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7ff fe0e 	bl	800be9e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	4618      	mov	r0, r3
 800c288:	f7ff fe32 	bl	800bef0 <LL_RCC_MSI_SetCalibTrimming>
 800c28c:	e013      	b.n	800c2b6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c292:	4618      	mov	r0, r3
 800c294:	f7ff fe03 	bl	800be9e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a1b      	ldr	r3, [r3, #32]
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7ff fe27 	bl	800bef0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 fd10 	bl	800cccc <RCC_SetFlashLatencyFromMSIRange>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d001      	beq.n	800c2b6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e317      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c2b6:	f000 fcc9 	bl	800cc4c <HAL_RCC_GetHCLKFreq>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	4aa4      	ldr	r2, [pc, #656]	@ (800c550 <HAL_RCC_OscConfig+0x344>)
 800c2be:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c2c0:	4ba4      	ldr	r3, [pc, #656]	@ (800c554 <HAL_RCC_OscConfig+0x348>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7fb f87f 	bl	80073c8 <HAL_InitTick>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d039      	beq.n	800c344 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e308      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	69db      	ldr	r3, [r3, #28]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d01e      	beq.n	800c31a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c2dc:	f7ff fdb0 	bl	800be40 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c2e0:	f7fb f8c0 	bl	8007464 <HAL_GetTick>
 800c2e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c2e6:	e008      	b.n	800c2fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c2e8:	f7fb f8bc 	bl	8007464 <HAL_GetTick>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	2b02      	cmp	r3, #2
 800c2f4:	d901      	bls.n	800c2fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c2f6:	2303      	movs	r3, #3
 800c2f8:	e2f5      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c2fa:	f7ff fdbf 	bl	800be7c <LL_RCC_MSI_IsReady>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d0f1      	beq.n	800c2e8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c308:	4618      	mov	r0, r3
 800c30a:	f7ff fdc8 	bl	800be9e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	4618      	mov	r0, r3
 800c314:	f7ff fdec 	bl	800bef0 <LL_RCC_MSI_SetCalibTrimming>
 800c318:	e015      	b.n	800c346 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c31a:	f7ff fda0 	bl	800be5e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c31e:	f7fb f8a1 	bl	8007464 <HAL_GetTick>
 800c322:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c324:	e008      	b.n	800c338 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c326:	f7fb f89d 	bl	8007464 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	2b02      	cmp	r3, #2
 800c332:	d901      	bls.n	800c338 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	e2d6      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c338:	f7ff fda0 	bl	800be7c <LL_RCC_MSI_IsReady>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d1f1      	bne.n	800c326 <HAL_RCC_OscConfig+0x11a>
 800c342:	e000      	b.n	800c346 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c344:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 0301 	and.w	r3, r3, #1
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d047      	beq.n	800c3e2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c352:	f7ff fdf6 	bl	800bf42 <LL_RCC_GetSysClkSource>
 800c356:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c358:	f7ff feef 	bl	800c13a <LL_RCC_PLL_GetMainSource>
 800c35c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	2b08      	cmp	r3, #8
 800c362:	d005      	beq.n	800c370 <HAL_RCC_OscConfig+0x164>
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	2b0c      	cmp	r3, #12
 800c368:	d108      	bne.n	800c37c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d105      	bne.n	800c37c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d134      	bne.n	800c3e2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	e2b4      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c384:	d102      	bne.n	800c38c <HAL_RCC_OscConfig+0x180>
 800c386:	f7ff fbdd 	bl	800bb44 <LL_RCC_HSE_Enable>
 800c38a:	e001      	b.n	800c390 <HAL_RCC_OscConfig+0x184>
 800c38c:	f7ff fbe9 	bl	800bb62 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d012      	beq.n	800c3be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c398:	f7fb f864 	bl	8007464 <HAL_GetTick>
 800c39c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c39e:	e008      	b.n	800c3b2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3a0:	f7fb f860 	bl	8007464 <HAL_GetTick>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	1ad3      	subs	r3, r2, r3
 800c3aa:	2b64      	cmp	r3, #100	@ 0x64
 800c3ac:	d901      	bls.n	800c3b2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c3ae:	2303      	movs	r3, #3
 800c3b0:	e299      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c3b2:	f7ff fbe5 	bl	800bb80 <LL_RCC_HSE_IsReady>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d0f1      	beq.n	800c3a0 <HAL_RCC_OscConfig+0x194>
 800c3bc:	e011      	b.n	800c3e2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3be:	f7fb f851 	bl	8007464 <HAL_GetTick>
 800c3c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c3c4:	e008      	b.n	800c3d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3c6:	f7fb f84d 	bl	8007464 <HAL_GetTick>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	2b64      	cmp	r3, #100	@ 0x64
 800c3d2:	d901      	bls.n	800c3d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	e286      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c3d8:	f7ff fbd2 	bl	800bb80 <LL_RCC_HSE_IsReady>
 800c3dc:	4603      	mov	r3, r0
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d1f1      	bne.n	800c3c6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f003 0302 	and.w	r3, r3, #2
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d04c      	beq.n	800c488 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3ee:	f7ff fda8 	bl	800bf42 <LL_RCC_GetSysClkSource>
 800c3f2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c3f4:	f7ff fea1 	bl	800c13a <LL_RCC_PLL_GetMainSource>
 800c3f8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c3fa:	69bb      	ldr	r3, [r7, #24]
 800c3fc:	2b04      	cmp	r3, #4
 800c3fe:	d005      	beq.n	800c40c <HAL_RCC_OscConfig+0x200>
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	2b0c      	cmp	r3, #12
 800c404:	d10e      	bne.n	800c424 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	2b02      	cmp	r3, #2
 800c40a:	d10b      	bne.n	800c424 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d101      	bne.n	800c418 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	e266      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	691b      	ldr	r3, [r3, #16]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7ff fbf1 	bl	800bc04 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c422:	e031      	b.n	800c488 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d019      	beq.n	800c460 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c42c:	f7ff fbba 	bl	800bba4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c430:	f7fb f818 	bl	8007464 <HAL_GetTick>
 800c434:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c436:	e008      	b.n	800c44a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c438:	f7fb f814 	bl	8007464 <HAL_GetTick>
 800c43c:	4602      	mov	r2, r0
 800c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c440:	1ad3      	subs	r3, r2, r3
 800c442:	2b02      	cmp	r3, #2
 800c444:	d901      	bls.n	800c44a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c446:	2303      	movs	r3, #3
 800c448:	e24d      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c44a:	f7ff fbc9 	bl	800bbe0 <LL_RCC_HSI_IsReady>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d0f1      	beq.n	800c438 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	691b      	ldr	r3, [r3, #16]
 800c458:	4618      	mov	r0, r3
 800c45a:	f7ff fbd3 	bl	800bc04 <LL_RCC_HSI_SetCalibTrimming>
 800c45e:	e013      	b.n	800c488 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c460:	f7ff fbaf 	bl	800bbc2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c464:	f7fa fffe 	bl	8007464 <HAL_GetTick>
 800c468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c46a:	e008      	b.n	800c47e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c46c:	f7fa fffa 	bl	8007464 <HAL_GetTick>
 800c470:	4602      	mov	r2, r0
 800c472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c474:	1ad3      	subs	r3, r2, r3
 800c476:	2b02      	cmp	r3, #2
 800c478:	d901      	bls.n	800c47e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c47a:	2303      	movs	r3, #3
 800c47c:	e233      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c47e:	f7ff fbaf 	bl	800bbe0 <LL_RCC_HSI_IsReady>
 800c482:	4603      	mov	r3, r0
 800c484:	2b00      	cmp	r3, #0
 800c486:	d1f1      	bne.n	800c46c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 0308 	and.w	r3, r3, #8
 800c490:	2b00      	cmp	r3, #0
 800c492:	d106      	bne.n	800c4a2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 80a3 	beq.w	800c5e8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	695b      	ldr	r3, [r3, #20]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d076      	beq.n	800c598 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 0310 	and.w	r3, r3, #16
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d046      	beq.n	800c544 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c4b6:	f7ff fc66 	bl	800bd86 <LL_RCC_LSI1_IsReady>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d113      	bne.n	800c4e8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c4c0:	f7ff fc3f 	bl	800bd42 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c4c4:	f7fa ffce 	bl	8007464 <HAL_GetTick>
 800c4c8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c4ca:	e008      	b.n	800c4de <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c4cc:	f7fa ffca 	bl	8007464 <HAL_GetTick>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d901      	bls.n	800c4de <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e203      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c4de:	f7ff fc52 	bl	800bd86 <LL_RCC_LSI1_IsReady>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d0f1      	beq.n	800c4cc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c4e8:	f7ff fc5f 	bl	800bdaa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4ec:	f7fa ffba 	bl	8007464 <HAL_GetTick>
 800c4f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c4f2:	e008      	b.n	800c506 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c4f4:	f7fa ffb6 	bl	8007464 <HAL_GetTick>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	2b03      	cmp	r3, #3
 800c500:	d901      	bls.n	800c506 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c502:	2303      	movs	r3, #3
 800c504:	e1ef      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c506:	f7ff fc72 	bl	800bdee <LL_RCC_LSI2_IsReady>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d0f1      	beq.n	800c4f4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	699b      	ldr	r3, [r3, #24]
 800c514:	4618      	mov	r0, r3
 800c516:	f7ff fc7c 	bl	800be12 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c51a:	f7ff fc23 	bl	800bd64 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c51e:	f7fa ffa1 	bl	8007464 <HAL_GetTick>
 800c522:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c524:	e008      	b.n	800c538 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c526:	f7fa ff9d 	bl	8007464 <HAL_GetTick>
 800c52a:	4602      	mov	r2, r0
 800c52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c52e:	1ad3      	subs	r3, r2, r3
 800c530:	2b02      	cmp	r3, #2
 800c532:	d901      	bls.n	800c538 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c534:	2303      	movs	r3, #3
 800c536:	e1d6      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c538:	f7ff fc25 	bl	800bd86 <LL_RCC_LSI1_IsReady>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d1f1      	bne.n	800c526 <HAL_RCC_OscConfig+0x31a>
 800c542:	e051      	b.n	800c5e8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c544:	f7ff fbfd 	bl	800bd42 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c548:	f7fa ff8c 	bl	8007464 <HAL_GetTick>
 800c54c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c54e:	e00c      	b.n	800c56a <HAL_RCC_OscConfig+0x35e>
 800c550:	2000002c 	.word	0x2000002c
 800c554:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c558:	f7fa ff84 	bl	8007464 <HAL_GetTick>
 800c55c:	4602      	mov	r2, r0
 800c55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c560:	1ad3      	subs	r3, r2, r3
 800c562:	2b02      	cmp	r3, #2
 800c564:	d901      	bls.n	800c56a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c566:	2303      	movs	r3, #3
 800c568:	e1bd      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c56a:	f7ff fc0c 	bl	800bd86 <LL_RCC_LSI1_IsReady>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d0f1      	beq.n	800c558 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c574:	f7ff fc2a 	bl	800bdcc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c578:	e008      	b.n	800c58c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c57a:	f7fa ff73 	bl	8007464 <HAL_GetTick>
 800c57e:	4602      	mov	r2, r0
 800c580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	2b03      	cmp	r3, #3
 800c586:	d901      	bls.n	800c58c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c588:	2303      	movs	r3, #3
 800c58a:	e1ac      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c58c:	f7ff fc2f 	bl	800bdee <LL_RCC_LSI2_IsReady>
 800c590:	4603      	mov	r3, r0
 800c592:	2b00      	cmp	r3, #0
 800c594:	d1f1      	bne.n	800c57a <HAL_RCC_OscConfig+0x36e>
 800c596:	e027      	b.n	800c5e8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c598:	f7ff fc18 	bl	800bdcc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c59c:	f7fa ff62 	bl	8007464 <HAL_GetTick>
 800c5a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c5a2:	e008      	b.n	800c5b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c5a4:	f7fa ff5e 	bl	8007464 <HAL_GetTick>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d901      	bls.n	800c5b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	e197      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c5b6:	f7ff fc1a 	bl	800bdee <LL_RCC_LSI2_IsReady>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1f1      	bne.n	800c5a4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c5c0:	f7ff fbd0 	bl	800bd64 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5c4:	f7fa ff4e 	bl	8007464 <HAL_GetTick>
 800c5c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c5ca:	e008      	b.n	800c5de <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c5cc:	f7fa ff4a 	bl	8007464 <HAL_GetTick>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	d901      	bls.n	800c5de <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c5da:	2303      	movs	r3, #3
 800c5dc:	e183      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c5de:	f7ff fbd2 	bl	800bd86 <LL_RCC_LSI1_IsReady>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1f1      	bne.n	800c5cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f003 0304 	and.w	r3, r3, #4
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d05b      	beq.n	800c6ac <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5f4:	4ba7      	ldr	r3, [pc, #668]	@ (800c894 <HAL_RCC_OscConfig+0x688>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d114      	bne.n	800c62a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c600:	f7ff fa60 	bl	800bac4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c604:	f7fa ff2e 	bl	8007464 <HAL_GetTick>
 800c608:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c60a:	e008      	b.n	800c61e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c60c:	f7fa ff2a 	bl	8007464 <HAL_GetTick>
 800c610:	4602      	mov	r2, r0
 800c612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	2b02      	cmp	r3, #2
 800c618:	d901      	bls.n	800c61e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c61a:	2303      	movs	r3, #3
 800c61c:	e163      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c61e:	4b9d      	ldr	r3, [pc, #628]	@ (800c894 <HAL_RCC_OscConfig+0x688>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c626:	2b00      	cmp	r3, #0
 800c628:	d0f0      	beq.n	800c60c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	689b      	ldr	r3, [r3, #8]
 800c62e:	2b01      	cmp	r3, #1
 800c630:	d102      	bne.n	800c638 <HAL_RCC_OscConfig+0x42c>
 800c632:	f7ff fb30 	bl	800bc96 <LL_RCC_LSE_Enable>
 800c636:	e00c      	b.n	800c652 <HAL_RCC_OscConfig+0x446>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	2b05      	cmp	r3, #5
 800c63e:	d104      	bne.n	800c64a <HAL_RCC_OscConfig+0x43e>
 800c640:	f7ff fb4b 	bl	800bcda <LL_RCC_LSE_EnableBypass>
 800c644:	f7ff fb27 	bl	800bc96 <LL_RCC_LSE_Enable>
 800c648:	e003      	b.n	800c652 <HAL_RCC_OscConfig+0x446>
 800c64a:	f7ff fb35 	bl	800bcb8 <LL_RCC_LSE_Disable>
 800c64e:	f7ff fb55 	bl	800bcfc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	689b      	ldr	r3, [r3, #8]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d014      	beq.n	800c684 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c65a:	f7fa ff03 	bl	8007464 <HAL_GetTick>
 800c65e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c660:	e00a      	b.n	800c678 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c662:	f7fa feff 	bl	8007464 <HAL_GetTick>
 800c666:	4602      	mov	r2, r0
 800c668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66a:	1ad3      	subs	r3, r2, r3
 800c66c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c670:	4293      	cmp	r3, r2
 800c672:	d901      	bls.n	800c678 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c674:	2303      	movs	r3, #3
 800c676:	e136      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c678:	f7ff fb51 	bl	800bd1e <LL_RCC_LSE_IsReady>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0ef      	beq.n	800c662 <HAL_RCC_OscConfig+0x456>
 800c682:	e013      	b.n	800c6ac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c684:	f7fa feee 	bl	8007464 <HAL_GetTick>
 800c688:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c68a:	e00a      	b.n	800c6a2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c68c:	f7fa feea 	bl	8007464 <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d901      	bls.n	800c6a2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e121      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c6a2:	f7ff fb3c 	bl	800bd1e <LL_RCC_LSE_IsReady>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d1ef      	bne.n	800c68c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d02c      	beq.n	800c712 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d014      	beq.n	800c6ea <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c6c0:	f7ff fab5 	bl	800bc2e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6c4:	f7fa fece 	bl	8007464 <HAL_GetTick>
 800c6c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c6ca:	e008      	b.n	800c6de <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6cc:	f7fa feca 	bl	8007464 <HAL_GetTick>
 800c6d0:	4602      	mov	r2, r0
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	d901      	bls.n	800c6de <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c6da:	2303      	movs	r3, #3
 800c6dc:	e103      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c6de:	f7ff fac8 	bl	800bc72 <LL_RCC_HSI48_IsReady>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d0f1      	beq.n	800c6cc <HAL_RCC_OscConfig+0x4c0>
 800c6e8:	e013      	b.n	800c712 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c6ea:	f7ff fab1 	bl	800bc50 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6ee:	f7fa feb9 	bl	8007464 <HAL_GetTick>
 800c6f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c6f4:	e008      	b.n	800c708 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6f6:	f7fa feb5 	bl	8007464 <HAL_GetTick>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	2b02      	cmp	r3, #2
 800c702:	d901      	bls.n	800c708 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c704:	2303      	movs	r3, #3
 800c706:	e0ee      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c708:	f7ff fab3 	bl	800bc72 <LL_RCC_HSI48_IsReady>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1f1      	bne.n	800c6f6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 80e4 	beq.w	800c8e4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c71c:	f7ff fc11 	bl	800bf42 <LL_RCC_GetSysClkSource>
 800c720:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c72e:	2b02      	cmp	r3, #2
 800c730:	f040 80b4 	bne.w	800c89c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f003 0203 	and.w	r2, r3, #3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c73e:	429a      	cmp	r2, r3
 800c740:	d123      	bne.n	800c78a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d11c      	bne.n	800c78a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	0a1b      	lsrs	r3, r3, #8
 800c754:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d114      	bne.n	800c78a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d10d      	bne.n	800c78a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c778:	429a      	cmp	r2, r3
 800c77a:	d106      	bne.n	800c78a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c786:	429a      	cmp	r2, r3
 800c788:	d05d      	beq.n	800c846 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	2b0c      	cmp	r3, #12
 800c78e:	d058      	beq.n	800c842 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	e0a1      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c7a2:	f7ff fc84 	bl	800c0ae <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c7a6:	f7fa fe5d 	bl	8007464 <HAL_GetTick>
 800c7aa:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7ac:	e008      	b.n	800c7c0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7ae:	f7fa fe59 	bl	8007464 <HAL_GetTick>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b6:	1ad3      	subs	r3, r2, r3
 800c7b8:	2b02      	cmp	r3, #2
 800c7ba:	d901      	bls.n	800c7c0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	e092      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d1ef      	bne.n	800c7ae <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7d2:	68da      	ldr	r2, [r3, #12]
 800c7d4:	4b30      	ldr	r3, [pc, #192]	@ (800c898 <HAL_RCC_OscConfig+0x68c>)
 800c7d6:	4013      	ands	r3, r2
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c7e0:	4311      	orrs	r1, r2
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c7e6:	0212      	lsls	r2, r2, #8
 800c7e8:	4311      	orrs	r1, r2
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c7ee:	4311      	orrs	r1, r2
 800c7f0:	687a      	ldr	r2, [r7, #4]
 800c7f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c7f4:	4311      	orrs	r1, r2
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c7fa:	430a      	orrs	r2, r1
 800c7fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c800:	4313      	orrs	r3, r2
 800c802:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c804:	f7ff fc44 	bl	800c090 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c816:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c818:	f7fa fe24 	bl	8007464 <HAL_GetTick>
 800c81c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c81e:	e008      	b.n	800c832 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c820:	f7fa fe20 	bl	8007464 <HAL_GetTick>
 800c824:	4602      	mov	r2, r0
 800c826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	2b02      	cmp	r3, #2
 800c82c:	d901      	bls.n	800c832 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c82e:	2303      	movs	r3, #3
 800c830:	e059      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c832:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d0ef      	beq.n	800c820 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c840:	e050      	b.n	800c8e4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c842:	2301      	movs	r3, #1
 800c844:	e04f      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c850:	2b00      	cmp	r3, #0
 800c852:	d147      	bne.n	800c8e4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c854:	f7ff fc1c 	bl	800c090 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c866:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c868:	f7fa fdfc 	bl	8007464 <HAL_GetTick>
 800c86c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c86e:	e008      	b.n	800c882 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c870:	f7fa fdf8 	bl	8007464 <HAL_GetTick>
 800c874:	4602      	mov	r2, r0
 800c876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	d901      	bls.n	800c882 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c87e:	2303      	movs	r3, #3
 800c880:	e031      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d0ef      	beq.n	800c870 <HAL_RCC_OscConfig+0x664>
 800c890:	e028      	b.n	800c8e4 <HAL_RCC_OscConfig+0x6d8>
 800c892:	bf00      	nop
 800c894:	58000400 	.word	0x58000400
 800c898:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	2b0c      	cmp	r3, #12
 800c8a0:	d01e      	beq.n	800c8e0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8a2:	f7ff fc04 	bl	800c0ae <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8a6:	f7fa fddd 	bl	8007464 <HAL_GetTick>
 800c8aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8ac:	e008      	b.n	800c8c0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8ae:	f7fa fdd9 	bl	8007464 <HAL_GetTick>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d901      	bls.n	800c8c0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e012      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c8c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d1ef      	bne.n	800c8ae <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c8ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8d2:	68da      	ldr	r2, [r3, #12]
 800c8d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8d8:	4b05      	ldr	r3, [pc, #20]	@ (800c8f0 <HAL_RCC_OscConfig+0x6e4>)
 800c8da:	4013      	ands	r3, r2
 800c8dc:	60cb      	str	r3, [r1, #12]
 800c8de:	e001      	b.n	800c8e4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e000      	b.n	800c8e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3734      	adds	r7, #52	@ 0x34
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd90      	pop	{r4, r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	eefefffc 	.word	0xeefefffc

0800c8f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b084      	sub	sp, #16
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e12d      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c908:	4b98      	ldr	r3, [pc, #608]	@ (800cb6c <HAL_RCC_ClockConfig+0x278>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f003 0307 	and.w	r3, r3, #7
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	429a      	cmp	r2, r3
 800c914:	d91b      	bls.n	800c94e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c916:	4b95      	ldr	r3, [pc, #596]	@ (800cb6c <HAL_RCC_ClockConfig+0x278>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f023 0207 	bic.w	r2, r3, #7
 800c91e:	4993      	ldr	r1, [pc, #588]	@ (800cb6c <HAL_RCC_ClockConfig+0x278>)
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	4313      	orrs	r3, r2
 800c924:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c926:	f7fa fd9d 	bl	8007464 <HAL_GetTick>
 800c92a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c92c:	e008      	b.n	800c940 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c92e:	f7fa fd99 	bl	8007464 <HAL_GetTick>
 800c932:	4602      	mov	r2, r0
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d901      	bls.n	800c940 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c93c:	2303      	movs	r3, #3
 800c93e:	e111      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c940:	4b8a      	ldr	r3, [pc, #552]	@ (800cb6c <HAL_RCC_ClockConfig+0x278>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0307 	and.w	r3, r3, #7
 800c948:	683a      	ldr	r2, [r7, #0]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d1ef      	bne.n	800c92e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0302 	and.w	r3, r3, #2
 800c956:	2b00      	cmp	r3, #0
 800c958:	d016      	beq.n	800c988 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	4618      	mov	r0, r3
 800c960:	f7ff fafb 	bl	800bf5a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c964:	f7fa fd7e 	bl	8007464 <HAL_GetTick>
 800c968:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c96a:	e008      	b.n	800c97e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c96c:	f7fa fd7a 	bl	8007464 <HAL_GetTick>
 800c970:	4602      	mov	r2, r0
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	2b02      	cmp	r3, #2
 800c978:	d901      	bls.n	800c97e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c97a:	2303      	movs	r3, #3
 800c97c:	e0f2      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c97e:	f7ff fbe8 	bl	800c152 <LL_RCC_IsActiveFlag_HPRE>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d0f1      	beq.n	800c96c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f003 0320 	and.w	r3, r3, #32
 800c990:	2b00      	cmp	r3, #0
 800c992:	d016      	beq.n	800c9c2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	695b      	ldr	r3, [r3, #20]
 800c998:	4618      	mov	r0, r3
 800c99a:	f7ff faf2 	bl	800bf82 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c99e:	f7fa fd61 	bl	8007464 <HAL_GetTick>
 800c9a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c9a4:	e008      	b.n	800c9b8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c9a6:	f7fa fd5d 	bl	8007464 <HAL_GetTick>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	1ad3      	subs	r3, r2, r3
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	d901      	bls.n	800c9b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	e0d5      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c9b8:	f7ff fbdd 	bl	800c176 <LL_RCC_IsActiveFlag_C2HPRE>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d0f1      	beq.n	800c9a6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d016      	beq.n	800c9fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f7ff faeb 	bl	800bfae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c9d8:	f7fa fd44 	bl	8007464 <HAL_GetTick>
 800c9dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c9de:	e008      	b.n	800c9f2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c9e0:	f7fa fd40 	bl	8007464 <HAL_GetTick>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d901      	bls.n	800c9f2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	e0b8      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c9f2:	f7ff fbd3 	bl	800c19c <LL_RCC_IsActiveFlag_SHDHPRE>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d0f1      	beq.n	800c9e0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f003 0304 	and.w	r3, r3, #4
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d016      	beq.n	800ca36 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f7ff fae5 	bl	800bfdc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca12:	f7fa fd27 	bl	8007464 <HAL_GetTick>
 800ca16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ca18:	e008      	b.n	800ca2c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ca1a:	f7fa fd23 	bl	8007464 <HAL_GetTick>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	1ad3      	subs	r3, r2, r3
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d901      	bls.n	800ca2c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800ca28:	2303      	movs	r3, #3
 800ca2a:	e09b      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800ca2c:	f7ff fbc9 	bl	800c1c2 <LL_RCC_IsActiveFlag_PPRE1>
 800ca30:	4603      	mov	r3, r0
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0f1      	beq.n	800ca1a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 0308 	and.w	r3, r3, #8
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d017      	beq.n	800ca72 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7ff fadb 	bl	800c004 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ca4e:	f7fa fd09 	bl	8007464 <HAL_GetTick>
 800ca52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ca54:	e008      	b.n	800ca68 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ca56:	f7fa fd05 	bl	8007464 <HAL_GetTick>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	2b02      	cmp	r3, #2
 800ca62:	d901      	bls.n	800ca68 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800ca64:	2303      	movs	r3, #3
 800ca66:	e07d      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ca68:	f7ff fbbd 	bl	800c1e6 <LL_RCC_IsActiveFlag_PPRE2>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0f1      	beq.n	800ca56 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d043      	beq.n	800cb06 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d106      	bne.n	800ca94 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800ca86:	f7ff f87b 	bl	800bb80 <LL_RCC_HSE_IsReady>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d11e      	bne.n	800cace <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ca90:	2301      	movs	r3, #1
 800ca92:	e067      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	2b03      	cmp	r3, #3
 800ca9a:	d106      	bne.n	800caaa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800ca9c:	f7ff fb16 	bl	800c0cc <LL_RCC_PLL_IsReady>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d113      	bne.n	800cace <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800caa6:	2301      	movs	r3, #1
 800caa8:	e05c      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d106      	bne.n	800cac0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800cab2:	f7ff f9e3 	bl	800be7c <LL_RCC_MSI_IsReady>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d108      	bne.n	800cace <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800cabc:	2301      	movs	r3, #1
 800cabe:	e051      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800cac0:	f7ff f88e 	bl	800bbe0 <LL_RCC_HSI_IsReady>
 800cac4:	4603      	mov	r3, r0
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d101      	bne.n	800cace <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e04a      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7ff fa21 	bl	800bf1a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cad8:	f7fa fcc4 	bl	8007464 <HAL_GetTick>
 800cadc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cade:	e00a      	b.n	800caf6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cae0:	f7fa fcc0 	bl	8007464 <HAL_GetTick>
 800cae4:	4602      	mov	r2, r0
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	1ad3      	subs	r3, r2, r3
 800caea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800caee:	4293      	cmp	r3, r2
 800caf0:	d901      	bls.n	800caf6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800caf2:	2303      	movs	r3, #3
 800caf4:	e036      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800caf6:	f7ff fa24 	bl	800bf42 <LL_RCC_GetSysClkSource>
 800cafa:	4602      	mov	r2, r0
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d1ec      	bne.n	800cae0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb06:	4b19      	ldr	r3, [pc, #100]	@ (800cb6c <HAL_RCC_ClockConfig+0x278>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f003 0307 	and.w	r3, r3, #7
 800cb0e:	683a      	ldr	r2, [r7, #0]
 800cb10:	429a      	cmp	r2, r3
 800cb12:	d21b      	bcs.n	800cb4c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb14:	4b15      	ldr	r3, [pc, #84]	@ (800cb6c <HAL_RCC_ClockConfig+0x278>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f023 0207 	bic.w	r2, r3, #7
 800cb1c:	4913      	ldr	r1, [pc, #76]	@ (800cb6c <HAL_RCC_ClockConfig+0x278>)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb24:	f7fa fc9e 	bl	8007464 <HAL_GetTick>
 800cb28:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb2a:	e008      	b.n	800cb3e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cb2c:	f7fa fc9a 	bl	8007464 <HAL_GetTick>
 800cb30:	4602      	mov	r2, r0
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	1ad3      	subs	r3, r2, r3
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d901      	bls.n	800cb3e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	e012      	b.n	800cb64 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb3e:	4b0b      	ldr	r3, [pc, #44]	@ (800cb6c <HAL_RCC_ClockConfig+0x278>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f003 0307 	and.w	r3, r3, #7
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d1ef      	bne.n	800cb2c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cb4c:	f000 f87e 	bl	800cc4c <HAL_RCC_GetHCLKFreq>
 800cb50:	4603      	mov	r3, r0
 800cb52:	4a07      	ldr	r2, [pc, #28]	@ (800cb70 <HAL_RCC_ClockConfig+0x27c>)
 800cb54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800cb56:	f7fa fc91 	bl	800747c <HAL_GetTickPrio>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7fa fc33 	bl	80073c8 <HAL_InitTick>
 800cb62:	4603      	mov	r3, r0
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	58004000 	.word	0x58004000
 800cb70:	2000002c 	.word	0x2000002c

0800cb74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb74:	b590      	push	{r4, r7, lr}
 800cb76:	b085      	sub	sp, #20
 800cb78:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb7a:	f7ff f9e2 	bl	800bf42 <LL_RCC_GetSysClkSource>
 800cb7e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10a      	bne.n	800cb9c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cb86:	f7ff f99e 	bl	800bec6 <LL_RCC_MSI_GetRange>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	091b      	lsrs	r3, r3, #4
 800cb8e:	f003 030f 	and.w	r3, r3, #15
 800cb92:	4a2b      	ldr	r2, [pc, #172]	@ (800cc40 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cb94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb98:	60fb      	str	r3, [r7, #12]
 800cb9a:	e04b      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2b04      	cmp	r3, #4
 800cba0:	d102      	bne.n	800cba8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cba2:	4b28      	ldr	r3, [pc, #160]	@ (800cc44 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	e045      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b08      	cmp	r3, #8
 800cbac:	d10a      	bne.n	800cbc4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cbae:	f7fe ffb7 	bl	800bb20 <LL_RCC_HSE_IsEnabledDiv2>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d102      	bne.n	800cbbe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800cbb8:	4b22      	ldr	r3, [pc, #136]	@ (800cc44 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	e03a      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800cbbe:	4b22      	ldr	r3, [pc, #136]	@ (800cc48 <HAL_RCC_GetSysClockFreq+0xd4>)
 800cbc0:	60fb      	str	r3, [r7, #12]
 800cbc2:	e037      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800cbc4:	f7ff fab9 	bl	800c13a <LL_RCC_PLL_GetMainSource>
 800cbc8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	d003      	beq.n	800cbd8 <HAL_RCC_GetSysClockFreq+0x64>
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	d003      	beq.n	800cbde <HAL_RCC_GetSysClockFreq+0x6a>
 800cbd6:	e00d      	b.n	800cbf4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800cbd8:	4b1a      	ldr	r3, [pc, #104]	@ (800cc44 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cbda:	60bb      	str	r3, [r7, #8]
        break;
 800cbdc:	e015      	b.n	800cc0a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cbde:	f7fe ff9f 	bl	800bb20 <LL_RCC_HSE_IsEnabledDiv2>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d102      	bne.n	800cbee <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800cbe8:	4b16      	ldr	r3, [pc, #88]	@ (800cc44 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cbea:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800cbec:	e00d      	b.n	800cc0a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800cbee:	4b16      	ldr	r3, [pc, #88]	@ (800cc48 <HAL_RCC_GetSysClockFreq+0xd4>)
 800cbf0:	60bb      	str	r3, [r7, #8]
        break;
 800cbf2:	e00a      	b.n	800cc0a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cbf4:	f7ff f967 	bl	800bec6 <LL_RCC_MSI_GetRange>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	091b      	lsrs	r3, r3, #4
 800cbfc:	f003 030f 	and.w	r3, r3, #15
 800cc00:	4a0f      	ldr	r2, [pc, #60]	@ (800cc40 <HAL_RCC_GetSysClockFreq+0xcc>)
 800cc02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc06:	60bb      	str	r3, [r7, #8]
        break;
 800cc08:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800cc0a:	f7ff fa71 	bl	800c0f0 <LL_RCC_PLL_GetN>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	fb03 f402 	mul.w	r4, r3, r2
 800cc16:	f7ff fa84 	bl	800c122 <LL_RCC_PLL_GetDivider>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	091b      	lsrs	r3, r3, #4
 800cc1e:	3301      	adds	r3, #1
 800cc20:	fbb4 f4f3 	udiv	r4, r4, r3
 800cc24:	f7ff fa71 	bl	800c10a <LL_RCC_PLL_GetR>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	0f5b      	lsrs	r3, r3, #29
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	fbb4 f3f3 	udiv	r3, r4, r3
 800cc32:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800cc34:	68fb      	ldr	r3, [r7, #12]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd90      	pop	{r4, r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	080220f4 	.word	0x080220f4
 800cc44:	00f42400 	.word	0x00f42400
 800cc48:	01e84800 	.word	0x01e84800

0800cc4c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc4c:	b598      	push	{r3, r4, r7, lr}
 800cc4e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800cc50:	f7ff ff90 	bl	800cb74 <HAL_RCC_GetSysClockFreq>
 800cc54:	4604      	mov	r4, r0
 800cc56:	f7ff f9e9 	bl	800c02c <LL_RCC_GetAHBPrescaler>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	091b      	lsrs	r3, r3, #4
 800cc5e:	f003 030f 	and.w	r3, r3, #15
 800cc62:	4a03      	ldr	r2, [pc, #12]	@ (800cc70 <HAL_RCC_GetHCLKFreq+0x24>)
 800cc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc68:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	bd98      	pop	{r3, r4, r7, pc}
 800cc70:	08022094 	.word	0x08022094

0800cc74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc74:	b598      	push	{r3, r4, r7, lr}
 800cc76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800cc78:	f7ff ffe8 	bl	800cc4c <HAL_RCC_GetHCLKFreq>
 800cc7c:	4604      	mov	r4, r0
 800cc7e:	f7ff f9ef 	bl	800c060 <LL_RCC_GetAPB1Prescaler>
 800cc82:	4603      	mov	r3, r0
 800cc84:	0a1b      	lsrs	r3, r3, #8
 800cc86:	f003 0307 	and.w	r3, r3, #7
 800cc8a:	4a04      	ldr	r2, [pc, #16]	@ (800cc9c <HAL_RCC_GetPCLK1Freq+0x28>)
 800cc8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc90:	f003 031f 	and.w	r3, r3, #31
 800cc94:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	bd98      	pop	{r3, r4, r7, pc}
 800cc9c:	080220d4 	.word	0x080220d4

0800cca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cca0:	b598      	push	{r3, r4, r7, lr}
 800cca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800cca4:	f7ff ffd2 	bl	800cc4c <HAL_RCC_GetHCLKFreq>
 800cca8:	4604      	mov	r4, r0
 800ccaa:	f7ff f9e5 	bl	800c078 <LL_RCC_GetAPB2Prescaler>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	0adb      	lsrs	r3, r3, #11
 800ccb2:	f003 0307 	and.w	r3, r3, #7
 800ccb6:	4a04      	ldr	r2, [pc, #16]	@ (800ccc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ccb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccbc:	f003 031f 	and.w	r3, r3, #31
 800ccc0:	fa24 f303 	lsr.w	r3, r4, r3
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	bd98      	pop	{r3, r4, r7, pc}
 800ccc8:	080220d4 	.word	0x080220d4

0800cccc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800cccc:	b590      	push	{r4, r7, lr}
 800ccce:	b085      	sub	sp, #20
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2bb0      	cmp	r3, #176	@ 0xb0
 800ccd8:	d903      	bls.n	800cce2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800ccda:	4b15      	ldr	r3, [pc, #84]	@ (800cd30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ccdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccde:	60fb      	str	r3, [r7, #12]
 800cce0:	e007      	b.n	800ccf2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	091b      	lsrs	r3, r3, #4
 800cce6:	f003 030f 	and.w	r3, r3, #15
 800ccea:	4a11      	ldr	r2, [pc, #68]	@ (800cd30 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800ccec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccf0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800ccf2:	f7ff f9a7 	bl	800c044 <LL_RCC_GetAHB4Prescaler>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	091b      	lsrs	r3, r3, #4
 800ccfa:	f003 030f 	and.w	r3, r3, #15
 800ccfe:	4a0d      	ldr	r2, [pc, #52]	@ (800cd34 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800cd00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd04:	68fa      	ldr	r2, [r7, #12]
 800cd06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd0a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	4a0a      	ldr	r2, [pc, #40]	@ (800cd38 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800cd10:	fba2 2303 	umull	r2, r3, r2, r3
 800cd14:	0c9c      	lsrs	r4, r3, #18
 800cd16:	f7fe fee5 	bl	800bae4 <HAL_PWREx_GetVoltageRange>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f000 f80c 	bl	800cd3c <RCC_SetFlashLatency>
 800cd24:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3714      	adds	r7, #20
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd90      	pop	{r4, r7, pc}
 800cd2e:	bf00      	nop
 800cd30:	080220f4 	.word	0x080220f4
 800cd34:	08022094 	.word	0x08022094
 800cd38:	431bde83 	.word	0x431bde83

0800cd3c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800cd3c:	b590      	push	{r4, r7, lr}
 800cd3e:	b093      	sub	sp, #76	@ 0x4c
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800cd46:	4b37      	ldr	r3, [pc, #220]	@ (800ce24 <RCC_SetFlashLatency+0xe8>)
 800cd48:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800cd4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800cd52:	4a35      	ldr	r2, [pc, #212]	@ (800ce28 <RCC_SetFlashLatency+0xec>)
 800cd54:	f107 031c 	add.w	r3, r7, #28
 800cd58:	ca07      	ldmia	r2, {r0, r1, r2}
 800cd5a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800cd5e:	4b33      	ldr	r3, [pc, #204]	@ (800ce2c <RCC_SetFlashLatency+0xf0>)
 800cd60:	f107 040c 	add.w	r4, r7, #12
 800cd64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd74:	d11a      	bne.n	800cdac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cd76:	2300      	movs	r3, #0
 800cd78:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd7a:	e013      	b.n	800cda4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800cd7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	3348      	adds	r3, #72	@ 0x48
 800cd82:	443b      	add	r3, r7
 800cd84:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800cd88:	687a      	ldr	r2, [r7, #4]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d807      	bhi.n	800cd9e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cd8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	3348      	adds	r3, #72	@ 0x48
 800cd94:	443b      	add	r3, r7
 800cd96:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cd9a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800cd9c:	e020      	b.n	800cde0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cd9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cda0:	3301      	adds	r3, #1
 800cda2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cda4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d9e8      	bls.n	800cd7c <RCC_SetFlashLatency+0x40>
 800cdaa:	e019      	b.n	800cde0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cdac:	2300      	movs	r3, #0
 800cdae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdb0:	e013      	b.n	800cdda <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800cdb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	3348      	adds	r3, #72	@ 0x48
 800cdb8:	443b      	add	r3, r7
 800cdba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800cdbe:	687a      	ldr	r2, [r7, #4]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d807      	bhi.n	800cdd4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cdc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	3348      	adds	r3, #72	@ 0x48
 800cdca:	443b      	add	r3, r7
 800cdcc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cdd0:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800cdd2:	e005      	b.n	800cde0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cdd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cddc:	2b02      	cmp	r3, #2
 800cdde:	d9e8      	bls.n	800cdb2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800cde0:	4b13      	ldr	r3, [pc, #76]	@ (800ce30 <RCC_SetFlashLatency+0xf4>)
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f023 0207 	bic.w	r2, r3, #7
 800cde8:	4911      	ldr	r1, [pc, #68]	@ (800ce30 <RCC_SetFlashLatency+0xf4>)
 800cdea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdec:	4313      	orrs	r3, r2
 800cdee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cdf0:	f7fa fb38 	bl	8007464 <HAL_GetTick>
 800cdf4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cdf6:	e008      	b.n	800ce0a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cdf8:	f7fa fb34 	bl	8007464 <HAL_GetTick>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	2b02      	cmp	r3, #2
 800ce04:	d901      	bls.n	800ce0a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	e007      	b.n	800ce1a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ce0a:	4b09      	ldr	r3, [pc, #36]	@ (800ce30 <RCC_SetFlashLatency+0xf4>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 0307 	and.w	r3, r3, #7
 800ce12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d1ef      	bne.n	800cdf8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	374c      	adds	r7, #76	@ 0x4c
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd90      	pop	{r4, r7, pc}
 800ce22:	bf00      	nop
 800ce24:	0801fe80 	.word	0x0801fe80
 800ce28:	0801fe90 	.word	0x0801fe90
 800ce2c:	0801fe9c 	.word	0x0801fe9c
 800ce30:	58004000 	.word	0x58004000

0800ce34 <LL_RCC_LSE_IsEnabled>:
{
 800ce34:	b480      	push	{r7}
 800ce36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ce38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce40:	f003 0301 	and.w	r3, r3, #1
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d101      	bne.n	800ce4c <LL_RCC_LSE_IsEnabled+0x18>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e000      	b.n	800ce4e <LL_RCC_LSE_IsEnabled+0x1a>
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <LL_RCC_LSE_IsReady>:
{
 800ce58:	b480      	push	{r7}
 800ce5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ce5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce64:	f003 0302 	and.w	r3, r3, #2
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d101      	bne.n	800ce70 <LL_RCC_LSE_IsReady+0x18>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	e000      	b.n	800ce72 <LL_RCC_LSE_IsReady+0x1a>
 800ce70:	2300      	movs	r3, #0
}
 800ce72:	4618      	mov	r0, r3
 800ce74:	46bd      	mov	sp, r7
 800ce76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7a:	4770      	bx	lr

0800ce7c <LL_RCC_SetRFWKPClockSource>:
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b083      	sub	sp, #12
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ce84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ce90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <LL_RCC_SetSMPSClockSource>:
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ceb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ceb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb6:	f023 0203 	bic.w	r2, r3, #3
 800ceba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cec4:	bf00      	nop
 800cec6:	370c      	adds	r7, #12
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <LL_RCC_SetSMPSPrescaler>:
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ced8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cedc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cede:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800cee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4313      	orrs	r3, r2
 800ceea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ceec:	bf00      	nop
 800ceee:	370c      	adds	r7, #12
 800cef0:	46bd      	mov	sp, r7
 800cef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef6:	4770      	bx	lr

0800cef8 <LL_RCC_SetUSARTClockSource>:
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800cf00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf08:	f023 0203 	bic.w	r2, r3, #3
 800cf0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <LL_RCC_SetLPUARTClockSource>:
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cf2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf34:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cf38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	4313      	orrs	r3, r2
 800cf40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cf44:	bf00      	nop
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <LL_RCC_SetI2CClockSource>:
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cf58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf5c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	091b      	lsrs	r3, r3, #4
 800cf64:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cf68:	43db      	mvns	r3, r3
 800cf6a:	401a      	ands	r2, r3
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	011b      	lsls	r3, r3, #4
 800cf70:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cf74:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cf7e:	bf00      	nop
 800cf80:	370c      	adds	r7, #12
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr

0800cf8a <LL_RCC_SetLPTIMClockSource>:
{
 800cf8a:	b480      	push	{r7}
 800cf8c:	b083      	sub	sp, #12
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cf92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf96:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	0c1b      	lsrs	r3, r3, #16
 800cf9e:	041b      	lsls	r3, r3, #16
 800cfa0:	43db      	mvns	r3, r3
 800cfa2:	401a      	ands	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	041b      	lsls	r3, r3, #16
 800cfa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfac:	4313      	orrs	r3, r2
 800cfae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cfb2:	bf00      	nop
 800cfb4:	370c      	adds	r7, #12
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <LL_RCC_SetSAIClockSource>:
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	b083      	sub	sp, #12
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cfc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cfd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cfde:	bf00      	nop
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe8:	4770      	bx	lr

0800cfea <LL_RCC_SetRNGClockSource>:
{
 800cfea:	b480      	push	{r7}
 800cfec:	b083      	sub	sp, #12
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cffa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800cffe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	4313      	orrs	r3, r2
 800d006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d00a:	bf00      	nop
 800d00c:	370c      	adds	r7, #12
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr

0800d016 <LL_RCC_SetCLK48ClockSource>:
{
 800d016:	b480      	push	{r7}
 800d018:	b083      	sub	sp, #12
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800d01e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d026:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d02a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4313      	orrs	r3, r2
 800d032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d036:	bf00      	nop
 800d038:	370c      	adds	r7, #12
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <LL_RCC_SetUSBClockSource>:
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b082      	sub	sp, #8
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f7ff ffe3 	bl	800d016 <LL_RCC_SetCLK48ClockSource>
}
 800d050:	bf00      	nop
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <LL_RCC_SetADCClockSource>:
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800d060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d068:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d06c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	4313      	orrs	r3, r2
 800d074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <LL_RCC_SetRTCClockSource>:
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d08c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d098:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800d0a4:	bf00      	nop
 800d0a6:	370c      	adds	r7, #12
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr

0800d0b0 <LL_RCC_GetRTCClockSource>:
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d0b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0bc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr

0800d0ca <LL_RCC_ForceBackupDomainReset>:
{
 800d0ca:	b480      	push	{r7}
 800d0cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d0ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d0da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d0e2:	bf00      	nop
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr

0800d0ec <LL_RCC_ReleaseBackupDomainReset>:
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d0f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d0fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d104:	bf00      	nop
 800d106:	46bd      	mov	sp, r7
 800d108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10c:	4770      	bx	lr

0800d10e <LL_RCC_PLLSAI1_Enable>:
{
 800d10e:	b480      	push	{r7}
 800d110:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d112:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d11c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d120:	6013      	str	r3, [r2, #0]
}
 800d122:	bf00      	nop
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <LL_RCC_PLLSAI1_Disable>:
{
 800d12c:	b480      	push	{r7}
 800d12e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d13a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d13e:	6013      	str	r3, [r2, #0]
}
 800d140:	bf00      	nop
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <LL_RCC_PLLSAI1_IsReady>:
{
 800d14a:	b480      	push	{r7}
 800d14c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d14e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d158:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d15c:	d101      	bne.n	800d162 <LL_RCC_PLLSAI1_IsReady+0x18>
 800d15e:	2301      	movs	r3, #1
 800d160:	e000      	b.n	800d164 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr

0800d16e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b088      	sub	sp, #32
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d176:	2300      	movs	r3, #0
 800d178:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d17a:	2300      	movs	r3, #0
 800d17c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d186:	2b00      	cmp	r3, #0
 800d188:	d034      	beq.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d18e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d192:	d021      	beq.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d194:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d198:	d81b      	bhi.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d19a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d19e:	d01d      	beq.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d1a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d1a4:	d815      	bhi.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00b      	beq.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d1aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d1ae:	d110      	bne.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d1b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1b4:	68db      	ldr	r3, [r3, #12]
 800d1b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d1be:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d1c0:	e00d      	b.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3304      	adds	r3, #4
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 f947 	bl	800d45a <RCCEx_PLLSAI1_ConfigNP>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d1d0:	e005      	b.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	77fb      	strb	r3, [r7, #31]
        break;
 800d1d6:	e002      	b.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d1d8:	bf00      	nop
 800d1da:	e000      	b.n	800d1de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d1dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1de:	7ffb      	ldrb	r3, [r7, #31]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d105      	bne.n	800d1f0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7ff fee8 	bl	800cfbe <LL_RCC_SetSAIClockSource>
 800d1ee:	e001      	b.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1f0:	7ffb      	ldrb	r3, [r7, #31]
 800d1f2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d046      	beq.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d200:	f7ff ff56 	bl	800d0b0 <LL_RCC_GetRTCClockSource>
 800d204:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d20a:	69ba      	ldr	r2, [r7, #24]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	d03c      	beq.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d210:	f7fe fc58 	bl	800bac4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d105      	bne.n	800d226 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d21e:	4618      	mov	r0, r3
 800d220:	f7ff ff30 	bl	800d084 <LL_RCC_SetRTCClockSource>
 800d224:	e02e      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d22a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d22e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d230:	f7ff ff4b 	bl	800d0ca <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d234:	f7ff ff5a 	bl	800d0ec <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d242:	4313      	orrs	r3, r2
 800d244:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d246:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d250:	f7ff fdf0 	bl	800ce34 <LL_RCC_LSE_IsEnabled>
 800d254:	4603      	mov	r3, r0
 800d256:	2b01      	cmp	r3, #1
 800d258:	d114      	bne.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d25a:	f7fa f903 	bl	8007464 <HAL_GetTick>
 800d25e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d260:	e00b      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d262:	f7fa f8ff 	bl	8007464 <HAL_GetTick>
 800d266:	4602      	mov	r2, r0
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d270:	4293      	cmp	r3, r2
 800d272:	d902      	bls.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d274:	2303      	movs	r3, #3
 800d276:	77fb      	strb	r3, [r7, #31]
              break;
 800d278:	e004      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d27a:	f7ff fded 	bl	800ce58 <LL_RCC_LSE_IsReady>
 800d27e:	4603      	mov	r3, r0
 800d280:	2b01      	cmp	r3, #1
 800d282:	d1ee      	bne.n	800d262 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d284:	7ffb      	ldrb	r3, [r7, #31]
 800d286:	77bb      	strb	r3, [r7, #30]
 800d288:	e001      	b.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d28a:	7ffb      	ldrb	r3, [r7, #31]
 800d28c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	f003 0301 	and.w	r3, r3, #1
 800d296:	2b00      	cmp	r3, #0
 800d298:	d004      	beq.n	800d2a4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f7ff fe2a 	bl	800cef8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f003 0302 	and.w	r3, r3, #2
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d004      	beq.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	69db      	ldr	r3, [r3, #28]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f7ff fe35 	bl	800cf24 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f003 0310 	and.w	r3, r3, #16
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d004      	beq.n	800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7ff fe5d 	bl	800cf8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	f003 0320 	and.w	r3, r3, #32
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d004      	beq.n	800d2e6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7ff fe52 	bl	800cf8a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f003 0304 	and.w	r3, r3, #4
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d004      	beq.n	800d2fc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6a1b      	ldr	r3, [r3, #32]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f7ff fe2a 	bl	800cf50 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f003 0308 	and.w	r3, r3, #8
 800d304:	2b00      	cmp	r3, #0
 800d306:	d004      	beq.n	800d312 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7ff fe1f 	bl	800cf50 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d022      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff fe8d 	bl	800d042 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d32c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d330:	d107      	bne.n	800d342 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d33c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d340:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d346:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d34a:	d10b      	bne.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	3304      	adds	r3, #4
 800d350:	4618      	mov	r0, r3
 800d352:	f000 f8dd 	bl	800d510 <RCCEx_PLLSAI1_ConfigNQ>
 800d356:	4603      	mov	r3, r0
 800d358:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d35a:	7ffb      	ldrb	r3, [r7, #31]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d001      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d360:	7ffb      	ldrb	r3, [r7, #31]
 800d362:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d02b      	beq.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d378:	d008      	beq.n	800d38c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d37e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d382:	d003      	beq.n	800d38c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d105      	bne.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d390:	4618      	mov	r0, r3
 800d392:	f7ff fe2a 	bl	800cfea <LL_RCC_SetRNGClockSource>
 800d396:	e00a      	b.n	800d3ae <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d39c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d3a0:	60fb      	str	r3, [r7, #12]
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	f7ff fe21 	bl	800cfea <LL_RCC_SetRNGClockSource>
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f7ff fe34 	bl	800d016 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3b2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d3b6:	d107      	bne.n	800d3c8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d3b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d3c6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d022      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7ff fe3d 	bl	800d058 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3e6:	d107      	bne.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d3e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3f6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d400:	d10b      	bne.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	3304      	adds	r3, #4
 800d406:	4618      	mov	r0, r3
 800d408:	f000 f8dd 	bl	800d5c6 <RCCEx_PLLSAI1_ConfigNR>
 800d40c:	4603      	mov	r3, r0
 800d40e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d410:	7ffb      	ldrb	r3, [r7, #31]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d001      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d416:	7ffb      	ldrb	r3, [r7, #31]
 800d418:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d422:	2b00      	cmp	r3, #0
 800d424:	d004      	beq.n	800d430 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d42a:	4618      	mov	r0, r3
 800d42c:	f7ff fd26 	bl	800ce7c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d009      	beq.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d440:	4618      	mov	r0, r3
 800d442:	f7ff fd45 	bl	800ced0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff fd2c 	bl	800cea8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d450:	7fbb      	ldrb	r3, [r7, #30]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3720      	adds	r7, #32
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b084      	sub	sp, #16
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d462:	2300      	movs	r3, #0
 800d464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d466:	f7ff fe61 	bl	800d12c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d46a:	f7f9 fffb 	bl	8007464 <HAL_GetTick>
 800d46e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d470:	e009      	b.n	800d486 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d472:	f7f9 fff7 	bl	8007464 <HAL_GetTick>
 800d476:	4602      	mov	r2, r0
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	1ad3      	subs	r3, r2, r3
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d902      	bls.n	800d486 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d480:	2303      	movs	r3, #3
 800d482:	73fb      	strb	r3, [r7, #15]
      break;
 800d484:	e004      	b.n	800d490 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d486:	f7ff fe60 	bl	800d14a <LL_RCC_PLLSAI1_IsReady>
 800d48a:	4603      	mov	r3, r0
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d1f0      	bne.n	800d472 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d490:	7bfb      	ldrb	r3, [r7, #15]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d137      	bne.n	800d506 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d49a:	691b      	ldr	r3, [r3, #16]
 800d49c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	021b      	lsls	r3, r3, #8
 800d4a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d4ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d4c0:	4313      	orrs	r3, r2
 800d4c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d4c4:	f7ff fe23 	bl	800d10e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4c8:	f7f9 ffcc 	bl	8007464 <HAL_GetTick>
 800d4cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d4ce:	e009      	b.n	800d4e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d4d0:	f7f9 ffc8 	bl	8007464 <HAL_GetTick>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	1ad3      	subs	r3, r2, r3
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d902      	bls.n	800d4e4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d4de:	2303      	movs	r3, #3
 800d4e0:	73fb      	strb	r3, [r7, #15]
        break;
 800d4e2:	e004      	b.n	800d4ee <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d4e4:	f7ff fe31 	bl	800d14a <LL_RCC_PLLSAI1_IsReady>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d1f0      	bne.n	800d4d0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d4ee:	7bfb      	ldrb	r3, [r7, #15]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d108      	bne.n	800d506 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d4f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4f8:	691a      	ldr	r2, [r3, #16]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d502:	4313      	orrs	r3, r2
 800d504:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d506:	7bfb      	ldrb	r3, [r7, #15]
}
 800d508:	4618      	mov	r0, r3
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}

0800d510 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d51c:	f7ff fe06 	bl	800d12c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d520:	f7f9 ffa0 	bl	8007464 <HAL_GetTick>
 800d524:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d526:	e009      	b.n	800d53c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d528:	f7f9 ff9c 	bl	8007464 <HAL_GetTick>
 800d52c:	4602      	mov	r2, r0
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	1ad3      	subs	r3, r2, r3
 800d532:	2b02      	cmp	r3, #2
 800d534:	d902      	bls.n	800d53c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d536:	2303      	movs	r3, #3
 800d538:	73fb      	strb	r3, [r7, #15]
      break;
 800d53a:	e004      	b.n	800d546 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d53c:	f7ff fe05 	bl	800d14a <LL_RCC_PLLSAI1_IsReady>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d1f0      	bne.n	800d528 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d546:	7bfb      	ldrb	r3, [r7, #15]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d137      	bne.n	800d5bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d54c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d550:	691b      	ldr	r3, [r3, #16]
 800d552:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	021b      	lsls	r3, r3, #8
 800d55c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d560:	4313      	orrs	r3, r2
 800d562:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d568:	691b      	ldr	r3, [r3, #16]
 800d56a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	689b      	ldr	r3, [r3, #8]
 800d572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d576:	4313      	orrs	r3, r2
 800d578:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d57a:	f7ff fdc8 	bl	800d10e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d57e:	f7f9 ff71 	bl	8007464 <HAL_GetTick>
 800d582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d584:	e009      	b.n	800d59a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d586:	f7f9 ff6d 	bl	8007464 <HAL_GetTick>
 800d58a:	4602      	mov	r2, r0
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	1ad3      	subs	r3, r2, r3
 800d590:	2b02      	cmp	r3, #2
 800d592:	d902      	bls.n	800d59a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d594:	2303      	movs	r3, #3
 800d596:	73fb      	strb	r3, [r7, #15]
        break;
 800d598:	e004      	b.n	800d5a4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d59a:	f7ff fdd6 	bl	800d14a <LL_RCC_PLLSAI1_IsReady>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	d1f0      	bne.n	800d586 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d108      	bne.n	800d5bc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d5aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5ae:	691a      	ldr	r2, [r3, #16]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	691b      	ldr	r3, [r3, #16]
 800d5b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b084      	sub	sp, #16
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d5d2:	f7ff fdab 	bl	800d12c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d5d6:	f7f9 ff45 	bl	8007464 <HAL_GetTick>
 800d5da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5dc:	e009      	b.n	800d5f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d5de:	f7f9 ff41 	bl	8007464 <HAL_GetTick>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d902      	bls.n	800d5f2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d5f0:	e004      	b.n	800d5fc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d5f2:	f7ff fdaa 	bl	800d14a <LL_RCC_PLLSAI1_IsReady>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d1f0      	bne.n	800d5de <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d137      	bne.n	800d672 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d602:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d606:	691b      	ldr	r3, [r3, #16]
 800d608:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	021b      	lsls	r3, r3, #8
 800d612:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d616:	4313      	orrs	r3, r2
 800d618:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d61a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d61e:	691b      	ldr	r3, [r3, #16]
 800d620:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d62c:	4313      	orrs	r3, r2
 800d62e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d630:	f7ff fd6d 	bl	800d10e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d634:	f7f9 ff16 	bl	8007464 <HAL_GetTick>
 800d638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d63a:	e009      	b.n	800d650 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d63c:	f7f9 ff12 	bl	8007464 <HAL_GetTick>
 800d640:	4602      	mov	r2, r0
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	2b02      	cmp	r3, #2
 800d648:	d902      	bls.n	800d650 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d64a:	2303      	movs	r3, #3
 800d64c:	73fb      	strb	r3, [r7, #15]
        break;
 800d64e:	e004      	b.n	800d65a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d650:	f7ff fd7b 	bl	800d14a <LL_RCC_PLLSAI1_IsReady>
 800d654:	4603      	mov	r3, r0
 800d656:	2b01      	cmp	r3, #1
 800d658:	d1f0      	bne.n	800d63c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d65a:	7bfb      	ldrb	r3, [r7, #15]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d108      	bne.n	800d672 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d664:	691a      	ldr	r2, [r3, #16]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	691b      	ldr	r3, [r3, #16]
 800d66a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d66e:	4313      	orrs	r3, r2
 800d670:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d672:	7bfb      	ldrb	r3, [r7, #15]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	e09f      	b.n	800d7ce <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d694:	b2db      	uxtb	r3, r3
 800d696:	2b00      	cmp	r3, #0
 800d698:	d106      	bne.n	800d6a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f7f6 f94c 	bl	8003940 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2202      	movs	r2, #2
 800d6ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d6b0:	4b49      	ldr	r3, [pc, #292]	@ (800d7d8 <HAL_RTC_Init+0x15c>)
 800d6b2:	68db      	ldr	r3, [r3, #12]
 800d6b4:	f003 0310 	and.w	r3, r3, #16
 800d6b8:	2b10      	cmp	r3, #16
 800d6ba:	d07e      	beq.n	800d7ba <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	22ca      	movs	r2, #202	@ 0xca
 800d6c2:	625a      	str	r2, [r3, #36]	@ 0x24
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2253      	movs	r2, #83	@ 0x53
 800d6ca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 fa1d 	bl	800db0c <RTC_EnterInitMode>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d00a      	beq.n	800d6ee <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	22ff      	movs	r2, #255	@ 0xff
 800d6de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2204      	movs	r2, #4
 800d6e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	73fb      	strb	r3, [r7, #15]
 800d6ec:	e067      	b.n	800d7be <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	6812      	ldr	r2, [r2, #0]
 800d6f8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d6fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d700:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	6899      	ldr	r1, [r3, #8]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	691b      	ldr	r3, [r3, #16]
 800d710:	431a      	orrs	r2, r3
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	699b      	ldr	r3, [r3, #24]
 800d716:	431a      	orrs	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	430a      	orrs	r2, r1
 800d71e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	687a      	ldr	r2, [r7, #4]
 800d726:	68d2      	ldr	r2, [r2, #12]
 800d728:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6919      	ldr	r1, [r3, #16]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	041a      	lsls	r2, r3, #16
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	430a      	orrs	r2, r1
 800d73c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	68da      	ldr	r2, [r3, #12]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d74c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f022 0203 	bic.w	r2, r2, #3
 800d75c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	69da      	ldr	r2, [r3, #28]
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	695b      	ldr	r3, [r3, #20]
 800d76c:	431a      	orrs	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	430a      	orrs	r2, r1
 800d774:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	f003 0320 	and.w	r3, r3, #32
 800d780:	2b00      	cmp	r3, #0
 800d782:	d113      	bne.n	800d7ac <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f99b 	bl	800dac0 <HAL_RTC_WaitForSynchro>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00d      	beq.n	800d7ac <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	22ff      	movs	r2, #255	@ 0xff
 800d796:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2204      	movs	r2, #4
 800d79c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e010      	b.n	800d7ce <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	22ff      	movs	r2, #255	@ 0xff
 800d7b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	73fb      	strb	r3, [r7, #15]
 800d7b8:	e001      	b.n	800d7be <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d7be:	7bfb      	ldrb	r3, [r7, #15]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d103      	bne.n	800d7cc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	40002800 	.word	0x40002800

0800d7dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d7dc:	b590      	push	{r4, r7, lr}
 800d7de:	b087      	sub	sp, #28
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d101      	bne.n	800d7f6 <HAL_RTC_SetTime+0x1a>
 800d7f2:	2302      	movs	r3, #2
 800d7f4:	e0b2      	b.n	800d95c <HAL_RTC_SetTime+0x180>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2202      	movs	r2, #2
 800d802:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d126      	bne.n	800d85a <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d816:	2b00      	cmp	r3, #0
 800d818:	d102      	bne.n	800d820 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	2200      	movs	r2, #0
 800d81e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	4618      	mov	r0, r3
 800d826:	f000 f99b 	bl	800db60 <RTC_ByteToBcd2>
 800d82a:	4603      	mov	r3, r0
 800d82c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	785b      	ldrb	r3, [r3, #1]
 800d832:	4618      	mov	r0, r3
 800d834:	f000 f994 	bl	800db60 <RTC_ByteToBcd2>
 800d838:	4603      	mov	r3, r0
 800d83a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d83c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	789b      	ldrb	r3, [r3, #2]
 800d842:	4618      	mov	r0, r3
 800d844:	f000 f98c 	bl	800db60 <RTC_ByteToBcd2>
 800d848:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d84a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	78db      	ldrb	r3, [r3, #3]
 800d852:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d854:	4313      	orrs	r3, r2
 800d856:	617b      	str	r3, [r7, #20]
 800d858:	e018      	b.n	800d88c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	689b      	ldr	r3, [r3, #8]
 800d860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d864:	2b00      	cmp	r3, #0
 800d866:	d102      	bne.n	800d86e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	2200      	movs	r2, #0
 800d86c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	785b      	ldrb	r3, [r3, #1]
 800d878:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d87a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d87c:	68ba      	ldr	r2, [r7, #8]
 800d87e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d880:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	78db      	ldrb	r3, [r3, #3]
 800d886:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d888:	4313      	orrs	r3, r2
 800d88a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	22ca      	movs	r2, #202	@ 0xca
 800d892:	625a      	str	r2, [r3, #36]	@ 0x24
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2253      	movs	r2, #83	@ 0x53
 800d89a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f000 f935 	bl	800db0c <RTC_EnterInitMode>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00d      	beq.n	800d8c4 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	22ff      	movs	r2, #255	@ 0xff
 800d8ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2204      	movs	r2, #4
 800d8b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e04b      	b.n	800d95c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d8ce:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d8d2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	689a      	ldr	r2, [r3, #8]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d8e2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	6899      	ldr	r1, [r3, #8]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	68da      	ldr	r2, [r3, #12]
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	431a      	orrs	r2, r3
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	430a      	orrs	r2, r1
 800d8fa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	68da      	ldr	r2, [r3, #12]
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d90a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	f003 0320 	and.w	r3, r3, #32
 800d916:	2b00      	cmp	r3, #0
 800d918:	d113      	bne.n	800d942 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f000 f8d0 	bl	800dac0 <HAL_RTC_WaitForSynchro>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d00d      	beq.n	800d942 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	22ff      	movs	r2, #255	@ 0xff
 800d92c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2204      	movs	r2, #4
 800d932:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e00c      	b.n	800d95c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	22ff      	movs	r2, #255	@ 0xff
 800d948:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2201      	movs	r2, #1
 800d94e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2200      	movs	r2, #0
 800d956:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d95a:	2300      	movs	r3, #0
  }
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	371c      	adds	r7, #28
 800d960:	46bd      	mov	sp, r7
 800d962:	bd90      	pop	{r4, r7, pc}

0800d964 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d964:	b590      	push	{r4, r7, lr}
 800d966:	b087      	sub	sp, #28
 800d968:	af00      	add	r7, sp, #0
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d976:	2b01      	cmp	r3, #1
 800d978:	d101      	bne.n	800d97e <HAL_RTC_SetDate+0x1a>
 800d97a:	2302      	movs	r3, #2
 800d97c:	e09c      	b.n	800dab8 <HAL_RTC_SetDate+0x154>
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2201      	movs	r2, #1
 800d982:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2202      	movs	r2, #2
 800d98a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10e      	bne.n	800d9b2 <HAL_RTC_SetDate+0x4e>
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	785b      	ldrb	r3, [r3, #1]
 800d998:	f003 0310 	and.w	r3, r3, #16
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d008      	beq.n	800d9b2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	785b      	ldrb	r3, [r3, #1]
 800d9a4:	f023 0310 	bic.w	r3, r3, #16
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	330a      	adds	r3, #10
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d11c      	bne.n	800d9f2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	78db      	ldrb	r3, [r3, #3]
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f000 f8cf 	bl	800db60 <RTC_ByteToBcd2>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	785b      	ldrb	r3, [r3, #1]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f000 f8c8 	bl	800db60 <RTC_ByteToBcd2>
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d9d4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	789b      	ldrb	r3, [r3, #2]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f000 f8c0 	bl	800db60 <RTC_ByteToBcd2>
 800d9e0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d9e2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	617b      	str	r3, [r7, #20]
 800d9f0:	e00e      	b.n	800da10 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d9f2:	68bb      	ldr	r3, [r7, #8]
 800d9f4:	78db      	ldrb	r3, [r3, #3]
 800d9f6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	785b      	ldrb	r3, [r3, #1]
 800d9fc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d9fe:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800da00:	68ba      	ldr	r2, [r7, #8]
 800da02:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800da04:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800da0c:	4313      	orrs	r3, r2
 800da0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	22ca      	movs	r2, #202	@ 0xca
 800da16:	625a      	str	r2, [r3, #36]	@ 0x24
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	2253      	movs	r2, #83	@ 0x53
 800da1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f000 f873 	bl	800db0c <RTC_EnterInitMode>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00d      	beq.n	800da48 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	22ff      	movs	r2, #255	@ 0xff
 800da32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2204      	movs	r2, #4
 800da38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800da44:	2301      	movs	r3, #1
 800da46:	e037      	b.n	800dab8 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800da52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800da56:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	68da      	ldr	r2, [r3, #12]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800da66:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	689b      	ldr	r3, [r3, #8]
 800da6e:	f003 0320 	and.w	r3, r3, #32
 800da72:	2b00      	cmp	r3, #0
 800da74:	d113      	bne.n	800da9e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da76:	68f8      	ldr	r0, [r7, #12]
 800da78:	f000 f822 	bl	800dac0 <HAL_RTC_WaitForSynchro>
 800da7c:	4603      	mov	r3, r0
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00d      	beq.n	800da9e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	22ff      	movs	r2, #255	@ 0xff
 800da88:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2204      	movs	r2, #4
 800da8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2200      	movs	r2, #0
 800da96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800da9a:	2301      	movs	r3, #1
 800da9c:	e00c      	b.n	800dab8 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	22ff      	movs	r2, #255	@ 0xff
 800daa4:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2201      	movs	r2, #1
 800daaa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2200      	movs	r2, #0
 800dab2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800dab6:	2300      	movs	r3, #0
  }
}
 800dab8:	4618      	mov	r0, r3
 800daba:	371c      	adds	r7, #28
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd90      	pop	{r4, r7, pc}

0800dac0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68da      	ldr	r2, [r3, #12]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800dad6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dad8:	f7f9 fcc4 	bl	8007464 <HAL_GetTick>
 800dadc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800dade:	e009      	b.n	800daf4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dae0:	f7f9 fcc0 	bl	8007464 <HAL_GetTick>
 800dae4:	4602      	mov	r2, r0
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	1ad3      	subs	r3, r2, r3
 800daea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800daee:	d901      	bls.n	800daf4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e007      	b.n	800db04 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	f003 0320 	and.w	r3, r3, #32
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d0ee      	beq.n	800dae0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800db02:	2300      	movs	r3, #0
}
 800db04:	4618      	mov	r0, r3
 800db06:	3710      	adds	r7, #16
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d119      	bne.n	800db56 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	f04f 32ff 	mov.w	r2, #4294967295
 800db2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800db2c:	f7f9 fc9a 	bl	8007464 <HAL_GetTick>
 800db30:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800db32:	e009      	b.n	800db48 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800db34:	f7f9 fc96 	bl	8007464 <HAL_GetTick>
 800db38:	4602      	mov	r2, r0
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800db42:	d901      	bls.n	800db48 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800db44:	2303      	movs	r3, #3
 800db46:	e007      	b.n	800db58 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db52:	2b00      	cmp	r3, #0
 800db54:	d0ee      	beq.n	800db34 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800db56:	2300      	movs	r3, #0
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800db60:	b480      	push	{r7}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
 800db66:	4603      	mov	r3, r0
 800db68:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800db6a:	2300      	movs	r3, #0
 800db6c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800db6e:	79fb      	ldrb	r3, [r7, #7]
 800db70:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800db72:	e005      	b.n	800db80 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	3301      	adds	r3, #1
 800db78:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800db7a:	7afb      	ldrb	r3, [r7, #11]
 800db7c:	3b0a      	subs	r3, #10
 800db7e:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800db80:	7afb      	ldrb	r3, [r7, #11]
 800db82:	2b09      	cmp	r3, #9
 800db84:	d8f6      	bhi.n	800db74 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	7afb      	ldrb	r3, [r7, #11]
 800db90:	4313      	orrs	r3, r2
 800db92:	b2db      	uxtb	r3, r3
}
 800db94:	4618      	mov	r0, r3
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b086      	sub	sp, #24
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	60b9      	str	r1, [r7, #8]
 800dbaa:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dbb2:	2b01      	cmp	r3, #1
 800dbb4:	d101      	bne.n	800dbba <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800dbb6:	2302      	movs	r3, #2
 800dbb8:	e0a8      	b.n	800dd0c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2201      	movs	r2, #1
 800dbbe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2202      	movs	r2, #2
 800dbc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	22ca      	movs	r2, #202	@ 0xca
 800dbd0:	625a      	str	r2, [r3, #36]	@ 0x24
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2253      	movs	r2, #83	@ 0x53
 800dbd8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d020      	beq.n	800dc2a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800dbe8:	f7f9 fc3c 	bl	8007464 <HAL_GetTick>
 800dbec:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dbee:	e015      	b.n	800dc1c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dbf0:	f7f9 fc38 	bl	8007464 <HAL_GetTick>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dbfe:	d90d      	bls.n	800dc1c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	22ff      	movs	r2, #255	@ 0xff
 800dc06:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2203      	movs	r2, #3
 800dc0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800dc18:	2303      	movs	r3, #3
 800dc1a:	e077      	b.n	800dd0c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	f003 0304 	and.w	r3, r3, #4
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1e2      	bne.n	800dbf0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	689a      	ldr	r2, [r3, #8]
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dc38:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68db      	ldr	r3, [r3, #12]
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800dc4a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dc4c:	f7f9 fc0a 	bl	8007464 <HAL_GetTick>
 800dc50:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dc52:	e015      	b.n	800dc80 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dc54:	f7f9 fc06 	bl	8007464 <HAL_GetTick>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	1ad3      	subs	r3, r2, r3
 800dc5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dc62:	d90d      	bls.n	800dc80 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	22ff      	movs	r2, #255	@ 0xff
 800dc6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2203      	movs	r2, #3
 800dc70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800dc7c:	2303      	movs	r3, #3
 800dc7e:	e045      	b.n	800dd0c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68db      	ldr	r3, [r3, #12]
 800dc86:	f003 0304 	and.w	r3, r3, #4
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d0e2      	beq.n	800dc54 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	689a      	ldr	r2, [r3, #8]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f022 0207 	bic.w	r2, r2, #7
 800dca4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	6899      	ldr	r1, [r3, #8]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	430a      	orrs	r2, r1
 800dcb4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800dcb6:	4b17      	ldr	r3, [pc, #92]	@ (800dd14 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dcb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dcbc:	4a15      	ldr	r2, [pc, #84]	@ (800dd14 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dcbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dcc2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800dcc6:	4b13      	ldr	r3, [pc, #76]	@ (800dd14 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a12      	ldr	r2, [pc, #72]	@ (800dd14 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dccc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dcd0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	689a      	ldr	r2, [r3, #8]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dce0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	689a      	ldr	r2, [r3, #8]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dcf0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	22ff      	movs	r2, #255	@ 0xff
 800dcf8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2201      	movs	r2, #1
 800dcfe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2200      	movs	r2, #0
 800dd06:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dd0a:	2300      	movs	r3, #0
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	58000800 	.word	0x58000800

0800dd18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d101      	bne.n	800dd2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dd26:	2301      	movs	r3, #1
 800dd28:	e095      	b.n	800de56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d108      	bne.n	800dd44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd3a:	d009      	beq.n	800dd50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	61da      	str	r2, [r3, #28]
 800dd42:	e005      	b.n	800dd50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	2200      	movs	r2, #0
 800dd54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d106      	bne.n	800dd70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f7f5 fe90 	bl	8003a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2202      	movs	r2, #2
 800dd74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dd90:	d902      	bls.n	800dd98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dd92:	2300      	movs	r3, #0
 800dd94:	60fb      	str	r3, [r7, #12]
 800dd96:	e002      	b.n	800dd9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dd98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	68db      	ldr	r3, [r3, #12]
 800dda2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800dda6:	d007      	beq.n	800ddb8 <HAL_SPI_Init+0xa0>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ddb0:	d002      	beq.n	800ddb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	689b      	ldr	r3, [r3, #8]
 800ddc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ddc8:	431a      	orrs	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	691b      	ldr	r3, [r3, #16]
 800ddce:	f003 0302 	and.w	r3, r3, #2
 800ddd2:	431a      	orrs	r2, r3
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	695b      	ldr	r3, [r3, #20]
 800ddd8:	f003 0301 	and.w	r3, r3, #1
 800dddc:	431a      	orrs	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	699b      	ldr	r3, [r3, #24]
 800dde2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dde6:	431a      	orrs	r2, r3
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	69db      	ldr	r3, [r3, #28]
 800ddec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ddf0:	431a      	orrs	r2, r3
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6a1b      	ldr	r3, [r3, #32]
 800ddf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ddfa:	ea42 0103 	orr.w	r1, r2, r3
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	430a      	orrs	r2, r1
 800de0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	699b      	ldr	r3, [r3, #24]
 800de12:	0c1b      	lsrs	r3, r3, #16
 800de14:	f003 0204 	and.w	r2, r3, #4
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de1c:	f003 0310 	and.w	r3, r3, #16
 800de20:	431a      	orrs	r2, r3
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800de26:	f003 0308 	and.w	r3, r3, #8
 800de2a:	431a      	orrs	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800de34:	ea42 0103 	orr.w	r1, r2, r3
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	430a      	orrs	r2, r1
 800de44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800de54:	2300      	movs	r3, #0
}
 800de56:	4618      	mov	r0, r3
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}

0800de5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de5e:	b580      	push	{r7, lr}
 800de60:	b088      	sub	sp, #32
 800de62:	af00      	add	r7, sp, #0
 800de64:	60f8      	str	r0, [r7, #12]
 800de66:	60b9      	str	r1, [r7, #8]
 800de68:	603b      	str	r3, [r7, #0]
 800de6a:	4613      	mov	r3, r2
 800de6c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800de6e:	f7f9 faf9 	bl	8007464 <HAL_GetTick>
 800de72:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800de74:	88fb      	ldrh	r3, [r7, #6]
 800de76:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	2b01      	cmp	r3, #1
 800de82:	d001      	beq.n	800de88 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800de84:	2302      	movs	r3, #2
 800de86:	e15c      	b.n	800e142 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d002      	beq.n	800de94 <HAL_SPI_Transmit+0x36>
 800de8e:	88fb      	ldrh	r3, [r7, #6]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d101      	bne.n	800de98 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800de94:	2301      	movs	r3, #1
 800de96:	e154      	b.n	800e142 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d101      	bne.n	800dea6 <HAL_SPI_Transmit+0x48>
 800dea2:	2302      	movs	r3, #2
 800dea4:	e14d      	b.n	800e142 <HAL_SPI_Transmit+0x2e4>
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2201      	movs	r2, #1
 800deaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2203      	movs	r2, #3
 800deb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	2200      	movs	r2, #0
 800deba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	68ba      	ldr	r2, [r7, #8]
 800dec0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	88fa      	ldrh	r2, [r7, #6]
 800dec6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	88fa      	ldrh	r2, [r7, #6]
 800decc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	2200      	movs	r2, #0
 800ded2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2200      	movs	r2, #0
 800dee0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2200      	movs	r2, #0
 800dee8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800def8:	d10f      	bne.n	800df1a <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800df08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	681a      	ldr	r2, [r3, #0]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800df18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df24:	2b40      	cmp	r3, #64	@ 0x40
 800df26:	d007      	beq.n	800df38 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	68db      	ldr	r3, [r3, #12]
 800df3c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800df40:	d952      	bls.n	800dfe8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d002      	beq.n	800df50 <HAL_SPI_Transmit+0xf2>
 800df4a:	8b7b      	ldrh	r3, [r7, #26]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d145      	bne.n	800dfdc <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df54:	881a      	ldrh	r2, [r3, #0]
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df60:	1c9a      	adds	r2, r3, #2
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	3b01      	subs	r3, #1
 800df6e:	b29a      	uxth	r2, r3
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800df74:	e032      	b.n	800dfdc <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	f003 0302 	and.w	r3, r3, #2
 800df80:	2b02      	cmp	r3, #2
 800df82:	d112      	bne.n	800dfaa <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df88:	881a      	ldrh	r2, [r3, #0]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df94:	1c9a      	adds	r2, r3, #2
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dfa8:	e018      	b.n	800dfdc <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfaa:	f7f9 fa5b 	bl	8007464 <HAL_GetTick>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	1ad3      	subs	r3, r2, r3
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d803      	bhi.n	800dfc2 <HAL_SPI_Transmit+0x164>
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfc0:	d102      	bne.n	800dfc8 <HAL_SPI_Transmit+0x16a>
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d109      	bne.n	800dfdc <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800dfd8:	2303      	movs	r3, #3
 800dfda:	e0b2      	b.n	800e142 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1c7      	bne.n	800df76 <HAL_SPI_Transmit+0x118>
 800dfe6:	e083      	b.n	800e0f0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d002      	beq.n	800dff6 <HAL_SPI_Transmit+0x198>
 800dff0:	8b7b      	ldrh	r3, [r7, #26]
 800dff2:	2b01      	cmp	r3, #1
 800dff4:	d177      	bne.n	800e0e6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d912      	bls.n	800e026 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e004:	881a      	ldrh	r2, [r3, #0]
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e010:	1c9a      	adds	r2, r3, #2
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	3b02      	subs	r3, #2
 800e01e:	b29a      	uxth	r2, r3
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e024:	e05f      	b.n	800e0e6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	330c      	adds	r3, #12
 800e030:	7812      	ldrb	r2, [r2, #0]
 800e032:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e038:	1c5a      	adds	r2, r3, #1
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e042:	b29b      	uxth	r3, r3
 800e044:	3b01      	subs	r3, #1
 800e046:	b29a      	uxth	r2, r3
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800e04c:	e04b      	b.n	800e0e6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	689b      	ldr	r3, [r3, #8]
 800e054:	f003 0302 	and.w	r3, r3, #2
 800e058:	2b02      	cmp	r3, #2
 800e05a:	d12b      	bne.n	800e0b4 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e060:	b29b      	uxth	r3, r3
 800e062:	2b01      	cmp	r3, #1
 800e064:	d912      	bls.n	800e08c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e06a:	881a      	ldrh	r2, [r3, #0]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e076:	1c9a      	adds	r2, r3, #2
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e080:	b29b      	uxth	r3, r3
 800e082:	3b02      	subs	r3, #2
 800e084:	b29a      	uxth	r2, r3
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e08a:	e02c      	b.n	800e0e6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	330c      	adds	r3, #12
 800e096:	7812      	ldrb	r2, [r2, #0]
 800e098:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e09e:	1c5a      	adds	r2, r3, #1
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0a8:	b29b      	uxth	r3, r3
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e0b2:	e018      	b.n	800e0e6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0b4:	f7f9 f9d6 	bl	8007464 <HAL_GetTick>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	683a      	ldr	r2, [r7, #0]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d803      	bhi.n	800e0cc <HAL_SPI_Transmit+0x26e>
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ca:	d102      	bne.n	800e0d2 <HAL_SPI_Transmit+0x274>
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d109      	bne.n	800e0e6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e0e2:	2303      	movs	r3, #3
 800e0e4:	e02d      	b.n	800e142 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0ea:	b29b      	uxth	r3, r3
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1ae      	bne.n	800e04e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e0f0:	69fa      	ldr	r2, [r7, #28]
 800e0f2:	6839      	ldr	r1, [r7, #0]
 800e0f4:	68f8      	ldr	r0, [r7, #12]
 800e0f6:	f000 fe09 	bl	800ed0c <SPI_EndRxTxTransaction>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2220      	movs	r2, #32
 800e104:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d10a      	bne.n	800e124 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e10e:	2300      	movs	r3, #0
 800e110:	617b      	str	r3, [r7, #20]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	617b      	str	r3, [r7, #20]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	617b      	str	r3, [r7, #20]
 800e122:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2201      	movs	r2, #1
 800e128:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d001      	beq.n	800e140 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800e13c:	2301      	movs	r3, #1
 800e13e:	e000      	b.n	800e142 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800e140:	2300      	movs	r3, #0
  }
}
 800e142:	4618      	mov	r0, r3
 800e144:	3720      	adds	r7, #32
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}

0800e14a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e14a:	b580      	push	{r7, lr}
 800e14c:	b088      	sub	sp, #32
 800e14e:	af02      	add	r7, sp, #8
 800e150:	60f8      	str	r0, [r7, #12]
 800e152:	60b9      	str	r1, [r7, #8]
 800e154:	603b      	str	r3, [r7, #0]
 800e156:	4613      	mov	r3, r2
 800e158:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e160:	b2db      	uxtb	r3, r3
 800e162:	2b01      	cmp	r3, #1
 800e164:	d001      	beq.n	800e16a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800e166:	2302      	movs	r3, #2
 800e168:	e123      	b.n	800e3b2 <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <HAL_SPI_Receive+0x2c>
 800e170:	88fb      	ldrh	r3, [r7, #6]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800e176:	2301      	movs	r3, #1
 800e178:	e11b      	b.n	800e3b2 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e182:	d112      	bne.n	800e1aa <HAL_SPI_Receive+0x60>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10e      	bne.n	800e1aa <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2204      	movs	r2, #4
 800e190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e194:	88fa      	ldrh	r2, [r7, #6]
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	4613      	mov	r3, r2
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	68b9      	ldr	r1, [r7, #8]
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f000 f90a 	bl	800e3ba <HAL_SPI_TransmitReceive>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	e103      	b.n	800e3b2 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1aa:	f7f9 f95b 	bl	8007464 <HAL_GetTick>
 800e1ae:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d101      	bne.n	800e1be <HAL_SPI_Receive+0x74>
 800e1ba:	2302      	movs	r3, #2
 800e1bc:	e0f9      	b.n	800e3b2 <HAL_SPI_Receive+0x268>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2204      	movs	r2, #4
 800e1ca:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	68ba      	ldr	r2, [r7, #8]
 800e1d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	88fa      	ldrh	r2, [r7, #6]
 800e1de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	88fa      	ldrh	r2, [r7, #6]
 800e1e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2200      	movs	r2, #0
 800e200:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2200      	movs	r2, #0
 800e206:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	68db      	ldr	r3, [r3, #12]
 800e20c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e210:	d908      	bls.n	800e224 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	685a      	ldr	r2, [r3, #4]
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e220:	605a      	str	r2, [r3, #4]
 800e222:	e007      	b.n	800e234 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	685a      	ldr	r2, [r3, #4]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e232:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e23c:	d10f      	bne.n	800e25e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e24c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e25c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e268:	2b40      	cmp	r3, #64	@ 0x40
 800e26a:	d007      	beq.n	800e27c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e27a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e284:	d875      	bhi.n	800e372 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e286:	e037      	b.n	800e2f8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	f003 0301 	and.w	r3, r3, #1
 800e292:	2b01      	cmp	r3, #1
 800e294:	d117      	bne.n	800e2c6 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	f103 020c 	add.w	r2, r3, #12
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2a2:	7812      	ldrb	r2, [r2, #0]
 800e2a4:	b2d2      	uxtb	r2, r2
 800e2a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e2b8:	b29b      	uxth	r3, r3
 800e2ba:	3b01      	subs	r3, #1
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e2c4:	e018      	b.n	800e2f8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2c6:	f7f9 f8cd 	bl	8007464 <HAL_GetTick>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	1ad3      	subs	r3, r2, r3
 800e2d0:	683a      	ldr	r2, [r7, #0]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d803      	bhi.n	800e2de <HAL_SPI_Receive+0x194>
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2dc:	d102      	bne.n	800e2e4 <HAL_SPI_Receive+0x19a>
 800e2de:	683b      	ldr	r3, [r7, #0]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d109      	bne.n	800e2f8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	e05c      	b.n	800e3b2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1c1      	bne.n	800e288 <HAL_SPI_Receive+0x13e>
 800e304:	e03b      	b.n	800e37e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	f003 0301 	and.w	r3, r3, #1
 800e310:	2b01      	cmp	r3, #1
 800e312:	d115      	bne.n	800e340 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	68da      	ldr	r2, [r3, #12]
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e31e:	b292      	uxth	r2, r2
 800e320:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e326:	1c9a      	adds	r2, r3, #2
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e332:	b29b      	uxth	r3, r3
 800e334:	3b01      	subs	r3, #1
 800e336:	b29a      	uxth	r2, r3
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e33e:	e018      	b.n	800e372 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e340:	f7f9 f890 	bl	8007464 <HAL_GetTick>
 800e344:	4602      	mov	r2, r0
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	1ad3      	subs	r3, r2, r3
 800e34a:	683a      	ldr	r2, [r7, #0]
 800e34c:	429a      	cmp	r2, r3
 800e34e:	d803      	bhi.n	800e358 <HAL_SPI_Receive+0x20e>
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e356:	d102      	bne.n	800e35e <HAL_SPI_Receive+0x214>
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d109      	bne.n	800e372 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2201      	movs	r2, #1
 800e362:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800e36e:	2303      	movs	r3, #3
 800e370:	e01f      	b.n	800e3b2 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e378:	b29b      	uxth	r3, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1c3      	bne.n	800e306 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e37e:	697a      	ldr	r2, [r7, #20]
 800e380:	6839      	ldr	r1, [r7, #0]
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 fc6a 	bl	800ec5c <SPI_EndRxTransaction>
 800e388:	4603      	mov	r3, r0
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d002      	beq.n	800e394 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2220      	movs	r2, #32
 800e392:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2201      	movs	r2, #1
 800e398:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d001      	beq.n	800e3b0 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	e000      	b.n	800e3b2 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800e3b0:	2300      	movs	r3, #0
  }
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3718      	adds	r7, #24
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b08a      	sub	sp, #40	@ 0x28
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	60f8      	str	r0, [r7, #12]
 800e3c2:	60b9      	str	r1, [r7, #8]
 800e3c4:	607a      	str	r2, [r7, #4]
 800e3c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e3cc:	f7f9 f84a 	bl	8007464 <HAL_GetTick>
 800e3d0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e3d8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e3e0:	887b      	ldrh	r3, [r7, #2]
 800e3e2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800e3e4:	887b      	ldrh	r3, [r7, #2]
 800e3e6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e3e8:	7ffb      	ldrb	r3, [r7, #31]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d00c      	beq.n	800e408 <HAL_SPI_TransmitReceive+0x4e>
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e3f4:	d106      	bne.n	800e404 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d102      	bne.n	800e404 <HAL_SPI_TransmitReceive+0x4a>
 800e3fe:	7ffb      	ldrb	r3, [r7, #31]
 800e400:	2b04      	cmp	r3, #4
 800e402:	d001      	beq.n	800e408 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e404:	2302      	movs	r3, #2
 800e406:	e1f3      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d005      	beq.n	800e41a <HAL_SPI_TransmitReceive+0x60>
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d002      	beq.n	800e41a <HAL_SPI_TransmitReceive+0x60>
 800e414:	887b      	ldrh	r3, [r7, #2]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800e41a:	2301      	movs	r3, #1
 800e41c:	e1e8      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e424:	2b01      	cmp	r3, #1
 800e426:	d101      	bne.n	800e42c <HAL_SPI_TransmitReceive+0x72>
 800e428:	2302      	movs	r3, #2
 800e42a:	e1e1      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x436>
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2201      	movs	r2, #1
 800e430:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b04      	cmp	r3, #4
 800e43e:	d003      	beq.n	800e448 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	2205      	movs	r2, #5
 800e444:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	687a      	ldr	r2, [r7, #4]
 800e452:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	887a      	ldrh	r2, [r7, #2]
 800e458:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	887a      	ldrh	r2, [r7, #2]
 800e460:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	68ba      	ldr	r2, [r7, #8]
 800e468:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	887a      	ldrh	r2, [r7, #2]
 800e46e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	887a      	ldrh	r2, [r7, #2]
 800e474:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2200      	movs	r2, #0
 800e47a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e48a:	d802      	bhi.n	800e492 <HAL_SPI_TransmitReceive+0xd8>
 800e48c:	8abb      	ldrh	r3, [r7, #20]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d908      	bls.n	800e4a4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	685a      	ldr	r2, [r3, #4]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e4a0:	605a      	str	r2, [r3, #4]
 800e4a2:	e007      	b.n	800e4b4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	685a      	ldr	r2, [r3, #4]
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e4b2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4be:	2b40      	cmp	r3, #64	@ 0x40
 800e4c0:	d007      	beq.n	800e4d2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e4da:	f240 8083 	bls.w	800e5e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	685b      	ldr	r3, [r3, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d002      	beq.n	800e4ec <HAL_SPI_TransmitReceive+0x132>
 800e4e6:	8afb      	ldrh	r3, [r7, #22]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d16f      	bne.n	800e5cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4f0:	881a      	ldrh	r2, [r3, #0]
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4fc:	1c9a      	adds	r2, r3, #2
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e506:	b29b      	uxth	r3, r3
 800e508:	3b01      	subs	r3, #1
 800e50a:	b29a      	uxth	r2, r3
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e510:	e05c      	b.n	800e5cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	f003 0302 	and.w	r3, r3, #2
 800e51c:	2b02      	cmp	r3, #2
 800e51e:	d11b      	bne.n	800e558 <HAL_SPI_TransmitReceive+0x19e>
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e524:	b29b      	uxth	r3, r3
 800e526:	2b00      	cmp	r3, #0
 800e528:	d016      	beq.n	800e558 <HAL_SPI_TransmitReceive+0x19e>
 800e52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e52c:	2b01      	cmp	r3, #1
 800e52e:	d113      	bne.n	800e558 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e534:	881a      	ldrh	r2, [r3, #0]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e540:	1c9a      	adds	r2, r3, #2
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	3b01      	subs	r3, #1
 800e54e:	b29a      	uxth	r2, r3
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e554:	2300      	movs	r3, #0
 800e556:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f003 0301 	and.w	r3, r3, #1
 800e562:	2b01      	cmp	r3, #1
 800e564:	d11c      	bne.n	800e5a0 <HAL_SPI_TransmitReceive+0x1e6>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e56c:	b29b      	uxth	r3, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d016      	beq.n	800e5a0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	68da      	ldr	r2, [r3, #12]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e57c:	b292      	uxth	r2, r2
 800e57e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e584:	1c9a      	adds	r2, r3, #2
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e590:	b29b      	uxth	r3, r3
 800e592:	3b01      	subs	r3, #1
 800e594:	b29a      	uxth	r2, r3
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e59c:	2301      	movs	r3, #1
 800e59e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e5a0:	f7f8 ff60 	bl	8007464 <HAL_GetTick>
 800e5a4:	4602      	mov	r2, r0
 800e5a6:	6a3b      	ldr	r3, [r7, #32]
 800e5a8:	1ad3      	subs	r3, r2, r3
 800e5aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d80d      	bhi.n	800e5cc <HAL_SPI_TransmitReceive+0x212>
 800e5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5b6:	d009      	beq.n	800e5cc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e5c8:	2303      	movs	r3, #3
 800e5ca:	e111      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d19d      	bne.n	800e512 <HAL_SPI_TransmitReceive+0x158>
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d197      	bne.n	800e512 <HAL_SPI_TransmitReceive+0x158>
 800e5e2:	e0e5      	b.n	800e7b0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d003      	beq.n	800e5f4 <HAL_SPI_TransmitReceive+0x23a>
 800e5ec:	8afb      	ldrh	r3, [r7, #22]
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	f040 80d1 	bne.w	800e796 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d912      	bls.n	800e624 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e602:	881a      	ldrh	r2, [r3, #0]
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e60e:	1c9a      	adds	r2, r3, #2
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e618:	b29b      	uxth	r3, r3
 800e61a:	3b02      	subs	r3, #2
 800e61c:	b29a      	uxth	r2, r3
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e622:	e0b8      	b.n	800e796 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	330c      	adds	r3, #12
 800e62e:	7812      	ldrb	r2, [r2, #0]
 800e630:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e636:	1c5a      	adds	r2, r3, #1
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e640:	b29b      	uxth	r3, r3
 800e642:	3b01      	subs	r3, #1
 800e644:	b29a      	uxth	r2, r3
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e64a:	e0a4      	b.n	800e796 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	689b      	ldr	r3, [r3, #8]
 800e652:	f003 0302 	and.w	r3, r3, #2
 800e656:	2b02      	cmp	r3, #2
 800e658:	d134      	bne.n	800e6c4 <HAL_SPI_TransmitReceive+0x30a>
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e65e:	b29b      	uxth	r3, r3
 800e660:	2b00      	cmp	r3, #0
 800e662:	d02f      	beq.n	800e6c4 <HAL_SPI_TransmitReceive+0x30a>
 800e664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e666:	2b01      	cmp	r3, #1
 800e668:	d12c      	bne.n	800e6c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e66e:	b29b      	uxth	r3, r3
 800e670:	2b01      	cmp	r3, #1
 800e672:	d912      	bls.n	800e69a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e678:	881a      	ldrh	r2, [r3, #0]
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e684:	1c9a      	adds	r2, r3, #2
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e68e:	b29b      	uxth	r3, r3
 800e690:	3b02      	subs	r3, #2
 800e692:	b29a      	uxth	r2, r3
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e698:	e012      	b.n	800e6c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	330c      	adds	r3, #12
 800e6a4:	7812      	ldrb	r2, [r2, #0]
 800e6a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e6ac:	1c5a      	adds	r2, r3, #1
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	689b      	ldr	r3, [r3, #8]
 800e6ca:	f003 0301 	and.w	r3, r3, #1
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	d148      	bne.n	800e764 <HAL_SPI_TransmitReceive+0x3aa>
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d042      	beq.n	800e764 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d923      	bls.n	800e732 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	68da      	ldr	r2, [r3, #12]
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6f4:	b292      	uxth	r2, r2
 800e6f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e6fc:	1c9a      	adds	r2, r3, #2
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e708:	b29b      	uxth	r3, r3
 800e70a:	3b02      	subs	r3, #2
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	2b01      	cmp	r3, #1
 800e71e:	d81f      	bhi.n	800e760 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	685a      	ldr	r2, [r3, #4]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e72e:	605a      	str	r2, [r3, #4]
 800e730:	e016      	b.n	800e760 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f103 020c 	add.w	r2, r3, #12
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e73e:	7812      	ldrb	r2, [r2, #0]
 800e740:	b2d2      	uxtb	r2, r2
 800e742:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e748:	1c5a      	adds	r2, r3, #1
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e754:	b29b      	uxth	r3, r3
 800e756:	3b01      	subs	r3, #1
 800e758:	b29a      	uxth	r2, r3
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e760:	2301      	movs	r3, #1
 800e762:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e764:	f7f8 fe7e 	bl	8007464 <HAL_GetTick>
 800e768:	4602      	mov	r2, r0
 800e76a:	6a3b      	ldr	r3, [r7, #32]
 800e76c:	1ad3      	subs	r3, r2, r3
 800e76e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e770:	429a      	cmp	r2, r3
 800e772:	d803      	bhi.n	800e77c <HAL_SPI_TransmitReceive+0x3c2>
 800e774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77a:	d102      	bne.n	800e782 <HAL_SPI_TransmitReceive+0x3c8>
 800e77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d109      	bne.n	800e796 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2201      	movs	r2, #1
 800e786:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800e792:	2303      	movs	r3, #3
 800e794:	e02c      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	f47f af55 	bne.w	800e64c <HAL_SPI_TransmitReceive+0x292>
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	f47f af4e 	bne.w	800e64c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e7b0:	6a3a      	ldr	r2, [r7, #32]
 800e7b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f000 faa9 	bl	800ed0c <SPI_EndRxTxTransaction>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d008      	beq.n	800e7d2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2220      	movs	r2, #32
 800e7c4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e00e      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e000      	b.n	800e7f0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800e7ee:	2300      	movs	r3, #0
  }
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3728      	adds	r7, #40	@ 0x28
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b088      	sub	sp, #32
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e816:	2b00      	cmp	r3, #0
 800e818:	d10e      	bne.n	800e838 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e81a:	69bb      	ldr	r3, [r7, #24]
 800e81c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e820:	2b00      	cmp	r3, #0
 800e822:	d009      	beq.n	800e838 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d004      	beq.n	800e838 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	4798      	blx	r3
    return;
 800e836:	e0ce      	b.n	800e9d6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e838:	69bb      	ldr	r3, [r7, #24]
 800e83a:	f003 0302 	and.w	r3, r3, #2
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d009      	beq.n	800e856 <HAL_SPI_IRQHandler+0x5e>
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d004      	beq.n	800e856 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	4798      	blx	r3
    return;
 800e854:	e0bf      	b.n	800e9d6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	f003 0320 	and.w	r3, r3, #32
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d10a      	bne.n	800e876 <HAL_SPI_IRQHandler+0x7e>
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e866:	2b00      	cmp	r3, #0
 800e868:	d105      	bne.n	800e876 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e870:	2b00      	cmp	r3, #0
 800e872:	f000 80b0 	beq.w	800e9d6 <HAL_SPI_IRQHandler+0x1de>
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	f003 0320 	and.w	r3, r3, #32
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	f000 80aa 	beq.w	800e9d6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e882:	69bb      	ldr	r3, [r7, #24]
 800e884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d023      	beq.n	800e8d4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e892:	b2db      	uxtb	r3, r3
 800e894:	2b03      	cmp	r3, #3
 800e896:	d011      	beq.n	800e8bc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e89c:	f043 0204 	orr.w	r2, r3, #4
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	617b      	str	r3, [r7, #20]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	68db      	ldr	r3, [r3, #12]
 800e8ae:	617b      	str	r3, [r7, #20]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	689b      	ldr	r3, [r3, #8]
 800e8b6:	617b      	str	r3, [r7, #20]
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	e00b      	b.n	800e8d4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8bc:	2300      	movs	r3, #0
 800e8be:	613b      	str	r3, [r7, #16]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	613b      	str	r3, [r7, #16]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	689b      	ldr	r3, [r3, #8]
 800e8ce:	613b      	str	r3, [r7, #16]
 800e8d0:	693b      	ldr	r3, [r7, #16]
        return;
 800e8d2:	e080      	b.n	800e9d6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	f003 0320 	and.w	r3, r3, #32
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d014      	beq.n	800e908 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8e2:	f043 0201 	orr.w	r2, r3, #1
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	60fb      	str	r3, [r7, #12]
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	60fb      	str	r3, [r7, #12]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	681a      	ldr	r2, [r3, #0]
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00c      	beq.n	800e92c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e916:	f043 0208 	orr.w	r2, r3, #8
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e91e:	2300      	movs	r3, #0
 800e920:	60bb      	str	r3, [r7, #8]
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	60bb      	str	r3, [r7, #8]
 800e92a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e930:	2b00      	cmp	r3, #0
 800e932:	d04f      	beq.n	800e9d4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	685a      	ldr	r2, [r3, #4]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e942:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2201      	movs	r2, #1
 800e948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	f003 0302 	and.w	r3, r3, #2
 800e952:	2b00      	cmp	r3, #0
 800e954:	d104      	bne.n	800e960 <HAL_SPI_IRQHandler+0x168>
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	f003 0301 	and.w	r3, r3, #1
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d034      	beq.n	800e9ca <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	685a      	ldr	r2, [r3, #4]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f022 0203 	bic.w	r2, r2, #3
 800e96e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e974:	2b00      	cmp	r3, #0
 800e976:	d011      	beq.n	800e99c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e97c:	4a17      	ldr	r2, [pc, #92]	@ (800e9dc <HAL_SPI_IRQHandler+0x1e4>)
 800e97e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e984:	4618      	mov	r0, r3
 800e986:	f7fa f92d 	bl	8008be4 <HAL_DMA_Abort_IT>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d005      	beq.n	800e99c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e994:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d016      	beq.n	800e9d2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9a8:	4a0c      	ldr	r2, [pc, #48]	@ (800e9dc <HAL_SPI_IRQHandler+0x1e4>)
 800e9aa:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7fa f917 	bl	8008be4 <HAL_DMA_Abort_IT>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00a      	beq.n	800e9d2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800e9c8:	e003      	b.n	800e9d2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f000 f808 	bl	800e9e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e9d0:	e000      	b.n	800e9d4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800e9d2:	bf00      	nop
    return;
 800e9d4:	bf00      	nop
  }
}
 800e9d6:	3720      	adds	r7, #32
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	0800e9f5 	.word	0x0800e9f5

0800e9e0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b084      	sub	sp, #16
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea00:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f7ff ffe5 	bl	800e9e0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea16:	bf00      	nop
 800ea18:	3710      	adds	r7, #16
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
	...

0800ea20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b088      	sub	sp, #32
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	60f8      	str	r0, [r7, #12]
 800ea28:	60b9      	str	r1, [r7, #8]
 800ea2a:	603b      	str	r3, [r7, #0]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ea30:	f7f8 fd18 	bl	8007464 <HAL_GetTick>
 800ea34:	4602      	mov	r2, r0
 800ea36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea38:	1a9b      	subs	r3, r3, r2
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	4413      	add	r3, r2
 800ea3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ea40:	f7f8 fd10 	bl	8007464 <HAL_GetTick>
 800ea44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ea46:	4b39      	ldr	r3, [pc, #228]	@ (800eb2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	015b      	lsls	r3, r3, #5
 800ea4c:	0d1b      	lsrs	r3, r3, #20
 800ea4e:	69fa      	ldr	r2, [r7, #28]
 800ea50:	fb02 f303 	mul.w	r3, r2, r3
 800ea54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ea56:	e054      	b.n	800eb02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea5e:	d050      	beq.n	800eb02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ea60:	f7f8 fd00 	bl	8007464 <HAL_GetTick>
 800ea64:	4602      	mov	r2, r0
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	1ad3      	subs	r3, r2, r3
 800ea6a:	69fa      	ldr	r2, [r7, #28]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d902      	bls.n	800ea76 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d13d      	bne.n	800eaf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	685a      	ldr	r2, [r3, #4]
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ea84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ea8e:	d111      	bne.n	800eab4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ea98:	d004      	beq.n	800eaa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	689b      	ldr	r3, [r3, #8]
 800ea9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eaa2:	d107      	bne.n	800eab4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	681a      	ldr	r2, [r3, #0]
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eab2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eabc:	d10f      	bne.n	800eade <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	681a      	ldr	r2, [r3, #0]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800eacc:	601a      	str	r2, [r3, #0]
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800eadc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2201      	movs	r2, #1
 800eae2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2200      	movs	r2, #0
 800eaea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800eaee:	2303      	movs	r3, #3
 800eaf0:	e017      	b.n	800eb22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d101      	bne.n	800eafc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	3b01      	subs	r3, #1
 800eb00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	689a      	ldr	r2, [r3, #8]
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	4013      	ands	r3, r2
 800eb0c:	68ba      	ldr	r2, [r7, #8]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	bf0c      	ite	eq
 800eb12:	2301      	moveq	r3, #1
 800eb14:	2300      	movne	r3, #0
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	461a      	mov	r2, r3
 800eb1a:	79fb      	ldrb	r3, [r7, #7]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d19b      	bne.n	800ea58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800eb20:	2300      	movs	r3, #0
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3720      	adds	r7, #32
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	2000002c 	.word	0x2000002c

0800eb30 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b08a      	sub	sp, #40	@ 0x28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
 800eb3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800eb42:	f7f8 fc8f 	bl	8007464 <HAL_GetTick>
 800eb46:	4602      	mov	r2, r0
 800eb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4a:	1a9b      	subs	r3, r3, r2
 800eb4c:	683a      	ldr	r2, [r7, #0]
 800eb4e:	4413      	add	r3, r2
 800eb50:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800eb52:	f7f8 fc87 	bl	8007464 <HAL_GetTick>
 800eb56:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	330c      	adds	r3, #12
 800eb5e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800eb60:	4b3d      	ldr	r3, [pc, #244]	@ (800ec58 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800eb62:	681a      	ldr	r2, [r3, #0]
 800eb64:	4613      	mov	r3, r2
 800eb66:	009b      	lsls	r3, r3, #2
 800eb68:	4413      	add	r3, r2
 800eb6a:	00da      	lsls	r2, r3, #3
 800eb6c:	1ad3      	subs	r3, r2, r3
 800eb6e:	0d1b      	lsrs	r3, r3, #20
 800eb70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb72:	fb02 f303 	mul.w	r3, r2, r3
 800eb76:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800eb78:	e060      	b.n	800ec3c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800eb80:	d107      	bne.n	800eb92 <SPI_WaitFifoStateUntilTimeout+0x62>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d104      	bne.n	800eb92 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800eb90:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb98:	d050      	beq.n	800ec3c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb9a:	f7f8 fc63 	bl	8007464 <HAL_GetTick>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	6a3b      	ldr	r3, [r7, #32]
 800eba2:	1ad3      	subs	r3, r2, r3
 800eba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d902      	bls.n	800ebb0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d13d      	bne.n	800ec2c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	685a      	ldr	r2, [r3, #4]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ebbe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	685b      	ldr	r3, [r3, #4]
 800ebc4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ebc8:	d111      	bne.n	800ebee <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ebd2:	d004      	beq.n	800ebde <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ebdc:	d107      	bne.n	800ebee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	681a      	ldr	r2, [r3, #0]
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ebec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ebf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ebf6:	d10f      	bne.n	800ec18 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ec06:	601a      	str	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	681a      	ldr	r2, [r3, #0]
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ec16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2200      	movs	r2, #0
 800ec24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	e010      	b.n	800ec4e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d101      	bne.n	800ec36 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ec32:	2300      	movs	r3, #0
 800ec34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	3b01      	subs	r3, #1
 800ec3a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	689a      	ldr	r2, [r3, #8]
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	4013      	ands	r3, r2
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d196      	bne.n	800eb7a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ec4c:	2300      	movs	r3, #0
}
 800ec4e:	4618      	mov	r0, r3
 800ec50:	3728      	adds	r7, #40	@ 0x28
 800ec52:	46bd      	mov	sp, r7
 800ec54:	bd80      	pop	{r7, pc}
 800ec56:	bf00      	nop
 800ec58:	2000002c 	.word	0x2000002c

0800ec5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b086      	sub	sp, #24
 800ec60:	af02      	add	r7, sp, #8
 800ec62:	60f8      	str	r0, [r7, #12]
 800ec64:	60b9      	str	r1, [r7, #8]
 800ec66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec70:	d111      	bne.n	800ec96 <SPI_EndRxTransaction+0x3a>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	689b      	ldr	r3, [r3, #8]
 800ec76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec7a:	d004      	beq.n	800ec86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	689b      	ldr	r3, [r3, #8]
 800ec80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec84:	d107      	bne.n	800ec96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ec94:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	9300      	str	r3, [sp, #0]
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	2180      	movs	r1, #128	@ 0x80
 800eca0:	68f8      	ldr	r0, [r7, #12]
 800eca2:	f7ff febd 	bl	800ea20 <SPI_WaitFlagStateUntilTimeout>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d007      	beq.n	800ecbc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ecb0:	f043 0220 	orr.w	r2, r3, #32
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e023      	b.n	800ed04 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ecc4:	d11d      	bne.n	800ed02 <SPI_EndRxTransaction+0xa6>
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ecce:	d004      	beq.n	800ecda <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	689b      	ldr	r3, [r3, #8]
 800ecd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ecd8:	d113      	bne.n	800ed02 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	9300      	str	r3, [sp, #0]
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	2200      	movs	r2, #0
 800ece2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f7ff ff22 	bl	800eb30 <SPI_WaitFifoStateUntilTimeout>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d007      	beq.n	800ed02 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ecf6:	f043 0220 	orr.w	r2, r3, #32
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800ecfe:	2303      	movs	r3, #3
 800ed00:	e000      	b.n	800ed04 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b086      	sub	sp, #24
 800ed10:	af02      	add	r7, sp, #8
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	9300      	str	r3, [sp, #0]
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800ed24:	68f8      	ldr	r0, [r7, #12]
 800ed26:	f7ff ff03 	bl	800eb30 <SPI_WaitFifoStateUntilTimeout>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d007      	beq.n	800ed40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed34:	f043 0220 	orr.w	r2, r3, #32
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ed3c:	2303      	movs	r3, #3
 800ed3e:	e027      	b.n	800ed90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2200      	movs	r2, #0
 800ed48:	2180      	movs	r1, #128	@ 0x80
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f7ff fe68 	bl	800ea20 <SPI_WaitFlagStateUntilTimeout>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d007      	beq.n	800ed66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed5a:	f043 0220 	orr.w	r2, r3, #32
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ed62:	2303      	movs	r3, #3
 800ed64:	e014      	b.n	800ed90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	9300      	str	r3, [sp, #0]
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ed72:	68f8      	ldr	r0, [r7, #12]
 800ed74:	f7ff fedc 	bl	800eb30 <SPI_WaitFifoStateUntilTimeout>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d007      	beq.n	800ed8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed82:	f043 0220 	orr.w	r2, r3, #32
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ed8a:	2303      	movs	r3, #3
 800ed8c:	e000      	b.n	800ed90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ed8e:	2300      	movs	r3, #0
}
 800ed90:	4618      	mov	r0, r3
 800ed92:	3710      	adds	r7, #16
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}

0800ed98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d101      	bne.n	800edaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eda6:	2301      	movs	r3, #1
 800eda8:	e049      	b.n	800ee3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d106      	bne.n	800edc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2200      	movs	r2, #0
 800edba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7f7 fed2 	bl	8006b68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2202      	movs	r2, #2
 800edc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	3304      	adds	r3, #4
 800edd4:	4619      	mov	r1, r3
 800edd6:	4610      	mov	r0, r2
 800edd8:	f000 fafc 	bl	800f3d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2201      	movs	r2, #1
 800ede0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2201      	movs	r2, #1
 800edf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2201      	movs	r2, #1
 800edf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	2201      	movs	r2, #1
 800ee08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2201      	movs	r2, #1
 800ee10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2201      	movs	r2, #1
 800ee18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2201      	movs	r2, #1
 800ee28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2201      	movs	r2, #1
 800ee30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2201      	movs	r2, #1
 800ee38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee3c:	2300      	movs	r3, #0
}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
	...

0800ee48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b085      	sub	sp, #20
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee56:	b2db      	uxtb	r3, r3
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d001      	beq.n	800ee60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e02e      	b.n	800eebe <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2202      	movs	r2, #2
 800ee64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a17      	ldr	r2, [pc, #92]	@ (800eecc <HAL_TIM_Base_Start+0x84>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d004      	beq.n	800ee7c <HAL_TIM_Base_Start+0x34>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee7a:	d115      	bne.n	800eea8 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	689a      	ldr	r2, [r3, #8]
 800ee82:	4b13      	ldr	r3, [pc, #76]	@ (800eed0 <HAL_TIM_Base_Start+0x88>)
 800ee84:	4013      	ands	r3, r2
 800ee86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b06      	cmp	r3, #6
 800ee8c:	d015      	beq.n	800eeba <HAL_TIM_Base_Start+0x72>
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee94:	d011      	beq.n	800eeba <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	681a      	ldr	r2, [r3, #0]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f042 0201 	orr.w	r2, r2, #1
 800eea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eea6:	e008      	b.n	800eeba <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f042 0201 	orr.w	r2, r2, #1
 800eeb6:	601a      	str	r2, [r3, #0]
 800eeb8:	e000      	b.n	800eebc <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eeba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3714      	adds	r7, #20
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	40012c00 	.word	0x40012c00
 800eed0:	00010007 	.word	0x00010007

0800eed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d001      	beq.n	800eeec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eee8:	2301      	movs	r3, #1
 800eeea:	e036      	b.n	800ef5a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2202      	movs	r2, #2
 800eef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	68da      	ldr	r2, [r3, #12]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f042 0201 	orr.w	r2, r2, #1
 800ef02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4a17      	ldr	r2, [pc, #92]	@ (800ef68 <HAL_TIM_Base_Start_IT+0x94>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d004      	beq.n	800ef18 <HAL_TIM_Base_Start_IT+0x44>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef16:	d115      	bne.n	800ef44 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	689a      	ldr	r2, [r3, #8]
 800ef1e:	4b13      	ldr	r3, [pc, #76]	@ (800ef6c <HAL_TIM_Base_Start_IT+0x98>)
 800ef20:	4013      	ands	r3, r2
 800ef22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	2b06      	cmp	r3, #6
 800ef28:	d015      	beq.n	800ef56 <HAL_TIM_Base_Start_IT+0x82>
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef30:	d011      	beq.n	800ef56 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f042 0201 	orr.w	r2, r2, #1
 800ef40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef42:	e008      	b.n	800ef56 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	f042 0201 	orr.w	r2, r2, #1
 800ef52:	601a      	str	r2, [r3, #0]
 800ef54:	e000      	b.n	800ef58 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3714      	adds	r7, #20
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr
 800ef66:	bf00      	nop
 800ef68:	40012c00 	.word	0x40012c00
 800ef6c:	00010007 	.word	0x00010007

0800ef70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ef70:	b480      	push	{r7}
 800ef72:	b083      	sub	sp, #12
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68da      	ldr	r2, [r3, #12]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f022 0201 	bic.w	r2, r2, #1
 800ef86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6a1a      	ldr	r2, [r3, #32]
 800ef8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ef92:	4013      	ands	r3, r2
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d10f      	bne.n	800efb8 <HAL_TIM_Base_Stop_IT+0x48>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	6a1a      	ldr	r2, [r3, #32]
 800ef9e:	f240 4344 	movw	r3, #1092	@ 0x444
 800efa2:	4013      	ands	r3, r2
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d107      	bne.n	800efb8 <HAL_TIM_Base_Stop_IT+0x48>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f022 0201 	bic.w	r2, r2, #1
 800efb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2201      	movs	r2, #1
 800efbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	370c      	adds	r7, #12
 800efc6:	46bd      	mov	sp, r7
 800efc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efcc:	4770      	bx	lr

0800efce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b084      	sub	sp, #16
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	691b      	ldr	r3, [r3, #16]
 800efe4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	f003 0302 	and.w	r3, r3, #2
 800efec:	2b00      	cmp	r3, #0
 800efee:	d020      	beq.n	800f032 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	f003 0302 	and.w	r3, r3, #2
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d01b      	beq.n	800f032 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f06f 0202 	mvn.w	r2, #2
 800f002:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	699b      	ldr	r3, [r3, #24]
 800f010:	f003 0303 	and.w	r3, r3, #3
 800f014:	2b00      	cmp	r3, #0
 800f016:	d003      	beq.n	800f020 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f000 f9bc 	bl	800f396 <HAL_TIM_IC_CaptureCallback>
 800f01e:	e005      	b.n	800f02c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f020:	6878      	ldr	r0, [r7, #4]
 800f022:	f000 f9ae 	bl	800f382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f026:	6878      	ldr	r0, [r7, #4]
 800f028:	f000 f9bf 	bl	800f3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2200      	movs	r2, #0
 800f030:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	f003 0304 	and.w	r3, r3, #4
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d020      	beq.n	800f07e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f003 0304 	and.w	r3, r3, #4
 800f042:	2b00      	cmp	r3, #0
 800f044:	d01b      	beq.n	800f07e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	f06f 0204 	mvn.w	r2, #4
 800f04e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2202      	movs	r2, #2
 800f054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	699b      	ldr	r3, [r3, #24]
 800f05c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f060:	2b00      	cmp	r3, #0
 800f062:	d003      	beq.n	800f06c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f064:	6878      	ldr	r0, [r7, #4]
 800f066:	f000 f996 	bl	800f396 <HAL_TIM_IC_CaptureCallback>
 800f06a:	e005      	b.n	800f078 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 f988 	bl	800f382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 f999 	bl	800f3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2200      	movs	r2, #0
 800f07c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	f003 0308 	and.w	r3, r3, #8
 800f084:	2b00      	cmp	r3, #0
 800f086:	d020      	beq.n	800f0ca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f003 0308 	and.w	r3, r3, #8
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d01b      	beq.n	800f0ca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f06f 0208 	mvn.w	r2, #8
 800f09a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	2204      	movs	r2, #4
 800f0a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	69db      	ldr	r3, [r3, #28]
 800f0a8:	f003 0303 	and.w	r3, r3, #3
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 f970 	bl	800f396 <HAL_TIM_IC_CaptureCallback>
 800f0b6:	e005      	b.n	800f0c4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 f962 	bl	800f382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f000 f973 	bl	800f3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	f003 0310 	and.w	r3, r3, #16
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d020      	beq.n	800f116 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f003 0310 	and.w	r3, r3, #16
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d01b      	beq.n	800f116 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f06f 0210 	mvn.w	r2, #16
 800f0e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2208      	movs	r2, #8
 800f0ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	69db      	ldr	r3, [r3, #28]
 800f0f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d003      	beq.n	800f104 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f000 f94a 	bl	800f396 <HAL_TIM_IC_CaptureCallback>
 800f102:	e005      	b.n	800f110 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f000 f93c 	bl	800f382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	f000 f94d 	bl	800f3aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	f003 0301 	and.w	r3, r3, #1
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d00c      	beq.n	800f13a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f003 0301 	and.w	r3, r3, #1
 800f126:	2b00      	cmp	r3, #0
 800f128:	d007      	beq.n	800f13a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f06f 0201 	mvn.w	r2, #1
 800f132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f000 f91a 	bl	800f36e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f140:	2b00      	cmp	r3, #0
 800f142:	d104      	bne.n	800f14e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d00c      	beq.n	800f168 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f154:	2b00      	cmp	r3, #0
 800f156:	d007      	beq.n	800f168 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 faac 	bl	800f6c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00c      	beq.n	800f18c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d007      	beq.n	800f18c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f186:	6878      	ldr	r0, [r7, #4]
 800f188:	f000 faa4 	bl	800f6d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00c      	beq.n	800f1b0 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d007      	beq.n	800f1b0 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f1a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f000 f907 	bl	800f3be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	f003 0320 	and.w	r3, r3, #32
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00c      	beq.n	800f1d4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f003 0320 	and.w	r3, r3, #32
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d007      	beq.n	800f1d4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	f06f 0220 	mvn.w	r2, #32
 800f1cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f000 fa6c 	bl	800f6ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1d4:	bf00      	nop
 800f1d6:	3710      	adds	r7, #16
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	bd80      	pop	{r7, pc}

0800f1dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f1dc:	b580      	push	{r7, lr}
 800f1de:	b084      	sub	sp, #16
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
 800f1e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d101      	bne.n	800f1f8 <HAL_TIM_ConfigClockSource+0x1c>
 800f1f4:	2302      	movs	r3, #2
 800f1f6:	e0b6      	b.n	800f366 <HAL_TIM_ConfigClockSource+0x18a>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2202      	movs	r2, #2
 800f204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	689b      	ldr	r3, [r3, #8]
 800f20e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f216:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f21a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f222:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	68ba      	ldr	r2, [r7, #8]
 800f22a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f234:	d03e      	beq.n	800f2b4 <HAL_TIM_ConfigClockSource+0xd8>
 800f236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f23a:	f200 8087 	bhi.w	800f34c <HAL_TIM_ConfigClockSource+0x170>
 800f23e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f242:	f000 8086 	beq.w	800f352 <HAL_TIM_ConfigClockSource+0x176>
 800f246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f24a:	d87f      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x170>
 800f24c:	2b70      	cmp	r3, #112	@ 0x70
 800f24e:	d01a      	beq.n	800f286 <HAL_TIM_ConfigClockSource+0xaa>
 800f250:	2b70      	cmp	r3, #112	@ 0x70
 800f252:	d87b      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x170>
 800f254:	2b60      	cmp	r3, #96	@ 0x60
 800f256:	d050      	beq.n	800f2fa <HAL_TIM_ConfigClockSource+0x11e>
 800f258:	2b60      	cmp	r3, #96	@ 0x60
 800f25a:	d877      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x170>
 800f25c:	2b50      	cmp	r3, #80	@ 0x50
 800f25e:	d03c      	beq.n	800f2da <HAL_TIM_ConfigClockSource+0xfe>
 800f260:	2b50      	cmp	r3, #80	@ 0x50
 800f262:	d873      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x170>
 800f264:	2b40      	cmp	r3, #64	@ 0x40
 800f266:	d058      	beq.n	800f31a <HAL_TIM_ConfigClockSource+0x13e>
 800f268:	2b40      	cmp	r3, #64	@ 0x40
 800f26a:	d86f      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x170>
 800f26c:	2b30      	cmp	r3, #48	@ 0x30
 800f26e:	d064      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x15e>
 800f270:	2b30      	cmp	r3, #48	@ 0x30
 800f272:	d86b      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x170>
 800f274:	2b20      	cmp	r3, #32
 800f276:	d060      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x15e>
 800f278:	2b20      	cmp	r3, #32
 800f27a:	d867      	bhi.n	800f34c <HAL_TIM_ConfigClockSource+0x170>
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d05c      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x15e>
 800f280:	2b10      	cmp	r3, #16
 800f282:	d05a      	beq.n	800f33a <HAL_TIM_ConfigClockSource+0x15e>
 800f284:	e062      	b.n	800f34c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f296:	f000 f989 	bl	800f5ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	689b      	ldr	r3, [r3, #8]
 800f2a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f2a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68ba      	ldr	r2, [r7, #8]
 800f2b0:	609a      	str	r2, [r3, #8]
      break;
 800f2b2:	e04f      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f2c4:	f000 f972 	bl	800f5ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	689a      	ldr	r2, [r3, #8]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f2d6:	609a      	str	r2, [r3, #8]
      break;
 800f2d8:	e03c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	f000 f8e4 	bl	800f4b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2150      	movs	r1, #80	@ 0x50
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f000 f93d 	bl	800f572 <TIM_ITRx_SetConfig>
      break;
 800f2f8:	e02c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f306:	461a      	mov	r2, r3
 800f308:	f000 f903 	bl	800f512 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2160      	movs	r1, #96	@ 0x60
 800f312:	4618      	mov	r0, r3
 800f314:	f000 f92d 	bl	800f572 <TIM_ITRx_SetConfig>
      break;
 800f318:	e01c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f326:	461a      	mov	r2, r3
 800f328:	f000 f8c4 	bl	800f4b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	2140      	movs	r1, #64	@ 0x40
 800f332:	4618      	mov	r0, r3
 800f334:	f000 f91d 	bl	800f572 <TIM_ITRx_SetConfig>
      break;
 800f338:	e00c      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4619      	mov	r1, r3
 800f344:	4610      	mov	r0, r2
 800f346:	f000 f914 	bl	800f572 <TIM_ITRx_SetConfig>
      break;
 800f34a:	e003      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f34c:	2301      	movs	r3, #1
 800f34e:	73fb      	strb	r3, [r7, #15]
      break;
 800f350:	e000      	b.n	800f354 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2201      	movs	r2, #1
 800f358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f364:	7bfb      	ldrb	r3, [r7, #15]
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}

0800f36e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f36e:	b480      	push	{r7}
 800f370:	b083      	sub	sp, #12
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f376:	bf00      	nop
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr

0800f382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f382:	b480      	push	{r7}
 800f384:	b083      	sub	sp, #12
 800f386:	af00      	add	r7, sp, #0
 800f388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f38a:	bf00      	nop
 800f38c:	370c      	adds	r7, #12
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr

0800f396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f396:	b480      	push	{r7}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f39e:	bf00      	nop
 800f3a0:	370c      	adds	r7, #12
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr

0800f3aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f3aa:	b480      	push	{r7}
 800f3ac:	b083      	sub	sp, #12
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f3b2:	bf00      	nop
 800f3b4:	370c      	adds	r7, #12
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3bc:	4770      	bx	lr

0800f3be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f3be:	b480      	push	{r7}
 800f3c0:	b083      	sub	sp, #12
 800f3c2:	af00      	add	r7, sp, #0
 800f3c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f3c6:	bf00      	nop
 800f3c8:	370c      	adds	r7, #12
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
	...

0800f3d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b085      	sub	sp, #20
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a30      	ldr	r2, [pc, #192]	@ (800f4a8 <TIM_Base_SetConfig+0xd4>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d003      	beq.n	800f3f4 <TIM_Base_SetConfig+0x20>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3f2:	d108      	bne.n	800f406 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	68fa      	ldr	r2, [r7, #12]
 800f402:	4313      	orrs	r3, r2
 800f404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4a27      	ldr	r2, [pc, #156]	@ (800f4a8 <TIM_Base_SetConfig+0xd4>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d00b      	beq.n	800f426 <TIM_Base_SetConfig+0x52>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f414:	d007      	beq.n	800f426 <TIM_Base_SetConfig+0x52>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	4a24      	ldr	r2, [pc, #144]	@ (800f4ac <TIM_Base_SetConfig+0xd8>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d003      	beq.n	800f426 <TIM_Base_SetConfig+0x52>
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	4a23      	ldr	r2, [pc, #140]	@ (800f4b0 <TIM_Base_SetConfig+0xdc>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d108      	bne.n	800f438 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f42c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	68fa      	ldr	r2, [r7, #12]
 800f434:	4313      	orrs	r3, r2
 800f436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	695b      	ldr	r3, [r3, #20]
 800f442:	4313      	orrs	r3, r2
 800f444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	68fa      	ldr	r2, [r7, #12]
 800f44a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	689a      	ldr	r2, [r3, #8]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	4a12      	ldr	r2, [pc, #72]	@ (800f4a8 <TIM_Base_SetConfig+0xd4>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d007      	beq.n	800f474 <TIM_Base_SetConfig+0xa0>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	4a11      	ldr	r2, [pc, #68]	@ (800f4ac <TIM_Base_SetConfig+0xd8>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d003      	beq.n	800f474 <TIM_Base_SetConfig+0xa0>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	4a10      	ldr	r2, [pc, #64]	@ (800f4b0 <TIM_Base_SetConfig+0xdc>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d103      	bne.n	800f47c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	691a      	ldr	r2, [r3, #16]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2201      	movs	r2, #1
 800f480:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	691b      	ldr	r3, [r3, #16]
 800f486:	f003 0301 	and.w	r3, r3, #1
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d105      	bne.n	800f49a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	691b      	ldr	r3, [r3, #16]
 800f492:	f023 0201 	bic.w	r2, r3, #1
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	611a      	str	r2, [r3, #16]
  }
}
 800f49a:	bf00      	nop
 800f49c:	3714      	adds	r7, #20
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a4:	4770      	bx	lr
 800f4a6:	bf00      	nop
 800f4a8:	40012c00 	.word	0x40012c00
 800f4ac:	40014400 	.word	0x40014400
 800f4b0:	40014800 	.word	0x40014800

0800f4b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b087      	sub	sp, #28
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	60f8      	str	r0, [r7, #12]
 800f4bc:	60b9      	str	r1, [r7, #8]
 800f4be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6a1b      	ldr	r3, [r3, #32]
 800f4c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6a1b      	ldr	r3, [r3, #32]
 800f4ca:	f023 0201 	bic.w	r2, r3, #1
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4d8:	693b      	ldr	r3, [r7, #16]
 800f4da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f4de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	011b      	lsls	r3, r3, #4
 800f4e4:	693a      	ldr	r2, [r7, #16]
 800f4e6:	4313      	orrs	r3, r2
 800f4e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	f023 030a 	bic.w	r3, r3, #10
 800f4f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f4f2:	697a      	ldr	r2, [r7, #20]
 800f4f4:	68bb      	ldr	r3, [r7, #8]
 800f4f6:	4313      	orrs	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	693a      	ldr	r2, [r7, #16]
 800f4fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	697a      	ldr	r2, [r7, #20]
 800f504:	621a      	str	r2, [r3, #32]
}
 800f506:	bf00      	nop
 800f508:	371c      	adds	r7, #28
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr

0800f512 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f512:	b480      	push	{r7}
 800f514:	b087      	sub	sp, #28
 800f516:	af00      	add	r7, sp, #0
 800f518:	60f8      	str	r0, [r7, #12]
 800f51a:	60b9      	str	r1, [r7, #8]
 800f51c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	6a1b      	ldr	r3, [r3, #32]
 800f522:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	6a1b      	ldr	r3, [r3, #32]
 800f528:	f023 0210 	bic.w	r2, r3, #16
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	699b      	ldr	r3, [r3, #24]
 800f534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f53c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	031b      	lsls	r3, r3, #12
 800f542:	693a      	ldr	r2, [r7, #16]
 800f544:	4313      	orrs	r3, r2
 800f546:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f54e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	011b      	lsls	r3, r3, #4
 800f554:	697a      	ldr	r2, [r7, #20]
 800f556:	4313      	orrs	r3, r2
 800f558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	693a      	ldr	r2, [r7, #16]
 800f55e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	697a      	ldr	r2, [r7, #20]
 800f564:	621a      	str	r2, [r3, #32]
}
 800f566:	bf00      	nop
 800f568:	371c      	adds	r7, #28
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f572:	b480      	push	{r7}
 800f574:	b085      	sub	sp, #20
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
 800f57a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f588:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f58c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	4313      	orrs	r3, r2
 800f594:	f043 0307 	orr.w	r3, r3, #7
 800f598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	68fa      	ldr	r2, [r7, #12]
 800f59e:	609a      	str	r2, [r3, #8]
}
 800f5a0:	bf00      	nop
 800f5a2:	3714      	adds	r7, #20
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5aa:	4770      	bx	lr

0800f5ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b087      	sub	sp, #28
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	60f8      	str	r0, [r7, #12]
 800f5b4:	60b9      	str	r1, [r7, #8]
 800f5b6:	607a      	str	r2, [r7, #4]
 800f5b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	689b      	ldr	r3, [r3, #8]
 800f5be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f5c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	021a      	lsls	r2, r3, #8
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	431a      	orrs	r2, r3
 800f5d0:	68bb      	ldr	r3, [r7, #8]
 800f5d2:	4313      	orrs	r3, r2
 800f5d4:	697a      	ldr	r2, [r7, #20]
 800f5d6:	4313      	orrs	r3, r2
 800f5d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	697a      	ldr	r2, [r7, #20]
 800f5de:	609a      	str	r2, [r3, #8]
}
 800f5e0:	bf00      	nop
 800f5e2:	371c      	adds	r7, #28
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ea:	4770      	bx	lr

0800f5ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
 800f5f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d101      	bne.n	800f604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f600:	2302      	movs	r3, #2
 800f602:	e04a      	b.n	800f69a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2201      	movs	r2, #1
 800f608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2202      	movs	r2, #2
 800f610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	689b      	ldr	r3, [r3, #8]
 800f622:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	4a1f      	ldr	r2, [pc, #124]	@ (800f6a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d108      	bne.n	800f640 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f634:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	4313      	orrs	r3, r2
 800f63e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	4313      	orrs	r3, r2
 800f650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	68fa      	ldr	r2, [r7, #12]
 800f658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4a12      	ldr	r2, [pc, #72]	@ (800f6a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d004      	beq.n	800f66e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f66c:	d10c      	bne.n	800f688 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	689b      	ldr	r3, [r3, #8]
 800f67a:	68ba      	ldr	r2, [r7, #8]
 800f67c:	4313      	orrs	r3, r2
 800f67e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68ba      	ldr	r2, [r7, #8]
 800f686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2201      	movs	r2, #1
 800f68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2200      	movs	r2, #0
 800f694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f698:	2300      	movs	r3, #0
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr
 800f6a6:	bf00      	nop
 800f6a8:	40012c00 	.word	0x40012c00

0800f6ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b083      	sub	sp, #12
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f6b4:	bf00      	nop
 800f6b6:	370c      	adds	r7, #12
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6be:	4770      	bx	lr

0800f6c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f6c0:	b480      	push	{r7}
 800f6c2:	b083      	sub	sp, #12
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f6c8:	bf00      	nop
 800f6ca:	370c      	adds	r7, #12
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f6dc:	bf00      	nop
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr

0800f6e8 <LL_RCC_GetUSARTClockSource>:
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f6f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f6f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	4013      	ands	r3, r2
}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <LL_RCC_GetLPUARTClockSource>:
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f714:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	4013      	ands	r3, r2
}
 800f71c:	4618      	mov	r0, r3
 800f71e:	370c      	adds	r7, #12
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr

0800f728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	b082      	sub	sp, #8
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d101      	bne.n	800f73a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f736:	2301      	movs	r3, #1
 800f738:	e042      	b.n	800f7c0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f740:	2b00      	cmp	r3, #0
 800f742:	d106      	bne.n	800f752 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7f7 fcaf 	bl	80070b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	2224      	movs	r2, #36	@ 0x24
 800f756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681a      	ldr	r2, [r3, #0]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f022 0201 	bic.w	r2, r2, #1
 800f768:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d002      	beq.n	800f778 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f000 ff16 	bl	80105a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f000 fceb 	bl	8010154 <UART_SetConfig>
 800f77e:	4603      	mov	r3, r0
 800f780:	2b01      	cmp	r3, #1
 800f782:	d101      	bne.n	800f788 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f784:	2301      	movs	r3, #1
 800f786:	e01b      	b.n	800f7c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	685a      	ldr	r2, [r3, #4]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	689a      	ldr	r2, [r3, #8]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f7a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	681a      	ldr	r2, [r3, #0]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f042 0201 	orr.w	r2, r2, #1
 800f7b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f000 ff95 	bl	80106e8 <UART_CheckIdleState>
 800f7be:	4603      	mov	r3, r0
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3708      	adds	r7, #8
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b08a      	sub	sp, #40	@ 0x28
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f7dc:	2b20      	cmp	r3, #32
 800f7de:	d137      	bne.n	800f850 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d002      	beq.n	800f7ec <HAL_UART_Receive_DMA+0x24>
 800f7e6:	88fb      	ldrh	r3, [r7, #6]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d101      	bne.n	800f7f0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e030      	b.n	800f852 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a18      	ldr	r2, [pc, #96]	@ (800f85c <HAL_UART_Receive_DMA+0x94>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d01f      	beq.n	800f840 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	685b      	ldr	r3, [r3, #4]
 800f806:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d018      	beq.n	800f840 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	e853 3f00 	ldrex	r3, [r3]
 800f81a:	613b      	str	r3, [r7, #16]
   return(result);
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f822:	627b      	str	r3, [r7, #36]	@ 0x24
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	461a      	mov	r2, r3
 800f82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f82c:	623b      	str	r3, [r7, #32]
 800f82e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f830:	69f9      	ldr	r1, [r7, #28]
 800f832:	6a3a      	ldr	r2, [r7, #32]
 800f834:	e841 2300 	strex	r3, r2, [r1]
 800f838:	61bb      	str	r3, [r7, #24]
   return(result);
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d1e6      	bne.n	800f80e <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f840:	88fb      	ldrh	r3, [r7, #6]
 800f842:	461a      	mov	r2, r3
 800f844:	68b9      	ldr	r1, [r7, #8]
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	f001 f866 	bl	8010918 <UART_Start_Receive_DMA>
 800f84c:	4603      	mov	r3, r0
 800f84e:	e000      	b.n	800f852 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f850:	2302      	movs	r3, #2
  }
}
 800f852:	4618      	mov	r0, r3
 800f854:	3728      	adds	r7, #40	@ 0x28
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	40008000 	.word	0x40008000

0800f860 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b0a0      	sub	sp, #128	@ 0x80
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f86e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f870:	e853 3f00 	ldrex	r3, [r3]
 800f874:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f876:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f878:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f87c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	461a      	mov	r2, r3
 800f884:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f886:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f888:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f88a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f88c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f88e:	e841 2300 	strex	r3, r2, [r1]
 800f892:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f894:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f896:	2b00      	cmp	r3, #0
 800f898:	d1e6      	bne.n	800f868 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	3308      	adds	r3, #8
 800f8a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8a4:	e853 3f00 	ldrex	r3, [r3]
 800f8a8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f8aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8ac:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800f8b0:	f023 0301 	bic.w	r3, r3, #1
 800f8b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	3308      	adds	r3, #8
 800f8bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f8be:	657a      	str	r2, [r7, #84]	@ 0x54
 800f8c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f8c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f8c6:	e841 2300 	strex	r3, r2, [r1]
 800f8ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f8cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1e3      	bne.n	800f89a <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d118      	bne.n	800f90c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8e2:	e853 3f00 	ldrex	r3, [r3]
 800f8e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8ea:	f023 0310 	bic.w	r3, r3, #16
 800f8ee:	677b      	str	r3, [r7, #116]	@ 0x74
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f8f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f8fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f8fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f900:	e841 2300 	strex	r3, r2, [r1]
 800f904:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d1e6      	bne.n	800f8da <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	689b      	ldr	r3, [r3, #8]
 800f912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f916:	2b80      	cmp	r3, #128	@ 0x80
 800f918:	d137      	bne.n	800f98a <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	3308      	adds	r3, #8
 800f920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f922:	6a3b      	ldr	r3, [r7, #32]
 800f924:	e853 3f00 	ldrex	r3, [r3]
 800f928:	61fb      	str	r3, [r7, #28]
   return(result);
 800f92a:	69fb      	ldr	r3, [r7, #28]
 800f92c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f930:	673b      	str	r3, [r7, #112]	@ 0x70
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	3308      	adds	r3, #8
 800f938:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f93a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f93c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f93e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f942:	e841 2300 	strex	r3, r2, [r1]
 800f946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d1e5      	bne.n	800f91a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f952:	2b00      	cmp	r3, #0
 800f954:	d019      	beq.n	800f98a <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f95a:	2200      	movs	r2, #0
 800f95c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f962:	4618      	mov	r0, r3
 800f964:	f7f9 f8df 	bl	8008b26 <HAL_DMA_Abort>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d00d      	beq.n	800f98a <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f972:	4618      	mov	r0, r3
 800f974:	f7f9 fa44 	bl	8008e00 <HAL_DMA_GetError>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b20      	cmp	r3, #32
 800f97c:	d105      	bne.n	800f98a <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2210      	movs	r2, #16
 800f982:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800f986:	2303      	movs	r3, #3
 800f988:	e073      	b.n	800fa72 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	689b      	ldr	r3, [r3, #8]
 800f990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f994:	2b40      	cmp	r3, #64	@ 0x40
 800f996:	d13b      	bne.n	800fa10 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	3308      	adds	r3, #8
 800f99e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	e853 3f00 	ldrex	r3, [r3]
 800f9a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	3308      	adds	r3, #8
 800f9b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f9b8:	61ba      	str	r2, [r7, #24]
 800f9ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9bc:	6979      	ldr	r1, [r7, #20]
 800f9be:	69ba      	ldr	r2, [r7, #24]
 800f9c0:	e841 2300 	strex	r3, r2, [r1]
 800f9c4:	613b      	str	r3, [r7, #16]
   return(result);
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d1e5      	bne.n	800f998 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d01c      	beq.n	800fa10 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9dc:	2200      	movs	r2, #0
 800f9de:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7f9 f89d 	bl	8008b26 <HAL_DMA_Abort>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00e      	beq.n	800fa10 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7f9 fa01 	bl	8008e00 <HAL_DMA_GetError>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b20      	cmp	r3, #32
 800fa02:	d105      	bne.n	800fa10 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2210      	movs	r2, #16
 800fa08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fa0c:	2303      	movs	r3, #3
 800fa0e:	e030      	b.n	800fa72 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2200      	movs	r2, #0
 800fa14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	220f      	movs	r2, #15
 800fa26:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fa2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fa30:	d107      	bne.n	800fa42 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	699a      	ldr	r2, [r3, #24]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	f042 0210 	orr.w	r2, r2, #16
 800fa40:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	699a      	ldr	r2, [r3, #24]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f042 0208 	orr.w	r2, r2, #8
 800fa50:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2220      	movs	r2, #32
 800fa56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2220      	movs	r2, #32
 800fa5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2200      	movs	r2, #0
 800fa66:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800fa70:	2300      	movs	r3, #0
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3780      	adds	r7, #128	@ 0x80
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
	...

0800fa7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b0ba      	sub	sp, #232	@ 0xe8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	69db      	ldr	r3, [r3, #28]
 800fa8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	689b      	ldr	r3, [r3, #8]
 800fa9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800faa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800faa6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800faaa:	4013      	ands	r3, r2
 800faac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d11b      	bne.n	800faf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fabc:	f003 0320 	and.w	r3, r3, #32
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d015      	beq.n	800faf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fac8:	f003 0320 	and.w	r3, r3, #32
 800facc:	2b00      	cmp	r3, #0
 800face:	d105      	bne.n	800fadc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fad4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d009      	beq.n	800faf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	f000 8300 	beq.w	80100e6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800faea:	6878      	ldr	r0, [r7, #4]
 800faec:	4798      	blx	r3
      }
      return;
 800faee:	e2fa      	b.n	80100e6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800faf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	f000 8123 	beq.w	800fd40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fafa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fafe:	4b8d      	ldr	r3, [pc, #564]	@ (800fd34 <HAL_UART_IRQHandler+0x2b8>)
 800fb00:	4013      	ands	r3, r2
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d106      	bne.n	800fb14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fb06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fb0a:	4b8b      	ldr	r3, [pc, #556]	@ (800fd38 <HAL_UART_IRQHandler+0x2bc>)
 800fb0c:	4013      	ands	r3, r2
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	f000 8116 	beq.w	800fd40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fb14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb18:	f003 0301 	and.w	r3, r3, #1
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d011      	beq.n	800fb44 <HAL_UART_IRQHandler+0xc8>
 800fb20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d00b      	beq.n	800fb44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	2201      	movs	r2, #1
 800fb32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb3a:	f043 0201 	orr.w	r2, r3, #1
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb48:	f003 0302 	and.w	r3, r3, #2
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d011      	beq.n	800fb74 <HAL_UART_IRQHandler+0xf8>
 800fb50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb54:	f003 0301 	and.w	r3, r3, #1
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00b      	beq.n	800fb74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2202      	movs	r2, #2
 800fb62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb6a:	f043 0204 	orr.w	r2, r3, #4
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb78:	f003 0304 	and.w	r3, r3, #4
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d011      	beq.n	800fba4 <HAL_UART_IRQHandler+0x128>
 800fb80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fb84:	f003 0301 	and.w	r3, r3, #1
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d00b      	beq.n	800fba4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	2204      	movs	r2, #4
 800fb92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb9a:	f043 0202 	orr.w	r2, r3, #2
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fba8:	f003 0308 	and.w	r3, r3, #8
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d017      	beq.n	800fbe0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fbb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbb4:	f003 0320 	and.w	r3, r3, #32
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d105      	bne.n	800fbc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fbbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fbc0:	4b5c      	ldr	r3, [pc, #368]	@ (800fd34 <HAL_UART_IRQHandler+0x2b8>)
 800fbc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d00b      	beq.n	800fbe0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2208      	movs	r2, #8
 800fbce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fbd6:	f043 0208 	orr.w	r2, r3, #8
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fbe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d012      	beq.n	800fc12 <HAL_UART_IRQHandler+0x196>
 800fbec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00c      	beq.n	800fc12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fc00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc08:	f043 0220 	orr.w	r2, r3, #32
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	f000 8266 	beq.w	80100ea <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fc1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc22:	f003 0320 	and.w	r3, r3, #32
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d013      	beq.n	800fc52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fc2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc2e:	f003 0320 	and.w	r3, r3, #32
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d105      	bne.n	800fc42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fc36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d007      	beq.n	800fc52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d003      	beq.n	800fc52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc58:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc66:	2b40      	cmp	r3, #64	@ 0x40
 800fc68:	d005      	beq.n	800fc76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fc6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fc6e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d054      	beq.n	800fd20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fc76:	6878      	ldr	r0, [r7, #4]
 800fc78:	f000 ff35 	bl	8010ae6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	689b      	ldr	r3, [r3, #8]
 800fc82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc86:	2b40      	cmp	r3, #64	@ 0x40
 800fc88:	d146      	bne.n	800fd18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	3308      	adds	r3, #8
 800fc90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fc98:	e853 3f00 	ldrex	r3, [r3]
 800fc9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fca4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3308      	adds	r3, #8
 800fcb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fcb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fcba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fcc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fcc6:	e841 2300 	strex	r3, r2, [r1]
 800fcca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fcce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d1d9      	bne.n	800fc8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d017      	beq.n	800fd10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fce6:	4a15      	ldr	r2, [pc, #84]	@ (800fd3c <HAL_UART_IRQHandler+0x2c0>)
 800fce8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	f7f8 ff77 	bl	8008be4 <HAL_DMA_Abort_IT>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d019      	beq.n	800fd30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fd0a:	4610      	mov	r0, r2
 800fd0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd0e:	e00f      	b.n	800fd30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 fa09 	bl	8010128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd16:	e00b      	b.n	800fd30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f000 fa05 	bl	8010128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd1e:	e007      	b.n	800fd30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fa01 	bl	8010128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fd2e:	e1dc      	b.n	80100ea <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd30:	bf00      	nop
    return;
 800fd32:	e1da      	b.n	80100ea <HAL_UART_IRQHandler+0x66e>
 800fd34:	10000001 	.word	0x10000001
 800fd38:	04000120 	.word	0x04000120
 800fd3c:	08010d9d 	.word	0x08010d9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	f040 8170 	bne.w	801002a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fd4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd4e:	f003 0310 	and.w	r3, r3, #16
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	f000 8169 	beq.w	801002a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fd58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd5c:	f003 0310 	and.w	r3, r3, #16
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	f000 8162 	beq.w	801002a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2210      	movs	r2, #16
 800fd6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	689b      	ldr	r3, [r3, #8]
 800fd74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd78:	2b40      	cmp	r3, #64	@ 0x40
 800fd7a:	f040 80d8 	bne.w	800ff2e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	685b      	ldr	r3, [r3, #4]
 800fd88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fd8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f000 80af 	beq.w	800fef4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fd9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fda0:	429a      	cmp	r2, r3
 800fda2:	f080 80a7 	bcs.w	800fef4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fdac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	f003 0320 	and.w	r3, r3, #32
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f040 8087 	bne.w	800fed2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fdd0:	e853 3f00 	ldrex	r3, [r3]
 800fdd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fdd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fddc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fde0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	461a      	mov	r2, r3
 800fdea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fdee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fdf2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fdfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fdfe:	e841 2300 	strex	r3, r2, [r1]
 800fe02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fe06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1da      	bne.n	800fdc4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	3308      	adds	r3, #8
 800fe14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fe18:	e853 3f00 	ldrex	r3, [r3]
 800fe1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fe1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fe20:	f023 0301 	bic.w	r3, r3, #1
 800fe24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	3308      	adds	r3, #8
 800fe2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fe32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fe36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fe3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fe3e:	e841 2300 	strex	r3, r2, [r1]
 800fe42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fe44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d1e1      	bne.n	800fe0e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	3308      	adds	r3, #8
 800fe50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fe54:	e853 3f00 	ldrex	r3, [r3]
 800fe58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fe5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fe60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	3308      	adds	r3, #8
 800fe6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fe6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fe70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fe74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fe76:	e841 2300 	strex	r3, r2, [r1]
 800fe7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fe7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d1e3      	bne.n	800fe4a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	2220      	movs	r2, #32
 800fe86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2200      	movs	r2, #0
 800fe8e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe98:	e853 3f00 	ldrex	r3, [r3]
 800fe9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fe9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fea0:	f023 0310 	bic.w	r3, r3, #16
 800fea4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	461a      	mov	r2, r3
 800feae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800feb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800feb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800feb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800feba:	e841 2300 	strex	r3, r2, [r1]
 800febe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d1e4      	bne.n	800fe90 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fecc:	4618      	mov	r0, r3
 800fece:	f7f8 fe2a 	bl	8008b26 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2202      	movs	r2, #2
 800fed6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	b29b      	uxth	r3, r3
 800feea:	4619      	mov	r1, r3
 800feec:	6878      	ldr	r0, [r7, #4]
 800feee:	f000 f925 	bl	801013c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fef2:	e0fc      	b.n	80100ee <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fefa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fefe:	429a      	cmp	r2, r3
 800ff00:	f040 80f5 	bne.w	80100ee <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	f003 0320 	and.w	r3, r3, #32
 800ff12:	2b20      	cmp	r3, #32
 800ff14:	f040 80eb 	bne.w	80100ee <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2202      	movs	r2, #2
 800ff1c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff24:	4619      	mov	r1, r3
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f000 f908 	bl	801013c <HAL_UARTEx_RxEventCallback>
      return;
 800ff2c:	e0df      	b.n	80100ee <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ff48:	b29b      	uxth	r3, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f000 80d1 	beq.w	80100f2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800ff50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	f000 80cc 	beq.w	80100f2 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff62:	e853 3f00 	ldrex	r3, [r3]
 800ff66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ff68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	461a      	mov	r2, r3
 800ff78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ff7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ff7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ff82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ff84:	e841 2300 	strex	r3, r2, [r1]
 800ff88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ff8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d1e4      	bne.n	800ff5a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	3308      	adds	r3, #8
 800ff96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff9a:	e853 3f00 	ldrex	r3, [r3]
 800ff9e:	623b      	str	r3, [r7, #32]
   return(result);
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ffa6:	f023 0301 	bic.w	r3, r3, #1
 800ffaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	3308      	adds	r3, #8
 800ffb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ffb8:	633a      	str	r2, [r7, #48]	@ 0x30
 800ffba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ffbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ffc0:	e841 2300 	strex	r3, r2, [r1]
 800ffc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ffc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1e1      	bne.n	800ff90 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2220      	movs	r2, #32
 800ffd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	e853 3f00 	ldrex	r3, [r3]
 800ffec:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	f023 0310 	bic.w	r3, r3, #16
 800fff4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	461a      	mov	r2, r3
 800fffe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010002:	61fb      	str	r3, [r7, #28]
 8010004:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010006:	69b9      	ldr	r1, [r7, #24]
 8010008:	69fa      	ldr	r2, [r7, #28]
 801000a:	e841 2300 	strex	r3, r2, [r1]
 801000e:	617b      	str	r3, [r7, #20]
   return(result);
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1e4      	bne.n	800ffe0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2202      	movs	r2, #2
 801001a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801001c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010020:	4619      	mov	r1, r3
 8010022:	6878      	ldr	r0, [r7, #4]
 8010024:	f000 f88a 	bl	801013c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010028:	e063      	b.n	80100f2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801002a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801002e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010032:	2b00      	cmp	r3, #0
 8010034:	d00e      	beq.n	8010054 <HAL_UART_IRQHandler+0x5d8>
 8010036:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801003a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801003e:	2b00      	cmp	r3, #0
 8010040:	d008      	beq.n	8010054 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801004a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f000 fee2 	bl	8010e16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010052:	e051      	b.n	80100f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801005c:	2b00      	cmp	r3, #0
 801005e:	d014      	beq.n	801008a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010060:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010068:	2b00      	cmp	r3, #0
 801006a:	d105      	bne.n	8010078 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801006c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010070:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010074:	2b00      	cmp	r3, #0
 8010076:	d008      	beq.n	801008a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801007c:	2b00      	cmp	r3, #0
 801007e:	d03a      	beq.n	80100f6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	4798      	blx	r3
    }
    return;
 8010088:	e035      	b.n	80100f6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801008a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801008e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010092:	2b00      	cmp	r3, #0
 8010094:	d009      	beq.n	80100aa <HAL_UART_IRQHandler+0x62e>
 8010096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801009a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d003      	beq.n	80100aa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 fe8c 	bl	8010dc0 <UART_EndTransmit_IT>
    return;
 80100a8:	e026      	b.n	80100f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80100aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d009      	beq.n	80100ca <HAL_UART_IRQHandler+0x64e>
 80100b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d003      	beq.n	80100ca <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 febb 	bl	8010e3e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80100c8:	e016      	b.n	80100f8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80100ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d010      	beq.n	80100f8 <HAL_UART_IRQHandler+0x67c>
 80100d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100da:	2b00      	cmp	r3, #0
 80100dc:	da0c      	bge.n	80100f8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80100de:	6878      	ldr	r0, [r7, #4]
 80100e0:	f000 fea3 	bl	8010e2a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80100e4:	e008      	b.n	80100f8 <HAL_UART_IRQHandler+0x67c>
      return;
 80100e6:	bf00      	nop
 80100e8:	e006      	b.n	80100f8 <HAL_UART_IRQHandler+0x67c>
    return;
 80100ea:	bf00      	nop
 80100ec:	e004      	b.n	80100f8 <HAL_UART_IRQHandler+0x67c>
      return;
 80100ee:	bf00      	nop
 80100f0:	e002      	b.n	80100f8 <HAL_UART_IRQHandler+0x67c>
      return;
 80100f2:	bf00      	nop
 80100f4:	e000      	b.n	80100f8 <HAL_UART_IRQHandler+0x67c>
    return;
 80100f6:	bf00      	nop
  }
}
 80100f8:	37e8      	adds	r7, #232	@ 0xe8
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}
 80100fe:	bf00      	nop

08010100 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010100:	b480      	push	{r7}
 8010102:	b083      	sub	sp, #12
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010108:	bf00      	nop
 801010a:	370c      	adds	r7, #12
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801011c:	bf00      	nop
 801011e:	370c      	adds	r7, #12
 8010120:	46bd      	mov	sp, r7
 8010122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010126:	4770      	bx	lr

08010128 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010128:	b480      	push	{r7}
 801012a:	b083      	sub	sp, #12
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010130:	bf00      	nop
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr

0801013c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	460b      	mov	r3, r1
 8010146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010148:	bf00      	nop
 801014a:	370c      	adds	r7, #12
 801014c:	46bd      	mov	sp, r7
 801014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010152:	4770      	bx	lr

08010154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010158:	b08c      	sub	sp, #48	@ 0x30
 801015a:	af00      	add	r7, sp, #0
 801015c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801015e:	2300      	movs	r3, #0
 8010160:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	689a      	ldr	r2, [r3, #8]
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	691b      	ldr	r3, [r3, #16]
 801016c:	431a      	orrs	r2, r3
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	695b      	ldr	r3, [r3, #20]
 8010172:	431a      	orrs	r2, r3
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	69db      	ldr	r3, [r3, #28]
 8010178:	4313      	orrs	r3, r2
 801017a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801017c:	697b      	ldr	r3, [r7, #20]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	4baf      	ldr	r3, [pc, #700]	@ (8010440 <UART_SetConfig+0x2ec>)
 8010184:	4013      	ands	r3, r2
 8010186:	697a      	ldr	r2, [r7, #20]
 8010188:	6812      	ldr	r2, [r2, #0]
 801018a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801018c:	430b      	orrs	r3, r1
 801018e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010190:	697b      	ldr	r3, [r7, #20]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	68da      	ldr	r2, [r3, #12]
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	430a      	orrs	r2, r1
 80101a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	699b      	ldr	r3, [r3, #24]
 80101aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4aa4      	ldr	r2, [pc, #656]	@ (8010444 <UART_SetConfig+0x2f0>)
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d004      	beq.n	80101c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	6a1b      	ldr	r3, [r3, #32]
 80101ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80101bc:	4313      	orrs	r3, r2
 80101be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	689b      	ldr	r3, [r3, #8]
 80101c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80101ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80101ce:	697a      	ldr	r2, [r7, #20]
 80101d0:	6812      	ldr	r2, [r2, #0]
 80101d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80101d4:	430b      	orrs	r3, r1
 80101d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101de:	f023 010f 	bic.w	r1, r3, #15
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	430a      	orrs	r2, r1
 80101ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	4a95      	ldr	r2, [pc, #596]	@ (8010448 <UART_SetConfig+0x2f4>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d125      	bne.n	8010244 <UART_SetConfig+0xf0>
 80101f8:	2003      	movs	r0, #3
 80101fa:	f7ff fa75 	bl	800f6e8 <LL_RCC_GetUSARTClockSource>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b03      	cmp	r3, #3
 8010202:	d81b      	bhi.n	801023c <UART_SetConfig+0xe8>
 8010204:	a201      	add	r2, pc, #4	@ (adr r2, 801020c <UART_SetConfig+0xb8>)
 8010206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801020a:	bf00      	nop
 801020c:	0801021d 	.word	0x0801021d
 8010210:	0801022d 	.word	0x0801022d
 8010214:	08010225 	.word	0x08010225
 8010218:	08010235 	.word	0x08010235
 801021c:	2301      	movs	r3, #1
 801021e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010222:	e042      	b.n	80102aa <UART_SetConfig+0x156>
 8010224:	2302      	movs	r3, #2
 8010226:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801022a:	e03e      	b.n	80102aa <UART_SetConfig+0x156>
 801022c:	2304      	movs	r3, #4
 801022e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010232:	e03a      	b.n	80102aa <UART_SetConfig+0x156>
 8010234:	2308      	movs	r3, #8
 8010236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801023a:	e036      	b.n	80102aa <UART_SetConfig+0x156>
 801023c:	2310      	movs	r3, #16
 801023e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010242:	e032      	b.n	80102aa <UART_SetConfig+0x156>
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a7e      	ldr	r2, [pc, #504]	@ (8010444 <UART_SetConfig+0x2f0>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d12a      	bne.n	80102a4 <UART_SetConfig+0x150>
 801024e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8010252:	f7ff fa59 	bl	800f708 <LL_RCC_GetLPUARTClockSource>
 8010256:	4603      	mov	r3, r0
 8010258:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801025c:	d01a      	beq.n	8010294 <UART_SetConfig+0x140>
 801025e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010262:	d81b      	bhi.n	801029c <UART_SetConfig+0x148>
 8010264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010268:	d00c      	beq.n	8010284 <UART_SetConfig+0x130>
 801026a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801026e:	d815      	bhi.n	801029c <UART_SetConfig+0x148>
 8010270:	2b00      	cmp	r3, #0
 8010272:	d003      	beq.n	801027c <UART_SetConfig+0x128>
 8010274:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010278:	d008      	beq.n	801028c <UART_SetConfig+0x138>
 801027a:	e00f      	b.n	801029c <UART_SetConfig+0x148>
 801027c:	2300      	movs	r3, #0
 801027e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010282:	e012      	b.n	80102aa <UART_SetConfig+0x156>
 8010284:	2302      	movs	r3, #2
 8010286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801028a:	e00e      	b.n	80102aa <UART_SetConfig+0x156>
 801028c:	2304      	movs	r3, #4
 801028e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010292:	e00a      	b.n	80102aa <UART_SetConfig+0x156>
 8010294:	2308      	movs	r3, #8
 8010296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801029a:	e006      	b.n	80102aa <UART_SetConfig+0x156>
 801029c:	2310      	movs	r3, #16
 801029e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102a2:	e002      	b.n	80102aa <UART_SetConfig+0x156>
 80102a4:	2310      	movs	r3, #16
 80102a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a65      	ldr	r2, [pc, #404]	@ (8010444 <UART_SetConfig+0x2f0>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	f040 8097 	bne.w	80103e4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80102b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80102ba:	2b08      	cmp	r3, #8
 80102bc:	d823      	bhi.n	8010306 <UART_SetConfig+0x1b2>
 80102be:	a201      	add	r2, pc, #4	@ (adr r2, 80102c4 <UART_SetConfig+0x170>)
 80102c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102c4:	080102e9 	.word	0x080102e9
 80102c8:	08010307 	.word	0x08010307
 80102cc:	080102f1 	.word	0x080102f1
 80102d0:	08010307 	.word	0x08010307
 80102d4:	080102f7 	.word	0x080102f7
 80102d8:	08010307 	.word	0x08010307
 80102dc:	08010307 	.word	0x08010307
 80102e0:	08010307 	.word	0x08010307
 80102e4:	080102ff 	.word	0x080102ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102e8:	f7fc fcc4 	bl	800cc74 <HAL_RCC_GetPCLK1Freq>
 80102ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80102ee:	e010      	b.n	8010312 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80102f0:	4b56      	ldr	r3, [pc, #344]	@ (801044c <UART_SetConfig+0x2f8>)
 80102f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80102f4:	e00d      	b.n	8010312 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80102f6:	f7fc fc3d 	bl	800cb74 <HAL_RCC_GetSysClockFreq>
 80102fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80102fc:	e009      	b.n	8010312 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010302:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010304:	e005      	b.n	8010312 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010306:	2300      	movs	r3, #0
 8010308:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801030a:	2301      	movs	r3, #1
 801030c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010314:	2b00      	cmp	r3, #0
 8010316:	f000 812b 	beq.w	8010570 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801031e:	4a4c      	ldr	r2, [pc, #304]	@ (8010450 <UART_SetConfig+0x2fc>)
 8010320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010324:	461a      	mov	r2, r3
 8010326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010328:	fbb3 f3f2 	udiv	r3, r3, r2
 801032c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801032e:	697b      	ldr	r3, [r7, #20]
 8010330:	685a      	ldr	r2, [r3, #4]
 8010332:	4613      	mov	r3, r2
 8010334:	005b      	lsls	r3, r3, #1
 8010336:	4413      	add	r3, r2
 8010338:	69ba      	ldr	r2, [r7, #24]
 801033a:	429a      	cmp	r2, r3
 801033c:	d305      	bcc.n	801034a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	685b      	ldr	r3, [r3, #4]
 8010342:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010344:	69ba      	ldr	r2, [r7, #24]
 8010346:	429a      	cmp	r2, r3
 8010348:	d903      	bls.n	8010352 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801034a:	2301      	movs	r3, #1
 801034c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010350:	e10e      	b.n	8010570 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010354:	2200      	movs	r2, #0
 8010356:	60bb      	str	r3, [r7, #8]
 8010358:	60fa      	str	r2, [r7, #12]
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801035e:	4a3c      	ldr	r2, [pc, #240]	@ (8010450 <UART_SetConfig+0x2fc>)
 8010360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010364:	b29b      	uxth	r3, r3
 8010366:	2200      	movs	r2, #0
 8010368:	603b      	str	r3, [r7, #0]
 801036a:	607a      	str	r2, [r7, #4]
 801036c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010370:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010374:	f7f0 fc60 	bl	8000c38 <__aeabi_uldivmod>
 8010378:	4602      	mov	r2, r0
 801037a:	460b      	mov	r3, r1
 801037c:	4610      	mov	r0, r2
 801037e:	4619      	mov	r1, r3
 8010380:	f04f 0200 	mov.w	r2, #0
 8010384:	f04f 0300 	mov.w	r3, #0
 8010388:	020b      	lsls	r3, r1, #8
 801038a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801038e:	0202      	lsls	r2, r0, #8
 8010390:	6979      	ldr	r1, [r7, #20]
 8010392:	6849      	ldr	r1, [r1, #4]
 8010394:	0849      	lsrs	r1, r1, #1
 8010396:	2000      	movs	r0, #0
 8010398:	460c      	mov	r4, r1
 801039a:	4605      	mov	r5, r0
 801039c:	eb12 0804 	adds.w	r8, r2, r4
 80103a0:	eb43 0905 	adc.w	r9, r3, r5
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	2200      	movs	r2, #0
 80103aa:	469a      	mov	sl, r3
 80103ac:	4693      	mov	fp, r2
 80103ae:	4652      	mov	r2, sl
 80103b0:	465b      	mov	r3, fp
 80103b2:	4640      	mov	r0, r8
 80103b4:	4649      	mov	r1, r9
 80103b6:	f7f0 fc3f 	bl	8000c38 <__aeabi_uldivmod>
 80103ba:	4602      	mov	r2, r0
 80103bc:	460b      	mov	r3, r1
 80103be:	4613      	mov	r3, r2
 80103c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80103c2:	6a3b      	ldr	r3, [r7, #32]
 80103c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80103c8:	d308      	bcc.n	80103dc <UART_SetConfig+0x288>
 80103ca:	6a3b      	ldr	r3, [r7, #32]
 80103cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80103d0:	d204      	bcs.n	80103dc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	6a3a      	ldr	r2, [r7, #32]
 80103d8:	60da      	str	r2, [r3, #12]
 80103da:	e0c9      	b.n	8010570 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80103dc:	2301      	movs	r3, #1
 80103de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80103e2:	e0c5      	b.n	8010570 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	69db      	ldr	r3, [r3, #28]
 80103e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103ec:	d16d      	bne.n	80104ca <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80103ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80103f2:	3b01      	subs	r3, #1
 80103f4:	2b07      	cmp	r3, #7
 80103f6:	d82d      	bhi.n	8010454 <UART_SetConfig+0x300>
 80103f8:	a201      	add	r2, pc, #4	@ (adr r2, 8010400 <UART_SetConfig+0x2ac>)
 80103fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103fe:	bf00      	nop
 8010400:	08010421 	.word	0x08010421
 8010404:	08010429 	.word	0x08010429
 8010408:	08010455 	.word	0x08010455
 801040c:	0801042f 	.word	0x0801042f
 8010410:	08010455 	.word	0x08010455
 8010414:	08010455 	.word	0x08010455
 8010418:	08010455 	.word	0x08010455
 801041c:	08010437 	.word	0x08010437
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010420:	f7fc fc3e 	bl	800cca0 <HAL_RCC_GetPCLK2Freq>
 8010424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010426:	e01b      	b.n	8010460 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010428:	4b08      	ldr	r3, [pc, #32]	@ (801044c <UART_SetConfig+0x2f8>)
 801042a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801042c:	e018      	b.n	8010460 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801042e:	f7fc fba1 	bl	800cb74 <HAL_RCC_GetSysClockFreq>
 8010432:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010434:	e014      	b.n	8010460 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801043a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801043c:	e010      	b.n	8010460 <UART_SetConfig+0x30c>
 801043e:	bf00      	nop
 8010440:	cfff69f3 	.word	0xcfff69f3
 8010444:	40008000 	.word	0x40008000
 8010448:	40013800 	.word	0x40013800
 801044c:	00f42400 	.word	0x00f42400
 8010450:	08022134 	.word	0x08022134
      default:
        pclk = 0U;
 8010454:	2300      	movs	r3, #0
 8010456:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010458:	2301      	movs	r3, #1
 801045a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801045e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010462:	2b00      	cmp	r3, #0
 8010464:	f000 8084 	beq.w	8010570 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801046c:	4a4b      	ldr	r2, [pc, #300]	@ (801059c <UART_SetConfig+0x448>)
 801046e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010472:	461a      	mov	r2, r3
 8010474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010476:	fbb3 f3f2 	udiv	r3, r3, r2
 801047a:	005a      	lsls	r2, r3, #1
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	085b      	lsrs	r3, r3, #1
 8010482:	441a      	add	r2, r3
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	685b      	ldr	r3, [r3, #4]
 8010488:	fbb2 f3f3 	udiv	r3, r2, r3
 801048c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801048e:	6a3b      	ldr	r3, [r7, #32]
 8010490:	2b0f      	cmp	r3, #15
 8010492:	d916      	bls.n	80104c2 <UART_SetConfig+0x36e>
 8010494:	6a3b      	ldr	r3, [r7, #32]
 8010496:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801049a:	d212      	bcs.n	80104c2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801049c:	6a3b      	ldr	r3, [r7, #32]
 801049e:	b29b      	uxth	r3, r3
 80104a0:	f023 030f 	bic.w	r3, r3, #15
 80104a4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80104a6:	6a3b      	ldr	r3, [r7, #32]
 80104a8:	085b      	lsrs	r3, r3, #1
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	f003 0307 	and.w	r3, r3, #7
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	8bfb      	ldrh	r3, [r7, #30]
 80104b4:	4313      	orrs	r3, r2
 80104b6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80104b8:	697b      	ldr	r3, [r7, #20]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	8bfa      	ldrh	r2, [r7, #30]
 80104be:	60da      	str	r2, [r3, #12]
 80104c0:	e056      	b.n	8010570 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80104c2:	2301      	movs	r3, #1
 80104c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80104c8:	e052      	b.n	8010570 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80104ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80104ce:	3b01      	subs	r3, #1
 80104d0:	2b07      	cmp	r3, #7
 80104d2:	d822      	bhi.n	801051a <UART_SetConfig+0x3c6>
 80104d4:	a201      	add	r2, pc, #4	@ (adr r2, 80104dc <UART_SetConfig+0x388>)
 80104d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104da:	bf00      	nop
 80104dc:	080104fd 	.word	0x080104fd
 80104e0:	08010505 	.word	0x08010505
 80104e4:	0801051b 	.word	0x0801051b
 80104e8:	0801050b 	.word	0x0801050b
 80104ec:	0801051b 	.word	0x0801051b
 80104f0:	0801051b 	.word	0x0801051b
 80104f4:	0801051b 	.word	0x0801051b
 80104f8:	08010513 	.word	0x08010513
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80104fc:	f7fc fbd0 	bl	800cca0 <HAL_RCC_GetPCLK2Freq>
 8010500:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010502:	e010      	b.n	8010526 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010504:	4b26      	ldr	r3, [pc, #152]	@ (80105a0 <UART_SetConfig+0x44c>)
 8010506:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010508:	e00d      	b.n	8010526 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801050a:	f7fc fb33 	bl	800cb74 <HAL_RCC_GetSysClockFreq>
 801050e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010510:	e009      	b.n	8010526 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010516:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010518:	e005      	b.n	8010526 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801051a:	2300      	movs	r3, #0
 801051c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801051e:	2301      	movs	r3, #1
 8010520:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010524:	bf00      	nop
    }

    if (pclk != 0U)
 8010526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010528:	2b00      	cmp	r3, #0
 801052a:	d021      	beq.n	8010570 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010530:	4a1a      	ldr	r2, [pc, #104]	@ (801059c <UART_SetConfig+0x448>)
 8010532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010536:	461a      	mov	r2, r3
 8010538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801053a:	fbb3 f2f2 	udiv	r2, r3, r2
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	085b      	lsrs	r3, r3, #1
 8010544:	441a      	add	r2, r3
 8010546:	697b      	ldr	r3, [r7, #20]
 8010548:	685b      	ldr	r3, [r3, #4]
 801054a:	fbb2 f3f3 	udiv	r3, r2, r3
 801054e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010550:	6a3b      	ldr	r3, [r7, #32]
 8010552:	2b0f      	cmp	r3, #15
 8010554:	d909      	bls.n	801056a <UART_SetConfig+0x416>
 8010556:	6a3b      	ldr	r3, [r7, #32]
 8010558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801055c:	d205      	bcs.n	801056a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	b29a      	uxth	r2, r3
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	60da      	str	r2, [r3, #12]
 8010568:	e002      	b.n	8010570 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801056a:	2301      	movs	r3, #1
 801056c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010570:	697b      	ldr	r3, [r7, #20]
 8010572:	2201      	movs	r2, #1
 8010574:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010578:	697b      	ldr	r3, [r7, #20]
 801057a:	2201      	movs	r2, #1
 801057c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	2200      	movs	r2, #0
 8010584:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	2200      	movs	r2, #0
 801058a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801058c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010590:	4618      	mov	r0, r3
 8010592:	3730      	adds	r7, #48	@ 0x30
 8010594:	46bd      	mov	sp, r7
 8010596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801059a:	bf00      	nop
 801059c:	08022134 	.word	0x08022134
 80105a0:	00f42400 	.word	0x00f42400

080105a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b083      	sub	sp, #12
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105b0:	f003 0308 	and.w	r3, r3, #8
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d00a      	beq.n	80105ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	685b      	ldr	r3, [r3, #4]
 80105be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	430a      	orrs	r2, r1
 80105cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105d2:	f003 0301 	and.w	r3, r3, #1
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d00a      	beq.n	80105f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	430a      	orrs	r2, r1
 80105ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105f4:	f003 0302 	and.w	r3, r3, #2
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d00a      	beq.n	8010612 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	430a      	orrs	r2, r1
 8010610:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010616:	f003 0304 	and.w	r3, r3, #4
 801061a:	2b00      	cmp	r3, #0
 801061c:	d00a      	beq.n	8010634 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	430a      	orrs	r2, r1
 8010632:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010638:	f003 0310 	and.w	r3, r3, #16
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00a      	beq.n	8010656 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	689b      	ldr	r3, [r3, #8]
 8010646:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	430a      	orrs	r2, r1
 8010654:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801065a:	f003 0320 	and.w	r3, r3, #32
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00a      	beq.n	8010678 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	689b      	ldr	r3, [r3, #8]
 8010668:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	430a      	orrs	r2, r1
 8010676:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801067c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010680:	2b00      	cmp	r3, #0
 8010682:	d01a      	beq.n	80106ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	685b      	ldr	r3, [r3, #4]
 801068a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	430a      	orrs	r2, r1
 8010698:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801069e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80106a2:	d10a      	bne.n	80106ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	430a      	orrs	r2, r1
 80106b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d00a      	beq.n	80106dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	430a      	orrs	r2, r1
 80106da:	605a      	str	r2, [r3, #4]
  }
}
 80106dc:	bf00      	nop
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b098      	sub	sp, #96	@ 0x60
 80106ec:	af02      	add	r7, sp, #8
 80106ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2200      	movs	r2, #0
 80106f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80106f8:	f7f6 feb4 	bl	8007464 <HAL_GetTick>
 80106fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	f003 0308 	and.w	r3, r3, #8
 8010708:	2b08      	cmp	r3, #8
 801070a:	d12f      	bne.n	801076c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801070c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010710:	9300      	str	r3, [sp, #0]
 8010712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010714:	2200      	movs	r2, #0
 8010716:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f000 f88e 	bl	801083c <UART_WaitOnFlagUntilTimeout>
 8010720:	4603      	mov	r3, r0
 8010722:	2b00      	cmp	r3, #0
 8010724:	d022      	beq.n	801076c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	681b      	ldr	r3, [r3, #0]
 801072a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801072c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801072e:	e853 3f00 	ldrex	r3, [r3]
 8010732:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010736:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801073a:	653b      	str	r3, [r7, #80]	@ 0x50
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	461a      	mov	r2, r3
 8010742:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010744:	647b      	str	r3, [r7, #68]	@ 0x44
 8010746:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010748:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801074a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801074c:	e841 2300 	strex	r3, r2, [r1]
 8010750:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010754:	2b00      	cmp	r3, #0
 8010756:	d1e6      	bne.n	8010726 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2220      	movs	r2, #32
 801075c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2200      	movs	r2, #0
 8010764:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010768:	2303      	movs	r3, #3
 801076a:	e063      	b.n	8010834 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	f003 0304 	and.w	r3, r3, #4
 8010776:	2b04      	cmp	r3, #4
 8010778:	d149      	bne.n	801080e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801077a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801077e:	9300      	str	r3, [sp, #0]
 8010780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010782:	2200      	movs	r2, #0
 8010784:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 f857 	bl	801083c <UART_WaitOnFlagUntilTimeout>
 801078e:	4603      	mov	r3, r0
 8010790:	2b00      	cmp	r3, #0
 8010792:	d03c      	beq.n	801080e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801079a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801079c:	e853 3f00 	ldrex	r3, [r3]
 80107a0:	623b      	str	r3, [r7, #32]
   return(result);
 80107a2:	6a3b      	ldr	r3, [r7, #32]
 80107a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80107a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	461a      	mov	r2, r3
 80107b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80107b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107ba:	e841 2300 	strex	r3, r2, [r1]
 80107be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80107c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d1e6      	bne.n	8010794 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	3308      	adds	r3, #8
 80107cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	e853 3f00 	ldrex	r3, [r3]
 80107d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f023 0301 	bic.w	r3, r3, #1
 80107dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	3308      	adds	r3, #8
 80107e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80107e6:	61fa      	str	r2, [r7, #28]
 80107e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ea:	69b9      	ldr	r1, [r7, #24]
 80107ec:	69fa      	ldr	r2, [r7, #28]
 80107ee:	e841 2300 	strex	r3, r2, [r1]
 80107f2:	617b      	str	r3, [r7, #20]
   return(result);
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d1e5      	bne.n	80107c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	2220      	movs	r2, #32
 80107fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	2200      	movs	r2, #0
 8010806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801080a:	2303      	movs	r3, #3
 801080c:	e012      	b.n	8010834 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	2220      	movs	r2, #32
 8010812:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2220      	movs	r2, #32
 801081a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2200      	movs	r2, #0
 8010822:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2200      	movs	r2, #0
 8010828:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	2200      	movs	r2, #0
 801082e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010832:	2300      	movs	r3, #0
}
 8010834:	4618      	mov	r0, r3
 8010836:	3758      	adds	r7, #88	@ 0x58
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	b084      	sub	sp, #16
 8010840:	af00      	add	r7, sp, #0
 8010842:	60f8      	str	r0, [r7, #12]
 8010844:	60b9      	str	r1, [r7, #8]
 8010846:	603b      	str	r3, [r7, #0]
 8010848:	4613      	mov	r3, r2
 801084a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801084c:	e04f      	b.n	80108ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010854:	d04b      	beq.n	80108ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010856:	f7f6 fe05 	bl	8007464 <HAL_GetTick>
 801085a:	4602      	mov	r2, r0
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	1ad3      	subs	r3, r2, r3
 8010860:	69ba      	ldr	r2, [r7, #24]
 8010862:	429a      	cmp	r2, r3
 8010864:	d302      	bcc.n	801086c <UART_WaitOnFlagUntilTimeout+0x30>
 8010866:	69bb      	ldr	r3, [r7, #24]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d101      	bne.n	8010870 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801086c:	2303      	movs	r3, #3
 801086e:	e04e      	b.n	801090e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	f003 0304 	and.w	r3, r3, #4
 801087a:	2b00      	cmp	r3, #0
 801087c:	d037      	beq.n	80108ee <UART_WaitOnFlagUntilTimeout+0xb2>
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	2b80      	cmp	r3, #128	@ 0x80
 8010882:	d034      	beq.n	80108ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	2b40      	cmp	r3, #64	@ 0x40
 8010888:	d031      	beq.n	80108ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	69db      	ldr	r3, [r3, #28]
 8010890:	f003 0308 	and.w	r3, r3, #8
 8010894:	2b08      	cmp	r3, #8
 8010896:	d110      	bne.n	80108ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	2208      	movs	r2, #8
 801089e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108a0:	68f8      	ldr	r0, [r7, #12]
 80108a2:	f000 f920 	bl	8010ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2208      	movs	r2, #8
 80108aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2200      	movs	r2, #0
 80108b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80108b6:	2301      	movs	r3, #1
 80108b8:	e029      	b.n	801090e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	69db      	ldr	r3, [r3, #28]
 80108c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80108c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108c8:	d111      	bne.n	80108ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80108d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f000 f906 	bl	8010ae6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2220      	movs	r2, #32
 80108de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2200      	movs	r2, #0
 80108e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80108ea:	2303      	movs	r3, #3
 80108ec:	e00f      	b.n	801090e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	69da      	ldr	r2, [r3, #28]
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	4013      	ands	r3, r2
 80108f8:	68ba      	ldr	r2, [r7, #8]
 80108fa:	429a      	cmp	r2, r3
 80108fc:	bf0c      	ite	eq
 80108fe:	2301      	moveq	r3, #1
 8010900:	2300      	movne	r3, #0
 8010902:	b2db      	uxtb	r3, r3
 8010904:	461a      	mov	r2, r3
 8010906:	79fb      	ldrb	r3, [r7, #7]
 8010908:	429a      	cmp	r2, r3
 801090a:	d0a0      	beq.n	801084e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	3710      	adds	r7, #16
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
	...

08010918 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b096      	sub	sp, #88	@ 0x58
 801091c:	af00      	add	r7, sp, #0
 801091e:	60f8      	str	r0, [r7, #12]
 8010920:	60b9      	str	r1, [r7, #8]
 8010922:	4613      	mov	r3, r2
 8010924:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	68ba      	ldr	r2, [r7, #8]
 801092a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	88fa      	ldrh	r2, [r7, #6]
 8010930:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	2200      	movs	r2, #0
 8010938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	2222      	movs	r2, #34	@ 0x22
 8010940:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801094a:	2b00      	cmp	r3, #0
 801094c:	d02d      	beq.n	80109aa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010954:	4a40      	ldr	r2, [pc, #256]	@ (8010a58 <UART_Start_Receive_DMA+0x140>)
 8010956:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801095e:	4a3f      	ldr	r2, [pc, #252]	@ (8010a5c <UART_Start_Receive_DMA+0x144>)
 8010960:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010968:	4a3d      	ldr	r2, [pc, #244]	@ (8010a60 <UART_Start_Receive_DMA+0x148>)
 801096a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010972:	2200      	movs	r2, #0
 8010974:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	3324      	adds	r3, #36	@ 0x24
 8010982:	4619      	mov	r1, r3
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010988:	461a      	mov	r2, r3
 801098a:	88fb      	ldrh	r3, [r7, #6]
 801098c:	f7f8 f850 	bl	8008a30 <HAL_DMA_Start_IT>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	d009      	beq.n	80109aa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2210      	movs	r2, #16
 801099a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	2220      	movs	r2, #32
 80109a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80109a6:	2301      	movs	r3, #1
 80109a8:	e051      	b.n	8010a4e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	691b      	ldr	r3, [r3, #16]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d018      	beq.n	80109e4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109ba:	e853 3f00 	ldrex	r3, [r3]
 80109be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80109c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80109c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	461a      	mov	r2, r3
 80109ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80109d2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109d4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80109d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80109d8:	e841 2300 	strex	r3, r2, [r1]
 80109dc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80109de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d1e6      	bne.n	80109b2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	3308      	adds	r3, #8
 80109ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109ee:	e853 3f00 	ldrex	r3, [r3]
 80109f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80109f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109f6:	f043 0301 	orr.w	r3, r3, #1
 80109fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	3308      	adds	r3, #8
 8010a02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010a04:	637a      	str	r2, [r7, #52]	@ 0x34
 8010a06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010a0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a0c:	e841 2300 	strex	r3, r2, [r1]
 8010a10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1e5      	bne.n	80109e4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	3308      	adds	r3, #8
 8010a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	e853 3f00 	ldrex	r3, [r3]
 8010a26:	613b      	str	r3, [r7, #16]
   return(result);
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	3308      	adds	r3, #8
 8010a36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010a38:	623a      	str	r2, [r7, #32]
 8010a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3c:	69f9      	ldr	r1, [r7, #28]
 8010a3e:	6a3a      	ldr	r2, [r7, #32]
 8010a40:	e841 2300 	strex	r3, r2, [r1]
 8010a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a46:	69bb      	ldr	r3, [r7, #24]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1e5      	bne.n	8010a18 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010a4c:	2300      	movs	r3, #0
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3758      	adds	r7, #88	@ 0x58
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	08010bb3 	.word	0x08010bb3
 8010a5c:	08010cdf 	.word	0x08010cdf
 8010a60:	08010d1d 	.word	0x08010d1d

08010a64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b08f      	sub	sp, #60	@ 0x3c
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a72:	6a3b      	ldr	r3, [r7, #32]
 8010a74:	e853 3f00 	ldrex	r3, [r3]
 8010a78:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	461a      	mov	r2, r3
 8010a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010a8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a92:	e841 2300 	strex	r3, r2, [r1]
 8010a96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d1e6      	bne.n	8010a6c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	3308      	adds	r3, #8
 8010aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	e853 3f00 	ldrex	r3, [r3]
 8010aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010ab4:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3308      	adds	r3, #8
 8010abc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010abe:	61ba      	str	r2, [r7, #24]
 8010ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac2:	6979      	ldr	r1, [r7, #20]
 8010ac4:	69ba      	ldr	r2, [r7, #24]
 8010ac6:	e841 2300 	strex	r3, r2, [r1]
 8010aca:	613b      	str	r3, [r7, #16]
   return(result);
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1e5      	bne.n	8010a9e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2220      	movs	r2, #32
 8010ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010ada:	bf00      	nop
 8010adc:	373c      	adds	r7, #60	@ 0x3c
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae4:	4770      	bx	lr

08010ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010ae6:	b480      	push	{r7}
 8010ae8:	b095      	sub	sp, #84	@ 0x54
 8010aea:	af00      	add	r7, sp, #0
 8010aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010af6:	e853 3f00 	ldrex	r3, [r3]
 8010afa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010afe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	461a      	mov	r2, r3
 8010b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b0e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010b12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010b14:	e841 2300 	strex	r3, r2, [r1]
 8010b18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d1e6      	bne.n	8010aee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	3308      	adds	r3, #8
 8010b26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b28:	6a3b      	ldr	r3, [r7, #32]
 8010b2a:	e853 3f00 	ldrex	r3, [r3]
 8010b2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010b36:	f023 0301 	bic.w	r3, r3, #1
 8010b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	3308      	adds	r3, #8
 8010b42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b4c:	e841 2300 	strex	r3, r2, [r1]
 8010b50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1e3      	bne.n	8010b20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b5c:	2b01      	cmp	r3, #1
 8010b5e:	d118      	bne.n	8010b92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	e853 3f00 	ldrex	r3, [r3]
 8010b6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	f023 0310 	bic.w	r3, r3, #16
 8010b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b7e:	61bb      	str	r3, [r7, #24]
 8010b80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b82:	6979      	ldr	r1, [r7, #20]
 8010b84:	69ba      	ldr	r2, [r7, #24]
 8010b86:	e841 2300 	strex	r3, r2, [r1]
 8010b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1e6      	bne.n	8010b60 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2220      	movs	r2, #32
 8010b96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010ba6:	bf00      	nop
 8010ba8:	3754      	adds	r7, #84	@ 0x54
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr

08010bb2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b09c      	sub	sp, #112	@ 0x70
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f003 0320 	and.w	r3, r3, #32
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d171      	bne.n	8010cb2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bde:	e853 3f00 	ldrex	r3, [r3]
 8010be2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010be6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010bea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010bf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010bf6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010bfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010bfc:	e841 2300 	strex	r3, r2, [r1]
 8010c00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1e6      	bne.n	8010bd6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	3308      	adds	r3, #8
 8010c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c12:	e853 3f00 	ldrex	r3, [r3]
 8010c16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c1a:	f023 0301 	bic.w	r3, r3, #1
 8010c1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	3308      	adds	r3, #8
 8010c26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010c28:	647a      	str	r2, [r7, #68]	@ 0x44
 8010c2a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010c2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c30:	e841 2300 	strex	r3, r2, [r1]
 8010c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d1e5      	bne.n	8010c08 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	3308      	adds	r3, #8
 8010c42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c46:	e853 3f00 	ldrex	r3, [r3]
 8010c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8010c4c:	6a3b      	ldr	r3, [r7, #32]
 8010c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c52:	663b      	str	r3, [r7, #96]	@ 0x60
 8010c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	3308      	adds	r3, #8
 8010c5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010c5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8010c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c64:	e841 2300 	strex	r3, r2, [r1]
 8010c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d1e5      	bne.n	8010c3c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c72:	2220      	movs	r2, #32
 8010c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c7c:	2b01      	cmp	r3, #1
 8010c7e:	d118      	bne.n	8010cb2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	e853 3f00 	ldrex	r3, [r3]
 8010c8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f023 0310 	bic.w	r3, r3, #16
 8010c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	461a      	mov	r2, r3
 8010c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010c9e:	61fb      	str	r3, [r7, #28]
 8010ca0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ca2:	69b9      	ldr	r1, [r7, #24]
 8010ca4:	69fa      	ldr	r2, [r7, #28]
 8010ca6:	e841 2300 	strex	r3, r2, [r1]
 8010caa:	617b      	str	r3, [r7, #20]
   return(result);
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d1e6      	bne.n	8010c80 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cbc:	2b01      	cmp	r3, #1
 8010cbe:	d107      	bne.n	8010cd0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010cca:	f7ff fa37 	bl	801013c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010cce:	e002      	b.n	8010cd6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010cd0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010cd2:	f7f6 fa97 	bl	8007204 <HAL_UART_RxCpltCallback>
}
 8010cd6:	bf00      	nop
 8010cd8:	3770      	adds	r7, #112	@ 0x70
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b084      	sub	sp, #16
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	2201      	movs	r2, #1
 8010cf0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010cf6:	2b01      	cmp	r3, #1
 8010cf8:	d109      	bne.n	8010d0e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010d00:	085b      	lsrs	r3, r3, #1
 8010d02:	b29b      	uxth	r3, r3
 8010d04:	4619      	mov	r1, r3
 8010d06:	68f8      	ldr	r0, [r7, #12]
 8010d08:	f7ff fa18 	bl	801013c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010d0c:	e002      	b.n	8010d14 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010d0e:	68f8      	ldr	r0, [r7, #12]
 8010d10:	f7ff fa00 	bl	8010114 <HAL_UART_RxHalfCpltCallback>
}
 8010d14:	bf00      	nop
 8010d16:	3710      	adds	r7, #16
 8010d18:	46bd      	mov	sp, r7
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	b086      	sub	sp, #24
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010d30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010d38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	689b      	ldr	r3, [r3, #8]
 8010d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d44:	2b80      	cmp	r3, #128	@ 0x80
 8010d46:	d109      	bne.n	8010d5c <UART_DMAError+0x40>
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	2b21      	cmp	r3, #33	@ 0x21
 8010d4c:	d106      	bne.n	8010d5c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	2200      	movs	r2, #0
 8010d52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010d56:	6978      	ldr	r0, [r7, #20]
 8010d58:	f7ff fe84 	bl	8010a64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	689b      	ldr	r3, [r3, #8]
 8010d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d66:	2b40      	cmp	r3, #64	@ 0x40
 8010d68:	d109      	bne.n	8010d7e <UART_DMAError+0x62>
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	2b22      	cmp	r3, #34	@ 0x22
 8010d6e:	d106      	bne.n	8010d7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	2200      	movs	r2, #0
 8010d74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010d78:	6978      	ldr	r0, [r7, #20]
 8010d7a:	f7ff feb4 	bl	8010ae6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010d84:	f043 0210 	orr.w	r2, r3, #16
 8010d88:	697b      	ldr	r3, [r7, #20]
 8010d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d8e:	6978      	ldr	r0, [r7, #20]
 8010d90:	f7ff f9ca 	bl	8010128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d94:	bf00      	nop
 8010d96:	3718      	adds	r7, #24
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	2200      	movs	r2, #0
 8010dae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	f7ff f9b8 	bl	8010128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010db8:	bf00      	nop
 8010dba:	3710      	adds	r7, #16
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}

08010dc0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b088      	sub	sp, #32
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	e853 3f00 	ldrex	r3, [r3]
 8010dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ddc:	61fb      	str	r3, [r7, #28]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	461a      	mov	r2, r3
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	61bb      	str	r3, [r7, #24]
 8010de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dea:	6979      	ldr	r1, [r7, #20]
 8010dec:	69ba      	ldr	r2, [r7, #24]
 8010dee:	e841 2300 	strex	r3, r2, [r1]
 8010df2:	613b      	str	r3, [r7, #16]
   return(result);
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d1e6      	bne.n	8010dc8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2220      	movs	r2, #32
 8010dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2200      	movs	r2, #0
 8010e06:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f7ff f979 	bl	8010100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e0e:	bf00      	nop
 8010e10:	3720      	adds	r7, #32
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}

08010e16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010e16:	b480      	push	{r7}
 8010e18:	b083      	sub	sp, #12
 8010e1a:	af00      	add	r7, sp, #0
 8010e1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010e1e:	bf00      	nop
 8010e20:	370c      	adds	r7, #12
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr

08010e2a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010e2a:	b480      	push	{r7}
 8010e2c:	b083      	sub	sp, #12
 8010e2e:	af00      	add	r7, sp, #0
 8010e30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010e32:	bf00      	nop
 8010e34:	370c      	adds	r7, #12
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr

08010e3e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010e3e:	b480      	push	{r7}
 8010e40:	b083      	sub	sp, #12
 8010e42:	af00      	add	r7, sp, #0
 8010e44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010e46:	bf00      	nop
 8010e48:	370c      	adds	r7, #12
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e50:	4770      	bx	lr

08010e52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010e52:	b480      	push	{r7}
 8010e54:	b085      	sub	sp, #20
 8010e56:	af00      	add	r7, sp, #0
 8010e58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	d101      	bne.n	8010e68 <HAL_UARTEx_DisableFifoMode+0x16>
 8010e64:	2302      	movs	r3, #2
 8010e66:	e027      	b.n	8010eb8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2224      	movs	r2, #36	@ 0x24
 8010e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	681a      	ldr	r2, [r3, #0]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	f022 0201 	bic.w	r2, r2, #1
 8010e8e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010e96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	68fa      	ldr	r2, [r7, #12]
 8010ea4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2220      	movs	r2, #32
 8010eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010eb6:	2300      	movs	r3, #0
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3714      	adds	r7, #20
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec2:	4770      	bx	lr

08010ec4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b084      	sub	sp, #16
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ed4:	2b01      	cmp	r3, #1
 8010ed6:	d101      	bne.n	8010edc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010ed8:	2302      	movs	r3, #2
 8010eda:	e02d      	b.n	8010f38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2224      	movs	r2, #36	@ 0x24
 8010ee8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	f022 0201 	bic.w	r2, r2, #1
 8010f02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	689b      	ldr	r3, [r3, #8]
 8010f0a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	683a      	ldr	r2, [r7, #0]
 8010f14:	430a      	orrs	r2, r1
 8010f16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f000 f84f 	bl	8010fbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	68fa      	ldr	r2, [r7, #12]
 8010f24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	2220      	movs	r2, #32
 8010f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2200      	movs	r2, #0
 8010f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f36:	2300      	movs	r3, #0
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3710      	adds	r7, #16
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
 8010f48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f50:	2b01      	cmp	r3, #1
 8010f52:	d101      	bne.n	8010f58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010f54:	2302      	movs	r3, #2
 8010f56:	e02d      	b.n	8010fb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2224      	movs	r2, #36	@ 0x24
 8010f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	681a      	ldr	r2, [r3, #0]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f022 0201 	bic.w	r2, r2, #1
 8010f7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	689b      	ldr	r3, [r3, #8]
 8010f86:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	683a      	ldr	r2, [r7, #0]
 8010f90:	430a      	orrs	r2, r1
 8010f92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f000 f811 	bl	8010fbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	68fa      	ldr	r2, [r7, #12]
 8010fa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	2220      	movs	r2, #32
 8010fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2200      	movs	r2, #0
 8010fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010fb2:	2300      	movs	r3, #0
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3710      	adds	r7, #16
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b085      	sub	sp, #20
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d108      	bne.n	8010fde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	2201      	movs	r2, #1
 8010fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	2201      	movs	r2, #1
 8010fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010fdc:	e031      	b.n	8011042 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010fde:	2308      	movs	r3, #8
 8010fe0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010fe2:	2308      	movs	r3, #8
 8010fe4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	0e5b      	lsrs	r3, r3, #25
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	f003 0307 	and.w	r3, r3, #7
 8010ff4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	689b      	ldr	r3, [r3, #8]
 8010ffc:	0f5b      	lsrs	r3, r3, #29
 8010ffe:	b2db      	uxtb	r3, r3
 8011000:	f003 0307 	and.w	r3, r3, #7
 8011004:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011006:	7bbb      	ldrb	r3, [r7, #14]
 8011008:	7b3a      	ldrb	r2, [r7, #12]
 801100a:	4911      	ldr	r1, [pc, #68]	@ (8011050 <UARTEx_SetNbDataToProcess+0x94>)
 801100c:	5c8a      	ldrb	r2, [r1, r2]
 801100e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011012:	7b3a      	ldrb	r2, [r7, #12]
 8011014:	490f      	ldr	r1, [pc, #60]	@ (8011054 <UARTEx_SetNbDataToProcess+0x98>)
 8011016:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011018:	fb93 f3f2 	sdiv	r3, r3, r2
 801101c:	b29a      	uxth	r2, r3
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011024:	7bfb      	ldrb	r3, [r7, #15]
 8011026:	7b7a      	ldrb	r2, [r7, #13]
 8011028:	4909      	ldr	r1, [pc, #36]	@ (8011050 <UARTEx_SetNbDataToProcess+0x94>)
 801102a:	5c8a      	ldrb	r2, [r1, r2]
 801102c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011030:	7b7a      	ldrb	r2, [r7, #13]
 8011032:	4908      	ldr	r1, [pc, #32]	@ (8011054 <UARTEx_SetNbDataToProcess+0x98>)
 8011034:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011036:	fb93 f3f2 	sdiv	r3, r3, r2
 801103a:	b29a      	uxth	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011042:	bf00      	nop
 8011044:	3714      	adds	r7, #20
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr
 801104e:	bf00      	nop
 8011050:	0802214c 	.word	0x0802214c
 8011054:	08022154 	.word	0x08022154

08011058 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011058:	b480      	push	{r7}
 801105a:	b085      	sub	sp, #20
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2200      	movs	r2, #0
 8011064:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011068:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801106c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	b29a      	uxth	r2, r3
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8011078:	2300      	movs	r3, #0
}
 801107a:	4618      	mov	r0, r3
 801107c:	3714      	adds	r7, #20
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr

08011086 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011086:	b480      	push	{r7}
 8011088:	b085      	sub	sp, #20
 801108a:	af00      	add	r7, sp, #0
 801108c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801108e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8011092:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 801109a:	b29a      	uxth	r2, r3
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	b29b      	uxth	r3, r3
 80110a0:	43db      	mvns	r3, r3
 80110a2:	b29b      	uxth	r3, r3
 80110a4:	4013      	ands	r3, r2
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80110ae:	2300      	movs	r3, #0
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3714      	adds	r7, #20
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80110bc:	b480      	push	{r7}
 80110be:	b085      	sub	sp, #20
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	60f8      	str	r0, [r7, #12]
 80110c4:	1d3b      	adds	r3, r7, #4
 80110c6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2201      	movs	r2, #1
 80110ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	2200      	movs	r2, #0
 80110d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	2200      	movs	r2, #0
 80110de:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2200      	movs	r2, #0
 80110e6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80110ea:	2300      	movs	r3, #0
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3714      	adds	r7, #20
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr

080110f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b0a7      	sub	sp, #156	@ 0x9c
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
 8011100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8011102:	2300      	movs	r3, #0
 8011104:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011108:	687a      	ldr	r2, [r7, #4]
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	009b      	lsls	r3, r3, #2
 8011110:	4413      	add	r3, r2
 8011112:	881b      	ldrh	r3, [r3, #0]
 8011114:	b29b      	uxth	r3, r3
 8011116:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 801111a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801111e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	78db      	ldrb	r3, [r3, #3]
 8011126:	2b03      	cmp	r3, #3
 8011128:	d81f      	bhi.n	801116a <USB_ActivateEndpoint+0x72>
 801112a:	a201      	add	r2, pc, #4	@ (adr r2, 8011130 <USB_ActivateEndpoint+0x38>)
 801112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011130:	08011141 	.word	0x08011141
 8011134:	0801115d 	.word	0x0801115d
 8011138:	08011173 	.word	0x08011173
 801113c:	0801114f 	.word	0x0801114f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011140:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011144:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011148:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801114c:	e012      	b.n	8011174 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801114e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011152:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8011156:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801115a:	e00b      	b.n	8011174 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801115c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011160:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011164:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8011168:	e004      	b.n	8011174 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801116a:	2301      	movs	r3, #1
 801116c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8011170:	e000      	b.n	8011174 <USB_ActivateEndpoint+0x7c>
      break;
 8011172:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8011174:	687a      	ldr	r2, [r7, #4]
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	009b      	lsls	r3, r3, #2
 801117c:	441a      	add	r2, r3
 801117e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801118a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801118e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011192:	b29b      	uxth	r3, r3
 8011194:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8011196:	687a      	ldr	r2, [r7, #4]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	4413      	add	r3, r2
 80111a0:	881b      	ldrh	r3, [r3, #0]
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	b21b      	sxth	r3, r3
 80111a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80111aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111ae:	b21a      	sxth	r2, r3
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	b21b      	sxth	r3, r3
 80111b6:	4313      	orrs	r3, r2
 80111b8:	b21b      	sxth	r3, r3
 80111ba:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80111be:	687a      	ldr	r2, [r7, #4]
 80111c0:	683b      	ldr	r3, [r7, #0]
 80111c2:	781b      	ldrb	r3, [r3, #0]
 80111c4:	009b      	lsls	r3, r3, #2
 80111c6:	441a      	add	r2, r3
 80111c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80111cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80111d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80111d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80111d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111dc:	b29b      	uxth	r3, r3
 80111de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80111e0:	683b      	ldr	r3, [r7, #0]
 80111e2:	7b1b      	ldrb	r3, [r3, #12]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	f040 8180 	bne.w	80114ea <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	785b      	ldrb	r3, [r3, #1]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	f000 8084 	beq.w	80112fc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	61bb      	str	r3, [r7, #24]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80111fe:	b29b      	uxth	r3, r3
 8011200:	461a      	mov	r2, r3
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	4413      	add	r3, r2
 8011206:	61bb      	str	r3, [r7, #24]
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	00da      	lsls	r2, r3, #3
 801120e:	69bb      	ldr	r3, [r7, #24]
 8011210:	4413      	add	r3, r2
 8011212:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011216:	617b      	str	r3, [r7, #20]
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	88db      	ldrh	r3, [r3, #6]
 801121c:	085b      	lsrs	r3, r3, #1
 801121e:	b29b      	uxth	r3, r3
 8011220:	005b      	lsls	r3, r3, #1
 8011222:	b29a      	uxth	r2, r3
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011228:	687a      	ldr	r2, [r7, #4]
 801122a:	683b      	ldr	r3, [r7, #0]
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	4413      	add	r3, r2
 8011232:	881b      	ldrh	r3, [r3, #0]
 8011234:	827b      	strh	r3, [r7, #18]
 8011236:	8a7b      	ldrh	r3, [r7, #18]
 8011238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801123c:	2b00      	cmp	r3, #0
 801123e:	d01b      	beq.n	8011278 <USB_ActivateEndpoint+0x180>
 8011240:	687a      	ldr	r2, [r7, #4]
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	781b      	ldrb	r3, [r3, #0]
 8011246:	009b      	lsls	r3, r3, #2
 8011248:	4413      	add	r3, r2
 801124a:	881b      	ldrh	r3, [r3, #0]
 801124c:	b29b      	uxth	r3, r3
 801124e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011256:	823b      	strh	r3, [r7, #16]
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	009b      	lsls	r3, r3, #2
 8011260:	441a      	add	r2, r3
 8011262:	8a3b      	ldrh	r3, [r7, #16]
 8011264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801126c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011270:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011274:	b29b      	uxth	r3, r3
 8011276:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	78db      	ldrb	r3, [r3, #3]
 801127c:	2b01      	cmp	r3, #1
 801127e:	d020      	beq.n	80112c2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011280:	687a      	ldr	r2, [r7, #4]
 8011282:	683b      	ldr	r3, [r7, #0]
 8011284:	781b      	ldrb	r3, [r3, #0]
 8011286:	009b      	lsls	r3, r3, #2
 8011288:	4413      	add	r3, r2
 801128a:	881b      	ldrh	r3, [r3, #0]
 801128c:	b29b      	uxth	r3, r3
 801128e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011296:	81bb      	strh	r3, [r7, #12]
 8011298:	89bb      	ldrh	r3, [r7, #12]
 801129a:	f083 0320 	eor.w	r3, r3, #32
 801129e:	81bb      	strh	r3, [r7, #12]
 80112a0:	687a      	ldr	r2, [r7, #4]
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	009b      	lsls	r3, r3, #2
 80112a8:	441a      	add	r2, r3
 80112aa:	89bb      	ldrh	r3, [r7, #12]
 80112ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80112b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112bc:	b29b      	uxth	r3, r3
 80112be:	8013      	strh	r3, [r2, #0]
 80112c0:	e3f9      	b.n	8011ab6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80112c2:	687a      	ldr	r2, [r7, #4]
 80112c4:	683b      	ldr	r3, [r7, #0]
 80112c6:	781b      	ldrb	r3, [r3, #0]
 80112c8:	009b      	lsls	r3, r3, #2
 80112ca:	4413      	add	r3, r2
 80112cc:	881b      	ldrh	r3, [r3, #0]
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80112d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80112d8:	81fb      	strh	r3, [r7, #14]
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	781b      	ldrb	r3, [r3, #0]
 80112e0:	009b      	lsls	r3, r3, #2
 80112e2:	441a      	add	r2, r3
 80112e4:	89fb      	ldrh	r3, [r7, #14]
 80112e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80112f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	8013      	strh	r3, [r2, #0]
 80112fa:	e3dc      	b.n	8011ab6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011306:	b29b      	uxth	r3, r3
 8011308:	461a      	mov	r2, r3
 801130a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801130c:	4413      	add	r3, r2
 801130e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	00da      	lsls	r2, r3, #3
 8011316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011318:	4413      	add	r3, r2
 801131a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	88db      	ldrh	r3, [r3, #6]
 8011324:	085b      	lsrs	r3, r3, #1
 8011326:	b29b      	uxth	r3, r3
 8011328:	005b      	lsls	r3, r3, #1
 801132a:	b29a      	uxth	r2, r3
 801132c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801132e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801133a:	b29b      	uxth	r3, r3
 801133c:	461a      	mov	r2, r3
 801133e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011340:	4413      	add	r3, r2
 8011342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	00da      	lsls	r2, r3, #3
 801134a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801134c:	4413      	add	r3, r2
 801134e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011352:	627b      	str	r3, [r7, #36]	@ 0x24
 8011354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011356:	881b      	ldrh	r3, [r3, #0]
 8011358:	b29b      	uxth	r3, r3
 801135a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801135e:	b29a      	uxth	r2, r3
 8011360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011362:	801a      	strh	r2, [r3, #0]
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	691b      	ldr	r3, [r3, #16]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d10a      	bne.n	8011382 <USB_ActivateEndpoint+0x28a>
 801136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801136e:	881b      	ldrh	r3, [r3, #0]
 8011370:	b29b      	uxth	r3, r3
 8011372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801137a:	b29a      	uxth	r2, r3
 801137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801137e:	801a      	strh	r2, [r3, #0]
 8011380:	e041      	b.n	8011406 <USB_ActivateEndpoint+0x30e>
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	691b      	ldr	r3, [r3, #16]
 8011386:	2b3e      	cmp	r3, #62	@ 0x3e
 8011388:	d81c      	bhi.n	80113c4 <USB_ActivateEndpoint+0x2cc>
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	691b      	ldr	r3, [r3, #16]
 801138e:	085b      	lsrs	r3, r3, #1
 8011390:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	691b      	ldr	r3, [r3, #16]
 8011398:	f003 0301 	and.w	r3, r3, #1
 801139c:	2b00      	cmp	r3, #0
 801139e:	d004      	beq.n	80113aa <USB_ActivateEndpoint+0x2b2>
 80113a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80113a4:	3301      	adds	r3, #1
 80113a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80113aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ac:	881b      	ldrh	r3, [r3, #0]
 80113ae:	b29a      	uxth	r2, r3
 80113b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	029b      	lsls	r3, r3, #10
 80113b8:	b29b      	uxth	r3, r3
 80113ba:	4313      	orrs	r3, r2
 80113bc:	b29a      	uxth	r2, r3
 80113be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113c0:	801a      	strh	r2, [r3, #0]
 80113c2:	e020      	b.n	8011406 <USB_ActivateEndpoint+0x30e>
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	691b      	ldr	r3, [r3, #16]
 80113c8:	095b      	lsrs	r3, r3, #5
 80113ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80113ce:	683b      	ldr	r3, [r7, #0]
 80113d0:	691b      	ldr	r3, [r3, #16]
 80113d2:	f003 031f 	and.w	r3, r3, #31
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d104      	bne.n	80113e4 <USB_ActivateEndpoint+0x2ec>
 80113da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80113de:	3b01      	subs	r3, #1
 80113e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80113e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113e6:	881b      	ldrh	r3, [r3, #0]
 80113e8:	b29a      	uxth	r2, r3
 80113ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80113ee:	b29b      	uxth	r3, r3
 80113f0:	029b      	lsls	r3, r3, #10
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	4313      	orrs	r3, r2
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011400:	b29a      	uxth	r2, r3
 8011402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011404:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011406:	687a      	ldr	r2, [r7, #4]
 8011408:	683b      	ldr	r3, [r7, #0]
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	009b      	lsls	r3, r3, #2
 801140e:	4413      	add	r3, r2
 8011410:	881b      	ldrh	r3, [r3, #0]
 8011412:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011414:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801141a:	2b00      	cmp	r3, #0
 801141c:	d01b      	beq.n	8011456 <USB_ActivateEndpoint+0x35e>
 801141e:	687a      	ldr	r2, [r7, #4]
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	009b      	lsls	r3, r3, #2
 8011426:	4413      	add	r3, r2
 8011428:	881b      	ldrh	r3, [r3, #0]
 801142a:	b29b      	uxth	r3, r3
 801142c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011434:	843b      	strh	r3, [r7, #32]
 8011436:	687a      	ldr	r2, [r7, #4]
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	009b      	lsls	r3, r3, #2
 801143e:	441a      	add	r2, r3
 8011440:	8c3b      	ldrh	r3, [r7, #32]
 8011442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801144a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801144e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011452:	b29b      	uxth	r3, r3
 8011454:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8011456:	683b      	ldr	r3, [r7, #0]
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d124      	bne.n	80114a8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	009b      	lsls	r3, r3, #2
 8011466:	4413      	add	r3, r2
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	b29b      	uxth	r3, r3
 801146c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011474:	83bb      	strh	r3, [r7, #28]
 8011476:	8bbb      	ldrh	r3, [r7, #28]
 8011478:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 801147c:	83bb      	strh	r3, [r7, #28]
 801147e:	8bbb      	ldrh	r3, [r7, #28]
 8011480:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011484:	83bb      	strh	r3, [r7, #28]
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	009b      	lsls	r3, r3, #2
 801148e:	441a      	add	r2, r3
 8011490:	8bbb      	ldrh	r3, [r7, #28]
 8011492:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011496:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801149a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801149e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114a2:	b29b      	uxth	r3, r3
 80114a4:	8013      	strh	r3, [r2, #0]
 80114a6:	e306      	b.n	8011ab6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	009b      	lsls	r3, r3, #2
 80114b0:	4413      	add	r3, r2
 80114b2:	881b      	ldrh	r3, [r3, #0]
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80114ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80114be:	83fb      	strh	r3, [r7, #30]
 80114c0:	8bfb      	ldrh	r3, [r7, #30]
 80114c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80114c6:	83fb      	strh	r3, [r7, #30]
 80114c8:	687a      	ldr	r2, [r7, #4]
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	781b      	ldrb	r3, [r3, #0]
 80114ce:	009b      	lsls	r3, r3, #2
 80114d0:	441a      	add	r2, r3
 80114d2:	8bfb      	ldrh	r3, [r7, #30]
 80114d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80114d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80114dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80114e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	8013      	strh	r3, [r2, #0]
 80114e8:	e2e5      	b.n	8011ab6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	78db      	ldrb	r3, [r3, #3]
 80114ee:	2b02      	cmp	r3, #2
 80114f0:	d11e      	bne.n	8011530 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	009b      	lsls	r3, r3, #2
 80114fa:	4413      	add	r3, r2
 80114fc:	881b      	ldrh	r3, [r3, #0]
 80114fe:	b29b      	uxth	r3, r3
 8011500:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011504:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011508:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	683b      	ldr	r3, [r7, #0]
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	009b      	lsls	r3, r3, #2
 8011514:	441a      	add	r2, r3
 8011516:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 801151a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801151e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011522:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801152a:	b29b      	uxth	r3, r3
 801152c:	8013      	strh	r3, [r2, #0]
 801152e:	e01d      	b.n	801156c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	009b      	lsls	r3, r3, #2
 8011538:	4413      	add	r3, r2
 801153a:	881b      	ldrh	r3, [r3, #0]
 801153c:	b29b      	uxth	r3, r3
 801153e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011546:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801154a:	687a      	ldr	r2, [r7, #4]
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	009b      	lsls	r3, r3, #2
 8011552:	441a      	add	r2, r3
 8011554:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8011558:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801155c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011560:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011564:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011568:	b29b      	uxth	r3, r3
 801156a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011576:	b29b      	uxth	r3, r3
 8011578:	461a      	mov	r2, r3
 801157a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801157c:	4413      	add	r3, r2
 801157e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	781b      	ldrb	r3, [r3, #0]
 8011584:	00da      	lsls	r2, r3, #3
 8011586:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011588:	4413      	add	r3, r2
 801158a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801158e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	891b      	ldrh	r3, [r3, #8]
 8011594:	085b      	lsrs	r3, r3, #1
 8011596:	b29b      	uxth	r3, r3
 8011598:	005b      	lsls	r3, r3, #1
 801159a:	b29a      	uxth	r2, r3
 801159c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801159e:	801a      	strh	r2, [r3, #0]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	677b      	str	r3, [r7, #116]	@ 0x74
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	461a      	mov	r2, r3
 80115ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80115b0:	4413      	add	r3, r2
 80115b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	781b      	ldrb	r3, [r3, #0]
 80115b8:	00da      	lsls	r2, r3, #3
 80115ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80115bc:	4413      	add	r3, r2
 80115be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80115c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	895b      	ldrh	r3, [r3, #10]
 80115c8:	085b      	lsrs	r3, r3, #1
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	005b      	lsls	r3, r3, #1
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80115d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	785b      	ldrb	r3, [r3, #1]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f040 81af 	bne.w	801193c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80115de:	687a      	ldr	r2, [r7, #4]
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	4413      	add	r3, r2
 80115e8:	881b      	ldrh	r3, [r3, #0]
 80115ea:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 80115ee:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80115f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d01d      	beq.n	8011636 <USB_ActivateEndpoint+0x53e>
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	009b      	lsls	r3, r3, #2
 8011602:	4413      	add	r3, r2
 8011604:	881b      	ldrh	r3, [r3, #0]
 8011606:	b29b      	uxth	r3, r3
 8011608:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801160c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011610:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8011614:	687a      	ldr	r2, [r7, #4]
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	781b      	ldrb	r3, [r3, #0]
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	441a      	add	r2, r3
 801161e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8011622:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011626:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801162a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801162e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011632:	b29b      	uxth	r3, r3
 8011634:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	781b      	ldrb	r3, [r3, #0]
 801163c:	009b      	lsls	r3, r3, #2
 801163e:	4413      	add	r3, r2
 8011640:	881b      	ldrh	r3, [r3, #0]
 8011642:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8011646:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801164a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801164e:	2b00      	cmp	r3, #0
 8011650:	d01d      	beq.n	801168e <USB_ActivateEndpoint+0x596>
 8011652:	687a      	ldr	r2, [r7, #4]
 8011654:	683b      	ldr	r3, [r7, #0]
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	4413      	add	r3, r2
 801165c:	881b      	ldrh	r3, [r3, #0]
 801165e:	b29b      	uxth	r3, r3
 8011660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011668:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	781b      	ldrb	r3, [r3, #0]
 8011672:	009b      	lsls	r3, r3, #2
 8011674:	441a      	add	r2, r3
 8011676:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801167a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801167e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011686:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 801168a:	b29b      	uxth	r3, r3
 801168c:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	785b      	ldrb	r3, [r3, #1]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d16b      	bne.n	801176e <USB_ActivateEndpoint+0x676>
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	461a      	mov	r2, r3
 80116a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116a6:	4413      	add	r3, r2
 80116a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	00da      	lsls	r2, r3, #3
 80116b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116b2:	4413      	add	r3, r2
 80116b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80116b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80116ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116bc:	881b      	ldrh	r3, [r3, #0]
 80116be:	b29b      	uxth	r3, r3
 80116c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80116c4:	b29a      	uxth	r2, r3
 80116c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116c8:	801a      	strh	r2, [r3, #0]
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	691b      	ldr	r3, [r3, #16]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d10a      	bne.n	80116e8 <USB_ActivateEndpoint+0x5f0>
 80116d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116d4:	881b      	ldrh	r3, [r3, #0]
 80116d6:	b29b      	uxth	r3, r3
 80116d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116e4:	801a      	strh	r2, [r3, #0]
 80116e6:	e05d      	b.n	80117a4 <USB_ActivateEndpoint+0x6ac>
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	691b      	ldr	r3, [r3, #16]
 80116ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80116ee:	d81c      	bhi.n	801172a <USB_ActivateEndpoint+0x632>
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	691b      	ldr	r3, [r3, #16]
 80116f4:	085b      	lsrs	r3, r3, #1
 80116f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	691b      	ldr	r3, [r3, #16]
 80116fe:	f003 0301 	and.w	r3, r3, #1
 8011702:	2b00      	cmp	r3, #0
 8011704:	d004      	beq.n	8011710 <USB_ActivateEndpoint+0x618>
 8011706:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801170a:	3301      	adds	r3, #1
 801170c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011710:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011712:	881b      	ldrh	r3, [r3, #0]
 8011714:	b29a      	uxth	r2, r3
 8011716:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801171a:	b29b      	uxth	r3, r3
 801171c:	029b      	lsls	r3, r3, #10
 801171e:	b29b      	uxth	r3, r3
 8011720:	4313      	orrs	r3, r2
 8011722:	b29a      	uxth	r2, r3
 8011724:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011726:	801a      	strh	r2, [r3, #0]
 8011728:	e03c      	b.n	80117a4 <USB_ActivateEndpoint+0x6ac>
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	095b      	lsrs	r3, r3, #5
 8011730:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	691b      	ldr	r3, [r3, #16]
 8011738:	f003 031f 	and.w	r3, r3, #31
 801173c:	2b00      	cmp	r3, #0
 801173e:	d104      	bne.n	801174a <USB_ActivateEndpoint+0x652>
 8011740:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011744:	3b01      	subs	r3, #1
 8011746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801174a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	b29a      	uxth	r2, r3
 8011750:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011754:	b29b      	uxth	r3, r3
 8011756:	029b      	lsls	r3, r3, #10
 8011758:	b29b      	uxth	r3, r3
 801175a:	4313      	orrs	r3, r2
 801175c:	b29b      	uxth	r3, r3
 801175e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011766:	b29a      	uxth	r2, r3
 8011768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801176a:	801a      	strh	r2, [r3, #0]
 801176c:	e01a      	b.n	80117a4 <USB_ActivateEndpoint+0x6ac>
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	785b      	ldrb	r3, [r3, #1]
 8011772:	2b01      	cmp	r3, #1
 8011774:	d116      	bne.n	80117a4 <USB_ActivateEndpoint+0x6ac>
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	657b      	str	r3, [r7, #84]	@ 0x54
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011780:	b29b      	uxth	r3, r3
 8011782:	461a      	mov	r2, r3
 8011784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011786:	4413      	add	r3, r2
 8011788:	657b      	str	r3, [r7, #84]	@ 0x54
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	00da      	lsls	r2, r3, #3
 8011790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011792:	4413      	add	r3, r2
 8011794:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011798:	653b      	str	r3, [r7, #80]	@ 0x50
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	691b      	ldr	r3, [r3, #16]
 801179e:	b29a      	uxth	r2, r3
 80117a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117a2:	801a      	strh	r2, [r3, #0]
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	785b      	ldrb	r3, [r3, #1]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d16b      	bne.n	8011888 <USB_ActivateEndpoint+0x790>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	461a      	mov	r2, r3
 80117be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117c0:	4413      	add	r3, r2
 80117c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	00da      	lsls	r2, r3, #3
 80117ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80117cc:	4413      	add	r3, r2
 80117ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80117d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80117d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d6:	881b      	ldrh	r3, [r3, #0]
 80117d8:	b29b      	uxth	r3, r3
 80117da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80117de:	b29a      	uxth	r2, r3
 80117e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117e2:	801a      	strh	r2, [r3, #0]
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	691b      	ldr	r3, [r3, #16]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d10a      	bne.n	8011802 <USB_ActivateEndpoint+0x70a>
 80117ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117ee:	881b      	ldrh	r3, [r3, #0]
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117fe:	801a      	strh	r2, [r3, #0]
 8011800:	e05b      	b.n	80118ba <USB_ActivateEndpoint+0x7c2>
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	691b      	ldr	r3, [r3, #16]
 8011806:	2b3e      	cmp	r3, #62	@ 0x3e
 8011808:	d81c      	bhi.n	8011844 <USB_ActivateEndpoint+0x74c>
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	691b      	ldr	r3, [r3, #16]
 801180e:	085b      	lsrs	r3, r3, #1
 8011810:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	691b      	ldr	r3, [r3, #16]
 8011818:	f003 0301 	and.w	r3, r3, #1
 801181c:	2b00      	cmp	r3, #0
 801181e:	d004      	beq.n	801182a <USB_ActivateEndpoint+0x732>
 8011820:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011824:	3301      	adds	r3, #1
 8011826:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801182a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801182c:	881b      	ldrh	r3, [r3, #0]
 801182e:	b29a      	uxth	r2, r3
 8011830:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011834:	b29b      	uxth	r3, r3
 8011836:	029b      	lsls	r3, r3, #10
 8011838:	b29b      	uxth	r3, r3
 801183a:	4313      	orrs	r3, r2
 801183c:	b29a      	uxth	r2, r3
 801183e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011840:	801a      	strh	r2, [r3, #0]
 8011842:	e03a      	b.n	80118ba <USB_ActivateEndpoint+0x7c2>
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	691b      	ldr	r3, [r3, #16]
 8011848:	095b      	lsrs	r3, r3, #5
 801184a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	691b      	ldr	r3, [r3, #16]
 8011852:	f003 031f 	and.w	r3, r3, #31
 8011856:	2b00      	cmp	r3, #0
 8011858:	d104      	bne.n	8011864 <USB_ActivateEndpoint+0x76c>
 801185a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801185e:	3b01      	subs	r3, #1
 8011860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011866:	881b      	ldrh	r3, [r3, #0]
 8011868:	b29a      	uxth	r2, r3
 801186a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801186e:	b29b      	uxth	r3, r3
 8011870:	029b      	lsls	r3, r3, #10
 8011872:	b29b      	uxth	r3, r3
 8011874:	4313      	orrs	r3, r2
 8011876:	b29b      	uxth	r3, r3
 8011878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801187c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011880:	b29a      	uxth	r2, r3
 8011882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011884:	801a      	strh	r2, [r3, #0]
 8011886:	e018      	b.n	80118ba <USB_ActivateEndpoint+0x7c2>
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	785b      	ldrb	r3, [r3, #1]
 801188c:	2b01      	cmp	r3, #1
 801188e:	d114      	bne.n	80118ba <USB_ActivateEndpoint+0x7c2>
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011896:	b29b      	uxth	r3, r3
 8011898:	461a      	mov	r2, r3
 801189a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801189c:	4413      	add	r3, r2
 801189e:	647b      	str	r3, [r7, #68]	@ 0x44
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	781b      	ldrb	r3, [r3, #0]
 80118a4:	00da      	lsls	r2, r3, #3
 80118a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118a8:	4413      	add	r3, r2
 80118aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80118ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	691b      	ldr	r3, [r3, #16]
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118b8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80118ba:	687a      	ldr	r2, [r7, #4]
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	781b      	ldrb	r3, [r3, #0]
 80118c0:	009b      	lsls	r3, r3, #2
 80118c2:	4413      	add	r3, r2
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	b29b      	uxth	r3, r3
 80118c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80118cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80118d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80118d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80118d4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80118d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80118da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80118dc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80118e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	781b      	ldrb	r3, [r3, #0]
 80118e8:	009b      	lsls	r3, r3, #2
 80118ea:	441a      	add	r2, r3
 80118ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80118ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80118f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80118f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118fe:	b29b      	uxth	r3, r3
 8011900:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011902:	687a      	ldr	r2, [r7, #4]
 8011904:	683b      	ldr	r3, [r7, #0]
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	009b      	lsls	r3, r3, #2
 801190a:	4413      	add	r3, r2
 801190c:	881b      	ldrh	r3, [r3, #0]
 801190e:	b29b      	uxth	r3, r3
 8011910:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011918:	86bb      	strh	r3, [r7, #52]	@ 0x34
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	781b      	ldrb	r3, [r3, #0]
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	441a      	add	r2, r3
 8011924:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801192a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801192e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011936:	b29b      	uxth	r3, r3
 8011938:	8013      	strh	r3, [r2, #0]
 801193a:	e0bc      	b.n	8011ab6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	009b      	lsls	r3, r3, #2
 8011944:	4413      	add	r3, r2
 8011946:	881b      	ldrh	r3, [r3, #0]
 8011948:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 801194c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011954:	2b00      	cmp	r3, #0
 8011956:	d01d      	beq.n	8011994 <USB_ActivateEndpoint+0x89c>
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	009b      	lsls	r3, r3, #2
 8011960:	4413      	add	r3, r2
 8011962:	881b      	ldrh	r3, [r3, #0]
 8011964:	b29b      	uxth	r3, r3
 8011966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801196a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801196e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	441a      	add	r2, r3
 801197c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801198c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011990:	b29b      	uxth	r3, r3
 8011992:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	683b      	ldr	r3, [r7, #0]
 8011998:	781b      	ldrb	r3, [r3, #0]
 801199a:	009b      	lsls	r3, r3, #2
 801199c:	4413      	add	r3, r2
 801199e:	881b      	ldrh	r3, [r3, #0]
 80119a0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 80119a4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80119a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d01d      	beq.n	80119ec <USB_ActivateEndpoint+0x8f4>
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	781b      	ldrb	r3, [r3, #0]
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	4413      	add	r3, r2
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	b29b      	uxth	r3, r3
 80119be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80119c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80119c6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	781b      	ldrb	r3, [r3, #0]
 80119d0:	009b      	lsls	r3, r3, #2
 80119d2:	441a      	add	r2, r3
 80119d4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80119d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80119dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80119e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80119e4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	78db      	ldrb	r3, [r3, #3]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d024      	beq.n	8011a3e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80119f4:	687a      	ldr	r2, [r7, #4]
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	781b      	ldrb	r3, [r3, #0]
 80119fa:	009b      	lsls	r3, r3, #2
 80119fc:	4413      	add	r3, r2
 80119fe:	881b      	ldrh	r3, [r3, #0]
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a0a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011a0e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011a12:	f083 0320 	eor.w	r3, r3, #32
 8011a16:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011a1a:	687a      	ldr	r2, [r7, #4]
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	009b      	lsls	r3, r3, #2
 8011a22:	441a      	add	r2, r3
 8011a24:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011a28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	8013      	strh	r3, [r2, #0]
 8011a3c:	e01d      	b.n	8011a7a <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	683b      	ldr	r3, [r7, #0]
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	4413      	add	r3, r2
 8011a48:	881b      	ldrh	r3, [r3, #0]
 8011a4a:	b29b      	uxth	r3, r3
 8011a4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a54:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011a58:	687a      	ldr	r2, [r7, #4]
 8011a5a:	683b      	ldr	r3, [r7, #0]
 8011a5c:	781b      	ldrb	r3, [r3, #0]
 8011a5e:	009b      	lsls	r3, r3, #2
 8011a60:	441a      	add	r2, r3
 8011a62:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a76:	b29b      	uxth	r3, r3
 8011a78:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	683b      	ldr	r3, [r7, #0]
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	009b      	lsls	r3, r3, #2
 8011a82:	4413      	add	r3, r2
 8011a84:	881b      	ldrh	r3, [r3, #0]
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011a8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a90:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011a94:	687a      	ldr	r2, [r7, #4]
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	441a      	add	r2, r3
 8011a9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011aa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011aa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011ab6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	379c      	adds	r7, #156	@ 0x9c
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr
 8011ac6:	bf00      	nop

08011ac8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b08d      	sub	sp, #52	@ 0x34
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	7b1b      	ldrb	r3, [r3, #12]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	f040 808e 	bne.w	8011bf8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	785b      	ldrb	r3, [r3, #1]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d044      	beq.n	8011b6e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	781b      	ldrb	r3, [r3, #0]
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4413      	add	r3, r2
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	81bb      	strh	r3, [r7, #12]
 8011af2:	89bb      	ldrh	r3, [r7, #12]
 8011af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d01b      	beq.n	8011b34 <USB_DeactivateEndpoint+0x6c>
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	781b      	ldrb	r3, [r3, #0]
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	4413      	add	r3, r2
 8011b06:	881b      	ldrh	r3, [r3, #0]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b12:	817b      	strh	r3, [r7, #10]
 8011b14:	687a      	ldr	r2, [r7, #4]
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	781b      	ldrb	r3, [r3, #0]
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	441a      	add	r2, r3
 8011b1e:	897b      	ldrh	r3, [r7, #10]
 8011b20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011b34:	687a      	ldr	r2, [r7, #4]
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	009b      	lsls	r3, r3, #2
 8011b3c:	4413      	add	r3, r2
 8011b3e:	881b      	ldrh	r3, [r3, #0]
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b4a:	813b      	strh	r3, [r7, #8]
 8011b4c:	687a      	ldr	r2, [r7, #4]
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	441a      	add	r2, r3
 8011b56:	893b      	ldrh	r3, [r7, #8]
 8011b58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	8013      	strh	r3, [r2, #0]
 8011b6c:	e192      	b.n	8011e94 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	4413      	add	r3, r2
 8011b78:	881b      	ldrh	r3, [r3, #0]
 8011b7a:	827b      	strh	r3, [r7, #18]
 8011b7c:	8a7b      	ldrh	r3, [r7, #18]
 8011b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d01b      	beq.n	8011bbe <USB_DeactivateEndpoint+0xf6>
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	4413      	add	r3, r2
 8011b90:	881b      	ldrh	r3, [r3, #0]
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b9c:	823b      	strh	r3, [r7, #16]
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	009b      	lsls	r3, r3, #2
 8011ba6:	441a      	add	r2, r3
 8011ba8:	8a3b      	ldrh	r3, [r7, #16]
 8011baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bba:	b29b      	uxth	r3, r3
 8011bbc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011bbe:	687a      	ldr	r2, [r7, #4]
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	4413      	add	r3, r2
 8011bc8:	881b      	ldrh	r3, [r3, #0]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bd4:	81fb      	strh	r3, [r7, #14]
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	009b      	lsls	r3, r3, #2
 8011bde:	441a      	add	r2, r3
 8011be0:	89fb      	ldrh	r3, [r7, #14]
 8011be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	8013      	strh	r3, [r2, #0]
 8011bf6:	e14d      	b.n	8011e94 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	785b      	ldrb	r3, [r3, #1]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	f040 80a5 	bne.w	8011d4c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	4413      	add	r3, r2
 8011c0c:	881b      	ldrh	r3, [r3, #0]
 8011c0e:	843b      	strh	r3, [r7, #32]
 8011c10:	8c3b      	ldrh	r3, [r7, #32]
 8011c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d01b      	beq.n	8011c52 <USB_DeactivateEndpoint+0x18a>
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	009b      	lsls	r3, r3, #2
 8011c22:	4413      	add	r3, r2
 8011c24:	881b      	ldrh	r3, [r3, #0]
 8011c26:	b29b      	uxth	r3, r3
 8011c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c30:	83fb      	strh	r3, [r7, #30]
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	441a      	add	r2, r3
 8011c3c:	8bfb      	ldrh	r3, [r7, #30]
 8011c3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c4e:	b29b      	uxth	r3, r3
 8011c50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011c52:	687a      	ldr	r2, [r7, #4]
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	009b      	lsls	r3, r3, #2
 8011c5a:	4413      	add	r3, r2
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	83bb      	strh	r3, [r7, #28]
 8011c60:	8bbb      	ldrh	r3, [r7, #28]
 8011c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d01b      	beq.n	8011ca2 <USB_DeactivateEndpoint+0x1da>
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	781b      	ldrb	r3, [r3, #0]
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	4413      	add	r3, r2
 8011c74:	881b      	ldrh	r3, [r3, #0]
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c80:	837b      	strh	r3, [r7, #26]
 8011c82:	687a      	ldr	r2, [r7, #4]
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	009b      	lsls	r3, r3, #2
 8011c8a:	441a      	add	r2, r3
 8011c8c:	8b7b      	ldrh	r3, [r7, #26]
 8011c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011c9e:	b29b      	uxth	r3, r3
 8011ca0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	009b      	lsls	r3, r3, #2
 8011caa:	4413      	add	r3, r2
 8011cac:	881b      	ldrh	r3, [r3, #0]
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011cb8:	833b      	strh	r3, [r7, #24]
 8011cba:	687a      	ldr	r2, [r7, #4]
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	781b      	ldrb	r3, [r3, #0]
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	441a      	add	r2, r3
 8011cc4:	8b3b      	ldrh	r3, [r7, #24]
 8011cc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cd2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011cd6:	b29b      	uxth	r3, r3
 8011cd8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	4413      	add	r3, r2
 8011ce4:	881b      	ldrh	r3, [r3, #0]
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011cf0:	82fb      	strh	r3, [r7, #22]
 8011cf2:	687a      	ldr	r2, [r7, #4]
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	781b      	ldrb	r3, [r3, #0]
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	441a      	add	r2, r3
 8011cfc:	8afb      	ldrh	r3, [r7, #22]
 8011cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011d12:	687a      	ldr	r2, [r7, #4]
 8011d14:	683b      	ldr	r3, [r7, #0]
 8011d16:	781b      	ldrb	r3, [r3, #0]
 8011d18:	009b      	lsls	r3, r3, #2
 8011d1a:	4413      	add	r3, r2
 8011d1c:	881b      	ldrh	r3, [r3, #0]
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d28:	82bb      	strh	r3, [r7, #20]
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	441a      	add	r2, r3
 8011d34:	8abb      	ldrh	r3, [r7, #20]
 8011d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	8013      	strh	r3, [r2, #0]
 8011d4a:	e0a3      	b.n	8011e94 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011d4c:	687a      	ldr	r2, [r7, #4]
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	781b      	ldrb	r3, [r3, #0]
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	4413      	add	r3, r2
 8011d56:	881b      	ldrh	r3, [r3, #0]
 8011d58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011d5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d01b      	beq.n	8011d9c <USB_DeactivateEndpoint+0x2d4>
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	4413      	add	r3, r2
 8011d6e:	881b      	ldrh	r3, [r3, #0]
 8011d70:	b29b      	uxth	r3, r3
 8011d72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d7a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011d7c:	687a      	ldr	r2, [r7, #4]
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	781b      	ldrb	r3, [r3, #0]
 8011d82:	009b      	lsls	r3, r3, #2
 8011d84:	441a      	add	r2, r3
 8011d86:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011d88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	781b      	ldrb	r3, [r3, #0]
 8011da2:	009b      	lsls	r3, r3, #2
 8011da4:	4413      	add	r3, r2
 8011da6:	881b      	ldrh	r3, [r3, #0]
 8011da8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011daa:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011dac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d01b      	beq.n	8011dec <USB_DeactivateEndpoint+0x324>
 8011db4:	687a      	ldr	r2, [r7, #4]
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	009b      	lsls	r3, r3, #2
 8011dbc:	4413      	add	r3, r2
 8011dbe:	881b      	ldrh	r3, [r3, #0]
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011dca:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	781b      	ldrb	r3, [r3, #0]
 8011dd2:	009b      	lsls	r3, r3, #2
 8011dd4:	441a      	add	r2, r3
 8011dd6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011dd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ddc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011de0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011de4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011de8:	b29b      	uxth	r3, r3
 8011dea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011dec:	687a      	ldr	r2, [r7, #4]
 8011dee:	683b      	ldr	r3, [r7, #0]
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	4413      	add	r3, r2
 8011df6:	881b      	ldrh	r3, [r3, #0]
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e02:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011e04:	687a      	ldr	r2, [r7, #4]
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	781b      	ldrb	r3, [r3, #0]
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	441a      	add	r2, r3
 8011e0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011e10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e20:	b29b      	uxth	r3, r3
 8011e22:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011e24:	687a      	ldr	r2, [r7, #4]
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	781b      	ldrb	r3, [r3, #0]
 8011e2a:	009b      	lsls	r3, r3, #2
 8011e2c:	4413      	add	r3, r2
 8011e2e:	881b      	ldrh	r3, [r3, #0]
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e3a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	781b      	ldrb	r3, [r3, #0]
 8011e42:	009b      	lsls	r3, r3, #2
 8011e44:	441a      	add	r2, r3
 8011e46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011e48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011e5c:	687a      	ldr	r2, [r7, #4]
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	009b      	lsls	r3, r3, #2
 8011e64:	4413      	add	r3, r2
 8011e66:	881b      	ldrh	r3, [r3, #0]
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e72:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011e74:	687a      	ldr	r2, [r7, #4]
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	781b      	ldrb	r3, [r3, #0]
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	441a      	add	r2, r3
 8011e7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e90:	b29b      	uxth	r3, r3
 8011e92:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011e94:	2300      	movs	r3, #0
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3734      	adds	r7, #52	@ 0x34
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea0:	4770      	bx	lr

08011ea2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011ea2:	b580      	push	{r7, lr}
 8011ea4:	b0ac      	sub	sp, #176	@ 0xb0
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
 8011eaa:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	785b      	ldrb	r3, [r3, #1]
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	f040 84ca 	bne.w	801284a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	699a      	ldr	r2, [r3, #24]
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	691b      	ldr	r3, [r3, #16]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d904      	bls.n	8011ecc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	691b      	ldr	r3, [r3, #16]
 8011ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011eca:	e003      	b.n	8011ed4 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	699b      	ldr	r3, [r3, #24]
 8011ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	7b1b      	ldrb	r3, [r3, #12]
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d122      	bne.n	8011f22 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	6959      	ldr	r1, [r3, #20]
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	88da      	ldrh	r2, [r3, #6]
 8011ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ee8:	b29b      	uxth	r3, r3
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f000 febd 	bl	8012c6a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	613b      	str	r3, [r7, #16]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011efa:	b29b      	uxth	r3, r3
 8011efc:	461a      	mov	r2, r3
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	4413      	add	r3, r2
 8011f02:	613b      	str	r3, [r7, #16]
 8011f04:	683b      	ldr	r3, [r7, #0]
 8011f06:	781b      	ldrb	r3, [r3, #0]
 8011f08:	00da      	lsls	r2, r3, #3
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	4413      	add	r3, r2
 8011f0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011f12:	60fb      	str	r3, [r7, #12]
 8011f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	801a      	strh	r2, [r3, #0]
 8011f1e:	f000 bc6f 	b.w	8012800 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8011f22:	683b      	ldr	r3, [r7, #0]
 8011f24:	78db      	ldrb	r3, [r3, #3]
 8011f26:	2b02      	cmp	r3, #2
 8011f28:	f040 831e 	bne.w	8012568 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011f2c:	683b      	ldr	r3, [r7, #0]
 8011f2e:	6a1a      	ldr	r2, [r3, #32]
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	691b      	ldr	r3, [r3, #16]
 8011f34:	429a      	cmp	r2, r3
 8011f36:	f240 82cf 	bls.w	80124d8 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011f3a:	687a      	ldr	r2, [r7, #4]
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	009b      	lsls	r3, r3, #2
 8011f42:	4413      	add	r3, r2
 8011f44:	881b      	ldrh	r3, [r3, #0]
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f50:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	441a      	add	r2, r3
 8011f5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8011f62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f6a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f72:	b29b      	uxth	r3, r3
 8011f74:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8011f76:	683b      	ldr	r3, [r7, #0]
 8011f78:	6a1a      	ldr	r2, [r3, #32]
 8011f7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011f7e:	1ad2      	subs	r2, r2, r3
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8011f84:	687a      	ldr	r2, [r7, #4]
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	009b      	lsls	r3, r3, #2
 8011f8c:	4413      	add	r3, r2
 8011f8e:	881b      	ldrh	r3, [r3, #0]
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f000 814f 	beq.w	801223a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	785b      	ldrb	r3, [r3, #1]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d16b      	bne.n	8012080 <USB_EPStartXfer+0x1de>
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011fb2:	b29b      	uxth	r3, r3
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fb8:	4413      	add	r3, r2
 8011fba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	00da      	lsls	r2, r3, #3
 8011fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc4:	4413      	add	r3, r2
 8011fc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8011fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fce:	881b      	ldrh	r3, [r3, #0]
 8011fd0:	b29b      	uxth	r3, r3
 8011fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011fd6:	b29a      	uxth	r2, r3
 8011fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fda:	801a      	strh	r2, [r3, #0]
 8011fdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d10a      	bne.n	8011ffa <USB_EPStartXfer+0x158>
 8011fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fe6:	881b      	ldrh	r3, [r3, #0]
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ff2:	b29a      	uxth	r2, r3
 8011ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ff6:	801a      	strh	r2, [r3, #0]
 8011ff8:	e05b      	b.n	80120b2 <USB_EPStartXfer+0x210>
 8011ffa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011ffe:	2b3e      	cmp	r3, #62	@ 0x3e
 8012000:	d81c      	bhi.n	801203c <USB_EPStartXfer+0x19a>
 8012002:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012006:	085b      	lsrs	r3, r3, #1
 8012008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801200c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012010:	f003 0301 	and.w	r3, r3, #1
 8012014:	2b00      	cmp	r3, #0
 8012016:	d004      	beq.n	8012022 <USB_EPStartXfer+0x180>
 8012018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801201c:	3301      	adds	r3, #1
 801201e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012024:	881b      	ldrh	r3, [r3, #0]
 8012026:	b29a      	uxth	r2, r3
 8012028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801202c:	b29b      	uxth	r3, r3
 801202e:	029b      	lsls	r3, r3, #10
 8012030:	b29b      	uxth	r3, r3
 8012032:	4313      	orrs	r3, r2
 8012034:	b29a      	uxth	r2, r3
 8012036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012038:	801a      	strh	r2, [r3, #0]
 801203a:	e03a      	b.n	80120b2 <USB_EPStartXfer+0x210>
 801203c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012040:	095b      	lsrs	r3, r3, #5
 8012042:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801204a:	f003 031f 	and.w	r3, r3, #31
 801204e:	2b00      	cmp	r3, #0
 8012050:	d104      	bne.n	801205c <USB_EPStartXfer+0x1ba>
 8012052:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012056:	3b01      	subs	r3, #1
 8012058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801205e:	881b      	ldrh	r3, [r3, #0]
 8012060:	b29a      	uxth	r2, r3
 8012062:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012066:	b29b      	uxth	r3, r3
 8012068:	029b      	lsls	r3, r3, #10
 801206a:	b29b      	uxth	r3, r3
 801206c:	4313      	orrs	r3, r2
 801206e:	b29b      	uxth	r3, r3
 8012070:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012074:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012078:	b29a      	uxth	r2, r3
 801207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801207c:	801a      	strh	r2, [r3, #0]
 801207e:	e018      	b.n	80120b2 <USB_EPStartXfer+0x210>
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	785b      	ldrb	r3, [r3, #1]
 8012084:	2b01      	cmp	r3, #1
 8012086:	d114      	bne.n	80120b2 <USB_EPStartXfer+0x210>
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801208e:	b29b      	uxth	r3, r3
 8012090:	461a      	mov	r2, r3
 8012092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012094:	4413      	add	r3, r2
 8012096:	633b      	str	r3, [r7, #48]	@ 0x30
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	781b      	ldrb	r3, [r3, #0]
 801209c:	00da      	lsls	r2, r3, #3
 801209e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120a0:	4413      	add	r3, r2
 80120a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80120a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80120a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120ac:	b29a      	uxth	r2, r3
 80120ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80120b2:	683b      	ldr	r3, [r7, #0]
 80120b4:	895b      	ldrh	r3, [r3, #10]
 80120b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80120ba:	683b      	ldr	r3, [r7, #0]
 80120bc:	6959      	ldr	r1, [r3, #20]
 80120be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120c2:	b29b      	uxth	r3, r3
 80120c4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 fdce 	bl	8012c6a <USB_WritePMA>
            ep->xfer_buff += len;
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	695a      	ldr	r2, [r3, #20]
 80120d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120d6:	441a      	add	r2, r3
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	6a1a      	ldr	r2, [r3, #32]
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	691b      	ldr	r3, [r3, #16]
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d907      	bls.n	80120f8 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	6a1a      	ldr	r2, [r3, #32]
 80120ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120f0:	1ad2      	subs	r2, r2, r3
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	621a      	str	r2, [r3, #32]
 80120f6:	e006      	b.n	8012106 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	6a1b      	ldr	r3, [r3, #32]
 80120fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8012100:	683b      	ldr	r3, [r7, #0]
 8012102:	2200      	movs	r2, #0
 8012104:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	785b      	ldrb	r3, [r3, #1]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d16b      	bne.n	80121e6 <USB_EPStartXfer+0x344>
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	61bb      	str	r3, [r7, #24]
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012118:	b29b      	uxth	r3, r3
 801211a:	461a      	mov	r2, r3
 801211c:	69bb      	ldr	r3, [r7, #24]
 801211e:	4413      	add	r3, r2
 8012120:	61bb      	str	r3, [r7, #24]
 8012122:	683b      	ldr	r3, [r7, #0]
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	00da      	lsls	r2, r3, #3
 8012128:	69bb      	ldr	r3, [r7, #24]
 801212a:	4413      	add	r3, r2
 801212c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012130:	617b      	str	r3, [r7, #20]
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	b29b      	uxth	r3, r3
 8012138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801213c:	b29a      	uxth	r2, r3
 801213e:	697b      	ldr	r3, [r7, #20]
 8012140:	801a      	strh	r2, [r3, #0]
 8012142:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012146:	2b00      	cmp	r3, #0
 8012148:	d10a      	bne.n	8012160 <USB_EPStartXfer+0x2be>
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	881b      	ldrh	r3, [r3, #0]
 801214e:	b29b      	uxth	r3, r3
 8012150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012158:	b29a      	uxth	r2, r3
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	801a      	strh	r2, [r3, #0]
 801215e:	e05d      	b.n	801221c <USB_EPStartXfer+0x37a>
 8012160:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012164:	2b3e      	cmp	r3, #62	@ 0x3e
 8012166:	d81c      	bhi.n	80121a2 <USB_EPStartXfer+0x300>
 8012168:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801216c:	085b      	lsrs	r3, r3, #1
 801216e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012172:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012176:	f003 0301 	and.w	r3, r3, #1
 801217a:	2b00      	cmp	r3, #0
 801217c:	d004      	beq.n	8012188 <USB_EPStartXfer+0x2e6>
 801217e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012182:	3301      	adds	r3, #1
 8012184:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	881b      	ldrh	r3, [r3, #0]
 801218c:	b29a      	uxth	r2, r3
 801218e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012192:	b29b      	uxth	r3, r3
 8012194:	029b      	lsls	r3, r3, #10
 8012196:	b29b      	uxth	r3, r3
 8012198:	4313      	orrs	r3, r2
 801219a:	b29a      	uxth	r2, r3
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	801a      	strh	r2, [r3, #0]
 80121a0:	e03c      	b.n	801221c <USB_EPStartXfer+0x37a>
 80121a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121a6:	095b      	lsrs	r3, r3, #5
 80121a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80121ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121b0:	f003 031f 	and.w	r3, r3, #31
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d104      	bne.n	80121c2 <USB_EPStartXfer+0x320>
 80121b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80121bc:	3b01      	subs	r3, #1
 80121be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	881b      	ldrh	r3, [r3, #0]
 80121c6:	b29a      	uxth	r2, r3
 80121c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80121cc:	b29b      	uxth	r3, r3
 80121ce:	029b      	lsls	r3, r3, #10
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	4313      	orrs	r3, r2
 80121d4:	b29b      	uxth	r3, r3
 80121d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121de:	b29a      	uxth	r2, r3
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	801a      	strh	r2, [r3, #0]
 80121e4:	e01a      	b.n	801221c <USB_EPStartXfer+0x37a>
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	785b      	ldrb	r3, [r3, #1]
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	d116      	bne.n	801221c <USB_EPStartXfer+0x37a>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	623b      	str	r3, [r7, #32]
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	461a      	mov	r2, r3
 80121fc:	6a3b      	ldr	r3, [r7, #32]
 80121fe:	4413      	add	r3, r2
 8012200:	623b      	str	r3, [r7, #32]
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	00da      	lsls	r2, r3, #3
 8012208:	6a3b      	ldr	r3, [r7, #32]
 801220a:	4413      	add	r3, r2
 801220c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012210:	61fb      	str	r3, [r7, #28]
 8012212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012216:	b29a      	uxth	r2, r3
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	891b      	ldrh	r3, [r3, #8]
 8012220:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012224:	683b      	ldr	r3, [r7, #0]
 8012226:	6959      	ldr	r1, [r3, #20]
 8012228:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801222c:	b29b      	uxth	r3, r3
 801222e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 fd19 	bl	8012c6a <USB_WritePMA>
 8012238:	e2e2      	b.n	8012800 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	785b      	ldrb	r3, [r3, #1]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d16b      	bne.n	801231a <USB_EPStartXfer+0x478>
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801224c:	b29b      	uxth	r3, r3
 801224e:	461a      	mov	r2, r3
 8012250:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012252:	4413      	add	r3, r2
 8012254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012256:	683b      	ldr	r3, [r7, #0]
 8012258:	781b      	ldrb	r3, [r3, #0]
 801225a:	00da      	lsls	r2, r3, #3
 801225c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801225e:	4413      	add	r3, r2
 8012260:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012264:	647b      	str	r3, [r7, #68]	@ 0x44
 8012266:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012268:	881b      	ldrh	r3, [r3, #0]
 801226a:	b29b      	uxth	r3, r3
 801226c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012270:	b29a      	uxth	r2, r3
 8012272:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012274:	801a      	strh	r2, [r3, #0]
 8012276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801227a:	2b00      	cmp	r3, #0
 801227c:	d10a      	bne.n	8012294 <USB_EPStartXfer+0x3f2>
 801227e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012280:	881b      	ldrh	r3, [r3, #0]
 8012282:	b29b      	uxth	r3, r3
 8012284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801228c:	b29a      	uxth	r2, r3
 801228e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012290:	801a      	strh	r2, [r3, #0]
 8012292:	e05d      	b.n	8012350 <USB_EPStartXfer+0x4ae>
 8012294:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012298:	2b3e      	cmp	r3, #62	@ 0x3e
 801229a:	d81c      	bhi.n	80122d6 <USB_EPStartXfer+0x434>
 801229c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122a0:	085b      	lsrs	r3, r3, #1
 80122a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80122a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122aa:	f003 0301 	and.w	r3, r3, #1
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d004      	beq.n	80122bc <USB_EPStartXfer+0x41a>
 80122b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80122b6:	3301      	adds	r3, #1
 80122b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80122bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122be:	881b      	ldrh	r3, [r3, #0]
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	029b      	lsls	r3, r3, #10
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	4313      	orrs	r3, r2
 80122ce:	b29a      	uxth	r2, r3
 80122d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122d2:	801a      	strh	r2, [r3, #0]
 80122d4:	e03c      	b.n	8012350 <USB_EPStartXfer+0x4ae>
 80122d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122da:	095b      	lsrs	r3, r3, #5
 80122dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80122e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122e4:	f003 031f 	and.w	r3, r3, #31
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d104      	bne.n	80122f6 <USB_EPStartXfer+0x454>
 80122ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80122f0:	3b01      	subs	r3, #1
 80122f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80122f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80122f8:	881b      	ldrh	r3, [r3, #0]
 80122fa:	b29a      	uxth	r2, r3
 80122fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012300:	b29b      	uxth	r3, r3
 8012302:	029b      	lsls	r3, r3, #10
 8012304:	b29b      	uxth	r3, r3
 8012306:	4313      	orrs	r3, r2
 8012308:	b29b      	uxth	r3, r3
 801230a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801230e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012312:	b29a      	uxth	r2, r3
 8012314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012316:	801a      	strh	r2, [r3, #0]
 8012318:	e01a      	b.n	8012350 <USB_EPStartXfer+0x4ae>
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	785b      	ldrb	r3, [r3, #1]
 801231e:	2b01      	cmp	r3, #1
 8012320:	d116      	bne.n	8012350 <USB_EPStartXfer+0x4ae>
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	653b      	str	r3, [r7, #80]	@ 0x50
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801232c:	b29b      	uxth	r3, r3
 801232e:	461a      	mov	r2, r3
 8012330:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012332:	4413      	add	r3, r2
 8012334:	653b      	str	r3, [r7, #80]	@ 0x50
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	00da      	lsls	r2, r3, #3
 801233c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801233e:	4413      	add	r3, r2
 8012340:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801234a:	b29a      	uxth	r2, r3
 801234c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801234e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	891b      	ldrh	r3, [r3, #8]
 8012354:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	6959      	ldr	r1, [r3, #20]
 801235c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012360:	b29b      	uxth	r3, r3
 8012362:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f000 fc7f 	bl	8012c6a <USB_WritePMA>
            ep->xfer_buff += len;
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	695a      	ldr	r2, [r3, #20]
 8012370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012374:	441a      	add	r2, r3
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	6a1a      	ldr	r2, [r3, #32]
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	691b      	ldr	r3, [r3, #16]
 8012382:	429a      	cmp	r2, r3
 8012384:	d907      	bls.n	8012396 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	6a1a      	ldr	r2, [r3, #32]
 801238a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801238e:	1ad2      	subs	r2, r2, r3
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	621a      	str	r2, [r3, #32]
 8012394:	e006      	b.n	80123a4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	6a1b      	ldr	r3, [r3, #32]
 801239a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 801239e:	683b      	ldr	r3, [r7, #0]
 80123a0:	2200      	movs	r2, #0
 80123a2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80123a8:	683b      	ldr	r3, [r7, #0]
 80123aa:	785b      	ldrb	r3, [r3, #1]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d16b      	bne.n	8012488 <USB_EPStartXfer+0x5e6>
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80123ba:	b29b      	uxth	r3, r3
 80123bc:	461a      	mov	r2, r3
 80123be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123c0:	4413      	add	r3, r2
 80123c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123c4:	683b      	ldr	r3, [r7, #0]
 80123c6:	781b      	ldrb	r3, [r3, #0]
 80123c8:	00da      	lsls	r2, r3, #3
 80123ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123cc:	4413      	add	r3, r2
 80123ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80123d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80123d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123d6:	881b      	ldrh	r3, [r3, #0]
 80123d8:	b29b      	uxth	r3, r3
 80123da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80123de:	b29a      	uxth	r2, r3
 80123e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123e2:	801a      	strh	r2, [r3, #0]
 80123e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d10a      	bne.n	8012402 <USB_EPStartXfer+0x560>
 80123ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	b29b      	uxth	r3, r3
 80123f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123fe:	801a      	strh	r2, [r3, #0]
 8012400:	e05b      	b.n	80124ba <USB_EPStartXfer+0x618>
 8012402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012406:	2b3e      	cmp	r3, #62	@ 0x3e
 8012408:	d81c      	bhi.n	8012444 <USB_EPStartXfer+0x5a2>
 801240a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801240e:	085b      	lsrs	r3, r3, #1
 8012410:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012418:	f003 0301 	and.w	r3, r3, #1
 801241c:	2b00      	cmp	r3, #0
 801241e:	d004      	beq.n	801242a <USB_EPStartXfer+0x588>
 8012420:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012424:	3301      	adds	r3, #1
 8012426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801242a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801242c:	881b      	ldrh	r3, [r3, #0]
 801242e:	b29a      	uxth	r2, r3
 8012430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012434:	b29b      	uxth	r3, r3
 8012436:	029b      	lsls	r3, r3, #10
 8012438:	b29b      	uxth	r3, r3
 801243a:	4313      	orrs	r3, r2
 801243c:	b29a      	uxth	r2, r3
 801243e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012440:	801a      	strh	r2, [r3, #0]
 8012442:	e03a      	b.n	80124ba <USB_EPStartXfer+0x618>
 8012444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012448:	095b      	lsrs	r3, r3, #5
 801244a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801244e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012452:	f003 031f 	and.w	r3, r3, #31
 8012456:	2b00      	cmp	r3, #0
 8012458:	d104      	bne.n	8012464 <USB_EPStartXfer+0x5c2>
 801245a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801245e:	3b01      	subs	r3, #1
 8012460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012466:	881b      	ldrh	r3, [r3, #0]
 8012468:	b29a      	uxth	r2, r3
 801246a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801246e:	b29b      	uxth	r3, r3
 8012470:	029b      	lsls	r3, r3, #10
 8012472:	b29b      	uxth	r3, r3
 8012474:	4313      	orrs	r3, r2
 8012476:	b29b      	uxth	r3, r3
 8012478:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801247c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012480:	b29a      	uxth	r2, r3
 8012482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012484:	801a      	strh	r2, [r3, #0]
 8012486:	e018      	b.n	80124ba <USB_EPStartXfer+0x618>
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	785b      	ldrb	r3, [r3, #1]
 801248c:	2b01      	cmp	r3, #1
 801248e:	d114      	bne.n	80124ba <USB_EPStartXfer+0x618>
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012496:	b29b      	uxth	r3, r3
 8012498:	461a      	mov	r2, r3
 801249a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801249c:	4413      	add	r3, r2
 801249e:	643b      	str	r3, [r7, #64]	@ 0x40
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	00da      	lsls	r2, r3, #3
 80124a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80124a8:	4413      	add	r3, r2
 80124aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80124ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80124b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124b4:	b29a      	uxth	r2, r3
 80124b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80124b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	895b      	ldrh	r3, [r3, #10]
 80124be:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	6959      	ldr	r1, [r3, #20]
 80124c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 fbca 	bl	8012c6a <USB_WritePMA>
 80124d6:	e193      	b.n	8012800 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	6a1b      	ldr	r3, [r3, #32]
 80124dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80124e0:	687a      	ldr	r2, [r7, #4]
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	009b      	lsls	r3, r3, #2
 80124e8:	4413      	add	r3, r2
 80124ea:	881b      	ldrh	r3, [r3, #0]
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80124f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80124f6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	683b      	ldr	r3, [r7, #0]
 80124fe:	781b      	ldrb	r3, [r3, #0]
 8012500:	009b      	lsls	r3, r3, #2
 8012502:	441a      	add	r2, r3
 8012504:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8012508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801250c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012518:	b29b      	uxth	r3, r3
 801251a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012526:	b29b      	uxth	r3, r3
 8012528:	461a      	mov	r2, r3
 801252a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801252c:	4413      	add	r3, r2
 801252e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	00da      	lsls	r2, r3, #3
 8012536:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012538:	4413      	add	r3, r2
 801253a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801253e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012540:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012544:	b29a      	uxth	r2, r3
 8012546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012548:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	891b      	ldrh	r3, [r3, #8]
 801254e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	6959      	ldr	r1, [r3, #20]
 8012556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801255a:	b29b      	uxth	r3, r3
 801255c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 fb82 	bl	8012c6a <USB_WritePMA>
 8012566:	e14b      	b.n	8012800 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	6a1a      	ldr	r2, [r3, #32]
 801256c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012570:	1ad2      	subs	r2, r2, r3
 8012572:	683b      	ldr	r3, [r7, #0]
 8012574:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012576:	687a      	ldr	r2, [r7, #4]
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	781b      	ldrb	r3, [r3, #0]
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	4413      	add	r3, r2
 8012580:	881b      	ldrh	r3, [r3, #0]
 8012582:	b29b      	uxth	r3, r3
 8012584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012588:	2b00      	cmp	r3, #0
 801258a:	f000 809a 	beq.w	80126c2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	673b      	str	r3, [r7, #112]	@ 0x70
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	785b      	ldrb	r3, [r3, #1]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d16b      	bne.n	8012672 <USB_EPStartXfer+0x7d0>
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125a4:	b29b      	uxth	r3, r3
 80125a6:	461a      	mov	r2, r3
 80125a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80125aa:	4413      	add	r3, r2
 80125ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80125ae:	683b      	ldr	r3, [r7, #0]
 80125b0:	781b      	ldrb	r3, [r3, #0]
 80125b2:	00da      	lsls	r2, r3, #3
 80125b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80125b6:	4413      	add	r3, r2
 80125b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80125bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80125be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125c0:	881b      	ldrh	r3, [r3, #0]
 80125c2:	b29b      	uxth	r3, r3
 80125c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80125c8:	b29a      	uxth	r2, r3
 80125ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125cc:	801a      	strh	r2, [r3, #0]
 80125ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d10a      	bne.n	80125ec <USB_EPStartXfer+0x74a>
 80125d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125d8:	881b      	ldrh	r3, [r3, #0]
 80125da:	b29b      	uxth	r3, r3
 80125dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80125e8:	801a      	strh	r2, [r3, #0]
 80125ea:	e05b      	b.n	80126a4 <USB_EPStartXfer+0x802>
 80125ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80125f2:	d81c      	bhi.n	801262e <USB_EPStartXfer+0x78c>
 80125f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125f8:	085b      	lsrs	r3, r3, #1
 80125fa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80125fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012602:	f003 0301 	and.w	r3, r3, #1
 8012606:	2b00      	cmp	r3, #0
 8012608:	d004      	beq.n	8012614 <USB_EPStartXfer+0x772>
 801260a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801260e:	3301      	adds	r3, #1
 8012610:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012614:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012616:	881b      	ldrh	r3, [r3, #0]
 8012618:	b29a      	uxth	r2, r3
 801261a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801261e:	b29b      	uxth	r3, r3
 8012620:	029b      	lsls	r3, r3, #10
 8012622:	b29b      	uxth	r3, r3
 8012624:	4313      	orrs	r3, r2
 8012626:	b29a      	uxth	r2, r3
 8012628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801262a:	801a      	strh	r2, [r3, #0]
 801262c:	e03a      	b.n	80126a4 <USB_EPStartXfer+0x802>
 801262e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012632:	095b      	lsrs	r3, r3, #5
 8012634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012638:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801263c:	f003 031f 	and.w	r3, r3, #31
 8012640:	2b00      	cmp	r3, #0
 8012642:	d104      	bne.n	801264e <USB_EPStartXfer+0x7ac>
 8012644:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012648:	3b01      	subs	r3, #1
 801264a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801264e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012650:	881b      	ldrh	r3, [r3, #0]
 8012652:	b29a      	uxth	r2, r3
 8012654:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012658:	b29b      	uxth	r3, r3
 801265a:	029b      	lsls	r3, r3, #10
 801265c:	b29b      	uxth	r3, r3
 801265e:	4313      	orrs	r3, r2
 8012660:	b29b      	uxth	r3, r3
 8012662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801266a:	b29a      	uxth	r2, r3
 801266c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801266e:	801a      	strh	r2, [r3, #0]
 8012670:	e018      	b.n	80126a4 <USB_EPStartXfer+0x802>
 8012672:	683b      	ldr	r3, [r7, #0]
 8012674:	785b      	ldrb	r3, [r3, #1]
 8012676:	2b01      	cmp	r3, #1
 8012678:	d114      	bne.n	80126a4 <USB_EPStartXfer+0x802>
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012680:	b29b      	uxth	r3, r3
 8012682:	461a      	mov	r2, r3
 8012684:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012686:	4413      	add	r3, r2
 8012688:	673b      	str	r3, [r7, #112]	@ 0x70
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	781b      	ldrb	r3, [r3, #0]
 801268e:	00da      	lsls	r2, r3, #3
 8012690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012692:	4413      	add	r3, r2
 8012694:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012698:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801269a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801269e:	b29a      	uxth	r2, r3
 80126a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80126a2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80126a4:	683b      	ldr	r3, [r7, #0]
 80126a6:	895b      	ldrh	r3, [r3, #10]
 80126a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80126ac:	683b      	ldr	r3, [r7, #0]
 80126ae:	6959      	ldr	r1, [r3, #20]
 80126b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126b4:	b29b      	uxth	r3, r3
 80126b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f000 fad5 	bl	8012c6a <USB_WritePMA>
 80126c0:	e09e      	b.n	8012800 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	785b      	ldrb	r3, [r3, #1]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d16b      	bne.n	80127a2 <USB_EPStartXfer+0x900>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	461a      	mov	r2, r3
 80126d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80126da:	4413      	add	r3, r2
 80126dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	00da      	lsls	r2, r3, #3
 80126e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80126e6:	4413      	add	r3, r2
 80126e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80126ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80126ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80126f0:	881b      	ldrh	r3, [r3, #0]
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80126fc:	801a      	strh	r2, [r3, #0]
 80126fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012702:	2b00      	cmp	r3, #0
 8012704:	d10a      	bne.n	801271c <USB_EPStartXfer+0x87a>
 8012706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012708:	881b      	ldrh	r3, [r3, #0]
 801270a:	b29b      	uxth	r3, r3
 801270c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012714:	b29a      	uxth	r2, r3
 8012716:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012718:	801a      	strh	r2, [r3, #0]
 801271a:	e063      	b.n	80127e4 <USB_EPStartXfer+0x942>
 801271c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012720:	2b3e      	cmp	r3, #62	@ 0x3e
 8012722:	d81c      	bhi.n	801275e <USB_EPStartXfer+0x8bc>
 8012724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012728:	085b      	lsrs	r3, r3, #1
 801272a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801272e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012732:	f003 0301 	and.w	r3, r3, #1
 8012736:	2b00      	cmp	r3, #0
 8012738:	d004      	beq.n	8012744 <USB_EPStartXfer+0x8a2>
 801273a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801273e:	3301      	adds	r3, #1
 8012740:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012746:	881b      	ldrh	r3, [r3, #0]
 8012748:	b29a      	uxth	r2, r3
 801274a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801274e:	b29b      	uxth	r3, r3
 8012750:	029b      	lsls	r3, r3, #10
 8012752:	b29b      	uxth	r3, r3
 8012754:	4313      	orrs	r3, r2
 8012756:	b29a      	uxth	r2, r3
 8012758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801275a:	801a      	strh	r2, [r3, #0]
 801275c:	e042      	b.n	80127e4 <USB_EPStartXfer+0x942>
 801275e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012762:	095b      	lsrs	r3, r3, #5
 8012764:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801276c:	f003 031f 	and.w	r3, r3, #31
 8012770:	2b00      	cmp	r3, #0
 8012772:	d104      	bne.n	801277e <USB_EPStartXfer+0x8dc>
 8012774:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012778:	3b01      	subs	r3, #1
 801277a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801277e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012780:	881b      	ldrh	r3, [r3, #0]
 8012782:	b29a      	uxth	r2, r3
 8012784:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012788:	b29b      	uxth	r3, r3
 801278a:	029b      	lsls	r3, r3, #10
 801278c:	b29b      	uxth	r3, r3
 801278e:	4313      	orrs	r3, r2
 8012790:	b29b      	uxth	r3, r3
 8012792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801279a:	b29a      	uxth	r2, r3
 801279c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801279e:	801a      	strh	r2, [r3, #0]
 80127a0:	e020      	b.n	80127e4 <USB_EPStartXfer+0x942>
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	785b      	ldrb	r3, [r3, #1]
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d11c      	bne.n	80127e4 <USB_EPStartXfer+0x942>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80127b6:	b29b      	uxth	r3, r3
 80127b8:	461a      	mov	r2, r3
 80127ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80127be:	4413      	add	r3, r2
 80127c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80127c4:	683b      	ldr	r3, [r7, #0]
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	00da      	lsls	r2, r3, #3
 80127ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80127ce:	4413      	add	r3, r2
 80127d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80127d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80127d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127dc:	b29a      	uxth	r2, r3
 80127de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80127e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	891b      	ldrh	r3, [r3, #8]
 80127e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	6959      	ldr	r1, [r3, #20]
 80127f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127f4:	b29b      	uxth	r3, r3
 80127f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f000 fa35 	bl	8012c6a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012800:	687a      	ldr	r2, [r7, #4]
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	781b      	ldrb	r3, [r3, #0]
 8012806:	009b      	lsls	r3, r3, #2
 8012808:	4413      	add	r3, r2
 801280a:	881b      	ldrh	r3, [r3, #0]
 801280c:	b29b      	uxth	r3, r3
 801280e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012812:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012816:	817b      	strh	r3, [r7, #10]
 8012818:	897b      	ldrh	r3, [r7, #10]
 801281a:	f083 0310 	eor.w	r3, r3, #16
 801281e:	817b      	strh	r3, [r7, #10]
 8012820:	897b      	ldrh	r3, [r7, #10]
 8012822:	f083 0320 	eor.w	r3, r3, #32
 8012826:	817b      	strh	r3, [r7, #10]
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	781b      	ldrb	r3, [r3, #0]
 801282e:	009b      	lsls	r3, r3, #2
 8012830:	441a      	add	r2, r3
 8012832:	897b      	ldrh	r3, [r7, #10]
 8012834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801283c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012844:	b29b      	uxth	r3, r3
 8012846:	8013      	strh	r3, [r2, #0]
 8012848:	e0d5      	b.n	80129f6 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	7b1b      	ldrb	r3, [r3, #12]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d156      	bne.n	8012900 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8012852:	683b      	ldr	r3, [r7, #0]
 8012854:	699b      	ldr	r3, [r3, #24]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d122      	bne.n	80128a0 <USB_EPStartXfer+0x9fe>
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	78db      	ldrb	r3, [r3, #3]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d11e      	bne.n	80128a0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8012862:	687a      	ldr	r2, [r7, #4]
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	781b      	ldrb	r3, [r3, #0]
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	4413      	add	r3, r2
 801286c:	881b      	ldrh	r3, [r3, #0]
 801286e:	b29b      	uxth	r3, r3
 8012870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012878:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	781b      	ldrb	r3, [r3, #0]
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	441a      	add	r2, r3
 8012886:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801288a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801288e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012892:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8012896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801289a:	b29b      	uxth	r3, r3
 801289c:	8013      	strh	r3, [r2, #0]
 801289e:	e01d      	b.n	80128dc <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	683b      	ldr	r3, [r7, #0]
 80128a4:	781b      	ldrb	r3, [r3, #0]
 80128a6:	009b      	lsls	r3, r3, #2
 80128a8:	4413      	add	r3, r2
 80128aa:	881b      	ldrh	r3, [r3, #0]
 80128ac:	b29b      	uxth	r3, r3
 80128ae:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80128b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80128b6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80128ba:	687a      	ldr	r2, [r7, #4]
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	009b      	lsls	r3, r3, #2
 80128c2:	441a      	add	r2, r3
 80128c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80128c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80128cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80128d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80128d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80128d8:	b29b      	uxth	r3, r3
 80128da:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	699a      	ldr	r2, [r3, #24]
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	691b      	ldr	r3, [r3, #16]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d907      	bls.n	80128f8 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 80128e8:	683b      	ldr	r3, [r7, #0]
 80128ea:	699a      	ldr	r2, [r3, #24]
 80128ec:	683b      	ldr	r3, [r7, #0]
 80128ee:	691b      	ldr	r3, [r3, #16]
 80128f0:	1ad2      	subs	r2, r2, r3
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	619a      	str	r2, [r3, #24]
 80128f6:	e054      	b.n	80129a2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	2200      	movs	r2, #0
 80128fc:	619a      	str	r2, [r3, #24]
 80128fe:	e050      	b.n	80129a2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	78db      	ldrb	r3, [r3, #3]
 8012904:	2b02      	cmp	r3, #2
 8012906:	d142      	bne.n	801298e <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	69db      	ldr	r3, [r3, #28]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d048      	beq.n	80129a2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	4413      	add	r3, r2
 801291a:	881b      	ldrh	r3, [r3, #0]
 801291c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012920:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012924:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012928:	2b00      	cmp	r3, #0
 801292a:	d005      	beq.n	8012938 <USB_EPStartXfer+0xa96>
 801292c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012934:	2b00      	cmp	r3, #0
 8012936:	d10b      	bne.n	8012950 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012938:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 801293c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012940:	2b00      	cmp	r3, #0
 8012942:	d12e      	bne.n	80129a2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012944:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801294c:	2b00      	cmp	r3, #0
 801294e:	d128      	bne.n	80129a2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012950:	687a      	ldr	r2, [r7, #4]
 8012952:	683b      	ldr	r3, [r7, #0]
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	009b      	lsls	r3, r3, #2
 8012958:	4413      	add	r3, r2
 801295a:	881b      	ldrh	r3, [r3, #0]
 801295c:	b29b      	uxth	r3, r3
 801295e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012966:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 801296a:	687a      	ldr	r2, [r7, #4]
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	441a      	add	r2, r3
 8012974:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012978:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801297c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012984:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012988:	b29b      	uxth	r3, r3
 801298a:	8013      	strh	r3, [r2, #0]
 801298c:	e009      	b.n	80129a2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	78db      	ldrb	r3, [r3, #3]
 8012992:	2b01      	cmp	r3, #1
 8012994:	d103      	bne.n	801299e <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	2200      	movs	r2, #0
 801299a:	619a      	str	r2, [r3, #24]
 801299c:	e001      	b.n	80129a2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 801299e:	2301      	movs	r3, #1
 80129a0:	e02a      	b.n	80129f8 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80129a2:	687a      	ldr	r2, [r7, #4]
 80129a4:	683b      	ldr	r3, [r7, #0]
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	009b      	lsls	r3, r3, #2
 80129aa:	4413      	add	r3, r2
 80129ac:	881b      	ldrh	r3, [r3, #0]
 80129ae:	b29b      	uxth	r3, r3
 80129b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80129b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80129b8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80129bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80129c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80129c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80129c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80129cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80129d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80129d4:	687a      	ldr	r2, [r7, #4]
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	009b      	lsls	r3, r3, #2
 80129dc:	441a      	add	r2, r3
 80129de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80129e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80129e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80129ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80129ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80129f2:	b29b      	uxth	r3, r3
 80129f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80129f6:	2300      	movs	r3, #0
}
 80129f8:	4618      	mov	r0, r3
 80129fa:	37b0      	adds	r7, #176	@ 0xb0
 80129fc:	46bd      	mov	sp, r7
 80129fe:	bd80      	pop	{r7, pc}

08012a00 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012a00:	b480      	push	{r7}
 8012a02:	b085      	sub	sp, #20
 8012a04:	af00      	add	r7, sp, #0
 8012a06:	6078      	str	r0, [r7, #4]
 8012a08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	785b      	ldrb	r3, [r3, #1]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d020      	beq.n	8012a54 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012a12:	687a      	ldr	r2, [r7, #4]
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	009b      	lsls	r3, r3, #2
 8012a1a:	4413      	add	r3, r2
 8012a1c:	881b      	ldrh	r3, [r3, #0]
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012a28:	81bb      	strh	r3, [r7, #12]
 8012a2a:	89bb      	ldrh	r3, [r7, #12]
 8012a2c:	f083 0310 	eor.w	r3, r3, #16
 8012a30:	81bb      	strh	r3, [r7, #12]
 8012a32:	687a      	ldr	r2, [r7, #4]
 8012a34:	683b      	ldr	r3, [r7, #0]
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	441a      	add	r2, r3
 8012a3c:	89bb      	ldrh	r3, [r7, #12]
 8012a3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a4e:	b29b      	uxth	r3, r3
 8012a50:	8013      	strh	r3, [r2, #0]
 8012a52:	e01f      	b.n	8012a94 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	781b      	ldrb	r3, [r3, #0]
 8012a5a:	009b      	lsls	r3, r3, #2
 8012a5c:	4413      	add	r3, r2
 8012a5e:	881b      	ldrh	r3, [r3, #0]
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a6a:	81fb      	strh	r3, [r7, #14]
 8012a6c:	89fb      	ldrh	r3, [r7, #14]
 8012a6e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012a72:	81fb      	strh	r3, [r7, #14]
 8012a74:	687a      	ldr	r2, [r7, #4]
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	009b      	lsls	r3, r3, #2
 8012a7c:	441a      	add	r2, r3
 8012a7e:	89fb      	ldrh	r3, [r7, #14]
 8012a80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012a84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012a94:	2300      	movs	r3, #0
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3714      	adds	r7, #20
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr

08012aa2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012aa2:	b480      	push	{r7}
 8012aa4:	b087      	sub	sp, #28
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
 8012aaa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	785b      	ldrb	r3, [r3, #1]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d04c      	beq.n	8012b4e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012ab4:	687a      	ldr	r2, [r7, #4]
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	781b      	ldrb	r3, [r3, #0]
 8012aba:	009b      	lsls	r3, r3, #2
 8012abc:	4413      	add	r3, r2
 8012abe:	881b      	ldrh	r3, [r3, #0]
 8012ac0:	823b      	strh	r3, [r7, #16]
 8012ac2:	8a3b      	ldrh	r3, [r7, #16]
 8012ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d01b      	beq.n	8012b04 <USB_EPClearStall+0x62>
 8012acc:	687a      	ldr	r2, [r7, #4]
 8012ace:	683b      	ldr	r3, [r7, #0]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	009b      	lsls	r3, r3, #2
 8012ad4:	4413      	add	r3, r2
 8012ad6:	881b      	ldrh	r3, [r3, #0]
 8012ad8:	b29b      	uxth	r3, r3
 8012ada:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ae2:	81fb      	strh	r3, [r7, #14]
 8012ae4:	687a      	ldr	r2, [r7, #4]
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	009b      	lsls	r3, r3, #2
 8012aec:	441a      	add	r2, r3
 8012aee:	89fb      	ldrh	r3, [r7, #14]
 8012af0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012af4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012af8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012afc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	78db      	ldrb	r3, [r3, #3]
 8012b08:	2b01      	cmp	r3, #1
 8012b0a:	d06c      	beq.n	8012be6 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012b0c:	687a      	ldr	r2, [r7, #4]
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	781b      	ldrb	r3, [r3, #0]
 8012b12:	009b      	lsls	r3, r3, #2
 8012b14:	4413      	add	r3, r2
 8012b16:	881b      	ldrh	r3, [r3, #0]
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012b1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012b22:	81bb      	strh	r3, [r7, #12]
 8012b24:	89bb      	ldrh	r3, [r7, #12]
 8012b26:	f083 0320 	eor.w	r3, r3, #32
 8012b2a:	81bb      	strh	r3, [r7, #12]
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	683b      	ldr	r3, [r7, #0]
 8012b30:	781b      	ldrb	r3, [r3, #0]
 8012b32:	009b      	lsls	r3, r3, #2
 8012b34:	441a      	add	r2, r3
 8012b36:	89bb      	ldrh	r3, [r7, #12]
 8012b38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	8013      	strh	r3, [r2, #0]
 8012b4c:	e04b      	b.n	8012be6 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	009b      	lsls	r3, r3, #2
 8012b56:	4413      	add	r3, r2
 8012b58:	881b      	ldrh	r3, [r3, #0]
 8012b5a:	82fb      	strh	r3, [r7, #22]
 8012b5c:	8afb      	ldrh	r3, [r7, #22]
 8012b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d01b      	beq.n	8012b9e <USB_EPClearStall+0xfc>
 8012b66:	687a      	ldr	r2, [r7, #4]
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	4413      	add	r3, r2
 8012b70:	881b      	ldrh	r3, [r3, #0]
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b7c:	82bb      	strh	r3, [r7, #20]
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	009b      	lsls	r3, r3, #2
 8012b86:	441a      	add	r2, r3
 8012b88:	8abb      	ldrh	r3, [r7, #20]
 8012b8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012b96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	009b      	lsls	r3, r3, #2
 8012ba6:	4413      	add	r3, r2
 8012ba8:	881b      	ldrh	r3, [r3, #0]
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012bb4:	827b      	strh	r3, [r7, #18]
 8012bb6:	8a7b      	ldrh	r3, [r7, #18]
 8012bb8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012bbc:	827b      	strh	r3, [r7, #18]
 8012bbe:	8a7b      	ldrh	r3, [r7, #18]
 8012bc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012bc4:	827b      	strh	r3, [r7, #18]
 8012bc6:	687a      	ldr	r2, [r7, #4]
 8012bc8:	683b      	ldr	r3, [r7, #0]
 8012bca:	781b      	ldrb	r3, [r3, #0]
 8012bcc:	009b      	lsls	r3, r3, #2
 8012bce:	441a      	add	r2, r3
 8012bd0:	8a7b      	ldrh	r3, [r7, #18]
 8012bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012be2:	b29b      	uxth	r3, r3
 8012be4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012be6:	2300      	movs	r3, #0
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	371c      	adds	r7, #28
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr

08012bf4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b083      	sub	sp, #12
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	460b      	mov	r3, r1
 8012bfe:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012c00:	78fb      	ldrb	r3, [r7, #3]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d103      	bne.n	8012c0e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2280      	movs	r2, #128	@ 0x80
 8012c0a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012c0e:	2300      	movs	r3, #0
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	370c      	adds	r7, #12
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr

08012c1c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b083      	sub	sp, #12
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c34:	b29a      	uxth	r2, r3
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012c3c:	2300      	movs	r3, #0
}
 8012c3e:	4618      	mov	r0, r3
 8012c40:	370c      	adds	r7, #12
 8012c42:	46bd      	mov	sp, r7
 8012c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c48:	4770      	bx	lr

08012c4a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012c4a:	b480      	push	{r7}
 8012c4c:	b085      	sub	sp, #20
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012c58:	b29b      	uxth	r3, r3
 8012c5a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
}
 8012c5e:	4618      	mov	r0, r3
 8012c60:	3714      	adds	r7, #20
 8012c62:	46bd      	mov	sp, r7
 8012c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c68:	4770      	bx	lr

08012c6a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012c6a:	b480      	push	{r7}
 8012c6c:	b08b      	sub	sp, #44	@ 0x2c
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	60f8      	str	r0, [r7, #12]
 8012c72:	60b9      	str	r1, [r7, #8]
 8012c74:	4611      	mov	r1, r2
 8012c76:	461a      	mov	r2, r3
 8012c78:	460b      	mov	r3, r1
 8012c7a:	80fb      	strh	r3, [r7, #6]
 8012c7c:	4613      	mov	r3, r2
 8012c7e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012c80:	88bb      	ldrh	r3, [r7, #4]
 8012c82:	3301      	adds	r3, #1
 8012c84:	085b      	lsrs	r3, r3, #1
 8012c86:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012c8c:	68bb      	ldr	r3, [r7, #8]
 8012c8e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012c90:	88fa      	ldrh	r2, [r7, #6]
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	4413      	add	r3, r2
 8012c96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012c9a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ca0:	e01b      	b.n	8012cda <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012ca2:	69fb      	ldr	r3, [r7, #28]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012ca8:	69fb      	ldr	r3, [r7, #28]
 8012caa:	3301      	adds	r3, #1
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	021b      	lsls	r3, r3, #8
 8012cb0:	b21a      	sxth	r2, r3
 8012cb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012cb6:	4313      	orrs	r3, r2
 8012cb8:	b21b      	sxth	r3, r3
 8012cba:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012cbc:	6a3b      	ldr	r3, [r7, #32]
 8012cbe:	8a7a      	ldrh	r2, [r7, #18]
 8012cc0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012cc2:	6a3b      	ldr	r3, [r7, #32]
 8012cc4:	3302      	adds	r3, #2
 8012cc6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012cc8:	69fb      	ldr	r3, [r7, #28]
 8012cca:	3301      	adds	r3, #1
 8012ccc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012cce:	69fb      	ldr	r3, [r7, #28]
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cd6:	3b01      	subs	r3, #1
 8012cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8012cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d1e0      	bne.n	8012ca2 <USB_WritePMA+0x38>
  }
}
 8012ce0:	bf00      	nop
 8012ce2:	bf00      	nop
 8012ce4:	372c      	adds	r7, #44	@ 0x2c
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cec:	4770      	bx	lr

08012cee <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012cee:	b480      	push	{r7}
 8012cf0:	b08b      	sub	sp, #44	@ 0x2c
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	60f8      	str	r0, [r7, #12]
 8012cf6:	60b9      	str	r1, [r7, #8]
 8012cf8:	4611      	mov	r1, r2
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	460b      	mov	r3, r1
 8012cfe:	80fb      	strh	r3, [r7, #6]
 8012d00:	4613      	mov	r3, r2
 8012d02:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012d04:	88bb      	ldrh	r3, [r7, #4]
 8012d06:	085b      	lsrs	r3, r3, #1
 8012d08:	b29b      	uxth	r3, r3
 8012d0a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012d14:	88fa      	ldrh	r2, [r7, #6]
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	4413      	add	r3, r2
 8012d1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012d1e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012d20:	69bb      	ldr	r3, [r7, #24]
 8012d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8012d24:	e018      	b.n	8012d58 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012d26:	6a3b      	ldr	r3, [r7, #32]
 8012d28:	881b      	ldrh	r3, [r3, #0]
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012d2e:	6a3b      	ldr	r3, [r7, #32]
 8012d30:	3302      	adds	r3, #2
 8012d32:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	b2da      	uxtb	r2, r3
 8012d38:	69fb      	ldr	r3, [r7, #28]
 8012d3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012d3c:	69fb      	ldr	r3, [r7, #28]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012d42:	693b      	ldr	r3, [r7, #16]
 8012d44:	0a1b      	lsrs	r3, r3, #8
 8012d46:	b2da      	uxtb	r2, r3
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d54:	3b01      	subs	r3, #1
 8012d56:	627b      	str	r3, [r7, #36]	@ 0x24
 8012d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d1e3      	bne.n	8012d26 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012d5e:	88bb      	ldrh	r3, [r7, #4]
 8012d60:	f003 0301 	and.w	r3, r3, #1
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d007      	beq.n	8012d7a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012d6a:	6a3b      	ldr	r3, [r7, #32]
 8012d6c:	881b      	ldrh	r3, [r3, #0]
 8012d6e:	b29b      	uxth	r3, r3
 8012d70:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	b2da      	uxtb	r2, r3
 8012d76:	69fb      	ldr	r3, [r7, #28]
 8012d78:	701a      	strb	r2, [r3, #0]
  }
}
 8012d7a:	bf00      	nop
 8012d7c:	372c      	adds	r7, #44	@ 0x2c
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr
	...

08012d88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b084      	sub	sp, #16
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012d94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012d98:	f006 f93a 	bl	8019010 <USBD_static_malloc>
 8012d9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d109      	bne.n	8012db8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	32b0      	adds	r2, #176	@ 0xb0
 8012dae:	2100      	movs	r1, #0
 8012db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012db4:	2302      	movs	r3, #2
 8012db6:	e0d4      	b.n	8012f62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012db8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012dbc:	2100      	movs	r1, #0
 8012dbe:	68f8      	ldr	r0, [r7, #12]
 8012dc0:	f008 fb47 	bl	801b452 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	32b0      	adds	r2, #176	@ 0xb0
 8012dce:	68f9      	ldr	r1, [r7, #12]
 8012dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	32b0      	adds	r2, #176	@ 0xb0
 8012dde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	7c1b      	ldrb	r3, [r3, #16]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d138      	bne.n	8012e62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012df0:	4b5e      	ldr	r3, [pc, #376]	@ (8012f6c <USBD_CDC_Init+0x1e4>)
 8012df2:	7819      	ldrb	r1, [r3, #0]
 8012df4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012df8:	2202      	movs	r2, #2
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f005 ffaf 	bl	8018d5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012e00:	4b5a      	ldr	r3, [pc, #360]	@ (8012f6c <USBD_CDC_Init+0x1e4>)
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	f003 020f 	and.w	r2, r3, #15
 8012e08:	6879      	ldr	r1, [r7, #4]
 8012e0a:	4613      	mov	r3, r2
 8012e0c:	009b      	lsls	r3, r3, #2
 8012e0e:	4413      	add	r3, r2
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	440b      	add	r3, r1
 8012e14:	3324      	adds	r3, #36	@ 0x24
 8012e16:	2201      	movs	r2, #1
 8012e18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012e1a:	4b55      	ldr	r3, [pc, #340]	@ (8012f70 <USBD_CDC_Init+0x1e8>)
 8012e1c:	7819      	ldrb	r1, [r3, #0]
 8012e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012e22:	2202      	movs	r2, #2
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f005 ff9a 	bl	8018d5e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012e2a:	4b51      	ldr	r3, [pc, #324]	@ (8012f70 <USBD_CDC_Init+0x1e8>)
 8012e2c:	781b      	ldrb	r3, [r3, #0]
 8012e2e:	f003 020f 	and.w	r2, r3, #15
 8012e32:	6879      	ldr	r1, [r7, #4]
 8012e34:	4613      	mov	r3, r2
 8012e36:	009b      	lsls	r3, r3, #2
 8012e38:	4413      	add	r3, r2
 8012e3a:	009b      	lsls	r3, r3, #2
 8012e3c:	440b      	add	r3, r1
 8012e3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012e42:	2201      	movs	r2, #1
 8012e44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012e46:	4b4b      	ldr	r3, [pc, #300]	@ (8012f74 <USBD_CDC_Init+0x1ec>)
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	f003 020f 	and.w	r2, r3, #15
 8012e4e:	6879      	ldr	r1, [r7, #4]
 8012e50:	4613      	mov	r3, r2
 8012e52:	009b      	lsls	r3, r3, #2
 8012e54:	4413      	add	r3, r2
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	440b      	add	r3, r1
 8012e5a:	3326      	adds	r3, #38	@ 0x26
 8012e5c:	2210      	movs	r2, #16
 8012e5e:	801a      	strh	r2, [r3, #0]
 8012e60:	e035      	b.n	8012ece <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012e62:	4b42      	ldr	r3, [pc, #264]	@ (8012f6c <USBD_CDC_Init+0x1e4>)
 8012e64:	7819      	ldrb	r1, [r3, #0]
 8012e66:	2340      	movs	r3, #64	@ 0x40
 8012e68:	2202      	movs	r2, #2
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f005 ff77 	bl	8018d5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012e70:	4b3e      	ldr	r3, [pc, #248]	@ (8012f6c <USBD_CDC_Init+0x1e4>)
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	f003 020f 	and.w	r2, r3, #15
 8012e78:	6879      	ldr	r1, [r7, #4]
 8012e7a:	4613      	mov	r3, r2
 8012e7c:	009b      	lsls	r3, r3, #2
 8012e7e:	4413      	add	r3, r2
 8012e80:	009b      	lsls	r3, r3, #2
 8012e82:	440b      	add	r3, r1
 8012e84:	3324      	adds	r3, #36	@ 0x24
 8012e86:	2201      	movs	r2, #1
 8012e88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012e8a:	4b39      	ldr	r3, [pc, #228]	@ (8012f70 <USBD_CDC_Init+0x1e8>)
 8012e8c:	7819      	ldrb	r1, [r3, #0]
 8012e8e:	2340      	movs	r3, #64	@ 0x40
 8012e90:	2202      	movs	r2, #2
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f005 ff63 	bl	8018d5e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012e98:	4b35      	ldr	r3, [pc, #212]	@ (8012f70 <USBD_CDC_Init+0x1e8>)
 8012e9a:	781b      	ldrb	r3, [r3, #0]
 8012e9c:	f003 020f 	and.w	r2, r3, #15
 8012ea0:	6879      	ldr	r1, [r7, #4]
 8012ea2:	4613      	mov	r3, r2
 8012ea4:	009b      	lsls	r3, r3, #2
 8012ea6:	4413      	add	r3, r2
 8012ea8:	009b      	lsls	r3, r3, #2
 8012eaa:	440b      	add	r3, r1
 8012eac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012eb0:	2201      	movs	r2, #1
 8012eb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012eb4:	4b2f      	ldr	r3, [pc, #188]	@ (8012f74 <USBD_CDC_Init+0x1ec>)
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	f003 020f 	and.w	r2, r3, #15
 8012ebc:	6879      	ldr	r1, [r7, #4]
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	4413      	add	r3, r2
 8012ec4:	009b      	lsls	r3, r3, #2
 8012ec6:	440b      	add	r3, r1
 8012ec8:	3326      	adds	r3, #38	@ 0x26
 8012eca:	2210      	movs	r2, #16
 8012ecc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012ece:	4b29      	ldr	r3, [pc, #164]	@ (8012f74 <USBD_CDC_Init+0x1ec>)
 8012ed0:	7819      	ldrb	r1, [r3, #0]
 8012ed2:	2308      	movs	r3, #8
 8012ed4:	2203      	movs	r2, #3
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f005 ff41 	bl	8018d5e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012edc:	4b25      	ldr	r3, [pc, #148]	@ (8012f74 <USBD_CDC_Init+0x1ec>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	f003 020f 	and.w	r2, r3, #15
 8012ee4:	6879      	ldr	r1, [r7, #4]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4413      	add	r3, r2
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	440b      	add	r3, r1
 8012ef0:	3324      	adds	r3, #36	@ 0x24
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	2200      	movs	r2, #0
 8012efa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	33b0      	adds	r3, #176	@ 0xb0
 8012f08:	009b      	lsls	r3, r3, #2
 8012f0a:	4413      	add	r3, r2
 8012f0c:	685b      	ldr	r3, [r3, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	2200      	movs	r2, #0
 8012f16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d101      	bne.n	8012f30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012f2c:	2302      	movs	r3, #2
 8012f2e:	e018      	b.n	8012f62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	7c1b      	ldrb	r3, [r3, #16]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d10a      	bne.n	8012f4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012f38:	4b0d      	ldr	r3, [pc, #52]	@ (8012f70 <USBD_CDC_Init+0x1e8>)
 8012f3a:	7819      	ldrb	r1, [r3, #0]
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012f42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f005 fff8 	bl	8018f3c <USBD_LL_PrepareReceive>
 8012f4c:	e008      	b.n	8012f60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012f4e:	4b08      	ldr	r3, [pc, #32]	@ (8012f70 <USBD_CDC_Init+0x1e8>)
 8012f50:	7819      	ldrb	r1, [r3, #0]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012f58:	2340      	movs	r3, #64	@ 0x40
 8012f5a:	6878      	ldr	r0, [r7, #4]
 8012f5c:	f005 ffee 	bl	8018f3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	200000bf 	.word	0x200000bf
 8012f70:	200000c0 	.word	0x200000c0
 8012f74:	200000c1 	.word	0x200000c1

08012f78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b082      	sub	sp, #8
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	6078      	str	r0, [r7, #4]
 8012f80:	460b      	mov	r3, r1
 8012f82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8012f84:	4b3a      	ldr	r3, [pc, #232]	@ (8013070 <USBD_CDC_DeInit+0xf8>)
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	4619      	mov	r1, r3
 8012f8a:	6878      	ldr	r0, [r7, #4]
 8012f8c:	f005 ff0d 	bl	8018daa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8012f90:	4b37      	ldr	r3, [pc, #220]	@ (8013070 <USBD_CDC_DeInit+0xf8>)
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	f003 020f 	and.w	r2, r3, #15
 8012f98:	6879      	ldr	r1, [r7, #4]
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	4413      	add	r3, r2
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	440b      	add	r3, r1
 8012fa4:	3324      	adds	r3, #36	@ 0x24
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012faa:	4b32      	ldr	r3, [pc, #200]	@ (8013074 <USBD_CDC_DeInit+0xfc>)
 8012fac:	781b      	ldrb	r3, [r3, #0]
 8012fae:	4619      	mov	r1, r3
 8012fb0:	6878      	ldr	r0, [r7, #4]
 8012fb2:	f005 fefa 	bl	8018daa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012fb6:	4b2f      	ldr	r3, [pc, #188]	@ (8013074 <USBD_CDC_DeInit+0xfc>)
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	f003 020f 	and.w	r2, r3, #15
 8012fbe:	6879      	ldr	r1, [r7, #4]
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	4413      	add	r3, r2
 8012fc6:	009b      	lsls	r3, r3, #2
 8012fc8:	440b      	add	r3, r1
 8012fca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012fce:	2200      	movs	r2, #0
 8012fd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012fd2:	4b29      	ldr	r3, [pc, #164]	@ (8013078 <USBD_CDC_DeInit+0x100>)
 8012fd4:	781b      	ldrb	r3, [r3, #0]
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	6878      	ldr	r0, [r7, #4]
 8012fda:	f005 fee6 	bl	8018daa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012fde:	4b26      	ldr	r3, [pc, #152]	@ (8013078 <USBD_CDC_DeInit+0x100>)
 8012fe0:	781b      	ldrb	r3, [r3, #0]
 8012fe2:	f003 020f 	and.w	r2, r3, #15
 8012fe6:	6879      	ldr	r1, [r7, #4]
 8012fe8:	4613      	mov	r3, r2
 8012fea:	009b      	lsls	r3, r3, #2
 8012fec:	4413      	add	r3, r2
 8012fee:	009b      	lsls	r3, r3, #2
 8012ff0:	440b      	add	r3, r1
 8012ff2:	3324      	adds	r3, #36	@ 0x24
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8013078 <USBD_CDC_DeInit+0x100>)
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	f003 020f 	and.w	r2, r3, #15
 8013000:	6879      	ldr	r1, [r7, #4]
 8013002:	4613      	mov	r3, r2
 8013004:	009b      	lsls	r3, r3, #2
 8013006:	4413      	add	r3, r2
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	440b      	add	r3, r1
 801300c:	3326      	adds	r3, #38	@ 0x26
 801300e:	2200      	movs	r2, #0
 8013010:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	32b0      	adds	r2, #176	@ 0xb0
 801301c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d01f      	beq.n	8013064 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	33b0      	adds	r3, #176	@ 0xb0
 801302e:	009b      	lsls	r3, r3, #2
 8013030:	4413      	add	r3, r2
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	32b0      	adds	r2, #176	@ 0xb0
 8013042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013046:	4618      	mov	r0, r3
 8013048:	f005 fff0 	bl	801902c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	32b0      	adds	r2, #176	@ 0xb0
 8013056:	2100      	movs	r1, #0
 8013058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2200      	movs	r2, #0
 8013060:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013064:	2300      	movs	r3, #0
}
 8013066:	4618      	mov	r0, r3
 8013068:	3708      	adds	r7, #8
 801306a:	46bd      	mov	sp, r7
 801306c:	bd80      	pop	{r7, pc}
 801306e:	bf00      	nop
 8013070:	200000bf 	.word	0x200000bf
 8013074:	200000c0 	.word	0x200000c0
 8013078:	200000c1 	.word	0x200000c1

0801307c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b086      	sub	sp, #24
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	32b0      	adds	r2, #176	@ 0xb0
 8013090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013094:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013096:	2300      	movs	r3, #0
 8013098:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801309a:	2300      	movs	r3, #0
 801309c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801309e:	2300      	movs	r3, #0
 80130a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d101      	bne.n	80130ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80130a8:	2303      	movs	r3, #3
 80130aa:	e0bf      	b.n	801322c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d050      	beq.n	801315a <USBD_CDC_Setup+0xde>
 80130b8:	2b20      	cmp	r3, #32
 80130ba:	f040 80af 	bne.w	801321c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	88db      	ldrh	r3, [r3, #6]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d03a      	beq.n	801313c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	781b      	ldrb	r3, [r3, #0]
 80130ca:	b25b      	sxtb	r3, r3
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	da1b      	bge.n	8013108 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80130d6:	687a      	ldr	r2, [r7, #4]
 80130d8:	33b0      	adds	r3, #176	@ 0xb0
 80130da:	009b      	lsls	r3, r3, #2
 80130dc:	4413      	add	r3, r2
 80130de:	685b      	ldr	r3, [r3, #4]
 80130e0:	689b      	ldr	r3, [r3, #8]
 80130e2:	683a      	ldr	r2, [r7, #0]
 80130e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80130e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80130e8:	683a      	ldr	r2, [r7, #0]
 80130ea:	88d2      	ldrh	r2, [r2, #6]
 80130ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	88db      	ldrh	r3, [r3, #6]
 80130f2:	2b07      	cmp	r3, #7
 80130f4:	bf28      	it	cs
 80130f6:	2307      	movcs	r3, #7
 80130f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80130fa:	693b      	ldr	r3, [r7, #16]
 80130fc:	89fa      	ldrh	r2, [r7, #14]
 80130fe:	4619      	mov	r1, r3
 8013100:	6878      	ldr	r0, [r7, #4]
 8013102:	f001 fd2b 	bl	8014b5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013106:	e090      	b.n	801322a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	785a      	ldrb	r2, [r3, #1]
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	88db      	ldrh	r3, [r3, #6]
 8013116:	2b3f      	cmp	r3, #63	@ 0x3f
 8013118:	d803      	bhi.n	8013122 <USBD_CDC_Setup+0xa6>
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	88db      	ldrh	r3, [r3, #6]
 801311e:	b2da      	uxtb	r2, r3
 8013120:	e000      	b.n	8013124 <USBD_CDC_Setup+0xa8>
 8013122:	2240      	movs	r2, #64	@ 0x40
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801312a:	6939      	ldr	r1, [r7, #16]
 801312c:	693b      	ldr	r3, [r7, #16]
 801312e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013132:	461a      	mov	r2, r3
 8013134:	6878      	ldr	r0, [r7, #4]
 8013136:	f001 fd3d 	bl	8014bb4 <USBD_CtlPrepareRx>
      break;
 801313a:	e076      	b.n	801322a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	33b0      	adds	r3, #176	@ 0xb0
 8013146:	009b      	lsls	r3, r3, #2
 8013148:	4413      	add	r3, r2
 801314a:	685b      	ldr	r3, [r3, #4]
 801314c:	689b      	ldr	r3, [r3, #8]
 801314e:	683a      	ldr	r2, [r7, #0]
 8013150:	7850      	ldrb	r0, [r2, #1]
 8013152:	2200      	movs	r2, #0
 8013154:	6839      	ldr	r1, [r7, #0]
 8013156:	4798      	blx	r3
      break;
 8013158:	e067      	b.n	801322a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	785b      	ldrb	r3, [r3, #1]
 801315e:	2b0b      	cmp	r3, #11
 8013160:	d851      	bhi.n	8013206 <USBD_CDC_Setup+0x18a>
 8013162:	a201      	add	r2, pc, #4	@ (adr r2, 8013168 <USBD_CDC_Setup+0xec>)
 8013164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013168:	08013199 	.word	0x08013199
 801316c:	08013215 	.word	0x08013215
 8013170:	08013207 	.word	0x08013207
 8013174:	08013207 	.word	0x08013207
 8013178:	08013207 	.word	0x08013207
 801317c:	08013207 	.word	0x08013207
 8013180:	08013207 	.word	0x08013207
 8013184:	08013207 	.word	0x08013207
 8013188:	08013207 	.word	0x08013207
 801318c:	08013207 	.word	0x08013207
 8013190:	080131c3 	.word	0x080131c3
 8013194:	080131ed 	.word	0x080131ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801319e:	b2db      	uxtb	r3, r3
 80131a0:	2b03      	cmp	r3, #3
 80131a2:	d107      	bne.n	80131b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80131a4:	f107 030a 	add.w	r3, r7, #10
 80131a8:	2202      	movs	r2, #2
 80131aa:	4619      	mov	r1, r3
 80131ac:	6878      	ldr	r0, [r7, #4]
 80131ae:	f001 fcd5 	bl	8014b5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80131b2:	e032      	b.n	801321a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80131b4:	6839      	ldr	r1, [r7, #0]
 80131b6:	6878      	ldr	r0, [r7, #4]
 80131b8:	f001 fc53 	bl	8014a62 <USBD_CtlError>
            ret = USBD_FAIL;
 80131bc:	2303      	movs	r3, #3
 80131be:	75fb      	strb	r3, [r7, #23]
          break;
 80131c0:	e02b      	b.n	801321a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131c8:	b2db      	uxtb	r3, r3
 80131ca:	2b03      	cmp	r3, #3
 80131cc:	d107      	bne.n	80131de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80131ce:	f107 030d 	add.w	r3, r7, #13
 80131d2:	2201      	movs	r2, #1
 80131d4:	4619      	mov	r1, r3
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f001 fcc0 	bl	8014b5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80131dc:	e01d      	b.n	801321a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80131de:	6839      	ldr	r1, [r7, #0]
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f001 fc3e 	bl	8014a62 <USBD_CtlError>
            ret = USBD_FAIL;
 80131e6:	2303      	movs	r3, #3
 80131e8:	75fb      	strb	r3, [r7, #23]
          break;
 80131ea:	e016      	b.n	801321a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	2b03      	cmp	r3, #3
 80131f6:	d00f      	beq.n	8013218 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80131f8:	6839      	ldr	r1, [r7, #0]
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f001 fc31 	bl	8014a62 <USBD_CtlError>
            ret = USBD_FAIL;
 8013200:	2303      	movs	r3, #3
 8013202:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013204:	e008      	b.n	8013218 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013206:	6839      	ldr	r1, [r7, #0]
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f001 fc2a 	bl	8014a62 <USBD_CtlError>
          ret = USBD_FAIL;
 801320e:	2303      	movs	r3, #3
 8013210:	75fb      	strb	r3, [r7, #23]
          break;
 8013212:	e002      	b.n	801321a <USBD_CDC_Setup+0x19e>
          break;
 8013214:	bf00      	nop
 8013216:	e008      	b.n	801322a <USBD_CDC_Setup+0x1ae>
          break;
 8013218:	bf00      	nop
      }
      break;
 801321a:	e006      	b.n	801322a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801321c:	6839      	ldr	r1, [r7, #0]
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f001 fc1f 	bl	8014a62 <USBD_CtlError>
      ret = USBD_FAIL;
 8013224:	2303      	movs	r3, #3
 8013226:	75fb      	strb	r3, [r7, #23]
      break;
 8013228:	bf00      	nop
  }

  return (uint8_t)ret;
 801322a:	7dfb      	ldrb	r3, [r7, #23]
}
 801322c:	4618      	mov	r0, r3
 801322e:	3718      	adds	r7, #24
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b084      	sub	sp, #16
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	460b      	mov	r3, r1
 801323e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013246:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	32b0      	adds	r2, #176	@ 0xb0
 8013252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d101      	bne.n	801325e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801325a:	2303      	movs	r3, #3
 801325c:	e065      	b.n	801332a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	32b0      	adds	r2, #176	@ 0xb0
 8013268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801326c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801326e:	78fb      	ldrb	r3, [r7, #3]
 8013270:	f003 020f 	and.w	r2, r3, #15
 8013274:	6879      	ldr	r1, [r7, #4]
 8013276:	4613      	mov	r3, r2
 8013278:	009b      	lsls	r3, r3, #2
 801327a:	4413      	add	r3, r2
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	440b      	add	r3, r1
 8013280:	3318      	adds	r3, #24
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d02f      	beq.n	80132e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013288:	78fb      	ldrb	r3, [r7, #3]
 801328a:	f003 020f 	and.w	r2, r3, #15
 801328e:	6879      	ldr	r1, [r7, #4]
 8013290:	4613      	mov	r3, r2
 8013292:	009b      	lsls	r3, r3, #2
 8013294:	4413      	add	r3, r2
 8013296:	009b      	lsls	r3, r3, #2
 8013298:	440b      	add	r3, r1
 801329a:	3318      	adds	r3, #24
 801329c:	681a      	ldr	r2, [r3, #0]
 801329e:	78fb      	ldrb	r3, [r7, #3]
 80132a0:	f003 010f 	and.w	r1, r3, #15
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	460b      	mov	r3, r1
 80132a8:	009b      	lsls	r3, r3, #2
 80132aa:	440b      	add	r3, r1
 80132ac:	00db      	lsls	r3, r3, #3
 80132ae:	4403      	add	r3, r0
 80132b0:	3320      	adds	r3, #32
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80132b8:	fb01 f303 	mul.w	r3, r1, r3
 80132bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d112      	bne.n	80132e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80132c2:	78fb      	ldrb	r3, [r7, #3]
 80132c4:	f003 020f 	and.w	r2, r3, #15
 80132c8:	6879      	ldr	r1, [r7, #4]
 80132ca:	4613      	mov	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	4413      	add	r3, r2
 80132d0:	009b      	lsls	r3, r3, #2
 80132d2:	440b      	add	r3, r1
 80132d4:	3318      	adds	r3, #24
 80132d6:	2200      	movs	r2, #0
 80132d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80132da:	78f9      	ldrb	r1, [r7, #3]
 80132dc:	2300      	movs	r3, #0
 80132de:	2200      	movs	r2, #0
 80132e0:	6878      	ldr	r0, [r7, #4]
 80132e2:	f005 fe0a 	bl	8018efa <USBD_LL_Transmit>
 80132e6:	e01f      	b.n	8013328 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	2200      	movs	r2, #0
 80132ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80132f6:	687a      	ldr	r2, [r7, #4]
 80132f8:	33b0      	adds	r3, #176	@ 0xb0
 80132fa:	009b      	lsls	r3, r3, #2
 80132fc:	4413      	add	r3, r2
 80132fe:	685b      	ldr	r3, [r3, #4]
 8013300:	691b      	ldr	r3, [r3, #16]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d010      	beq.n	8013328 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801330c:	687a      	ldr	r2, [r7, #4]
 801330e:	33b0      	adds	r3, #176	@ 0xb0
 8013310:	009b      	lsls	r3, r3, #2
 8013312:	4413      	add	r3, r2
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	691b      	ldr	r3, [r3, #16]
 8013318:	68ba      	ldr	r2, [r7, #8]
 801331a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801331e:	68ba      	ldr	r2, [r7, #8]
 8013320:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013324:	78fa      	ldrb	r2, [r7, #3]
 8013326:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013328:	2300      	movs	r3, #0
}
 801332a:	4618      	mov	r0, r3
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}

08013332 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013332:	b580      	push	{r7, lr}
 8013334:	b084      	sub	sp, #16
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
 801333a:	460b      	mov	r3, r1
 801333c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	32b0      	adds	r2, #176	@ 0xb0
 8013348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801334c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	32b0      	adds	r2, #176	@ 0xb0
 8013358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d101      	bne.n	8013364 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013360:	2303      	movs	r3, #3
 8013362:	e01a      	b.n	801339a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013364:	78fb      	ldrb	r3, [r7, #3]
 8013366:	4619      	mov	r1, r3
 8013368:	6878      	ldr	r0, [r7, #4]
 801336a:	f005 fe08 	bl	8018f7e <USBD_LL_GetRxDataSize>
 801336e:	4602      	mov	r2, r0
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	33b0      	adds	r3, #176	@ 0xb0
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	4413      	add	r3, r2
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	68fa      	ldr	r2, [r7, #12]
 801338a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801338e:	68fa      	ldr	r2, [r7, #12]
 8013390:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8013394:	4611      	mov	r1, r2
 8013396:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013398:	2300      	movs	r3, #0
}
 801339a:	4618      	mov	r0, r3
 801339c:	3710      	adds	r7, #16
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}

080133a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80133a2:	b580      	push	{r7, lr}
 80133a4:	b084      	sub	sp, #16
 80133a6:	af00      	add	r7, sp, #0
 80133a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	32b0      	adds	r2, #176	@ 0xb0
 80133b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d101      	bne.n	80133c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80133c0:	2303      	movs	r3, #3
 80133c2:	e024      	b.n	801340e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	33b0      	adds	r3, #176	@ 0xb0
 80133ce:	009b      	lsls	r3, r3, #2
 80133d0:	4413      	add	r3, r2
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d019      	beq.n	801340c <USBD_CDC_EP0_RxReady+0x6a>
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80133de:	2bff      	cmp	r3, #255	@ 0xff
 80133e0:	d014      	beq.n	801340c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80133e8:	687a      	ldr	r2, [r7, #4]
 80133ea:	33b0      	adds	r3, #176	@ 0xb0
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	4413      	add	r3, r2
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	689b      	ldr	r3, [r3, #8]
 80133f4:	68fa      	ldr	r2, [r7, #12]
 80133f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80133fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80133fc:	68fa      	ldr	r2, [r7, #12]
 80133fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013402:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	22ff      	movs	r2, #255	@ 0xff
 8013408:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801340c:	2300      	movs	r3, #0
}
 801340e:	4618      	mov	r0, r3
 8013410:	3710      	adds	r7, #16
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
	...

08013418 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b086      	sub	sp, #24
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013420:	2182      	movs	r1, #130	@ 0x82
 8013422:	4818      	ldr	r0, [pc, #96]	@ (8013484 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013424:	f000 fcbd 	bl	8013da2 <USBD_GetEpDesc>
 8013428:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801342a:	2101      	movs	r1, #1
 801342c:	4815      	ldr	r0, [pc, #84]	@ (8013484 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801342e:	f000 fcb8 	bl	8013da2 <USBD_GetEpDesc>
 8013432:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013434:	2181      	movs	r1, #129	@ 0x81
 8013436:	4813      	ldr	r0, [pc, #76]	@ (8013484 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013438:	f000 fcb3 	bl	8013da2 <USBD_GetEpDesc>
 801343c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801343e:	697b      	ldr	r3, [r7, #20]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d002      	beq.n	801344a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013444:	697b      	ldr	r3, [r7, #20]
 8013446:	2210      	movs	r2, #16
 8013448:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801344a:	693b      	ldr	r3, [r7, #16]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d006      	beq.n	801345e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	2200      	movs	r2, #0
 8013454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013458:	711a      	strb	r2, [r3, #4]
 801345a:	2200      	movs	r2, #0
 801345c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d006      	beq.n	8013472 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	2200      	movs	r2, #0
 8013468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801346c:	711a      	strb	r2, [r3, #4]
 801346e:	2200      	movs	r2, #0
 8013470:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	2243      	movs	r2, #67	@ 0x43
 8013476:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013478:	4b02      	ldr	r3, [pc, #8]	@ (8013484 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801347a:	4618      	mov	r0, r3
 801347c:	3718      	adds	r7, #24
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}
 8013482:	bf00      	nop
 8013484:	2000007c 	.word	0x2000007c

08013488 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b086      	sub	sp, #24
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013490:	2182      	movs	r1, #130	@ 0x82
 8013492:	4818      	ldr	r0, [pc, #96]	@ (80134f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013494:	f000 fc85 	bl	8013da2 <USBD_GetEpDesc>
 8013498:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801349a:	2101      	movs	r1, #1
 801349c:	4815      	ldr	r0, [pc, #84]	@ (80134f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801349e:	f000 fc80 	bl	8013da2 <USBD_GetEpDesc>
 80134a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80134a4:	2181      	movs	r1, #129	@ 0x81
 80134a6:	4813      	ldr	r0, [pc, #76]	@ (80134f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80134a8:	f000 fc7b 	bl	8013da2 <USBD_GetEpDesc>
 80134ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d002      	beq.n	80134ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	2210      	movs	r2, #16
 80134b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d006      	beq.n	80134ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80134c0:	693b      	ldr	r3, [r7, #16]
 80134c2:	2200      	movs	r2, #0
 80134c4:	711a      	strb	r2, [r3, #4]
 80134c6:	2200      	movs	r2, #0
 80134c8:	f042 0202 	orr.w	r2, r2, #2
 80134cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d006      	beq.n	80134e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	2200      	movs	r2, #0
 80134d8:	711a      	strb	r2, [r3, #4]
 80134da:	2200      	movs	r2, #0
 80134dc:	f042 0202 	orr.w	r2, r2, #2
 80134e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	2243      	movs	r2, #67	@ 0x43
 80134e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80134e8:	4b02      	ldr	r3, [pc, #8]	@ (80134f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3718      	adds	r7, #24
 80134ee:	46bd      	mov	sp, r7
 80134f0:	bd80      	pop	{r7, pc}
 80134f2:	bf00      	nop
 80134f4:	2000007c 	.word	0x2000007c

080134f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b086      	sub	sp, #24
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013500:	2182      	movs	r1, #130	@ 0x82
 8013502:	4818      	ldr	r0, [pc, #96]	@ (8013564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013504:	f000 fc4d 	bl	8013da2 <USBD_GetEpDesc>
 8013508:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801350a:	2101      	movs	r1, #1
 801350c:	4815      	ldr	r0, [pc, #84]	@ (8013564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801350e:	f000 fc48 	bl	8013da2 <USBD_GetEpDesc>
 8013512:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013514:	2181      	movs	r1, #129	@ 0x81
 8013516:	4813      	ldr	r0, [pc, #76]	@ (8013564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013518:	f000 fc43 	bl	8013da2 <USBD_GetEpDesc>
 801351c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d002      	beq.n	801352a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	2210      	movs	r2, #16
 8013528:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801352a:	693b      	ldr	r3, [r7, #16]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d006      	beq.n	801353e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	2200      	movs	r2, #0
 8013534:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013538:	711a      	strb	r2, [r3, #4]
 801353a:	2200      	movs	r2, #0
 801353c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d006      	beq.n	8013552 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	2200      	movs	r2, #0
 8013548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801354c:	711a      	strb	r2, [r3, #4]
 801354e:	2200      	movs	r2, #0
 8013550:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2243      	movs	r2, #67	@ 0x43
 8013556:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013558:	4b02      	ldr	r3, [pc, #8]	@ (8013564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801355a:	4618      	mov	r0, r3
 801355c:	3718      	adds	r7, #24
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	2000007c 	.word	0x2000007c

08013568 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013568:	b480      	push	{r7}
 801356a:	b083      	sub	sp, #12
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	220a      	movs	r2, #10
 8013574:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013576:	4b03      	ldr	r3, [pc, #12]	@ (8013584 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013578:	4618      	mov	r0, r3
 801357a:	370c      	adds	r7, #12
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr
 8013584:	20000038 	.word	0x20000038

08013588 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013588:	b480      	push	{r7}
 801358a:	b083      	sub	sp, #12
 801358c:	af00      	add	r7, sp, #0
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d101      	bne.n	801359c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013598:	2303      	movs	r3, #3
 801359a:	e009      	b.n	80135b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	33b0      	adds	r3, #176	@ 0xb0
 80135a6:	009b      	lsls	r3, r3, #2
 80135a8:	4413      	add	r3, r2
 80135aa:	683a      	ldr	r2, [r7, #0]
 80135ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80135ae:	2300      	movs	r3, #0
}
 80135b0:	4618      	mov	r0, r3
 80135b2:	370c      	adds	r7, #12
 80135b4:	46bd      	mov	sp, r7
 80135b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ba:	4770      	bx	lr

080135bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80135bc:	b480      	push	{r7}
 80135be:	b087      	sub	sp, #28
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	32b0      	adds	r2, #176	@ 0xb0
 80135d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d101      	bne.n	80135e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80135de:	2303      	movs	r3, #3
 80135e0:	e008      	b.n	80135f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80135e2:	697b      	ldr	r3, [r7, #20]
 80135e4:	68ba      	ldr	r2, [r7, #8]
 80135e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80135f2:	2300      	movs	r3, #0
}
 80135f4:	4618      	mov	r0, r3
 80135f6:	371c      	adds	r7, #28
 80135f8:	46bd      	mov	sp, r7
 80135fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fe:	4770      	bx	lr

08013600 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013600:	b480      	push	{r7}
 8013602:	b085      	sub	sp, #20
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
 8013608:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	32b0      	adds	r2, #176	@ 0xb0
 8013614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013618:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d101      	bne.n	8013624 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013620:	2303      	movs	r3, #3
 8013622:	e004      	b.n	801362e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	683a      	ldr	r2, [r7, #0]
 8013628:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801362c:	2300      	movs	r3, #0
}
 801362e:	4618      	mov	r0, r3
 8013630:	3714      	adds	r7, #20
 8013632:	46bd      	mov	sp, r7
 8013634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013638:	4770      	bx	lr
	...

0801363c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	32b0      	adds	r2, #176	@ 0xb0
 801364e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013652:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013654:	2301      	movs	r3, #1
 8013656:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013658:	68bb      	ldr	r3, [r7, #8]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d101      	bne.n	8013662 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801365e:	2303      	movs	r3, #3
 8013660:	e025      	b.n	80136ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013668:	2b00      	cmp	r3, #0
 801366a:	d11f      	bne.n	80136ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	2201      	movs	r2, #1
 8013670:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013674:	4b10      	ldr	r3, [pc, #64]	@ (80136b8 <USBD_CDC_TransmitPacket+0x7c>)
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	f003 020f 	and.w	r2, r3, #15
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	4613      	mov	r3, r2
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	4413      	add	r3, r2
 801368a:	009b      	lsls	r3, r3, #2
 801368c:	4403      	add	r3, r0
 801368e:	3318      	adds	r3, #24
 8013690:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8013692:	4b09      	ldr	r3, [pc, #36]	@ (80136b8 <USBD_CDC_TransmitPacket+0x7c>)
 8013694:	7819      	ldrb	r1, [r3, #0]
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80136a2:	6878      	ldr	r0, [r7, #4]
 80136a4:	f005 fc29 	bl	8018efa <USBD_LL_Transmit>

    ret = USBD_OK;
 80136a8:	2300      	movs	r3, #0
 80136aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80136ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80136ae:	4618      	mov	r0, r3
 80136b0:	3710      	adds	r7, #16
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bd80      	pop	{r7, pc}
 80136b6:	bf00      	nop
 80136b8:	200000bf 	.word	0x200000bf

080136bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	32b0      	adds	r2, #176	@ 0xb0
 80136ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	32b0      	adds	r2, #176	@ 0xb0
 80136de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d101      	bne.n	80136ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80136e6:	2303      	movs	r3, #3
 80136e8:	e018      	b.n	801371c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	7c1b      	ldrb	r3, [r3, #16]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d10a      	bne.n	8013708 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80136f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013724 <USBD_CDC_ReceivePacket+0x68>)
 80136f4:	7819      	ldrb	r1, [r3, #0]
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80136fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f005 fc1b 	bl	8018f3c <USBD_LL_PrepareReceive>
 8013706:	e008      	b.n	801371a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013708:	4b06      	ldr	r3, [pc, #24]	@ (8013724 <USBD_CDC_ReceivePacket+0x68>)
 801370a:	7819      	ldrb	r1, [r3, #0]
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013712:	2340      	movs	r3, #64	@ 0x40
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f005 fc11 	bl	8018f3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801371a:	2300      	movs	r3, #0
}
 801371c:	4618      	mov	r0, r3
 801371e:	3710      	adds	r7, #16
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	200000c0 	.word	0x200000c0

08013728 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b086      	sub	sp, #24
 801372c:	af00      	add	r7, sp, #0
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	60b9      	str	r1, [r7, #8]
 8013732:	4613      	mov	r3, r2
 8013734:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d101      	bne.n	8013740 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801373c:	2303      	movs	r3, #3
 801373e:	e01f      	b.n	8013780 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	2200      	movs	r2, #0
 8013744:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	2200      	movs	r2, #0
 801374c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	2200      	movs	r2, #0
 8013754:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	2b00      	cmp	r3, #0
 801375c:	d003      	beq.n	8013766 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	68ba      	ldr	r2, [r7, #8]
 8013762:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	2201      	movs	r2, #1
 801376a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	79fa      	ldrb	r2, [r7, #7]
 8013772:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f005 fa75 	bl	8018c64 <USBD_LL_Init>
 801377a:	4603      	mov	r3, r0
 801377c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801377e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013780:	4618      	mov	r0, r3
 8013782:	3718      	adds	r7, #24
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}

08013788 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013788:	b580      	push	{r7, lr}
 801378a:	b084      	sub	sp, #16
 801378c:	af00      	add	r7, sp, #0
 801378e:	6078      	str	r0, [r7, #4]
 8013790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013792:	2300      	movs	r3, #0
 8013794:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013796:	683b      	ldr	r3, [r7, #0]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d101      	bne.n	80137a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801379c:	2303      	movs	r3, #3
 801379e:	e025      	b.n	80137ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	683a      	ldr	r2, [r7, #0]
 80137a4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	32ae      	adds	r2, #174	@ 0xae
 80137b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d00f      	beq.n	80137dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	32ae      	adds	r2, #174	@ 0xae
 80137c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80137cc:	f107 020e 	add.w	r2, r7, #14
 80137d0:	4610      	mov	r0, r2
 80137d2:	4798      	blx	r3
 80137d4:	4602      	mov	r2, r0
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80137e2:	1c5a      	adds	r2, r3, #1
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80137ea:	2300      	movs	r3, #0
}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3710      	adds	r7, #16
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f005 fa93 	bl	8018d28 <USBD_LL_Start>
 8013802:	4603      	mov	r3, r0
}
 8013804:	4618      	mov	r0, r3
 8013806:	3708      	adds	r7, #8
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801380c:	b480      	push	{r7}
 801380e:	b083      	sub	sp, #12
 8013810:	af00      	add	r7, sp, #0
 8013812:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013814:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013816:	4618      	mov	r0, r3
 8013818:	370c      	adds	r7, #12
 801381a:	46bd      	mov	sp, r7
 801381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013820:	4770      	bx	lr

08013822 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013822:	b580      	push	{r7, lr}
 8013824:	b084      	sub	sp, #16
 8013826:	af00      	add	r7, sp, #0
 8013828:	6078      	str	r0, [r7, #4]
 801382a:	460b      	mov	r3, r1
 801382c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801382e:	2300      	movs	r3, #0
 8013830:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013838:	2b00      	cmp	r3, #0
 801383a:	d009      	beq.n	8013850 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	78fa      	ldrb	r2, [r7, #3]
 8013846:	4611      	mov	r1, r2
 8013848:	6878      	ldr	r0, [r7, #4]
 801384a:	4798      	blx	r3
 801384c:	4603      	mov	r3, r0
 801384e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013850:	7bfb      	ldrb	r3, [r7, #15]
}
 8013852:	4618      	mov	r0, r3
 8013854:	3710      	adds	r7, #16
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}

0801385a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801385a:	b580      	push	{r7, lr}
 801385c:	b084      	sub	sp, #16
 801385e:	af00      	add	r7, sp, #0
 8013860:	6078      	str	r0, [r7, #4]
 8013862:	460b      	mov	r3, r1
 8013864:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013866:	2300      	movs	r3, #0
 8013868:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013870:	685b      	ldr	r3, [r3, #4]
 8013872:	78fa      	ldrb	r2, [r7, #3]
 8013874:	4611      	mov	r1, r2
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	4798      	blx	r3
 801387a:	4603      	mov	r3, r0
 801387c:	2b00      	cmp	r3, #0
 801387e:	d001      	beq.n	8013884 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013880:	2303      	movs	r3, #3
 8013882:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013884:	7bfb      	ldrb	r3, [r7, #15]
}
 8013886:	4618      	mov	r0, r3
 8013888:	3710      	adds	r7, #16
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}

0801388e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801388e:	b580      	push	{r7, lr}
 8013890:	b084      	sub	sp, #16
 8013892:	af00      	add	r7, sp, #0
 8013894:	6078      	str	r0, [r7, #4]
 8013896:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801389e:	6839      	ldr	r1, [r7, #0]
 80138a0:	4618      	mov	r0, r3
 80138a2:	f001 f8a4 	bl	80149ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	2201      	movs	r2, #1
 80138aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80138b4:	461a      	mov	r2, r3
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80138c2:	f003 031f 	and.w	r3, r3, #31
 80138c6:	2b02      	cmp	r3, #2
 80138c8:	d01a      	beq.n	8013900 <USBD_LL_SetupStage+0x72>
 80138ca:	2b02      	cmp	r3, #2
 80138cc:	d822      	bhi.n	8013914 <USBD_LL_SetupStage+0x86>
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d002      	beq.n	80138d8 <USBD_LL_SetupStage+0x4a>
 80138d2:	2b01      	cmp	r3, #1
 80138d4:	d00a      	beq.n	80138ec <USBD_LL_SetupStage+0x5e>
 80138d6:	e01d      	b.n	8013914 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80138de:	4619      	mov	r1, r3
 80138e0:	6878      	ldr	r0, [r7, #4]
 80138e2:	f000 fad1 	bl	8013e88 <USBD_StdDevReq>
 80138e6:	4603      	mov	r3, r0
 80138e8:	73fb      	strb	r3, [r7, #15]
      break;
 80138ea:	e020      	b.n	801392e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80138f2:	4619      	mov	r1, r3
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f000 fb39 	bl	8013f6c <USBD_StdItfReq>
 80138fa:	4603      	mov	r3, r0
 80138fc:	73fb      	strb	r3, [r7, #15]
      break;
 80138fe:	e016      	b.n	801392e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013906:	4619      	mov	r1, r3
 8013908:	6878      	ldr	r0, [r7, #4]
 801390a:	f000 fb9b 	bl	8014044 <USBD_StdEPReq>
 801390e:	4603      	mov	r3, r0
 8013910:	73fb      	strb	r3, [r7, #15]
      break;
 8013912:	e00c      	b.n	801392e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801391a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801391e:	b2db      	uxtb	r3, r3
 8013920:	4619      	mov	r1, r3
 8013922:	6878      	ldr	r0, [r7, #4]
 8013924:	f005 fa60 	bl	8018de8 <USBD_LL_StallEP>
 8013928:	4603      	mov	r3, r0
 801392a:	73fb      	strb	r3, [r7, #15]
      break;
 801392c:	bf00      	nop
  }

  return ret;
 801392e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013930:	4618      	mov	r0, r3
 8013932:	3710      	adds	r7, #16
 8013934:	46bd      	mov	sp, r7
 8013936:	bd80      	pop	{r7, pc}

08013938 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b086      	sub	sp, #24
 801393c:	af00      	add	r7, sp, #0
 801393e:	60f8      	str	r0, [r7, #12]
 8013940:	460b      	mov	r3, r1
 8013942:	607a      	str	r2, [r7, #4]
 8013944:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013946:	2300      	movs	r3, #0
 8013948:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801394a:	7afb      	ldrb	r3, [r7, #11]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d16e      	bne.n	8013a2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013956:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801395e:	2b03      	cmp	r3, #3
 8013960:	f040 8098 	bne.w	8013a94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013964:	693b      	ldr	r3, [r7, #16]
 8013966:	689a      	ldr	r2, [r3, #8]
 8013968:	693b      	ldr	r3, [r7, #16]
 801396a:	68db      	ldr	r3, [r3, #12]
 801396c:	429a      	cmp	r2, r3
 801396e:	d913      	bls.n	8013998 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	689a      	ldr	r2, [r3, #8]
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	68db      	ldr	r3, [r3, #12]
 8013978:	1ad2      	subs	r2, r2, r3
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801397e:	693b      	ldr	r3, [r7, #16]
 8013980:	68da      	ldr	r2, [r3, #12]
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	689b      	ldr	r3, [r3, #8]
 8013986:	4293      	cmp	r3, r2
 8013988:	bf28      	it	cs
 801398a:	4613      	movcs	r3, r2
 801398c:	461a      	mov	r2, r3
 801398e:	6879      	ldr	r1, [r7, #4]
 8013990:	68f8      	ldr	r0, [r7, #12]
 8013992:	f001 f92c 	bl	8014bee <USBD_CtlContinueRx>
 8013996:	e07d      	b.n	8013a94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801399e:	f003 031f 	and.w	r3, r3, #31
 80139a2:	2b02      	cmp	r3, #2
 80139a4:	d014      	beq.n	80139d0 <USBD_LL_DataOutStage+0x98>
 80139a6:	2b02      	cmp	r3, #2
 80139a8:	d81d      	bhi.n	80139e6 <USBD_LL_DataOutStage+0xae>
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d002      	beq.n	80139b4 <USBD_LL_DataOutStage+0x7c>
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d003      	beq.n	80139ba <USBD_LL_DataOutStage+0x82>
 80139b2:	e018      	b.n	80139e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80139b4:	2300      	movs	r3, #0
 80139b6:	75bb      	strb	r3, [r7, #22]
            break;
 80139b8:	e018      	b.n	80139ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80139c0:	b2db      	uxtb	r3, r3
 80139c2:	4619      	mov	r1, r3
 80139c4:	68f8      	ldr	r0, [r7, #12]
 80139c6:	f000 f9d2 	bl	8013d6e <USBD_CoreFindIF>
 80139ca:	4603      	mov	r3, r0
 80139cc:	75bb      	strb	r3, [r7, #22]
            break;
 80139ce:	e00d      	b.n	80139ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80139d6:	b2db      	uxtb	r3, r3
 80139d8:	4619      	mov	r1, r3
 80139da:	68f8      	ldr	r0, [r7, #12]
 80139dc:	f000 f9d4 	bl	8013d88 <USBD_CoreFindEP>
 80139e0:	4603      	mov	r3, r0
 80139e2:	75bb      	strb	r3, [r7, #22]
            break;
 80139e4:	e002      	b.n	80139ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80139e6:	2300      	movs	r3, #0
 80139e8:	75bb      	strb	r3, [r7, #22]
            break;
 80139ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80139ec:	7dbb      	ldrb	r3, [r7, #22]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d119      	bne.n	8013a26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139f8:	b2db      	uxtb	r3, r3
 80139fa:	2b03      	cmp	r3, #3
 80139fc:	d113      	bne.n	8013a26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80139fe:	7dba      	ldrb	r2, [r7, #22]
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	32ae      	adds	r2, #174	@ 0xae
 8013a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a08:	691b      	ldr	r3, [r3, #16]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d00b      	beq.n	8013a26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013a0e:	7dba      	ldrb	r2, [r7, #22]
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013a16:	7dba      	ldrb	r2, [r7, #22]
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	32ae      	adds	r2, #174	@ 0xae
 8013a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a20:	691b      	ldr	r3, [r3, #16]
 8013a22:	68f8      	ldr	r0, [r7, #12]
 8013a24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013a26:	68f8      	ldr	r0, [r7, #12]
 8013a28:	f001 f8f2 	bl	8014c10 <USBD_CtlSendStatus>
 8013a2c:	e032      	b.n	8013a94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013a2e:	7afb      	ldrb	r3, [r7, #11]
 8013a30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	4619      	mov	r1, r3
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f000 f9a5 	bl	8013d88 <USBD_CoreFindEP>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013a42:	7dbb      	ldrb	r3, [r7, #22]
 8013a44:	2bff      	cmp	r3, #255	@ 0xff
 8013a46:	d025      	beq.n	8013a94 <USBD_LL_DataOutStage+0x15c>
 8013a48:	7dbb      	ldrb	r3, [r7, #22]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d122      	bne.n	8013a94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	2b03      	cmp	r3, #3
 8013a58:	d117      	bne.n	8013a8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013a5a:	7dba      	ldrb	r2, [r7, #22]
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	32ae      	adds	r2, #174	@ 0xae
 8013a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a64:	699b      	ldr	r3, [r3, #24]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d00f      	beq.n	8013a8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013a6a:	7dba      	ldrb	r2, [r7, #22]
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013a72:	7dba      	ldrb	r2, [r7, #22]
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	32ae      	adds	r2, #174	@ 0xae
 8013a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a7c:	699b      	ldr	r3, [r3, #24]
 8013a7e:	7afa      	ldrb	r2, [r7, #11]
 8013a80:	4611      	mov	r1, r2
 8013a82:	68f8      	ldr	r0, [r7, #12]
 8013a84:	4798      	blx	r3
 8013a86:	4603      	mov	r3, r0
 8013a88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013a8a:	7dfb      	ldrb	r3, [r7, #23]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d001      	beq.n	8013a94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013a90:	7dfb      	ldrb	r3, [r7, #23]
 8013a92:	e000      	b.n	8013a96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013a94:	2300      	movs	r3, #0
}
 8013a96:	4618      	mov	r0, r3
 8013a98:	3718      	adds	r7, #24
 8013a9a:	46bd      	mov	sp, r7
 8013a9c:	bd80      	pop	{r7, pc}

08013a9e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b086      	sub	sp, #24
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	60f8      	str	r0, [r7, #12]
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	607a      	str	r2, [r7, #4]
 8013aaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013aac:	7afb      	ldrb	r3, [r7, #11]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d16f      	bne.n	8013b92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	3314      	adds	r3, #20
 8013ab6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013abe:	2b02      	cmp	r3, #2
 8013ac0:	d15a      	bne.n	8013b78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013ac2:	693b      	ldr	r3, [r7, #16]
 8013ac4:	689a      	ldr	r2, [r3, #8]
 8013ac6:	693b      	ldr	r3, [r7, #16]
 8013ac8:	68db      	ldr	r3, [r3, #12]
 8013aca:	429a      	cmp	r2, r3
 8013acc:	d914      	bls.n	8013af8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013ace:	693b      	ldr	r3, [r7, #16]
 8013ad0:	689a      	ldr	r2, [r3, #8]
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	68db      	ldr	r3, [r3, #12]
 8013ad6:	1ad2      	subs	r2, r2, r3
 8013ad8:	693b      	ldr	r3, [r7, #16]
 8013ada:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	689b      	ldr	r3, [r3, #8]
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	6879      	ldr	r1, [r7, #4]
 8013ae4:	68f8      	ldr	r0, [r7, #12]
 8013ae6:	f001 f854 	bl	8014b92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013aea:	2300      	movs	r3, #0
 8013aec:	2200      	movs	r2, #0
 8013aee:	2100      	movs	r1, #0
 8013af0:	68f8      	ldr	r0, [r7, #12]
 8013af2:	f005 fa23 	bl	8018f3c <USBD_LL_PrepareReceive>
 8013af6:	e03f      	b.n	8013b78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	68da      	ldr	r2, [r3, #12]
 8013afc:	693b      	ldr	r3, [r7, #16]
 8013afe:	689b      	ldr	r3, [r3, #8]
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d11c      	bne.n	8013b3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013b04:	693b      	ldr	r3, [r7, #16]
 8013b06:	685a      	ldr	r2, [r3, #4]
 8013b08:	693b      	ldr	r3, [r7, #16]
 8013b0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d316      	bcc.n	8013b3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013b10:	693b      	ldr	r3, [r7, #16]
 8013b12:	685a      	ldr	r2, [r3, #4]
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013b1a:	429a      	cmp	r2, r3
 8013b1c:	d20f      	bcs.n	8013b3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013b1e:	2200      	movs	r2, #0
 8013b20:	2100      	movs	r1, #0
 8013b22:	68f8      	ldr	r0, [r7, #12]
 8013b24:	f001 f835 	bl	8014b92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b30:	2300      	movs	r3, #0
 8013b32:	2200      	movs	r2, #0
 8013b34:	2100      	movs	r1, #0
 8013b36:	68f8      	ldr	r0, [r7, #12]
 8013b38:	f005 fa00 	bl	8018f3c <USBD_LL_PrepareReceive>
 8013b3c:	e01c      	b.n	8013b78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b44:	b2db      	uxtb	r3, r3
 8013b46:	2b03      	cmp	r3, #3
 8013b48:	d10f      	bne.n	8013b6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b50:	68db      	ldr	r3, [r3, #12]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d009      	beq.n	8013b6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013b64:	68db      	ldr	r3, [r3, #12]
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b6a:	2180      	movs	r1, #128	@ 0x80
 8013b6c:	68f8      	ldr	r0, [r7, #12]
 8013b6e:	f005 f93b 	bl	8018de8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013b72:	68f8      	ldr	r0, [r7, #12]
 8013b74:	f001 f85f 	bl	8014c36 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d03a      	beq.n	8013bf8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013b82:	68f8      	ldr	r0, [r7, #12]
 8013b84:	f7ff fe42 	bl	801380c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013b90:	e032      	b.n	8013bf8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013b92:	7afb      	ldrb	r3, [r7, #11]
 8013b94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013b98:	b2db      	uxtb	r3, r3
 8013b9a:	4619      	mov	r1, r3
 8013b9c:	68f8      	ldr	r0, [r7, #12]
 8013b9e:	f000 f8f3 	bl	8013d88 <USBD_CoreFindEP>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ba6:	7dfb      	ldrb	r3, [r7, #23]
 8013ba8:	2bff      	cmp	r3, #255	@ 0xff
 8013baa:	d025      	beq.n	8013bf8 <USBD_LL_DataInStage+0x15a>
 8013bac:	7dfb      	ldrb	r3, [r7, #23]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d122      	bne.n	8013bf8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	2b03      	cmp	r3, #3
 8013bbc:	d11c      	bne.n	8013bf8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013bbe:	7dfa      	ldrb	r2, [r7, #23]
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	32ae      	adds	r2, #174	@ 0xae
 8013bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bc8:	695b      	ldr	r3, [r3, #20]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d014      	beq.n	8013bf8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013bce:	7dfa      	ldrb	r2, [r7, #23]
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013bd6:	7dfa      	ldrb	r2, [r7, #23]
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	32ae      	adds	r2, #174	@ 0xae
 8013bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013be0:	695b      	ldr	r3, [r3, #20]
 8013be2:	7afa      	ldrb	r2, [r7, #11]
 8013be4:	4611      	mov	r1, r2
 8013be6:	68f8      	ldr	r0, [r7, #12]
 8013be8:	4798      	blx	r3
 8013bea:	4603      	mov	r3, r0
 8013bec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013bee:	7dbb      	ldrb	r3, [r7, #22]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d001      	beq.n	8013bf8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013bf4:	7dbb      	ldrb	r3, [r7, #22]
 8013bf6:	e000      	b.n	8013bfa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013bf8:	2300      	movs	r3, #0
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	3718      	adds	r7, #24
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd80      	pop	{r7, pc}

08013c02 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013c02:	b580      	push	{r7, lr}
 8013c04:	b084      	sub	sp, #16
 8013c06:	af00      	add	r7, sp, #0
 8013c08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2201      	movs	r2, #1
 8013c12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	2200      	movs	r2, #0
 8013c22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2200      	movs	r2, #0
 8013c28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d014      	beq.n	8013c68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00e      	beq.n	8013c68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c50:	685b      	ldr	r3, [r3, #4]
 8013c52:	687a      	ldr	r2, [r7, #4]
 8013c54:	6852      	ldr	r2, [r2, #4]
 8013c56:	b2d2      	uxtb	r2, r2
 8013c58:	4611      	mov	r1, r2
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	4798      	blx	r3
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d001      	beq.n	8013c68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013c64:	2303      	movs	r3, #3
 8013c66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c68:	2340      	movs	r3, #64	@ 0x40
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	6878      	ldr	r0, [r7, #4]
 8013c70:	f005 f875 	bl	8018d5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2201      	movs	r2, #1
 8013c78:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	2240      	movs	r2, #64	@ 0x40
 8013c80:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013c84:	2340      	movs	r3, #64	@ 0x40
 8013c86:	2200      	movs	r2, #0
 8013c88:	2180      	movs	r1, #128	@ 0x80
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f005 f867 	bl	8018d5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2201      	movs	r2, #1
 8013c94:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	2240      	movs	r2, #64	@ 0x40
 8013c9a:	621a      	str	r2, [r3, #32]

  return ret;
 8013c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3710      	adds	r7, #16
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}

08013ca6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013ca6:	b480      	push	{r7}
 8013ca8:	b083      	sub	sp, #12
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	6078      	str	r0, [r7, #4]
 8013cae:	460b      	mov	r3, r1
 8013cb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	78fa      	ldrb	r2, [r7, #3]
 8013cb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013cb8:	2300      	movs	r3, #0
}
 8013cba:	4618      	mov	r0, r3
 8013cbc:	370c      	adds	r7, #12
 8013cbe:	46bd      	mov	sp, r7
 8013cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc4:	4770      	bx	lr

08013cc6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013cc6:	b480      	push	{r7}
 8013cc8:	b083      	sub	sp, #12
 8013cca:	af00      	add	r7, sp, #0
 8013ccc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013cd4:	b2db      	uxtb	r3, r3
 8013cd6:	2b04      	cmp	r3, #4
 8013cd8:	d006      	beq.n	8013ce8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ce0:	b2da      	uxtb	r2, r3
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	2204      	movs	r2, #4
 8013cec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013cf0:	2300      	movs	r3, #0
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	370c      	adds	r7, #12
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfc:	4770      	bx	lr

08013cfe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013cfe:	b480      	push	{r7}
 8013d00:	b083      	sub	sp, #12
 8013d02:	af00      	add	r7, sp, #0
 8013d04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d0c:	b2db      	uxtb	r3, r3
 8013d0e:	2b04      	cmp	r3, #4
 8013d10:	d106      	bne.n	8013d20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013d18:	b2da      	uxtb	r2, r3
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013d20:	2300      	movs	r3, #0
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	370c      	adds	r7, #12
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr

08013d2e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013d2e:	b580      	push	{r7, lr}
 8013d30:	b082      	sub	sp, #8
 8013d32:	af00      	add	r7, sp, #0
 8013d34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	2b03      	cmp	r3, #3
 8013d40:	d110      	bne.n	8013d64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d00b      	beq.n	8013d64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d52:	69db      	ldr	r3, [r3, #28]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d005      	beq.n	8013d64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d5e:	69db      	ldr	r3, [r3, #28]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013d64:	2300      	movs	r3, #0
}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3708      	adds	r7, #8
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	bd80      	pop	{r7, pc}

08013d6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013d6e:	b480      	push	{r7}
 8013d70:	b083      	sub	sp, #12
 8013d72:	af00      	add	r7, sp, #0
 8013d74:	6078      	str	r0, [r7, #4]
 8013d76:	460b      	mov	r3, r1
 8013d78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013d7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	370c      	adds	r7, #12
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr

08013d88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b083      	sub	sp, #12
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	6078      	str	r0, [r7, #4]
 8013d90:	460b      	mov	r3, r1
 8013d92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013d94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	370c      	adds	r7, #12
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013da2:	b580      	push	{r7, lr}
 8013da4:	b086      	sub	sp, #24
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	6078      	str	r0, [r7, #4]
 8013daa:	460b      	mov	r3, r1
 8013dac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013db6:	2300      	movs	r3, #0
 8013db8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	885b      	ldrh	r3, [r3, #2]
 8013dbe:	b29b      	uxth	r3, r3
 8013dc0:	68fa      	ldr	r2, [r7, #12]
 8013dc2:	7812      	ldrb	r2, [r2, #0]
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	d91f      	bls.n	8013e08 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013dce:	e013      	b.n	8013df8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013dd0:	f107 030a 	add.w	r3, r7, #10
 8013dd4:	4619      	mov	r1, r3
 8013dd6:	6978      	ldr	r0, [r7, #20]
 8013dd8:	f000 f81b 	bl	8013e12 <USBD_GetNextDesc>
 8013ddc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013dde:	697b      	ldr	r3, [r7, #20]
 8013de0:	785b      	ldrb	r3, [r3, #1]
 8013de2:	2b05      	cmp	r3, #5
 8013de4:	d108      	bne.n	8013df8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013dea:	693b      	ldr	r3, [r7, #16]
 8013dec:	789b      	ldrb	r3, [r3, #2]
 8013dee:	78fa      	ldrb	r2, [r7, #3]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d008      	beq.n	8013e06 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013df4:	2300      	movs	r3, #0
 8013df6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	885b      	ldrh	r3, [r3, #2]
 8013dfc:	b29a      	uxth	r2, r3
 8013dfe:	897b      	ldrh	r3, [r7, #10]
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d8e5      	bhi.n	8013dd0 <USBD_GetEpDesc+0x2e>
 8013e04:	e000      	b.n	8013e08 <USBD_GetEpDesc+0x66>
          break;
 8013e06:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013e08:	693b      	ldr	r3, [r7, #16]
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3718      	adds	r7, #24
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}

08013e12 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013e12:	b480      	push	{r7}
 8013e14:	b085      	sub	sp, #20
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
 8013e1a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	881b      	ldrh	r3, [r3, #0]
 8013e24:	68fa      	ldr	r2, [r7, #12]
 8013e26:	7812      	ldrb	r2, [r2, #0]
 8013e28:	4413      	add	r3, r2
 8013e2a:	b29a      	uxth	r2, r3
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	781b      	ldrb	r3, [r3, #0]
 8013e34:	461a      	mov	r2, r3
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	4413      	add	r3, r2
 8013e3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013e3c:	68fb      	ldr	r3, [r7, #12]
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3714      	adds	r7, #20
 8013e42:	46bd      	mov	sp, r7
 8013e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e48:	4770      	bx	lr

08013e4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013e4a:	b480      	push	{r7}
 8013e4c:	b087      	sub	sp, #28
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	781b      	ldrb	r3, [r3, #0]
 8013e5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013e5c:	697b      	ldr	r3, [r7, #20]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013e62:	697b      	ldr	r3, [r7, #20]
 8013e64:	781b      	ldrb	r3, [r3, #0]
 8013e66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013e68:	8a3b      	ldrh	r3, [r7, #16]
 8013e6a:	021b      	lsls	r3, r3, #8
 8013e6c:	b21a      	sxth	r2, r3
 8013e6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013e72:	4313      	orrs	r3, r2
 8013e74:	b21b      	sxth	r3, r3
 8013e76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013e78:	89fb      	ldrh	r3, [r7, #14]
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	371c      	adds	r7, #28
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr
	...

08013e88 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013e92:	2300      	movs	r3, #0
 8013e94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013e96:	683b      	ldr	r3, [r7, #0]
 8013e98:	781b      	ldrb	r3, [r3, #0]
 8013e9a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013e9e:	2b40      	cmp	r3, #64	@ 0x40
 8013ea0:	d005      	beq.n	8013eae <USBD_StdDevReq+0x26>
 8013ea2:	2b40      	cmp	r3, #64	@ 0x40
 8013ea4:	d857      	bhi.n	8013f56 <USBD_StdDevReq+0xce>
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d00f      	beq.n	8013eca <USBD_StdDevReq+0x42>
 8013eaa:	2b20      	cmp	r3, #32
 8013eac:	d153      	bne.n	8013f56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	32ae      	adds	r2, #174	@ 0xae
 8013eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ebc:	689b      	ldr	r3, [r3, #8]
 8013ebe:	6839      	ldr	r1, [r7, #0]
 8013ec0:	6878      	ldr	r0, [r7, #4]
 8013ec2:	4798      	blx	r3
 8013ec4:	4603      	mov	r3, r0
 8013ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8013ec8:	e04a      	b.n	8013f60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	785b      	ldrb	r3, [r3, #1]
 8013ece:	2b09      	cmp	r3, #9
 8013ed0:	d83b      	bhi.n	8013f4a <USBD_StdDevReq+0xc2>
 8013ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8013ed8 <USBD_StdDevReq+0x50>)
 8013ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ed8:	08013f2d 	.word	0x08013f2d
 8013edc:	08013f41 	.word	0x08013f41
 8013ee0:	08013f4b 	.word	0x08013f4b
 8013ee4:	08013f37 	.word	0x08013f37
 8013ee8:	08013f4b 	.word	0x08013f4b
 8013eec:	08013f0b 	.word	0x08013f0b
 8013ef0:	08013f01 	.word	0x08013f01
 8013ef4:	08013f4b 	.word	0x08013f4b
 8013ef8:	08013f23 	.word	0x08013f23
 8013efc:	08013f15 	.word	0x08013f15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013f00:	6839      	ldr	r1, [r7, #0]
 8013f02:	6878      	ldr	r0, [r7, #4]
 8013f04:	f000 fa3c 	bl	8014380 <USBD_GetDescriptor>
          break;
 8013f08:	e024      	b.n	8013f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013f0a:	6839      	ldr	r1, [r7, #0]
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f000 fbcb 	bl	80146a8 <USBD_SetAddress>
          break;
 8013f12:	e01f      	b.n	8013f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013f14:	6839      	ldr	r1, [r7, #0]
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f000 fc0a 	bl	8014730 <USBD_SetConfig>
 8013f1c:	4603      	mov	r3, r0
 8013f1e:	73fb      	strb	r3, [r7, #15]
          break;
 8013f20:	e018      	b.n	8013f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013f22:	6839      	ldr	r1, [r7, #0]
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f000 fcad 	bl	8014884 <USBD_GetConfig>
          break;
 8013f2a:	e013      	b.n	8013f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013f2c:	6839      	ldr	r1, [r7, #0]
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f000 fcde 	bl	80148f0 <USBD_GetStatus>
          break;
 8013f34:	e00e      	b.n	8013f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013f36:	6839      	ldr	r1, [r7, #0]
 8013f38:	6878      	ldr	r0, [r7, #4]
 8013f3a:	f000 fd0d 	bl	8014958 <USBD_SetFeature>
          break;
 8013f3e:	e009      	b.n	8013f54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013f40:	6839      	ldr	r1, [r7, #0]
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f000 fd31 	bl	80149aa <USBD_ClrFeature>
          break;
 8013f48:	e004      	b.n	8013f54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013f4a:	6839      	ldr	r1, [r7, #0]
 8013f4c:	6878      	ldr	r0, [r7, #4]
 8013f4e:	f000 fd88 	bl	8014a62 <USBD_CtlError>
          break;
 8013f52:	bf00      	nop
      }
      break;
 8013f54:	e004      	b.n	8013f60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013f56:	6839      	ldr	r1, [r7, #0]
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f000 fd82 	bl	8014a62 <USBD_CtlError>
      break;
 8013f5e:	bf00      	nop
  }

  return ret;
 8013f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3710      	adds	r7, #16
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop

08013f6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b084      	sub	sp, #16
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f76:	2300      	movs	r3, #0
 8013f78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	781b      	ldrb	r3, [r3, #0]
 8013f7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013f82:	2b40      	cmp	r3, #64	@ 0x40
 8013f84:	d005      	beq.n	8013f92 <USBD_StdItfReq+0x26>
 8013f86:	2b40      	cmp	r3, #64	@ 0x40
 8013f88:	d852      	bhi.n	8014030 <USBD_StdItfReq+0xc4>
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d001      	beq.n	8013f92 <USBD_StdItfReq+0x26>
 8013f8e:	2b20      	cmp	r3, #32
 8013f90:	d14e      	bne.n	8014030 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013f98:	b2db      	uxtb	r3, r3
 8013f9a:	3b01      	subs	r3, #1
 8013f9c:	2b02      	cmp	r3, #2
 8013f9e:	d840      	bhi.n	8014022 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	889b      	ldrh	r3, [r3, #4]
 8013fa4:	b2db      	uxtb	r3, r3
 8013fa6:	2b01      	cmp	r3, #1
 8013fa8:	d836      	bhi.n	8014018 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	889b      	ldrh	r3, [r3, #4]
 8013fae:	b2db      	uxtb	r3, r3
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	6878      	ldr	r0, [r7, #4]
 8013fb4:	f7ff fedb 	bl	8013d6e <USBD_CoreFindIF>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013fbc:	7bbb      	ldrb	r3, [r7, #14]
 8013fbe:	2bff      	cmp	r3, #255	@ 0xff
 8013fc0:	d01d      	beq.n	8013ffe <USBD_StdItfReq+0x92>
 8013fc2:	7bbb      	ldrb	r3, [r7, #14]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d11a      	bne.n	8013ffe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013fc8:	7bba      	ldrb	r2, [r7, #14]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	32ae      	adds	r2, #174	@ 0xae
 8013fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd2:	689b      	ldr	r3, [r3, #8]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d00f      	beq.n	8013ff8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013fd8:	7bba      	ldrb	r2, [r7, #14]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013fe0:	7bba      	ldrb	r2, [r7, #14]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	32ae      	adds	r2, #174	@ 0xae
 8013fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fea:	689b      	ldr	r3, [r3, #8]
 8013fec:	6839      	ldr	r1, [r7, #0]
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	4798      	blx	r3
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013ff6:	e004      	b.n	8014002 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013ff8:	2303      	movs	r3, #3
 8013ffa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013ffc:	e001      	b.n	8014002 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013ffe:	2303      	movs	r3, #3
 8014000:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	88db      	ldrh	r3, [r3, #6]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d110      	bne.n	801402c <USBD_StdItfReq+0xc0>
 801400a:	7bfb      	ldrb	r3, [r7, #15]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d10d      	bne.n	801402c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014010:	6878      	ldr	r0, [r7, #4]
 8014012:	f000 fdfd 	bl	8014c10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014016:	e009      	b.n	801402c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014018:	6839      	ldr	r1, [r7, #0]
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f000 fd21 	bl	8014a62 <USBD_CtlError>
          break;
 8014020:	e004      	b.n	801402c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014022:	6839      	ldr	r1, [r7, #0]
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f000 fd1c 	bl	8014a62 <USBD_CtlError>
          break;
 801402a:	e000      	b.n	801402e <USBD_StdItfReq+0xc2>
          break;
 801402c:	bf00      	nop
      }
      break;
 801402e:	e004      	b.n	801403a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014030:	6839      	ldr	r1, [r7, #0]
 8014032:	6878      	ldr	r0, [r7, #4]
 8014034:	f000 fd15 	bl	8014a62 <USBD_CtlError>
      break;
 8014038:	bf00      	nop
  }

  return ret;
 801403a:	7bfb      	ldrb	r3, [r7, #15]
}
 801403c:	4618      	mov	r0, r3
 801403e:	3710      	adds	r7, #16
 8014040:	46bd      	mov	sp, r7
 8014042:	bd80      	pop	{r7, pc}

08014044 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b084      	sub	sp, #16
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801404e:	2300      	movs	r3, #0
 8014050:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	889b      	ldrh	r3, [r3, #4]
 8014056:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014060:	2b40      	cmp	r3, #64	@ 0x40
 8014062:	d007      	beq.n	8014074 <USBD_StdEPReq+0x30>
 8014064:	2b40      	cmp	r3, #64	@ 0x40
 8014066:	f200 817f 	bhi.w	8014368 <USBD_StdEPReq+0x324>
 801406a:	2b00      	cmp	r3, #0
 801406c:	d02a      	beq.n	80140c4 <USBD_StdEPReq+0x80>
 801406e:	2b20      	cmp	r3, #32
 8014070:	f040 817a 	bne.w	8014368 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014074:	7bbb      	ldrb	r3, [r7, #14]
 8014076:	4619      	mov	r1, r3
 8014078:	6878      	ldr	r0, [r7, #4]
 801407a:	f7ff fe85 	bl	8013d88 <USBD_CoreFindEP>
 801407e:	4603      	mov	r3, r0
 8014080:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014082:	7b7b      	ldrb	r3, [r7, #13]
 8014084:	2bff      	cmp	r3, #255	@ 0xff
 8014086:	f000 8174 	beq.w	8014372 <USBD_StdEPReq+0x32e>
 801408a:	7b7b      	ldrb	r3, [r7, #13]
 801408c:	2b00      	cmp	r3, #0
 801408e:	f040 8170 	bne.w	8014372 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014092:	7b7a      	ldrb	r2, [r7, #13]
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801409a:	7b7a      	ldrb	r2, [r7, #13]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	32ae      	adds	r2, #174	@ 0xae
 80140a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140a4:	689b      	ldr	r3, [r3, #8]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	f000 8163 	beq.w	8014372 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80140ac:	7b7a      	ldrb	r2, [r7, #13]
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	32ae      	adds	r2, #174	@ 0xae
 80140b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140b6:	689b      	ldr	r3, [r3, #8]
 80140b8:	6839      	ldr	r1, [r7, #0]
 80140ba:	6878      	ldr	r0, [r7, #4]
 80140bc:	4798      	blx	r3
 80140be:	4603      	mov	r3, r0
 80140c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80140c2:	e156      	b.n	8014372 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	785b      	ldrb	r3, [r3, #1]
 80140c8:	2b03      	cmp	r3, #3
 80140ca:	d008      	beq.n	80140de <USBD_StdEPReq+0x9a>
 80140cc:	2b03      	cmp	r3, #3
 80140ce:	f300 8145 	bgt.w	801435c <USBD_StdEPReq+0x318>
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	f000 809b 	beq.w	801420e <USBD_StdEPReq+0x1ca>
 80140d8:	2b01      	cmp	r3, #1
 80140da:	d03c      	beq.n	8014156 <USBD_StdEPReq+0x112>
 80140dc:	e13e      	b.n	801435c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140e4:	b2db      	uxtb	r3, r3
 80140e6:	2b02      	cmp	r3, #2
 80140e8:	d002      	beq.n	80140f0 <USBD_StdEPReq+0xac>
 80140ea:	2b03      	cmp	r3, #3
 80140ec:	d016      	beq.n	801411c <USBD_StdEPReq+0xd8>
 80140ee:	e02c      	b.n	801414a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80140f0:	7bbb      	ldrb	r3, [r7, #14]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d00d      	beq.n	8014112 <USBD_StdEPReq+0xce>
 80140f6:	7bbb      	ldrb	r3, [r7, #14]
 80140f8:	2b80      	cmp	r3, #128	@ 0x80
 80140fa:	d00a      	beq.n	8014112 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80140fc:	7bbb      	ldrb	r3, [r7, #14]
 80140fe:	4619      	mov	r1, r3
 8014100:	6878      	ldr	r0, [r7, #4]
 8014102:	f004 fe71 	bl	8018de8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014106:	2180      	movs	r1, #128	@ 0x80
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f004 fe6d 	bl	8018de8 <USBD_LL_StallEP>
 801410e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014110:	e020      	b.n	8014154 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014112:	6839      	ldr	r1, [r7, #0]
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f000 fca4 	bl	8014a62 <USBD_CtlError>
              break;
 801411a:	e01b      	b.n	8014154 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	885b      	ldrh	r3, [r3, #2]
 8014120:	2b00      	cmp	r3, #0
 8014122:	d10e      	bne.n	8014142 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014124:	7bbb      	ldrb	r3, [r7, #14]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d00b      	beq.n	8014142 <USBD_StdEPReq+0xfe>
 801412a:	7bbb      	ldrb	r3, [r7, #14]
 801412c:	2b80      	cmp	r3, #128	@ 0x80
 801412e:	d008      	beq.n	8014142 <USBD_StdEPReq+0xfe>
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	88db      	ldrh	r3, [r3, #6]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d104      	bne.n	8014142 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014138:	7bbb      	ldrb	r3, [r7, #14]
 801413a:	4619      	mov	r1, r3
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f004 fe53 	bl	8018de8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014142:	6878      	ldr	r0, [r7, #4]
 8014144:	f000 fd64 	bl	8014c10 <USBD_CtlSendStatus>

              break;
 8014148:	e004      	b.n	8014154 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801414a:	6839      	ldr	r1, [r7, #0]
 801414c:	6878      	ldr	r0, [r7, #4]
 801414e:	f000 fc88 	bl	8014a62 <USBD_CtlError>
              break;
 8014152:	bf00      	nop
          }
          break;
 8014154:	e107      	b.n	8014366 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801415c:	b2db      	uxtb	r3, r3
 801415e:	2b02      	cmp	r3, #2
 8014160:	d002      	beq.n	8014168 <USBD_StdEPReq+0x124>
 8014162:	2b03      	cmp	r3, #3
 8014164:	d016      	beq.n	8014194 <USBD_StdEPReq+0x150>
 8014166:	e04b      	b.n	8014200 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014168:	7bbb      	ldrb	r3, [r7, #14]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d00d      	beq.n	801418a <USBD_StdEPReq+0x146>
 801416e:	7bbb      	ldrb	r3, [r7, #14]
 8014170:	2b80      	cmp	r3, #128	@ 0x80
 8014172:	d00a      	beq.n	801418a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014174:	7bbb      	ldrb	r3, [r7, #14]
 8014176:	4619      	mov	r1, r3
 8014178:	6878      	ldr	r0, [r7, #4]
 801417a:	f004 fe35 	bl	8018de8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801417e:	2180      	movs	r1, #128	@ 0x80
 8014180:	6878      	ldr	r0, [r7, #4]
 8014182:	f004 fe31 	bl	8018de8 <USBD_LL_StallEP>
 8014186:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014188:	e040      	b.n	801420c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801418a:	6839      	ldr	r1, [r7, #0]
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f000 fc68 	bl	8014a62 <USBD_CtlError>
              break;
 8014192:	e03b      	b.n	801420c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014194:	683b      	ldr	r3, [r7, #0]
 8014196:	885b      	ldrh	r3, [r3, #2]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d136      	bne.n	801420a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801419c:	7bbb      	ldrb	r3, [r7, #14]
 801419e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d004      	beq.n	80141b0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80141a6:	7bbb      	ldrb	r3, [r7, #14]
 80141a8:	4619      	mov	r1, r3
 80141aa:	6878      	ldr	r0, [r7, #4]
 80141ac:	f004 fe3b 	bl	8018e26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f000 fd2d 	bl	8014c10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80141b6:	7bbb      	ldrb	r3, [r7, #14]
 80141b8:	4619      	mov	r1, r3
 80141ba:	6878      	ldr	r0, [r7, #4]
 80141bc:	f7ff fde4 	bl	8013d88 <USBD_CoreFindEP>
 80141c0:	4603      	mov	r3, r0
 80141c2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80141c4:	7b7b      	ldrb	r3, [r7, #13]
 80141c6:	2bff      	cmp	r3, #255	@ 0xff
 80141c8:	d01f      	beq.n	801420a <USBD_StdEPReq+0x1c6>
 80141ca:	7b7b      	ldrb	r3, [r7, #13]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d11c      	bne.n	801420a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80141d0:	7b7a      	ldrb	r2, [r7, #13]
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80141d8:	7b7a      	ldrb	r2, [r7, #13]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	32ae      	adds	r2, #174	@ 0xae
 80141de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141e2:	689b      	ldr	r3, [r3, #8]
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d010      	beq.n	801420a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80141e8:	7b7a      	ldrb	r2, [r7, #13]
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	32ae      	adds	r2, #174	@ 0xae
 80141ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141f2:	689b      	ldr	r3, [r3, #8]
 80141f4:	6839      	ldr	r1, [r7, #0]
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	4798      	blx	r3
 80141fa:	4603      	mov	r3, r0
 80141fc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80141fe:	e004      	b.n	801420a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014200:	6839      	ldr	r1, [r7, #0]
 8014202:	6878      	ldr	r0, [r7, #4]
 8014204:	f000 fc2d 	bl	8014a62 <USBD_CtlError>
              break;
 8014208:	e000      	b.n	801420c <USBD_StdEPReq+0x1c8>
              break;
 801420a:	bf00      	nop
          }
          break;
 801420c:	e0ab      	b.n	8014366 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014214:	b2db      	uxtb	r3, r3
 8014216:	2b02      	cmp	r3, #2
 8014218:	d002      	beq.n	8014220 <USBD_StdEPReq+0x1dc>
 801421a:	2b03      	cmp	r3, #3
 801421c:	d032      	beq.n	8014284 <USBD_StdEPReq+0x240>
 801421e:	e097      	b.n	8014350 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014220:	7bbb      	ldrb	r3, [r7, #14]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d007      	beq.n	8014236 <USBD_StdEPReq+0x1f2>
 8014226:	7bbb      	ldrb	r3, [r7, #14]
 8014228:	2b80      	cmp	r3, #128	@ 0x80
 801422a:	d004      	beq.n	8014236 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801422c:	6839      	ldr	r1, [r7, #0]
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f000 fc17 	bl	8014a62 <USBD_CtlError>
                break;
 8014234:	e091      	b.n	801435a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014236:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801423a:	2b00      	cmp	r3, #0
 801423c:	da0b      	bge.n	8014256 <USBD_StdEPReq+0x212>
 801423e:	7bbb      	ldrb	r3, [r7, #14]
 8014240:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014244:	4613      	mov	r3, r2
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	4413      	add	r3, r2
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	3310      	adds	r3, #16
 801424e:	687a      	ldr	r2, [r7, #4]
 8014250:	4413      	add	r3, r2
 8014252:	3304      	adds	r3, #4
 8014254:	e00b      	b.n	801426e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014256:	7bbb      	ldrb	r3, [r7, #14]
 8014258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801425c:	4613      	mov	r3, r2
 801425e:	009b      	lsls	r3, r3, #2
 8014260:	4413      	add	r3, r2
 8014262:	009b      	lsls	r3, r3, #2
 8014264:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014268:	687a      	ldr	r2, [r7, #4]
 801426a:	4413      	add	r3, r2
 801426c:	3304      	adds	r3, #4
 801426e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	2200      	movs	r2, #0
 8014274:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	2202      	movs	r2, #2
 801427a:	4619      	mov	r1, r3
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f000 fc6d 	bl	8014b5c <USBD_CtlSendData>
              break;
 8014282:	e06a      	b.n	801435a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014284:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014288:	2b00      	cmp	r3, #0
 801428a:	da11      	bge.n	80142b0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801428c:	7bbb      	ldrb	r3, [r7, #14]
 801428e:	f003 020f 	and.w	r2, r3, #15
 8014292:	6879      	ldr	r1, [r7, #4]
 8014294:	4613      	mov	r3, r2
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	4413      	add	r3, r2
 801429a:	009b      	lsls	r3, r3, #2
 801429c:	440b      	add	r3, r1
 801429e:	3324      	adds	r3, #36	@ 0x24
 80142a0:	881b      	ldrh	r3, [r3, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d117      	bne.n	80142d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80142a6:	6839      	ldr	r1, [r7, #0]
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f000 fbda 	bl	8014a62 <USBD_CtlError>
                  break;
 80142ae:	e054      	b.n	801435a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80142b0:	7bbb      	ldrb	r3, [r7, #14]
 80142b2:	f003 020f 	and.w	r2, r3, #15
 80142b6:	6879      	ldr	r1, [r7, #4]
 80142b8:	4613      	mov	r3, r2
 80142ba:	009b      	lsls	r3, r3, #2
 80142bc:	4413      	add	r3, r2
 80142be:	009b      	lsls	r3, r3, #2
 80142c0:	440b      	add	r3, r1
 80142c2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80142c6:	881b      	ldrh	r3, [r3, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d104      	bne.n	80142d6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80142cc:	6839      	ldr	r1, [r7, #0]
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f000 fbc7 	bl	8014a62 <USBD_CtlError>
                  break;
 80142d4:	e041      	b.n	801435a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	da0b      	bge.n	80142f6 <USBD_StdEPReq+0x2b2>
 80142de:	7bbb      	ldrb	r3, [r7, #14]
 80142e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80142e4:	4613      	mov	r3, r2
 80142e6:	009b      	lsls	r3, r3, #2
 80142e8:	4413      	add	r3, r2
 80142ea:	009b      	lsls	r3, r3, #2
 80142ec:	3310      	adds	r3, #16
 80142ee:	687a      	ldr	r2, [r7, #4]
 80142f0:	4413      	add	r3, r2
 80142f2:	3304      	adds	r3, #4
 80142f4:	e00b      	b.n	801430e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80142f6:	7bbb      	ldrb	r3, [r7, #14]
 80142f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80142fc:	4613      	mov	r3, r2
 80142fe:	009b      	lsls	r3, r3, #2
 8014300:	4413      	add	r3, r2
 8014302:	009b      	lsls	r3, r3, #2
 8014304:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014308:	687a      	ldr	r2, [r7, #4]
 801430a:	4413      	add	r3, r2
 801430c:	3304      	adds	r3, #4
 801430e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014310:	7bbb      	ldrb	r3, [r7, #14]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d002      	beq.n	801431c <USBD_StdEPReq+0x2d8>
 8014316:	7bbb      	ldrb	r3, [r7, #14]
 8014318:	2b80      	cmp	r3, #128	@ 0x80
 801431a:	d103      	bne.n	8014324 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	2200      	movs	r2, #0
 8014320:	601a      	str	r2, [r3, #0]
 8014322:	e00e      	b.n	8014342 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014324:	7bbb      	ldrb	r3, [r7, #14]
 8014326:	4619      	mov	r1, r3
 8014328:	6878      	ldr	r0, [r7, #4]
 801432a:	f004 fd9b 	bl	8018e64 <USBD_LL_IsStallEP>
 801432e:	4603      	mov	r3, r0
 8014330:	2b00      	cmp	r3, #0
 8014332:	d003      	beq.n	801433c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	2201      	movs	r2, #1
 8014338:	601a      	str	r2, [r3, #0]
 801433a:	e002      	b.n	8014342 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	2200      	movs	r2, #0
 8014340:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	2202      	movs	r2, #2
 8014346:	4619      	mov	r1, r3
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f000 fc07 	bl	8014b5c <USBD_CtlSendData>
              break;
 801434e:	e004      	b.n	801435a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014350:	6839      	ldr	r1, [r7, #0]
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f000 fb85 	bl	8014a62 <USBD_CtlError>
              break;
 8014358:	bf00      	nop
          }
          break;
 801435a:	e004      	b.n	8014366 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801435c:	6839      	ldr	r1, [r7, #0]
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f000 fb7f 	bl	8014a62 <USBD_CtlError>
          break;
 8014364:	bf00      	nop
      }
      break;
 8014366:	e005      	b.n	8014374 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014368:	6839      	ldr	r1, [r7, #0]
 801436a:	6878      	ldr	r0, [r7, #4]
 801436c:	f000 fb79 	bl	8014a62 <USBD_CtlError>
      break;
 8014370:	e000      	b.n	8014374 <USBD_StdEPReq+0x330>
      break;
 8014372:	bf00      	nop
  }

  return ret;
 8014374:	7bfb      	ldrb	r3, [r7, #15]
}
 8014376:	4618      	mov	r0, r3
 8014378:	3710      	adds	r7, #16
 801437a:	46bd      	mov	sp, r7
 801437c:	bd80      	pop	{r7, pc}
	...

08014380 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b084      	sub	sp, #16
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]
 8014388:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801438a:	2300      	movs	r3, #0
 801438c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801438e:	2300      	movs	r3, #0
 8014390:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014392:	2300      	movs	r3, #0
 8014394:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	885b      	ldrh	r3, [r3, #2]
 801439a:	0a1b      	lsrs	r3, r3, #8
 801439c:	b29b      	uxth	r3, r3
 801439e:	3b01      	subs	r3, #1
 80143a0:	2b0e      	cmp	r3, #14
 80143a2:	f200 8152 	bhi.w	801464a <USBD_GetDescriptor+0x2ca>
 80143a6:	a201      	add	r2, pc, #4	@ (adr r2, 80143ac <USBD_GetDescriptor+0x2c>)
 80143a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143ac:	0801441d 	.word	0x0801441d
 80143b0:	08014435 	.word	0x08014435
 80143b4:	08014475 	.word	0x08014475
 80143b8:	0801464b 	.word	0x0801464b
 80143bc:	0801464b 	.word	0x0801464b
 80143c0:	080145eb 	.word	0x080145eb
 80143c4:	08014617 	.word	0x08014617
 80143c8:	0801464b 	.word	0x0801464b
 80143cc:	0801464b 	.word	0x0801464b
 80143d0:	0801464b 	.word	0x0801464b
 80143d4:	0801464b 	.word	0x0801464b
 80143d8:	0801464b 	.word	0x0801464b
 80143dc:	0801464b 	.word	0x0801464b
 80143e0:	0801464b 	.word	0x0801464b
 80143e4:	080143e9 	.word	0x080143e9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143ee:	69db      	ldr	r3, [r3, #28]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d00b      	beq.n	801440c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80143fa:	69db      	ldr	r3, [r3, #28]
 80143fc:	687a      	ldr	r2, [r7, #4]
 80143fe:	7c12      	ldrb	r2, [r2, #16]
 8014400:	f107 0108 	add.w	r1, r7, #8
 8014404:	4610      	mov	r0, r2
 8014406:	4798      	blx	r3
 8014408:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801440a:	e126      	b.n	801465a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801440c:	6839      	ldr	r1, [r7, #0]
 801440e:	6878      	ldr	r0, [r7, #4]
 8014410:	f000 fb27 	bl	8014a62 <USBD_CtlError>
        err++;
 8014414:	7afb      	ldrb	r3, [r7, #11]
 8014416:	3301      	adds	r3, #1
 8014418:	72fb      	strb	r3, [r7, #11]
      break;
 801441a:	e11e      	b.n	801465a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	7c12      	ldrb	r2, [r2, #16]
 8014428:	f107 0108 	add.w	r1, r7, #8
 801442c:	4610      	mov	r0, r2
 801442e:	4798      	blx	r3
 8014430:	60f8      	str	r0, [r7, #12]
      break;
 8014432:	e112      	b.n	801465a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	7c1b      	ldrb	r3, [r3, #16]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d10d      	bne.n	8014458 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014444:	f107 0208 	add.w	r2, r7, #8
 8014448:	4610      	mov	r0, r2
 801444a:	4798      	blx	r3
 801444c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	3301      	adds	r3, #1
 8014452:	2202      	movs	r2, #2
 8014454:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014456:	e100      	b.n	801465a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014460:	f107 0208 	add.w	r2, r7, #8
 8014464:	4610      	mov	r0, r2
 8014466:	4798      	blx	r3
 8014468:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	3301      	adds	r3, #1
 801446e:	2202      	movs	r2, #2
 8014470:	701a      	strb	r2, [r3, #0]
      break;
 8014472:	e0f2      	b.n	801465a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	885b      	ldrh	r3, [r3, #2]
 8014478:	b2db      	uxtb	r3, r3
 801447a:	2b05      	cmp	r3, #5
 801447c:	f200 80ac 	bhi.w	80145d8 <USBD_GetDescriptor+0x258>
 8014480:	a201      	add	r2, pc, #4	@ (adr r2, 8014488 <USBD_GetDescriptor+0x108>)
 8014482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014486:	bf00      	nop
 8014488:	080144a1 	.word	0x080144a1
 801448c:	080144d5 	.word	0x080144d5
 8014490:	08014509 	.word	0x08014509
 8014494:	0801453d 	.word	0x0801453d
 8014498:	08014571 	.word	0x08014571
 801449c:	080145a5 	.word	0x080145a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144a6:	685b      	ldr	r3, [r3, #4]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d00b      	beq.n	80144c4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144b2:	685b      	ldr	r3, [r3, #4]
 80144b4:	687a      	ldr	r2, [r7, #4]
 80144b6:	7c12      	ldrb	r2, [r2, #16]
 80144b8:	f107 0108 	add.w	r1, r7, #8
 80144bc:	4610      	mov	r0, r2
 80144be:	4798      	blx	r3
 80144c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144c2:	e091      	b.n	80145e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80144c4:	6839      	ldr	r1, [r7, #0]
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f000 facb 	bl	8014a62 <USBD_CtlError>
            err++;
 80144cc:	7afb      	ldrb	r3, [r7, #11]
 80144ce:	3301      	adds	r3, #1
 80144d0:	72fb      	strb	r3, [r7, #11]
          break;
 80144d2:	e089      	b.n	80145e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144da:	689b      	ldr	r3, [r3, #8]
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d00b      	beq.n	80144f8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80144e6:	689b      	ldr	r3, [r3, #8]
 80144e8:	687a      	ldr	r2, [r7, #4]
 80144ea:	7c12      	ldrb	r2, [r2, #16]
 80144ec:	f107 0108 	add.w	r1, r7, #8
 80144f0:	4610      	mov	r0, r2
 80144f2:	4798      	blx	r3
 80144f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80144f6:	e077      	b.n	80145e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80144f8:	6839      	ldr	r1, [r7, #0]
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f000 fab1 	bl	8014a62 <USBD_CtlError>
            err++;
 8014500:	7afb      	ldrb	r3, [r7, #11]
 8014502:	3301      	adds	r3, #1
 8014504:	72fb      	strb	r3, [r7, #11]
          break;
 8014506:	e06f      	b.n	80145e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801450e:	68db      	ldr	r3, [r3, #12]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d00b      	beq.n	801452c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	687a      	ldr	r2, [r7, #4]
 801451e:	7c12      	ldrb	r2, [r2, #16]
 8014520:	f107 0108 	add.w	r1, r7, #8
 8014524:	4610      	mov	r0, r2
 8014526:	4798      	blx	r3
 8014528:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801452a:	e05d      	b.n	80145e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801452c:	6839      	ldr	r1, [r7, #0]
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f000 fa97 	bl	8014a62 <USBD_CtlError>
            err++;
 8014534:	7afb      	ldrb	r3, [r7, #11]
 8014536:	3301      	adds	r3, #1
 8014538:	72fb      	strb	r3, [r7, #11]
          break;
 801453a:	e055      	b.n	80145e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014542:	691b      	ldr	r3, [r3, #16]
 8014544:	2b00      	cmp	r3, #0
 8014546:	d00b      	beq.n	8014560 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801454e:	691b      	ldr	r3, [r3, #16]
 8014550:	687a      	ldr	r2, [r7, #4]
 8014552:	7c12      	ldrb	r2, [r2, #16]
 8014554:	f107 0108 	add.w	r1, r7, #8
 8014558:	4610      	mov	r0, r2
 801455a:	4798      	blx	r3
 801455c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801455e:	e043      	b.n	80145e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014560:	6839      	ldr	r1, [r7, #0]
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 fa7d 	bl	8014a62 <USBD_CtlError>
            err++;
 8014568:	7afb      	ldrb	r3, [r7, #11]
 801456a:	3301      	adds	r3, #1
 801456c:	72fb      	strb	r3, [r7, #11]
          break;
 801456e:	e03b      	b.n	80145e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014576:	695b      	ldr	r3, [r3, #20]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d00b      	beq.n	8014594 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014582:	695b      	ldr	r3, [r3, #20]
 8014584:	687a      	ldr	r2, [r7, #4]
 8014586:	7c12      	ldrb	r2, [r2, #16]
 8014588:	f107 0108 	add.w	r1, r7, #8
 801458c:	4610      	mov	r0, r2
 801458e:	4798      	blx	r3
 8014590:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014592:	e029      	b.n	80145e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014594:	6839      	ldr	r1, [r7, #0]
 8014596:	6878      	ldr	r0, [r7, #4]
 8014598:	f000 fa63 	bl	8014a62 <USBD_CtlError>
            err++;
 801459c:	7afb      	ldrb	r3, [r7, #11]
 801459e:	3301      	adds	r3, #1
 80145a0:	72fb      	strb	r3, [r7, #11]
          break;
 80145a2:	e021      	b.n	80145e8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145aa:	699b      	ldr	r3, [r3, #24]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d00b      	beq.n	80145c8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145b6:	699b      	ldr	r3, [r3, #24]
 80145b8:	687a      	ldr	r2, [r7, #4]
 80145ba:	7c12      	ldrb	r2, [r2, #16]
 80145bc:	f107 0108 	add.w	r1, r7, #8
 80145c0:	4610      	mov	r0, r2
 80145c2:	4798      	blx	r3
 80145c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145c6:	e00f      	b.n	80145e8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80145c8:	6839      	ldr	r1, [r7, #0]
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f000 fa49 	bl	8014a62 <USBD_CtlError>
            err++;
 80145d0:	7afb      	ldrb	r3, [r7, #11]
 80145d2:	3301      	adds	r3, #1
 80145d4:	72fb      	strb	r3, [r7, #11]
          break;
 80145d6:	e007      	b.n	80145e8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80145d8:	6839      	ldr	r1, [r7, #0]
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f000 fa41 	bl	8014a62 <USBD_CtlError>
          err++;
 80145e0:	7afb      	ldrb	r3, [r7, #11]
 80145e2:	3301      	adds	r3, #1
 80145e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80145e6:	bf00      	nop
      }
      break;
 80145e8:	e037      	b.n	801465a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	7c1b      	ldrb	r3, [r3, #16]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d109      	bne.n	8014606 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80145f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80145fa:	f107 0208 	add.w	r2, r7, #8
 80145fe:	4610      	mov	r0, r2
 8014600:	4798      	blx	r3
 8014602:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014604:	e029      	b.n	801465a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014606:	6839      	ldr	r1, [r7, #0]
 8014608:	6878      	ldr	r0, [r7, #4]
 801460a:	f000 fa2a 	bl	8014a62 <USBD_CtlError>
        err++;
 801460e:	7afb      	ldrb	r3, [r7, #11]
 8014610:	3301      	adds	r3, #1
 8014612:	72fb      	strb	r3, [r7, #11]
      break;
 8014614:	e021      	b.n	801465a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	7c1b      	ldrb	r3, [r3, #16]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d10d      	bne.n	801463a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014626:	f107 0208 	add.w	r2, r7, #8
 801462a:	4610      	mov	r0, r2
 801462c:	4798      	blx	r3
 801462e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	3301      	adds	r3, #1
 8014634:	2207      	movs	r2, #7
 8014636:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014638:	e00f      	b.n	801465a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801463a:	6839      	ldr	r1, [r7, #0]
 801463c:	6878      	ldr	r0, [r7, #4]
 801463e:	f000 fa10 	bl	8014a62 <USBD_CtlError>
        err++;
 8014642:	7afb      	ldrb	r3, [r7, #11]
 8014644:	3301      	adds	r3, #1
 8014646:	72fb      	strb	r3, [r7, #11]
      break;
 8014648:	e007      	b.n	801465a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801464a:	6839      	ldr	r1, [r7, #0]
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f000 fa08 	bl	8014a62 <USBD_CtlError>
      err++;
 8014652:	7afb      	ldrb	r3, [r7, #11]
 8014654:	3301      	adds	r3, #1
 8014656:	72fb      	strb	r3, [r7, #11]
      break;
 8014658:	bf00      	nop
  }

  if (err != 0U)
 801465a:	7afb      	ldrb	r3, [r7, #11]
 801465c:	2b00      	cmp	r3, #0
 801465e:	d11e      	bne.n	801469e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	88db      	ldrh	r3, [r3, #6]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d016      	beq.n	8014696 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014668:	893b      	ldrh	r3, [r7, #8]
 801466a:	2b00      	cmp	r3, #0
 801466c:	d00e      	beq.n	801468c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	88da      	ldrh	r2, [r3, #6]
 8014672:	893b      	ldrh	r3, [r7, #8]
 8014674:	4293      	cmp	r3, r2
 8014676:	bf28      	it	cs
 8014678:	4613      	movcs	r3, r2
 801467a:	b29b      	uxth	r3, r3
 801467c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801467e:	893b      	ldrh	r3, [r7, #8]
 8014680:	461a      	mov	r2, r3
 8014682:	68f9      	ldr	r1, [r7, #12]
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f000 fa69 	bl	8014b5c <USBD_CtlSendData>
 801468a:	e009      	b.n	80146a0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801468c:	6839      	ldr	r1, [r7, #0]
 801468e:	6878      	ldr	r0, [r7, #4]
 8014690:	f000 f9e7 	bl	8014a62 <USBD_CtlError>
 8014694:	e004      	b.n	80146a0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014696:	6878      	ldr	r0, [r7, #4]
 8014698:	f000 faba 	bl	8014c10 <USBD_CtlSendStatus>
 801469c:	e000      	b.n	80146a0 <USBD_GetDescriptor+0x320>
    return;
 801469e:	bf00      	nop
  }
}
 80146a0:	3710      	adds	r7, #16
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop

080146a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b084      	sub	sp, #16
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	889b      	ldrh	r3, [r3, #4]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d131      	bne.n	801471e <USBD_SetAddress+0x76>
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	88db      	ldrh	r3, [r3, #6]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d12d      	bne.n	801471e <USBD_SetAddress+0x76>
 80146c2:	683b      	ldr	r3, [r7, #0]
 80146c4:	885b      	ldrh	r3, [r3, #2]
 80146c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80146c8:	d829      	bhi.n	801471e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80146ca:	683b      	ldr	r3, [r7, #0]
 80146cc:	885b      	ldrh	r3, [r3, #2]
 80146ce:	b2db      	uxtb	r3, r3
 80146d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80146d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	2b03      	cmp	r3, #3
 80146e0:	d104      	bne.n	80146ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80146e2:	6839      	ldr	r1, [r7, #0]
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f000 f9bc 	bl	8014a62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146ea:	e01d      	b.n	8014728 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	7bfa      	ldrb	r2, [r7, #15]
 80146f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80146f4:	7bfb      	ldrb	r3, [r7, #15]
 80146f6:	4619      	mov	r1, r3
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f004 fbdf 	bl	8018ebc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80146fe:	6878      	ldr	r0, [r7, #4]
 8014700:	f000 fa86 	bl	8014c10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014704:	7bfb      	ldrb	r3, [r7, #15]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d004      	beq.n	8014714 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2202      	movs	r2, #2
 801470e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014712:	e009      	b.n	8014728 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2201      	movs	r2, #1
 8014718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801471c:	e004      	b.n	8014728 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801471e:	6839      	ldr	r1, [r7, #0]
 8014720:	6878      	ldr	r0, [r7, #4]
 8014722:	f000 f99e 	bl	8014a62 <USBD_CtlError>
  }
}
 8014726:	bf00      	nop
 8014728:	bf00      	nop
 801472a:	3710      	adds	r7, #16
 801472c:	46bd      	mov	sp, r7
 801472e:	bd80      	pop	{r7, pc}

08014730 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b084      	sub	sp, #16
 8014734:	af00      	add	r7, sp, #0
 8014736:	6078      	str	r0, [r7, #4]
 8014738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801473a:	2300      	movs	r3, #0
 801473c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	885b      	ldrh	r3, [r3, #2]
 8014742:	b2da      	uxtb	r2, r3
 8014744:	4b4e      	ldr	r3, [pc, #312]	@ (8014880 <USBD_SetConfig+0x150>)
 8014746:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014748:	4b4d      	ldr	r3, [pc, #308]	@ (8014880 <USBD_SetConfig+0x150>)
 801474a:	781b      	ldrb	r3, [r3, #0]
 801474c:	2b01      	cmp	r3, #1
 801474e:	d905      	bls.n	801475c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014750:	6839      	ldr	r1, [r7, #0]
 8014752:	6878      	ldr	r0, [r7, #4]
 8014754:	f000 f985 	bl	8014a62 <USBD_CtlError>
    return USBD_FAIL;
 8014758:	2303      	movs	r3, #3
 801475a:	e08c      	b.n	8014876 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014762:	b2db      	uxtb	r3, r3
 8014764:	2b02      	cmp	r3, #2
 8014766:	d002      	beq.n	801476e <USBD_SetConfig+0x3e>
 8014768:	2b03      	cmp	r3, #3
 801476a:	d029      	beq.n	80147c0 <USBD_SetConfig+0x90>
 801476c:	e075      	b.n	801485a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801476e:	4b44      	ldr	r3, [pc, #272]	@ (8014880 <USBD_SetConfig+0x150>)
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d020      	beq.n	80147b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014776:	4b42      	ldr	r3, [pc, #264]	@ (8014880 <USBD_SetConfig+0x150>)
 8014778:	781b      	ldrb	r3, [r3, #0]
 801477a:	461a      	mov	r2, r3
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014780:	4b3f      	ldr	r3, [pc, #252]	@ (8014880 <USBD_SetConfig+0x150>)
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	4619      	mov	r1, r3
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f7ff f84b 	bl	8013822 <USBD_SetClassConfig>
 801478c:	4603      	mov	r3, r0
 801478e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014790:	7bfb      	ldrb	r3, [r7, #15]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d008      	beq.n	80147a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014796:	6839      	ldr	r1, [r7, #0]
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f000 f962 	bl	8014a62 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	2202      	movs	r2, #2
 80147a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80147a6:	e065      	b.n	8014874 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f000 fa31 	bl	8014c10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2203      	movs	r2, #3
 80147b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80147b6:	e05d      	b.n	8014874 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f000 fa29 	bl	8014c10 <USBD_CtlSendStatus>
      break;
 80147be:	e059      	b.n	8014874 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80147c0:	4b2f      	ldr	r3, [pc, #188]	@ (8014880 <USBD_SetConfig+0x150>)
 80147c2:	781b      	ldrb	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d112      	bne.n	80147ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2202      	movs	r2, #2
 80147cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80147d0:	4b2b      	ldr	r3, [pc, #172]	@ (8014880 <USBD_SetConfig+0x150>)
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	461a      	mov	r2, r3
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80147da:	4b29      	ldr	r3, [pc, #164]	@ (8014880 <USBD_SetConfig+0x150>)
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	4619      	mov	r1, r3
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f7ff f83a 	bl	801385a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f000 fa12 	bl	8014c10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80147ec:	e042      	b.n	8014874 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80147ee:	4b24      	ldr	r3, [pc, #144]	@ (8014880 <USBD_SetConfig+0x150>)
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	461a      	mov	r2, r3
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	685b      	ldr	r3, [r3, #4]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d02a      	beq.n	8014852 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	b2db      	uxtb	r3, r3
 8014802:	4619      	mov	r1, r3
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f7ff f828 	bl	801385a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801480a:	4b1d      	ldr	r3, [pc, #116]	@ (8014880 <USBD_SetConfig+0x150>)
 801480c:	781b      	ldrb	r3, [r3, #0]
 801480e:	461a      	mov	r2, r3
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014814:	4b1a      	ldr	r3, [pc, #104]	@ (8014880 <USBD_SetConfig+0x150>)
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	4619      	mov	r1, r3
 801481a:	6878      	ldr	r0, [r7, #4]
 801481c:	f7ff f801 	bl	8013822 <USBD_SetClassConfig>
 8014820:	4603      	mov	r3, r0
 8014822:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014824:	7bfb      	ldrb	r3, [r7, #15]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d00f      	beq.n	801484a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801482a:	6839      	ldr	r1, [r7, #0]
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f000 f918 	bl	8014a62 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	b2db      	uxtb	r3, r3
 8014838:	4619      	mov	r1, r3
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f7ff f80d 	bl	801385a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2202      	movs	r2, #2
 8014844:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014848:	e014      	b.n	8014874 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801484a:	6878      	ldr	r0, [r7, #4]
 801484c:	f000 f9e0 	bl	8014c10 <USBD_CtlSendStatus>
      break;
 8014850:	e010      	b.n	8014874 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 f9dc 	bl	8014c10 <USBD_CtlSendStatus>
      break;
 8014858:	e00c      	b.n	8014874 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801485a:	6839      	ldr	r1, [r7, #0]
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f000 f900 	bl	8014a62 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014862:	4b07      	ldr	r3, [pc, #28]	@ (8014880 <USBD_SetConfig+0x150>)
 8014864:	781b      	ldrb	r3, [r3, #0]
 8014866:	4619      	mov	r1, r3
 8014868:	6878      	ldr	r0, [r7, #4]
 801486a:	f7fe fff6 	bl	801385a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801486e:	2303      	movs	r3, #3
 8014870:	73fb      	strb	r3, [r7, #15]
      break;
 8014872:	bf00      	nop
  }

  return ret;
 8014874:	7bfb      	ldrb	r3, [r7, #15]
}
 8014876:	4618      	mov	r0, r3
 8014878:	3710      	adds	r7, #16
 801487a:	46bd      	mov	sp, r7
 801487c:	bd80      	pop	{r7, pc}
 801487e:	bf00      	nop
 8014880:	20001474 	.word	0x20001474

08014884 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014884:	b580      	push	{r7, lr}
 8014886:	b082      	sub	sp, #8
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	88db      	ldrh	r3, [r3, #6]
 8014892:	2b01      	cmp	r3, #1
 8014894:	d004      	beq.n	80148a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014896:	6839      	ldr	r1, [r7, #0]
 8014898:	6878      	ldr	r0, [r7, #4]
 801489a:	f000 f8e2 	bl	8014a62 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801489e:	e023      	b.n	80148e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80148a6:	b2db      	uxtb	r3, r3
 80148a8:	2b02      	cmp	r3, #2
 80148aa:	dc02      	bgt.n	80148b2 <USBD_GetConfig+0x2e>
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	dc03      	bgt.n	80148b8 <USBD_GetConfig+0x34>
 80148b0:	e015      	b.n	80148de <USBD_GetConfig+0x5a>
 80148b2:	2b03      	cmp	r3, #3
 80148b4:	d00b      	beq.n	80148ce <USBD_GetConfig+0x4a>
 80148b6:	e012      	b.n	80148de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	2200      	movs	r2, #0
 80148bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	3308      	adds	r3, #8
 80148c2:	2201      	movs	r2, #1
 80148c4:	4619      	mov	r1, r3
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f000 f948 	bl	8014b5c <USBD_CtlSendData>
        break;
 80148cc:	e00c      	b.n	80148e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	3304      	adds	r3, #4
 80148d2:	2201      	movs	r2, #1
 80148d4:	4619      	mov	r1, r3
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f000 f940 	bl	8014b5c <USBD_CtlSendData>
        break;
 80148dc:	e004      	b.n	80148e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80148de:	6839      	ldr	r1, [r7, #0]
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f000 f8be 	bl	8014a62 <USBD_CtlError>
        break;
 80148e6:	bf00      	nop
}
 80148e8:	bf00      	nop
 80148ea:	3708      	adds	r7, #8
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd80      	pop	{r7, pc}

080148f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148f0:	b580      	push	{r7, lr}
 80148f2:	b082      	sub	sp, #8
 80148f4:	af00      	add	r7, sp, #0
 80148f6:	6078      	str	r0, [r7, #4]
 80148f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014900:	b2db      	uxtb	r3, r3
 8014902:	3b01      	subs	r3, #1
 8014904:	2b02      	cmp	r3, #2
 8014906:	d81e      	bhi.n	8014946 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	88db      	ldrh	r3, [r3, #6]
 801490c:	2b02      	cmp	r3, #2
 801490e:	d004      	beq.n	801491a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014910:	6839      	ldr	r1, [r7, #0]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f000 f8a5 	bl	8014a62 <USBD_CtlError>
        break;
 8014918:	e01a      	b.n	8014950 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	2201      	movs	r2, #1
 801491e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014926:	2b00      	cmp	r3, #0
 8014928:	d005      	beq.n	8014936 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	68db      	ldr	r3, [r3, #12]
 801492e:	f043 0202 	orr.w	r2, r3, #2
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	330c      	adds	r3, #12
 801493a:	2202      	movs	r2, #2
 801493c:	4619      	mov	r1, r3
 801493e:	6878      	ldr	r0, [r7, #4]
 8014940:	f000 f90c 	bl	8014b5c <USBD_CtlSendData>
      break;
 8014944:	e004      	b.n	8014950 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014946:	6839      	ldr	r1, [r7, #0]
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f000 f88a 	bl	8014a62 <USBD_CtlError>
      break;
 801494e:	bf00      	nop
  }
}
 8014950:	bf00      	nop
 8014952:	3708      	adds	r7, #8
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	b082      	sub	sp, #8
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	885b      	ldrh	r3, [r3, #2]
 8014966:	2b01      	cmp	r3, #1
 8014968:	d107      	bne.n	801497a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	2201      	movs	r2, #1
 801496e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014972:	6878      	ldr	r0, [r7, #4]
 8014974:	f000 f94c 	bl	8014c10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014978:	e013      	b.n	80149a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	885b      	ldrh	r3, [r3, #2]
 801497e:	2b02      	cmp	r3, #2
 8014980:	d10b      	bne.n	801499a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	889b      	ldrh	r3, [r3, #4]
 8014986:	0a1b      	lsrs	r3, r3, #8
 8014988:	b29b      	uxth	r3, r3
 801498a:	b2da      	uxtb	r2, r3
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f000 f93c 	bl	8014c10 <USBD_CtlSendStatus>
}
 8014998:	e003      	b.n	80149a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801499a:	6839      	ldr	r1, [r7, #0]
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f000 f860 	bl	8014a62 <USBD_CtlError>
}
 80149a2:	bf00      	nop
 80149a4:	3708      	adds	r7, #8
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bd80      	pop	{r7, pc}

080149aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149aa:	b580      	push	{r7, lr}
 80149ac:	b082      	sub	sp, #8
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	6078      	str	r0, [r7, #4]
 80149b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80149ba:	b2db      	uxtb	r3, r3
 80149bc:	3b01      	subs	r3, #1
 80149be:	2b02      	cmp	r3, #2
 80149c0:	d80b      	bhi.n	80149da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	885b      	ldrh	r3, [r3, #2]
 80149c6:	2b01      	cmp	r3, #1
 80149c8:	d10c      	bne.n	80149e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	2200      	movs	r2, #0
 80149ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f000 f91c 	bl	8014c10 <USBD_CtlSendStatus>
      }
      break;
 80149d8:	e004      	b.n	80149e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80149da:	6839      	ldr	r1, [r7, #0]
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f000 f840 	bl	8014a62 <USBD_CtlError>
      break;
 80149e2:	e000      	b.n	80149e6 <USBD_ClrFeature+0x3c>
      break;
 80149e4:	bf00      	nop
  }
}
 80149e6:	bf00      	nop
 80149e8:	3708      	adds	r7, #8
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}

080149ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80149ee:	b580      	push	{r7, lr}
 80149f0:	b084      	sub	sp, #16
 80149f2:	af00      	add	r7, sp, #0
 80149f4:	6078      	str	r0, [r7, #4]
 80149f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80149f8:	683b      	ldr	r3, [r7, #0]
 80149fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	781a      	ldrb	r2, [r3, #0]
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014a04:	68fb      	ldr	r3, [r7, #12]
 8014a06:	3301      	adds	r3, #1
 8014a08:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014a0a:	68fb      	ldr	r3, [r7, #12]
 8014a0c:	781a      	ldrb	r2, [r3, #0]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	3301      	adds	r3, #1
 8014a16:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f7ff fa16 	bl	8013e4a <SWAPBYTE>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	461a      	mov	r2, r3
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	3301      	adds	r3, #1
 8014a2a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	3301      	adds	r3, #1
 8014a30:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014a32:	68f8      	ldr	r0, [r7, #12]
 8014a34:	f7ff fa09 	bl	8013e4a <SWAPBYTE>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	3301      	adds	r3, #1
 8014a44:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	3301      	adds	r3, #1
 8014a4a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014a4c:	68f8      	ldr	r0, [r7, #12]
 8014a4e:	f7ff f9fc 	bl	8013e4a <SWAPBYTE>
 8014a52:	4603      	mov	r3, r0
 8014a54:	461a      	mov	r2, r3
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	80da      	strh	r2, [r3, #6]
}
 8014a5a:	bf00      	nop
 8014a5c:	3710      	adds	r7, #16
 8014a5e:	46bd      	mov	sp, r7
 8014a60:	bd80      	pop	{r7, pc}

08014a62 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a62:	b580      	push	{r7, lr}
 8014a64:	b082      	sub	sp, #8
 8014a66:	af00      	add	r7, sp, #0
 8014a68:	6078      	str	r0, [r7, #4]
 8014a6a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014a6c:	2180      	movs	r1, #128	@ 0x80
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f004 f9ba 	bl	8018de8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014a74:	2100      	movs	r1, #0
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f004 f9b6 	bl	8018de8 <USBD_LL_StallEP>
}
 8014a7c:	bf00      	nop
 8014a7e:	3708      	adds	r7, #8
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}

08014a84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b086      	sub	sp, #24
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014a90:	2300      	movs	r3, #0
 8014a92:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d042      	beq.n	8014b20 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014a9e:	6938      	ldr	r0, [r7, #16]
 8014aa0:	f000 f842 	bl	8014b28 <USBD_GetLen>
 8014aa4:	4603      	mov	r3, r0
 8014aa6:	3301      	adds	r3, #1
 8014aa8:	005b      	lsls	r3, r3, #1
 8014aaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014aae:	d808      	bhi.n	8014ac2 <USBD_GetString+0x3e>
 8014ab0:	6938      	ldr	r0, [r7, #16]
 8014ab2:	f000 f839 	bl	8014b28 <USBD_GetLen>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	3301      	adds	r3, #1
 8014aba:	b29b      	uxth	r3, r3
 8014abc:	005b      	lsls	r3, r3, #1
 8014abe:	b29a      	uxth	r2, r3
 8014ac0:	e001      	b.n	8014ac6 <USBD_GetString+0x42>
 8014ac2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014aca:	7dfb      	ldrb	r3, [r7, #23]
 8014acc:	68ba      	ldr	r2, [r7, #8]
 8014ace:	4413      	add	r3, r2
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	7812      	ldrb	r2, [r2, #0]
 8014ad4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ad6:	7dfb      	ldrb	r3, [r7, #23]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014adc:	7dfb      	ldrb	r3, [r7, #23]
 8014ade:	68ba      	ldr	r2, [r7, #8]
 8014ae0:	4413      	add	r3, r2
 8014ae2:	2203      	movs	r2, #3
 8014ae4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ae6:	7dfb      	ldrb	r3, [r7, #23]
 8014ae8:	3301      	adds	r3, #1
 8014aea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014aec:	e013      	b.n	8014b16 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014aee:	7dfb      	ldrb	r3, [r7, #23]
 8014af0:	68ba      	ldr	r2, [r7, #8]
 8014af2:	4413      	add	r3, r2
 8014af4:	693a      	ldr	r2, [r7, #16]
 8014af6:	7812      	ldrb	r2, [r2, #0]
 8014af8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014afa:	693b      	ldr	r3, [r7, #16]
 8014afc:	3301      	adds	r3, #1
 8014afe:	613b      	str	r3, [r7, #16]
    idx++;
 8014b00:	7dfb      	ldrb	r3, [r7, #23]
 8014b02:	3301      	adds	r3, #1
 8014b04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014b06:	7dfb      	ldrb	r3, [r7, #23]
 8014b08:	68ba      	ldr	r2, [r7, #8]
 8014b0a:	4413      	add	r3, r2
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014b10:	7dfb      	ldrb	r3, [r7, #23]
 8014b12:	3301      	adds	r3, #1
 8014b14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	781b      	ldrb	r3, [r3, #0]
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d1e7      	bne.n	8014aee <USBD_GetString+0x6a>
 8014b1e:	e000      	b.n	8014b22 <USBD_GetString+0x9e>
    return;
 8014b20:	bf00      	nop
  }
}
 8014b22:	3718      	adds	r7, #24
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd80      	pop	{r7, pc}

08014b28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b085      	sub	sp, #20
 8014b2c:	af00      	add	r7, sp, #0
 8014b2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014b30:	2300      	movs	r3, #0
 8014b32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014b38:	e005      	b.n	8014b46 <USBD_GetLen+0x1e>
  {
    len++;
 8014b3a:	7bfb      	ldrb	r3, [r7, #15]
 8014b3c:	3301      	adds	r3, #1
 8014b3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014b40:	68bb      	ldr	r3, [r7, #8]
 8014b42:	3301      	adds	r3, #1
 8014b44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d1f5      	bne.n	8014b3a <USBD_GetLen+0x12>
  }

  return len;
 8014b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3714      	adds	r7, #20
 8014b54:	46bd      	mov	sp, r7
 8014b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5a:	4770      	bx	lr

08014b5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b084      	sub	sp, #16
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	60b9      	str	r1, [r7, #8]
 8014b66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2202      	movs	r2, #2
 8014b6c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	687a      	ldr	r2, [r7, #4]
 8014b74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	687a      	ldr	r2, [r7, #4]
 8014b7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	68ba      	ldr	r2, [r7, #8]
 8014b80:	2100      	movs	r1, #0
 8014b82:	68f8      	ldr	r0, [r7, #12]
 8014b84:	f004 f9b9 	bl	8018efa <USBD_LL_Transmit>

  return USBD_OK;
 8014b88:	2300      	movs	r3, #0
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	3710      	adds	r7, #16
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}

08014b92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014b92:	b580      	push	{r7, lr}
 8014b94:	b084      	sub	sp, #16
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	60f8      	str	r0, [r7, #12]
 8014b9a:	60b9      	str	r1, [r7, #8]
 8014b9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	68ba      	ldr	r2, [r7, #8]
 8014ba2:	2100      	movs	r1, #0
 8014ba4:	68f8      	ldr	r0, [r7, #12]
 8014ba6:	f004 f9a8 	bl	8018efa <USBD_LL_Transmit>

  return USBD_OK;
 8014baa:	2300      	movs	r3, #0
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3710      	adds	r7, #16
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b084      	sub	sp, #16
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	60f8      	str	r0, [r7, #12]
 8014bbc:	60b9      	str	r1, [r7, #8]
 8014bbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	2203      	movs	r2, #3
 8014bc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	687a      	ldr	r2, [r7, #4]
 8014bcc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	687a      	ldr	r2, [r7, #4]
 8014bd4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	68ba      	ldr	r2, [r7, #8]
 8014bdc:	2100      	movs	r1, #0
 8014bde:	68f8      	ldr	r0, [r7, #12]
 8014be0:	f004 f9ac 	bl	8018f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014be4:	2300      	movs	r3, #0
}
 8014be6:	4618      	mov	r0, r3
 8014be8:	3710      	adds	r7, #16
 8014bea:	46bd      	mov	sp, r7
 8014bec:	bd80      	pop	{r7, pc}

08014bee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014bee:	b580      	push	{r7, lr}
 8014bf0:	b084      	sub	sp, #16
 8014bf2:	af00      	add	r7, sp, #0
 8014bf4:	60f8      	str	r0, [r7, #12]
 8014bf6:	60b9      	str	r1, [r7, #8]
 8014bf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	68ba      	ldr	r2, [r7, #8]
 8014bfe:	2100      	movs	r1, #0
 8014c00:	68f8      	ldr	r0, [r7, #12]
 8014c02:	f004 f99b 	bl	8018f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014c06:	2300      	movs	r3, #0
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3710      	adds	r7, #16
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	2204      	movs	r2, #4
 8014c1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014c20:	2300      	movs	r3, #0
 8014c22:	2200      	movs	r2, #0
 8014c24:	2100      	movs	r1, #0
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f004 f967 	bl	8018efa <USBD_LL_Transmit>

  return USBD_OK;
 8014c2c:	2300      	movs	r3, #0
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	3708      	adds	r7, #8
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bd80      	pop	{r7, pc}

08014c36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014c36:	b580      	push	{r7, lr}
 8014c38:	b082      	sub	sp, #8
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2205      	movs	r2, #5
 8014c42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014c46:	2300      	movs	r3, #0
 8014c48:	2200      	movs	r2, #0
 8014c4a:	2100      	movs	r1, #0
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f004 f975 	bl	8018f3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014c52:	2300      	movs	r3, #0
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3708      	adds	r7, #8
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b088      	sub	sp, #32
 8014c60:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014c62:	2300      	movs	r3, #0
 8014c64:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014c66:	f107 0308 	add.w	r3, r7, #8
 8014c6a:	2218      	movs	r2, #24
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f001 f92d 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8014c74:	233f      	movs	r3, #63	@ 0x3f
 8014c76:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014c78:	2381      	movs	r3, #129	@ 0x81
 8014c7a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014c7c:	1dfb      	adds	r3, r7, #7
 8014c7e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014c80:	2301      	movs	r3, #1
 8014c82:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014c84:	f107 0308 	add.w	r3, r7, #8
 8014c88:	2100      	movs	r1, #0
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f001 fba8 	bl	80163e0 <hci_send_req>
 8014c90:	4603      	mov	r3, r0
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	da01      	bge.n	8014c9a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014c96:	23ff      	movs	r3, #255	@ 0xff
 8014c98:	e000      	b.n	8014c9c <aci_gap_set_non_discoverable+0x40>
  return status;
 8014c9a:	79fb      	ldrb	r3, [r7, #7]
}
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	3720      	adds	r7, #32
 8014ca0:	46bd      	mov	sp, r7
 8014ca2:	bd80      	pop	{r7, pc}

08014ca4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014ca4:	b5b0      	push	{r4, r5, r7, lr}
 8014ca6:	b0ce      	sub	sp, #312	@ 0x138
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	4605      	mov	r5, r0
 8014cac:	460c      	mov	r4, r1
 8014cae:	4610      	mov	r0, r2
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cb6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014cba:	462a      	mov	r2, r5
 8014cbc:	701a      	strb	r2, [r3, #0]
 8014cbe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cc2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014cc6:	4622      	mov	r2, r4
 8014cc8:	801a      	strh	r2, [r3, #0]
 8014cca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cce:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8014cd2:	4602      	mov	r2, r0
 8014cd4:	801a      	strh	r2, [r3, #0]
 8014cd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014cda:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014cde:	460a      	mov	r2, r1
 8014ce0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014ce2:	f107 0310 	add.w	r3, r7, #16
 8014ce6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014cea:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014cee:	3308      	adds	r3, #8
 8014cf0:	f107 0210 	add.w	r2, r7, #16
 8014cf4:	4413      	add	r3, r2
 8014cf6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014cfa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014cfe:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014d02:	4413      	add	r3, r2
 8014d04:	3309      	adds	r3, #9
 8014d06:	f107 0210 	add.w	r2, r7, #16
 8014d0a:	4413      	add	r3, r2
 8014d0c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014d14:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014d18:	2200      	movs	r2, #0
 8014d1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014d22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d26:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014d2a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014d2e:	7812      	ldrb	r2, [r2, #0]
 8014d30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014d32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d36:	3301      	adds	r3, #1
 8014d38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014d3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d40:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014d44:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8014d48:	8812      	ldrh	r2, [r2, #0]
 8014d4a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d52:	3302      	adds	r3, #2
 8014d54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014d58:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d5c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014d60:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8014d64:	8812      	ldrh	r2, [r2, #0]
 8014d66:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d6e:	3302      	adds	r3, #2
 8014d70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014d74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d78:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014d7c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014d80:	7812      	ldrb	r2, [r2, #0]
 8014d82:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d88:	3301      	adds	r3, #1
 8014d8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014d92:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014d96:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014da6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014daa:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014db0:	3301      	adds	r3, #1
 8014db2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014db6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014dba:	3308      	adds	r3, #8
 8014dbc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014dc0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	f001 f872 	bl	8015eae <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014dca:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014dce:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014dd2:	4413      	add	r3, r2
 8014dd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8014dd8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014ddc:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014de0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014de6:	3301      	adds	r3, #1
 8014de8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8014dec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014df0:	3301      	adds	r3, #1
 8014df2:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014df6:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	f001 f857 	bl	8015eae <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8014e00:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014e04:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014e08:	4413      	add	r3, r2
 8014e0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8014e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e12:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8014e16:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e1c:	3302      	adds	r3, #2
 8014e1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8014e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014e26:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8014e2a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014e2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e30:	3302      	adds	r3, #2
 8014e32:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e3a:	2218      	movs	r2, #24
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	4618      	mov	r0, r3
 8014e40:	f001 f845 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8014e44:	233f      	movs	r3, #63	@ 0x3f
 8014e46:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8014e4a:	2383      	movs	r3, #131	@ 0x83
 8014e4c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014e50:	f107 0310 	add.w	r3, r7, #16
 8014e54:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014e58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e5c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014e60:	f107 030f 	add.w	r3, r7, #15
 8014e64:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014e68:	2301      	movs	r3, #1
 8014e6a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014e6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014e72:	2100      	movs	r1, #0
 8014e74:	4618      	mov	r0, r3
 8014e76:	f001 fab3 	bl	80163e0 <hci_send_req>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	da01      	bge.n	8014e84 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8014e80:	23ff      	movs	r3, #255	@ 0xff
 8014e82:	e004      	b.n	8014e8e <aci_gap_set_discoverable+0x1ea>
  return status;
 8014e84:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e88:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014e8c:	781b      	ldrb	r3, [r3, #0]
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8014e94:	46bd      	mov	sp, r7
 8014e96:	bdb0      	pop	{r4, r5, r7, pc}

08014e98 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b0cc      	sub	sp, #304	@ 0x130
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	4602      	mov	r2, r0
 8014ea0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ea4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014ea8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8014eaa:	f107 0310 	add.w	r3, r7, #16
 8014eae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014eb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014eb6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014eba:	2200      	movs	r2, #0
 8014ebc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8014ec4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014ec8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014ecc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014ed0:	7812      	ldrb	r2, [r2, #0]
 8014ed2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014ed4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ed8:	3301      	adds	r3, #1
 8014eda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014ede:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014ee2:	2218      	movs	r2, #24
 8014ee4:	2100      	movs	r1, #0
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	f000 fff1 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8014eec:	233f      	movs	r3, #63	@ 0x3f
 8014eee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8014ef2:	2385      	movs	r3, #133	@ 0x85
 8014ef4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014ef8:	f107 0310 	add.w	r3, r7, #16
 8014efc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f04:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014f08:	f107 030f 	add.w	r3, r7, #15
 8014f0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014f10:	2301      	movs	r3, #1
 8014f12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f1a:	2100      	movs	r1, #0
 8014f1c:	4618      	mov	r0, r3
 8014f1e:	f001 fa5f 	bl	80163e0 <hci_send_req>
 8014f22:	4603      	mov	r3, r0
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	da01      	bge.n	8014f2c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8014f28:	23ff      	movs	r3, #255	@ 0xff
 8014f2a:	e004      	b.n	8014f36 <aci_gap_set_io_capability+0x9e>
  return status;
 8014f2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f30:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014f34:	781b      	ldrb	r3, [r3, #0]
}
 8014f36:	4618      	mov	r0, r3
 8014f38:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}

08014f40 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8014f40:	b5b0      	push	{r4, r5, r7, lr}
 8014f42:	b0cc      	sub	sp, #304	@ 0x130
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	4605      	mov	r5, r0
 8014f48:	460c      	mov	r4, r1
 8014f4a:	4610      	mov	r0, r2
 8014f4c:	4619      	mov	r1, r3
 8014f4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f52:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014f56:	462a      	mov	r2, r5
 8014f58:	701a      	strb	r2, [r3, #0]
 8014f5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f5e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8014f62:	4622      	mov	r2, r4
 8014f64:	701a      	strb	r2, [r3, #0]
 8014f66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f6a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8014f6e:	4602      	mov	r2, r0
 8014f70:	701a      	strb	r2, [r3, #0]
 8014f72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f76:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8014f7a:	460a      	mov	r2, r1
 8014f7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8014f7e:	f107 0310 	add.w	r3, r7, #16
 8014f82:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014f86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014f8a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014f8e:	2200      	movs	r2, #0
 8014f90:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014f92:	2300      	movs	r3, #0
 8014f94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8014f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f9c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014fa0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8014fa4:	7812      	ldrb	r2, [r2, #0]
 8014fa6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014fa8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fac:	3301      	adds	r3, #1
 8014fae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8014fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014fb6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014fba:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8014fbe:	7812      	ldrb	r2, [r2, #0]
 8014fc0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014fc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8014fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014fd0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014fd4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8014fd8:	7812      	ldrb	r2, [r2, #0]
 8014fda:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014fdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fe0:	3301      	adds	r3, #1
 8014fe2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8014fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014fea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014fee:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8014ff2:	7812      	ldrb	r2, [r2, #0]
 8014ff4:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8014ff6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ffa:	3301      	adds	r3, #1
 8014ffc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8015000:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015004:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8015008:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 801500a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801500e:	3301      	adds	r3, #1
 8015010:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8015014:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015018:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 801501c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801501e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015022:	3301      	adds	r3, #1
 8015024:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8015028:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801502c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8015030:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8015032:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015036:	3301      	adds	r3, #1
 8015038:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 801503c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015040:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8015044:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8015048:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801504c:	3304      	adds	r3, #4
 801504e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8015052:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015056:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801505a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801505c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015060:	3301      	adds	r3, #1
 8015062:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801506a:	2218      	movs	r2, #24
 801506c:	2100      	movs	r1, #0
 801506e:	4618      	mov	r0, r3
 8015070:	f000 ff2d 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015074:	233f      	movs	r3, #63	@ 0x3f
 8015076:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 801507a:	2386      	movs	r3, #134	@ 0x86
 801507c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015080:	f107 0310 	add.w	r3, r7, #16
 8015084:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015088:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801508c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015090:	f107 030f 	add.w	r3, r7, #15
 8015094:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015098:	2301      	movs	r3, #1
 801509a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801509e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80150a2:	2100      	movs	r1, #0
 80150a4:	4618      	mov	r0, r3
 80150a6:	f001 f99b 	bl	80163e0 <hci_send_req>
 80150aa:	4603      	mov	r3, r0
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	da01      	bge.n	80150b4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80150b0:	23ff      	movs	r3, #255	@ 0xff
 80150b2:	e004      	b.n	80150be <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80150b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150b8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80150bc:	781b      	ldrb	r3, [r3, #0]
}
 80150be:	4618      	mov	r0, r3
 80150c0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bdb0      	pop	{r4, r5, r7, pc}

080150c8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b0cc      	sub	sp, #304	@ 0x130
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	4602      	mov	r2, r0
 80150d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80150d8:	6019      	str	r1, [r3, #0]
 80150da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150de:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80150e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80150e4:	f107 0310 	add.w	r3, r7, #16
 80150e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80150ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80150f4:	2200      	movs	r2, #0
 80150f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80150f8:	2300      	movs	r3, #0
 80150fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80150fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015102:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015106:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801510a:	8812      	ldrh	r2, [r2, #0]
 801510c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801510e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015112:	3302      	adds	r3, #2
 8015114:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8015118:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801511c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015120:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8015124:	6812      	ldr	r2, [r2, #0]
 8015126:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 801512a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801512e:	3304      	adds	r3, #4
 8015130:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015134:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015138:	2218      	movs	r2, #24
 801513a:	2100      	movs	r1, #0
 801513c:	4618      	mov	r0, r3
 801513e:	f000 fec6 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015142:	233f      	movs	r3, #63	@ 0x3f
 8015144:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8015148:	2388      	movs	r3, #136	@ 0x88
 801514a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801514e:	f107 0310 	add.w	r3, r7, #16
 8015152:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015156:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801515a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801515e:	f107 030f 	add.w	r3, r7, #15
 8015162:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015166:	2301      	movs	r3, #1
 8015168:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801516c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015170:	2100      	movs	r1, #0
 8015172:	4618      	mov	r0, r3
 8015174:	f001 f934 	bl	80163e0 <hci_send_req>
 8015178:	4603      	mov	r3, r0
 801517a:	2b00      	cmp	r3, #0
 801517c:	da01      	bge.n	8015182 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 801517e:	23ff      	movs	r3, #255	@ 0xff
 8015180:	e004      	b.n	801518c <aci_gap_pass_key_resp+0xc4>
  return status;
 8015182:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015186:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801518a:	781b      	ldrb	r3, [r3, #0]
}
 801518c:	4618      	mov	r0, r3
 801518e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015192:	46bd      	mov	sp, r7
 8015194:	bd80      	pop	{r7, pc}

08015196 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8015196:	b590      	push	{r4, r7, lr}
 8015198:	b0cd      	sub	sp, #308	@ 0x134
 801519a:	af00      	add	r7, sp, #0
 801519c:	4604      	mov	r4, r0
 801519e:	4608      	mov	r0, r1
 80151a0:	4611      	mov	r1, r2
 80151a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151a6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80151aa:	6013      	str	r3, [r2, #0]
 80151ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151b0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80151b4:	4622      	mov	r2, r4
 80151b6:	701a      	strb	r2, [r3, #0]
 80151b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151bc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80151c0:	4602      	mov	r2, r0
 80151c2:	701a      	strb	r2, [r3, #0]
 80151c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151c8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80151cc:	460a      	mov	r2, r1
 80151ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80151d0:	f107 0310 	add.w	r3, r7, #16
 80151d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80151d8:	f107 0308 	add.w	r3, r7, #8
 80151dc:	2207      	movs	r2, #7
 80151de:	2100      	movs	r1, #0
 80151e0:	4618      	mov	r0, r3
 80151e2:	f000 fe74 	bl	8015ece <Osal_MemSet>
  int index_input = 0;
 80151e6:	2300      	movs	r3, #0
 80151e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80151ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80151f0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80151f4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80151f8:	7812      	ldrb	r2, [r2, #0]
 80151fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80151fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015200:	3301      	adds	r3, #1
 8015202:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8015206:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801520a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801520e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015212:	7812      	ldrb	r2, [r2, #0]
 8015214:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015216:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801521a:	3301      	adds	r3, #1
 801521c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8015220:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015224:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015228:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801522c:	7812      	ldrb	r2, [r2, #0]
 801522e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015230:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015234:	3301      	adds	r3, #1
 8015236:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801523a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801523e:	2218      	movs	r2, #24
 8015240:	2100      	movs	r1, #0
 8015242:	4618      	mov	r0, r3
 8015244:	f000 fe43 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015248:	233f      	movs	r3, #63	@ 0x3f
 801524a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 801524e:	238a      	movs	r3, #138	@ 0x8a
 8015250:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015254:	f107 0310 	add.w	r3, r7, #16
 8015258:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801525c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015260:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015264:	f107 0308 	add.w	r3, r7, #8
 8015268:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801526c:	2307      	movs	r3, #7
 801526e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015272:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015276:	2100      	movs	r1, #0
 8015278:	4618      	mov	r0, r3
 801527a:	f001 f8b1 	bl	80163e0 <hci_send_req>
 801527e:	4603      	mov	r3, r0
 8015280:	2b00      	cmp	r3, #0
 8015282:	da01      	bge.n	8015288 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8015284:	23ff      	movs	r3, #255	@ 0xff
 8015286:	e02e      	b.n	80152e6 <aci_gap_init+0x150>
  if ( resp.Status )
 8015288:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801528c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015290:	781b      	ldrb	r3, [r3, #0]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d005      	beq.n	80152a2 <aci_gap_init+0x10c>
    return resp.Status;
 8015296:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801529a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801529e:	781b      	ldrb	r3, [r3, #0]
 80152a0:	e021      	b.n	80152e6 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80152a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152a6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80152aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80152ae:	b29a      	uxth	r2, r3
 80152b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152b4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80152bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152c0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80152c4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80152ce:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80152d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152d4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80152d8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80152dc:	b29a      	uxth	r2, r3
 80152de:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80152e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80152e4:	2300      	movs	r3, #0
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80152ec:	46bd      	mov	sp, r7
 80152ee:	bd90      	pop	{r4, r7, pc}

080152f0 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b0cc      	sub	sp, #304	@ 0x130
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	4602      	mov	r2, r0
 80152f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152fc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015300:	6019      	str	r1, [r3, #0]
 8015302:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015306:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801530a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 801530c:	f107 0310 	add.w	r3, r7, #16
 8015310:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015314:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015318:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801531c:	2200      	movs	r2, #0
 801531e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015320:	2300      	movs	r3, #0
 8015322:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8015326:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801532a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801532e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015332:	7812      	ldrb	r2, [r2, #0]
 8015334:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015336:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801533a:	3301      	adds	r3, #1
 801533c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8015340:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015344:	1c58      	adds	r0, r3, #1
 8015346:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801534a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801534e:	781a      	ldrb	r2, [r3, #0]
 8015350:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015354:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015358:	6819      	ldr	r1, [r3, #0]
 801535a:	f000 fda8 	bl	8015eae <Osal_MemCpy>
  index_input += AdvDataLen;
 801535e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015362:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801536c:	4413      	add	r3, r2
 801536e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015372:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015376:	2218      	movs	r2, #24
 8015378:	2100      	movs	r1, #0
 801537a:	4618      	mov	r0, r3
 801537c:	f000 fda7 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015380:	233f      	movs	r3, #63	@ 0x3f
 8015382:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8015386:	238e      	movs	r3, #142	@ 0x8e
 8015388:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801538c:	f107 0310 	add.w	r3, r7, #16
 8015390:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015394:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015398:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801539c:	f107 030f 	add.w	r3, r7, #15
 80153a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80153a4:	2301      	movs	r3, #1
 80153a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80153aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80153ae:	2100      	movs	r1, #0
 80153b0:	4618      	mov	r0, r3
 80153b2:	f001 f815 	bl	80163e0 <hci_send_req>
 80153b6:	4603      	mov	r3, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	da01      	bge.n	80153c0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80153bc:	23ff      	movs	r3, #255	@ 0xff
 80153be:	e004      	b.n	80153ca <aci_gap_update_adv_data+0xda>
  return status;
 80153c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153c4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80153c8:	781b      	ldrb	r3, [r3, #0]
}
 80153ca:	4618      	mov	r0, r3
 80153cc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80153d0:	46bd      	mov	sp, r7
 80153d2:	bd80      	pop	{r7, pc}

080153d4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b088      	sub	sp, #32
 80153d8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80153da:	2300      	movs	r3, #0
 80153dc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80153de:	f107 0308 	add.w	r3, r7, #8
 80153e2:	2218      	movs	r2, #24
 80153e4:	2100      	movs	r1, #0
 80153e6:	4618      	mov	r0, r3
 80153e8:	f000 fd71 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 80153ec:	233f      	movs	r3, #63	@ 0x3f
 80153ee:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80153f0:	2392      	movs	r3, #146	@ 0x92
 80153f2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80153f4:	1dfb      	adds	r3, r7, #7
 80153f6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80153f8:	2301      	movs	r3, #1
 80153fa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80153fc:	f107 0308 	add.w	r3, r7, #8
 8015400:	2100      	movs	r1, #0
 8015402:	4618      	mov	r0, r3
 8015404:	f000 ffec 	bl	80163e0 <hci_send_req>
 8015408:	4603      	mov	r3, r0
 801540a:	2b00      	cmp	r3, #0
 801540c:	da01      	bge.n	8015412 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 801540e:	23ff      	movs	r3, #255	@ 0xff
 8015410:	e000      	b.n	8015414 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8015412:	79fb      	ldrb	r3, [r7, #7]
}
 8015414:	4618      	mov	r0, r3
 8015416:	3720      	adds	r7, #32
 8015418:	46bd      	mov	sp, r7
 801541a:	bd80      	pop	{r7, pc}

0801541c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b0cc      	sub	sp, #304	@ 0x130
 8015420:	af00      	add	r7, sp, #0
 8015422:	4602      	mov	r2, r0
 8015424:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015428:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801542c:	801a      	strh	r2, [r3, #0]
 801542e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015432:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015436:	460a      	mov	r2, r1
 8015438:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801543a:	f107 0310 	add.w	r3, r7, #16
 801543e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015442:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015446:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801544a:	2200      	movs	r2, #0
 801544c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801544e:	2300      	movs	r3, #0
 8015450:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015454:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015458:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801545c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015460:	8812      	ldrh	r2, [r2, #0]
 8015462:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015464:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015468:	3302      	adds	r3, #2
 801546a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801546e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015472:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015476:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801547a:	7812      	ldrb	r2, [r2, #0]
 801547c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801547e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015482:	3301      	adds	r3, #1
 8015484:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015488:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801548c:	2218      	movs	r2, #24
 801548e:	2100      	movs	r1, #0
 8015490:	4618      	mov	r0, r3
 8015492:	f000 fd1c 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015496:	233f      	movs	r3, #63	@ 0x3f
 8015498:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 801549c:	23a5      	movs	r3, #165	@ 0xa5
 801549e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80154a2:	f107 0310 	add.w	r3, r7, #16
 80154a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80154aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80154b2:	f107 030f 	add.w	r3, r7, #15
 80154b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80154ba:	2301      	movs	r3, #1
 80154bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80154c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80154c4:	2100      	movs	r1, #0
 80154c6:	4618      	mov	r0, r3
 80154c8:	f000 ff8a 	bl	80163e0 <hci_send_req>
 80154cc:	4603      	mov	r3, r0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	da01      	bge.n	80154d6 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80154d2:	23ff      	movs	r3, #255	@ 0xff
 80154d4:	e004      	b.n	80154e0 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80154d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154da:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80154de:	781b      	ldrb	r3, [r3, #0]
}
 80154e0:	4618      	mov	r0, r3
 80154e2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80154e6:	46bd      	mov	sp, r7
 80154e8:	bd80      	pop	{r7, pc}

080154ea <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80154ea:	b580      	push	{r7, lr}
 80154ec:	b088      	sub	sp, #32
 80154ee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80154f0:	2300      	movs	r3, #0
 80154f2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80154f4:	f107 0308 	add.w	r3, r7, #8
 80154f8:	2218      	movs	r2, #24
 80154fa:	2100      	movs	r1, #0
 80154fc:	4618      	mov	r0, r3
 80154fe:	f000 fce6 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015502:	233f      	movs	r3, #63	@ 0x3f
 8015504:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8015506:	f240 1301 	movw	r3, #257	@ 0x101
 801550a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801550c:	1dfb      	adds	r3, r7, #7
 801550e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015510:	2301      	movs	r3, #1
 8015512:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015514:	f107 0308 	add.w	r3, r7, #8
 8015518:	2100      	movs	r1, #0
 801551a:	4618      	mov	r0, r3
 801551c:	f000 ff60 	bl	80163e0 <hci_send_req>
 8015520:	4603      	mov	r3, r0
 8015522:	2b00      	cmp	r3, #0
 8015524:	da01      	bge.n	801552a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8015526:	23ff      	movs	r3, #255	@ 0xff
 8015528:	e000      	b.n	801552c <aci_gatt_init+0x42>
  return status;
 801552a:	79fb      	ldrb	r3, [r7, #7]
}
 801552c:	4618      	mov	r0, r3
 801552e:	3720      	adds	r7, #32
 8015530:	46bd      	mov	sp, r7
 8015532:	bd80      	pop	{r7, pc}

08015534 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8015534:	b590      	push	{r4, r7, lr}
 8015536:	b0cf      	sub	sp, #316	@ 0x13c
 8015538:	af00      	add	r7, sp, #0
 801553a:	4604      	mov	r4, r0
 801553c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8015540:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8015544:	6001      	str	r1, [r0, #0]
 8015546:	4610      	mov	r0, r2
 8015548:	4619      	mov	r1, r3
 801554a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801554e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015552:	4622      	mov	r2, r4
 8015554:	701a      	strb	r2, [r3, #0]
 8015556:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801555a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801555e:	4602      	mov	r2, r0
 8015560:	701a      	strb	r2, [r3, #0]
 8015562:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015566:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801556a:	460a      	mov	r2, r1
 801556c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801556e:	f107 0310 	add.w	r3, r7, #16
 8015572:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8015576:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801557a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801557e:	781b      	ldrb	r3, [r3, #0]
 8015580:	2b01      	cmp	r3, #1
 8015582:	d00a      	beq.n	801559a <aci_gatt_add_service+0x66>
 8015584:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015588:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	2b02      	cmp	r3, #2
 8015590:	d101      	bne.n	8015596 <aci_gatt_add_service+0x62>
 8015592:	2311      	movs	r3, #17
 8015594:	e002      	b.n	801559c <aci_gatt_add_service+0x68>
 8015596:	2301      	movs	r3, #1
 8015598:	e000      	b.n	801559c <aci_gatt_add_service+0x68>
 801559a:	2303      	movs	r3, #3
 801559c:	f107 0210 	add.w	r2, r7, #16
 80155a0:	4413      	add	r3, r2
 80155a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80155a6:	f107 030c 	add.w	r3, r7, #12
 80155aa:	2203      	movs	r2, #3
 80155ac:	2100      	movs	r1, #0
 80155ae:	4618      	mov	r0, r3
 80155b0:	f000 fc8d 	bl	8015ece <Osal_MemSet>
  int index_input = 0;
 80155b4:	2300      	movs	r3, #0
 80155b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80155ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80155be:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80155c2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80155c6:	7812      	ldrb	r2, [r2, #0]
 80155c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80155ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155ce:	3301      	adds	r3, #1
 80155d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80155d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80155d8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	2b01      	cmp	r3, #1
 80155e0:	d002      	beq.n	80155e8 <aci_gatt_add_service+0xb4>
 80155e2:	2b02      	cmp	r3, #2
 80155e4:	d004      	beq.n	80155f0 <aci_gatt_add_service+0xbc>
 80155e6:	e007      	b.n	80155f8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80155e8:	2302      	movs	r3, #2
 80155ea:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80155ee:	e005      	b.n	80155fc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80155f0:	2310      	movs	r3, #16
 80155f2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80155f6:	e001      	b.n	80155fc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80155f8:	2397      	movs	r3, #151	@ 0x97
 80155fa:	e06c      	b.n	80156d6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80155fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015600:	1c58      	adds	r0, r3, #1
 8015602:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8015606:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801560a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801560e:	6819      	ldr	r1, [r3, #0]
 8015610:	f000 fc4d 	bl	8015eae <Osal_MemCpy>
    index_input += size;
 8015614:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8015618:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801561c:	4413      	add	r3, r2
 801561e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8015622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015626:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801562a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801562e:	7812      	ldrb	r2, [r2, #0]
 8015630:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8015632:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015636:	3301      	adds	r3, #1
 8015638:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 801563c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015640:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015644:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8015648:	7812      	ldrb	r2, [r2, #0]
 801564a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 801564c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015650:	3301      	adds	r3, #1
 8015652:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015656:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801565a:	2218      	movs	r2, #24
 801565c:	2100      	movs	r1, #0
 801565e:	4618      	mov	r0, r3
 8015660:	f000 fc35 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015664:	233f      	movs	r3, #63	@ 0x3f
 8015666:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 801566a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 801566e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015672:	f107 0310 	add.w	r3, r7, #16
 8015676:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801567a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801567e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015682:	f107 030c 	add.w	r3, r7, #12
 8015686:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801568a:	2303      	movs	r3, #3
 801568c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015690:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015694:	2100      	movs	r1, #0
 8015696:	4618      	mov	r0, r3
 8015698:	f000 fea2 	bl	80163e0 <hci_send_req>
 801569c:	4603      	mov	r3, r0
 801569e:	2b00      	cmp	r3, #0
 80156a0:	da01      	bge.n	80156a6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80156a2:	23ff      	movs	r3, #255	@ 0xff
 80156a4:	e017      	b.n	80156d6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80156a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80156ae:	781b      	ldrb	r3, [r3, #0]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d005      	beq.n	80156c0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80156b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	e00a      	b.n	80156d6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80156c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80156c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80156cc:	b29a      	uxth	r2, r3
 80156ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80156d2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80156d4:	2300      	movs	r3, #0
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80156dc:	46bd      	mov	sp, r7
 80156de:	bd90      	pop	{r4, r7, pc}

080156e0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80156e0:	b590      	push	{r4, r7, lr}
 80156e2:	b0d1      	sub	sp, #324	@ 0x144
 80156e4:	af00      	add	r7, sp, #0
 80156e6:	4604      	mov	r4, r0
 80156e8:	4608      	mov	r0, r1
 80156ea:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80156ee:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80156f2:	600a      	str	r2, [r1, #0]
 80156f4:	4619      	mov	r1, r3
 80156f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80156fa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80156fe:	4622      	mov	r2, r4
 8015700:	801a      	strh	r2, [r3, #0]
 8015702:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015706:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801570a:	4602      	mov	r2, r0
 801570c:	701a      	strb	r2, [r3, #0]
 801570e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015712:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8015716:	460a      	mov	r2, r1
 8015718:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 801571a:	f107 0318 	add.w	r3, r7, #24
 801571e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8015722:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015726:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	2b01      	cmp	r3, #1
 801572e:	d00a      	beq.n	8015746 <aci_gatt_add_char+0x66>
 8015730:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015734:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	2b02      	cmp	r3, #2
 801573c:	d101      	bne.n	8015742 <aci_gatt_add_char+0x62>
 801573e:	2313      	movs	r3, #19
 8015740:	e002      	b.n	8015748 <aci_gatt_add_char+0x68>
 8015742:	2303      	movs	r3, #3
 8015744:	e000      	b.n	8015748 <aci_gatt_add_char+0x68>
 8015746:	2305      	movs	r3, #5
 8015748:	f107 0218 	add.w	r2, r7, #24
 801574c:	4413      	add	r3, r2
 801574e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015752:	f107 0314 	add.w	r3, r7, #20
 8015756:	2203      	movs	r2, #3
 8015758:	2100      	movs	r1, #0
 801575a:	4618      	mov	r0, r3
 801575c:	f000 fbb7 	bl	8015ece <Osal_MemSet>
  int index_input = 0;
 8015760:	2300      	movs	r3, #0
 8015762:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8015766:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801576a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801576e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8015772:	8812      	ldrh	r2, [r2, #0]
 8015774:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015776:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801577a:	3302      	adds	r3, #2
 801577c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8015780:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015784:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015788:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 801578c:	7812      	ldrb	r2, [r2, #0]
 801578e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015790:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015794:	3301      	adds	r3, #1
 8015796:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 801579a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801579e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	2b01      	cmp	r3, #1
 80157a6:	d002      	beq.n	80157ae <aci_gatt_add_char+0xce>
 80157a8:	2b02      	cmp	r3, #2
 80157aa:	d004      	beq.n	80157b6 <aci_gatt_add_char+0xd6>
 80157ac:	e007      	b.n	80157be <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80157ae:	2302      	movs	r3, #2
 80157b0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80157b4:	e005      	b.n	80157c2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80157b6:	2310      	movs	r3, #16
 80157b8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80157bc:	e001      	b.n	80157c2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80157be:	2397      	movs	r3, #151	@ 0x97
 80157c0:	e091      	b.n	80158e6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80157c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80157c6:	1cd8      	adds	r0, r3, #3
 80157c8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80157cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80157d0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80157d4:	6819      	ldr	r1, [r3, #0]
 80157d6:	f000 fb6a 	bl	8015eae <Osal_MemCpy>
    index_input += size;
 80157da:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80157de:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80157e2:	4413      	add	r3, r2
 80157e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80157e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80157ec:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80157f0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80157f4:	8812      	ldrh	r2, [r2, #0]
 80157f6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80157f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80157fc:	3302      	adds	r3, #2
 80157fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8015802:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015806:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801580a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 801580c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015810:	3301      	adds	r3, #1
 8015812:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8015816:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801581a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 801581e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8015820:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015824:	3301      	adds	r3, #1
 8015826:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 801582a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801582e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8015832:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8015834:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015838:	3301      	adds	r3, #1
 801583a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 801583e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015842:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8015846:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8015848:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801584c:	3301      	adds	r3, #1
 801584e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8015852:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015856:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 801585a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 801585c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015860:	3301      	adds	r3, #1
 8015862:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015866:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801586a:	2218      	movs	r2, #24
 801586c:	2100      	movs	r1, #0
 801586e:	4618      	mov	r0, r3
 8015870:	f000 fb2d 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015874:	233f      	movs	r3, #63	@ 0x3f
 8015876:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 801587a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 801587e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8015882:	f107 0318 	add.w	r3, r7, #24
 8015886:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 801588a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801588e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8015892:	f107 0314 	add.w	r3, r7, #20
 8015896:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 801589a:	2303      	movs	r3, #3
 801589c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80158a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80158a4:	2100      	movs	r1, #0
 80158a6:	4618      	mov	r0, r3
 80158a8:	f000 fd9a 	bl	80163e0 <hci_send_req>
 80158ac:	4603      	mov	r3, r0
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	da01      	bge.n	80158b6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80158b2:	23ff      	movs	r3, #255	@ 0xff
 80158b4:	e017      	b.n	80158e6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80158b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d005      	beq.n	80158d0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80158c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80158cc:	781b      	ldrb	r3, [r3, #0]
 80158ce:	e00a      	b.n	80158e6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80158d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80158d8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80158dc:	b29a      	uxth	r2, r3
 80158de:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80158e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80158e4:	2300      	movs	r3, #0
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bd90      	pop	{r4, r7, pc}

080158f0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80158f0:	b5b0      	push	{r4, r5, r7, lr}
 80158f2:	b0cc      	sub	sp, #304	@ 0x130
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	4605      	mov	r5, r0
 80158f8:	460c      	mov	r4, r1
 80158fa:	4610      	mov	r0, r2
 80158fc:	4619      	mov	r1, r3
 80158fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015902:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015906:	462a      	mov	r2, r5
 8015908:	801a      	strh	r2, [r3, #0]
 801590a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801590e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015912:	4622      	mov	r2, r4
 8015914:	801a      	strh	r2, [r3, #0]
 8015916:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801591a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 801591e:	4602      	mov	r2, r0
 8015920:	701a      	strb	r2, [r3, #0]
 8015922:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015926:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801592a:	460a      	mov	r2, r1
 801592c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 801592e:	f107 0310 	add.w	r3, r7, #16
 8015932:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015936:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801593a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801593e:	2200      	movs	r2, #0
 8015940:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015942:	2300      	movs	r3, #0
 8015944:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8015948:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801594c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015950:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015954:	8812      	ldrh	r2, [r2, #0]
 8015956:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015958:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801595c:	3302      	adds	r3, #2
 801595e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8015962:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015966:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801596a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 801596e:	8812      	ldrh	r2, [r2, #0]
 8015970:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8015972:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015976:	3302      	adds	r3, #2
 8015978:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 801597c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015980:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015984:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8015988:	7812      	ldrb	r2, [r2, #0]
 801598a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 801598c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015990:	3301      	adds	r3, #1
 8015992:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8015996:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801599a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801599e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80159a2:	7812      	ldrb	r2, [r2, #0]
 80159a4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80159a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159aa:	3301      	adds	r3, #1
 80159ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80159b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80159b4:	1d98      	adds	r0, r3, #6
 80159b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159ba:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80159be:	781b      	ldrb	r3, [r3, #0]
 80159c0:	461a      	mov	r2, r3
 80159c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80159c6:	f000 fa72 	bl	8015eae <Osal_MemCpy>
  index_input += Char_Value_Length;
 80159ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80159ce:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80159d2:	781b      	ldrb	r3, [r3, #0]
 80159d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80159d8:	4413      	add	r3, r2
 80159da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80159de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80159e2:	2218      	movs	r2, #24
 80159e4:	2100      	movs	r1, #0
 80159e6:	4618      	mov	r0, r3
 80159e8:	f000 fa71 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 80159ec:	233f      	movs	r3, #63	@ 0x3f
 80159ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80159f2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80159f6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80159fa:	f107 0310 	add.w	r3, r7, #16
 80159fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a06:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015a0a:	f107 030f 	add.w	r3, r7, #15
 8015a0e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015a12:	2301      	movs	r3, #1
 8015a14:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015a18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015a1c:	2100      	movs	r1, #0
 8015a1e:	4618      	mov	r0, r3
 8015a20:	f000 fcde 	bl	80163e0 <hci_send_req>
 8015a24:	4603      	mov	r3, r0
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	da01      	bge.n	8015a2e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8015a2a:	23ff      	movs	r3, #255	@ 0xff
 8015a2c:	e004      	b.n	8015a38 <aci_gatt_update_char_value+0x148>
  return status;
 8015a2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a32:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a36:	781b      	ldrb	r3, [r3, #0]
}
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bdb0      	pop	{r4, r5, r7, pc}

08015a42 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8015a42:	b580      	push	{r7, lr}
 8015a44:	b0cc      	sub	sp, #304	@ 0x130
 8015a46:	af00      	add	r7, sp, #0
 8015a48:	4602      	mov	r2, r0
 8015a4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a4e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015a52:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8015a54:	f107 0310 	add.w	r3, r7, #16
 8015a58:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015a5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a60:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a64:	2200      	movs	r2, #0
 8015a66:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015a6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a72:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a76:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015a7a:	8812      	ldrh	r2, [r2, #0]
 8015a7c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a82:	3302      	adds	r3, #2
 8015a84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015a88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015a8c:	2218      	movs	r2, #24
 8015a8e:	2100      	movs	r1, #0
 8015a90:	4618      	mov	r0, r3
 8015a92:	f000 fa1c 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015a96:	233f      	movs	r3, #63	@ 0x3f
 8015a98:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8015a9c:	f240 1325 	movw	r3, #293	@ 0x125
 8015aa0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015aa4:	f107 0310 	add.w	r3, r7, #16
 8015aa8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015aac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ab0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015ab4:	f107 030f 	add.w	r3, r7, #15
 8015ab8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015abc:	2301      	movs	r3, #1
 8015abe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015ac2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015ac6:	2100      	movs	r1, #0
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f000 fc89 	bl	80163e0 <hci_send_req>
 8015ace:	4603      	mov	r3, r0
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	da01      	bge.n	8015ad8 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8015ad4:	23ff      	movs	r3, #255	@ 0xff
 8015ad6:	e004      	b.n	8015ae2 <aci_gatt_confirm_indication+0xa0>
  return status;
 8015ad8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015adc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ae0:	781b      	ldrb	r3, [r3, #0]
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b0cc      	sub	sp, #304	@ 0x130
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015af6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015afa:	601a      	str	r2, [r3, #0]
 8015afc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b00:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015b04:	4602      	mov	r2, r0
 8015b06:	701a      	strb	r2, [r3, #0]
 8015b08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b0c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b10:	460a      	mov	r2, r1
 8015b12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8015b14:	f107 0310 	add.w	r3, r7, #16
 8015b18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015b1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b24:	2200      	movs	r2, #0
 8015b26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015b28:	2300      	movs	r3, #0
 8015b2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8015b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b36:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015b3a:	7812      	ldrb	r2, [r2, #0]
 8015b3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b42:	3301      	adds	r3, #1
 8015b44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8015b48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015b50:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015b54:	7812      	ldrb	r2, [r2, #0]
 8015b56:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015b58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b5c:	3301      	adds	r3, #1
 8015b5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8015b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015b66:	1c98      	adds	r0, r3, #2
 8015b68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b6c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b70:	781a      	ldrb	r2, [r3, #0]
 8015b72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b76:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015b7a:	6819      	ldr	r1, [r3, #0]
 8015b7c:	f000 f997 	bl	8015eae <Osal_MemCpy>
  index_input += Length;
 8015b80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b84:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b88:	781b      	ldrb	r3, [r3, #0]
 8015b8a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015b8e:	4413      	add	r3, r2
 8015b90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015b94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b98:	2218      	movs	r2, #24
 8015b9a:	2100      	movs	r1, #0
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f000 f996 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015ba2:	233f      	movs	r3, #63	@ 0x3f
 8015ba4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8015ba8:	230c      	movs	r3, #12
 8015baa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015bae:	f107 0310 	add.w	r3, r7, #16
 8015bb2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015bb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015bbe:	f107 030f 	add.w	r3, r7, #15
 8015bc2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015bcc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015bd0:	2100      	movs	r1, #0
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f000 fc04 	bl	80163e0 <hci_send_req>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	da01      	bge.n	8015be2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8015bde:	23ff      	movs	r3, #255	@ 0xff
 8015be0:	e004      	b.n	8015bec <aci_hal_write_config_data+0x100>
  return status;
 8015be2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015be6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015bea:	781b      	ldrb	r3, [r3, #0]
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015bf2:	46bd      	mov	sp, r7
 8015bf4:	bd80      	pop	{r7, pc}

08015bf6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015bf6:	b580      	push	{r7, lr}
 8015bf8:	b0cc      	sub	sp, #304	@ 0x130
 8015bfa:	af00      	add	r7, sp, #0
 8015bfc:	4602      	mov	r2, r0
 8015bfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c02:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015c06:	701a      	strb	r2, [r3, #0]
 8015c08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c0c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015c10:	460a      	mov	r2, r1
 8015c12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015c14:	f107 0310 	add.w	r3, r7, #16
 8015c18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015c1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c24:	2200      	movs	r2, #0
 8015c26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015c28:	2300      	movs	r3, #0
 8015c2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8015c2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c36:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015c3a:	7812      	ldrb	r2, [r2, #0]
 8015c3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015c3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c42:	3301      	adds	r3, #1
 8015c44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8015c48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c50:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015c54:	7812      	ldrb	r2, [r2, #0]
 8015c56:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015c58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c5c:	3301      	adds	r3, #1
 8015c5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015c62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c66:	2218      	movs	r2, #24
 8015c68:	2100      	movs	r1, #0
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f000 f92f 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015c70:	233f      	movs	r3, #63	@ 0x3f
 8015c72:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8015c76:	230f      	movs	r3, #15
 8015c78:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015c7c:	f107 0310 	add.w	r3, r7, #16
 8015c80:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015c84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c88:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015c8c:	f107 030f 	add.w	r3, r7, #15
 8015c90:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015c94:	2301      	movs	r3, #1
 8015c96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015c9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015c9e:	2100      	movs	r1, #0
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f000 fb9d 	bl	80163e0 <hci_send_req>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	da01      	bge.n	8015cb0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015cac:	23ff      	movs	r3, #255	@ 0xff
 8015cae:	e004      	b.n	8015cba <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015cb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015cb4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015cb8:	781b      	ldrb	r3, [r3, #0]
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b0cc      	sub	sp, #304	@ 0x130
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	4602      	mov	r2, r0
 8015ccc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015cd0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015cd4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015cd6:	f107 0310 	add.w	r3, r7, #16
 8015cda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015cde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ce2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015cea:	2300      	movs	r3, #0
 8015cec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015cf4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015cf8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015cfc:	8812      	ldrh	r2, [r2, #0]
 8015cfe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015d00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d04:	3302      	adds	r3, #2
 8015d06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015d0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015d0e:	2218      	movs	r2, #24
 8015d10:	2100      	movs	r1, #0
 8015d12:	4618      	mov	r0, r3
 8015d14:	f000 f8db 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x3f;
 8015d18:	233f      	movs	r3, #63	@ 0x3f
 8015d1a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8015d1e:	2318      	movs	r3, #24
 8015d20:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015d24:	f107 0310 	add.w	r3, r7, #16
 8015d28:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015d2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d30:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015d34:	f107 030f 	add.w	r3, r7, #15
 8015d38:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015d3c:	2301      	movs	r3, #1
 8015d3e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015d42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015d46:	2100      	movs	r1, #0
 8015d48:	4618      	mov	r0, r3
 8015d4a:	f000 fb49 	bl	80163e0 <hci_send_req>
 8015d4e:	4603      	mov	r3, r0
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	da01      	bge.n	8015d58 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015d54:	23ff      	movs	r3, #255	@ 0xff
 8015d56:	e004      	b.n	8015d62 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015d58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d5c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015d60:	781b      	ldrb	r3, [r3, #0]
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}

08015d6c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b088      	sub	sp, #32
 8015d70:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015d72:	2300      	movs	r3, #0
 8015d74:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015d76:	f107 0308 	add.w	r3, r7, #8
 8015d7a:	2218      	movs	r2, #24
 8015d7c:	2100      	movs	r1, #0
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f000 f8a5 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x03;
 8015d84:	2303      	movs	r3, #3
 8015d86:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015d88:	2303      	movs	r3, #3
 8015d8a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015d8c:	1dfb      	adds	r3, r7, #7
 8015d8e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015d90:	2301      	movs	r3, #1
 8015d92:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015d94:	f107 0308 	add.w	r3, r7, #8
 8015d98:	2100      	movs	r1, #0
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f000 fb20 	bl	80163e0 <hci_send_req>
 8015da0:	4603      	mov	r3, r0
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	da01      	bge.n	8015daa <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015da6:	23ff      	movs	r3, #255	@ 0xff
 8015da8:	e000      	b.n	8015dac <hci_reset+0x40>
  return status;
 8015daa:	79fb      	ldrb	r3, [r7, #7]
}
 8015dac:	4618      	mov	r0, r3
 8015dae:	3720      	adds	r7, #32
 8015db0:	46bd      	mov	sp, r7
 8015db2:	bd80      	pop	{r7, pc}

08015db4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015db4:	b590      	push	{r4, r7, lr}
 8015db6:	b0cd      	sub	sp, #308	@ 0x134
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	4604      	mov	r4, r0
 8015dbc:	4608      	mov	r0, r1
 8015dbe:	4611      	mov	r1, r2
 8015dc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015dc4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015dc8:	4622      	mov	r2, r4
 8015dca:	701a      	strb	r2, [r3, #0]
 8015dcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015dd0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	701a      	strb	r2, [r3, #0]
 8015dd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ddc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015de0:	460a      	mov	r2, r1
 8015de2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8015de4:	f107 0310 	add.w	r3, r7, #16
 8015de8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015dec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015df0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015df4:	2200      	movs	r2, #0
 8015df6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8015dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015e02:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015e06:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015e0a:	7812      	ldrb	r2, [r2, #0]
 8015e0c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015e0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e12:	3301      	adds	r3, #1
 8015e14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015e1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015e20:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015e24:	7812      	ldrb	r2, [r2, #0]
 8015e26:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015e28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e2c:	3301      	adds	r3, #1
 8015e2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8015e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015e36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015e3a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015e3e:	7812      	ldrb	r2, [r2, #0]
 8015e40:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e46:	3301      	adds	r3, #1
 8015e48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015e4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e50:	2218      	movs	r2, #24
 8015e52:	2100      	movs	r1, #0
 8015e54:	4618      	mov	r0, r3
 8015e56:	f000 f83a 	bl	8015ece <Osal_MemSet>
  rq.ogf = 0x08;
 8015e5a:	2308      	movs	r3, #8
 8015e5c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8015e60:	2331      	movs	r3, #49	@ 0x31
 8015e62:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015e66:	f107 0310 	add.w	r3, r7, #16
 8015e6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015e76:	f107 030f 	add.w	r3, r7, #15
 8015e7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015e7e:	2301      	movs	r3, #1
 8015e80:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015e84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e88:	2100      	movs	r1, #0
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f000 faa8 	bl	80163e0 <hci_send_req>
 8015e90:	4603      	mov	r3, r0
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	da01      	bge.n	8015e9a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8015e96:	23ff      	movs	r3, #255	@ 0xff
 8015e98:	e004      	b.n	8015ea4 <hci_le_set_default_phy+0xf0>
  return status;
 8015e9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015ea2:	781b      	ldrb	r3, [r3, #0]
}
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd90      	pop	{r4, r7, pc}

08015eae <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8015eae:	b580      	push	{r7, lr}
 8015eb0:	b084      	sub	sp, #16
 8015eb2:	af00      	add	r7, sp, #0
 8015eb4:	60f8      	str	r0, [r7, #12]
 8015eb6:	60b9      	str	r1, [r7, #8]
 8015eb8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8015eba:	687a      	ldr	r2, [r7, #4]
 8015ebc:	68b9      	ldr	r1, [r7, #8]
 8015ebe:	68f8      	ldr	r0, [r7, #12]
 8015ec0:	f005 fbe3 	bl	801b68a <memcpy>
 8015ec4:	4603      	mov	r3, r0
}
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	3710      	adds	r7, #16
 8015eca:	46bd      	mov	sp, r7
 8015ecc:	bd80      	pop	{r7, pc}

08015ece <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8015ece:	b580      	push	{r7, lr}
 8015ed0:	b084      	sub	sp, #16
 8015ed2:	af00      	add	r7, sp, #0
 8015ed4:	60f8      	str	r0, [r7, #12]
 8015ed6:	60b9      	str	r1, [r7, #8]
 8015ed8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8015eda:	687a      	ldr	r2, [r7, #4]
 8015edc:	68b9      	ldr	r1, [r7, #8]
 8015ede:	68f8      	ldr	r0, [r7, #12]
 8015ee0:	f005 fab7 	bl	801b452 <memset>
 8015ee4:	4603      	mov	r3, r0
}
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	3710      	adds	r7, #16
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}

08015eee <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8015eee:	b480      	push	{r7}
 8015ef0:	af00      	add	r7, sp, #0
  return;
 8015ef2:	bf00      	nop
}
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efa:	4770      	bx	lr

08015efc <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8015efc:	b480      	push	{r7}
 8015efe:	af00      	add	r7, sp, #0
  return;
 8015f00:	bf00      	nop
}
 8015f02:	46bd      	mov	sp, r7
 8015f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f08:	4770      	bx	lr

08015f0a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8015f0a:	b480      	push	{r7}
 8015f0c:	af00      	add	r7, sp, #0
  return;
 8015f0e:	bf00      	nop
}
 8015f10:	46bd      	mov	sp, r7
 8015f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f16:	4770      	bx	lr

08015f18 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8015f18:	b480      	push	{r7}
 8015f1a:	af00      	add	r7, sp, #0
  return;
 8015f1c:	bf00      	nop
}
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f24:	4770      	bx	lr

08015f26 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8015f26:	b480      	push	{r7}
 8015f28:	af00      	add	r7, sp, #0
  return;
 8015f2a:	bf00      	nop
}
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f32:	4770      	bx	lr

08015f34 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8015f34:	b480      	push	{r7}
 8015f36:	af00      	add	r7, sp, #0
  return;
 8015f38:	bf00      	nop
}
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f40:	4770      	bx	lr

08015f42 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8015f42:	b480      	push	{r7}
 8015f44:	af00      	add	r7, sp, #0
  return;
 8015f46:	bf00      	nop
}
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f4e:	4770      	bx	lr

08015f50 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8015f50:	b480      	push	{r7}
 8015f52:	af00      	add	r7, sp, #0
  return;
 8015f54:	bf00      	nop
}
 8015f56:	46bd      	mov	sp, r7
 8015f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5c:	4770      	bx	lr

08015f5e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8015f5e:	b480      	push	{r7}
 8015f60:	af00      	add	r7, sp, #0
  return;
 8015f62:	bf00      	nop
}
 8015f64:	46bd      	mov	sp, r7
 8015f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6a:	4770      	bx	lr

08015f6c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8015f6c:	b480      	push	{r7}
 8015f6e:	af00      	add	r7, sp, #0
  return;
 8015f70:	bf00      	nop
}
 8015f72:	46bd      	mov	sp, r7
 8015f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f78:	4770      	bx	lr

08015f7a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8015f7a:	b480      	push	{r7}
 8015f7c:	af00      	add	r7, sp, #0
  return;
 8015f7e:	bf00      	nop
}
 8015f80:	46bd      	mov	sp, r7
 8015f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f86:	4770      	bx	lr

08015f88 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8015f88:	b480      	push	{r7}
 8015f8a:	af00      	add	r7, sp, #0
  return;
 8015f8c:	bf00      	nop
}
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f94:	4770      	bx	lr

08015f96 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8015f96:	b480      	push	{r7}
 8015f98:	af00      	add	r7, sp, #0
  return;
 8015f9a:	bf00      	nop
}
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa2:	4770      	bx	lr

08015fa4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	af00      	add	r7, sp, #0
  return;
 8015fa8:	bf00      	nop
}
 8015faa:	46bd      	mov	sp, r7
 8015fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb0:	4770      	bx	lr

08015fb2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8015fb2:	b480      	push	{r7}
 8015fb4:	af00      	add	r7, sp, #0
  return;
 8015fb6:	bf00      	nop
}
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr

08015fc0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8015fc0:	b480      	push	{r7}
 8015fc2:	af00      	add	r7, sp, #0
  return;
 8015fc4:	bf00      	nop
}
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fcc:	4770      	bx	lr

08015fce <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8015fce:	b480      	push	{r7}
 8015fd0:	af00      	add	r7, sp, #0
  return;
 8015fd2:	bf00      	nop
}
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fda:	4770      	bx	lr

08015fdc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8015fe0:	4b04      	ldr	r3, [pc, #16]	@ (8015ff4 <SVCCTL_Init+0x18>)
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8015fe6:	4b04      	ldr	r3, [pc, #16]	@ (8015ff8 <SVCCTL_Init+0x1c>)
 8015fe8:	2200      	movs	r2, #0
 8015fea:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8015fec:	f000 f806 	bl	8015ffc <SVCCTL_SvcInit>

  return;
 8015ff0:	bf00      	nop
}
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	20000320 	.word	0x20000320
 8015ff8:	20000340 	.word	0x20000340

08015ffc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	af00      	add	r7, sp, #0
  BAS_Init();
 8016000:	f7ff ff75 	bl	8015eee <BAS_Init>

  BLS_Init();
 8016004:	f7ff ff7a 	bl	8015efc <BLS_Init>

  CRS_STM_Init();
 8016008:	f7ff ff7f 	bl	8015f0a <CRS_STM_Init>

  DIS_Init();
 801600c:	f7ff ff84 	bl	8015f18 <DIS_Init>

  EDS_STM_Init();
 8016010:	f7ff ff89 	bl	8015f26 <EDS_STM_Init>

  HIDS_Init();
 8016014:	f7ff ff8e 	bl	8015f34 <HIDS_Init>

  HRS_Init();
 8016018:	f7ff ff93 	bl	8015f42 <HRS_Init>

  HTS_Init();
 801601c:	f7ff ff98 	bl	8015f50 <HTS_Init>

  IAS_Init();
 8016020:	f7ff ff9d 	bl	8015f5e <IAS_Init>

  LLS_Init();
 8016024:	f7ff ffa2 	bl	8015f6c <LLS_Init>

  TPS_Init();
 8016028:	f7ff ffa7 	bl	8015f7a <TPS_Init>

  MOTENV_STM_Init();
 801602c:	f7ff ffac 	bl	8015f88 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8016030:	f7ff ffb1 	bl	8015f96 <P2PS_STM_Init>

  ZDD_STM_Init();
 8016034:	f7ff ffb6 	bl	8015fa4 <ZDD_STM_Init>

  OTAS_STM_Init();
 8016038:	f7ff ffbb 	bl	8015fb2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 801603c:	f7ff ffc7 	bl	8015fce <BVOPUS_STM_Init>

  MESH_Init();
 8016040:	f7ff ffbe 	bl	8015fc0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8016044:	f002 f820 	bl	8018088 <SVCCTL_InitCustomSvc>
  
  return;
 8016048:	bf00      	nop
}
 801604a:	bd80      	pop	{r7, pc}

0801604c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 801604c:	b480      	push	{r7}
 801604e:	b083      	sub	sp, #12
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8016054:	4b09      	ldr	r3, [pc, #36]	@ (801607c <SVCCTL_RegisterSvcHandler+0x30>)
 8016056:	7f1b      	ldrb	r3, [r3, #28]
 8016058:	4619      	mov	r1, r3
 801605a:	4a08      	ldr	r2, [pc, #32]	@ (801607c <SVCCTL_RegisterSvcHandler+0x30>)
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8016062:	4b06      	ldr	r3, [pc, #24]	@ (801607c <SVCCTL_RegisterSvcHandler+0x30>)
 8016064:	7f1b      	ldrb	r3, [r3, #28]
 8016066:	3301      	adds	r3, #1
 8016068:	b2da      	uxtb	r2, r3
 801606a:	4b04      	ldr	r3, [pc, #16]	@ (801607c <SVCCTL_RegisterSvcHandler+0x30>)
 801606c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801606e:	bf00      	nop
}
 8016070:	370c      	adds	r7, #12
 8016072:	46bd      	mov	sp, r7
 8016074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016078:	4770      	bx	lr
 801607a:	bf00      	nop
 801607c:	20000320 	.word	0x20000320

08016080 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8016080:	b580      	push	{r7, lr}
 8016082:	b086      	sub	sp, #24
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	3301      	adds	r3, #1
 801608c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801608e:	2300      	movs	r3, #0
 8016090:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8016092:	693b      	ldr	r3, [r7, #16]
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	2bff      	cmp	r3, #255	@ 0xff
 8016098:	d125      	bne.n	80160e6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 801609a:	693b      	ldr	r3, [r7, #16]
 801609c:	3302      	adds	r3, #2
 801609e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	881b      	ldrh	r3, [r3, #0]
 80160a4:	b29b      	uxth	r3, r3
 80160a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80160aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80160ae:	d118      	bne.n	80160e2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80160b0:	2300      	movs	r3, #0
 80160b2:	757b      	strb	r3, [r7, #21]
 80160b4:	e00d      	b.n	80160d2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80160b6:	7d7b      	ldrb	r3, [r7, #21]
 80160b8:	4a1a      	ldr	r2, [pc, #104]	@ (8016124 <SVCCTL_UserEvtRx+0xa4>)
 80160ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	4798      	blx	r3
 80160c2:	4603      	mov	r3, r0
 80160c4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80160c6:	7dfb      	ldrb	r3, [r7, #23]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d108      	bne.n	80160de <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80160cc:	7d7b      	ldrb	r3, [r7, #21]
 80160ce:	3301      	adds	r3, #1
 80160d0:	757b      	strb	r3, [r7, #21]
 80160d2:	4b14      	ldr	r3, [pc, #80]	@ (8016124 <SVCCTL_UserEvtRx+0xa4>)
 80160d4:	7f1b      	ldrb	r3, [r3, #28]
 80160d6:	7d7a      	ldrb	r2, [r7, #21]
 80160d8:	429a      	cmp	r2, r3
 80160da:	d3ec      	bcc.n	80160b6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80160dc:	e002      	b.n	80160e4 <SVCCTL_UserEvtRx+0x64>
              break;
 80160de:	bf00      	nop
          break;
 80160e0:	e000      	b.n	80160e4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80160e2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80160e4:	e000      	b.n	80160e8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80160e6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80160e8:	7dfb      	ldrb	r3, [r7, #23]
 80160ea:	2b02      	cmp	r3, #2
 80160ec:	d00f      	beq.n	801610e <SVCCTL_UserEvtRx+0x8e>
 80160ee:	2b02      	cmp	r3, #2
 80160f0:	dc10      	bgt.n	8016114 <SVCCTL_UserEvtRx+0x94>
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d002      	beq.n	80160fc <SVCCTL_UserEvtRx+0x7c>
 80160f6:	2b01      	cmp	r3, #1
 80160f8:	d006      	beq.n	8016108 <SVCCTL_UserEvtRx+0x88>
 80160fa:	e00b      	b.n	8016114 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f001 fc7f 	bl	8017a00 <SVCCTL_App_Notification>
 8016102:	4603      	mov	r3, r0
 8016104:	75bb      	strb	r3, [r7, #22]
      break;
 8016106:	e008      	b.n	801611a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8016108:	2301      	movs	r3, #1
 801610a:	75bb      	strb	r3, [r7, #22]
      break;
 801610c:	e005      	b.n	801611a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 801610e:	2300      	movs	r3, #0
 8016110:	75bb      	strb	r3, [r7, #22]
      break;
 8016112:	e002      	b.n	801611a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8016114:	2301      	movs	r3, #1
 8016116:	75bb      	strb	r3, [r7, #22]
      break;
 8016118:	bf00      	nop
  }

  return (return_status);
 801611a:	7dbb      	ldrb	r3, [r7, #22]
}
 801611c:	4618      	mov	r0, r3
 801611e:	3718      	adds	r7, #24
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}
 8016124:	20000320 	.word	0x20000320

08016128 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b088      	sub	sp, #32
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8016130:	f107 030c 	add.w	r3, r7, #12
 8016134:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 801613c:	69fb      	ldr	r3, [r7, #28]
 801613e:	212e      	movs	r1, #46	@ 0x2e
 8016140:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8016144:	f000 fae8 	bl	8016718 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016148:	69fb      	ldr	r3, [r7, #28]
 801614a:	330b      	adds	r3, #11
 801614c:	78db      	ldrb	r3, [r3, #3]
}
 801614e:	4618      	mov	r0, r3
 8016150:	3720      	adds	r7, #32
 8016152:	46bd      	mov	sp, r7
 8016154:	bd80      	pop	{r7, pc}

08016156 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8016156:	b580      	push	{r7, lr}
 8016158:	b088      	sub	sp, #32
 801615a:	af00      	add	r7, sp, #0
 801615c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801615e:	f107 030c 	add.w	r3, r7, #12
 8016162:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801616a:	69fb      	ldr	r3, [r7, #28]
 801616c:	210f      	movs	r1, #15
 801616e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8016172:	f000 fad1 	bl	8016718 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016176:	69fb      	ldr	r3, [r7, #28]
 8016178:	330b      	adds	r3, #11
 801617a:	78db      	ldrb	r3, [r3, #3]
}
 801617c:	4618      	mov	r0, r3
 801617e:	3720      	adds	r7, #32
 8016180:	46bd      	mov	sp, r7
 8016182:	bd80      	pop	{r7, pc}

08016184 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b088      	sub	sp, #32
 8016188:	af00      	add	r7, sp, #0
 801618a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801618c:	f107 030c 	add.w	r3, r7, #12
 8016190:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8016192:	69fb      	ldr	r3, [r7, #28]
 8016194:	687a      	ldr	r2, [r7, #4]
 8016196:	2110      	movs	r1, #16
 8016198:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 801619c:	f000 fabc 	bl	8016718 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80161a0:	69fb      	ldr	r3, [r7, #28]
 80161a2:	330b      	adds	r3, #11
 80161a4:	78db      	ldrb	r3, [r3, #3]
}
 80161a6:	4618      	mov	r0, r3
 80161a8:	3720      	adds	r7, #32
 80161aa:	46bd      	mov	sp, r7
 80161ac:	bd80      	pop	{r7, pc}
	...

080161b0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80161b0:	b480      	push	{r7}
 80161b2:	b08b      	sub	sp, #44	@ 0x2c
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80161b8:	2300      	movs	r3, #0
 80161ba:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80161bc:	2300      	movs	r3, #0
 80161be:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80161c0:	2300      	movs	r3, #0
 80161c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80161c4:	2300      	movs	r3, #0
 80161c6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80161c8:	2300      	movs	r3, #0
 80161ca:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80161cc:	2300      	movs	r3, #0
 80161ce:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80161d0:	2300      	movs	r3, #0
 80161d2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80161d4:	2300      	movs	r3, #0
 80161d6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80161d8:	4b4a      	ldr	r3, [pc, #296]	@ (8016304 <SHCI_GetWirelessFwInfo+0x154>)
 80161da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80161dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80161e0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80161e2:	693b      	ldr	r3, [r7, #16]
 80161e4:	009b      	lsls	r3, r3, #2
 80161e6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80161ea:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	4a44      	ldr	r2, [pc, #272]	@ (8016308 <SHCI_GetWirelessFwInfo+0x158>)
 80161f8:	4293      	cmp	r3, r2
 80161fa:	d10f      	bne.n	801621c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	695b      	ldr	r3, [r3, #20]
 8016200:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	699b      	ldr	r3, [r3, #24]
 8016206:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	69db      	ldr	r3, [r3, #28]
 801620c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801620e:	68bb      	ldr	r3, [r7, #8]
 8016210:	68db      	ldr	r3, [r3, #12]
 8016212:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8016214:	68bb      	ldr	r3, [r7, #8]
 8016216:	691b      	ldr	r3, [r3, #16]
 8016218:	617b      	str	r3, [r7, #20]
 801621a:	e01a      	b.n	8016252 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801621c:	693b      	ldr	r3, [r7, #16]
 801621e:	009b      	lsls	r3, r3, #2
 8016220:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8016224:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8016228:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	691b      	ldr	r3, [r3, #16]
 8016230:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	695b      	ldr	r3, [r3, #20]
 8016238:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	699b      	ldr	r3, [r3, #24]
 8016240:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	685b      	ldr	r3, [r3, #4]
 8016248:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	689b      	ldr	r3, [r3, #8]
 8016250:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8016252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016254:	0e1b      	lsrs	r3, r3, #24
 8016256:	b2da      	uxtb	r2, r3
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801625e:	0c1b      	lsrs	r3, r3, #16
 8016260:	b2da      	uxtb	r2, r3
 8016262:	687b      	ldr	r3, [r7, #4]
 8016264:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016268:	0a1b      	lsrs	r3, r3, #8
 801626a:	b2da      	uxtb	r2, r3
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8016270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016272:	091b      	lsrs	r3, r3, #4
 8016274:	b2db      	uxtb	r3, r3
 8016276:	f003 030f 	and.w	r3, r3, #15
 801627a:	b2da      	uxtb	r2, r3
 801627c:	687b      	ldr	r3, [r7, #4]
 801627e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8016280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016282:	b2db      	uxtb	r3, r3
 8016284:	f003 030f 	and.w	r3, r3, #15
 8016288:	b2da      	uxtb	r2, r3
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801628e:	6a3b      	ldr	r3, [r7, #32]
 8016290:	0e1b      	lsrs	r3, r3, #24
 8016292:	b2da      	uxtb	r2, r3
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8016298:	6a3b      	ldr	r3, [r7, #32]
 801629a:	0c1b      	lsrs	r3, r3, #16
 801629c:	b2da      	uxtb	r2, r3
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80162a2:	6a3b      	ldr	r3, [r7, #32]
 80162a4:	0a1b      	lsrs	r3, r3, #8
 80162a6:	b2da      	uxtb	r2, r3
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80162ac:	6a3b      	ldr	r3, [r7, #32]
 80162ae:	b2da      	uxtb	r2, r3
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80162b4:	69fb      	ldr	r3, [r7, #28]
 80162b6:	b2da      	uxtb	r2, r3
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80162bc:	69bb      	ldr	r3, [r7, #24]
 80162be:	0e1b      	lsrs	r3, r3, #24
 80162c0:	b2da      	uxtb	r2, r3
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80162c6:	69bb      	ldr	r3, [r7, #24]
 80162c8:	0c1b      	lsrs	r3, r3, #16
 80162ca:	b2da      	uxtb	r2, r3
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	0a1b      	lsrs	r3, r3, #8
 80162d4:	b2da      	uxtb	r2, r3
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	0e1b      	lsrs	r3, r3, #24
 80162de:	b2da      	uxtb	r2, r3
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80162e4:	697b      	ldr	r3, [r7, #20]
 80162e6:	0c1b      	lsrs	r3, r3, #16
 80162e8:	b2da      	uxtb	r2, r3
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	b2da      	uxtb	r2, r3
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80162f6:	2300      	movs	r3, #0
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	372c      	adds	r7, #44	@ 0x2c
 80162fc:	46bd      	mov	sp, r7
 80162fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016302:	4770      	bx	lr
 8016304:	58004000 	.word	0x58004000
 8016308:	a94656b9 	.word	0xa94656b9

0801630c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b082      	sub	sp, #8
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
 8016314:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	685b      	ldr	r3, [r3, #4]
 801631a:	4a08      	ldr	r2, [pc, #32]	@ (801633c <hci_init+0x30>)
 801631c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801631e:	4a08      	ldr	r2, [pc, #32]	@ (8016340 <hci_init+0x34>)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8016324:	4806      	ldr	r0, [pc, #24]	@ (8016340 <hci_init+0x34>)
 8016326:	f000 f979 	bl	801661c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	681b      	ldr	r3, [r3, #0]
 801632e:	4618      	mov	r0, r3
 8016330:	f000 f8da 	bl	80164e8 <TlInit>

  return;
 8016334:	bf00      	nop
}
 8016336:	3708      	adds	r7, #8
 8016338:	46bd      	mov	sp, r7
 801633a:	bd80      	pop	{r7, pc}
 801633c:	200014a0 	.word	0x200014a0
 8016340:	20001478 	.word	0x20001478

08016344 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b084      	sub	sp, #16
 8016348:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801634a:	4822      	ldr	r0, [pc, #136]	@ (80163d4 <hci_user_evt_proc+0x90>)
 801634c:	f000 fd32 	bl	8016db4 <LST_is_empty>
 8016350:	4603      	mov	r3, r0
 8016352:	2b00      	cmp	r3, #0
 8016354:	d12b      	bne.n	80163ae <hci_user_evt_proc+0x6a>
 8016356:	4b20      	ldr	r3, [pc, #128]	@ (80163d8 <hci_user_evt_proc+0x94>)
 8016358:	781b      	ldrb	r3, [r3, #0]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d027      	beq.n	80163ae <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801635e:	f107 030c 	add.w	r3, r7, #12
 8016362:	4619      	mov	r1, r3
 8016364:	481b      	ldr	r0, [pc, #108]	@ (80163d4 <hci_user_evt_proc+0x90>)
 8016366:	f000 fdb4 	bl	8016ed2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801636a:	4b1c      	ldr	r3, [pc, #112]	@ (80163dc <hci_user_evt_proc+0x98>)
 801636c:	69db      	ldr	r3, [r3, #28]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d00c      	beq.n	801638c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8016376:	2301      	movs	r3, #1
 8016378:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801637a:	4b18      	ldr	r3, [pc, #96]	@ (80163dc <hci_user_evt_proc+0x98>)
 801637c:	69db      	ldr	r3, [r3, #28]
 801637e:	1d3a      	adds	r2, r7, #4
 8016380:	4610      	mov	r0, r2
 8016382:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8016384:	793a      	ldrb	r2, [r7, #4]
 8016386:	4b14      	ldr	r3, [pc, #80]	@ (80163d8 <hci_user_evt_proc+0x94>)
 8016388:	701a      	strb	r2, [r3, #0]
 801638a:	e002      	b.n	8016392 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801638c:	4b12      	ldr	r3, [pc, #72]	@ (80163d8 <hci_user_evt_proc+0x94>)
 801638e:	2201      	movs	r2, #1
 8016390:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8016392:	4b11      	ldr	r3, [pc, #68]	@ (80163d8 <hci_user_evt_proc+0x94>)
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d004      	beq.n	80163a4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801639a:	68fb      	ldr	r3, [r7, #12]
 801639c:	4618      	mov	r0, r3
 801639e:	f000 fc0d 	bl	8016bbc <TL_MM_EvtDone>
 80163a2:	e004      	b.n	80163ae <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80163a4:	68fb      	ldr	r3, [r7, #12]
 80163a6:	4619      	mov	r1, r3
 80163a8:	480a      	ldr	r0, [pc, #40]	@ (80163d4 <hci_user_evt_proc+0x90>)
 80163aa:	f000 fd25 	bl	8016df8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80163ae:	4809      	ldr	r0, [pc, #36]	@ (80163d4 <hci_user_evt_proc+0x90>)
 80163b0:	f000 fd00 	bl	8016db4 <LST_is_empty>
 80163b4:	4603      	mov	r3, r0
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d107      	bne.n	80163ca <hci_user_evt_proc+0x86>
 80163ba:	4b07      	ldr	r3, [pc, #28]	@ (80163d8 <hci_user_evt_proc+0x94>)
 80163bc:	781b      	ldrb	r3, [r3, #0]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d003      	beq.n	80163ca <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80163c2:	4804      	ldr	r0, [pc, #16]	@ (80163d4 <hci_user_evt_proc+0x90>)
 80163c4:	f001 fd50 	bl	8017e68 <hci_notify_asynch_evt>
  }


  return;
 80163c8:	bf00      	nop
 80163ca:	bf00      	nop
}
 80163cc:	3710      	adds	r7, #16
 80163ce:	46bd      	mov	sp, r7
 80163d0:	bd80      	pop	{r7, pc}
 80163d2:	bf00      	nop
 80163d4:	20000348 	.word	0x20000348
 80163d8:	20000354 	.word	0x20000354
 80163dc:	20001478 	.word	0x20001478

080163e0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80163e0:	b580      	push	{r7, lr}
 80163e2:	b088      	sub	sp, #32
 80163e4:	af00      	add	r7, sp, #0
 80163e6:	6078      	str	r0, [r7, #4]
 80163e8:	460b      	mov	r3, r1
 80163ea:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80163ec:	2000      	movs	r0, #0
 80163ee:	f000 f8d1 	bl	8016594 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80163f2:	2300      	movs	r3, #0
 80163f4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80163f6:	687b      	ldr	r3, [r7, #4]
 80163f8:	885b      	ldrh	r3, [r3, #2]
 80163fa:	b21b      	sxth	r3, r3
 80163fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016400:	b21a      	sxth	r2, r3
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	881b      	ldrh	r3, [r3, #0]
 8016406:	029b      	lsls	r3, r3, #10
 8016408:	b21b      	sxth	r3, r3
 801640a:	4313      	orrs	r3, r2
 801640c:	b21b      	sxth	r3, r3
 801640e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8016410:	4b33      	ldr	r3, [pc, #204]	@ (80164e0 <hci_send_req+0x100>)
 8016412:	2201      	movs	r2, #1
 8016414:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	68db      	ldr	r3, [r3, #12]
 801641a:	b2d9      	uxtb	r1, r3
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	689a      	ldr	r2, [r3, #8]
 8016420:	8bbb      	ldrh	r3, [r7, #28]
 8016422:	4618      	mov	r0, r3
 8016424:	f000 f890 	bl	8016548 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8016428:	e04e      	b.n	80164c8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801642a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801642e:	f001 fd32 	bl	8017e96 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8016432:	e043      	b.n	80164bc <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8016434:	f107 030c 	add.w	r3, r7, #12
 8016438:	4619      	mov	r1, r3
 801643a:	482a      	ldr	r0, [pc, #168]	@ (80164e4 <hci_send_req+0x104>)
 801643c:	f000 fd49 	bl	8016ed2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	7a5b      	ldrb	r3, [r3, #9]
 8016444:	2b0f      	cmp	r3, #15
 8016446:	d114      	bne.n	8016472 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	330b      	adds	r3, #11
 801644c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801644e:	693b      	ldr	r3, [r7, #16]
 8016450:	885b      	ldrh	r3, [r3, #2]
 8016452:	b29b      	uxth	r3, r3
 8016454:	8bba      	ldrh	r2, [r7, #28]
 8016456:	429a      	cmp	r2, r3
 8016458:	d104      	bne.n	8016464 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	691b      	ldr	r3, [r3, #16]
 801645e:	693a      	ldr	r2, [r7, #16]
 8016460:	7812      	ldrb	r2, [r2, #0]
 8016462:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8016464:	693b      	ldr	r3, [r7, #16]
 8016466:	785b      	ldrb	r3, [r3, #1]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d027      	beq.n	80164bc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801646c:	2301      	movs	r3, #1
 801646e:	77fb      	strb	r3, [r7, #31]
 8016470:	e024      	b.n	80164bc <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	330b      	adds	r3, #11
 8016476:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8016478:	69bb      	ldr	r3, [r7, #24]
 801647a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801647e:	b29b      	uxth	r3, r3
 8016480:	8bba      	ldrh	r2, [r7, #28]
 8016482:	429a      	cmp	r2, r3
 8016484:	d114      	bne.n	80164b0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	7a9b      	ldrb	r3, [r3, #10]
 801648a:	3b03      	subs	r3, #3
 801648c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	695a      	ldr	r2, [r3, #20]
 8016492:	7dfb      	ldrb	r3, [r7, #23]
 8016494:	429a      	cmp	r2, r3
 8016496:	bfa8      	it	ge
 8016498:	461a      	movge	r2, r3
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	6918      	ldr	r0, [r3, #16]
 80164a2:	69bb      	ldr	r3, [r7, #24]
 80164a4:	1cd9      	adds	r1, r3, #3
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	695b      	ldr	r3, [r3, #20]
 80164aa:	461a      	mov	r2, r3
 80164ac:	f005 f8ed 	bl	801b68a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80164b0:	69bb      	ldr	r3, [r7, #24]
 80164b2:	781b      	ldrb	r3, [r3, #0]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d001      	beq.n	80164bc <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80164b8:	2301      	movs	r3, #1
 80164ba:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80164bc:	4809      	ldr	r0, [pc, #36]	@ (80164e4 <hci_send_req+0x104>)
 80164be:	f000 fc79 	bl	8016db4 <LST_is_empty>
 80164c2:	4603      	mov	r3, r0
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d0b5      	beq.n	8016434 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80164c8:	7ffb      	ldrb	r3, [r7, #31]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d0ad      	beq.n	801642a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80164ce:	2001      	movs	r0, #1
 80164d0:	f000 f860 	bl	8016594 <NotifyCmdStatus>

  return 0;
 80164d4:	2300      	movs	r3, #0
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3720      	adds	r7, #32
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}
 80164de:	bf00      	nop
 80164e0:	200014a4 	.word	0x200014a4
 80164e4:	20001498 	.word	0x20001498

080164e8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	b086      	sub	sp, #24
 80164ec:	af00      	add	r7, sp, #0
 80164ee:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80164f0:	480f      	ldr	r0, [pc, #60]	@ (8016530 <TlInit+0x48>)
 80164f2:	f000 fc4f 	bl	8016d94 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80164f6:	4a0f      	ldr	r2, [pc, #60]	@ (8016534 <TlInit+0x4c>)
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80164fc:	480e      	ldr	r0, [pc, #56]	@ (8016538 <TlInit+0x50>)
 80164fe:	f000 fc49 	bl	8016d94 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8016502:	4b0e      	ldr	r3, [pc, #56]	@ (801653c <TlInit+0x54>)
 8016504:	2201      	movs	r2, #1
 8016506:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8016508:	4b0d      	ldr	r3, [pc, #52]	@ (8016540 <TlInit+0x58>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	2b00      	cmp	r3, #0
 801650e:	d00a      	beq.n	8016526 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8016514:	4b0b      	ldr	r3, [pc, #44]	@ (8016544 <TlInit+0x5c>)
 8016516:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8016518:	4b09      	ldr	r3, [pc, #36]	@ (8016540 <TlInit+0x58>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	f107 0208 	add.w	r2, r7, #8
 8016520:	4610      	mov	r0, r2
 8016522:	4798      	blx	r3
  }

  return;
 8016524:	bf00      	nop
 8016526:	bf00      	nop
}
 8016528:	3718      	adds	r7, #24
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}
 801652e:	bf00      	nop
 8016530:	20001498 	.word	0x20001498
 8016534:	20000350 	.word	0x20000350
 8016538:	20000348 	.word	0x20000348
 801653c:	20000354 	.word	0x20000354
 8016540:	20001478 	.word	0x20001478
 8016544:	080165d5 	.word	0x080165d5

08016548 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b082      	sub	sp, #8
 801654c:	af00      	add	r7, sp, #0
 801654e:	4603      	mov	r3, r0
 8016550:	603a      	str	r2, [r7, #0]
 8016552:	80fb      	strh	r3, [r7, #6]
 8016554:	460b      	mov	r3, r1
 8016556:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8016558:	4b0c      	ldr	r3, [pc, #48]	@ (801658c <SendCmd+0x44>)
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	88fa      	ldrh	r2, [r7, #6]
 801655e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8016562:	4b0a      	ldr	r3, [pc, #40]	@ (801658c <SendCmd+0x44>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	797a      	ldrb	r2, [r7, #5]
 8016568:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801656a:	4b08      	ldr	r3, [pc, #32]	@ (801658c <SendCmd+0x44>)
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	330c      	adds	r3, #12
 8016570:	797a      	ldrb	r2, [r7, #5]
 8016572:	6839      	ldr	r1, [r7, #0]
 8016574:	4618      	mov	r0, r3
 8016576:	f005 f888 	bl	801b68a <memcpy>

  hciContext.io.Send(0,0);
 801657a:	4b05      	ldr	r3, [pc, #20]	@ (8016590 <SendCmd+0x48>)
 801657c:	691b      	ldr	r3, [r3, #16]
 801657e:	2100      	movs	r1, #0
 8016580:	2000      	movs	r0, #0
 8016582:	4798      	blx	r3

  return;
 8016584:	bf00      	nop
}
 8016586:	3708      	adds	r7, #8
 8016588:	46bd      	mov	sp, r7
 801658a:	bd80      	pop	{r7, pc}
 801658c:	20000350 	.word	0x20000350
 8016590:	20001478 	.word	0x20001478

08016594 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b082      	sub	sp, #8
 8016598:	af00      	add	r7, sp, #0
 801659a:	4603      	mov	r3, r0
 801659c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 801659e:	79fb      	ldrb	r3, [r7, #7]
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d108      	bne.n	80165b6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80165a4:	4b0a      	ldr	r3, [pc, #40]	@ (80165d0 <NotifyCmdStatus+0x3c>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d00d      	beq.n	80165c8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80165ac:	4b08      	ldr	r3, [pc, #32]	@ (80165d0 <NotifyCmdStatus+0x3c>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2000      	movs	r0, #0
 80165b2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80165b4:	e008      	b.n	80165c8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80165b6:	4b06      	ldr	r3, [pc, #24]	@ (80165d0 <NotifyCmdStatus+0x3c>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d004      	beq.n	80165c8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80165be:	4b04      	ldr	r3, [pc, #16]	@ (80165d0 <NotifyCmdStatus+0x3c>)
 80165c0:	681b      	ldr	r3, [r3, #0]
 80165c2:	2001      	movs	r0, #1
 80165c4:	4798      	blx	r3
  return;
 80165c6:	bf00      	nop
 80165c8:	bf00      	nop
}
 80165ca:	3708      	adds	r7, #8
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bd80      	pop	{r7, pc}
 80165d0:	200014a0 	.word	0x200014a0

080165d4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	7a5b      	ldrb	r3, [r3, #9]
 80165e0:	2b0f      	cmp	r3, #15
 80165e2:	d003      	beq.n	80165ec <TlEvtReceived+0x18>
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	7a5b      	ldrb	r3, [r3, #9]
 80165e8:	2b0e      	cmp	r3, #14
 80165ea:	d107      	bne.n	80165fc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80165ec:	6879      	ldr	r1, [r7, #4]
 80165ee:	4809      	ldr	r0, [pc, #36]	@ (8016614 <TlEvtReceived+0x40>)
 80165f0:	f000 fc28 	bl	8016e44 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80165f4:	2000      	movs	r0, #0
 80165f6:	f001 fc43 	bl	8017e80 <hci_cmd_resp_release>
 80165fa:	e006      	b.n	801660a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80165fc:	6879      	ldr	r1, [r7, #4]
 80165fe:	4806      	ldr	r0, [pc, #24]	@ (8016618 <TlEvtReceived+0x44>)
 8016600:	f000 fc20 	bl	8016e44 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016604:	4804      	ldr	r0, [pc, #16]	@ (8016618 <TlEvtReceived+0x44>)
 8016606:	f001 fc2f 	bl	8017e68 <hci_notify_asynch_evt>
  }

  return;
 801660a:	bf00      	nop
}
 801660c:	3708      	adds	r7, #8
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}
 8016612:	bf00      	nop
 8016614:	20001498 	.word	0x20001498
 8016618:	20000348 	.word	0x20000348

0801661c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 801661c:	b480      	push	{r7}
 801661e:	b083      	sub	sp, #12
 8016620:	af00      	add	r7, sp, #0
 8016622:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	4a05      	ldr	r2, [pc, #20]	@ (801663c <hci_register_io_bus+0x20>)
 8016628:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	4a04      	ldr	r2, [pc, #16]	@ (8016640 <hci_register_io_bus+0x24>)
 801662e:	611a      	str	r2, [r3, #16]

  return;
 8016630:	bf00      	nop
}
 8016632:	370c      	adds	r7, #12
 8016634:	46bd      	mov	sp, r7
 8016636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663a:	4770      	bx	lr
 801663c:	08016935 	.word	0x08016935
 8016640:	0801699d 	.word	0x0801699d

08016644 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	685b      	ldr	r3, [r3, #4]
 8016652:	4a08      	ldr	r2, [pc, #32]	@ (8016674 <shci_init+0x30>)
 8016654:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8016656:	4a08      	ldr	r2, [pc, #32]	@ (8016678 <shci_init+0x34>)
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801665c:	4806      	ldr	r0, [pc, #24]	@ (8016678 <shci_init+0x34>)
 801665e:	f000 f915 	bl	801688c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	4618      	mov	r0, r3
 8016668:	f000 f898 	bl	801679c <TlInit>

  return;
 801666c:	bf00      	nop
}
 801666e:	3708      	adds	r7, #8
 8016670:	46bd      	mov	sp, r7
 8016672:	bd80      	pop	{r7, pc}
 8016674:	200014c8 	.word	0x200014c8
 8016678:	200014a8 	.word	0x200014a8

0801667c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b084      	sub	sp, #16
 8016680:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016682:	4822      	ldr	r0, [pc, #136]	@ (801670c <shci_user_evt_proc+0x90>)
 8016684:	f000 fb96 	bl	8016db4 <LST_is_empty>
 8016688:	4603      	mov	r3, r0
 801668a:	2b00      	cmp	r3, #0
 801668c:	d12b      	bne.n	80166e6 <shci_user_evt_proc+0x6a>
 801668e:	4b20      	ldr	r3, [pc, #128]	@ (8016710 <shci_user_evt_proc+0x94>)
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d027      	beq.n	80166e6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8016696:	f107 030c 	add.w	r3, r7, #12
 801669a:	4619      	mov	r1, r3
 801669c:	481b      	ldr	r0, [pc, #108]	@ (801670c <shci_user_evt_proc+0x90>)
 801669e:	f000 fc18 	bl	8016ed2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80166a2:	4b1c      	ldr	r3, [pc, #112]	@ (8016714 <shci_user_evt_proc+0x98>)
 80166a4:	69db      	ldr	r3, [r3, #28]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d00c      	beq.n	80166c4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80166ae:	2301      	movs	r3, #1
 80166b0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80166b2:	4b18      	ldr	r3, [pc, #96]	@ (8016714 <shci_user_evt_proc+0x98>)
 80166b4:	69db      	ldr	r3, [r3, #28]
 80166b6:	1d3a      	adds	r2, r7, #4
 80166b8:	4610      	mov	r0, r2
 80166ba:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80166bc:	793a      	ldrb	r2, [r7, #4]
 80166be:	4b14      	ldr	r3, [pc, #80]	@ (8016710 <shci_user_evt_proc+0x94>)
 80166c0:	701a      	strb	r2, [r3, #0]
 80166c2:	e002      	b.n	80166ca <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80166c4:	4b12      	ldr	r3, [pc, #72]	@ (8016710 <shci_user_evt_proc+0x94>)
 80166c6:	2201      	movs	r2, #1
 80166c8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80166ca:	4b11      	ldr	r3, [pc, #68]	@ (8016710 <shci_user_evt_proc+0x94>)
 80166cc:	781b      	ldrb	r3, [r3, #0]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d004      	beq.n	80166dc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	4618      	mov	r0, r3
 80166d6:	f000 fa71 	bl	8016bbc <TL_MM_EvtDone>
 80166da:	e004      	b.n	80166e6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80166dc:	68fb      	ldr	r3, [r7, #12]
 80166de:	4619      	mov	r1, r3
 80166e0:	480a      	ldr	r0, [pc, #40]	@ (801670c <shci_user_evt_proc+0x90>)
 80166e2:	f000 fb89 	bl	8016df8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80166e6:	4809      	ldr	r0, [pc, #36]	@ (801670c <shci_user_evt_proc+0x90>)
 80166e8:	f000 fb64 	bl	8016db4 <LST_is_empty>
 80166ec:	4603      	mov	r3, r0
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d107      	bne.n	8016702 <shci_user_evt_proc+0x86>
 80166f2:	4b07      	ldr	r3, [pc, #28]	@ (8016710 <shci_user_evt_proc+0x94>)
 80166f4:	781b      	ldrb	r3, [r3, #0]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d003      	beq.n	8016702 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80166fa:	4804      	ldr	r0, [pc, #16]	@ (801670c <shci_user_evt_proc+0x90>)
 80166fc:	f7eb fa38 	bl	8001b70 <shci_notify_asynch_evt>
  }


  return;
 8016700:	bf00      	nop
 8016702:	bf00      	nop
}
 8016704:	3710      	adds	r7, #16
 8016706:	46bd      	mov	sp, r7
 8016708:	bd80      	pop	{r7, pc}
 801670a:	bf00      	nop
 801670c:	20000358 	.word	0x20000358
 8016710:	20000368 	.word	0x20000368
 8016714:	200014a8 	.word	0x200014a8

08016718 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8016718:	b580      	push	{r7, lr}
 801671a:	b084      	sub	sp, #16
 801671c:	af00      	add	r7, sp, #0
 801671e:	60ba      	str	r2, [r7, #8]
 8016720:	607b      	str	r3, [r7, #4]
 8016722:	4603      	mov	r3, r0
 8016724:	81fb      	strh	r3, [r7, #14]
 8016726:	460b      	mov	r3, r1
 8016728:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801672a:	2000      	movs	r0, #0
 801672c:	f000 f868 	bl	8016800 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8016730:	4b17      	ldr	r3, [pc, #92]	@ (8016790 <shci_send+0x78>)
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	89fa      	ldrh	r2, [r7, #14]
 8016736:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801673a:	4b15      	ldr	r3, [pc, #84]	@ (8016790 <shci_send+0x78>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	7b7a      	ldrb	r2, [r7, #13]
 8016740:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8016742:	4b13      	ldr	r3, [pc, #76]	@ (8016790 <shci_send+0x78>)
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	330c      	adds	r3, #12
 8016748:	7b7a      	ldrb	r2, [r7, #13]
 801674a:	68b9      	ldr	r1, [r7, #8]
 801674c:	4618      	mov	r0, r3
 801674e:	f004 ff9c 	bl	801b68a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8016752:	4b10      	ldr	r3, [pc, #64]	@ (8016794 <shci_send+0x7c>)
 8016754:	2201      	movs	r2, #1
 8016756:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8016758:	4b0f      	ldr	r3, [pc, #60]	@ (8016798 <shci_send+0x80>)
 801675a:	691b      	ldr	r3, [r3, #16]
 801675c:	2100      	movs	r1, #0
 801675e:	2000      	movs	r0, #0
 8016760:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8016762:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8016766:	f7eb fa1a 	bl	8001b9e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f103 0008 	add.w	r0, r3, #8
 8016770:	4b07      	ldr	r3, [pc, #28]	@ (8016790 <shci_send+0x78>)
 8016772:	6819      	ldr	r1, [r3, #0]
 8016774:	4b06      	ldr	r3, [pc, #24]	@ (8016790 <shci_send+0x78>)
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	789b      	ldrb	r3, [r3, #2]
 801677a:	3303      	adds	r3, #3
 801677c:	461a      	mov	r2, r3
 801677e:	f004 ff84 	bl	801b68a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016782:	2001      	movs	r0, #1
 8016784:	f000 f83c 	bl	8016800 <Cmd_SetStatus>

  return;
 8016788:	bf00      	nop
}
 801678a:	3710      	adds	r7, #16
 801678c:	46bd      	mov	sp, r7
 801678e:	bd80      	pop	{r7, pc}
 8016790:	20000364 	.word	0x20000364
 8016794:	200014cc 	.word	0x200014cc
 8016798:	200014a8 	.word	0x200014a8

0801679c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b086      	sub	sp, #24
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80167a4:	4a10      	ldr	r2, [pc, #64]	@ (80167e8 <TlInit+0x4c>)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80167aa:	4810      	ldr	r0, [pc, #64]	@ (80167ec <TlInit+0x50>)
 80167ac:	f000 faf2 	bl	8016d94 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80167b0:	2001      	movs	r0, #1
 80167b2:	f000 f825 	bl	8016800 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80167b6:	4b0e      	ldr	r3, [pc, #56]	@ (80167f0 <TlInit+0x54>)
 80167b8:	2201      	movs	r2, #1
 80167ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80167bc:	4b0d      	ldr	r3, [pc, #52]	@ (80167f4 <TlInit+0x58>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	2b00      	cmp	r3, #0
 80167c2:	d00c      	beq.n	80167de <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80167c8:	4b0b      	ldr	r3, [pc, #44]	@ (80167f8 <TlInit+0x5c>)
 80167ca:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80167cc:	4b0b      	ldr	r3, [pc, #44]	@ (80167fc <TlInit+0x60>)
 80167ce:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80167d0:	4b08      	ldr	r3, [pc, #32]	@ (80167f4 <TlInit+0x58>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	f107 020c 	add.w	r2, r7, #12
 80167d8:	4610      	mov	r0, r2
 80167da:	4798      	blx	r3
  }

  return;
 80167dc:	bf00      	nop
 80167de:	bf00      	nop
}
 80167e0:	3718      	adds	r7, #24
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}
 80167e6:	bf00      	nop
 80167e8:	20000364 	.word	0x20000364
 80167ec:	20000358 	.word	0x20000358
 80167f0:	20000368 	.word	0x20000368
 80167f4:	200014a8 	.word	0x200014a8
 80167f8:	08016851 	.word	0x08016851
 80167fc:	08016869 	.word	0x08016869

08016800 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b082      	sub	sp, #8
 8016804:	af00      	add	r7, sp, #0
 8016806:	4603      	mov	r3, r0
 8016808:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801680a:	79fb      	ldrb	r3, [r7, #7]
 801680c:	2b00      	cmp	r3, #0
 801680e:	d10b      	bne.n	8016828 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8016810:	4b0d      	ldr	r3, [pc, #52]	@ (8016848 <Cmd_SetStatus+0x48>)
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	2b00      	cmp	r3, #0
 8016816:	d003      	beq.n	8016820 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8016818:	4b0b      	ldr	r3, [pc, #44]	@ (8016848 <Cmd_SetStatus+0x48>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	2000      	movs	r0, #0
 801681e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8016820:	4b0a      	ldr	r3, [pc, #40]	@ (801684c <Cmd_SetStatus+0x4c>)
 8016822:	2200      	movs	r2, #0
 8016824:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8016826:	e00b      	b.n	8016840 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8016828:	4b08      	ldr	r3, [pc, #32]	@ (801684c <Cmd_SetStatus+0x4c>)
 801682a:	2201      	movs	r2, #1
 801682c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801682e:	4b06      	ldr	r3, [pc, #24]	@ (8016848 <Cmd_SetStatus+0x48>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	2b00      	cmp	r3, #0
 8016834:	d004      	beq.n	8016840 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8016836:	4b04      	ldr	r3, [pc, #16]	@ (8016848 <Cmd_SetStatus+0x48>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	2001      	movs	r0, #1
 801683c:	4798      	blx	r3
  return;
 801683e:	bf00      	nop
 8016840:	bf00      	nop
}
 8016842:	3708      	adds	r7, #8
 8016844:	46bd      	mov	sp, r7
 8016846:	bd80      	pop	{r7, pc}
 8016848:	200014c8 	.word	0x200014c8
 801684c:	20000360 	.word	0x20000360

08016850 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8016858:	2000      	movs	r0, #0
 801685a:	f7eb f995 	bl	8001b88 <shci_cmd_resp_release>

  return;
 801685e:	bf00      	nop
}
 8016860:	3708      	adds	r7, #8
 8016862:	46bd      	mov	sp, r7
 8016864:	bd80      	pop	{r7, pc}
	...

08016868 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016868:	b580      	push	{r7, lr}
 801686a:	b082      	sub	sp, #8
 801686c:	af00      	add	r7, sp, #0
 801686e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8016870:	6879      	ldr	r1, [r7, #4]
 8016872:	4805      	ldr	r0, [pc, #20]	@ (8016888 <TlUserEvtReceived+0x20>)
 8016874:	f000 fae6 	bl	8016e44 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016878:	4803      	ldr	r0, [pc, #12]	@ (8016888 <TlUserEvtReceived+0x20>)
 801687a:	f7eb f979 	bl	8001b70 <shci_notify_asynch_evt>

  return;
 801687e:	bf00      	nop
}
 8016880:	3708      	adds	r7, #8
 8016882:	46bd      	mov	sp, r7
 8016884:	bd80      	pop	{r7, pc}
 8016886:	bf00      	nop
 8016888:	20000358 	.word	0x20000358

0801688c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801688c:	b480      	push	{r7}
 801688e:	b083      	sub	sp, #12
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	4a05      	ldr	r2, [pc, #20]	@ (80168ac <shci_register_io_bus+0x20>)
 8016898:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	4a04      	ldr	r2, [pc, #16]	@ (80168b0 <shci_register_io_bus+0x24>)
 801689e:	611a      	str	r2, [r3, #16]

  return;
 80168a0:	bf00      	nop
}
 80168a2:	370c      	adds	r7, #12
 80168a4:	46bd      	mov	sp, r7
 80168a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168aa:	4770      	bx	lr
 80168ac:	08016a49 	.word	0x08016a49
 80168b0:	08016a9d 	.word	0x08016a9d

080168b4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80168b8:	f001 fdd2 	bl	8018460 <HW_IPCC_Enable>

  return;
 80168bc:	bf00      	nop
}
 80168be:	bd80      	pop	{r7, pc}

080168c0 <TL_Init>:


void TL_Init( void )
{
 80168c0:	b580      	push	{r7, lr}
 80168c2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80168c4:	4b10      	ldr	r3, [pc, #64]	@ (8016908 <TL_Init+0x48>)
 80168c6:	4a11      	ldr	r2, [pc, #68]	@ (801690c <TL_Init+0x4c>)
 80168c8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80168ca:	4b0f      	ldr	r3, [pc, #60]	@ (8016908 <TL_Init+0x48>)
 80168cc:	4a10      	ldr	r2, [pc, #64]	@ (8016910 <TL_Init+0x50>)
 80168ce:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80168d0:	4b0d      	ldr	r3, [pc, #52]	@ (8016908 <TL_Init+0x48>)
 80168d2:	4a10      	ldr	r2, [pc, #64]	@ (8016914 <TL_Init+0x54>)
 80168d4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80168d6:	4b0c      	ldr	r3, [pc, #48]	@ (8016908 <TL_Init+0x48>)
 80168d8:	4a0f      	ldr	r2, [pc, #60]	@ (8016918 <TL_Init+0x58>)
 80168da:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80168dc:	4b0a      	ldr	r3, [pc, #40]	@ (8016908 <TL_Init+0x48>)
 80168de:	4a0f      	ldr	r2, [pc, #60]	@ (801691c <TL_Init+0x5c>)
 80168e0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80168e2:	4b09      	ldr	r3, [pc, #36]	@ (8016908 <TL_Init+0x48>)
 80168e4:	4a0e      	ldr	r2, [pc, #56]	@ (8016920 <TL_Init+0x60>)
 80168e6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80168e8:	4b07      	ldr	r3, [pc, #28]	@ (8016908 <TL_Init+0x48>)
 80168ea:	4a0e      	ldr	r2, [pc, #56]	@ (8016924 <TL_Init+0x64>)
 80168ec:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80168ee:	4b06      	ldr	r3, [pc, #24]	@ (8016908 <TL_Init+0x48>)
 80168f0:	4a0d      	ldr	r2, [pc, #52]	@ (8016928 <TL_Init+0x68>)
 80168f2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80168f4:	4b04      	ldr	r3, [pc, #16]	@ (8016908 <TL_Init+0x48>)
 80168f6:	4a0d      	ldr	r2, [pc, #52]	@ (801692c <TL_Init+0x6c>)
 80168f8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80168fa:	4b03      	ldr	r3, [pc, #12]	@ (8016908 <TL_Init+0x48>)
 80168fc:	4a0c      	ldr	r2, [pc, #48]	@ (8016930 <TL_Init+0x70>)
 80168fe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016900:	f001 fdc2 	bl	8018488 <HW_IPCC_Init>

  return;
 8016904:	bf00      	nop
}
 8016906:	bd80      	pop	{r7, pc}
 8016908:	20030000 	.word	0x20030000
 801690c:	20030028 	.word	0x20030028
 8016910:	20030048 	.word	0x20030048
 8016914:	20030058 	.word	0x20030058
 8016918:	20030068 	.word	0x20030068
 801691c:	20030070 	.word	0x20030070
 8016920:	20030078 	.word	0x20030078
 8016924:	20030080 	.word	0x20030080
 8016928:	2003009c 	.word	0x2003009c
 801692c:	200300a0 	.word	0x200300a0
 8016930:	200300ac 	.word	0x200300ac

08016934 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b084      	sub	sp, #16
 8016938:	af00      	add	r7, sp, #0
 801693a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016940:	4811      	ldr	r0, [pc, #68]	@ (8016988 <TL_BLE_Init+0x54>)
 8016942:	f000 fa27 	bl	8016d94 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8016946:	4b11      	ldr	r3, [pc, #68]	@ (801698c <TL_BLE_Init+0x58>)
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	689a      	ldr	r2, [r3, #8]
 8016950:	68bb      	ldr	r3, [r7, #8]
 8016952:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	68da      	ldr	r2, [r3, #12]
 8016958:	68bb      	ldr	r3, [r7, #8]
 801695a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801695c:	68bb      	ldr	r3, [r7, #8]
 801695e:	4a0c      	ldr	r2, [pc, #48]	@ (8016990 <TL_BLE_Init+0x5c>)
 8016960:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8016962:	68bb      	ldr	r3, [r7, #8]
 8016964:	4a08      	ldr	r2, [pc, #32]	@ (8016988 <TL_BLE_Init+0x54>)
 8016966:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016968:	f001 fda4 	bl	80184b4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	4a08      	ldr	r2, [pc, #32]	@ (8016994 <TL_BLE_Init+0x60>)
 8016972:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	685b      	ldr	r3, [r3, #4]
 8016978:	4a07      	ldr	r2, [pc, #28]	@ (8016998 <TL_BLE_Init+0x64>)
 801697a:	6013      	str	r3, [r2, #0]

  return 0;
 801697c:	2300      	movs	r3, #0
}
 801697e:	4618      	mov	r0, r3
 8016980:	3710      	adds	r7, #16
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}
 8016986:	bf00      	nop
 8016988:	200300c8 	.word	0x200300c8
 801698c:	20030000 	.word	0x20030000
 8016990:	20030a58 	.word	0x20030a58
 8016994:	200014d8 	.word	0x200014d8
 8016998:	200014dc 	.word	0x200014dc

0801699c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b082      	sub	sp, #8
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
 80169a4:	460b      	mov	r3, r1
 80169a6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80169a8:	4b09      	ldr	r3, [pc, #36]	@ (80169d0 <TL_BLE_SendCmd+0x34>)
 80169aa:	685b      	ldr	r3, [r3, #4]
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	2201      	movs	r2, #1
 80169b0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80169b2:	4b07      	ldr	r3, [pc, #28]	@ (80169d0 <TL_BLE_SendCmd+0x34>)
 80169b4:	685b      	ldr	r3, [r3, #4]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	4619      	mov	r1, r3
 80169ba:	2001      	movs	r0, #1
 80169bc:	f000 f96c 	bl	8016c98 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80169c0:	f001 fd82 	bl	80184c8 <HW_IPCC_BLE_SendCmd>

  return 0;
 80169c4:	2300      	movs	r3, #0
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3708      	adds	r7, #8
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	20030000 	.word	0x20030000

080169d4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80169d4:	b580      	push	{r7, lr}
 80169d6:	b082      	sub	sp, #8
 80169d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80169da:	e01c      	b.n	8016a16 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80169dc:	1d3b      	adds	r3, r7, #4
 80169de:	4619      	mov	r1, r3
 80169e0:	4812      	ldr	r0, [pc, #72]	@ (8016a2c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80169e2:	f000 fa76 	bl	8016ed2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	7a5b      	ldrb	r3, [r3, #9]
 80169ea:	2b0f      	cmp	r3, #15
 80169ec:	d003      	beq.n	80169f6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	7a5b      	ldrb	r3, [r3, #9]
 80169f2:	2b0e      	cmp	r3, #14
 80169f4:	d105      	bne.n	8016a02 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	4619      	mov	r1, r3
 80169fa:	2002      	movs	r0, #2
 80169fc:	f000 f94c 	bl	8016c98 <OutputDbgTrace>
 8016a00:	e004      	b.n	8016a0c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	4619      	mov	r1, r3
 8016a06:	2003      	movs	r0, #3
 8016a08:	f000 f946 	bl	8016c98 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8016a0c:	4b08      	ldr	r3, [pc, #32]	@ (8016a30 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	687a      	ldr	r2, [r7, #4]
 8016a12:	4610      	mov	r0, r2
 8016a14:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016a16:	4805      	ldr	r0, [pc, #20]	@ (8016a2c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016a18:	f000 f9cc 	bl	8016db4 <LST_is_empty>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d0dc      	beq.n	80169dc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016a22:	bf00      	nop
}
 8016a24:	3708      	adds	r7, #8
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bd80      	pop	{r7, pc}
 8016a2a:	bf00      	nop
 8016a2c:	200300c8 	.word	0x200300c8
 8016a30:	200014d8 	.word	0x200014d8

08016a34 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016a34:	b580      	push	{r7, lr}
 8016a36:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016a38:	4b02      	ldr	r3, [pc, #8]	@ (8016a44 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	4798      	blx	r3

  return;
 8016a3e:	bf00      	nop
}
 8016a40:	bd80      	pop	{r7, pc}
 8016a42:	bf00      	nop
 8016a44:	200014dc 	.word	0x200014dc

08016a48 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b084      	sub	sp, #16
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016a54:	480d      	ldr	r0, [pc, #52]	@ (8016a8c <TL_SYS_Init+0x44>)
 8016a56:	f000 f99d 	bl	8016d94 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8016a90 <TL_SYS_Init+0x48>)
 8016a5c:	68db      	ldr	r3, [r3, #12]
 8016a5e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	689a      	ldr	r2, [r3, #8]
 8016a64:	68bb      	ldr	r3, [r7, #8]
 8016a66:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	4a08      	ldr	r2, [pc, #32]	@ (8016a8c <TL_SYS_Init+0x44>)
 8016a6c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016a6e:	f001 fd4d 	bl	801850c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	4a07      	ldr	r2, [pc, #28]	@ (8016a94 <TL_SYS_Init+0x4c>)
 8016a78:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	4a06      	ldr	r2, [pc, #24]	@ (8016a98 <TL_SYS_Init+0x50>)
 8016a80:	6013      	str	r3, [r2, #0]

  return 0;
 8016a82:	2300      	movs	r3, #0
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	3710      	adds	r7, #16
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}
 8016a8c:	200300d0 	.word	0x200300d0
 8016a90:	20030000 	.word	0x20030000
 8016a94:	200014e0 	.word	0x200014e0
 8016a98:	200014e4 	.word	0x200014e4

08016a9c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016a9c:	b580      	push	{r7, lr}
 8016a9e:	b082      	sub	sp, #8
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	6078      	str	r0, [r7, #4]
 8016aa4:	460b      	mov	r3, r1
 8016aa6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016aa8:	4b09      	ldr	r3, [pc, #36]	@ (8016ad0 <TL_SYS_SendCmd+0x34>)
 8016aaa:	68db      	ldr	r3, [r3, #12]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	2210      	movs	r2, #16
 8016ab0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8016ab2:	4b07      	ldr	r3, [pc, #28]	@ (8016ad0 <TL_SYS_SendCmd+0x34>)
 8016ab4:	68db      	ldr	r3, [r3, #12]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	4619      	mov	r1, r3
 8016aba:	2004      	movs	r0, #4
 8016abc:	f000 f8ec 	bl	8016c98 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8016ac0:	f001 fd2e 	bl	8018520 <HW_IPCC_SYS_SendCmd>

  return 0;
 8016ac4:	2300      	movs	r3, #0
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	3708      	adds	r7, #8
 8016aca:	46bd      	mov	sp, r7
 8016acc:	bd80      	pop	{r7, pc}
 8016ace:	bf00      	nop
 8016ad0:	20030000 	.word	0x20030000

08016ad4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016ad8:	4b07      	ldr	r3, [pc, #28]	@ (8016af8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016ada:	68db      	ldr	r3, [r3, #12]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	4619      	mov	r1, r3
 8016ae0:	2005      	movs	r0, #5
 8016ae2:	f000 f8d9 	bl	8016c98 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016ae6:	4b05      	ldr	r3, [pc, #20]	@ (8016afc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	4a03      	ldr	r2, [pc, #12]	@ (8016af8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016aec:	68d2      	ldr	r2, [r2, #12]
 8016aee:	6812      	ldr	r2, [r2, #0]
 8016af0:	4610      	mov	r0, r2
 8016af2:	4798      	blx	r3

  return;
 8016af4:	bf00      	nop
}
 8016af6:	bd80      	pop	{r7, pc}
 8016af8:	20030000 	.word	0x20030000
 8016afc:	200014e0 	.word	0x200014e0

08016b00 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b082      	sub	sp, #8
 8016b04:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016b06:	e00e      	b.n	8016b26 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016b08:	1d3b      	adds	r3, r7, #4
 8016b0a:	4619      	mov	r1, r3
 8016b0c:	480b      	ldr	r0, [pc, #44]	@ (8016b3c <HW_IPCC_SYS_EvtNot+0x3c>)
 8016b0e:	f000 f9e0 	bl	8016ed2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	4619      	mov	r1, r3
 8016b16:	2006      	movs	r0, #6
 8016b18:	f000 f8be 	bl	8016c98 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016b1c:	4b08      	ldr	r3, [pc, #32]	@ (8016b40 <HW_IPCC_SYS_EvtNot+0x40>)
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	687a      	ldr	r2, [r7, #4]
 8016b22:	4610      	mov	r0, r2
 8016b24:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016b26:	4805      	ldr	r0, [pc, #20]	@ (8016b3c <HW_IPCC_SYS_EvtNot+0x3c>)
 8016b28:	f000 f944 	bl	8016db4 <LST_is_empty>
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d0ea      	beq.n	8016b08 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016b32:	bf00      	nop
}
 8016b34:	3708      	adds	r7, #8
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}
 8016b3a:	bf00      	nop
 8016b3c:	200300d0 	.word	0x200300d0
 8016b40:	200014e4 	.word	0x200014e4

08016b44 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b082      	sub	sp, #8
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016b4c:	4817      	ldr	r0, [pc, #92]	@ (8016bac <TL_MM_Init+0x68>)
 8016b4e:	f000 f921 	bl	8016d94 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016b52:	4817      	ldr	r0, [pc, #92]	@ (8016bb0 <TL_MM_Init+0x6c>)
 8016b54:	f000 f91e 	bl	8016d94 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016b58:	4b16      	ldr	r3, [pc, #88]	@ (8016bb4 <TL_MM_Init+0x70>)
 8016b5a:	691b      	ldr	r3, [r3, #16]
 8016b5c:	4a16      	ldr	r2, [pc, #88]	@ (8016bb8 <TL_MM_Init+0x74>)
 8016b5e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016b60:	4b15      	ldr	r3, [pc, #84]	@ (8016bb8 <TL_MM_Init+0x74>)
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	687a      	ldr	r2, [r7, #4]
 8016b66:	6892      	ldr	r2, [r2, #8]
 8016b68:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016b6a:	4b13      	ldr	r3, [pc, #76]	@ (8016bb8 <TL_MM_Init+0x74>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	687a      	ldr	r2, [r7, #4]
 8016b70:	68d2      	ldr	r2, [r2, #12]
 8016b72:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016b74:	4b10      	ldr	r3, [pc, #64]	@ (8016bb8 <TL_MM_Init+0x74>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	4a0c      	ldr	r2, [pc, #48]	@ (8016bac <TL_MM_Init+0x68>)
 8016b7a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8016bb8 <TL_MM_Init+0x74>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	687a      	ldr	r2, [r7, #4]
 8016b82:	6812      	ldr	r2, [r2, #0]
 8016b84:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8016b86:	4b0c      	ldr	r3, [pc, #48]	@ (8016bb8 <TL_MM_Init+0x74>)
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	687a      	ldr	r2, [r7, #4]
 8016b8c:	6852      	ldr	r2, [r2, #4]
 8016b8e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016b90:	4b09      	ldr	r3, [pc, #36]	@ (8016bb8 <TL_MM_Init+0x74>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	687a      	ldr	r2, [r7, #4]
 8016b96:	6912      	ldr	r2, [r2, #16]
 8016b98:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016b9a:	4b07      	ldr	r3, [pc, #28]	@ (8016bb8 <TL_MM_Init+0x74>)
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	687a      	ldr	r2, [r7, #4]
 8016ba0:	6952      	ldr	r2, [r2, #20]
 8016ba2:	619a      	str	r2, [r3, #24]

  return;
 8016ba4:	bf00      	nop
}
 8016ba6:	3708      	adds	r7, #8
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	200300b8 	.word	0x200300b8
 8016bb0:	200014d0 	.word	0x200014d0
 8016bb4:	20030000 	.word	0x20030000
 8016bb8:	200014e8 	.word	0x200014e8

08016bbc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016bbc:	b580      	push	{r7, lr}
 8016bbe:	b082      	sub	sp, #8
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016bc4:	6879      	ldr	r1, [r7, #4]
 8016bc6:	4807      	ldr	r0, [pc, #28]	@ (8016be4 <TL_MM_EvtDone+0x28>)
 8016bc8:	f000 f93c 	bl	8016e44 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8016bcc:	6879      	ldr	r1, [r7, #4]
 8016bce:	2000      	movs	r0, #0
 8016bd0:	f000 f862 	bl	8016c98 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016bd4:	4804      	ldr	r0, [pc, #16]	@ (8016be8 <TL_MM_EvtDone+0x2c>)
 8016bd6:	f001 fcc9 	bl	801856c <HW_IPCC_MM_SendFreeBuf>

  return;
 8016bda:	bf00      	nop
}
 8016bdc:	3708      	adds	r7, #8
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	200014d0 	.word	0x200014d0
 8016be8:	08016bed 	.word	0x08016bed

08016bec <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016bf2:	e00c      	b.n	8016c0e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016bf4:	1d3b      	adds	r3, r7, #4
 8016bf6:	4619      	mov	r1, r3
 8016bf8:	480a      	ldr	r0, [pc, #40]	@ (8016c24 <SendFreeBuf+0x38>)
 8016bfa:	f000 f96a 	bl	8016ed2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8016bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8016c28 <SendFreeBuf+0x3c>)
 8016c00:	691b      	ldr	r3, [r3, #16]
 8016c02:	691b      	ldr	r3, [r3, #16]
 8016c04:	687a      	ldr	r2, [r7, #4]
 8016c06:	4611      	mov	r1, r2
 8016c08:	4618      	mov	r0, r3
 8016c0a:	f000 f91b 	bl	8016e44 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016c0e:	4805      	ldr	r0, [pc, #20]	@ (8016c24 <SendFreeBuf+0x38>)
 8016c10:	f000 f8d0 	bl	8016db4 <LST_is_empty>
 8016c14:	4603      	mov	r3, r0
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d0ec      	beq.n	8016bf4 <SendFreeBuf+0x8>
  }

  return;
 8016c1a:	bf00      	nop
}
 8016c1c:	3708      	adds	r7, #8
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}
 8016c22:	bf00      	nop
 8016c24:	200014d0 	.word	0x200014d0
 8016c28:	20030000 	.word	0x20030000

08016c2c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016c30:	4805      	ldr	r0, [pc, #20]	@ (8016c48 <TL_TRACES_Init+0x1c>)
 8016c32:	f000 f8af 	bl	8016d94 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016c36:	4b05      	ldr	r3, [pc, #20]	@ (8016c4c <TL_TRACES_Init+0x20>)
 8016c38:	695b      	ldr	r3, [r3, #20]
 8016c3a:	4a03      	ldr	r2, [pc, #12]	@ (8016c48 <TL_TRACES_Init+0x1c>)
 8016c3c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8016c3e:	f001 fccb 	bl	80185d8 <HW_IPCC_TRACES_Init>

  return;
 8016c42:	bf00      	nop
}
 8016c44:	bd80      	pop	{r7, pc}
 8016c46:	bf00      	nop
 8016c48:	200300c0 	.word	0x200300c0
 8016c4c:	20030000 	.word	0x20030000

08016c50 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016c56:	e008      	b.n	8016c6a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016c58:	1d3b      	adds	r3, r7, #4
 8016c5a:	4619      	mov	r1, r3
 8016c5c:	4808      	ldr	r0, [pc, #32]	@ (8016c80 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016c5e:	f000 f938 	bl	8016ed2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	4618      	mov	r0, r3
 8016c66:	f000 f80d 	bl	8016c84 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016c6a:	4805      	ldr	r0, [pc, #20]	@ (8016c80 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016c6c:	f000 f8a2 	bl	8016db4 <LST_is_empty>
 8016c70:	4603      	mov	r3, r0
 8016c72:	2b00      	cmp	r3, #0
 8016c74:	d0f0      	beq.n	8016c58 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016c76:	bf00      	nop
}
 8016c78:	3708      	adds	r7, #8
 8016c7a:	46bd      	mov	sp, r7
 8016c7c:	bd80      	pop	{r7, pc}
 8016c7e:	bf00      	nop
 8016c80:	200300c0 	.word	0x200300c0

08016c84 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8016c84:	b480      	push	{r7}
 8016c86:	b083      	sub	sp, #12
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8016c8c:	bf00      	nop
 8016c8e:	370c      	adds	r7, #12
 8016c90:	46bd      	mov	sp, r7
 8016c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c96:	4770      	bx	lr

08016c98 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8016c98:	b480      	push	{r7}
 8016c9a:	b087      	sub	sp, #28
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	6039      	str	r1, [r7, #0]
 8016ca2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8016ca4:	79fb      	ldrb	r3, [r7, #7]
 8016ca6:	2b06      	cmp	r3, #6
 8016ca8:	d845      	bhi.n	8016d36 <OutputDbgTrace+0x9e>
 8016caa:	a201      	add	r2, pc, #4	@ (adr r2, 8016cb0 <OutputDbgTrace+0x18>)
 8016cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cb0:	08016ccd 	.word	0x08016ccd
 8016cb4:	08016cf1 	.word	0x08016cf1
 8016cb8:	08016cf7 	.word	0x08016cf7
 8016cbc:	08016d0b 	.word	0x08016d0b
 8016cc0:	08016d17 	.word	0x08016d17
 8016cc4:	08016d1d 	.word	0x08016d1d
 8016cc8:	08016d2b 	.word	0x08016d2b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016ccc:	683b      	ldr	r3, [r7, #0]
 8016cce:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016cd0:	697b      	ldr	r3, [r7, #20]
 8016cd2:	7a5b      	ldrb	r3, [r3, #9]
 8016cd4:	2bff      	cmp	r3, #255	@ 0xff
 8016cd6:	d005      	beq.n	8016ce4 <OutputDbgTrace+0x4c>
 8016cd8:	2bff      	cmp	r3, #255	@ 0xff
 8016cda:	dc05      	bgt.n	8016ce8 <OutputDbgTrace+0x50>
 8016cdc:	2b0e      	cmp	r3, #14
 8016cde:	d005      	beq.n	8016cec <OutputDbgTrace+0x54>
 8016ce0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016ce2:	e001      	b.n	8016ce8 <OutputDbgTrace+0x50>
          break;
 8016ce4:	bf00      	nop
 8016ce6:	e027      	b.n	8016d38 <OutputDbgTrace+0xa0>
          break;
 8016ce8:	bf00      	nop
 8016cea:	e025      	b.n	8016d38 <OutputDbgTrace+0xa0>
          break;
 8016cec:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016cee:	e023      	b.n	8016d38 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016cf0:	683b      	ldr	r3, [r7, #0]
 8016cf2:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016cf4:	e020      	b.n	8016d38 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016cf6:	683b      	ldr	r3, [r7, #0]
 8016cf8:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016cfa:	697b      	ldr	r3, [r7, #20]
 8016cfc:	7a5b      	ldrb	r3, [r3, #9]
 8016cfe:	2b0e      	cmp	r3, #14
 8016d00:	d001      	beq.n	8016d06 <OutputDbgTrace+0x6e>
 8016d02:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016d04:	e000      	b.n	8016d08 <OutputDbgTrace+0x70>
          break;
 8016d06:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016d08:	e016      	b.n	8016d38 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016d0e:	697b      	ldr	r3, [r7, #20]
 8016d10:	7a5b      	ldrb	r3, [r3, #9]
 8016d12:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016d14:	e010      	b.n	8016d38 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016d16:	683b      	ldr	r3, [r7, #0]
 8016d18:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016d1a:	e00d      	b.n	8016d38 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8016d1c:	683b      	ldr	r3, [r7, #0]
 8016d1e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8016d20:	693b      	ldr	r3, [r7, #16]
 8016d22:	785b      	ldrb	r3, [r3, #1]
 8016d24:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8016d26:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016d28:	e006      	b.n	8016d38 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016d2a:	683b      	ldr	r3, [r7, #0]
 8016d2c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	7a5b      	ldrb	r3, [r3, #9]
 8016d32:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016d34:	e000      	b.n	8016d38 <OutputDbgTrace+0xa0>

    default:
      break;
 8016d36:	bf00      	nop
  }

  return;
 8016d38:	bf00      	nop
}
 8016d3a:	371c      	adds	r7, #28
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d42:	4770      	bx	lr

08016d44 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016d44:	b480      	push	{r7}
 8016d46:	b085      	sub	sp, #20
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8016d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8016d8c <OTP_Read+0x48>)
 8016d50:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016d52:	e002      	b.n	8016d5a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	3b08      	subs	r3, #8
 8016d58:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	3307      	adds	r3, #7
 8016d5e:	781b      	ldrb	r3, [r3, #0]
 8016d60:	79fa      	ldrb	r2, [r7, #7]
 8016d62:	429a      	cmp	r2, r3
 8016d64:	d003      	beq.n	8016d6e <OTP_Read+0x2a>
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	4a09      	ldr	r2, [pc, #36]	@ (8016d90 <OTP_Read+0x4c>)
 8016d6a:	4293      	cmp	r3, r2
 8016d6c:	d1f2      	bne.n	8016d54 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	3307      	adds	r3, #7
 8016d72:	781b      	ldrb	r3, [r3, #0]
 8016d74:	79fa      	ldrb	r2, [r7, #7]
 8016d76:	429a      	cmp	r2, r3
 8016d78:	d001      	beq.n	8016d7e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8016d7e:	68fb      	ldr	r3, [r7, #12]
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	3714      	adds	r7, #20
 8016d84:	46bd      	mov	sp, r7
 8016d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d8a:	4770      	bx	lr
 8016d8c:	1fff73f8 	.word	0x1fff73f8
 8016d90:	1fff7000 	.word	0x1fff7000

08016d94 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016d94:	b480      	push	{r7}
 8016d96:	b083      	sub	sp, #12
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	687a      	ldr	r2, [r7, #4]
 8016da0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	605a      	str	r2, [r3, #4]
}
 8016da8:	bf00      	nop
 8016daa:	370c      	adds	r7, #12
 8016dac:	46bd      	mov	sp, r7
 8016dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db2:	4770      	bx	lr

08016db4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016db4:	b480      	push	{r7}
 8016db6:	b087      	sub	sp, #28
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8016dc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8016dc2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016dc6:	b672      	cpsid	i
}
 8016dc8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	687a      	ldr	r2, [r7, #4]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d102      	bne.n	8016dda <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	75fb      	strb	r3, [r7, #23]
 8016dd8:	e001      	b.n	8016dde <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016dda:	2300      	movs	r3, #0
 8016ddc:	75fb      	strb	r3, [r7, #23]
 8016dde:	693b      	ldr	r3, [r7, #16]
 8016de0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016de2:	68bb      	ldr	r3, [r7, #8]
 8016de4:	f383 8810 	msr	PRIMASK, r3
}
 8016de8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	371c      	adds	r7, #28
 8016df0:	46bd      	mov	sp, r7
 8016df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016df6:	4770      	bx	lr

08016df8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016df8:	b480      	push	{r7}
 8016dfa:	b087      	sub	sp, #28
 8016dfc:	af00      	add	r7, sp, #0
 8016dfe:	6078      	str	r0, [r7, #4]
 8016e00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e02:	f3ef 8310 	mrs	r3, PRIMASK
 8016e06:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e08:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016e0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016e0c:	b672      	cpsid	i
}
 8016e0e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	681a      	ldr	r2, [r3, #0]
 8016e14:	683b      	ldr	r3, [r7, #0]
 8016e16:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	687a      	ldr	r2, [r7, #4]
 8016e1c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	683a      	ldr	r2, [r7, #0]
 8016e22:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016e24:	683b      	ldr	r3, [r7, #0]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	683a      	ldr	r2, [r7, #0]
 8016e2a:	605a      	str	r2, [r3, #4]
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e30:	693b      	ldr	r3, [r7, #16]
 8016e32:	f383 8810 	msr	PRIMASK, r3
}
 8016e36:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016e38:	bf00      	nop
 8016e3a:	371c      	adds	r7, #28
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e42:	4770      	bx	lr

08016e44 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016e44:	b480      	push	{r7}
 8016e46:	b087      	sub	sp, #28
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8016e52:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e54:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016e56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016e58:	b672      	cpsid	i
}
 8016e5a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	687a      	ldr	r2, [r7, #4]
 8016e60:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	685a      	ldr	r2, [r3, #4]
 8016e66:	683b      	ldr	r3, [r7, #0]
 8016e68:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	683a      	ldr	r2, [r7, #0]
 8016e6e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	685b      	ldr	r3, [r3, #4]
 8016e74:	683a      	ldr	r2, [r7, #0]
 8016e76:	601a      	str	r2, [r3, #0]
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e7c:	693b      	ldr	r3, [r7, #16]
 8016e7e:	f383 8810 	msr	PRIMASK, r3
}
 8016e82:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016e84:	bf00      	nop
 8016e86:	371c      	adds	r7, #28
 8016e88:	46bd      	mov	sp, r7
 8016e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e8e:	4770      	bx	lr

08016e90 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016e90:	b480      	push	{r7}
 8016e92:	b087      	sub	sp, #28
 8016e94:	af00      	add	r7, sp, #0
 8016e96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e98:	f3ef 8310 	mrs	r3, PRIMASK
 8016e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8016e9e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ea0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ea2:	b672      	cpsid	i
}
 8016ea4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	685b      	ldr	r3, [r3, #4]
 8016eaa:	687a      	ldr	r2, [r7, #4]
 8016eac:	6812      	ldr	r2, [r2, #0]
 8016eae:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	687a      	ldr	r2, [r7, #4]
 8016eb6:	6852      	ldr	r2, [r2, #4]
 8016eb8:	605a      	str	r2, [r3, #4]
 8016eba:	697b      	ldr	r3, [r7, #20]
 8016ebc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	f383 8810 	msr	PRIMASK, r3
}
 8016ec4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016ec6:	bf00      	nop
 8016ec8:	371c      	adds	r7, #28
 8016eca:	46bd      	mov	sp, r7
 8016ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed0:	4770      	bx	lr

08016ed2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8016ed2:	b580      	push	{r7, lr}
 8016ed4:	b086      	sub	sp, #24
 8016ed6:	af00      	add	r7, sp, #0
 8016ed8:	6078      	str	r0, [r7, #4]
 8016eda:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016edc:	f3ef 8310 	mrs	r3, PRIMASK
 8016ee0:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ee2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ee4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ee6:	b672      	cpsid	i
}
 8016ee8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681a      	ldr	r2, [r3, #0]
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7ff ffca 	bl	8016e90 <LST_remove_node>
 8016efc:	697b      	ldr	r3, [r7, #20]
 8016efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f00:	693b      	ldr	r3, [r7, #16]
 8016f02:	f383 8810 	msr	PRIMASK, r3
}
 8016f06:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f08:	bf00      	nop
 8016f0a:	3718      	adds	r7, #24
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	bd80      	pop	{r7, pc}

08016f10 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b082      	sub	sp, #8
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f7ea fde8 	bl	8001aee <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8016f1e:	bf00      	nop
 8016f20:	3708      	adds	r7, #8
 8016f22:	46bd      	mov	sp, r7
 8016f24:	bd80      	pop	{r7, pc}

08016f26 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8016f26:	b580      	push	{r7, lr}
 8016f28:	b082      	sub	sp, #8
 8016f2a:	af00      	add	r7, sp, #0
 8016f2c:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8016f2e:	e002      	b.n	8016f36 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8016f30:	2001      	movs	r0, #1
 8016f32:	f7ff ffed 	bl	8016f10 <SPIF_Delay>
  while (Handle->Lock)
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	7b1b      	ldrb	r3, [r3, #12]
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d1f8      	bne.n	8016f30 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	2201      	movs	r2, #1
 8016f42:	731a      	strb	r2, [r3, #12]
}
 8016f44:	bf00      	nop
 8016f46:	3708      	adds	r7, #8
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd80      	pop	{r7, pc}

08016f4c <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8016f4c:	b480      	push	{r7}
 8016f4e:	b083      	sub	sp, #12
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2200      	movs	r2, #0
 8016f58:	731a      	strb	r2, [r3, #12]
}
 8016f5a:	bf00      	nop
 8016f5c:	370c      	adds	r7, #12
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f64:	4770      	bx	lr

08016f66 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8016f66:	b580      	push	{r7, lr}
 8016f68:	b084      	sub	sp, #16
 8016f6a:	af00      	add	r7, sp, #0
 8016f6c:	6078      	str	r0, [r7, #4]
 8016f6e:	460b      	mov	r3, r1
 8016f70:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	6858      	ldr	r0, [r3, #4]
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	691b      	ldr	r3, [r3, #16]
 8016f7a:	b29b      	uxth	r3, r3
 8016f7c:	78fa      	ldrb	r2, [r7, #3]
 8016f7e:	4619      	mov	r1, r3
 8016f80:	f7f2 f974 	bl	800926c <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8016f84:	2300      	movs	r3, #0
 8016f86:	60fb      	str	r3, [r7, #12]
 8016f88:	e002      	b.n	8016f90 <SPIF_CsPin+0x2a>
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	3301      	adds	r3, #1
 8016f8e:	60fb      	str	r3, [r7, #12]
 8016f90:	68fb      	ldr	r3, [r7, #12]
 8016f92:	2b09      	cmp	r3, #9
 8016f94:	ddf9      	ble.n	8016f8a <SPIF_CsPin+0x24>
}
 8016f96:	bf00      	nop
 8016f98:	bf00      	nop
 8016f9a:	3710      	adds	r7, #16
 8016f9c:	46bd      	mov	sp, r7
 8016f9e:	bd80      	pop	{r7, pc}

08016fa0 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b088      	sub	sp, #32
 8016fa4:	af02      	add	r7, sp, #8
 8016fa6:	60f8      	str	r0, [r7, #12]
 8016fa8:	60b9      	str	r1, [r7, #8]
 8016faa:	607a      	str	r2, [r7, #4]
 8016fac:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	6818      	ldr	r0, [r3, #0]
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	b29a      	uxth	r2, r3
 8016fba:	6a3b      	ldr	r3, [r7, #32]
 8016fbc:	9300      	str	r3, [sp, #0]
 8016fbe:	4613      	mov	r3, r2
 8016fc0:	687a      	ldr	r2, [r7, #4]
 8016fc2:	68b9      	ldr	r1, [r7, #8]
 8016fc4:	f7f7 f9f9 	bl	800e3ba <HAL_SPI_TransmitReceive>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d101      	bne.n	8016fd2 <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8016fce:	2301      	movs	r3, #1
 8016fd0:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8016fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	3718      	adds	r7, #24
 8016fd8:	46bd      	mov	sp, r7
 8016fda:	bd80      	pop	{r7, pc}

08016fdc <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b086      	sub	sp, #24
 8016fe0:	af00      	add	r7, sp, #0
 8016fe2:	60f8      	str	r0, [r7, #12]
 8016fe4:	60b9      	str	r1, [r7, #8]
 8016fe6:	607a      	str	r2, [r7, #4]
 8016fe8:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8016fea:	2300      	movs	r3, #0
 8016fec:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	6818      	ldr	r0, [r3, #0]
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	b29a      	uxth	r2, r3
 8016ff6:	683b      	ldr	r3, [r7, #0]
 8016ff8:	68b9      	ldr	r1, [r7, #8]
 8016ffa:	f7f6 ff30 	bl	800de5e <HAL_SPI_Transmit>
 8016ffe:	4603      	mov	r3, r0
 8017000:	2b00      	cmp	r3, #0
 8017002:	d101      	bne.n	8017008 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8017004:	2301      	movs	r3, #1
 8017006:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017008:	7dfb      	ldrb	r3, [r7, #23]
}
 801700a:	4618      	mov	r0, r3
 801700c:	3718      	adds	r7, #24
 801700e:	46bd      	mov	sp, r7
 8017010:	bd80      	pop	{r7, pc}

08017012 <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8017012:	b580      	push	{r7, lr}
 8017014:	b086      	sub	sp, #24
 8017016:	af00      	add	r7, sp, #0
 8017018:	60f8      	str	r0, [r7, #12]
 801701a:	60b9      	str	r1, [r7, #8]
 801701c:	607a      	str	r2, [r7, #4]
 801701e:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8017020:	2300      	movs	r3, #0
 8017022:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	6818      	ldr	r0, [r3, #0]
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	b29a      	uxth	r2, r3
 801702c:	683b      	ldr	r3, [r7, #0]
 801702e:	68b9      	ldr	r1, [r7, #8]
 8017030:	f7f7 f88b 	bl	800e14a <HAL_SPI_Receive>
 8017034:	4603      	mov	r3, r0
 8017036:	2b00      	cmp	r3, #0
 8017038:	d101      	bne.n	801703e <SPIF_Receive+0x2c>
  {
    retVal = true;
 801703a:	2301      	movs	r3, #1
 801703c:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 801703e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017040:	4618      	mov	r0, r3
 8017042:	3718      	adds	r7, #24
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}

08017048 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	b084      	sub	sp, #16
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8017050:	2301      	movs	r3, #1
 8017052:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8017054:	2306      	movs	r3, #6
 8017056:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8017058:	2100      	movs	r1, #0
 801705a:	6878      	ldr	r0, [r7, #4]
 801705c:	f7ff ff83 	bl	8016f66 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8017060:	f107 010c 	add.w	r1, r7, #12
 8017064:	2364      	movs	r3, #100	@ 0x64
 8017066:	2201      	movs	r2, #1
 8017068:	6878      	ldr	r0, [r7, #4]
 801706a:	f7ff ffb7 	bl	8016fdc <SPIF_Transmit>
 801706e:	4603      	mov	r3, r0
 8017070:	f083 0301 	eor.w	r3, r3, #1
 8017074:	b2db      	uxtb	r3, r3
 8017076:	2b00      	cmp	r3, #0
 8017078:	d001      	beq.n	801707e <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 801707a:	2300      	movs	r3, #0
 801707c:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 801707e:	2101      	movs	r1, #1
 8017080:	6878      	ldr	r0, [r7, #4]
 8017082:	f7ff ff70 	bl	8016f66 <SPIF_CsPin>
  return retVal;
 8017086:	7bfb      	ldrb	r3, [r7, #15]
}
 8017088:	4618      	mov	r0, r3
 801708a:	3710      	adds	r7, #16
 801708c:	46bd      	mov	sp, r7
 801708e:	bd80      	pop	{r7, pc}

08017090 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b084      	sub	sp, #16
 8017094:	af00      	add	r7, sp, #0
 8017096:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8017098:	2301      	movs	r3, #1
 801709a:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 801709c:	2304      	movs	r3, #4
 801709e:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 80170a0:	2100      	movs	r1, #0
 80170a2:	6878      	ldr	r0, [r7, #4]
 80170a4:	f7ff ff5f 	bl	8016f66 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 80170a8:	f107 010c 	add.w	r1, r7, #12
 80170ac:	2364      	movs	r3, #100	@ 0x64
 80170ae:	2201      	movs	r2, #1
 80170b0:	6878      	ldr	r0, [r7, #4]
 80170b2:	f7ff ff93 	bl	8016fdc <SPIF_Transmit>
 80170b6:	4603      	mov	r3, r0
 80170b8:	f083 0301 	eor.w	r3, r3, #1
 80170bc:	b2db      	uxtb	r3, r3
 80170be:	2b00      	cmp	r3, #0
 80170c0:	d001      	beq.n	80170c6 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 80170c2:	2300      	movs	r3, #0
 80170c4:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 80170c6:	2101      	movs	r1, #1
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f7ff ff4c 	bl	8016f66 <SPIF_CsPin>
  return retVal;
 80170ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3710      	adds	r7, #16
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}

080170d8 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b086      	sub	sp, #24
 80170dc:	af02      	add	r7, sp, #8
 80170de:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 80170e0:	2300      	movs	r3, #0
 80170e2:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 80170e4:	f24a 5305 	movw	r3, #42245	@ 0xa505
 80170e8:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 80170ea:	2100      	movs	r1, #0
 80170ec:	6878      	ldr	r0, [r7, #4]
 80170ee:	f7ff ff3a 	bl	8016f66 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 80170f2:	f107 0208 	add.w	r2, r7, #8
 80170f6:	f107 010c 	add.w	r1, r7, #12
 80170fa:	2364      	movs	r3, #100	@ 0x64
 80170fc:	9300      	str	r3, [sp, #0]
 80170fe:	2302      	movs	r3, #2
 8017100:	6878      	ldr	r0, [r7, #4]
 8017102:	f7ff ff4d 	bl	8016fa0 <SPIF_TransmitReceive>
 8017106:	4603      	mov	r3, r0
 8017108:	2b00      	cmp	r3, #0
 801710a:	d001      	beq.n	8017110 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 801710c:	7a7b      	ldrb	r3, [r7, #9]
 801710e:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 8017110:	2101      	movs	r1, #1
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f7ff ff27 	bl	8016f66 <SPIF_CsPin>
  return retVal;
 8017118:	7bfb      	ldrb	r3, [r7, #15]
}
 801711a:	4618      	mov	r0, r3
 801711c:	3710      	adds	r7, #16
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}

08017122 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 8017122:	b580      	push	{r7, lr}
 8017124:	b084      	sub	sp, #16
 8017126:	af00      	add	r7, sp, #0
 8017128:	6078      	str	r0, [r7, #4]
 801712a:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 801712c:	2300      	movs	r3, #0
 801712e:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8017130:	f7f0 f998 	bl	8007464 <HAL_GetTick>
 8017134:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8017136:	2001      	movs	r0, #1
 8017138:	f7ff feea 	bl	8016f10 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 801713c:	f7f0 f992 	bl	8007464 <HAL_GetTick>
 8017140:	4602      	mov	r2, r0
 8017142:	68bb      	ldr	r3, [r7, #8]
 8017144:	1ad3      	subs	r3, r2, r3
 8017146:	683a      	ldr	r2, [r7, #0]
 8017148:	429a      	cmp	r2, r3
 801714a:	d90a      	bls.n	8017162 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 801714c:	6878      	ldr	r0, [r7, #4]
 801714e:	f7ff ffc3 	bl	80170d8 <SPIF_ReadReg1>
 8017152:	4603      	mov	r3, r0
 8017154:	f003 0301 	and.w	r3, r3, #1
 8017158:	2b00      	cmp	r3, #0
 801715a:	d1ec      	bne.n	8017136 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 801715c:	2301      	movs	r3, #1
 801715e:	73fb      	strb	r3, [r7, #15]
      break;
 8017160:	e000      	b.n	8017164 <SPIF_WaitForWriting+0x42>
      break;
 8017162:	bf00      	nop
    }
  }
  return retVal;
 8017164:	7bfb      	ldrb	r3, [r7, #15]
}
 8017166:	4618      	mov	r0, r3
 8017168:	3710      	adds	r7, #16
 801716a:	46bd      	mov	sp, r7
 801716c:	bd80      	pop	{r7, pc}
	...

08017170 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b088      	sub	sp, #32
 8017174:	af02      	add	r7, sp, #8
 8017176:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8017178:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 801717c:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 801717e:	2300      	movs	r3, #0
 8017180:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8017182:	2100      	movs	r1, #0
 8017184:	6878      	ldr	r0, [r7, #4]
 8017186:	f7ff feee 	bl	8016f66 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 801718a:	f107 020c 	add.w	r2, r7, #12
 801718e:	f107 0110 	add.w	r1, r7, #16
 8017192:	2364      	movs	r3, #100	@ 0x64
 8017194:	9300      	str	r3, [sp, #0]
 8017196:	2304      	movs	r3, #4
 8017198:	6878      	ldr	r0, [r7, #4]
 801719a:	f7ff ff01 	bl	8016fa0 <SPIF_TransmitReceive>
 801719e:	4603      	mov	r3, r0
 80171a0:	f083 0301 	eor.w	r3, r3, #1
 80171a4:	b2db      	uxtb	r3, r3
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d004      	beq.n	80171b4 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 80171aa:	2101      	movs	r1, #1
 80171ac:	6878      	ldr	r0, [r7, #4]
 80171ae:	f7ff feda 	bl	8016f66 <SPIF_CsPin>
      break;
 80171b2:	e16f      	b.n	8017494 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 80171b4:	2101      	movs	r1, #1
 80171b6:	6878      	ldr	r0, [r7, #4]
 80171b8:	f7ff fed5 	bl	8016f66 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 80171bc:	7b7a      	ldrb	r2, [r7, #13]
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 80171c2:	7bba      	ldrb	r2, [r7, #14]
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 80171c8:	7bfa      	ldrb	r2, [r7, #15]
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	7a1b      	ldrb	r3, [r3, #8]
 80171d2:	2bef      	cmp	r3, #239	@ 0xef
 80171d4:	f000 80f0 	beq.w	80173b8 <SPIF_FindChip+0x248>
 80171d8:	2bef      	cmp	r3, #239	@ 0xef
 80171da:	f300 80e9 	bgt.w	80173b0 <SPIF_FindChip+0x240>
 80171de:	2bc8      	cmp	r3, #200	@ 0xc8
 80171e0:	f300 80e6 	bgt.w	80173b0 <SPIF_FindChip+0x240>
 80171e4:	2b85      	cmp	r3, #133	@ 0x85
 80171e6:	da0c      	bge.n	8017202 <SPIF_FindChip+0x92>
 80171e8:	2b62      	cmp	r3, #98	@ 0x62
 80171ea:	f000 80e7 	beq.w	80173bc <SPIF_FindChip+0x24c>
 80171ee:	2b62      	cmp	r3, #98	@ 0x62
 80171f0:	f300 80de 	bgt.w	80173b0 <SPIF_FindChip+0x240>
 80171f4:	2b20      	cmp	r3, #32
 80171f6:	f300 80d9 	bgt.w	80173ac <SPIF_FindChip+0x23c>
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	f300 8090 	bgt.w	8017320 <SPIF_FindChip+0x1b0>
 8017200:	e0d6      	b.n	80173b0 <SPIF_FindChip+0x240>
 8017202:	3b85      	subs	r3, #133	@ 0x85
 8017204:	2b43      	cmp	r3, #67	@ 0x43
 8017206:	f200 80d3 	bhi.w	80173b0 <SPIF_FindChip+0x240>
 801720a:	a201      	add	r2, pc, #4	@ (adr r2, 8017210 <SPIF_FindChip+0xa0>)
 801720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017210:	080173c1 	.word	0x080173c1
 8017214:	080173b1 	.word	0x080173b1
 8017218:	080173b1 	.word	0x080173b1
 801721c:	080173b1 	.word	0x080173b1
 8017220:	080173c1 	.word	0x080173c1
 8017224:	080173b1 	.word	0x080173b1
 8017228:	080173b1 	.word	0x080173b1
 801722c:	080173c1 	.word	0x080173c1
 8017230:	080173b1 	.word	0x080173b1
 8017234:	080173b1 	.word	0x080173b1
 8017238:	080173b1 	.word	0x080173b1
 801723c:	080173b1 	.word	0x080173b1
 8017240:	080173b1 	.word	0x080173b1
 8017244:	080173b1 	.word	0x080173b1
 8017248:	080173b1 	.word	0x080173b1
 801724c:	080173b1 	.word	0x080173b1
 8017250:	080173b1 	.word	0x080173b1
 8017254:	080173b1 	.word	0x080173b1
 8017258:	080173b1 	.word	0x080173b1
 801725c:	080173b1 	.word	0x080173b1
 8017260:	080173b1 	.word	0x080173b1
 8017264:	080173b1 	.word	0x080173b1
 8017268:	080173b1 	.word	0x080173b1
 801726c:	080173b1 	.word	0x080173b1
 8017270:	080173c1 	.word	0x080173c1
 8017274:	080173b1 	.word	0x080173b1
 8017278:	080173b1 	.word	0x080173b1
 801727c:	080173b1 	.word	0x080173b1
 8017280:	080173c1 	.word	0x080173c1
 8017284:	080173b1 	.word	0x080173b1
 8017288:	080173b1 	.word	0x080173b1
 801728c:	080173b1 	.word	0x080173b1
 8017290:	080173b1 	.word	0x080173b1
 8017294:	080173b1 	.word	0x080173b1
 8017298:	080173b1 	.word	0x080173b1
 801729c:	080173b1 	.word	0x080173b1
 80172a0:	080173b1 	.word	0x080173b1
 80172a4:	080173b1 	.word	0x080173b1
 80172a8:	080173b1 	.word	0x080173b1
 80172ac:	080173b1 	.word	0x080173b1
 80172b0:	080173c1 	.word	0x080173c1
 80172b4:	080173b1 	.word	0x080173b1
 80172b8:	080173b1 	.word	0x080173b1
 80172bc:	080173b1 	.word	0x080173b1
 80172c0:	080173b1 	.word	0x080173b1
 80172c4:	080173b1 	.word	0x080173b1
 80172c8:	080173b1 	.word	0x080173b1
 80172cc:	080173b1 	.word	0x080173b1
 80172d0:	080173b1 	.word	0x080173b1
 80172d4:	080173b1 	.word	0x080173b1
 80172d8:	080173b1 	.word	0x080173b1
 80172dc:	080173b1 	.word	0x080173b1
 80172e0:	080173b1 	.word	0x080173b1
 80172e4:	080173b1 	.word	0x080173b1
 80172e8:	080173b1 	.word	0x080173b1
 80172ec:	080173b1 	.word	0x080173b1
 80172f0:	080173b1 	.word	0x080173b1
 80172f4:	080173b1 	.word	0x080173b1
 80172f8:	080173c1 	.word	0x080173c1
 80172fc:	080173b1 	.word	0x080173b1
 8017300:	080173b1 	.word	0x080173b1
 8017304:	080173c1 	.word	0x080173c1
 8017308:	080173b1 	.word	0x080173b1
 801730c:	080173b1 	.word	0x080173b1
 8017310:	080173b1 	.word	0x080173b1
 8017314:	080173b1 	.word	0x080173b1
 8017318:	080173b1 	.word	0x080173b1
 801731c:	080173c1 	.word	0x080173c1
 8017320:	3b01      	subs	r3, #1
 8017322:	2b1f      	cmp	r3, #31
 8017324:	d844      	bhi.n	80173b0 <SPIF_FindChip+0x240>
 8017326:	a201      	add	r2, pc, #4	@ (adr r2, 801732c <SPIF_FindChip+0x1bc>)
 8017328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801732c:	080173c5 	.word	0x080173c5
 8017330:	080173b1 	.word	0x080173b1
 8017334:	080173b1 	.word	0x080173b1
 8017338:	080173c5 	.word	0x080173c5
 801733c:	080173b1 	.word	0x080173b1
 8017340:	080173b1 	.word	0x080173b1
 8017344:	080173b1 	.word	0x080173b1
 8017348:	080173b1 	.word	0x080173b1
 801734c:	080173b1 	.word	0x080173b1
 8017350:	080173b1 	.word	0x080173b1
 8017354:	080173b1 	.word	0x080173b1
 8017358:	080173b1 	.word	0x080173b1
 801735c:	080173b1 	.word	0x080173b1
 8017360:	080173b1 	.word	0x080173b1
 8017364:	080173b1 	.word	0x080173b1
 8017368:	080173b1 	.word	0x080173b1
 801736c:	080173b1 	.word	0x080173b1
 8017370:	080173b1 	.word	0x080173b1
 8017374:	080173b1 	.word	0x080173b1
 8017378:	080173b1 	.word	0x080173b1
 801737c:	080173b1 	.word	0x080173b1
 8017380:	080173b1 	.word	0x080173b1
 8017384:	080173b1 	.word	0x080173b1
 8017388:	080173b1 	.word	0x080173b1
 801738c:	080173b1 	.word	0x080173b1
 8017390:	080173b1 	.word	0x080173b1
 8017394:	080173b1 	.word	0x080173b1
 8017398:	080173c5 	.word	0x080173c5
 801739c:	080173b1 	.word	0x080173b1
 80173a0:	080173b1 	.word	0x080173b1
 80173a4:	080173b1 	.word	0x080173b1
 80173a8:	080173c5 	.word	0x080173c5
 80173ac:	2b37      	cmp	r3, #55	@ 0x37
 80173ae:	d00b      	beq.n	80173c8 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	2200      	movs	r2, #0
 80173b4:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 80173b6:	e008      	b.n	80173ca <SPIF_FindChip+0x25a>
      break;
 80173b8:	bf00      	nop
 80173ba:	e006      	b.n	80173ca <SPIF_FindChip+0x25a>
      break;
 80173bc:	bf00      	nop
 80173be:	e004      	b.n	80173ca <SPIF_FindChip+0x25a>
      break;
 80173c0:	bf00      	nop
 80173c2:	e002      	b.n	80173ca <SPIF_FindChip+0x25a>
      break;
 80173c4:	bf00      	nop
 80173c6:	e000      	b.n	80173ca <SPIF_FindChip+0x25a>
      break;
 80173c8:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	7a5b      	ldrb	r3, [r3, #9]
 80173ce:	3b11      	subs	r3, #17
 80173d0:	2b0f      	cmp	r3, #15
 80173d2:	d84e      	bhi.n	8017472 <SPIF_FindChip+0x302>
 80173d4:	a201      	add	r2, pc, #4	@ (adr r2, 80173dc <SPIF_FindChip+0x26c>)
 80173d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173da:	bf00      	nop
 80173dc:	0801741d 	.word	0x0801741d
 80173e0:	08017425 	.word	0x08017425
 80173e4:	0801742d 	.word	0x0801742d
 80173e8:	08017435 	.word	0x08017435
 80173ec:	0801743d 	.word	0x0801743d
 80173f0:	08017445 	.word	0x08017445
 80173f4:	0801744d 	.word	0x0801744d
 80173f8:	08017455 	.word	0x08017455
 80173fc:	0801745f 	.word	0x0801745f
 8017400:	08017473 	.word	0x08017473
 8017404:	08017473 	.word	0x08017473
 8017408:	08017473 	.word	0x08017473
 801740c:	08017473 	.word	0x08017473
 8017410:	08017473 	.word	0x08017473
 8017414:	08017473 	.word	0x08017473
 8017418:	08017469 	.word	0x08017469
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2202      	movs	r2, #2
 8017420:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 8017422:	e02a      	b.n	801747a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	2204      	movs	r2, #4
 8017428:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 801742a:	e026      	b.n	801747a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	2208      	movs	r2, #8
 8017430:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8017432:	e022      	b.n	801747a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2210      	movs	r2, #16
 8017438:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 801743a:	e01e      	b.n	801747a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2220      	movs	r2, #32
 8017440:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8017442:	e01a      	b.n	801747a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	2240      	movs	r2, #64	@ 0x40
 8017448:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801744a:	e016      	b.n	801747a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	2280      	movs	r2, #128	@ 0x80
 8017450:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8017452:	e012      	b.n	801747a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801745a:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 801745c:	e00d      	b.n	801747a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017464:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8017466:	e008      	b.n	801747a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801746e:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8017470:	e003      	b.n	801747a <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	2200      	movs	r2, #0
 8017476:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8017478:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	69db      	ldr	r3, [r3, #28]
 801747e:	011a      	lsls	r2, r3, #4
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8017484:	687b      	ldr	r3, [r7, #4]
 8017486:	699b      	ldr	r3, [r3, #24]
 8017488:	031b      	lsls	r3, r3, #12
 801748a:	0a1a      	lsrs	r2, r3, #8
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8017490:	2301      	movs	r3, #1
 8017492:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017494:	7dfb      	ldrb	r3, [r7, #23]
}
 8017496:	4618      	mov	r0, r3
 8017498:	3718      	adds	r7, #24
 801749a:	46bd      	mov	sp, r7
 801749c:	bd80      	pop	{r7, pc}
 801749e:	bf00      	nop

080174a0 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b08a      	sub	sp, #40	@ 0x28
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	60f8      	str	r0, [r7, #12]
 80174a8:	60b9      	str	r1, [r7, #8]
 80174aa:	607a      	str	r2, [r7, #4]
 80174ac:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80174ae:	2300      	movs	r3, #0
 80174b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 80174b4:	2300      	movs	r3, #0
 80174b6:	623b      	str	r3, [r7, #32]
 80174b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174ba:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80174be:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 80174c0:	68fb      	ldr	r3, [r7, #12]
 80174c2:	695b      	ldr	r3, [r3, #20]
 80174c4:	68ba      	ldr	r2, [r7, #8]
 80174c6:	429a      	cmp	r2, r3
 80174c8:	f080 8084 	bcs.w	80175d4 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 80174cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80174ce:	2bff      	cmp	r3, #255	@ 0xff
 80174d0:	f200 8082 	bhi.w	80175d8 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 80174d4:	683a      	ldr	r2, [r7, #0]
 80174d6:	69fb      	ldr	r3, [r7, #28]
 80174d8:	429a      	cmp	r2, r3
 80174da:	d901      	bls.n	80174e0 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 80174dc:	69fb      	ldr	r3, [r7, #28]
 80174de:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	021b      	lsls	r3, r3, #8
 80174e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80174e6:	4413      	add	r3, r2
 80174e8:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80174ea:	68f8      	ldr	r0, [r7, #12]
 80174ec:	f7ff fdac 	bl	8017048 <SPIF_WriteEnable>
 80174f0:	4603      	mov	r3, r0
 80174f2:	f083 0301 	eor.w	r3, r3, #1
 80174f6:	b2db      	uxtb	r3, r3
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d16f      	bne.n	80175dc <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80174fc:	2100      	movs	r1, #0
 80174fe:	68f8      	ldr	r0, [r7, #12]
 8017500:	f7ff fd31 	bl	8016f66 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	69db      	ldr	r3, [r3, #28]
 8017508:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801750c:	d322      	bcc.n	8017554 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 801750e:	2312      	movs	r3, #18
 8017510:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 8017512:	6a3b      	ldr	r3, [r7, #32]
 8017514:	0e1b      	lsrs	r3, r3, #24
 8017516:	b2db      	uxtb	r3, r3
 8017518:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 801751a:	6a3b      	ldr	r3, [r7, #32]
 801751c:	0c1b      	lsrs	r3, r3, #16
 801751e:	b2db      	uxtb	r3, r3
 8017520:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 8017522:	6a3b      	ldr	r3, [r7, #32]
 8017524:	0a1b      	lsrs	r3, r3, #8
 8017526:	b2db      	uxtb	r3, r3
 8017528:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 801752a:	6a3b      	ldr	r3, [r7, #32]
 801752c:	b2db      	uxtb	r3, r3
 801752e:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017530:	f107 0114 	add.w	r1, r7, #20
 8017534:	2364      	movs	r3, #100	@ 0x64
 8017536:	2205      	movs	r2, #5
 8017538:	68f8      	ldr	r0, [r7, #12]
 801753a:	f7ff fd4f 	bl	8016fdc <SPIF_Transmit>
 801753e:	4603      	mov	r3, r0
 8017540:	f083 0301 	eor.w	r3, r3, #1
 8017544:	b2db      	uxtb	r3, r3
 8017546:	2b00      	cmp	r3, #0
 8017548:	d023      	beq.n	8017592 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801754a:	2101      	movs	r1, #1
 801754c:	68f8      	ldr	r0, [r7, #12]
 801754e:	f7ff fd0a 	bl	8016f66 <SPIF_CsPin>
        break;
 8017552:	e044      	b.n	80175de <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8017554:	2302      	movs	r3, #2
 8017556:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017558:	6a3b      	ldr	r3, [r7, #32]
 801755a:	0c1b      	lsrs	r3, r3, #16
 801755c:	b2db      	uxtb	r3, r3
 801755e:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017560:	6a3b      	ldr	r3, [r7, #32]
 8017562:	0a1b      	lsrs	r3, r3, #8
 8017564:	b2db      	uxtb	r3, r3
 8017566:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8017568:	6a3b      	ldr	r3, [r7, #32]
 801756a:	b2db      	uxtb	r3, r3
 801756c:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801756e:	f107 0114 	add.w	r1, r7, #20
 8017572:	2364      	movs	r3, #100	@ 0x64
 8017574:	2204      	movs	r2, #4
 8017576:	68f8      	ldr	r0, [r7, #12]
 8017578:	f7ff fd30 	bl	8016fdc <SPIF_Transmit>
 801757c:	4603      	mov	r3, r0
 801757e:	f083 0301 	eor.w	r3, r3, #1
 8017582:	b2db      	uxtb	r3, r3
 8017584:	2b00      	cmp	r3, #0
 8017586:	d004      	beq.n	8017592 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8017588:	2101      	movs	r1, #1
 801758a:	68f8      	ldr	r0, [r7, #12]
 801758c:	f7ff fceb 	bl	8016f66 <SPIF_CsPin>
        break;
 8017590:	e025      	b.n	80175de <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8017592:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017596:	683a      	ldr	r2, [r7, #0]
 8017598:	6879      	ldr	r1, [r7, #4]
 801759a:	68f8      	ldr	r0, [r7, #12]
 801759c:	f7ff fd1e 	bl	8016fdc <SPIF_Transmit>
 80175a0:	4603      	mov	r3, r0
 80175a2:	f083 0301 	eor.w	r3, r3, #1
 80175a6:	b2db      	uxtb	r3, r3
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	d004      	beq.n	80175b6 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 80175ac:	2101      	movs	r1, #1
 80175ae:	68f8      	ldr	r0, [r7, #12]
 80175b0:	f7ff fcd9 	bl	8016f66 <SPIF_CsPin>
      break;
 80175b4:	e013      	b.n	80175de <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 80175b6:	2101      	movs	r1, #1
 80175b8:	68f8      	ldr	r0, [r7, #12]
 80175ba:	f7ff fcd4 	bl	8016f66 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 80175be:	2164      	movs	r1, #100	@ 0x64
 80175c0:	68f8      	ldr	r0, [r7, #12]
 80175c2:	f7ff fdae 	bl	8017122 <SPIF_WaitForWriting>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d008      	beq.n	80175de <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 80175cc:	2301      	movs	r3, #1
 80175ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80175d2:	e004      	b.n	80175de <SPIF_WriteFn+0x13e>
      break;
 80175d4:	bf00      	nop
 80175d6:	e002      	b.n	80175de <SPIF_WriteFn+0x13e>
      break;
 80175d8:	bf00      	nop
 80175da:	e000      	b.n	80175de <SPIF_WriteFn+0x13e>
      break;
 80175dc:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 80175de:	68f8      	ldr	r0, [r7, #12]
 80175e0:	f7ff fd56 	bl	8017090 <SPIF_WriteDisable>
  return retVal;
 80175e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80175e8:	4618      	mov	r0, r3
 80175ea:	3728      	adds	r7, #40	@ 0x28
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b086      	sub	sp, #24
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	60f8      	str	r0, [r7, #12]
 80175f8:	60b9      	str	r1, [r7, #8]
 80175fa:	607a      	str	r2, [r7, #4]
 80175fc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80175fe:	2300      	movs	r3, #0
 8017600:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 8017602:	2100      	movs	r1, #0
 8017604:	68f8      	ldr	r0, [r7, #12]
 8017606:	f7ff fcae 	bl	8016f66 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	69db      	ldr	r3, [r3, #28]
 801760e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017612:	d322      	bcc.n	801765a <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 8017614:	2313      	movs	r3, #19
 8017616:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 8017618:	68bb      	ldr	r3, [r7, #8]
 801761a:	0e1b      	lsrs	r3, r3, #24
 801761c:	b2db      	uxtb	r3, r3
 801761e:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 8017620:	68bb      	ldr	r3, [r7, #8]
 8017622:	0c1b      	lsrs	r3, r3, #16
 8017624:	b2db      	uxtb	r3, r3
 8017626:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 8017628:	68bb      	ldr	r3, [r7, #8]
 801762a:	0a1b      	lsrs	r3, r3, #8
 801762c:	b2db      	uxtb	r3, r3
 801762e:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8017630:	68bb      	ldr	r3, [r7, #8]
 8017632:	b2db      	uxtb	r3, r3
 8017634:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017636:	f107 0110 	add.w	r1, r7, #16
 801763a:	2364      	movs	r3, #100	@ 0x64
 801763c:	2205      	movs	r2, #5
 801763e:	68f8      	ldr	r0, [r7, #12]
 8017640:	f7ff fccc 	bl	8016fdc <SPIF_Transmit>
 8017644:	4603      	mov	r3, r0
 8017646:	f083 0301 	eor.w	r3, r3, #1
 801764a:	b2db      	uxtb	r3, r3
 801764c:	2b00      	cmp	r3, #0
 801764e:	d023      	beq.n	8017698 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017650:	2101      	movs	r1, #1
 8017652:	68f8      	ldr	r0, [r7, #12]
 8017654:	f7ff fc87 	bl	8016f66 <SPIF_CsPin>
        break;
 8017658:	e036      	b.n	80176c8 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 801765a:	2303      	movs	r3, #3
 801765c:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 801765e:	68bb      	ldr	r3, [r7, #8]
 8017660:	0c1b      	lsrs	r3, r3, #16
 8017662:	b2db      	uxtb	r3, r3
 8017664:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8017666:	68bb      	ldr	r3, [r7, #8]
 8017668:	0a1b      	lsrs	r3, r3, #8
 801766a:	b2db      	uxtb	r3, r3
 801766c:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 801766e:	68bb      	ldr	r3, [r7, #8]
 8017670:	b2db      	uxtb	r3, r3
 8017672:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017674:	f107 0110 	add.w	r1, r7, #16
 8017678:	2364      	movs	r3, #100	@ 0x64
 801767a:	2204      	movs	r2, #4
 801767c:	68f8      	ldr	r0, [r7, #12]
 801767e:	f7ff fcad 	bl	8016fdc <SPIF_Transmit>
 8017682:	4603      	mov	r3, r0
 8017684:	f083 0301 	eor.w	r3, r3, #1
 8017688:	b2db      	uxtb	r3, r3
 801768a:	2b00      	cmp	r3, #0
 801768c:	d004      	beq.n	8017698 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 801768e:	2101      	movs	r1, #1
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	f7ff fc68 	bl	8016f66 <SPIF_CsPin>
        break;
 8017696:	e017      	b.n	80176c8 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8017698:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801769c:	683a      	ldr	r2, [r7, #0]
 801769e:	6879      	ldr	r1, [r7, #4]
 80176a0:	68f8      	ldr	r0, [r7, #12]
 80176a2:	f7ff fcb6 	bl	8017012 <SPIF_Receive>
 80176a6:	4603      	mov	r3, r0
 80176a8:	f083 0301 	eor.w	r3, r3, #1
 80176ac:	b2db      	uxtb	r3, r3
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d004      	beq.n	80176bc <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 80176b2:	2101      	movs	r1, #1
 80176b4:	68f8      	ldr	r0, [r7, #12]
 80176b6:	f7ff fc56 	bl	8016f66 <SPIF_CsPin>
      break;
 80176ba:	e005      	b.n	80176c8 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 80176bc:	2101      	movs	r1, #1
 80176be:	68f8      	ldr	r0, [r7, #12]
 80176c0:	f7ff fc51 	bl	8016f66 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 80176c4:	2301      	movs	r3, #1
 80176c6:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 80176c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80176ca:	4618      	mov	r0, r3
 80176cc:	3718      	adds	r7, #24
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}

080176d2 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 80176d2:	b580      	push	{r7, lr}
 80176d4:	b086      	sub	sp, #24
 80176d6:	af00      	add	r7, sp, #0
 80176d8:	60f8      	str	r0, [r7, #12]
 80176da:	60b9      	str	r1, [r7, #8]
 80176dc:	607a      	str	r2, [r7, #4]
 80176de:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 80176e0:	2300      	movs	r3, #0
 80176e2:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d03a      	beq.n	8017760 <SPIF_Init+0x8e>
 80176ea:	68bb      	ldr	r3, [r7, #8]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d037      	beq.n	8017760 <SPIF_Init+0x8e>
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d034      	beq.n	8017760 <SPIF_Init+0x8e>
 80176f6:	68fb      	ldr	r3, [r7, #12]
 80176f8:	7a9b      	ldrb	r3, [r3, #10]
 80176fa:	2b01      	cmp	r3, #1
 80176fc:	d030      	beq.n	8017760 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 80176fe:	2220      	movs	r2, #32
 8017700:	2100      	movs	r1, #0
 8017702:	68f8      	ldr	r0, [r7, #12]
 8017704:	f003 fea5 	bl	801b452 <memset>
    Handle->HSpi = HSpi;
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	68ba      	ldr	r2, [r7, #8]
 801770c:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	687a      	ldr	r2, [r7, #4]
 8017712:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 8017714:	887a      	ldrh	r2, [r7, #2]
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 801771a:	2101      	movs	r1, #1
 801771c:	68f8      	ldr	r0, [r7, #12]
 801771e:	f7ff fc22 	bl	8016f66 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 8017722:	e002      	b.n	801772a <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 8017724:	2001      	movs	r0, #1
 8017726:	f7ff fbf3 	bl	8016f10 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 801772a:	f7ef fe9b 	bl	8007464 <HAL_GetTick>
 801772e:	4603      	mov	r3, r0
 8017730:	2b13      	cmp	r3, #19
 8017732:	d9f7      	bls.n	8017724 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8017734:	68f8      	ldr	r0, [r7, #12]
 8017736:	f7ff fcab 	bl	8017090 <SPIF_WriteDisable>
 801773a:	4603      	mov	r3, r0
 801773c:	f083 0301 	eor.w	r3, r3, #1
 8017740:	b2db      	uxtb	r3, r3
 8017742:	2b00      	cmp	r3, #0
 8017744:	d10b      	bne.n	801775e <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8017746:	68f8      	ldr	r0, [r7, #12]
 8017748:	f7ff fd12 	bl	8017170 <SPIF_FindChip>
 801774c:	4603      	mov	r3, r0
 801774e:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8017750:	7dfb      	ldrb	r3, [r7, #23]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d004      	beq.n	8017760 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8017756:	68fb      	ldr	r3, [r7, #12]
 8017758:	2201      	movs	r2, #1
 801775a:	729a      	strb	r2, [r3, #10]
 801775c:	e000      	b.n	8017760 <SPIF_Init+0x8e>
      break;
 801775e:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8017760:	7dfb      	ldrb	r3, [r7, #23]
}
 8017762:	4618      	mov	r0, r3
 8017764:	3718      	adds	r7, #24
 8017766:	46bd      	mov	sp, r7
 8017768:	bd80      	pop	{r7, pc}

0801776a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801776a:	b580      	push	{r7, lr}
 801776c:	b086      	sub	sp, #24
 801776e:	af00      	add	r7, sp, #0
 8017770:	6078      	str	r0, [r7, #4]
 8017772:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8017774:	6878      	ldr	r0, [r7, #4]
 8017776:	f7ff fbd6 	bl	8016f26 <SPIF_Lock>
  bool retVal = false;
 801777a:	2300      	movs	r3, #0
 801777c:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 801777e:	683b      	ldr	r3, [r7, #0]
 8017780:	031b      	lsls	r3, r3, #12
 8017782:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	699b      	ldr	r3, [r3, #24]
 8017788:	683a      	ldr	r2, [r7, #0]
 801778a:	429a      	cmp	r2, r3
 801778c:	d262      	bcs.n	8017854 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 801778e:	6878      	ldr	r0, [r7, #4]
 8017790:	f7ff fc5a 	bl	8017048 <SPIF_WriteEnable>
 8017794:	4603      	mov	r3, r0
 8017796:	f083 0301 	eor.w	r3, r3, #1
 801779a:	b2db      	uxtb	r3, r3
 801779c:	2b00      	cmp	r3, #0
 801779e:	d15b      	bne.n	8017858 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80177a0:	2100      	movs	r1, #0
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f7ff fbdf 	bl	8016f66 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	69db      	ldr	r3, [r3, #28]
 80177ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80177b0:	d322      	bcc.n	80177f8 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 80177b2:	2321      	movs	r3, #33	@ 0x21
 80177b4:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 80177b6:	693b      	ldr	r3, [r7, #16]
 80177b8:	0e1b      	lsrs	r3, r3, #24
 80177ba:	b2db      	uxtb	r3, r3
 80177bc:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 80177be:	693b      	ldr	r3, [r7, #16]
 80177c0:	0c1b      	lsrs	r3, r3, #16
 80177c2:	b2db      	uxtb	r3, r3
 80177c4:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 80177c6:	693b      	ldr	r3, [r7, #16]
 80177c8:	0a1b      	lsrs	r3, r3, #8
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 80177ce:	693b      	ldr	r3, [r7, #16]
 80177d0:	b2db      	uxtb	r3, r3
 80177d2:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80177d4:	f107 0108 	add.w	r1, r7, #8
 80177d8:	2364      	movs	r3, #100	@ 0x64
 80177da:	2205      	movs	r2, #5
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f7ff fbfd 	bl	8016fdc <SPIF_Transmit>
 80177e2:	4603      	mov	r3, r0
 80177e4:	f083 0301 	eor.w	r3, r3, #1
 80177e8:	b2db      	uxtb	r3, r3
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d023      	beq.n	8017836 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80177ee:	2101      	movs	r1, #1
 80177f0:	6878      	ldr	r0, [r7, #4]
 80177f2:	f7ff fbb8 	bl	8016f66 <SPIF_CsPin>
        break;
 80177f6:	e030      	b.n	801785a <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80177f8:	2320      	movs	r3, #32
 80177fa:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80177fc:	693b      	ldr	r3, [r7, #16]
 80177fe:	0c1b      	lsrs	r3, r3, #16
 8017800:	b2db      	uxtb	r3, r3
 8017802:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017804:	693b      	ldr	r3, [r7, #16]
 8017806:	0a1b      	lsrs	r3, r3, #8
 8017808:	b2db      	uxtb	r3, r3
 801780a:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 801780c:	693b      	ldr	r3, [r7, #16]
 801780e:	b2db      	uxtb	r3, r3
 8017810:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017812:	f107 0108 	add.w	r1, r7, #8
 8017816:	2364      	movs	r3, #100	@ 0x64
 8017818:	2204      	movs	r2, #4
 801781a:	6878      	ldr	r0, [r7, #4]
 801781c:	f7ff fbde 	bl	8016fdc <SPIF_Transmit>
 8017820:	4603      	mov	r3, r0
 8017822:	f083 0301 	eor.w	r3, r3, #1
 8017826:	b2db      	uxtb	r3, r3
 8017828:	2b00      	cmp	r3, #0
 801782a:	d004      	beq.n	8017836 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 801782c:	2101      	movs	r1, #1
 801782e:	6878      	ldr	r0, [r7, #4]
 8017830:	f7ff fb99 	bl	8016f66 <SPIF_CsPin>
        break;
 8017834:	e011      	b.n	801785a <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8017836:	2101      	movs	r1, #1
 8017838:	6878      	ldr	r0, [r7, #4]
 801783a:	f7ff fb94 	bl	8016f66 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 801783e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017842:	6878      	ldr	r0, [r7, #4]
 8017844:	f7ff fc6d 	bl	8017122 <SPIF_WaitForWriting>
 8017848:	4603      	mov	r3, r0
 801784a:	2b00      	cmp	r3, #0
 801784c:	d005      	beq.n	801785a <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 801784e:	2301      	movs	r3, #1
 8017850:	75fb      	strb	r3, [r7, #23]
 8017852:	e002      	b.n	801785a <SPIF_EraseSector+0xf0>
      break;
 8017854:	bf00      	nop
 8017856:	e000      	b.n	801785a <SPIF_EraseSector+0xf0>
      break;
 8017858:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 801785a:	6878      	ldr	r0, [r7, #4]
 801785c:	f7ff fc18 	bl	8017090 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8017860:	6878      	ldr	r0, [r7, #4]
 8017862:	f7ff fb73 	bl	8016f4c <SPIF_UnLock>
  return retVal;
 8017866:	7dfb      	ldrb	r3, [r7, #23]
}
 8017868:	4618      	mov	r0, r3
 801786a:	3718      	adds	r7, #24
 801786c:	46bd      	mov	sp, r7
 801786e:	bd80      	pop	{r7, pc}

08017870 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	b088      	sub	sp, #32
 8017874:	af02      	add	r7, sp, #8
 8017876:	60f8      	str	r0, [r7, #12]
 8017878:	60b9      	str	r1, [r7, #8]
 801787a:	607a      	str	r2, [r7, #4]
 801787c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 801787e:	68f8      	ldr	r0, [r7, #12]
 8017880:	f7ff fb51 	bl	8016f26 <SPIF_Lock>
  bool retVal = false;
 8017884:	2300      	movs	r3, #0
 8017886:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8017888:	6a3b      	ldr	r3, [r7, #32]
 801788a:	9300      	str	r3, [sp, #0]
 801788c:	683b      	ldr	r3, [r7, #0]
 801788e:	687a      	ldr	r2, [r7, #4]
 8017890:	68b9      	ldr	r1, [r7, #8]
 8017892:	68f8      	ldr	r0, [r7, #12]
 8017894:	f7ff fe04 	bl	80174a0 <SPIF_WriteFn>
 8017898:	4603      	mov	r3, r0
 801789a:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 801789c:	68f8      	ldr	r0, [r7, #12]
 801789e:	f7ff fb55 	bl	8016f4c <SPIF_UnLock>
  return retVal;
 80178a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80178a4:	4618      	mov	r0, r3
 80178a6:	3718      	adds	r7, #24
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}

080178ac <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b088      	sub	sp, #32
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	60f8      	str	r0, [r7, #12]
 80178b4:	60b9      	str	r1, [r7, #8]
 80178b6:	607a      	str	r2, [r7, #4]
 80178b8:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 80178ba:	68f8      	ldr	r0, [r7, #12]
 80178bc:	f7ff fb33 	bl	8016f26 <SPIF_Lock>
  bool retVal = false;
 80178c0:	2300      	movs	r3, #0
 80178c2:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 80178c4:	68bb      	ldr	r3, [r7, #8]
 80178c6:	021b      	lsls	r3, r3, #8
 80178c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80178ca:	4413      	add	r3, r2
 80178cc:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 80178ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178d0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80178d4:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 80178d6:	683a      	ldr	r2, [r7, #0]
 80178d8:	697b      	ldr	r3, [r7, #20]
 80178da:	429a      	cmp	r2, r3
 80178dc:	d901      	bls.n	80178e2 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 80178de:	697b      	ldr	r3, [r7, #20]
 80178e0:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 80178e2:	683b      	ldr	r3, [r7, #0]
 80178e4:	687a      	ldr	r2, [r7, #4]
 80178e6:	69b9      	ldr	r1, [r7, #24]
 80178e8:	68f8      	ldr	r0, [r7, #12]
 80178ea:	f7ff fe81 	bl	80175f0 <SPIF_ReadFn>
 80178ee:	4603      	mov	r3, r0
 80178f0:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 80178f2:	68f8      	ldr	r0, [r7, #12]
 80178f4:	f7ff fb2a 	bl	8016f4c <SPIF_UnLock>
  return retVal;
 80178f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80178fa:	4618      	mov	r0, r3
 80178fc:	3720      	adds	r7, #32
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
	...

08017904 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8017904:	b480      	push	{r7}
 8017906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8017908:	4b03      	ldr	r3, [pc, #12]	@ (8017918 <LL_FLASH_GetUDN+0x14>)
 801790a:	681b      	ldr	r3, [r3, #0]
}
 801790c:	4618      	mov	r0, r3
 801790e:	46bd      	mov	sp, r7
 8017910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017914:	4770      	bx	lr
 8017916:	bf00      	nop
 8017918:	1fff7580 	.word	0x1fff7580

0801791c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 801791c:	b480      	push	{r7}
 801791e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8017920:	4b03      	ldr	r3, [pc, #12]	@ (8017930 <LL_FLASH_GetDeviceID+0x14>)
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	b2db      	uxtb	r3, r3
}
 8017926:	4618      	mov	r0, r3
 8017928:	46bd      	mov	sp, r7
 801792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801792e:	4770      	bx	lr
 8017930:	1fff7584 	.word	0x1fff7584

08017934 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8017934:	b480      	push	{r7}
 8017936:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8017938:	4b03      	ldr	r3, [pc, #12]	@ (8017948 <LL_FLASH_GetSTCompanyID+0x14>)
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	0a1b      	lsrs	r3, r3, #8
}
 801793e:	4618      	mov	r0, r3
 8017940:	46bd      	mov	sp, r7
 8017942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017946:	4770      	bx	lr
 8017948:	1fff7584 	.word	0x1fff7584

0801794c <APP_BLE_Init>:
/* USER CODE BEGIN EV */
/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 801794c:	b5b0      	push	{r4, r5, r7, lr}
 801794e:	b090      	sub	sp, #64	@ 0x40
 8017950:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017952:	2392      	movs	r3, #146	@ 0x92
 8017954:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8017958:	4b25      	ldr	r3, [pc, #148]	@ (80179f0 <APP_BLE_Init+0xa4>)
 801795a:	1d3c      	adds	r4, r7, #4
 801795c:	461d      	mov	r5, r3
 801795e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017960:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017962:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017966:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017968:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801796a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801796e:	c403      	stmia	r4!, {r0, r1}
 8017970:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8017972:	f000 f921 	bl	8017bb8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8017976:	2101      	movs	r1, #1
 8017978:	2002      	movs	r0, #2
 801797a:	f001 fba5 	bl	80190c8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 801797e:	4a1d      	ldr	r2, [pc, #116]	@ (80179f4 <APP_BLE_Init+0xa8>)
 8017980:	2100      	movs	r1, #0
 8017982:	2002      	movs	r0, #2
 8017984:	f001 fccc 	bl	8019320 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8017988:	1d3b      	adds	r3, r7, #4
 801798a:	4618      	mov	r0, r3
 801798c:	f7fe fbcc 	bl	8016128 <SHCI_C2_BLE_Init>
 8017990:	4603      	mov	r3, r0
 8017992:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8017996:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801799a:	2b00      	cmp	r3, #0
 801799c:	d001      	beq.n	80179a2 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801799e:	f7eb fb29 	bl	8002ff4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80179a2:	f000 f91f 	bl	8017be4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80179a6:	f7fe fb19 	bl	8015fdc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80179aa:	4b13      	ldr	r3, [pc, #76]	@ (80179f8 <APP_BLE_Init+0xac>)
 80179ac:	2200      	movs	r2, #0
 80179ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80179b2:	4b11      	ldr	r3, [pc, #68]	@ (80179f8 <APP_BLE_Init+0xac>)
 80179b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179b8:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80179ba:	4a10      	ldr	r2, [pc, #64]	@ (80179fc <APP_BLE_Init+0xb0>)
 80179bc:	2100      	movs	r1, #0
 80179be:	2001      	movs	r0, #1
 80179c0:	f001 fcae 	bl	8019320 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80179c4:	2006      	movs	r0, #6
 80179c6:	f7fe f97d 	bl	8015cc4 <aci_hal_set_radio_activity_mask>
 80179ca:	4603      	mov	r3, r0
 80179cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80179d0:	f000 facb 	bl	8017f6a <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80179d4:	4b08      	ldr	r3, [pc, #32]	@ (80179f8 <APP_BLE_Init+0xac>)
 80179d6:	2200      	movs	r2, #0
 80179d8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80179da:	4b07      	ldr	r3, [pc, #28]	@ (80179f8 <APP_BLE_Init+0xac>)
 80179dc:	2200      	movs	r2, #0
 80179de:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80179e0:	2001      	movs	r0, #1
 80179e2:	f000 f9b3 	bl	8017d4c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */
  /* USER CODE END APP_BLE_Init_2 */

  return;
 80179e6:	bf00      	nop
}
 80179e8:	3740      	adds	r7, #64	@ 0x40
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bdb0      	pop	{r4, r5, r7, pc}
 80179ee:	bf00      	nop
 80179f0:	0801feac 	.word	0x0801feac
 80179f4:	08016345 	.word	0x08016345
 80179f8:	200014f4 	.word	0x200014f4
 80179fc:	08017e35 	.word	0x08017e35

08017a00 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b08c      	sub	sp, #48	@ 0x30
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017a08:	2392      	movs	r3, #146	@ 0x92
 8017a0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* PAIRING */

  /* USER CODE BEGIN SVCCTL_App_Notification */
  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	3301      	adds	r3, #1
 8017a12:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8017a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a16:	781b      	ldrb	r3, [r3, #0]
 8017a18:	2bff      	cmp	r3, #255	@ 0xff
 8017a1a:	d05c      	beq.n	8017ad6 <SVCCTL_App_Notification+0xd6>
 8017a1c:	2bff      	cmp	r3, #255	@ 0xff
 8017a1e:	f300 80bd 	bgt.w	8017b9c <SVCCTL_App_Notification+0x19c>
 8017a22:	2b3e      	cmp	r3, #62	@ 0x3e
 8017a24:	d02b      	beq.n	8017a7e <SVCCTL_App_Notification+0x7e>
 8017a26:	2b3e      	cmp	r3, #62	@ 0x3e
 8017a28:	f300 80b8 	bgt.w	8017b9c <SVCCTL_App_Notification+0x19c>
 8017a2c:	2b05      	cmp	r3, #5
 8017a2e:	d002      	beq.n	8017a36 <SVCCTL_App_Notification+0x36>
 8017a30:	2b10      	cmp	r3, #16
 8017a32:	d020      	beq.n	8017a76 <SVCCTL_App_Notification+0x76>
      /* USER CODE END EVENT_PCKT */

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/
      /* USER CODE END ECODE_DEFAULT*/
      break;
 8017a34:	e0b2      	b.n	8017b9c <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8017a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a38:	3302      	adds	r3, #2
 8017a3a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017a42:	b29a      	uxth	r2, r3
 8017a44:	4b59      	ldr	r3, [pc, #356]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017a46:	8adb      	ldrh	r3, [r3, #22]
 8017a48:	429a      	cmp	r2, r3
 8017a4a:	d106      	bne.n	8017a5a <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8017a4c:	4b57      	ldr	r3, [pc, #348]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017a4e:	2200      	movs	r2, #0
 8017a50:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017a52:	4b56      	ldr	r3, [pc, #344]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017a54:	2200      	movs	r2, #0
 8017a56:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8017a5a:	2001      	movs	r0, #1
 8017a5c:	f000 f976 	bl	8017d4c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8017a60:	4b53      	ldr	r3, [pc, #332]	@ (8017bb0 <SVCCTL_App_Notification+0x1b0>)
 8017a62:	2201      	movs	r2, #1
 8017a64:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017a66:	4b51      	ldr	r3, [pc, #324]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017a68:	8ada      	ldrh	r2, [r3, #22]
 8017a6a:	4b51      	ldr	r3, [pc, #324]	@ (8017bb0 <SVCCTL_App_Notification+0x1b0>)
 8017a6c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8017a6e:	4850      	ldr	r0, [pc, #320]	@ (8017bb0 <SVCCTL_App_Notification+0x1b0>)
 8017a70:	f000 fa67 	bl	8017f42 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8017a74:	e095      	b.n	8017ba2 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8017a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a78:	3302      	adds	r3, #2
 8017a7a:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8017a7c:	e091      	b.n	8017ba2 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8017a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017a80:	3302      	adds	r3, #2
 8017a82:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8017a84:	69bb      	ldr	r3, [r7, #24]
 8017a86:	781b      	ldrb	r3, [r3, #0]
 8017a88:	2b01      	cmp	r3, #1
 8017a8a:	d001      	beq.n	8017a90 <SVCCTL_App_Notification+0x90>
 8017a8c:	2b03      	cmp	r3, #3
          break;
 8017a8e:	e021      	b.n	8017ad4 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8017a90:	69bb      	ldr	r3, [r7, #24]
 8017a92:	3301      	adds	r3, #1
 8017a94:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8017a96:	4b45      	ldr	r3, [pc, #276]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017a98:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017a9c:	2b04      	cmp	r3, #4
 8017a9e:	d104      	bne.n	8017aaa <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8017aa0:	4b42      	ldr	r3, [pc, #264]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017aa2:	2206      	movs	r2, #6
 8017aa4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8017aa8:	e003      	b.n	8017ab2 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8017aaa:	4b40      	ldr	r3, [pc, #256]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017aac:	2205      	movs	r2, #5
 8017aae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8017ab2:	697b      	ldr	r3, [r7, #20]
 8017ab4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017ab8:	b29a      	uxth	r2, r3
 8017aba:	4b3c      	ldr	r3, [pc, #240]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017abc:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8017abe:	4b3c      	ldr	r3, [pc, #240]	@ (8017bb0 <SVCCTL_App_Notification+0x1b0>)
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017ac4:	4b39      	ldr	r3, [pc, #228]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017ac6:	8ada      	ldrh	r2, [r3, #22]
 8017ac8:	4b39      	ldr	r3, [pc, #228]	@ (8017bb0 <SVCCTL_App_Notification+0x1b0>)
 8017aca:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8017acc:	4838      	ldr	r0, [pc, #224]	@ (8017bb0 <SVCCTL_App_Notification+0x1b0>)
 8017ace:	f000 fa38 	bl	8017f42 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8017ad2:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8017ad4:	e065      	b.n	8017ba2 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8017ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ad8:	3302      	adds	r3, #2
 8017ada:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8017adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ade:	881b      	ldrh	r3, [r3, #0]
 8017ae0:	b29b      	uxth	r3, r3
 8017ae2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017ae6:	4293      	cmp	r3, r2
 8017ae8:	d048      	beq.n	8017b7c <SVCCTL_App_Notification+0x17c>
 8017aea:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017aee:	4293      	cmp	r3, r2
 8017af0:	dc56      	bgt.n	8017ba0 <SVCCTL_App_Notification+0x1a0>
 8017af2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017af6:	d04b      	beq.n	8017b90 <SVCCTL_App_Notification+0x190>
 8017af8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017afc:	dc50      	bgt.n	8017ba0 <SVCCTL_App_Notification+0x1a0>
 8017afe:	f240 420a 	movw	r2, #1034	@ 0x40a
 8017b02:	4293      	cmp	r3, r2
 8017b04:	dc4c      	bgt.n	8017ba0 <SVCCTL_App_Notification+0x1a0>
 8017b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017b0a:	dc04      	bgt.n	8017b16 <SVCCTL_App_Notification+0x116>
 8017b0c:	2b04      	cmp	r3, #4
 8017b0e:	d041      	beq.n	8017b94 <SVCCTL_App_Notification+0x194>
 8017b10:	2b06      	cmp	r3, #6
 8017b12:	d039      	beq.n	8017b88 <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017b14:	e044      	b.n	8017ba0 <SVCCTL_App_Notification+0x1a0>
 8017b16:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8017b1a:	2b09      	cmp	r3, #9
 8017b1c:	d840      	bhi.n	8017ba0 <SVCCTL_App_Notification+0x1a0>
 8017b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8017b24 <SVCCTL_App_Notification+0x124>)
 8017b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b24:	08017b75 	.word	0x08017b75
 8017b28:	08017b4d 	.word	0x08017b4d
 8017b2c:	08017ba1 	.word	0x08017ba1
 8017b30:	08017ba1 	.word	0x08017ba1
 8017b34:	08017ba1 	.word	0x08017ba1
 8017b38:	08017ba1 	.word	0x08017ba1
 8017b3c:	08017b99 	.word	0x08017b99
 8017b40:	08017ba1 	.word	0x08017ba1
 8017b44:	08017b61 	.word	0x08017b61
 8017b48:	08017b99 	.word	0x08017b99
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8017b4c:	4b17      	ldr	r3, [pc, #92]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017b4e:	8adb      	ldrh	r3, [r3, #22]
 8017b50:	4918      	ldr	r1, [pc, #96]	@ (8017bb4 <SVCCTL_App_Notification+0x1b4>)
 8017b52:	4618      	mov	r0, r3
 8017b54:	f7fd fab8 	bl	80150c8 <aci_gap_pass_key_resp>
 8017b58:	4603      	mov	r3, r0
 8017b5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017b5e:	e01c      	b.n	8017b9a <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8017b60:	4b12      	ldr	r3, [pc, #72]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017b62:	8adb      	ldrh	r3, [r3, #22]
 8017b64:	2101      	movs	r1, #1
 8017b66:	4618      	mov	r0, r3
 8017b68:	f7fd fc58 	bl	801541c <aci_gap_numeric_comparison_value_confirm_yesno>
 8017b6c:	4603      	mov	r3, r0
 8017b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017b72:	e012      	b.n	8017b9a <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8017b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b76:	3302      	adds	r3, #2
 8017b78:	623b      	str	r3, [r7, #32]
          break;
 8017b7a:	e00e      	b.n	8017b9a <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8017b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8017bac <SVCCTL_App_Notification+0x1ac>)
 8017b7e:	8adb      	ldrh	r3, [r3, #22]
 8017b80:	4618      	mov	r0, r3
 8017b82:	f7fd ff5e 	bl	8015a42 <aci_gatt_confirm_indication>
        break;
 8017b86:	e008      	b.n	8017b9a <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8017b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b8a:	3302      	adds	r3, #2
 8017b8c:	61fb      	str	r3, [r7, #28]
          break;
 8017b8e:	e004      	b.n	8017b9a <SVCCTL_App_Notification+0x19a>
          break;
 8017b90:	bf00      	nop
 8017b92:	e005      	b.n	8017ba0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8017b94:	bf00      	nop
 8017b96:	e003      	b.n	8017ba0 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8017b98:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017b9a:	e001      	b.n	8017ba0 <SVCCTL_App_Notification+0x1a0>
      break;
 8017b9c:	bf00      	nop
 8017b9e:	e000      	b.n	8017ba2 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017ba0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8017ba2:	2301      	movs	r3, #1
}
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	3730      	adds	r7, #48	@ 0x30
 8017ba8:	46bd      	mov	sp, r7
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	200014f4 	.word	0x200014f4
 8017bb0:	20001578 	.word	0x20001578
 8017bb4:	0001b207 	.word	0x0001b207

08017bb8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8017bbe:	4b06      	ldr	r3, [pc, #24]	@ (8017bd8 <Ble_Tl_Init+0x20>)
 8017bc0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8017bc2:	4b06      	ldr	r3, [pc, #24]	@ (8017bdc <Ble_Tl_Init+0x24>)
 8017bc4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8017bc6:	463b      	mov	r3, r7
 8017bc8:	4619      	mov	r1, r3
 8017bca:	4805      	ldr	r0, [pc, #20]	@ (8017be0 <Ble_Tl_Init+0x28>)
 8017bcc:	f7fe fb9e 	bl	801630c <hci_init>

  return;
 8017bd0:	bf00      	nop
}
 8017bd2:	3708      	adds	r7, #8
 8017bd4:	46bd      	mov	sp, r7
 8017bd6:	bd80      	pop	{r7, pc}
 8017bd8:	200300d8 	.word	0x200300d8
 8017bdc:	08017ee5 	.word	0x08017ee5
 8017be0:	08017ead 	.word	0x08017ead

08017be4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8017be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017be6:	b08d      	sub	sp, #52	@ 0x34
 8017be8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8017bea:	2300      	movs	r3, #0
 8017bec:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017bee:	2392      	movs	r3, #146	@ 0x92
 8017bf0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8017bf2:	f7fe f8bb 	bl	8015d6c <hci_reset>
 8017bf6:	4603      	mov	r3, r0
 8017bf8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8017bfa:	f000 f8d7 	bl	8017dac <BleGetBdAddress>
 8017bfe:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8017c00:	693a      	ldr	r2, [r7, #16]
 8017c02:	2106      	movs	r1, #6
 8017c04:	2000      	movs	r0, #0
 8017c06:	f7fd ff71 	bl	8015aec <aci_hal_write_config_data>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8017c0e:	4a4a      	ldr	r2, [pc, #296]	@ (8017d38 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8017c10:	2110      	movs	r1, #16
 8017c12:	2018      	movs	r0, #24
 8017c14:	f7fd ff6a 	bl	8015aec <aci_hal_write_config_data>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8017c1c:	4a47      	ldr	r2, [pc, #284]	@ (8017d3c <Ble_Hci_Gap_Gatt_Init+0x158>)
 8017c1e:	2110      	movs	r1, #16
 8017c20:	2008      	movs	r0, #8
 8017c22:	f7fd ff63 	bl	8015aec <aci_hal_write_config_data>
 8017c26:	4603      	mov	r3, r0
 8017c28:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8017c2a:	2118      	movs	r1, #24
 8017c2c:	2001      	movs	r0, #1
 8017c2e:	f7fd ffe2 	bl	8015bf6 <aci_hal_set_tx_power_level>
 8017c32:	4603      	mov	r3, r0
 8017c34:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8017c36:	f7fd fc58 	bl	80154ea <aci_gatt_init>
 8017c3a:	4603      	mov	r3, r0
 8017c3c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8017c42:	7bfb      	ldrb	r3, [r7, #15]
 8017c44:	f043 0301 	orr.w	r3, r3, #1
 8017c48:	73fb      	strb	r3, [r7, #15]
#endif /* BLE_CFG_CENTRAL == 1 */

/* USER CODE BEGIN Role_Mngt*/
/* USER CODE END Role_Mngt */

  if (role > 0)
 8017c4a:	7bfb      	ldrb	r3, [r7, #15]
 8017c4c:	2b00      	cmp	r3, #0
 8017c4e:	d01f      	beq.n	8017c90 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8017c50:	4b3b      	ldr	r3, [pc, #236]	@ (8017d40 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8017c52:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8017c54:	1dba      	adds	r2, r7, #6
 8017c56:	7bf8      	ldrb	r0, [r7, #15]
 8017c58:	1cbb      	adds	r3, r7, #2
 8017c5a:	9301      	str	r3, [sp, #4]
 8017c5c:	1d3b      	adds	r3, r7, #4
 8017c5e:	9300      	str	r3, [sp, #0]
 8017c60:	4613      	mov	r3, r2
 8017c62:	2208      	movs	r2, #8
 8017c64:	2100      	movs	r1, #0
 8017c66:	f7fd fa96 	bl	8015196 <aci_gap_init>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8017c6e:	88fc      	ldrh	r4, [r7, #6]
 8017c70:	88bd      	ldrh	r5, [r7, #4]
 8017c72:	68b8      	ldr	r0, [r7, #8]
 8017c74:	f7e8 fad4 	bl	8000220 <strlen>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	b2da      	uxtb	r2, r3
 8017c7c:	68bb      	ldr	r3, [r7, #8]
 8017c7e:	9300      	str	r3, [sp, #0]
 8017c80:	4613      	mov	r3, r2
 8017c82:	2200      	movs	r2, #0
 8017c84:	4629      	mov	r1, r5
 8017c86:	4620      	mov	r0, r4
 8017c88:	f7fd fe32 	bl	80158f0 <aci_gatt_update_char_value>
 8017c8c:	4603      	mov	r3, r0
 8017c8e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8017c90:	88f8      	ldrh	r0, [r7, #6]
 8017c92:	8879      	ldrh	r1, [r7, #2]
 8017c94:	463b      	mov	r3, r7
 8017c96:	9300      	str	r3, [sp, #0]
 8017c98:	2302      	movs	r3, #2
 8017c9a:	2200      	movs	r2, #0
 8017c9c:	f7fd fe28 	bl	80158f0 <aci_gatt_update_char_value>
 8017ca0:	4603      	mov	r3, r0
 8017ca2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8017ca4:	2202      	movs	r2, #2
 8017ca6:	2102      	movs	r1, #2
 8017ca8:	2000      	movs	r0, #0
 8017caa:	f7fe f883 	bl	8015db4 <hci_le_set_default_phy>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8017cb2:	4b24      	ldr	r3, [pc, #144]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cb4:	2201      	movs	r2, #1
 8017cb6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8017cb8:	4b22      	ldr	r3, [pc, #136]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cba:	781b      	ldrb	r3, [r3, #0]
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7fd f8eb 	bl	8014e98 <aci_gap_set_io_capability>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8017cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cc8:	2201      	movs	r2, #1
 8017cca:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8017ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cce:	2208      	movs	r2, #8
 8017cd0:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8017cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cd4:	2210      	movs	r2, #16
 8017cd6:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8017cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cda:	2200      	movs	r2, #0
 8017cdc:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8017cde:	4b19      	ldr	r3, [pc, #100]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ce0:	4a19      	ldr	r2, [pc, #100]	@ (8017d48 <Ble_Hci_Gap_Gatt_Init+0x164>)
 8017ce2:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8017ce4:	4b17      	ldr	r3, [pc, #92]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8017cea:	4b16      	ldr	r3, [pc, #88]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cec:	789c      	ldrb	r4, [r3, #2]
 8017cee:	4b15      	ldr	r3, [pc, #84]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cf0:	785d      	ldrb	r5, [r3, #1]
 8017cf2:	4b14      	ldr	r3, [pc, #80]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cf4:	791b      	ldrb	r3, [r3, #4]
 8017cf6:	4a13      	ldr	r2, [pc, #76]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cf8:	7952      	ldrb	r2, [r2, #5]
 8017cfa:	4912      	ldr	r1, [pc, #72]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017cfc:	78c9      	ldrb	r1, [r1, #3]
 8017cfe:	4811      	ldr	r0, [pc, #68]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017d00:	6880      	ldr	r0, [r0, #8]
 8017d02:	2600      	movs	r6, #0
 8017d04:	9604      	str	r6, [sp, #16]
 8017d06:	9003      	str	r0, [sp, #12]
 8017d08:	9102      	str	r1, [sp, #8]
 8017d0a:	9201      	str	r2, [sp, #4]
 8017d0c:	9300      	str	r3, [sp, #0]
 8017d0e:	2300      	movs	r3, #0
 8017d10:	2201      	movs	r2, #1
 8017d12:	4629      	mov	r1, r5
 8017d14:	4620      	mov	r0, r4
 8017d16:	f7fd f913 	bl	8014f40 <aci_gap_set_authentication_requirement>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8017d1e:	4b09      	ldr	r3, [pc, #36]	@ (8017d44 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017d20:	789b      	ldrb	r3, [r3, #2]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d003      	beq.n	8017d2e <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8017d26:	f7fd fb55 	bl	80153d4 <aci_gap_configure_filter_accept_list>
 8017d2a:	4603      	mov	r3, r0
 8017d2c:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8017d2e:	bf00      	nop
 8017d30:	371c      	adds	r7, #28
 8017d32:	46bd      	mov	sp, r7
 8017d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d36:	bf00      	nop
 8017d38:	08022164 	.word	0x08022164
 8017d3c:	08022174 	.word	0x08022174
 8017d40:	0801fee8 	.word	0x0801fee8
 8017d44:	200014f4 	.word	0x200014f4
 8017d48:	0001b207 	.word	0x0001b207

08017d4c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b08c      	sub	sp, #48	@ 0x30
 8017d50:	af08      	add	r7, sp, #32
 8017d52:	4603      	mov	r3, r0
 8017d54:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017d56:	2392      	movs	r3, #146	@ 0x92
 8017d58:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8017d5a:	4a12      	ldr	r2, [pc, #72]	@ (8017da4 <Adv_Request+0x58>)
 8017d5c:	79fb      	ldrb	r3, [r7, #7]
 8017d5e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8017d62:	2300      	movs	r3, #0
 8017d64:	9306      	str	r3, [sp, #24]
 8017d66:	2300      	movs	r3, #0
 8017d68:	9305      	str	r3, [sp, #20]
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	9304      	str	r3, [sp, #16]
 8017d6e:	2300      	movs	r3, #0
 8017d70:	9303      	str	r3, [sp, #12]
 8017d72:	2300      	movs	r3, #0
 8017d74:	9302      	str	r3, [sp, #8]
 8017d76:	2300      	movs	r3, #0
 8017d78:	9301      	str	r3, [sp, #4]
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	9300      	str	r3, [sp, #0]
 8017d7e:	2300      	movs	r3, #0
 8017d80:	22a0      	movs	r2, #160	@ 0xa0
 8017d82:	2180      	movs	r1, #128	@ 0x80
 8017d84:	2000      	movs	r0, #0
 8017d86:	f7fc ff8d 	bl	8014ca4 <aci_gap_set_discoverable>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8017d8e:	4906      	ldr	r1, [pc, #24]	@ (8017da8 <Adv_Request+0x5c>)
 8017d90:	200e      	movs	r0, #14
 8017d92:	f7fd faad 	bl	80152f0 <aci_gap_update_adv_data>
 8017d96:	4603      	mov	r3, r0
 8017d98:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8017d9a:	bf00      	nop
}
 8017d9c:	3710      	adds	r7, #16
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	bd80      	pop	{r7, pc}
 8017da2:	bf00      	nop
 8017da4:	200014f4 	.word	0x200014f4
 8017da8:	200000c4 	.word	0x200000c4

08017dac <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b086      	sub	sp, #24
 8017db0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8017db2:	f7ff fda7 	bl	8017904 <LL_FLASH_GetUDN>
 8017db6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8017db8:	693b      	ldr	r3, [r7, #16]
 8017dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017dbe:	d023      	beq.n	8017e08 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8017dc0:	f7ff fdb8 	bl	8017934 <LL_FLASH_GetSTCompanyID>
 8017dc4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8017dc6:	f7ff fda9 	bl	801791c <LL_FLASH_GetDeviceID>
 8017dca:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8017dcc:	693b      	ldr	r3, [r7, #16]
 8017dce:	b2da      	uxtb	r2, r3
 8017dd0:	4b16      	ldr	r3, [pc, #88]	@ (8017e2c <BleGetBdAddress+0x80>)
 8017dd2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8017dd4:	693b      	ldr	r3, [r7, #16]
 8017dd6:	0a1b      	lsrs	r3, r3, #8
 8017dd8:	b2da      	uxtb	r2, r3
 8017dda:	4b14      	ldr	r3, [pc, #80]	@ (8017e2c <BleGetBdAddress+0x80>)
 8017ddc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	b2da      	uxtb	r2, r3
 8017de2:	4b12      	ldr	r3, [pc, #72]	@ (8017e2c <BleGetBdAddress+0x80>)
 8017de4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8017de6:	68bb      	ldr	r3, [r7, #8]
 8017de8:	b2da      	uxtb	r2, r3
 8017dea:	4b10      	ldr	r3, [pc, #64]	@ (8017e2c <BleGetBdAddress+0x80>)
 8017dec:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8017dee:	68bb      	ldr	r3, [r7, #8]
 8017df0:	0a1b      	lsrs	r3, r3, #8
 8017df2:	b2da      	uxtb	r2, r3
 8017df4:	4b0d      	ldr	r3, [pc, #52]	@ (8017e2c <BleGetBdAddress+0x80>)
 8017df6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	0c1b      	lsrs	r3, r3, #16
 8017dfc:	b2da      	uxtb	r2, r3
 8017dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8017e2c <BleGetBdAddress+0x80>)
 8017e00:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8017e02:	4b0a      	ldr	r3, [pc, #40]	@ (8017e2c <BleGetBdAddress+0x80>)
 8017e04:	617b      	str	r3, [r7, #20]
 8017e06:	e00b      	b.n	8017e20 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8017e08:	2000      	movs	r0, #0
 8017e0a:	f7fe ff9b 	bl	8016d44 <OTP_Read>
 8017e0e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	d002      	beq.n	8017e1c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	617b      	str	r3, [r7, #20]
 8017e1a:	e001      	b.n	8017e20 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8017e1c:	4b04      	ldr	r3, [pc, #16]	@ (8017e30 <BleGetBdAddress+0x84>)
 8017e1e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8017e20:	697b      	ldr	r3, [r7, #20]
}
 8017e22:	4618      	mov	r0, r3
 8017e24:	3718      	adds	r7, #24
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd80      	pop	{r7, pc}
 8017e2a:	bf00      	nop
 8017e2c:	200014ec 	.word	0x200014ec
 8017e30:	0802215c 	.word	0x0802215c

08017e34 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b082      	sub	sp, #8
 8017e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8017e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8017e64 <Adv_Cancel+0x30>)
 8017e3c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017e40:	2b05      	cmp	r3, #5
 8017e42:	d00a      	beq.n	8017e5a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017e44:	2392      	movs	r3, #146	@ 0x92
 8017e46:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8017e48:	f7fc ff08 	bl	8014c5c <aci_gap_set_non_discoverable>
 8017e4c:	4603      	mov	r3, r0
 8017e4e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017e50:	4b04      	ldr	r3, [pc, #16]	@ (8017e64 <Adv_Cancel+0x30>)
 8017e52:	2200      	movs	r2, #0
 8017e54:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8017e58:	bf00      	nop
 8017e5a:	bf00      	nop
}
 8017e5c:	3708      	adds	r7, #8
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}
 8017e62:	bf00      	nop
 8017e64:	200014f4 	.word	0x200014f4

08017e68 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8017e70:	2100      	movs	r1, #0
 8017e72:	2002      	movs	r0, #2
 8017e74:	f001 fa76 	bl	8019364 <UTIL_SEQ_SetTask>

  return;
 8017e78:	bf00      	nop
}
 8017e7a:	3708      	adds	r7, #8
 8017e7c:	46bd      	mov	sp, r7
 8017e7e:	bd80      	pop	{r7, pc}

08017e80 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b082      	sub	sp, #8
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017e88:	2001      	movs	r0, #1
 8017e8a:	f001 fad7 	bl	801943c <UTIL_SEQ_SetEvt>

  return;
 8017e8e:	bf00      	nop
}
 8017e90:	3708      	adds	r7, #8
 8017e92:	46bd      	mov	sp, r7
 8017e94:	bd80      	pop	{r7, pc}

08017e96 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8017e96:	b580      	push	{r7, lr}
 8017e98:	b082      	sub	sp, #8
 8017e9a:	af00      	add	r7, sp, #0
 8017e9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8017e9e:	2001      	movs	r0, #1
 8017ea0:	f001 faec 	bl	801947c <UTIL_SEQ_WaitEvt>

  return;
 8017ea4:	bf00      	nop
}
 8017ea6:	3708      	adds	r7, #8
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	bd80      	pop	{r7, pc}

08017eac <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8017eac:	b580      	push	{r7, lr}
 8017eae:	b084      	sub	sp, #16
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	685b      	ldr	r3, [r3, #4]
 8017ebc:	3308      	adds	r3, #8
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f7fe f8de 	bl	8016080 <SVCCTL_UserEvtRx>
 8017ec4:	4603      	mov	r3, r0
 8017ec6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8017ec8:	7afb      	ldrb	r3, [r7, #11]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d003      	beq.n	8017ed6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8017ece:	68fb      	ldr	r3, [r7, #12]
 8017ed0:	2201      	movs	r2, #1
 8017ed2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8017ed4:	e003      	b.n	8017ede <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	2200      	movs	r2, #0
 8017eda:	701a      	strb	r2, [r3, #0]
  return;
 8017edc:	bf00      	nop
}
 8017ede:	3710      	adds	r7, #16
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	bd80      	pop	{r7, pc}

08017ee4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	b084      	sub	sp, #16
 8017ee8:	af00      	add	r7, sp, #0
 8017eea:	4603      	mov	r3, r0
 8017eec:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8017eee:	79fb      	ldrb	r3, [r7, #7]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d002      	beq.n	8017efa <BLE_StatusNot+0x16>
 8017ef4:	2b01      	cmp	r3, #1
 8017ef6:	d006      	beq.n	8017f06 <BLE_StatusNot+0x22>
      break;

    default:
      /* USER CODE BEGIN Status */
      /* USER CODE END Status */
      break;
 8017ef8:	e00b      	b.n	8017f12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017efa:	2307      	movs	r3, #7
 8017efc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8017efe:	68f8      	ldr	r0, [r7, #12]
 8017f00:	f001 fa5c 	bl	80193bc <UTIL_SEQ_PauseTask>
      break;
 8017f04:	e005      	b.n	8017f12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8017f06:	2307      	movs	r3, #7
 8017f08:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8017f0a:	68f8      	ldr	r0, [r7, #12]
 8017f0c:	f001 fa76 	bl	80193fc <UTIL_SEQ_ResumeTask>
      break;
 8017f10:	bf00      	nop
  }

  return;
 8017f12:	bf00      	nop
}
 8017f14:	3710      	adds	r7, #16
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}

08017f1a <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8017f1a:	b480      	push	{r7}
 8017f1c:	b083      	sub	sp, #12
 8017f1e:	af00      	add	r7, sp, #0
 8017f20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	781b      	ldrb	r3, [r3, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d002      	beq.n	8017f30 <Custom_STM_App_Notification+0x16>
 8017f2a:	2b01      	cmp	r3, #1
 8017f2c:	d002      	beq.n	8017f34 <Custom_STM_App_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8017f2e:	e002      	b.n	8017f36 <Custom_STM_App_Notification+0x1c>
      break;
 8017f30:	bf00      	nop
 8017f32:	e000      	b.n	8017f36 <Custom_STM_App_Notification+0x1c>
      break;
 8017f34:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8017f36:	bf00      	nop
}
 8017f38:	370c      	adds	r7, #12
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f40:	4770      	bx	lr

08017f42 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8017f42:	b480      	push	{r7}
 8017f44:	b083      	sub	sp, #12
 8017f46:	af00      	add	r7, sp, #0
 8017f48:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	781b      	ldrb	r3, [r3, #0]
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d002      	beq.n	8017f58 <Custom_APP_Notification+0x16>
 8017f52:	2b01      	cmp	r3, #1
 8017f54:	d002      	beq.n	8017f5c <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8017f56:	e002      	b.n	8017f5e <Custom_APP_Notification+0x1c>
      break;
 8017f58:	bf00      	nop
 8017f5a:	e000      	b.n	8017f5e <Custom_APP_Notification+0x1c>
      break;
 8017f5c:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8017f5e:	bf00      	nop
}
 8017f60:	370c      	adds	r7, #12
 8017f62:	46bd      	mov	sp, r7
 8017f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f68:	4770      	bx	lr

08017f6a <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8017f6a:	b480      	push	{r7}
 8017f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8017f6e:	bf00      	nop
}
 8017f70:	46bd      	mov	sp, r7
 8017f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f76:	4770      	bx	lr

08017f78 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b08c      	sub	sp, #48	@ 0x30
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8017f80:	2300      	movs	r3, #0
 8017f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	3301      	adds	r3, #1
 8017f8a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8017f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f8e:	781b      	ldrb	r3, [r3, #0]
 8017f90:	2bff      	cmp	r3, #255	@ 0xff
 8017f92:	d16d      	bne.n	8018070 <Custom_STM_Event_Handler+0xf8>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8017f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f96:	3302      	adds	r3, #2
 8017f98:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8017f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f9c:	881b      	ldrh	r3, [r3, #0]
 8017f9e:	b29b      	uxth	r3, r3
 8017fa0:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8017fa4:	2b1a      	cmp	r3, #26
 8017fa6:	d85f      	bhi.n	8018068 <Custom_STM_Event_Handler+0xf0>
 8017fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8017fb0 <Custom_STM_Event_Handler+0x38>)
 8017faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017fae:	bf00      	nop
 8017fb0:	0801801d 	.word	0x0801801d
 8017fb4:	08018069 	.word	0x08018069
 8017fb8:	08018069 	.word	0x08018069
 8017fbc:	08018069 	.word	0x08018069
 8017fc0:	08018069 	.word	0x08018069
 8017fc4:	08018069 	.word	0x08018069
 8017fc8:	08018069 	.word	0x08018069
 8017fcc:	08018069 	.word	0x08018069
 8017fd0:	08018069 	.word	0x08018069
 8017fd4:	08018069 	.word	0x08018069
 8017fd8:	08018069 	.word	0x08018069
 8017fdc:	08018069 	.word	0x08018069
 8017fe0:	08018069 	.word	0x08018069
 8017fe4:	08018069 	.word	0x08018069
 8017fe8:	08018069 	.word	0x08018069
 8017fec:	08018069 	.word	0x08018069
 8017ff0:	08018069 	.word	0x08018069
 8017ff4:	08018069 	.word	0x08018069
 8017ff8:	08018069 	.word	0x08018069
 8017ffc:	08018069 	.word	0x08018069
 8018000:	08018069 	.word	0x08018069
 8018004:	08018069 	.word	0x08018069
 8018008:	08018069 	.word	0x08018069
 801800c:	08018069 	.word	0x08018069
 8018010:	08018069 	.word	0x08018069
 8018014:	08018069 	.word	0x08018069
 8018018:	0801804b 	.word	0x0801804b
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 801801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801801e:	3302      	adds	r3, #2
 8018020:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8018022:	69fb      	ldr	r3, [r7, #28]
 8018024:	885b      	ldrh	r3, [r3, #2]
 8018026:	b29b      	uxth	r3, r3
 8018028:	461a      	mov	r2, r3
 801802a:	4b15      	ldr	r3, [pc, #84]	@ (8018080 <Custom_STM_Event_Handler+0x108>)
 801802c:	885b      	ldrh	r3, [r3, #2]
 801802e:	3301      	adds	r3, #1
 8018030:	429a      	cmp	r2, r3
 8018032:	d11b      	bne.n	801806c <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8018034:	2301      	movs	r3, #1
 8018036:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            memcpy((char *) blereceivebuf,(char *)attribute_modified->Attr_Data,64);
 801803a:	69fb      	ldr	r3, [r7, #28]
 801803c:	3308      	adds	r3, #8
 801803e:	2240      	movs	r2, #64	@ 0x40
 8018040:	4619      	mov	r1, r3
 8018042:	4810      	ldr	r0, [pc, #64]	@ (8018084 <Custom_STM_Event_Handler+0x10c>)
 8018044:	f003 fb21 	bl	801b68a <memcpy>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8018048:	e010      	b.n	801806c <Custom_STM_Event_Handler+0xf4>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 801804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801804c:	3302      	adds	r3, #2
 801804e:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8018050:	2301      	movs	r3, #1
 8018052:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8018054:	6a3b      	ldr	r3, [r7, #32]
 8018056:	881b      	ldrh	r3, [r3, #0]
 8018058:	b29b      	uxth	r3, r3
 801805a:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 801805c:	f107 0308 	add.w	r3, r7, #8
 8018060:	4618      	mov	r0, r3
 8018062:	f7ff ff5a 	bl	8017f1a <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8018066:	e002      	b.n	801806e <Custom_STM_Event_Handler+0xf6>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8018068:	bf00      	nop
 801806a:	e002      	b.n	8018072 <Custom_STM_Event_Handler+0xfa>
          break;
 801806c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801806e:	e000      	b.n	8018072 <Custom_STM_Event_Handler+0xfa>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8018070:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8018072:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8018076:	4618      	mov	r0, r3
 8018078:	3730      	adds	r7, #48	@ 0x30
 801807a:	46bd      	mov	sp, r7
 801807c:	bd80      	pop	{r7, pc}
 801807e:	bf00      	nop
 8018080:	2000157c 	.word	0x2000157c
 8018084:	20000bb8 	.word	0x20000bb8

08018088 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8018088:	b580      	push	{r7, lr}
 801808a:	b08c      	sub	sp, #48	@ 0x30
 801808c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801808e:	2392      	movs	r3, #146	@ 0x92
 8018090:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8018092:	4834      	ldr	r0, [pc, #208]	@ (8018164 <SVCCTL_InitCustomSvc+0xdc>)
 8018094:	f7fd ffda 	bl	801604c <SVCCTL_RegisterSvcHandler>
   *                              = 3
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 3;
 8018098:	2303      	movs	r3, #3
 801809a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 801809c:	238f      	movs	r3, #143	@ 0x8f
 801809e:	713b      	strb	r3, [r7, #4]
 80180a0:	23e5      	movs	r3, #229	@ 0xe5
 80180a2:	717b      	strb	r3, [r7, #5]
 80180a4:	23b3      	movs	r3, #179	@ 0xb3
 80180a6:	71bb      	strb	r3, [r7, #6]
 80180a8:	23d5      	movs	r3, #213	@ 0xd5
 80180aa:	71fb      	strb	r3, [r7, #7]
 80180ac:	232e      	movs	r3, #46	@ 0x2e
 80180ae:	723b      	strb	r3, [r7, #8]
 80180b0:	237f      	movs	r3, #127	@ 0x7f
 80180b2:	727b      	strb	r3, [r7, #9]
 80180b4:	234a      	movs	r3, #74	@ 0x4a
 80180b6:	72bb      	strb	r3, [r7, #10]
 80180b8:	2398      	movs	r3, #152	@ 0x98
 80180ba:	72fb      	strb	r3, [r7, #11]
 80180bc:	232a      	movs	r3, #42	@ 0x2a
 80180be:	733b      	strb	r3, [r7, #12]
 80180c0:	2348      	movs	r3, #72	@ 0x48
 80180c2:	737b      	strb	r3, [r7, #13]
 80180c4:	237a      	movs	r3, #122	@ 0x7a
 80180c6:	73bb      	strb	r3, [r7, #14]
 80180c8:	23cc      	movs	r3, #204	@ 0xcc
 80180ca:	73fb      	strb	r3, [r7, #15]
 80180cc:	2300      	movs	r3, #0
 80180ce:	743b      	strb	r3, [r7, #16]
 80180d0:	2300      	movs	r3, #0
 80180d2:	747b      	strb	r3, [r7, #17]
 80180d4:	2300      	movs	r3, #0
 80180d6:	74bb      	strb	r3, [r7, #18]
 80180d8:	2300      	movs	r3, #0
 80180da:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80180dc:	7dbb      	ldrb	r3, [r7, #22]
 80180de:	1d39      	adds	r1, r7, #4
 80180e0:	4a21      	ldr	r2, [pc, #132]	@ (8018168 <SVCCTL_InitCustomSvc+0xe0>)
 80180e2:	9200      	str	r2, [sp, #0]
 80180e4:	2201      	movs	r2, #1
 80180e6:	2002      	movs	r0, #2
 80180e8:	f7fd fa24 	bl	8015534 <aci_gatt_add_service>
 80180ec:	4603      	mov	r3, r0
 80180ee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 80180f0:	2319      	movs	r3, #25
 80180f2:	713b      	strb	r3, [r7, #4]
 80180f4:	23ed      	movs	r3, #237	@ 0xed
 80180f6:	717b      	strb	r3, [r7, #5]
 80180f8:	2382      	movs	r3, #130	@ 0x82
 80180fa:	71bb      	strb	r3, [r7, #6]
 80180fc:	23ae      	movs	r3, #174	@ 0xae
 80180fe:	71fb      	strb	r3, [r7, #7]
 8018100:	23ed      	movs	r3, #237	@ 0xed
 8018102:	723b      	strb	r3, [r7, #8]
 8018104:	2321      	movs	r3, #33	@ 0x21
 8018106:	727b      	strb	r3, [r7, #9]
 8018108:	234c      	movs	r3, #76	@ 0x4c
 801810a:	72bb      	strb	r3, [r7, #10]
 801810c:	239d      	movs	r3, #157	@ 0x9d
 801810e:	72fb      	strb	r3, [r7, #11]
 8018110:	2341      	movs	r3, #65	@ 0x41
 8018112:	733b      	strb	r3, [r7, #12]
 8018114:	2345      	movs	r3, #69	@ 0x45
 8018116:	737b      	strb	r3, [r7, #13]
 8018118:	2322      	movs	r3, #34	@ 0x22
 801811a:	73bb      	strb	r3, [r7, #14]
 801811c:	238e      	movs	r3, #142	@ 0x8e
 801811e:	73fb      	strb	r3, [r7, #15]
 8018120:	2300      	movs	r3, #0
 8018122:	743b      	strb	r3, [r7, #16]
 8018124:	2300      	movs	r3, #0
 8018126:	747b      	strb	r3, [r7, #17]
 8018128:	2300      	movs	r3, #0
 801812a:	74bb      	strb	r3, [r7, #18]
 801812c:	2300      	movs	r3, #0
 801812e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 8018130:	4b0d      	ldr	r3, [pc, #52]	@ (8018168 <SVCCTL_InitCustomSvc+0xe0>)
 8018132:	8818      	ldrh	r0, [r3, #0]
 8018134:	4b0d      	ldr	r3, [pc, #52]	@ (801816c <SVCCTL_InitCustomSvc+0xe4>)
 8018136:	881b      	ldrh	r3, [r3, #0]
 8018138:	1d3a      	adds	r2, r7, #4
 801813a:	490d      	ldr	r1, [pc, #52]	@ (8018170 <SVCCTL_InitCustomSvc+0xe8>)
 801813c:	9105      	str	r1, [sp, #20]
 801813e:	2100      	movs	r1, #0
 8018140:	9104      	str	r1, [sp, #16]
 8018142:	2110      	movs	r1, #16
 8018144:	9103      	str	r1, [sp, #12]
 8018146:	2101      	movs	r1, #1
 8018148:	9102      	str	r1, [sp, #8]
 801814a:	2100      	movs	r1, #0
 801814c:	9101      	str	r1, [sp, #4]
 801814e:	2108      	movs	r1, #8
 8018150:	9100      	str	r1, [sp, #0]
 8018152:	2102      	movs	r1, #2
 8018154:	f7fd fac4 	bl	80156e0 <aci_gatt_add_char>
 8018158:	4603      	mov	r3, r0
 801815a:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 801815c:	bf00      	nop
}
 801815e:	3718      	adds	r7, #24
 8018160:	46bd      	mov	sp, r7
 8018162:	bd80      	pop	{r7, pc}
 8018164:	08017f79 	.word	0x08017f79
 8018168:	2000157c 	.word	0x2000157c
 801816c:	200000d2 	.word	0x200000d2
 8018170:	2000157e 	.word	0x2000157e

08018174 <LL_PWR_EnableBootC2>:
{
 8018174:	b480      	push	{r7}
 8018176:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8018178:	4b05      	ldr	r3, [pc, #20]	@ (8018190 <LL_PWR_EnableBootC2+0x1c>)
 801817a:	68db      	ldr	r3, [r3, #12]
 801817c:	4a04      	ldr	r2, [pc, #16]	@ (8018190 <LL_PWR_EnableBootC2+0x1c>)
 801817e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8018182:	60d3      	str	r3, [r2, #12]
}
 8018184:	bf00      	nop
 8018186:	46bd      	mov	sp, r7
 8018188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818c:	4770      	bx	lr
 801818e:	bf00      	nop
 8018190:	58000400 	.word	0x58000400

08018194 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018194:	b480      	push	{r7}
 8018196:	b083      	sub	sp, #12
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 801819c:	4b06      	ldr	r3, [pc, #24]	@ (80181b8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801819e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80181a2:	4905      	ldr	r1, [pc, #20]	@ (80181b8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	4313      	orrs	r3, r2
 80181a8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80181ac:	bf00      	nop
 80181ae:	370c      	adds	r7, #12
 80181b0:	46bd      	mov	sp, r7
 80181b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b6:	4770      	bx	lr
 80181b8:	58000800 	.word	0x58000800

080181bc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80181bc:	b480      	push	{r7}
 80181be:	b083      	sub	sp, #12
 80181c0:	af00      	add	r7, sp, #0
 80181c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80181c4:	4b05      	ldr	r3, [pc, #20]	@ (80181dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80181c6:	6a1a      	ldr	r2, [r3, #32]
 80181c8:	4904      	ldr	r1, [pc, #16]	@ (80181dc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	4313      	orrs	r3, r2
 80181ce:	620b      	str	r3, [r1, #32]
}
 80181d0:	bf00      	nop
 80181d2:	370c      	adds	r7, #12
 80181d4:	46bd      	mov	sp, r7
 80181d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181da:	4770      	bx	lr
 80181dc:	58000800 	.word	0x58000800

080181e0 <LL_AHB3_GRP1_EnableClock>:
{
 80181e0:	b480      	push	{r7}
 80181e2:	b085      	sub	sp, #20
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80181e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80181ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80181ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	4313      	orrs	r3, r2
 80181f6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80181f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80181fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	4013      	ands	r3, r2
 8018202:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018204:	68fb      	ldr	r3, [r7, #12]
}
 8018206:	bf00      	nop
 8018208:	3714      	adds	r7, #20
 801820a:	46bd      	mov	sp, r7
 801820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018210:	4770      	bx	lr

08018212 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8018212:	b480      	push	{r7}
 8018214:	b085      	sub	sp, #20
 8018216:	af00      	add	r7, sp, #0
 8018218:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801821a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801821e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8018222:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	4313      	orrs	r3, r2
 801822a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801822e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018232:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	4013      	ands	r3, r2
 801823a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801823c:	68fb      	ldr	r3, [r7, #12]
}
 801823e:	bf00      	nop
 8018240:	3714      	adds	r7, #20
 8018242:	46bd      	mov	sp, r7
 8018244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018248:	4770      	bx	lr

0801824a <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801824a:	b480      	push	{r7}
 801824c:	b083      	sub	sp, #12
 801824e:	af00      	add	r7, sp, #0
 8018250:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	601a      	str	r2, [r3, #0]
}
 801825e:	bf00      	nop
 8018260:	370c      	adds	r7, #12
 8018262:	46bd      	mov	sp, r7
 8018264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018268:	4770      	bx	lr

0801826a <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 801826a:	b480      	push	{r7}
 801826c:	b083      	sub	sp, #12
 801826e:	af00      	add	r7, sp, #0
 8018270:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	681b      	ldr	r3, [r3, #0]
 8018276:	f043 0201 	orr.w	r2, r3, #1
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	601a      	str	r2, [r3, #0]
}
 801827e:	bf00      	nop
 8018280:	370c      	adds	r7, #12
 8018282:	46bd      	mov	sp, r7
 8018284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018288:	4770      	bx	lr

0801828a <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801828a:	b480      	push	{r7}
 801828c:	b083      	sub	sp, #12
 801828e:	af00      	add	r7, sp, #0
 8018290:	6078      	str	r0, [r7, #4]
 8018292:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	685a      	ldr	r2, [r3, #4]
 8018298:	683b      	ldr	r3, [r7, #0]
 801829a:	041b      	lsls	r3, r3, #16
 801829c:	43db      	mvns	r3, r3
 801829e:	401a      	ands	r2, r3
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	605a      	str	r2, [r3, #4]
}
 80182a4:	bf00      	nop
 80182a6:	370c      	adds	r7, #12
 80182a8:	46bd      	mov	sp, r7
 80182aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ae:	4770      	bx	lr

080182b0 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80182b0:	b480      	push	{r7}
 80182b2:	b083      	sub	sp, #12
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
 80182b8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	685a      	ldr	r2, [r3, #4]
 80182be:	683b      	ldr	r3, [r7, #0]
 80182c0:	041b      	lsls	r3, r3, #16
 80182c2:	431a      	orrs	r2, r3
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	605a      	str	r2, [r3, #4]
}
 80182c8:	bf00      	nop
 80182ca:	370c      	adds	r7, #12
 80182cc:	46bd      	mov	sp, r7
 80182ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182d2:	4770      	bx	lr

080182d4 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80182d4:	b480      	push	{r7}
 80182d6:	b083      	sub	sp, #12
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	685a      	ldr	r2, [r3, #4]
 80182e2:	683b      	ldr	r3, [r7, #0]
 80182e4:	43db      	mvns	r3, r3
 80182e6:	401a      	ands	r2, r3
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	605a      	str	r2, [r3, #4]
}
 80182ec:	bf00      	nop
 80182ee:	370c      	adds	r7, #12
 80182f0:	46bd      	mov	sp, r7
 80182f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182f6:	4770      	bx	lr

080182f8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80182f8:	b480      	push	{r7}
 80182fa:	b083      	sub	sp, #12
 80182fc:	af00      	add	r7, sp, #0
 80182fe:	6078      	str	r0, [r7, #4]
 8018300:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	683a      	ldr	r2, [r7, #0]
 8018306:	609a      	str	r2, [r3, #8]
}
 8018308:	bf00      	nop
 801830a:	370c      	adds	r7, #12
 801830c:	46bd      	mov	sp, r7
 801830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018312:	4770      	bx	lr

08018314 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018314:	b480      	push	{r7}
 8018316:	b083      	sub	sp, #12
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
 801831c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801831e:	683b      	ldr	r3, [r7, #0]
 8018320:	041a      	lsls	r2, r3, #16
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	609a      	str	r2, [r3, #8]
}
 8018326:	bf00      	nop
 8018328:	370c      	adds	r7, #12
 801832a:	46bd      	mov	sp, r7
 801832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018330:	4770      	bx	lr

08018332 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8018332:	b480      	push	{r7}
 8018334:	b083      	sub	sp, #12
 8018336:	af00      	add	r7, sp, #0
 8018338:	6078      	str	r0, [r7, #4]
 801833a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	68da      	ldr	r2, [r3, #12]
 8018340:	683b      	ldr	r3, [r7, #0]
 8018342:	4013      	ands	r3, r2
 8018344:	683a      	ldr	r2, [r7, #0]
 8018346:	429a      	cmp	r2, r3
 8018348:	d101      	bne.n	801834e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801834a:	2301      	movs	r3, #1
 801834c:	e000      	b.n	8018350 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801834e:	2300      	movs	r3, #0
}
 8018350:	4618      	mov	r0, r3
 8018352:	370c      	adds	r7, #12
 8018354:	46bd      	mov	sp, r7
 8018356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801835a:	4770      	bx	lr

0801835c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801835c:	b480      	push	{r7}
 801835e:	b083      	sub	sp, #12
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
 8018364:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	69da      	ldr	r2, [r3, #28]
 801836a:	683b      	ldr	r3, [r7, #0]
 801836c:	4013      	ands	r3, r2
 801836e:	683a      	ldr	r2, [r7, #0]
 8018370:	429a      	cmp	r2, r3
 8018372:	d101      	bne.n	8018378 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8018374:	2301      	movs	r3, #1
 8018376:	e000      	b.n	801837a <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8018378:	2300      	movs	r3, #0
}
 801837a:	4618      	mov	r0, r3
 801837c:	370c      	adds	r7, #12
 801837e:	46bd      	mov	sp, r7
 8018380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018384:	4770      	bx	lr
	...

08018388 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8018388:	b580      	push	{r7, lr}
 801838a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 801838c:	2102      	movs	r1, #2
 801838e:	4818      	ldr	r0, [pc, #96]	@ (80183f0 <HW_IPCC_Rx_Handler+0x68>)
 8018390:	f7ff ffe4 	bl	801835c <LL_C2_IPCC_IsActiveFlag_CHx>
 8018394:	4603      	mov	r3, r0
 8018396:	2b00      	cmp	r3, #0
 8018398:	d008      	beq.n	80183ac <HW_IPCC_Rx_Handler+0x24>
 801839a:	4b15      	ldr	r3, [pc, #84]	@ (80183f0 <HW_IPCC_Rx_Handler+0x68>)
 801839c:	685b      	ldr	r3, [r3, #4]
 801839e:	f003 0302 	and.w	r3, r3, #2
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d102      	bne.n	80183ac <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80183a6:	f000 f8d5 	bl	8018554 <HW_IPCC_SYS_EvtHandler>
 80183aa:	e01e      	b.n	80183ea <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80183ac:	2101      	movs	r1, #1
 80183ae:	4810      	ldr	r0, [pc, #64]	@ (80183f0 <HW_IPCC_Rx_Handler+0x68>)
 80183b0:	f7ff ffd4 	bl	801835c <LL_C2_IPCC_IsActiveFlag_CHx>
 80183b4:	4603      	mov	r3, r0
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d008      	beq.n	80183cc <HW_IPCC_Rx_Handler+0x44>
 80183ba:	4b0d      	ldr	r3, [pc, #52]	@ (80183f0 <HW_IPCC_Rx_Handler+0x68>)
 80183bc:	685b      	ldr	r3, [r3, #4]
 80183be:	f003 0301 	and.w	r3, r3, #1
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d102      	bne.n	80183cc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80183c6:	f000 f889 	bl	80184dc <HW_IPCC_BLE_EvtHandler>
 80183ca:	e00e      	b.n	80183ea <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80183cc:	2108      	movs	r1, #8
 80183ce:	4808      	ldr	r0, [pc, #32]	@ (80183f0 <HW_IPCC_Rx_Handler+0x68>)
 80183d0:	f7ff ffc4 	bl	801835c <LL_C2_IPCC_IsActiveFlag_CHx>
 80183d4:	4603      	mov	r3, r0
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d008      	beq.n	80183ec <HW_IPCC_Rx_Handler+0x64>
 80183da:	4b05      	ldr	r3, [pc, #20]	@ (80183f0 <HW_IPCC_Rx_Handler+0x68>)
 80183dc:	685b      	ldr	r3, [r3, #4]
 80183de:	f003 0308 	and.w	r3, r3, #8
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d102      	bne.n	80183ec <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80183e6:	f000 f901 	bl	80185ec <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80183ea:	bf00      	nop
 80183ec:	bf00      	nop
}
 80183ee:	bd80      	pop	{r7, pc}
 80183f0:	58000c00 	.word	0x58000c00

080183f4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80183f4:	b580      	push	{r7, lr}
 80183f6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80183f8:	2102      	movs	r1, #2
 80183fa:	4818      	ldr	r0, [pc, #96]	@ (801845c <HW_IPCC_Tx_Handler+0x68>)
 80183fc:	f7ff ff99 	bl	8018332 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018400:	4603      	mov	r3, r0
 8018402:	2b00      	cmp	r3, #0
 8018404:	d108      	bne.n	8018418 <HW_IPCC_Tx_Handler+0x24>
 8018406:	4b15      	ldr	r3, [pc, #84]	@ (801845c <HW_IPCC_Tx_Handler+0x68>)
 8018408:	685b      	ldr	r3, [r3, #4]
 801840a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801840e:	2b00      	cmp	r3, #0
 8018410:	d102      	bne.n	8018418 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8018412:	f000 f893 	bl	801853c <HW_IPCC_SYS_CmdEvtHandler>
 8018416:	e01e      	b.n	8018456 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8018418:	2108      	movs	r1, #8
 801841a:	4810      	ldr	r0, [pc, #64]	@ (801845c <HW_IPCC_Tx_Handler+0x68>)
 801841c:	f7ff ff89 	bl	8018332 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018420:	4603      	mov	r3, r0
 8018422:	2b00      	cmp	r3, #0
 8018424:	d108      	bne.n	8018438 <HW_IPCC_Tx_Handler+0x44>
 8018426:	4b0d      	ldr	r3, [pc, #52]	@ (801845c <HW_IPCC_Tx_Handler+0x68>)
 8018428:	685b      	ldr	r3, [r3, #4]
 801842a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801842e:	2b00      	cmp	r3, #0
 8018430:	d102      	bne.n	8018438 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8018432:	f000 f8bd 	bl	80185b0 <HW_IPCC_MM_FreeBufHandler>
 8018436:	e00e      	b.n	8018456 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8018438:	2120      	movs	r1, #32
 801843a:	4808      	ldr	r0, [pc, #32]	@ (801845c <HW_IPCC_Tx_Handler+0x68>)
 801843c:	f7ff ff79 	bl	8018332 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018440:	4603      	mov	r3, r0
 8018442:	2b00      	cmp	r3, #0
 8018444:	d108      	bne.n	8018458 <HW_IPCC_Tx_Handler+0x64>
 8018446:	4b05      	ldr	r3, [pc, #20]	@ (801845c <HW_IPCC_Tx_Handler+0x68>)
 8018448:	685b      	ldr	r3, [r3, #4]
 801844a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801844e:	2b00      	cmp	r3, #0
 8018450:	d102      	bne.n	8018458 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8018452:	f000 f84f 	bl	80184f4 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8018456:	bf00      	nop
 8018458:	bf00      	nop
}
 801845a:	bd80      	pop	{r7, pc}
 801845c:	58000c00 	.word	0x58000c00

08018460 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8018460:	b580      	push	{r7, lr}
 8018462:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8018464:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018468:	f7ff fed3 	bl	8018212 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 801846c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018470:	f7ff fea4 	bl	80181bc <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8018474:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8018478:	f7ff fe8c 	bl	8018194 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 801847c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801847e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8018480:	f7ff fe78 	bl	8018174 <LL_PWR_EnableBootC2>

  return;
 8018484:	bf00      	nop
}
 8018486:	bd80      	pop	{r7, pc}

08018488 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8018488:	b580      	push	{r7, lr}
 801848a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 801848c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018490:	f7ff fea6 	bl	80181e0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8018494:	4806      	ldr	r0, [pc, #24]	@ (80184b0 <HW_IPCC_Init+0x28>)
 8018496:	f7ff fee8 	bl	801826a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801849a:	4805      	ldr	r0, [pc, #20]	@ (80184b0 <HW_IPCC_Init+0x28>)
 801849c:	f7ff fed5 	bl	801824a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80184a0:	202c      	movs	r0, #44	@ 0x2c
 80184a2:	f7f0 f9d8 	bl	8008856 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80184a6:	202d      	movs	r0, #45	@ 0x2d
 80184a8:	f7f0 f9d5 	bl	8008856 <HAL_NVIC_EnableIRQ>

  return;
 80184ac:	bf00      	nop
}
 80184ae:	bd80      	pop	{r7, pc}
 80184b0:	58000c00 	.word	0x58000c00

080184b4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80184b8:	2101      	movs	r1, #1
 80184ba:	4802      	ldr	r0, [pc, #8]	@ (80184c4 <HW_IPCC_BLE_Init+0x10>)
 80184bc:	f7ff ff0a 	bl	80182d4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80184c0:	bf00      	nop
}
 80184c2:	bd80      	pop	{r7, pc}
 80184c4:	58000c00 	.word	0x58000c00

080184c8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80184cc:	2101      	movs	r1, #1
 80184ce:	4802      	ldr	r0, [pc, #8]	@ (80184d8 <HW_IPCC_BLE_SendCmd+0x10>)
 80184d0:	f7ff ff20 	bl	8018314 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80184d4:	bf00      	nop
}
 80184d6:	bd80      	pop	{r7, pc}
 80184d8:	58000c00 	.word	0x58000c00

080184dc <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80184e0:	f7fe fa78 	bl	80169d4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80184e4:	2101      	movs	r1, #1
 80184e6:	4802      	ldr	r0, [pc, #8]	@ (80184f0 <HW_IPCC_BLE_EvtHandler+0x14>)
 80184e8:	f7ff ff06 	bl	80182f8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80184ec:	bf00      	nop
}
 80184ee:	bd80      	pop	{r7, pc}
 80184f0:	58000c00 	.word	0x58000c00

080184f4 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80184f8:	2120      	movs	r1, #32
 80184fa:	4803      	ldr	r0, [pc, #12]	@ (8018508 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80184fc:	f7ff fed8 	bl	80182b0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8018500:	f7fe fa98 	bl	8016a34 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8018504:	bf00      	nop
}
 8018506:	bd80      	pop	{r7, pc}
 8018508:	58000c00 	.word	0x58000c00

0801850c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801850c:	b580      	push	{r7, lr}
 801850e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018510:	2102      	movs	r1, #2
 8018512:	4802      	ldr	r0, [pc, #8]	@ (801851c <HW_IPCC_SYS_Init+0x10>)
 8018514:	f7ff fede 	bl	80182d4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018518:	bf00      	nop
}
 801851a:	bd80      	pop	{r7, pc}
 801851c:	58000c00 	.word	0x58000c00

08018520 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8018520:	b580      	push	{r7, lr}
 8018522:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018524:	2102      	movs	r1, #2
 8018526:	4804      	ldr	r0, [pc, #16]	@ (8018538 <HW_IPCC_SYS_SendCmd+0x18>)
 8018528:	f7ff fef4 	bl	8018314 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801852c:	2102      	movs	r1, #2
 801852e:	4802      	ldr	r0, [pc, #8]	@ (8018538 <HW_IPCC_SYS_SendCmd+0x18>)
 8018530:	f7ff feab 	bl	801828a <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8018534:	bf00      	nop
}
 8018536:	bd80      	pop	{r7, pc}
 8018538:	58000c00 	.word	0x58000c00

0801853c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 801853c:	b580      	push	{r7, lr}
 801853e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8018540:	2102      	movs	r1, #2
 8018542:	4803      	ldr	r0, [pc, #12]	@ (8018550 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8018544:	f7ff feb4 	bl	80182b0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8018548:	f7fe fac4 	bl	8016ad4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 801854c:	bf00      	nop
}
 801854e:	bd80      	pop	{r7, pc}
 8018550:	58000c00 	.word	0x58000c00

08018554 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8018554:	b580      	push	{r7, lr}
 8018556:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8018558:	f7fe fad2 	bl	8016b00 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801855c:	2102      	movs	r1, #2
 801855e:	4802      	ldr	r0, [pc, #8]	@ (8018568 <HW_IPCC_SYS_EvtHandler+0x14>)
 8018560:	f7ff feca 	bl	80182f8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018564:	bf00      	nop
}
 8018566:	bd80      	pop	{r7, pc}
 8018568:	58000c00 	.word	0x58000c00

0801856c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b082      	sub	sp, #8
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8018574:	2108      	movs	r1, #8
 8018576:	480c      	ldr	r0, [pc, #48]	@ (80185a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018578:	f7ff fedb 	bl	8018332 <LL_C1_IPCC_IsActiveFlag_CHx>
 801857c:	4603      	mov	r3, r0
 801857e:	2b00      	cmp	r3, #0
 8018580:	d007      	beq.n	8018592 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8018582:	4a0a      	ldr	r2, [pc, #40]	@ (80185ac <HW_IPCC_MM_SendFreeBuf+0x40>)
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018588:	2108      	movs	r1, #8
 801858a:	4807      	ldr	r0, [pc, #28]	@ (80185a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801858c:	f7ff fe7d 	bl	801828a <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8018590:	e006      	b.n	80185a0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018596:	2108      	movs	r1, #8
 8018598:	4803      	ldr	r0, [pc, #12]	@ (80185a8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801859a:	f7ff febb 	bl	8018314 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801859e:	bf00      	nop
}
 80185a0:	3708      	adds	r7, #8
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}
 80185a6:	bf00      	nop
 80185a8:	58000c00 	.word	0x58000c00
 80185ac:	20001580 	.word	0x20001580

080185b0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80185b4:	2108      	movs	r1, #8
 80185b6:	4806      	ldr	r0, [pc, #24]	@ (80185d0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80185b8:	f7ff fe7a 	bl	80182b0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80185bc:	4b05      	ldr	r3, [pc, #20]	@ (80185d4 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80185c2:	2108      	movs	r1, #8
 80185c4:	4802      	ldr	r0, [pc, #8]	@ (80185d0 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80185c6:	f7ff fea5 	bl	8018314 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80185ca:	bf00      	nop
}
 80185cc:	bd80      	pop	{r7, pc}
 80185ce:	bf00      	nop
 80185d0:	58000c00 	.word	0x58000c00
 80185d4:	20001580 	.word	0x20001580

080185d8 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80185d8:	b580      	push	{r7, lr}
 80185da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80185dc:	2108      	movs	r1, #8
 80185de:	4802      	ldr	r0, [pc, #8]	@ (80185e8 <HW_IPCC_TRACES_Init+0x10>)
 80185e0:	f7ff fe78 	bl	80182d4 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80185e4:	bf00      	nop
}
 80185e6:	bd80      	pop	{r7, pc}
 80185e8:	58000c00 	.word	0x58000c00

080185ec <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80185f0:	f7fe fb2e 	bl	8016c50 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80185f4:	2108      	movs	r1, #8
 80185f6:	4802      	ldr	r0, [pc, #8]	@ (8018600 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80185f8:	f7ff fe7e 	bl	80182f8 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80185fc:	bf00      	nop
}
 80185fe:	bd80      	pop	{r7, pc}
 8018600:	58000c00 	.word	0x58000c00

08018604 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8018604:	b580      	push	{r7, lr}
 8018606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8018608:	2200      	movs	r2, #0
 801860a:	4912      	ldr	r1, [pc, #72]	@ (8018654 <MX_USB_Device_Init+0x50>)
 801860c:	4812      	ldr	r0, [pc, #72]	@ (8018658 <MX_USB_Device_Init+0x54>)
 801860e:	f7fb f88b 	bl	8013728 <USBD_Init>
 8018612:	4603      	mov	r3, r0
 8018614:	2b00      	cmp	r3, #0
 8018616:	d001      	beq.n	801861c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8018618:	f7ea fcec 	bl	8002ff4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801861c:	490f      	ldr	r1, [pc, #60]	@ (801865c <MX_USB_Device_Init+0x58>)
 801861e:	480e      	ldr	r0, [pc, #56]	@ (8018658 <MX_USB_Device_Init+0x54>)
 8018620:	f7fb f8b2 	bl	8013788 <USBD_RegisterClass>
 8018624:	4603      	mov	r3, r0
 8018626:	2b00      	cmp	r3, #0
 8018628:	d001      	beq.n	801862e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801862a:	f7ea fce3 	bl	8002ff4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801862e:	490c      	ldr	r1, [pc, #48]	@ (8018660 <MX_USB_Device_Init+0x5c>)
 8018630:	4809      	ldr	r0, [pc, #36]	@ (8018658 <MX_USB_Device_Init+0x54>)
 8018632:	f7fa ffa9 	bl	8013588 <USBD_CDC_RegisterInterface>
 8018636:	4603      	mov	r3, r0
 8018638:	2b00      	cmp	r3, #0
 801863a:	d001      	beq.n	8018640 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 801863c:	f7ea fcda 	bl	8002ff4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8018640:	4805      	ldr	r0, [pc, #20]	@ (8018658 <MX_USB_Device_Init+0x54>)
 8018642:	f7fb f8d7 	bl	80137f4 <USBD_Start>
 8018646:	4603      	mov	r3, r0
 8018648:	2b00      	cmp	r3, #0
 801864a:	d001      	beq.n	8018650 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 801864c:	f7ea fcd2 	bl	8002ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8018650:	bf00      	nop
 8018652:	bd80      	pop	{r7, pc}
 8018654:	200000e8 	.word	0x200000e8
 8018658:	20001584 	.word	0x20001584
 801865c:	20000044 	.word	0x20000044
 8018660:	200000d4 	.word	0x200000d4

08018664 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8018664:	b580      	push	{r7, lr}
 8018666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8018668:	2200      	movs	r2, #0
 801866a:	4905      	ldr	r1, [pc, #20]	@ (8018680 <CDC_Init_FS+0x1c>)
 801866c:	4805      	ldr	r0, [pc, #20]	@ (8018684 <CDC_Init_FS+0x20>)
 801866e:	f7fa ffa5 	bl	80135bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8018672:	4905      	ldr	r1, [pc, #20]	@ (8018688 <CDC_Init_FS+0x24>)
 8018674:	4803      	ldr	r0, [pc, #12]	@ (8018684 <CDC_Init_FS+0x20>)
 8018676:	f7fa ffc3 	bl	8013600 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801867a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801867c:	4618      	mov	r0, r3
 801867e:	bd80      	pop	{r7, pc}
 8018680:	20002060 	.word	0x20002060
 8018684:	20001584 	.word	0x20001584
 8018688:	20001860 	.word	0x20001860

0801868c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801868c:	b480      	push	{r7}
 801868e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018690:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018692:	4618      	mov	r0, r3
 8018694:	46bd      	mov	sp, r7
 8018696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801869a:	4770      	bx	lr

0801869c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801869c:	b480      	push	{r7}
 801869e:	b083      	sub	sp, #12
 80186a0:	af00      	add	r7, sp, #0
 80186a2:	4603      	mov	r3, r0
 80186a4:	6039      	str	r1, [r7, #0]
 80186a6:	71fb      	strb	r3, [r7, #7]
 80186a8:	4613      	mov	r3, r2
 80186aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80186ac:	79fb      	ldrb	r3, [r7, #7]
 80186ae:	2b23      	cmp	r3, #35	@ 0x23
 80186b0:	d84a      	bhi.n	8018748 <CDC_Control_FS+0xac>
 80186b2:	a201      	add	r2, pc, #4	@ (adr r2, 80186b8 <CDC_Control_FS+0x1c>)
 80186b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186b8:	08018749 	.word	0x08018749
 80186bc:	08018749 	.word	0x08018749
 80186c0:	08018749 	.word	0x08018749
 80186c4:	08018749 	.word	0x08018749
 80186c8:	08018749 	.word	0x08018749
 80186cc:	08018749 	.word	0x08018749
 80186d0:	08018749 	.word	0x08018749
 80186d4:	08018749 	.word	0x08018749
 80186d8:	08018749 	.word	0x08018749
 80186dc:	08018749 	.word	0x08018749
 80186e0:	08018749 	.word	0x08018749
 80186e4:	08018749 	.word	0x08018749
 80186e8:	08018749 	.word	0x08018749
 80186ec:	08018749 	.word	0x08018749
 80186f0:	08018749 	.word	0x08018749
 80186f4:	08018749 	.word	0x08018749
 80186f8:	08018749 	.word	0x08018749
 80186fc:	08018749 	.word	0x08018749
 8018700:	08018749 	.word	0x08018749
 8018704:	08018749 	.word	0x08018749
 8018708:	08018749 	.word	0x08018749
 801870c:	08018749 	.word	0x08018749
 8018710:	08018749 	.word	0x08018749
 8018714:	08018749 	.word	0x08018749
 8018718:	08018749 	.word	0x08018749
 801871c:	08018749 	.word	0x08018749
 8018720:	08018749 	.word	0x08018749
 8018724:	08018749 	.word	0x08018749
 8018728:	08018749 	.word	0x08018749
 801872c:	08018749 	.word	0x08018749
 8018730:	08018749 	.word	0x08018749
 8018734:	08018749 	.word	0x08018749
 8018738:	08018749 	.word	0x08018749
 801873c:	08018749 	.word	0x08018749
 8018740:	08018749 	.word	0x08018749
 8018744:	08018749 	.word	0x08018749
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018748:	bf00      	nop
  }

  return (USBD_OK);
 801874a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801874c:	4618      	mov	r0, r3
 801874e:	370c      	adds	r7, #12
 8018750:	46bd      	mov	sp, r7
 8018752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018756:	4770      	bx	lr

08018758 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b084      	sub	sp, #16
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
 8018760:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018762:	6879      	ldr	r1, [r7, #4]
 8018764:	480f      	ldr	r0, [pc, #60]	@ (80187a4 <CDC_Receive_FS+0x4c>)
 8018766:	f7fa ff4b 	bl	8013600 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801876a:	480e      	ldr	r0, [pc, #56]	@ (80187a4 <CDC_Receive_FS+0x4c>)
 801876c:	f7fa ffa6 	bl	80136bc <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8018770:	2240      	movs	r2, #64	@ 0x40
 8018772:	2100      	movs	r1, #0
 8018774:	480c      	ldr	r0, [pc, #48]	@ (80187a8 <CDC_Receive_FS+0x50>)
 8018776:	f002 fe6c 	bl	801b452 <memset>
  uint8_t len = (uint8_t)*Len;
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	681b      	ldr	r3, [r3, #0]
 801877e:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8018780:	7bfb      	ldrb	r3, [r7, #15]
 8018782:	461a      	mov	r2, r3
 8018784:	6879      	ldr	r1, [r7, #4]
 8018786:	4808      	ldr	r0, [pc, #32]	@ (80187a8 <CDC_Receive_FS+0x50>)
 8018788:	f002 ff7f 	bl	801b68a <memcpy>
  memset(Buf, '\0', len);
 801878c:	7bfb      	ldrb	r3, [r7, #15]
 801878e:	461a      	mov	r2, r3
 8018790:	2100      	movs	r1, #0
 8018792:	6878      	ldr	r0, [r7, #4]
 8018794:	f002 fe5d 	bl	801b452 <memset>
  return (USBD_OK);
 8018798:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801879a:	4618      	mov	r0, r3
 801879c:	3710      	adds	r7, #16
 801879e:	46bd      	mov	sp, r7
 80187a0:	bd80      	pop	{r7, pc}
 80187a2:	bf00      	nop
 80187a4:	20001584 	.word	0x20001584
 80187a8:	20000b0c 	.word	0x20000b0c

080187ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b084      	sub	sp, #16
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	460b      	mov	r3, r1
 80187b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80187b8:	2300      	movs	r3, #0
 80187ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80187bc:	4b0d      	ldr	r3, [pc, #52]	@ (80187f4 <CDC_Transmit_FS+0x48>)
 80187be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80187c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80187c4:	68bb      	ldr	r3, [r7, #8]
 80187c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d001      	beq.n	80187d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80187ce:	2301      	movs	r3, #1
 80187d0:	e00b      	b.n	80187ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80187d2:	887b      	ldrh	r3, [r7, #2]
 80187d4:	461a      	mov	r2, r3
 80187d6:	6879      	ldr	r1, [r7, #4]
 80187d8:	4806      	ldr	r0, [pc, #24]	@ (80187f4 <CDC_Transmit_FS+0x48>)
 80187da:	f7fa feef 	bl	80135bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80187de:	4805      	ldr	r0, [pc, #20]	@ (80187f4 <CDC_Transmit_FS+0x48>)
 80187e0:	f7fa ff2c 	bl	801363c <USBD_CDC_TransmitPacket>
 80187e4:	4603      	mov	r3, r0
 80187e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80187e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80187ea:	4618      	mov	r0, r3
 80187ec:	3710      	adds	r7, #16
 80187ee:	46bd      	mov	sp, r7
 80187f0:	bd80      	pop	{r7, pc}
 80187f2:	bf00      	nop
 80187f4:	20001584 	.word	0x20001584

080187f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80187f8:	b480      	push	{r7}
 80187fa:	b087      	sub	sp, #28
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	60f8      	str	r0, [r7, #12]
 8018800:	60b9      	str	r1, [r7, #8]
 8018802:	4613      	mov	r3, r2
 8018804:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018806:	2300      	movs	r3, #0
 8018808:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801880a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801880e:	4618      	mov	r0, r3
 8018810:	371c      	adds	r7, #28
 8018812:	46bd      	mov	sp, r7
 8018814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018818:	4770      	bx	lr
	...

0801881c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801881c:	b480      	push	{r7}
 801881e:	b083      	sub	sp, #12
 8018820:	af00      	add	r7, sp, #0
 8018822:	4603      	mov	r3, r0
 8018824:	6039      	str	r1, [r7, #0]
 8018826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	2212      	movs	r2, #18
 801882c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801882e:	4b03      	ldr	r3, [pc, #12]	@ (801883c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8018830:	4618      	mov	r0, r3
 8018832:	370c      	adds	r7, #12
 8018834:	46bd      	mov	sp, r7
 8018836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883a:	4770      	bx	lr
 801883c:	20000108 	.word	0x20000108

08018840 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018840:	b480      	push	{r7}
 8018842:	b083      	sub	sp, #12
 8018844:	af00      	add	r7, sp, #0
 8018846:	4603      	mov	r3, r0
 8018848:	6039      	str	r1, [r7, #0]
 801884a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801884c:	683b      	ldr	r3, [r7, #0]
 801884e:	2204      	movs	r2, #4
 8018850:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018852:	4b03      	ldr	r3, [pc, #12]	@ (8018860 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018854:	4618      	mov	r0, r3
 8018856:	370c      	adds	r7, #12
 8018858:	46bd      	mov	sp, r7
 801885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801885e:	4770      	bx	lr
 8018860:	2000011c 	.word	0x2000011c

08018864 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b082      	sub	sp, #8
 8018868:	af00      	add	r7, sp, #0
 801886a:	4603      	mov	r3, r0
 801886c:	6039      	str	r1, [r7, #0]
 801886e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018870:	79fb      	ldrb	r3, [r7, #7]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d105      	bne.n	8018882 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018876:	683a      	ldr	r2, [r7, #0]
 8018878:	4907      	ldr	r1, [pc, #28]	@ (8018898 <USBD_CDC_ProductStrDescriptor+0x34>)
 801887a:	4808      	ldr	r0, [pc, #32]	@ (801889c <USBD_CDC_ProductStrDescriptor+0x38>)
 801887c:	f7fc f902 	bl	8014a84 <USBD_GetString>
 8018880:	e004      	b.n	801888c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018882:	683a      	ldr	r2, [r7, #0]
 8018884:	4904      	ldr	r1, [pc, #16]	@ (8018898 <USBD_CDC_ProductStrDescriptor+0x34>)
 8018886:	4805      	ldr	r0, [pc, #20]	@ (801889c <USBD_CDC_ProductStrDescriptor+0x38>)
 8018888:	f7fc f8fc 	bl	8014a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 801888c:	4b02      	ldr	r3, [pc, #8]	@ (8018898 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801888e:	4618      	mov	r0, r3
 8018890:	3708      	adds	r7, #8
 8018892:	46bd      	mov	sp, r7
 8018894:	bd80      	pop	{r7, pc}
 8018896:	bf00      	nop
 8018898:	20002860 	.word	0x20002860
 801889c:	0801fef0 	.word	0x0801fef0

080188a0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b082      	sub	sp, #8
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	4603      	mov	r3, r0
 80188a8:	6039      	str	r1, [r7, #0]
 80188aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80188ac:	683a      	ldr	r2, [r7, #0]
 80188ae:	4904      	ldr	r1, [pc, #16]	@ (80188c0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80188b0:	4804      	ldr	r0, [pc, #16]	@ (80188c4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80188b2:	f7fc f8e7 	bl	8014a84 <USBD_GetString>
  return USBD_StrDesc;
 80188b6:	4b02      	ldr	r3, [pc, #8]	@ (80188c0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80188b8:	4618      	mov	r0, r3
 80188ba:	3708      	adds	r7, #8
 80188bc:	46bd      	mov	sp, r7
 80188be:	bd80      	pop	{r7, pc}
 80188c0:	20002860 	.word	0x20002860
 80188c4:	0801ff08 	.word	0x0801ff08

080188c8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188c8:	b580      	push	{r7, lr}
 80188ca:	b082      	sub	sp, #8
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	4603      	mov	r3, r0
 80188d0:	6039      	str	r1, [r7, #0]
 80188d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80188d4:	683b      	ldr	r3, [r7, #0]
 80188d6:	221a      	movs	r2, #26
 80188d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80188da:	f000 f843 	bl	8018964 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80188de:	4b02      	ldr	r3, [pc, #8]	@ (80188e8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	3708      	adds	r7, #8
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}
 80188e8:	20000120 	.word	0x20000120

080188ec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80188ec:	b580      	push	{r7, lr}
 80188ee:	b082      	sub	sp, #8
 80188f0:	af00      	add	r7, sp, #0
 80188f2:	4603      	mov	r3, r0
 80188f4:	6039      	str	r1, [r7, #0]
 80188f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80188f8:	79fb      	ldrb	r3, [r7, #7]
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d105      	bne.n	801890a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80188fe:	683a      	ldr	r2, [r7, #0]
 8018900:	4907      	ldr	r1, [pc, #28]	@ (8018920 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018902:	4808      	ldr	r0, [pc, #32]	@ (8018924 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018904:	f7fc f8be 	bl	8014a84 <USBD_GetString>
 8018908:	e004      	b.n	8018914 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801890a:	683a      	ldr	r2, [r7, #0]
 801890c:	4904      	ldr	r1, [pc, #16]	@ (8018920 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801890e:	4805      	ldr	r0, [pc, #20]	@ (8018924 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018910:	f7fc f8b8 	bl	8014a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018914:	4b02      	ldr	r3, [pc, #8]	@ (8018920 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8018916:	4618      	mov	r0, r3
 8018918:	3708      	adds	r7, #8
 801891a:	46bd      	mov	sp, r7
 801891c:	bd80      	pop	{r7, pc}
 801891e:	bf00      	nop
 8018920:	20002860 	.word	0x20002860
 8018924:	0801ff1c 	.word	0x0801ff1c

08018928 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b082      	sub	sp, #8
 801892c:	af00      	add	r7, sp, #0
 801892e:	4603      	mov	r3, r0
 8018930:	6039      	str	r1, [r7, #0]
 8018932:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018934:	79fb      	ldrb	r3, [r7, #7]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d105      	bne.n	8018946 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801893a:	683a      	ldr	r2, [r7, #0]
 801893c:	4907      	ldr	r1, [pc, #28]	@ (801895c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801893e:	4808      	ldr	r0, [pc, #32]	@ (8018960 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018940:	f7fc f8a0 	bl	8014a84 <USBD_GetString>
 8018944:	e004      	b.n	8018950 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018946:	683a      	ldr	r2, [r7, #0]
 8018948:	4904      	ldr	r1, [pc, #16]	@ (801895c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801894a:	4805      	ldr	r0, [pc, #20]	@ (8018960 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801894c:	f7fc f89a 	bl	8014a84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018950:	4b02      	ldr	r3, [pc, #8]	@ (801895c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8018952:	4618      	mov	r0, r3
 8018954:	3708      	adds	r7, #8
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	20002860 	.word	0x20002860
 8018960:	0801ff28 	.word	0x0801ff28

08018964 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018964:	b580      	push	{r7, lr}
 8018966:	b084      	sub	sp, #16
 8018968:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801896a:	4b0f      	ldr	r3, [pc, #60]	@ (80189a8 <Get_SerialNum+0x44>)
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018970:	4b0e      	ldr	r3, [pc, #56]	@ (80189ac <Get_SerialNum+0x48>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018976:	4b0e      	ldr	r3, [pc, #56]	@ (80189b0 <Get_SerialNum+0x4c>)
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801897c:	68fa      	ldr	r2, [r7, #12]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	4413      	add	r3, r2
 8018982:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018984:	68fb      	ldr	r3, [r7, #12]
 8018986:	2b00      	cmp	r3, #0
 8018988:	d009      	beq.n	801899e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801898a:	2208      	movs	r2, #8
 801898c:	4909      	ldr	r1, [pc, #36]	@ (80189b4 <Get_SerialNum+0x50>)
 801898e:	68f8      	ldr	r0, [r7, #12]
 8018990:	f000 f814 	bl	80189bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018994:	2204      	movs	r2, #4
 8018996:	4908      	ldr	r1, [pc, #32]	@ (80189b8 <Get_SerialNum+0x54>)
 8018998:	68b8      	ldr	r0, [r7, #8]
 801899a:	f000 f80f 	bl	80189bc <IntToUnicode>
  }
}
 801899e:	bf00      	nop
 80189a0:	3710      	adds	r7, #16
 80189a2:	46bd      	mov	sp, r7
 80189a4:	bd80      	pop	{r7, pc}
 80189a6:	bf00      	nop
 80189a8:	1fff7590 	.word	0x1fff7590
 80189ac:	1fff7594 	.word	0x1fff7594
 80189b0:	1fff7598 	.word	0x1fff7598
 80189b4:	20000122 	.word	0x20000122
 80189b8:	20000132 	.word	0x20000132

080189bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80189bc:	b480      	push	{r7}
 80189be:	b087      	sub	sp, #28
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	60f8      	str	r0, [r7, #12]
 80189c4:	60b9      	str	r1, [r7, #8]
 80189c6:	4613      	mov	r3, r2
 80189c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80189ca:	2300      	movs	r3, #0
 80189cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80189ce:	2300      	movs	r3, #0
 80189d0:	75fb      	strb	r3, [r7, #23]
 80189d2:	e027      	b.n	8018a24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	0f1b      	lsrs	r3, r3, #28
 80189d8:	2b09      	cmp	r3, #9
 80189da:	d80b      	bhi.n	80189f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	0f1b      	lsrs	r3, r3, #28
 80189e0:	b2da      	uxtb	r2, r3
 80189e2:	7dfb      	ldrb	r3, [r7, #23]
 80189e4:	005b      	lsls	r3, r3, #1
 80189e6:	4619      	mov	r1, r3
 80189e8:	68bb      	ldr	r3, [r7, #8]
 80189ea:	440b      	add	r3, r1
 80189ec:	3230      	adds	r2, #48	@ 0x30
 80189ee:	b2d2      	uxtb	r2, r2
 80189f0:	701a      	strb	r2, [r3, #0]
 80189f2:	e00a      	b.n	8018a0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80189f4:	68fb      	ldr	r3, [r7, #12]
 80189f6:	0f1b      	lsrs	r3, r3, #28
 80189f8:	b2da      	uxtb	r2, r3
 80189fa:	7dfb      	ldrb	r3, [r7, #23]
 80189fc:	005b      	lsls	r3, r3, #1
 80189fe:	4619      	mov	r1, r3
 8018a00:	68bb      	ldr	r3, [r7, #8]
 8018a02:	440b      	add	r3, r1
 8018a04:	3237      	adds	r2, #55	@ 0x37
 8018a06:	b2d2      	uxtb	r2, r2
 8018a08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	011b      	lsls	r3, r3, #4
 8018a0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018a10:	7dfb      	ldrb	r3, [r7, #23]
 8018a12:	005b      	lsls	r3, r3, #1
 8018a14:	3301      	adds	r3, #1
 8018a16:	68ba      	ldr	r2, [r7, #8]
 8018a18:	4413      	add	r3, r2
 8018a1a:	2200      	movs	r2, #0
 8018a1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018a1e:	7dfb      	ldrb	r3, [r7, #23]
 8018a20:	3301      	adds	r3, #1
 8018a22:	75fb      	strb	r3, [r7, #23]
 8018a24:	7dfa      	ldrb	r2, [r7, #23]
 8018a26:	79fb      	ldrb	r3, [r7, #7]
 8018a28:	429a      	cmp	r2, r3
 8018a2a:	d3d3      	bcc.n	80189d4 <IntToUnicode+0x18>
  }
}
 8018a2c:	bf00      	nop
 8018a2e:	bf00      	nop
 8018a30:	371c      	adds	r7, #28
 8018a32:	46bd      	mov	sp, r7
 8018a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a38:	4770      	bx	lr

08018a3a <LL_AHB2_GRP1_EnableClock>:
{
 8018a3a:	b480      	push	{r7}
 8018a3c:	b085      	sub	sp, #20
 8018a3e:	af00      	add	r7, sp, #0
 8018a40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8018a42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018a46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018a48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	4313      	orrs	r3, r2
 8018a50:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8018a52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018a56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	4013      	ands	r3, r2
 8018a5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018a5e:	68fb      	ldr	r3, [r7, #12]
}
 8018a60:	bf00      	nop
 8018a62:	3714      	adds	r7, #20
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr

08018a6c <LL_APB1_GRP1_EnableClock>:
{
 8018a6c:	b480      	push	{r7}
 8018a6e:	b085      	sub	sp, #20
 8018a70:	af00      	add	r7, sp, #0
 8018a72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018a78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018a7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	4313      	orrs	r3, r2
 8018a82:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018a88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	4013      	ands	r3, r2
 8018a8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018a90:	68fb      	ldr	r3, [r7, #12]
}
 8018a92:	bf00      	nop
 8018a94:	3714      	adds	r7, #20
 8018a96:	46bd      	mov	sp, r7
 8018a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a9c:	4770      	bx	lr
	...

08018aa0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018aa0:	b580      	push	{r7, lr}
 8018aa2:	b088      	sub	sp, #32
 8018aa4:	af00      	add	r7, sp, #0
 8018aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018aa8:	f107 030c 	add.w	r3, r7, #12
 8018aac:	2200      	movs	r2, #0
 8018aae:	601a      	str	r2, [r3, #0]
 8018ab0:	605a      	str	r2, [r3, #4]
 8018ab2:	609a      	str	r2, [r3, #8]
 8018ab4:	60da      	str	r2, [r3, #12]
 8018ab6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	4a13      	ldr	r2, [pc, #76]	@ (8018b0c <HAL_PCD_MspInit+0x6c>)
 8018abe:	4293      	cmp	r3, r2
 8018ac0:	d120      	bne.n	8018b04 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018ac2:	2001      	movs	r0, #1
 8018ac4:	f7ff ffb9 	bl	8018a3a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018ac8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018acc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ace:	2302      	movs	r3, #2
 8018ad0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018ada:	230a      	movs	r3, #10
 8018adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018ade:	f107 030c 	add.w	r3, r7, #12
 8018ae2:	4619      	mov	r1, r3
 8018ae4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8018ae8:	f7f0 fa38 	bl	8008f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018aec:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8018af0:	f7ff ffbc 	bl	8018a6c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8018af4:	2200      	movs	r2, #0
 8018af6:	2105      	movs	r1, #5
 8018af8:	2014      	movs	r0, #20
 8018afa:	f7ef fe92 	bl	8008822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018afe:	2014      	movs	r0, #20
 8018b00:	f7ef fea9 	bl	8008856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018b04:	bf00      	nop
 8018b06:	3720      	adds	r7, #32
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	bd80      	pop	{r7, pc}
 8018b0c:	40006800 	.word	0x40006800

08018b10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b082      	sub	sp, #8
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018b24:	4619      	mov	r1, r3
 8018b26:	4610      	mov	r0, r2
 8018b28:	f7fa feb1 	bl	801388e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018b2c:	bf00      	nop
 8018b2e:	3708      	adds	r7, #8
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}

08018b34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b082      	sub	sp, #8
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
 8018b3c:	460b      	mov	r3, r1
 8018b3e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018b46:	78fa      	ldrb	r2, [r7, #3]
 8018b48:	6879      	ldr	r1, [r7, #4]
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	009b      	lsls	r3, r3, #2
 8018b4e:	4413      	add	r3, r2
 8018b50:	00db      	lsls	r3, r3, #3
 8018b52:	440b      	add	r3, r1
 8018b54:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018b58:	681a      	ldr	r2, [r3, #0]
 8018b5a:	78fb      	ldrb	r3, [r7, #3]
 8018b5c:	4619      	mov	r1, r3
 8018b5e:	f7fa feeb 	bl	8013938 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018b62:	bf00      	nop
 8018b64:	3708      	adds	r7, #8
 8018b66:	46bd      	mov	sp, r7
 8018b68:	bd80      	pop	{r7, pc}

08018b6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b6a:	b580      	push	{r7, lr}
 8018b6c:	b082      	sub	sp, #8
 8018b6e:	af00      	add	r7, sp, #0
 8018b70:	6078      	str	r0, [r7, #4]
 8018b72:	460b      	mov	r3, r1
 8018b74:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018b7c:	78fa      	ldrb	r2, [r7, #3]
 8018b7e:	6879      	ldr	r1, [r7, #4]
 8018b80:	4613      	mov	r3, r2
 8018b82:	009b      	lsls	r3, r3, #2
 8018b84:	4413      	add	r3, r2
 8018b86:	00db      	lsls	r3, r3, #3
 8018b88:	440b      	add	r3, r1
 8018b8a:	3324      	adds	r3, #36	@ 0x24
 8018b8c:	681a      	ldr	r2, [r3, #0]
 8018b8e:	78fb      	ldrb	r3, [r7, #3]
 8018b90:	4619      	mov	r1, r3
 8018b92:	f7fa ff84 	bl	8013a9e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018b96:	bf00      	nop
 8018b98:	3708      	adds	r7, #8
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	bd80      	pop	{r7, pc}

08018b9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018b9e:	b580      	push	{r7, lr}
 8018ba0:	b082      	sub	sp, #8
 8018ba2:	af00      	add	r7, sp, #0
 8018ba4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018bac:	4618      	mov	r0, r3
 8018bae:	f7fb f8be 	bl	8013d2e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018bb2:	bf00      	nop
 8018bb4:	3708      	adds	r7, #8
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bd80      	pop	{r7, pc}

08018bba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018bba:	b580      	push	{r7, lr}
 8018bbc:	b084      	sub	sp, #16
 8018bbe:	af00      	add	r7, sp, #0
 8018bc0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018bc2:	2301      	movs	r3, #1
 8018bc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	795b      	ldrb	r3, [r3, #5]
 8018bca:	2b02      	cmp	r3, #2
 8018bcc:	d001      	beq.n	8018bd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018bce:	f7ea fa11 	bl	8002ff4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018bd8:	7bfa      	ldrb	r2, [r7, #15]
 8018bda:	4611      	mov	r1, r2
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7fb f862 	bl	8013ca6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018be8:	4618      	mov	r0, r3
 8018bea:	f7fb f80a 	bl	8013c02 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018bee:	bf00      	nop
 8018bf0:	3710      	adds	r7, #16
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}
	...

08018bf8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c06:	4618      	mov	r0, r3
 8018c08:	f7fb f85d 	bl	8013cc6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	7a5b      	ldrb	r3, [r3, #9]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d005      	beq.n	8018c20 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018c14:	4b04      	ldr	r3, [pc, #16]	@ (8018c28 <HAL_PCD_SuspendCallback+0x30>)
 8018c16:	691b      	ldr	r3, [r3, #16]
 8018c18:	4a03      	ldr	r2, [pc, #12]	@ (8018c28 <HAL_PCD_SuspendCallback+0x30>)
 8018c1a:	f043 0306 	orr.w	r3, r3, #6
 8018c1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018c20:	bf00      	nop
 8018c22:	3708      	adds	r7, #8
 8018c24:	46bd      	mov	sp, r7
 8018c26:	bd80      	pop	{r7, pc}
 8018c28:	e000ed00 	.word	0xe000ed00

08018c2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b082      	sub	sp, #8
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	7a5b      	ldrb	r3, [r3, #9]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d007      	beq.n	8018c4c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018c3c:	4b08      	ldr	r3, [pc, #32]	@ (8018c60 <HAL_PCD_ResumeCallback+0x34>)
 8018c3e:	691b      	ldr	r3, [r3, #16]
 8018c40:	4a07      	ldr	r2, [pc, #28]	@ (8018c60 <HAL_PCD_ResumeCallback+0x34>)
 8018c42:	f023 0306 	bic.w	r3, r3, #6
 8018c46:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018c48:	f000 f9fa 	bl	8019040 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018c52:	4618      	mov	r0, r3
 8018c54:	f7fb f853 	bl	8013cfe <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018c58:	bf00      	nop
 8018c5a:	3708      	adds	r7, #8
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	e000ed00 	.word	0xe000ed00

08018c64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018c6c:	4a2c      	ldr	r2, [pc, #176]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	4a2a      	ldr	r2, [pc, #168]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018c78:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8018c7c:	f7f2 ff40 	bl	800bb00 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8018c80:	4b27      	ldr	r3, [pc, #156]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018c82:	4a28      	ldr	r2, [pc, #160]	@ (8018d24 <USBD_LL_Init+0xc0>)
 8018c84:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8018c86:	4b26      	ldr	r3, [pc, #152]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018c88:	2208      	movs	r2, #8
 8018c8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8018c8c:	4b24      	ldr	r3, [pc, #144]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018c8e:	2202      	movs	r2, #2
 8018c90:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018c92:	4b23      	ldr	r3, [pc, #140]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018c94:	2202      	movs	r2, #2
 8018c96:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8018c98:	4b21      	ldr	r3, [pc, #132]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018c9a:	2200      	movs	r2, #0
 8018c9c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8018c9e:	4b20      	ldr	r3, [pc, #128]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018ca0:	2200      	movs	r2, #0
 8018ca2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8018ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8018caa:	4b1d      	ldr	r3, [pc, #116]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018cac:	2200      	movs	r2, #0
 8018cae:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8018cb0:	481b      	ldr	r0, [pc, #108]	@ (8018d20 <USBD_LL_Init+0xbc>)
 8018cb2:	f7f1 fa05 	bl	800a0c0 <HAL_PCD_Init>
 8018cb6:	4603      	mov	r3, r0
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d001      	beq.n	8018cc0 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8018cbc:	f7ea f99a 	bl	8002ff4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018cc6:	2318      	movs	r3, #24
 8018cc8:	2200      	movs	r2, #0
 8018cca:	2100      	movs	r1, #0
 8018ccc:	f7f2 fe8c 	bl	800b9e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018cd6:	2358      	movs	r3, #88	@ 0x58
 8018cd8:	2200      	movs	r2, #0
 8018cda:	2180      	movs	r1, #128	@ 0x80
 8018cdc:	f7f2 fe84 	bl	800b9e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018ce6:	23c0      	movs	r3, #192	@ 0xc0
 8018ce8:	2200      	movs	r2, #0
 8018cea:	2181      	movs	r1, #129	@ 0x81
 8018cec:	f7f2 fe7c 	bl	800b9e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018cf6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8018cfa:	2200      	movs	r2, #0
 8018cfc:	2101      	movs	r1, #1
 8018cfe:	f7f2 fe73 	bl	800b9e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8018d0c:	2200      	movs	r2, #0
 8018d0e:	2182      	movs	r1, #130	@ 0x82
 8018d10:	f7f2 fe6a 	bl	800b9e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8018d14:	2300      	movs	r3, #0
}
 8018d16:	4618      	mov	r0, r3
 8018d18:	3708      	adds	r7, #8
 8018d1a:	46bd      	mov	sp, r7
 8018d1c:	bd80      	pop	{r7, pc}
 8018d1e:	bf00      	nop
 8018d20:	20002a60 	.word	0x20002a60
 8018d24:	40006800 	.word	0x40006800

08018d28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b084      	sub	sp, #16
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d30:	2300      	movs	r3, #0
 8018d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d34:	2300      	movs	r3, #0
 8018d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018d3e:	4618      	mov	r0, r3
 8018d40:	f7f1 fa8c 	bl	800a25c <HAL_PCD_Start>
 8018d44:	4603      	mov	r3, r0
 8018d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d48:	7bfb      	ldrb	r3, [r7, #15]
 8018d4a:	4618      	mov	r0, r3
 8018d4c:	f000 f97e 	bl	801904c <USBD_Get_USB_Status>
 8018d50:	4603      	mov	r3, r0
 8018d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8018d56:	4618      	mov	r0, r3
 8018d58:	3710      	adds	r7, #16
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}

08018d5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018d5e:	b580      	push	{r7, lr}
 8018d60:	b084      	sub	sp, #16
 8018d62:	af00      	add	r7, sp, #0
 8018d64:	6078      	str	r0, [r7, #4]
 8018d66:	4608      	mov	r0, r1
 8018d68:	4611      	mov	r1, r2
 8018d6a:	461a      	mov	r2, r3
 8018d6c:	4603      	mov	r3, r0
 8018d6e:	70fb      	strb	r3, [r7, #3]
 8018d70:	460b      	mov	r3, r1
 8018d72:	70bb      	strb	r3, [r7, #2]
 8018d74:	4613      	mov	r3, r2
 8018d76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018d78:	2300      	movs	r3, #0
 8018d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018d86:	78bb      	ldrb	r3, [r7, #2]
 8018d88:	883a      	ldrh	r2, [r7, #0]
 8018d8a:	78f9      	ldrb	r1, [r7, #3]
 8018d8c:	f7f1 fbd3 	bl	800a536 <HAL_PCD_EP_Open>
 8018d90:	4603      	mov	r3, r0
 8018d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018d94:	7bfb      	ldrb	r3, [r7, #15]
 8018d96:	4618      	mov	r0, r3
 8018d98:	f000 f958 	bl	801904c <USBD_Get_USB_Status>
 8018d9c:	4603      	mov	r3, r0
 8018d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018da2:	4618      	mov	r0, r3
 8018da4:	3710      	adds	r7, #16
 8018da6:	46bd      	mov	sp, r7
 8018da8:	bd80      	pop	{r7, pc}

08018daa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018daa:	b580      	push	{r7, lr}
 8018dac:	b084      	sub	sp, #16
 8018dae:	af00      	add	r7, sp, #0
 8018db0:	6078      	str	r0, [r7, #4]
 8018db2:	460b      	mov	r3, r1
 8018db4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018db6:	2300      	movs	r3, #0
 8018db8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018dba:	2300      	movs	r3, #0
 8018dbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018dc4:	78fa      	ldrb	r2, [r7, #3]
 8018dc6:	4611      	mov	r1, r2
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7f1 fc13 	bl	800a5f4 <HAL_PCD_EP_Close>
 8018dce:	4603      	mov	r3, r0
 8018dd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018dd2:	7bfb      	ldrb	r3, [r7, #15]
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f000 f939 	bl	801904c <USBD_Get_USB_Status>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8018de0:	4618      	mov	r0, r3
 8018de2:	3710      	adds	r7, #16
 8018de4:	46bd      	mov	sp, r7
 8018de6:	bd80      	pop	{r7, pc}

08018de8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b084      	sub	sp, #16
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
 8018df0:	460b      	mov	r3, r1
 8018df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018df4:	2300      	movs	r3, #0
 8018df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018df8:	2300      	movs	r3, #0
 8018dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e02:	78fa      	ldrb	r2, [r7, #3]
 8018e04:	4611      	mov	r1, r2
 8018e06:	4618      	mov	r0, r3
 8018e08:	f7f1 fcbc 	bl	800a784 <HAL_PCD_EP_SetStall>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e10:	7bfb      	ldrb	r3, [r7, #15]
 8018e12:	4618      	mov	r0, r3
 8018e14:	f000 f91a 	bl	801904c <USBD_Get_USB_Status>
 8018e18:	4603      	mov	r3, r0
 8018e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e1e:	4618      	mov	r0, r3
 8018e20:	3710      	adds	r7, #16
 8018e22:	46bd      	mov	sp, r7
 8018e24:	bd80      	pop	{r7, pc}

08018e26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e26:	b580      	push	{r7, lr}
 8018e28:	b084      	sub	sp, #16
 8018e2a:	af00      	add	r7, sp, #0
 8018e2c:	6078      	str	r0, [r7, #4]
 8018e2e:	460b      	mov	r3, r1
 8018e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018e32:	2300      	movs	r3, #0
 8018e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018e36:	2300      	movs	r3, #0
 8018e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e40:	78fa      	ldrb	r2, [r7, #3]
 8018e42:	4611      	mov	r1, r2
 8018e44:	4618      	mov	r0, r3
 8018e46:	f7f1 fcef 	bl	800a828 <HAL_PCD_EP_ClrStall>
 8018e4a:	4603      	mov	r3, r0
 8018e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018e4e:	7bfb      	ldrb	r3, [r7, #15]
 8018e50:	4618      	mov	r0, r3
 8018e52:	f000 f8fb 	bl	801904c <USBD_Get_USB_Status>
 8018e56:	4603      	mov	r3, r0
 8018e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	3710      	adds	r7, #16
 8018e60:	46bd      	mov	sp, r7
 8018e62:	bd80      	pop	{r7, pc}

08018e64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018e64:	b480      	push	{r7}
 8018e66:	b085      	sub	sp, #20
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	6078      	str	r0, [r7, #4]
 8018e6c:	460b      	mov	r3, r1
 8018e6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018e76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	da0b      	bge.n	8018e98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018e80:	78fb      	ldrb	r3, [r7, #3]
 8018e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018e86:	68f9      	ldr	r1, [r7, #12]
 8018e88:	4613      	mov	r3, r2
 8018e8a:	009b      	lsls	r3, r3, #2
 8018e8c:	4413      	add	r3, r2
 8018e8e:	00db      	lsls	r3, r3, #3
 8018e90:	440b      	add	r3, r1
 8018e92:	3312      	adds	r3, #18
 8018e94:	781b      	ldrb	r3, [r3, #0]
 8018e96:	e00b      	b.n	8018eb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018e98:	78fb      	ldrb	r3, [r7, #3]
 8018e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018e9e:	68f9      	ldr	r1, [r7, #12]
 8018ea0:	4613      	mov	r3, r2
 8018ea2:	009b      	lsls	r3, r3, #2
 8018ea4:	4413      	add	r3, r2
 8018ea6:	00db      	lsls	r3, r3, #3
 8018ea8:	440b      	add	r3, r1
 8018eaa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8018eae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	3714      	adds	r7, #20
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eba:	4770      	bx	lr

08018ebc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b084      	sub	sp, #16
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	6078      	str	r0, [r7, #4]
 8018ec4:	460b      	mov	r3, r1
 8018ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018ec8:	2300      	movs	r3, #0
 8018eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018ecc:	2300      	movs	r3, #0
 8018ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018ed6:	78fa      	ldrb	r2, [r7, #3]
 8018ed8:	4611      	mov	r1, r2
 8018eda:	4618      	mov	r0, r3
 8018edc:	f7f1 fb07 	bl	800a4ee <HAL_PCD_SetAddress>
 8018ee0:	4603      	mov	r3, r0
 8018ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018ee4:	7bfb      	ldrb	r3, [r7, #15]
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f000 f8b0 	bl	801904c <USBD_Get_USB_Status>
 8018eec:	4603      	mov	r3, r0
 8018eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	3710      	adds	r7, #16
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd80      	pop	{r7, pc}

08018efa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018efa:	b580      	push	{r7, lr}
 8018efc:	b086      	sub	sp, #24
 8018efe:	af00      	add	r7, sp, #0
 8018f00:	60f8      	str	r0, [r7, #12]
 8018f02:	607a      	str	r2, [r7, #4]
 8018f04:	603b      	str	r3, [r7, #0]
 8018f06:	460b      	mov	r3, r1
 8018f08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f0a:	2300      	movs	r3, #0
 8018f0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018f18:	7af9      	ldrb	r1, [r7, #11]
 8018f1a:	683b      	ldr	r3, [r7, #0]
 8018f1c:	687a      	ldr	r2, [r7, #4]
 8018f1e:	f7f1 fbfa 	bl	800a716 <HAL_PCD_EP_Transmit>
 8018f22:	4603      	mov	r3, r0
 8018f24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f26:	7dfb      	ldrb	r3, [r7, #23]
 8018f28:	4618      	mov	r0, r3
 8018f2a:	f000 f88f 	bl	801904c <USBD_Get_USB_Status>
 8018f2e:	4603      	mov	r3, r0
 8018f30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018f32:	7dbb      	ldrb	r3, [r7, #22]
}
 8018f34:	4618      	mov	r0, r3
 8018f36:	3718      	adds	r7, #24
 8018f38:	46bd      	mov	sp, r7
 8018f3a:	bd80      	pop	{r7, pc}

08018f3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b086      	sub	sp, #24
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	60f8      	str	r0, [r7, #12]
 8018f44:	607a      	str	r2, [r7, #4]
 8018f46:	603b      	str	r3, [r7, #0]
 8018f48:	460b      	mov	r3, r1
 8018f4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018f50:	2300      	movs	r3, #0
 8018f52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018f5a:	7af9      	ldrb	r1, [r7, #11]
 8018f5c:	683b      	ldr	r3, [r7, #0]
 8018f5e:	687a      	ldr	r2, [r7, #4]
 8018f60:	f7f1 fb90 	bl	800a684 <HAL_PCD_EP_Receive>
 8018f64:	4603      	mov	r3, r0
 8018f66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018f68:	7dfb      	ldrb	r3, [r7, #23]
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f000 f86e 	bl	801904c <USBD_Get_USB_Status>
 8018f70:	4603      	mov	r3, r0
 8018f72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018f74:	7dbb      	ldrb	r3, [r7, #22]
}
 8018f76:	4618      	mov	r0, r3
 8018f78:	3718      	adds	r7, #24
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	bd80      	pop	{r7, pc}

08018f7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018f7e:	b580      	push	{r7, lr}
 8018f80:	b082      	sub	sp, #8
 8018f82:	af00      	add	r7, sp, #0
 8018f84:	6078      	str	r0, [r7, #4]
 8018f86:	460b      	mov	r3, r1
 8018f88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018f90:	78fa      	ldrb	r2, [r7, #3]
 8018f92:	4611      	mov	r1, r2
 8018f94:	4618      	mov	r0, r3
 8018f96:	f7f1 fba6 	bl	800a6e6 <HAL_PCD_EP_GetRxCount>
 8018f9a:	4603      	mov	r3, r0
}
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	3708      	adds	r7, #8
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd80      	pop	{r7, pc}

08018fa4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b082      	sub	sp, #8
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
 8018fac:	460b      	mov	r3, r1
 8018fae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8018fb0:	78fb      	ldrb	r3, [r7, #3]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d002      	beq.n	8018fbc <HAL_PCDEx_LPM_Callback+0x18>
 8018fb6:	2b01      	cmp	r3, #1
 8018fb8:	d013      	beq.n	8018fe2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8018fba:	e023      	b.n	8019004 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	7a5b      	ldrb	r3, [r3, #9]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d007      	beq.n	8018fd4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8018fc4:	f000 f83c 	bl	8019040 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018fc8:	4b10      	ldr	r3, [pc, #64]	@ (801900c <HAL_PCDEx_LPM_Callback+0x68>)
 8018fca:	691b      	ldr	r3, [r3, #16]
 8018fcc:	4a0f      	ldr	r2, [pc, #60]	@ (801900c <HAL_PCDEx_LPM_Callback+0x68>)
 8018fce:	f023 0306 	bic.w	r3, r3, #6
 8018fd2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f7fa fe8f 	bl	8013cfe <USBD_LL_Resume>
    break;
 8018fe0:	e010      	b.n	8019004 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f7fa fe6c 	bl	8013cc6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	7a5b      	ldrb	r3, [r3, #9]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d005      	beq.n	8019002 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018ff6:	4b05      	ldr	r3, [pc, #20]	@ (801900c <HAL_PCDEx_LPM_Callback+0x68>)
 8018ff8:	691b      	ldr	r3, [r3, #16]
 8018ffa:	4a04      	ldr	r2, [pc, #16]	@ (801900c <HAL_PCDEx_LPM_Callback+0x68>)
 8018ffc:	f043 0306 	orr.w	r3, r3, #6
 8019000:	6113      	str	r3, [r2, #16]
    break;
 8019002:	bf00      	nop
}
 8019004:	bf00      	nop
 8019006:	3708      	adds	r7, #8
 8019008:	46bd      	mov	sp, r7
 801900a:	bd80      	pop	{r7, pc}
 801900c:	e000ed00 	.word	0xe000ed00

08019010 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019010:	b480      	push	{r7}
 8019012:	b083      	sub	sp, #12
 8019014:	af00      	add	r7, sp, #0
 8019016:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019018:	4b03      	ldr	r3, [pc, #12]	@ (8019028 <USBD_static_malloc+0x18>)
}
 801901a:	4618      	mov	r0, r3
 801901c:	370c      	adds	r7, #12
 801901e:	46bd      	mov	sp, r7
 8019020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019024:	4770      	bx	lr
 8019026:	bf00      	nop
 8019028:	20002d3c 	.word	0x20002d3c

0801902c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801902c:	b480      	push	{r7}
 801902e:	b083      	sub	sp, #12
 8019030:	af00      	add	r7, sp, #0
 8019032:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8019034:	bf00      	nop
 8019036:	370c      	adds	r7, #12
 8019038:	46bd      	mov	sp, r7
 801903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903e:	4770      	bx	lr

08019040 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019040:	b580      	push	{r7, lr}
 8019042:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019044:	f7e9 ff38 	bl	8002eb8 <SystemClock_Config>
}
 8019048:	bf00      	nop
 801904a:	bd80      	pop	{r7, pc}

0801904c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801904c:	b480      	push	{r7}
 801904e:	b085      	sub	sp, #20
 8019050:	af00      	add	r7, sp, #0
 8019052:	4603      	mov	r3, r0
 8019054:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019056:	2300      	movs	r3, #0
 8019058:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801905a:	79fb      	ldrb	r3, [r7, #7]
 801905c:	2b03      	cmp	r3, #3
 801905e:	d817      	bhi.n	8019090 <USBD_Get_USB_Status+0x44>
 8019060:	a201      	add	r2, pc, #4	@ (adr r2, 8019068 <USBD_Get_USB_Status+0x1c>)
 8019062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019066:	bf00      	nop
 8019068:	08019079 	.word	0x08019079
 801906c:	0801907f 	.word	0x0801907f
 8019070:	08019085 	.word	0x08019085
 8019074:	0801908b 	.word	0x0801908b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019078:	2300      	movs	r3, #0
 801907a:	73fb      	strb	r3, [r7, #15]
    break;
 801907c:	e00b      	b.n	8019096 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801907e:	2303      	movs	r3, #3
 8019080:	73fb      	strb	r3, [r7, #15]
    break;
 8019082:	e008      	b.n	8019096 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019084:	2301      	movs	r3, #1
 8019086:	73fb      	strb	r3, [r7, #15]
    break;
 8019088:	e005      	b.n	8019096 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801908a:	2303      	movs	r3, #3
 801908c:	73fb      	strb	r3, [r7, #15]
    break;
 801908e:	e002      	b.n	8019096 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019090:	2303      	movs	r3, #3
 8019092:	73fb      	strb	r3, [r7, #15]
    break;
 8019094:	bf00      	nop
  }
  return usb_status;
 8019096:	7bfb      	ldrb	r3, [r7, #15]
}
 8019098:	4618      	mov	r0, r3
 801909a:	3714      	adds	r7, #20
 801909c:	46bd      	mov	sp, r7
 801909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190a2:	4770      	bx	lr

080190a4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80190a4:	b480      	push	{r7}
 80190a6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80190a8:	4b05      	ldr	r3, [pc, #20]	@ (80190c0 <UTIL_LPM_Init+0x1c>)
 80190aa:	2200      	movs	r2, #0
 80190ac:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80190ae:	4b05      	ldr	r3, [pc, #20]	@ (80190c4 <UTIL_LPM_Init+0x20>)
 80190b0:	2200      	movs	r2, #0
 80190b2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80190b4:	bf00      	nop
 80190b6:	46bd      	mov	sp, r7
 80190b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190bc:	4770      	bx	lr
 80190be:	bf00      	nop
 80190c0:	20002f5c 	.word	0x20002f5c
 80190c4:	20002f60 	.word	0x20002f60

080190c8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80190c8:	b480      	push	{r7}
 80190ca:	b087      	sub	sp, #28
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	6078      	str	r0, [r7, #4]
 80190d0:	460b      	mov	r3, r1
 80190d2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80190d4:	f3ef 8310 	mrs	r3, PRIMASK
 80190d8:	613b      	str	r3, [r7, #16]
  return(result);
 80190da:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80190dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80190de:	b672      	cpsid	i
}
 80190e0:	bf00      	nop
  
  switch(state)
 80190e2:	78fb      	ldrb	r3, [r7, #3]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d008      	beq.n	80190fa <UTIL_LPM_SetOffMode+0x32>
 80190e8:	2b01      	cmp	r3, #1
 80190ea:	d10e      	bne.n	801910a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80190ec:	4b0d      	ldr	r3, [pc, #52]	@ (8019124 <UTIL_LPM_SetOffMode+0x5c>)
 80190ee:	681a      	ldr	r2, [r3, #0]
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	4313      	orrs	r3, r2
 80190f4:	4a0b      	ldr	r2, [pc, #44]	@ (8019124 <UTIL_LPM_SetOffMode+0x5c>)
 80190f6:	6013      	str	r3, [r2, #0]
      break;
 80190f8:	e008      	b.n	801910c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	43da      	mvns	r2, r3
 80190fe:	4b09      	ldr	r3, [pc, #36]	@ (8019124 <UTIL_LPM_SetOffMode+0x5c>)
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	4013      	ands	r3, r2
 8019104:	4a07      	ldr	r2, [pc, #28]	@ (8019124 <UTIL_LPM_SetOffMode+0x5c>)
 8019106:	6013      	str	r3, [r2, #0]
      break;
 8019108:	e000      	b.n	801910c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801910a:	bf00      	nop
 801910c:	697b      	ldr	r3, [r7, #20]
 801910e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	f383 8810 	msr	PRIMASK, r3
}
 8019116:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019118:	bf00      	nop
 801911a:	371c      	adds	r7, #28
 801911c:	46bd      	mov	sp, r7
 801911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019122:	4770      	bx	lr
 8019124:	20002f60 	.word	0x20002f60

08019128 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019128:	b580      	push	{r7, lr}
 801912a:	b090      	sub	sp, #64	@ 0x40
 801912c:	af00      	add	r7, sp, #0
 801912e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8019130:	4b73      	ldr	r3, [pc, #460]	@ (8019300 <UTIL_SEQ_Run+0x1d8>)
 8019132:	681b      	ldr	r3, [r3, #0]
 8019134:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8019136:	4b72      	ldr	r3, [pc, #456]	@ (8019300 <UTIL_SEQ_Run+0x1d8>)
 8019138:	681a      	ldr	r2, [r3, #0]
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	4013      	ands	r3, r2
 801913e:	4a70      	ldr	r2, [pc, #448]	@ (8019300 <UTIL_SEQ_Run+0x1d8>)
 8019140:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8019142:	4b70      	ldr	r3, [pc, #448]	@ (8019304 <UTIL_SEQ_Run+0x1dc>)
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019148:	4b6f      	ldr	r3, [pc, #444]	@ (8019308 <UTIL_SEQ_Run+0x1e0>)
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801914e:	4b6f      	ldr	r3, [pc, #444]	@ (801930c <UTIL_SEQ_Run+0x1e4>)
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8019154:	4b6e      	ldr	r3, [pc, #440]	@ (8019310 <UTIL_SEQ_Run+0x1e8>)
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801915a:	e08d      	b.n	8019278 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801915c:	2300      	movs	r3, #0
 801915e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019160:	e002      	b.n	8019168 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8019162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019164:	3301      	adds	r3, #1
 8019166:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019168:	4a6a      	ldr	r2, [pc, #424]	@ (8019314 <UTIL_SEQ_Run+0x1ec>)
 801916a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801916c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019172:	401a      	ands	r2, r3
 8019174:	4b62      	ldr	r3, [pc, #392]	@ (8019300 <UTIL_SEQ_Run+0x1d8>)
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	4013      	ands	r3, r2
 801917a:	2b00      	cmp	r3, #0
 801917c:	d0f1      	beq.n	8019162 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801917e:	4a65      	ldr	r2, [pc, #404]	@ (8019314 <UTIL_SEQ_Run+0x1ec>)
 8019180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019182:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019188:	401a      	ands	r2, r3
 801918a:	4b5d      	ldr	r3, [pc, #372]	@ (8019300 <UTIL_SEQ_Run+0x1d8>)
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	4013      	ands	r3, r2
 8019190:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8019192:	4a60      	ldr	r2, [pc, #384]	@ (8019314 <UTIL_SEQ_Run+0x1ec>)
 8019194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019196:	00db      	lsls	r3, r3, #3
 8019198:	4413      	add	r3, r2
 801919a:	685a      	ldr	r2, [r3, #4]
 801919c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801919e:	4013      	ands	r3, r2
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	d106      	bne.n	80191b2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80191a4:	4a5b      	ldr	r2, [pc, #364]	@ (8019314 <UTIL_SEQ_Run+0x1ec>)
 80191a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191a8:	00db      	lsls	r3, r3, #3
 80191aa:	4413      	add	r3, r2
 80191ac:	f04f 32ff 	mov.w	r2, #4294967295
 80191b0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80191b2:	4a58      	ldr	r2, [pc, #352]	@ (8019314 <UTIL_SEQ_Run+0x1ec>)
 80191b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191b6:	00db      	lsls	r3, r3, #3
 80191b8:	4413      	add	r3, r2
 80191ba:	685a      	ldr	r2, [r3, #4]
 80191bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80191be:	4013      	ands	r3, r2
 80191c0:	4618      	mov	r0, r3
 80191c2:	f000 f9b3 	bl	801952c <SEQ_BitPosition>
 80191c6:	4603      	mov	r3, r0
 80191c8:	461a      	mov	r2, r3
 80191ca:	4b53      	ldr	r3, [pc, #332]	@ (8019318 <UTIL_SEQ_Run+0x1f0>)
 80191cc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80191ce:	4a51      	ldr	r2, [pc, #324]	@ (8019314 <UTIL_SEQ_Run+0x1ec>)
 80191d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191d2:	00db      	lsls	r3, r3, #3
 80191d4:	4413      	add	r3, r2
 80191d6:	685a      	ldr	r2, [r3, #4]
 80191d8:	4b4f      	ldr	r3, [pc, #316]	@ (8019318 <UTIL_SEQ_Run+0x1f0>)
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	2101      	movs	r1, #1
 80191de:	fa01 f303 	lsl.w	r3, r1, r3
 80191e2:	43db      	mvns	r3, r3
 80191e4:	401a      	ands	r2, r3
 80191e6:	494b      	ldr	r1, [pc, #300]	@ (8019314 <UTIL_SEQ_Run+0x1ec>)
 80191e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80191ea:	00db      	lsls	r3, r3, #3
 80191ec:	440b      	add	r3, r1
 80191ee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80191f0:	f3ef 8310 	mrs	r3, PRIMASK
 80191f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80191f6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80191f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80191fa:	b672      	cpsid	i
}
 80191fc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80191fe:	4b46      	ldr	r3, [pc, #280]	@ (8019318 <UTIL_SEQ_Run+0x1f0>)
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	2201      	movs	r2, #1
 8019204:	fa02 f303 	lsl.w	r3, r2, r3
 8019208:	43da      	mvns	r2, r3
 801920a:	4b3e      	ldr	r3, [pc, #248]	@ (8019304 <UTIL_SEQ_Run+0x1dc>)
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	4013      	ands	r3, r2
 8019210:	4a3c      	ldr	r2, [pc, #240]	@ (8019304 <UTIL_SEQ_Run+0x1dc>)
 8019212:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019214:	2301      	movs	r3, #1
 8019216:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019218:	e013      	b.n	8019242 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801921a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801921c:	3b01      	subs	r3, #1
 801921e:	4a3d      	ldr	r2, [pc, #244]	@ (8019314 <UTIL_SEQ_Run+0x1ec>)
 8019220:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8019224:	4b3c      	ldr	r3, [pc, #240]	@ (8019318 <UTIL_SEQ_Run+0x1f0>)
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	2201      	movs	r2, #1
 801922a:	fa02 f303 	lsl.w	r3, r2, r3
 801922e:	43da      	mvns	r2, r3
 8019230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019232:	3b01      	subs	r3, #1
 8019234:	400a      	ands	r2, r1
 8019236:	4937      	ldr	r1, [pc, #220]	@ (8019314 <UTIL_SEQ_Run+0x1ec>)
 8019238:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801923c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801923e:	3b01      	subs	r3, #1
 8019240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019244:	2b00      	cmp	r3, #0
 8019246:	d1e8      	bne.n	801921a <UTIL_SEQ_Run+0xf2>
 8019248:	6a3b      	ldr	r3, [r7, #32]
 801924a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801924c:	697b      	ldr	r3, [r7, #20]
 801924e:	f383 8810 	msr	PRIMASK, r3
}
 8019252:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8019254:	4b30      	ldr	r3, [pc, #192]	@ (8019318 <UTIL_SEQ_Run+0x1f0>)
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	4a30      	ldr	r2, [pc, #192]	@ (801931c <UTIL_SEQ_Run+0x1f4>)
 801925a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801925e:	4798      	blx	r3

    local_taskset = TaskSet;
 8019260:	4b28      	ldr	r3, [pc, #160]	@ (8019304 <UTIL_SEQ_Run+0x1dc>)
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8019266:	4b28      	ldr	r3, [pc, #160]	@ (8019308 <UTIL_SEQ_Run+0x1e0>)
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801926c:	4b27      	ldr	r3, [pc, #156]	@ (801930c <UTIL_SEQ_Run+0x1e4>)
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8019272:	4b27      	ldr	r3, [pc, #156]	@ (8019310 <UTIL_SEQ_Run+0x1e8>)
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019278:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801927a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801927c:	401a      	ands	r2, r3
 801927e:	4b20      	ldr	r3, [pc, #128]	@ (8019300 <UTIL_SEQ_Run+0x1d8>)
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	4013      	ands	r3, r2
 8019284:	2b00      	cmp	r3, #0
 8019286:	d005      	beq.n	8019294 <UTIL_SEQ_Run+0x16c>
 8019288:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801928a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801928c:	4013      	ands	r3, r2
 801928e:	2b00      	cmp	r3, #0
 8019290:	f43f af64 	beq.w	801915c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019294:	4b20      	ldr	r3, [pc, #128]	@ (8019318 <UTIL_SEQ_Run+0x1f0>)
 8019296:	f04f 32ff 	mov.w	r2, #4294967295
 801929a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801929c:	f000 f938 	bl	8019510 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192a0:	f3ef 8310 	mrs	r3, PRIMASK
 80192a4:	613b      	str	r3, [r7, #16]
  return(result);
 80192a6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80192a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80192aa:	b672      	cpsid	i
}
 80192ac:	bf00      	nop
  local_taskset = TaskSet;
 80192ae:	4b15      	ldr	r3, [pc, #84]	@ (8019304 <UTIL_SEQ_Run+0x1dc>)
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80192b4:	4b14      	ldr	r3, [pc, #80]	@ (8019308 <UTIL_SEQ_Run+0x1e0>)
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80192ba:	4b14      	ldr	r3, [pc, #80]	@ (801930c <UTIL_SEQ_Run+0x1e4>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80192c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80192c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80192c4:	401a      	ands	r2, r3
 80192c6:	4b0e      	ldr	r3, [pc, #56]	@ (8019300 <UTIL_SEQ_Run+0x1d8>)
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	4013      	ands	r3, r2
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d107      	bne.n	80192e0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80192d0:	4b0f      	ldr	r3, [pc, #60]	@ (8019310 <UTIL_SEQ_Run+0x1e8>)
 80192d2:	681a      	ldr	r2, [r3, #0]
 80192d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80192d6:	4013      	ands	r3, r2
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d101      	bne.n	80192e0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80192dc:	f7e8 fc34 	bl	8001b48 <UTIL_SEQ_Idle>
 80192e0:	69fb      	ldr	r3, [r7, #28]
 80192e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	f383 8810 	msr	PRIMASK, r3
}
 80192ea:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80192ec:	f000 f917 	bl	801951e <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80192f0:	4a03      	ldr	r2, [pc, #12]	@ (8019300 <UTIL_SEQ_Run+0x1d8>)
 80192f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80192f4:	6013      	str	r3, [r2, #0]

  return;
 80192f6:	bf00      	nop
}
 80192f8:	3740      	adds	r7, #64	@ 0x40
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}
 80192fe:	bf00      	nop
 8019300:	20000140 	.word	0x20000140
 8019304:	20002f64 	.word	0x20002f64
 8019308:	20002f68 	.word	0x20002f68
 801930c:	2000013c 	.word	0x2000013c
 8019310:	20002f6c 	.word	0x20002f6c
 8019314:	20002ff4 	.word	0x20002ff4
 8019318:	20002f70 	.word	0x20002f70
 801931c:	20002f74 	.word	0x20002f74

08019320 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b088      	sub	sp, #32
 8019324:	af00      	add	r7, sp, #0
 8019326:	60f8      	str	r0, [r7, #12]
 8019328:	60b9      	str	r1, [r7, #8]
 801932a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801932c:	f3ef 8310 	mrs	r3, PRIMASK
 8019330:	617b      	str	r3, [r7, #20]
  return(result);
 8019332:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019334:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019336:	b672      	cpsid	i
}
 8019338:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801933a:	68f8      	ldr	r0, [r7, #12]
 801933c:	f000 f8f6 	bl	801952c <SEQ_BitPosition>
 8019340:	4603      	mov	r3, r0
 8019342:	4619      	mov	r1, r3
 8019344:	4a06      	ldr	r2, [pc, #24]	@ (8019360 <UTIL_SEQ_RegTask+0x40>)
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801934c:	69fb      	ldr	r3, [r7, #28]
 801934e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019350:	69bb      	ldr	r3, [r7, #24]
 8019352:	f383 8810 	msr	PRIMASK, r3
}
 8019356:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019358:	bf00      	nop
}
 801935a:	3720      	adds	r7, #32
 801935c:	46bd      	mov	sp, r7
 801935e:	bd80      	pop	{r7, pc}
 8019360:	20002f74 	.word	0x20002f74

08019364 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019364:	b480      	push	{r7}
 8019366:	b087      	sub	sp, #28
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
 801936c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801936e:	f3ef 8310 	mrs	r3, PRIMASK
 8019372:	60fb      	str	r3, [r7, #12]
  return(result);
 8019374:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019376:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019378:	b672      	cpsid	i
}
 801937a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801937c:	4b0d      	ldr	r3, [pc, #52]	@ (80193b4 <UTIL_SEQ_SetTask+0x50>)
 801937e:	681a      	ldr	r2, [r3, #0]
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	4313      	orrs	r3, r2
 8019384:	4a0b      	ldr	r2, [pc, #44]	@ (80193b4 <UTIL_SEQ_SetTask+0x50>)
 8019386:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019388:	4a0b      	ldr	r2, [pc, #44]	@ (80193b8 <UTIL_SEQ_SetTask+0x54>)
 801938a:	683b      	ldr	r3, [r7, #0]
 801938c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019390:	687b      	ldr	r3, [r7, #4]
 8019392:	431a      	orrs	r2, r3
 8019394:	4908      	ldr	r1, [pc, #32]	@ (80193b8 <UTIL_SEQ_SetTask+0x54>)
 8019396:	683b      	ldr	r3, [r7, #0]
 8019398:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801939c:	697b      	ldr	r3, [r7, #20]
 801939e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193a0:	693b      	ldr	r3, [r7, #16]
 80193a2:	f383 8810 	msr	PRIMASK, r3
}
 80193a6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80193a8:	bf00      	nop
}
 80193aa:	371c      	adds	r7, #28
 80193ac:	46bd      	mov	sp, r7
 80193ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193b2:	4770      	bx	lr
 80193b4:	20002f64 	.word	0x20002f64
 80193b8:	20002ff4 	.word	0x20002ff4

080193bc <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80193bc:	b480      	push	{r7}
 80193be:	b087      	sub	sp, #28
 80193c0:	af00      	add	r7, sp, #0
 80193c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193c4:	f3ef 8310 	mrs	r3, PRIMASK
 80193c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80193ca:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80193cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193ce:	b672      	cpsid	i
}
 80193d0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	43da      	mvns	r2, r3
 80193d6:	4b08      	ldr	r3, [pc, #32]	@ (80193f8 <UTIL_SEQ_PauseTask+0x3c>)
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	4013      	ands	r3, r2
 80193dc:	4a06      	ldr	r2, [pc, #24]	@ (80193f8 <UTIL_SEQ_PauseTask+0x3c>)
 80193de:	6013      	str	r3, [r2, #0]
 80193e0:	697b      	ldr	r3, [r7, #20]
 80193e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193e4:	693b      	ldr	r3, [r7, #16]
 80193e6:	f383 8810 	msr	PRIMASK, r3
}
 80193ea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80193ec:	bf00      	nop
}
 80193ee:	371c      	adds	r7, #28
 80193f0:	46bd      	mov	sp, r7
 80193f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f6:	4770      	bx	lr
 80193f8:	2000013c 	.word	0x2000013c

080193fc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80193fc:	b480      	push	{r7}
 80193fe:	b087      	sub	sp, #28
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019404:	f3ef 8310 	mrs	r3, PRIMASK
 8019408:	60fb      	str	r3, [r7, #12]
  return(result);
 801940a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801940c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801940e:	b672      	cpsid	i
}
 8019410:	bf00      	nop

  TaskMask |= TaskId_bm;
 8019412:	4b09      	ldr	r3, [pc, #36]	@ (8019438 <UTIL_SEQ_ResumeTask+0x3c>)
 8019414:	681a      	ldr	r2, [r3, #0]
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	4313      	orrs	r3, r2
 801941a:	4a07      	ldr	r2, [pc, #28]	@ (8019438 <UTIL_SEQ_ResumeTask+0x3c>)
 801941c:	6013      	str	r3, [r2, #0]
 801941e:	697b      	ldr	r3, [r7, #20]
 8019420:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019422:	693b      	ldr	r3, [r7, #16]
 8019424:	f383 8810 	msr	PRIMASK, r3
}
 8019428:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801942a:	bf00      	nop
}
 801942c:	371c      	adds	r7, #28
 801942e:	46bd      	mov	sp, r7
 8019430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019434:	4770      	bx	lr
 8019436:	bf00      	nop
 8019438:	2000013c 	.word	0x2000013c

0801943c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801943c:	b480      	push	{r7}
 801943e:	b087      	sub	sp, #28
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019444:	f3ef 8310 	mrs	r3, PRIMASK
 8019448:	60fb      	str	r3, [r7, #12]
  return(result);
 801944a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801944c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801944e:	b672      	cpsid	i
}
 8019450:	bf00      	nop

  EvtSet |= EvtId_bm;
 8019452:	4b09      	ldr	r3, [pc, #36]	@ (8019478 <UTIL_SEQ_SetEvt+0x3c>)
 8019454:	681a      	ldr	r2, [r3, #0]
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	4313      	orrs	r3, r2
 801945a:	4a07      	ldr	r2, [pc, #28]	@ (8019478 <UTIL_SEQ_SetEvt+0x3c>)
 801945c:	6013      	str	r3, [r2, #0]
 801945e:	697b      	ldr	r3, [r7, #20]
 8019460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019462:	693b      	ldr	r3, [r7, #16]
 8019464:	f383 8810 	msr	PRIMASK, r3
}
 8019468:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801946a:	bf00      	nop
}
 801946c:	371c      	adds	r7, #28
 801946e:	46bd      	mov	sp, r7
 8019470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019474:	4770      	bx	lr
 8019476:	bf00      	nop
 8019478:	20002f68 	.word	0x20002f68

0801947c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b088      	sub	sp, #32
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8019484:	4b1f      	ldr	r3, [pc, #124]	@ (8019504 <UTIL_SEQ_WaitEvt+0x88>)
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801948a:	4b1e      	ldr	r3, [pc, #120]	@ (8019504 <UTIL_SEQ_WaitEvt+0x88>)
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019492:	d102      	bne.n	801949a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8019494:	2300      	movs	r3, #0
 8019496:	61fb      	str	r3, [r7, #28]
 8019498:	e005      	b.n	80194a6 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801949a:	4b1a      	ldr	r3, [pc, #104]	@ (8019504 <UTIL_SEQ_WaitEvt+0x88>)
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	2201      	movs	r2, #1
 80194a0:	fa02 f303 	lsl.w	r3, r2, r3
 80194a4:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80194a6:	4b18      	ldr	r3, [pc, #96]	@ (8019508 <UTIL_SEQ_WaitEvt+0x8c>)
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80194ac:	4a16      	ldr	r2, [pc, #88]	@ (8019508 <UTIL_SEQ_WaitEvt+0x8c>)
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80194b2:	e003      	b.n	80194bc <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80194b4:	6879      	ldr	r1, [r7, #4]
 80194b6:	69f8      	ldr	r0, [r7, #28]
 80194b8:	f7e8 fb4d 	bl	8001b56 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80194bc:	4b13      	ldr	r3, [pc, #76]	@ (801950c <UTIL_SEQ_WaitEvt+0x90>)
 80194be:	681a      	ldr	r2, [r3, #0]
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	4013      	ands	r3, r2
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d0f5      	beq.n	80194b4 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80194c8:	4a0e      	ldr	r2, [pc, #56]	@ (8019504 <UTIL_SEQ_WaitEvt+0x88>)
 80194ca:	69bb      	ldr	r3, [r7, #24]
 80194cc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194ce:	f3ef 8310 	mrs	r3, PRIMASK
 80194d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80194d4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80194d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80194d8:	b672      	cpsid	i
}
 80194da:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	43da      	mvns	r2, r3
 80194e0:	4b0a      	ldr	r3, [pc, #40]	@ (801950c <UTIL_SEQ_WaitEvt+0x90>)
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	4013      	ands	r3, r2
 80194e6:	4a09      	ldr	r2, [pc, #36]	@ (801950c <UTIL_SEQ_WaitEvt+0x90>)
 80194e8:	6013      	str	r3, [r2, #0]
 80194ea:	693b      	ldr	r3, [r7, #16]
 80194ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	f383 8810 	msr	PRIMASK, r3
}
 80194f4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80194f6:	4a04      	ldr	r2, [pc, #16]	@ (8019508 <UTIL_SEQ_WaitEvt+0x8c>)
 80194f8:	697b      	ldr	r3, [r7, #20]
 80194fa:	6013      	str	r3, [r2, #0]
  return;
 80194fc:	bf00      	nop
}
 80194fe:	3720      	adds	r7, #32
 8019500:	46bd      	mov	sp, r7
 8019502:	bd80      	pop	{r7, pc}
 8019504:	20002f70 	.word	0x20002f70
 8019508:	20002f6c 	.word	0x20002f6c
 801950c:	20002f68 	.word	0x20002f68

08019510 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019510:	b480      	push	{r7}
 8019512:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019514:	bf00      	nop
}
 8019516:	46bd      	mov	sp, r7
 8019518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801951c:	4770      	bx	lr

0801951e <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801951e:	b480      	push	{r7}
 8019520:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019522:	bf00      	nop
}
 8019524:	46bd      	mov	sp, r7
 8019526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952a:	4770      	bx	lr

0801952c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801952c:	b480      	push	{r7}
 801952e:	b085      	sub	sp, #20
 8019530:	af00      	add	r7, sp, #0
 8019532:	6078      	str	r0, [r7, #4]
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d101      	bne.n	8019542 <SEQ_BitPosition+0x16>
    return 32U;
 801953e:	2320      	movs	r3, #32
 8019540:	e003      	b.n	801954a <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8019542:	68fb      	ldr	r3, [r7, #12]
 8019544:	fab3 f383 	clz	r3, r3
 8019548:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 801954a:	f1c3 031f 	rsb	r3, r3, #31
 801954e:	b2db      	uxtb	r3, r3
}
 8019550:	4618      	mov	r0, r3
 8019552:	3714      	adds	r7, #20
 8019554:	46bd      	mov	sp, r7
 8019556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801955a:	4770      	bx	lr

0801955c <atoi>:
 801955c:	220a      	movs	r2, #10
 801955e:	2100      	movs	r1, #0
 8019560:	f000 bfa8 	b.w	801a4b4 <strtol>

08019564 <malloc>:
 8019564:	4b02      	ldr	r3, [pc, #8]	@ (8019570 <malloc+0xc>)
 8019566:	4601      	mov	r1, r0
 8019568:	6818      	ldr	r0, [r3, #0]
 801956a:	f000 b82d 	b.w	80195c8 <_malloc_r>
 801956e:	bf00      	nop
 8019570:	200002bc 	.word	0x200002bc

08019574 <free>:
 8019574:	4b02      	ldr	r3, [pc, #8]	@ (8019580 <free+0xc>)
 8019576:	4601      	mov	r1, r0
 8019578:	6818      	ldr	r0, [r3, #0]
 801957a:	f002 bf0d 	b.w	801c398 <_free_r>
 801957e:	bf00      	nop
 8019580:	200002bc 	.word	0x200002bc

08019584 <sbrk_aligned>:
 8019584:	b570      	push	{r4, r5, r6, lr}
 8019586:	4e0f      	ldr	r6, [pc, #60]	@ (80195c4 <sbrk_aligned+0x40>)
 8019588:	460c      	mov	r4, r1
 801958a:	6831      	ldr	r1, [r6, #0]
 801958c:	4605      	mov	r5, r0
 801958e:	b911      	cbnz	r1, 8019596 <sbrk_aligned+0x12>
 8019590:	f002 f824 	bl	801b5dc <_sbrk_r>
 8019594:	6030      	str	r0, [r6, #0]
 8019596:	4621      	mov	r1, r4
 8019598:	4628      	mov	r0, r5
 801959a:	f002 f81f 	bl	801b5dc <_sbrk_r>
 801959e:	1c43      	adds	r3, r0, #1
 80195a0:	d103      	bne.n	80195aa <sbrk_aligned+0x26>
 80195a2:	f04f 34ff 	mov.w	r4, #4294967295
 80195a6:	4620      	mov	r0, r4
 80195a8:	bd70      	pop	{r4, r5, r6, pc}
 80195aa:	1cc4      	adds	r4, r0, #3
 80195ac:	f024 0403 	bic.w	r4, r4, #3
 80195b0:	42a0      	cmp	r0, r4
 80195b2:	d0f8      	beq.n	80195a6 <sbrk_aligned+0x22>
 80195b4:	1a21      	subs	r1, r4, r0
 80195b6:	4628      	mov	r0, r5
 80195b8:	f002 f810 	bl	801b5dc <_sbrk_r>
 80195bc:	3001      	adds	r0, #1
 80195be:	d1f2      	bne.n	80195a6 <sbrk_aligned+0x22>
 80195c0:	e7ef      	b.n	80195a2 <sbrk_aligned+0x1e>
 80195c2:	bf00      	nop
 80195c4:	20002ffc 	.word	0x20002ffc

080195c8 <_malloc_r>:
 80195c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195cc:	1ccd      	adds	r5, r1, #3
 80195ce:	f025 0503 	bic.w	r5, r5, #3
 80195d2:	3508      	adds	r5, #8
 80195d4:	2d0c      	cmp	r5, #12
 80195d6:	bf38      	it	cc
 80195d8:	250c      	movcc	r5, #12
 80195da:	2d00      	cmp	r5, #0
 80195dc:	4606      	mov	r6, r0
 80195de:	db01      	blt.n	80195e4 <_malloc_r+0x1c>
 80195e0:	42a9      	cmp	r1, r5
 80195e2:	d904      	bls.n	80195ee <_malloc_r+0x26>
 80195e4:	230c      	movs	r3, #12
 80195e6:	6033      	str	r3, [r6, #0]
 80195e8:	2000      	movs	r0, #0
 80195ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80196c4 <_malloc_r+0xfc>
 80195f2:	f000 f869 	bl	80196c8 <__malloc_lock>
 80195f6:	f8d8 3000 	ldr.w	r3, [r8]
 80195fa:	461c      	mov	r4, r3
 80195fc:	bb44      	cbnz	r4, 8019650 <_malloc_r+0x88>
 80195fe:	4629      	mov	r1, r5
 8019600:	4630      	mov	r0, r6
 8019602:	f7ff ffbf 	bl	8019584 <sbrk_aligned>
 8019606:	1c43      	adds	r3, r0, #1
 8019608:	4604      	mov	r4, r0
 801960a:	d158      	bne.n	80196be <_malloc_r+0xf6>
 801960c:	f8d8 4000 	ldr.w	r4, [r8]
 8019610:	4627      	mov	r7, r4
 8019612:	2f00      	cmp	r7, #0
 8019614:	d143      	bne.n	801969e <_malloc_r+0xd6>
 8019616:	2c00      	cmp	r4, #0
 8019618:	d04b      	beq.n	80196b2 <_malloc_r+0xea>
 801961a:	6823      	ldr	r3, [r4, #0]
 801961c:	4639      	mov	r1, r7
 801961e:	4630      	mov	r0, r6
 8019620:	eb04 0903 	add.w	r9, r4, r3
 8019624:	f001 ffda 	bl	801b5dc <_sbrk_r>
 8019628:	4581      	cmp	r9, r0
 801962a:	d142      	bne.n	80196b2 <_malloc_r+0xea>
 801962c:	6821      	ldr	r1, [r4, #0]
 801962e:	1a6d      	subs	r5, r5, r1
 8019630:	4629      	mov	r1, r5
 8019632:	4630      	mov	r0, r6
 8019634:	f7ff ffa6 	bl	8019584 <sbrk_aligned>
 8019638:	3001      	adds	r0, #1
 801963a:	d03a      	beq.n	80196b2 <_malloc_r+0xea>
 801963c:	6823      	ldr	r3, [r4, #0]
 801963e:	442b      	add	r3, r5
 8019640:	6023      	str	r3, [r4, #0]
 8019642:	f8d8 3000 	ldr.w	r3, [r8]
 8019646:	685a      	ldr	r2, [r3, #4]
 8019648:	bb62      	cbnz	r2, 80196a4 <_malloc_r+0xdc>
 801964a:	f8c8 7000 	str.w	r7, [r8]
 801964e:	e00f      	b.n	8019670 <_malloc_r+0xa8>
 8019650:	6822      	ldr	r2, [r4, #0]
 8019652:	1b52      	subs	r2, r2, r5
 8019654:	d420      	bmi.n	8019698 <_malloc_r+0xd0>
 8019656:	2a0b      	cmp	r2, #11
 8019658:	d917      	bls.n	801968a <_malloc_r+0xc2>
 801965a:	1961      	adds	r1, r4, r5
 801965c:	42a3      	cmp	r3, r4
 801965e:	6025      	str	r5, [r4, #0]
 8019660:	bf18      	it	ne
 8019662:	6059      	strne	r1, [r3, #4]
 8019664:	6863      	ldr	r3, [r4, #4]
 8019666:	bf08      	it	eq
 8019668:	f8c8 1000 	streq.w	r1, [r8]
 801966c:	5162      	str	r2, [r4, r5]
 801966e:	604b      	str	r3, [r1, #4]
 8019670:	4630      	mov	r0, r6
 8019672:	f000 f82f 	bl	80196d4 <__malloc_unlock>
 8019676:	f104 000b 	add.w	r0, r4, #11
 801967a:	1d23      	adds	r3, r4, #4
 801967c:	f020 0007 	bic.w	r0, r0, #7
 8019680:	1ac2      	subs	r2, r0, r3
 8019682:	bf1c      	itt	ne
 8019684:	1a1b      	subne	r3, r3, r0
 8019686:	50a3      	strne	r3, [r4, r2]
 8019688:	e7af      	b.n	80195ea <_malloc_r+0x22>
 801968a:	6862      	ldr	r2, [r4, #4]
 801968c:	42a3      	cmp	r3, r4
 801968e:	bf0c      	ite	eq
 8019690:	f8c8 2000 	streq.w	r2, [r8]
 8019694:	605a      	strne	r2, [r3, #4]
 8019696:	e7eb      	b.n	8019670 <_malloc_r+0xa8>
 8019698:	4623      	mov	r3, r4
 801969a:	6864      	ldr	r4, [r4, #4]
 801969c:	e7ae      	b.n	80195fc <_malloc_r+0x34>
 801969e:	463c      	mov	r4, r7
 80196a0:	687f      	ldr	r7, [r7, #4]
 80196a2:	e7b6      	b.n	8019612 <_malloc_r+0x4a>
 80196a4:	461a      	mov	r2, r3
 80196a6:	685b      	ldr	r3, [r3, #4]
 80196a8:	42a3      	cmp	r3, r4
 80196aa:	d1fb      	bne.n	80196a4 <_malloc_r+0xdc>
 80196ac:	2300      	movs	r3, #0
 80196ae:	6053      	str	r3, [r2, #4]
 80196b0:	e7de      	b.n	8019670 <_malloc_r+0xa8>
 80196b2:	230c      	movs	r3, #12
 80196b4:	6033      	str	r3, [r6, #0]
 80196b6:	4630      	mov	r0, r6
 80196b8:	f000 f80c 	bl	80196d4 <__malloc_unlock>
 80196bc:	e794      	b.n	80195e8 <_malloc_r+0x20>
 80196be:	6005      	str	r5, [r0, #0]
 80196c0:	e7d6      	b.n	8019670 <_malloc_r+0xa8>
 80196c2:	bf00      	nop
 80196c4:	20003000 	.word	0x20003000

080196c8 <__malloc_lock>:
 80196c8:	4801      	ldr	r0, [pc, #4]	@ (80196d0 <__malloc_lock+0x8>)
 80196ca:	f001 bfd4 	b.w	801b676 <__retarget_lock_acquire_recursive>
 80196ce:	bf00      	nop
 80196d0:	20003144 	.word	0x20003144

080196d4 <__malloc_unlock>:
 80196d4:	4801      	ldr	r0, [pc, #4]	@ (80196dc <__malloc_unlock+0x8>)
 80196d6:	f001 bfcf 	b.w	801b678 <__retarget_lock_release_recursive>
 80196da:	bf00      	nop
 80196dc:	20003144 	.word	0x20003144

080196e0 <sulp>:
 80196e0:	b570      	push	{r4, r5, r6, lr}
 80196e2:	4604      	mov	r4, r0
 80196e4:	460d      	mov	r5, r1
 80196e6:	ec45 4b10 	vmov	d0, r4, r5
 80196ea:	4616      	mov	r6, r2
 80196ec:	f003 fd5e 	bl	801d1ac <__ulp>
 80196f0:	ec51 0b10 	vmov	r0, r1, d0
 80196f4:	b17e      	cbz	r6, 8019716 <sulp+0x36>
 80196f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80196fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80196fe:	2b00      	cmp	r3, #0
 8019700:	dd09      	ble.n	8019716 <sulp+0x36>
 8019702:	051b      	lsls	r3, r3, #20
 8019704:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8019708:	2400      	movs	r4, #0
 801970a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801970e:	4622      	mov	r2, r4
 8019710:	462b      	mov	r3, r5
 8019712:	f7e6 ff49 	bl	80005a8 <__aeabi_dmul>
 8019716:	ec41 0b10 	vmov	d0, r0, r1
 801971a:	bd70      	pop	{r4, r5, r6, pc}
 801971c:	0000      	movs	r0, r0
	...

08019720 <_strtod_l>:
 8019720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019724:	b09f      	sub	sp, #124	@ 0x7c
 8019726:	460c      	mov	r4, r1
 8019728:	9217      	str	r2, [sp, #92]	@ 0x5c
 801972a:	2200      	movs	r2, #0
 801972c:	921a      	str	r2, [sp, #104]	@ 0x68
 801972e:	9005      	str	r0, [sp, #20]
 8019730:	f04f 0a00 	mov.w	sl, #0
 8019734:	f04f 0b00 	mov.w	fp, #0
 8019738:	460a      	mov	r2, r1
 801973a:	9219      	str	r2, [sp, #100]	@ 0x64
 801973c:	7811      	ldrb	r1, [r2, #0]
 801973e:	292b      	cmp	r1, #43	@ 0x2b
 8019740:	d04a      	beq.n	80197d8 <_strtod_l+0xb8>
 8019742:	d838      	bhi.n	80197b6 <_strtod_l+0x96>
 8019744:	290d      	cmp	r1, #13
 8019746:	d832      	bhi.n	80197ae <_strtod_l+0x8e>
 8019748:	2908      	cmp	r1, #8
 801974a:	d832      	bhi.n	80197b2 <_strtod_l+0x92>
 801974c:	2900      	cmp	r1, #0
 801974e:	d03b      	beq.n	80197c8 <_strtod_l+0xa8>
 8019750:	2200      	movs	r2, #0
 8019752:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019754:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8019756:	782a      	ldrb	r2, [r5, #0]
 8019758:	2a30      	cmp	r2, #48	@ 0x30
 801975a:	f040 80b3 	bne.w	80198c4 <_strtod_l+0x1a4>
 801975e:	786a      	ldrb	r2, [r5, #1]
 8019760:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019764:	2a58      	cmp	r2, #88	@ 0x58
 8019766:	d16e      	bne.n	8019846 <_strtod_l+0x126>
 8019768:	9302      	str	r3, [sp, #8]
 801976a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801976c:	9301      	str	r3, [sp, #4]
 801976e:	ab1a      	add	r3, sp, #104	@ 0x68
 8019770:	9300      	str	r3, [sp, #0]
 8019772:	4a8e      	ldr	r2, [pc, #568]	@ (80199ac <_strtod_l+0x28c>)
 8019774:	9805      	ldr	r0, [sp, #20]
 8019776:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019778:	a919      	add	r1, sp, #100	@ 0x64
 801977a:	f002 febf 	bl	801c4fc <__gethex>
 801977e:	f010 060f 	ands.w	r6, r0, #15
 8019782:	4604      	mov	r4, r0
 8019784:	d005      	beq.n	8019792 <_strtod_l+0x72>
 8019786:	2e06      	cmp	r6, #6
 8019788:	d128      	bne.n	80197dc <_strtod_l+0xbc>
 801978a:	3501      	adds	r5, #1
 801978c:	2300      	movs	r3, #0
 801978e:	9519      	str	r5, [sp, #100]	@ 0x64
 8019790:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019792:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019794:	2b00      	cmp	r3, #0
 8019796:	f040 858e 	bne.w	801a2b6 <_strtod_l+0xb96>
 801979a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801979c:	b1cb      	cbz	r3, 80197d2 <_strtod_l+0xb2>
 801979e:	4652      	mov	r2, sl
 80197a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80197a4:	ec43 2b10 	vmov	d0, r2, r3
 80197a8:	b01f      	add	sp, #124	@ 0x7c
 80197aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197ae:	2920      	cmp	r1, #32
 80197b0:	d1ce      	bne.n	8019750 <_strtod_l+0x30>
 80197b2:	3201      	adds	r2, #1
 80197b4:	e7c1      	b.n	801973a <_strtod_l+0x1a>
 80197b6:	292d      	cmp	r1, #45	@ 0x2d
 80197b8:	d1ca      	bne.n	8019750 <_strtod_l+0x30>
 80197ba:	2101      	movs	r1, #1
 80197bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80197be:	1c51      	adds	r1, r2, #1
 80197c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80197c2:	7852      	ldrb	r2, [r2, #1]
 80197c4:	2a00      	cmp	r2, #0
 80197c6:	d1c5      	bne.n	8019754 <_strtod_l+0x34>
 80197c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80197ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	f040 8570 	bne.w	801a2b2 <_strtod_l+0xb92>
 80197d2:	4652      	mov	r2, sl
 80197d4:	465b      	mov	r3, fp
 80197d6:	e7e5      	b.n	80197a4 <_strtod_l+0x84>
 80197d8:	2100      	movs	r1, #0
 80197da:	e7ef      	b.n	80197bc <_strtod_l+0x9c>
 80197dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80197de:	b13a      	cbz	r2, 80197f0 <_strtod_l+0xd0>
 80197e0:	2135      	movs	r1, #53	@ 0x35
 80197e2:	a81c      	add	r0, sp, #112	@ 0x70
 80197e4:	f003 fddc 	bl	801d3a0 <__copybits>
 80197e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80197ea:	9805      	ldr	r0, [sp, #20]
 80197ec:	f003 f9aa 	bl	801cb44 <_Bfree>
 80197f0:	3e01      	subs	r6, #1
 80197f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80197f4:	2e04      	cmp	r6, #4
 80197f6:	d806      	bhi.n	8019806 <_strtod_l+0xe6>
 80197f8:	e8df f006 	tbb	[pc, r6]
 80197fc:	201d0314 	.word	0x201d0314
 8019800:	14          	.byte	0x14
 8019801:	00          	.byte	0x00
 8019802:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8019806:	05e1      	lsls	r1, r4, #23
 8019808:	bf48      	it	mi
 801980a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801980e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019812:	0d1b      	lsrs	r3, r3, #20
 8019814:	051b      	lsls	r3, r3, #20
 8019816:	2b00      	cmp	r3, #0
 8019818:	d1bb      	bne.n	8019792 <_strtod_l+0x72>
 801981a:	f001 ff01 	bl	801b620 <__errno>
 801981e:	2322      	movs	r3, #34	@ 0x22
 8019820:	6003      	str	r3, [r0, #0]
 8019822:	e7b6      	b.n	8019792 <_strtod_l+0x72>
 8019824:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8019828:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801982c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019830:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019834:	e7e7      	b.n	8019806 <_strtod_l+0xe6>
 8019836:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80199b4 <_strtod_l+0x294>
 801983a:	e7e4      	b.n	8019806 <_strtod_l+0xe6>
 801983c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019840:	f04f 3aff 	mov.w	sl, #4294967295
 8019844:	e7df      	b.n	8019806 <_strtod_l+0xe6>
 8019846:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019848:	1c5a      	adds	r2, r3, #1
 801984a:	9219      	str	r2, [sp, #100]	@ 0x64
 801984c:	785b      	ldrb	r3, [r3, #1]
 801984e:	2b30      	cmp	r3, #48	@ 0x30
 8019850:	d0f9      	beq.n	8019846 <_strtod_l+0x126>
 8019852:	2b00      	cmp	r3, #0
 8019854:	d09d      	beq.n	8019792 <_strtod_l+0x72>
 8019856:	2301      	movs	r3, #1
 8019858:	9309      	str	r3, [sp, #36]	@ 0x24
 801985a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801985c:	930c      	str	r3, [sp, #48]	@ 0x30
 801985e:	2300      	movs	r3, #0
 8019860:	9308      	str	r3, [sp, #32]
 8019862:	930a      	str	r3, [sp, #40]	@ 0x28
 8019864:	461f      	mov	r7, r3
 8019866:	220a      	movs	r2, #10
 8019868:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801986a:	7805      	ldrb	r5, [r0, #0]
 801986c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019870:	b2d9      	uxtb	r1, r3
 8019872:	2909      	cmp	r1, #9
 8019874:	d928      	bls.n	80198c8 <_strtod_l+0x1a8>
 8019876:	494e      	ldr	r1, [pc, #312]	@ (80199b0 <_strtod_l+0x290>)
 8019878:	2201      	movs	r2, #1
 801987a:	f001 fdf2 	bl	801b462 <strncmp>
 801987e:	2800      	cmp	r0, #0
 8019880:	d032      	beq.n	80198e8 <_strtod_l+0x1c8>
 8019882:	2000      	movs	r0, #0
 8019884:	462a      	mov	r2, r5
 8019886:	4681      	mov	r9, r0
 8019888:	463d      	mov	r5, r7
 801988a:	4603      	mov	r3, r0
 801988c:	2a65      	cmp	r2, #101	@ 0x65
 801988e:	d001      	beq.n	8019894 <_strtod_l+0x174>
 8019890:	2a45      	cmp	r2, #69	@ 0x45
 8019892:	d114      	bne.n	80198be <_strtod_l+0x19e>
 8019894:	b91d      	cbnz	r5, 801989e <_strtod_l+0x17e>
 8019896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019898:	4302      	orrs	r2, r0
 801989a:	d095      	beq.n	80197c8 <_strtod_l+0xa8>
 801989c:	2500      	movs	r5, #0
 801989e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80198a0:	1c62      	adds	r2, r4, #1
 80198a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80198a4:	7862      	ldrb	r2, [r4, #1]
 80198a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80198a8:	d077      	beq.n	801999a <_strtod_l+0x27a>
 80198aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80198ac:	d07b      	beq.n	80199a6 <_strtod_l+0x286>
 80198ae:	f04f 0c00 	mov.w	ip, #0
 80198b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80198b6:	2909      	cmp	r1, #9
 80198b8:	f240 8082 	bls.w	80199c0 <_strtod_l+0x2a0>
 80198bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80198be:	f04f 0800 	mov.w	r8, #0
 80198c2:	e0a2      	b.n	8019a0a <_strtod_l+0x2ea>
 80198c4:	2300      	movs	r3, #0
 80198c6:	e7c7      	b.n	8019858 <_strtod_l+0x138>
 80198c8:	2f08      	cmp	r7, #8
 80198ca:	bfd5      	itete	le
 80198cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80198ce:	9908      	ldrgt	r1, [sp, #32]
 80198d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80198d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80198d8:	f100 0001 	add.w	r0, r0, #1
 80198dc:	bfd4      	ite	le
 80198de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80198e0:	9308      	strgt	r3, [sp, #32]
 80198e2:	3701      	adds	r7, #1
 80198e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80198e6:	e7bf      	b.n	8019868 <_strtod_l+0x148>
 80198e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80198ea:	1c5a      	adds	r2, r3, #1
 80198ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80198ee:	785a      	ldrb	r2, [r3, #1]
 80198f0:	b37f      	cbz	r7, 8019952 <_strtod_l+0x232>
 80198f2:	4681      	mov	r9, r0
 80198f4:	463d      	mov	r5, r7
 80198f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80198fa:	2b09      	cmp	r3, #9
 80198fc:	d912      	bls.n	8019924 <_strtod_l+0x204>
 80198fe:	2301      	movs	r3, #1
 8019900:	e7c4      	b.n	801988c <_strtod_l+0x16c>
 8019902:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019904:	1c5a      	adds	r2, r3, #1
 8019906:	9219      	str	r2, [sp, #100]	@ 0x64
 8019908:	785a      	ldrb	r2, [r3, #1]
 801990a:	3001      	adds	r0, #1
 801990c:	2a30      	cmp	r2, #48	@ 0x30
 801990e:	d0f8      	beq.n	8019902 <_strtod_l+0x1e2>
 8019910:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8019914:	2b08      	cmp	r3, #8
 8019916:	f200 84d3 	bhi.w	801a2c0 <_strtod_l+0xba0>
 801991a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801991c:	930c      	str	r3, [sp, #48]	@ 0x30
 801991e:	4681      	mov	r9, r0
 8019920:	2000      	movs	r0, #0
 8019922:	4605      	mov	r5, r0
 8019924:	3a30      	subs	r2, #48	@ 0x30
 8019926:	f100 0301 	add.w	r3, r0, #1
 801992a:	d02a      	beq.n	8019982 <_strtod_l+0x262>
 801992c:	4499      	add	r9, r3
 801992e:	eb00 0c05 	add.w	ip, r0, r5
 8019932:	462b      	mov	r3, r5
 8019934:	210a      	movs	r1, #10
 8019936:	4563      	cmp	r3, ip
 8019938:	d10d      	bne.n	8019956 <_strtod_l+0x236>
 801993a:	1c69      	adds	r1, r5, #1
 801993c:	4401      	add	r1, r0
 801993e:	4428      	add	r0, r5
 8019940:	2808      	cmp	r0, #8
 8019942:	dc16      	bgt.n	8019972 <_strtod_l+0x252>
 8019944:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019946:	230a      	movs	r3, #10
 8019948:	fb03 2300 	mla	r3, r3, r0, r2
 801994c:	930a      	str	r3, [sp, #40]	@ 0x28
 801994e:	2300      	movs	r3, #0
 8019950:	e018      	b.n	8019984 <_strtod_l+0x264>
 8019952:	4638      	mov	r0, r7
 8019954:	e7da      	b.n	801990c <_strtod_l+0x1ec>
 8019956:	2b08      	cmp	r3, #8
 8019958:	f103 0301 	add.w	r3, r3, #1
 801995c:	dc03      	bgt.n	8019966 <_strtod_l+0x246>
 801995e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019960:	434e      	muls	r6, r1
 8019962:	960a      	str	r6, [sp, #40]	@ 0x28
 8019964:	e7e7      	b.n	8019936 <_strtod_l+0x216>
 8019966:	2b10      	cmp	r3, #16
 8019968:	bfde      	ittt	le
 801996a:	9e08      	ldrle	r6, [sp, #32]
 801996c:	434e      	mulle	r6, r1
 801996e:	9608      	strle	r6, [sp, #32]
 8019970:	e7e1      	b.n	8019936 <_strtod_l+0x216>
 8019972:	280f      	cmp	r0, #15
 8019974:	dceb      	bgt.n	801994e <_strtod_l+0x22e>
 8019976:	9808      	ldr	r0, [sp, #32]
 8019978:	230a      	movs	r3, #10
 801997a:	fb03 2300 	mla	r3, r3, r0, r2
 801997e:	9308      	str	r3, [sp, #32]
 8019980:	e7e5      	b.n	801994e <_strtod_l+0x22e>
 8019982:	4629      	mov	r1, r5
 8019984:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019986:	1c50      	adds	r0, r2, #1
 8019988:	9019      	str	r0, [sp, #100]	@ 0x64
 801998a:	7852      	ldrb	r2, [r2, #1]
 801998c:	4618      	mov	r0, r3
 801998e:	460d      	mov	r5, r1
 8019990:	e7b1      	b.n	80198f6 <_strtod_l+0x1d6>
 8019992:	f04f 0900 	mov.w	r9, #0
 8019996:	2301      	movs	r3, #1
 8019998:	e77d      	b.n	8019896 <_strtod_l+0x176>
 801999a:	f04f 0c00 	mov.w	ip, #0
 801999e:	1ca2      	adds	r2, r4, #2
 80199a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80199a2:	78a2      	ldrb	r2, [r4, #2]
 80199a4:	e785      	b.n	80198b2 <_strtod_l+0x192>
 80199a6:	f04f 0c01 	mov.w	ip, #1
 80199aa:	e7f8      	b.n	801999e <_strtod_l+0x27e>
 80199ac:	0802219c 	.word	0x0802219c
 80199b0:	08022184 	.word	0x08022184
 80199b4:	7ff00000 	.word	0x7ff00000
 80199b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80199ba:	1c51      	adds	r1, r2, #1
 80199bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80199be:	7852      	ldrb	r2, [r2, #1]
 80199c0:	2a30      	cmp	r2, #48	@ 0x30
 80199c2:	d0f9      	beq.n	80199b8 <_strtod_l+0x298>
 80199c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80199c8:	2908      	cmp	r1, #8
 80199ca:	f63f af78 	bhi.w	80198be <_strtod_l+0x19e>
 80199ce:	3a30      	subs	r2, #48	@ 0x30
 80199d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80199d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80199d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80199d6:	f04f 080a 	mov.w	r8, #10
 80199da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80199dc:	1c56      	adds	r6, r2, #1
 80199de:	9619      	str	r6, [sp, #100]	@ 0x64
 80199e0:	7852      	ldrb	r2, [r2, #1]
 80199e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80199e6:	f1be 0f09 	cmp.w	lr, #9
 80199ea:	d939      	bls.n	8019a60 <_strtod_l+0x340>
 80199ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80199ee:	1a76      	subs	r6, r6, r1
 80199f0:	2e08      	cmp	r6, #8
 80199f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80199f6:	dc03      	bgt.n	8019a00 <_strtod_l+0x2e0>
 80199f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80199fa:	4588      	cmp	r8, r1
 80199fc:	bfa8      	it	ge
 80199fe:	4688      	movge	r8, r1
 8019a00:	f1bc 0f00 	cmp.w	ip, #0
 8019a04:	d001      	beq.n	8019a0a <_strtod_l+0x2ea>
 8019a06:	f1c8 0800 	rsb	r8, r8, #0
 8019a0a:	2d00      	cmp	r5, #0
 8019a0c:	d14e      	bne.n	8019aac <_strtod_l+0x38c>
 8019a0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019a10:	4308      	orrs	r0, r1
 8019a12:	f47f aebe 	bne.w	8019792 <_strtod_l+0x72>
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	f47f aed6 	bne.w	80197c8 <_strtod_l+0xa8>
 8019a1c:	2a69      	cmp	r2, #105	@ 0x69
 8019a1e:	d028      	beq.n	8019a72 <_strtod_l+0x352>
 8019a20:	dc25      	bgt.n	8019a6e <_strtod_l+0x34e>
 8019a22:	2a49      	cmp	r2, #73	@ 0x49
 8019a24:	d025      	beq.n	8019a72 <_strtod_l+0x352>
 8019a26:	2a4e      	cmp	r2, #78	@ 0x4e
 8019a28:	f47f aece 	bne.w	80197c8 <_strtod_l+0xa8>
 8019a2c:	499b      	ldr	r1, [pc, #620]	@ (8019c9c <_strtod_l+0x57c>)
 8019a2e:	a819      	add	r0, sp, #100	@ 0x64
 8019a30:	f002 ff86 	bl	801c940 <__match>
 8019a34:	2800      	cmp	r0, #0
 8019a36:	f43f aec7 	beq.w	80197c8 <_strtod_l+0xa8>
 8019a3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019a3c:	781b      	ldrb	r3, [r3, #0]
 8019a3e:	2b28      	cmp	r3, #40	@ 0x28
 8019a40:	d12e      	bne.n	8019aa0 <_strtod_l+0x380>
 8019a42:	4997      	ldr	r1, [pc, #604]	@ (8019ca0 <_strtod_l+0x580>)
 8019a44:	aa1c      	add	r2, sp, #112	@ 0x70
 8019a46:	a819      	add	r0, sp, #100	@ 0x64
 8019a48:	f002 ff8e 	bl	801c968 <__hexnan>
 8019a4c:	2805      	cmp	r0, #5
 8019a4e:	d127      	bne.n	8019aa0 <_strtod_l+0x380>
 8019a50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019a52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8019a56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019a5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019a5e:	e698      	b.n	8019792 <_strtod_l+0x72>
 8019a60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019a62:	fb08 2101 	mla	r1, r8, r1, r2
 8019a66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019a6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8019a6c:	e7b5      	b.n	80199da <_strtod_l+0x2ba>
 8019a6e:	2a6e      	cmp	r2, #110	@ 0x6e
 8019a70:	e7da      	b.n	8019a28 <_strtod_l+0x308>
 8019a72:	498c      	ldr	r1, [pc, #560]	@ (8019ca4 <_strtod_l+0x584>)
 8019a74:	a819      	add	r0, sp, #100	@ 0x64
 8019a76:	f002 ff63 	bl	801c940 <__match>
 8019a7a:	2800      	cmp	r0, #0
 8019a7c:	f43f aea4 	beq.w	80197c8 <_strtod_l+0xa8>
 8019a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019a82:	4989      	ldr	r1, [pc, #548]	@ (8019ca8 <_strtod_l+0x588>)
 8019a84:	3b01      	subs	r3, #1
 8019a86:	a819      	add	r0, sp, #100	@ 0x64
 8019a88:	9319      	str	r3, [sp, #100]	@ 0x64
 8019a8a:	f002 ff59 	bl	801c940 <__match>
 8019a8e:	b910      	cbnz	r0, 8019a96 <_strtod_l+0x376>
 8019a90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019a92:	3301      	adds	r3, #1
 8019a94:	9319      	str	r3, [sp, #100]	@ 0x64
 8019a96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8019cb8 <_strtod_l+0x598>
 8019a9a:	f04f 0a00 	mov.w	sl, #0
 8019a9e:	e678      	b.n	8019792 <_strtod_l+0x72>
 8019aa0:	4882      	ldr	r0, [pc, #520]	@ (8019cac <_strtod_l+0x58c>)
 8019aa2:	f001 fe01 	bl	801b6a8 <nan>
 8019aa6:	ec5b ab10 	vmov	sl, fp, d0
 8019aaa:	e672      	b.n	8019792 <_strtod_l+0x72>
 8019aac:	eba8 0309 	sub.w	r3, r8, r9
 8019ab0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019ab2:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ab4:	2f00      	cmp	r7, #0
 8019ab6:	bf08      	it	eq
 8019ab8:	462f      	moveq	r7, r5
 8019aba:	2d10      	cmp	r5, #16
 8019abc:	462c      	mov	r4, r5
 8019abe:	bfa8      	it	ge
 8019ac0:	2410      	movge	r4, #16
 8019ac2:	f7e6 fcf7 	bl	80004b4 <__aeabi_ui2d>
 8019ac6:	2d09      	cmp	r5, #9
 8019ac8:	4682      	mov	sl, r0
 8019aca:	468b      	mov	fp, r1
 8019acc:	dc13      	bgt.n	8019af6 <_strtod_l+0x3d6>
 8019ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	f43f ae5e 	beq.w	8019792 <_strtod_l+0x72>
 8019ad6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ad8:	dd78      	ble.n	8019bcc <_strtod_l+0x4ac>
 8019ada:	2b16      	cmp	r3, #22
 8019adc:	dc5f      	bgt.n	8019b9e <_strtod_l+0x47e>
 8019ade:	4974      	ldr	r1, [pc, #464]	@ (8019cb0 <_strtod_l+0x590>)
 8019ae0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019ae4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ae8:	4652      	mov	r2, sl
 8019aea:	465b      	mov	r3, fp
 8019aec:	f7e6 fd5c 	bl	80005a8 <__aeabi_dmul>
 8019af0:	4682      	mov	sl, r0
 8019af2:	468b      	mov	fp, r1
 8019af4:	e64d      	b.n	8019792 <_strtod_l+0x72>
 8019af6:	4b6e      	ldr	r3, [pc, #440]	@ (8019cb0 <_strtod_l+0x590>)
 8019af8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019afc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8019b00:	f7e6 fd52 	bl	80005a8 <__aeabi_dmul>
 8019b04:	4682      	mov	sl, r0
 8019b06:	9808      	ldr	r0, [sp, #32]
 8019b08:	468b      	mov	fp, r1
 8019b0a:	f7e6 fcd3 	bl	80004b4 <__aeabi_ui2d>
 8019b0e:	4602      	mov	r2, r0
 8019b10:	460b      	mov	r3, r1
 8019b12:	4650      	mov	r0, sl
 8019b14:	4659      	mov	r1, fp
 8019b16:	f7e6 fb91 	bl	800023c <__adddf3>
 8019b1a:	2d0f      	cmp	r5, #15
 8019b1c:	4682      	mov	sl, r0
 8019b1e:	468b      	mov	fp, r1
 8019b20:	ddd5      	ble.n	8019ace <_strtod_l+0x3ae>
 8019b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b24:	1b2c      	subs	r4, r5, r4
 8019b26:	441c      	add	r4, r3
 8019b28:	2c00      	cmp	r4, #0
 8019b2a:	f340 8096 	ble.w	8019c5a <_strtod_l+0x53a>
 8019b2e:	f014 030f 	ands.w	r3, r4, #15
 8019b32:	d00a      	beq.n	8019b4a <_strtod_l+0x42a>
 8019b34:	495e      	ldr	r1, [pc, #376]	@ (8019cb0 <_strtod_l+0x590>)
 8019b36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019b3a:	4652      	mov	r2, sl
 8019b3c:	465b      	mov	r3, fp
 8019b3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019b42:	f7e6 fd31 	bl	80005a8 <__aeabi_dmul>
 8019b46:	4682      	mov	sl, r0
 8019b48:	468b      	mov	fp, r1
 8019b4a:	f034 040f 	bics.w	r4, r4, #15
 8019b4e:	d073      	beq.n	8019c38 <_strtod_l+0x518>
 8019b50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019b54:	dd48      	ble.n	8019be8 <_strtod_l+0x4c8>
 8019b56:	2400      	movs	r4, #0
 8019b58:	46a0      	mov	r8, r4
 8019b5a:	940a      	str	r4, [sp, #40]	@ 0x28
 8019b5c:	46a1      	mov	r9, r4
 8019b5e:	9a05      	ldr	r2, [sp, #20]
 8019b60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8019cb8 <_strtod_l+0x598>
 8019b64:	2322      	movs	r3, #34	@ 0x22
 8019b66:	6013      	str	r3, [r2, #0]
 8019b68:	f04f 0a00 	mov.w	sl, #0
 8019b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	f43f ae0f 	beq.w	8019792 <_strtod_l+0x72>
 8019b74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019b76:	9805      	ldr	r0, [sp, #20]
 8019b78:	f002 ffe4 	bl	801cb44 <_Bfree>
 8019b7c:	9805      	ldr	r0, [sp, #20]
 8019b7e:	4649      	mov	r1, r9
 8019b80:	f002 ffe0 	bl	801cb44 <_Bfree>
 8019b84:	9805      	ldr	r0, [sp, #20]
 8019b86:	4641      	mov	r1, r8
 8019b88:	f002 ffdc 	bl	801cb44 <_Bfree>
 8019b8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019b8e:	9805      	ldr	r0, [sp, #20]
 8019b90:	f002 ffd8 	bl	801cb44 <_Bfree>
 8019b94:	9805      	ldr	r0, [sp, #20]
 8019b96:	4621      	mov	r1, r4
 8019b98:	f002 ffd4 	bl	801cb44 <_Bfree>
 8019b9c:	e5f9      	b.n	8019792 <_strtod_l+0x72>
 8019b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019ba0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019ba4:	4293      	cmp	r3, r2
 8019ba6:	dbbc      	blt.n	8019b22 <_strtod_l+0x402>
 8019ba8:	4c41      	ldr	r4, [pc, #260]	@ (8019cb0 <_strtod_l+0x590>)
 8019baa:	f1c5 050f 	rsb	r5, r5, #15
 8019bae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019bb2:	4652      	mov	r2, sl
 8019bb4:	465b      	mov	r3, fp
 8019bb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019bba:	f7e6 fcf5 	bl	80005a8 <__aeabi_dmul>
 8019bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019bc0:	1b5d      	subs	r5, r3, r5
 8019bc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019bc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019bca:	e78f      	b.n	8019aec <_strtod_l+0x3cc>
 8019bcc:	3316      	adds	r3, #22
 8019bce:	dba8      	blt.n	8019b22 <_strtod_l+0x402>
 8019bd0:	4b37      	ldr	r3, [pc, #220]	@ (8019cb0 <_strtod_l+0x590>)
 8019bd2:	eba9 0808 	sub.w	r8, r9, r8
 8019bd6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019bda:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019bde:	4650      	mov	r0, sl
 8019be0:	4659      	mov	r1, fp
 8019be2:	f7e6 fe0b 	bl	80007fc <__aeabi_ddiv>
 8019be6:	e783      	b.n	8019af0 <_strtod_l+0x3d0>
 8019be8:	4b32      	ldr	r3, [pc, #200]	@ (8019cb4 <_strtod_l+0x594>)
 8019bea:	9308      	str	r3, [sp, #32]
 8019bec:	2300      	movs	r3, #0
 8019bee:	1124      	asrs	r4, r4, #4
 8019bf0:	4650      	mov	r0, sl
 8019bf2:	4659      	mov	r1, fp
 8019bf4:	461e      	mov	r6, r3
 8019bf6:	2c01      	cmp	r4, #1
 8019bf8:	dc21      	bgt.n	8019c3e <_strtod_l+0x51e>
 8019bfa:	b10b      	cbz	r3, 8019c00 <_strtod_l+0x4e0>
 8019bfc:	4682      	mov	sl, r0
 8019bfe:	468b      	mov	fp, r1
 8019c00:	492c      	ldr	r1, [pc, #176]	@ (8019cb4 <_strtod_l+0x594>)
 8019c02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019c06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019c0a:	4652      	mov	r2, sl
 8019c0c:	465b      	mov	r3, fp
 8019c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019c12:	f7e6 fcc9 	bl	80005a8 <__aeabi_dmul>
 8019c16:	4b28      	ldr	r3, [pc, #160]	@ (8019cb8 <_strtod_l+0x598>)
 8019c18:	460a      	mov	r2, r1
 8019c1a:	400b      	ands	r3, r1
 8019c1c:	4927      	ldr	r1, [pc, #156]	@ (8019cbc <_strtod_l+0x59c>)
 8019c1e:	428b      	cmp	r3, r1
 8019c20:	4682      	mov	sl, r0
 8019c22:	d898      	bhi.n	8019b56 <_strtod_l+0x436>
 8019c24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019c28:	428b      	cmp	r3, r1
 8019c2a:	bf86      	itte	hi
 8019c2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8019cc0 <_strtod_l+0x5a0>
 8019c30:	f04f 3aff 	movhi.w	sl, #4294967295
 8019c34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019c38:	2300      	movs	r3, #0
 8019c3a:	9308      	str	r3, [sp, #32]
 8019c3c:	e07a      	b.n	8019d34 <_strtod_l+0x614>
 8019c3e:	07e2      	lsls	r2, r4, #31
 8019c40:	d505      	bpl.n	8019c4e <_strtod_l+0x52e>
 8019c42:	9b08      	ldr	r3, [sp, #32]
 8019c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c48:	f7e6 fcae 	bl	80005a8 <__aeabi_dmul>
 8019c4c:	2301      	movs	r3, #1
 8019c4e:	9a08      	ldr	r2, [sp, #32]
 8019c50:	3208      	adds	r2, #8
 8019c52:	3601      	adds	r6, #1
 8019c54:	1064      	asrs	r4, r4, #1
 8019c56:	9208      	str	r2, [sp, #32]
 8019c58:	e7cd      	b.n	8019bf6 <_strtod_l+0x4d6>
 8019c5a:	d0ed      	beq.n	8019c38 <_strtod_l+0x518>
 8019c5c:	4264      	negs	r4, r4
 8019c5e:	f014 020f 	ands.w	r2, r4, #15
 8019c62:	d00a      	beq.n	8019c7a <_strtod_l+0x55a>
 8019c64:	4b12      	ldr	r3, [pc, #72]	@ (8019cb0 <_strtod_l+0x590>)
 8019c66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019c6a:	4650      	mov	r0, sl
 8019c6c:	4659      	mov	r1, fp
 8019c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c72:	f7e6 fdc3 	bl	80007fc <__aeabi_ddiv>
 8019c76:	4682      	mov	sl, r0
 8019c78:	468b      	mov	fp, r1
 8019c7a:	1124      	asrs	r4, r4, #4
 8019c7c:	d0dc      	beq.n	8019c38 <_strtod_l+0x518>
 8019c7e:	2c1f      	cmp	r4, #31
 8019c80:	dd20      	ble.n	8019cc4 <_strtod_l+0x5a4>
 8019c82:	2400      	movs	r4, #0
 8019c84:	46a0      	mov	r8, r4
 8019c86:	940a      	str	r4, [sp, #40]	@ 0x28
 8019c88:	46a1      	mov	r9, r4
 8019c8a:	9a05      	ldr	r2, [sp, #20]
 8019c8c:	2322      	movs	r3, #34	@ 0x22
 8019c8e:	f04f 0a00 	mov.w	sl, #0
 8019c92:	f04f 0b00 	mov.w	fp, #0
 8019c96:	6013      	str	r3, [r2, #0]
 8019c98:	e768      	b.n	8019b6c <_strtod_l+0x44c>
 8019c9a:	bf00      	nop
 8019c9c:	080222e6 	.word	0x080222e6
 8019ca0:	08022188 	.word	0x08022188
 8019ca4:	080222de 	.word	0x080222de
 8019ca8:	080223ca 	.word	0x080223ca
 8019cac:	080223c6 	.word	0x080223c6
 8019cb0:	08022530 	.word	0x08022530
 8019cb4:	08022508 	.word	0x08022508
 8019cb8:	7ff00000 	.word	0x7ff00000
 8019cbc:	7ca00000 	.word	0x7ca00000
 8019cc0:	7fefffff 	.word	0x7fefffff
 8019cc4:	f014 0310 	ands.w	r3, r4, #16
 8019cc8:	bf18      	it	ne
 8019cca:	236a      	movne	r3, #106	@ 0x6a
 8019ccc:	4ea9      	ldr	r6, [pc, #676]	@ (8019f74 <_strtod_l+0x854>)
 8019cce:	9308      	str	r3, [sp, #32]
 8019cd0:	4650      	mov	r0, sl
 8019cd2:	4659      	mov	r1, fp
 8019cd4:	2300      	movs	r3, #0
 8019cd6:	07e2      	lsls	r2, r4, #31
 8019cd8:	d504      	bpl.n	8019ce4 <_strtod_l+0x5c4>
 8019cda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019cde:	f7e6 fc63 	bl	80005a8 <__aeabi_dmul>
 8019ce2:	2301      	movs	r3, #1
 8019ce4:	1064      	asrs	r4, r4, #1
 8019ce6:	f106 0608 	add.w	r6, r6, #8
 8019cea:	d1f4      	bne.n	8019cd6 <_strtod_l+0x5b6>
 8019cec:	b10b      	cbz	r3, 8019cf2 <_strtod_l+0x5d2>
 8019cee:	4682      	mov	sl, r0
 8019cf0:	468b      	mov	fp, r1
 8019cf2:	9b08      	ldr	r3, [sp, #32]
 8019cf4:	b1b3      	cbz	r3, 8019d24 <_strtod_l+0x604>
 8019cf6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8019cfa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	4659      	mov	r1, fp
 8019d02:	dd0f      	ble.n	8019d24 <_strtod_l+0x604>
 8019d04:	2b1f      	cmp	r3, #31
 8019d06:	dd55      	ble.n	8019db4 <_strtod_l+0x694>
 8019d08:	2b34      	cmp	r3, #52	@ 0x34
 8019d0a:	bfde      	ittt	le
 8019d0c:	f04f 33ff 	movle.w	r3, #4294967295
 8019d10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8019d14:	4093      	lslle	r3, r2
 8019d16:	f04f 0a00 	mov.w	sl, #0
 8019d1a:	bfcc      	ite	gt
 8019d1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8019d20:	ea03 0b01 	andle.w	fp, r3, r1
 8019d24:	2200      	movs	r2, #0
 8019d26:	2300      	movs	r3, #0
 8019d28:	4650      	mov	r0, sl
 8019d2a:	4659      	mov	r1, fp
 8019d2c:	f7e6 fea4 	bl	8000a78 <__aeabi_dcmpeq>
 8019d30:	2800      	cmp	r0, #0
 8019d32:	d1a6      	bne.n	8019c82 <_strtod_l+0x562>
 8019d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d36:	9300      	str	r3, [sp, #0]
 8019d38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019d3a:	9805      	ldr	r0, [sp, #20]
 8019d3c:	462b      	mov	r3, r5
 8019d3e:	463a      	mov	r2, r7
 8019d40:	f002 ff68 	bl	801cc14 <__s2b>
 8019d44:	900a      	str	r0, [sp, #40]	@ 0x28
 8019d46:	2800      	cmp	r0, #0
 8019d48:	f43f af05 	beq.w	8019b56 <_strtod_l+0x436>
 8019d4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019d4e:	2a00      	cmp	r2, #0
 8019d50:	eba9 0308 	sub.w	r3, r9, r8
 8019d54:	bfa8      	it	ge
 8019d56:	2300      	movge	r3, #0
 8019d58:	9312      	str	r3, [sp, #72]	@ 0x48
 8019d5a:	2400      	movs	r4, #0
 8019d5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8019d60:	9316      	str	r3, [sp, #88]	@ 0x58
 8019d62:	46a0      	mov	r8, r4
 8019d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d66:	9805      	ldr	r0, [sp, #20]
 8019d68:	6859      	ldr	r1, [r3, #4]
 8019d6a:	f002 feab 	bl	801cac4 <_Balloc>
 8019d6e:	4681      	mov	r9, r0
 8019d70:	2800      	cmp	r0, #0
 8019d72:	f43f aef4 	beq.w	8019b5e <_strtod_l+0x43e>
 8019d76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d78:	691a      	ldr	r2, [r3, #16]
 8019d7a:	3202      	adds	r2, #2
 8019d7c:	f103 010c 	add.w	r1, r3, #12
 8019d80:	0092      	lsls	r2, r2, #2
 8019d82:	300c      	adds	r0, #12
 8019d84:	f001 fc81 	bl	801b68a <memcpy>
 8019d88:	ec4b ab10 	vmov	d0, sl, fp
 8019d8c:	9805      	ldr	r0, [sp, #20]
 8019d8e:	aa1c      	add	r2, sp, #112	@ 0x70
 8019d90:	a91b      	add	r1, sp, #108	@ 0x6c
 8019d92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8019d96:	f003 fa79 	bl	801d28c <__d2b>
 8019d9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8019d9c:	2800      	cmp	r0, #0
 8019d9e:	f43f aede 	beq.w	8019b5e <_strtod_l+0x43e>
 8019da2:	9805      	ldr	r0, [sp, #20]
 8019da4:	2101      	movs	r1, #1
 8019da6:	f002 ffcb 	bl	801cd40 <__i2b>
 8019daa:	4680      	mov	r8, r0
 8019dac:	b948      	cbnz	r0, 8019dc2 <_strtod_l+0x6a2>
 8019dae:	f04f 0800 	mov.w	r8, #0
 8019db2:	e6d4      	b.n	8019b5e <_strtod_l+0x43e>
 8019db4:	f04f 32ff 	mov.w	r2, #4294967295
 8019db8:	fa02 f303 	lsl.w	r3, r2, r3
 8019dbc:	ea03 0a0a 	and.w	sl, r3, sl
 8019dc0:	e7b0      	b.n	8019d24 <_strtod_l+0x604>
 8019dc2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8019dc4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8019dc6:	2d00      	cmp	r5, #0
 8019dc8:	bfab      	itete	ge
 8019dca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8019dcc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8019dce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8019dd0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8019dd2:	bfac      	ite	ge
 8019dd4:	18ef      	addge	r7, r5, r3
 8019dd6:	1b5e      	sublt	r6, r3, r5
 8019dd8:	9b08      	ldr	r3, [sp, #32]
 8019dda:	1aed      	subs	r5, r5, r3
 8019ddc:	4415      	add	r5, r2
 8019dde:	4b66      	ldr	r3, [pc, #408]	@ (8019f78 <_strtod_l+0x858>)
 8019de0:	3d01      	subs	r5, #1
 8019de2:	429d      	cmp	r5, r3
 8019de4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8019de8:	da50      	bge.n	8019e8c <_strtod_l+0x76c>
 8019dea:	1b5b      	subs	r3, r3, r5
 8019dec:	2b1f      	cmp	r3, #31
 8019dee:	eba2 0203 	sub.w	r2, r2, r3
 8019df2:	f04f 0101 	mov.w	r1, #1
 8019df6:	dc3d      	bgt.n	8019e74 <_strtod_l+0x754>
 8019df8:	fa01 f303 	lsl.w	r3, r1, r3
 8019dfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019dfe:	2300      	movs	r3, #0
 8019e00:	9310      	str	r3, [sp, #64]	@ 0x40
 8019e02:	18bd      	adds	r5, r7, r2
 8019e04:	9b08      	ldr	r3, [sp, #32]
 8019e06:	42af      	cmp	r7, r5
 8019e08:	4416      	add	r6, r2
 8019e0a:	441e      	add	r6, r3
 8019e0c:	463b      	mov	r3, r7
 8019e0e:	bfa8      	it	ge
 8019e10:	462b      	movge	r3, r5
 8019e12:	42b3      	cmp	r3, r6
 8019e14:	bfa8      	it	ge
 8019e16:	4633      	movge	r3, r6
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	bfc2      	ittt	gt
 8019e1c:	1aed      	subgt	r5, r5, r3
 8019e1e:	1af6      	subgt	r6, r6, r3
 8019e20:	1aff      	subgt	r7, r7, r3
 8019e22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	dd16      	ble.n	8019e56 <_strtod_l+0x736>
 8019e28:	4641      	mov	r1, r8
 8019e2a:	9805      	ldr	r0, [sp, #20]
 8019e2c:	461a      	mov	r2, r3
 8019e2e:	f003 f847 	bl	801cec0 <__pow5mult>
 8019e32:	4680      	mov	r8, r0
 8019e34:	2800      	cmp	r0, #0
 8019e36:	d0ba      	beq.n	8019dae <_strtod_l+0x68e>
 8019e38:	4601      	mov	r1, r0
 8019e3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019e3c:	9805      	ldr	r0, [sp, #20]
 8019e3e:	f002 ff95 	bl	801cd6c <__multiply>
 8019e42:	900e      	str	r0, [sp, #56]	@ 0x38
 8019e44:	2800      	cmp	r0, #0
 8019e46:	f43f ae8a 	beq.w	8019b5e <_strtod_l+0x43e>
 8019e4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019e4c:	9805      	ldr	r0, [sp, #20]
 8019e4e:	f002 fe79 	bl	801cb44 <_Bfree>
 8019e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e54:	931a      	str	r3, [sp, #104]	@ 0x68
 8019e56:	2d00      	cmp	r5, #0
 8019e58:	dc1d      	bgt.n	8019e96 <_strtod_l+0x776>
 8019e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	dd23      	ble.n	8019ea8 <_strtod_l+0x788>
 8019e60:	4649      	mov	r1, r9
 8019e62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8019e64:	9805      	ldr	r0, [sp, #20]
 8019e66:	f003 f82b 	bl	801cec0 <__pow5mult>
 8019e6a:	4681      	mov	r9, r0
 8019e6c:	b9e0      	cbnz	r0, 8019ea8 <_strtod_l+0x788>
 8019e6e:	f04f 0900 	mov.w	r9, #0
 8019e72:	e674      	b.n	8019b5e <_strtod_l+0x43e>
 8019e74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8019e78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8019e7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8019e80:	35e2      	adds	r5, #226	@ 0xe2
 8019e82:	fa01 f305 	lsl.w	r3, r1, r5
 8019e86:	9310      	str	r3, [sp, #64]	@ 0x40
 8019e88:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019e8a:	e7ba      	b.n	8019e02 <_strtod_l+0x6e2>
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8019e90:	2301      	movs	r3, #1
 8019e92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8019e94:	e7b5      	b.n	8019e02 <_strtod_l+0x6e2>
 8019e96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019e98:	9805      	ldr	r0, [sp, #20]
 8019e9a:	462a      	mov	r2, r5
 8019e9c:	f003 f86a 	bl	801cf74 <__lshift>
 8019ea0:	901a      	str	r0, [sp, #104]	@ 0x68
 8019ea2:	2800      	cmp	r0, #0
 8019ea4:	d1d9      	bne.n	8019e5a <_strtod_l+0x73a>
 8019ea6:	e65a      	b.n	8019b5e <_strtod_l+0x43e>
 8019ea8:	2e00      	cmp	r6, #0
 8019eaa:	dd07      	ble.n	8019ebc <_strtod_l+0x79c>
 8019eac:	4649      	mov	r1, r9
 8019eae:	9805      	ldr	r0, [sp, #20]
 8019eb0:	4632      	mov	r2, r6
 8019eb2:	f003 f85f 	bl	801cf74 <__lshift>
 8019eb6:	4681      	mov	r9, r0
 8019eb8:	2800      	cmp	r0, #0
 8019eba:	d0d8      	beq.n	8019e6e <_strtod_l+0x74e>
 8019ebc:	2f00      	cmp	r7, #0
 8019ebe:	dd08      	ble.n	8019ed2 <_strtod_l+0x7b2>
 8019ec0:	4641      	mov	r1, r8
 8019ec2:	9805      	ldr	r0, [sp, #20]
 8019ec4:	463a      	mov	r2, r7
 8019ec6:	f003 f855 	bl	801cf74 <__lshift>
 8019eca:	4680      	mov	r8, r0
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	f43f ae46 	beq.w	8019b5e <_strtod_l+0x43e>
 8019ed2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019ed4:	9805      	ldr	r0, [sp, #20]
 8019ed6:	464a      	mov	r2, r9
 8019ed8:	f003 f8d4 	bl	801d084 <__mdiff>
 8019edc:	4604      	mov	r4, r0
 8019ede:	2800      	cmp	r0, #0
 8019ee0:	f43f ae3d 	beq.w	8019b5e <_strtod_l+0x43e>
 8019ee4:	68c3      	ldr	r3, [r0, #12]
 8019ee6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019ee8:	2300      	movs	r3, #0
 8019eea:	60c3      	str	r3, [r0, #12]
 8019eec:	4641      	mov	r1, r8
 8019eee:	f003 f8ad 	bl	801d04c <__mcmp>
 8019ef2:	2800      	cmp	r0, #0
 8019ef4:	da46      	bge.n	8019f84 <_strtod_l+0x864>
 8019ef6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ef8:	ea53 030a 	orrs.w	r3, r3, sl
 8019efc:	d16c      	bne.n	8019fd8 <_strtod_l+0x8b8>
 8019efe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d168      	bne.n	8019fd8 <_strtod_l+0x8b8>
 8019f06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019f0a:	0d1b      	lsrs	r3, r3, #20
 8019f0c:	051b      	lsls	r3, r3, #20
 8019f0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019f12:	d961      	bls.n	8019fd8 <_strtod_l+0x8b8>
 8019f14:	6963      	ldr	r3, [r4, #20]
 8019f16:	b913      	cbnz	r3, 8019f1e <_strtod_l+0x7fe>
 8019f18:	6923      	ldr	r3, [r4, #16]
 8019f1a:	2b01      	cmp	r3, #1
 8019f1c:	dd5c      	ble.n	8019fd8 <_strtod_l+0x8b8>
 8019f1e:	4621      	mov	r1, r4
 8019f20:	2201      	movs	r2, #1
 8019f22:	9805      	ldr	r0, [sp, #20]
 8019f24:	f003 f826 	bl	801cf74 <__lshift>
 8019f28:	4641      	mov	r1, r8
 8019f2a:	4604      	mov	r4, r0
 8019f2c:	f003 f88e 	bl	801d04c <__mcmp>
 8019f30:	2800      	cmp	r0, #0
 8019f32:	dd51      	ble.n	8019fd8 <_strtod_l+0x8b8>
 8019f34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019f38:	9a08      	ldr	r2, [sp, #32]
 8019f3a:	0d1b      	lsrs	r3, r3, #20
 8019f3c:	051b      	lsls	r3, r3, #20
 8019f3e:	2a00      	cmp	r2, #0
 8019f40:	d06b      	beq.n	801a01a <_strtod_l+0x8fa>
 8019f42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8019f46:	d868      	bhi.n	801a01a <_strtod_l+0x8fa>
 8019f48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8019f4c:	f67f ae9d 	bls.w	8019c8a <_strtod_l+0x56a>
 8019f50:	4b0a      	ldr	r3, [pc, #40]	@ (8019f7c <_strtod_l+0x85c>)
 8019f52:	4650      	mov	r0, sl
 8019f54:	4659      	mov	r1, fp
 8019f56:	2200      	movs	r2, #0
 8019f58:	f7e6 fb26 	bl	80005a8 <__aeabi_dmul>
 8019f5c:	4b08      	ldr	r3, [pc, #32]	@ (8019f80 <_strtod_l+0x860>)
 8019f5e:	400b      	ands	r3, r1
 8019f60:	4682      	mov	sl, r0
 8019f62:	468b      	mov	fp, r1
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	f47f ae05 	bne.w	8019b74 <_strtod_l+0x454>
 8019f6a:	9a05      	ldr	r2, [sp, #20]
 8019f6c:	2322      	movs	r3, #34	@ 0x22
 8019f6e:	6013      	str	r3, [r2, #0]
 8019f70:	e600      	b.n	8019b74 <_strtod_l+0x454>
 8019f72:	bf00      	nop
 8019f74:	080221b0 	.word	0x080221b0
 8019f78:	fffffc02 	.word	0xfffffc02
 8019f7c:	39500000 	.word	0x39500000
 8019f80:	7ff00000 	.word	0x7ff00000
 8019f84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8019f88:	d165      	bne.n	801a056 <_strtod_l+0x936>
 8019f8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8019f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8019f90:	b35a      	cbz	r2, 8019fea <_strtod_l+0x8ca>
 8019f92:	4a9f      	ldr	r2, [pc, #636]	@ (801a210 <_strtod_l+0xaf0>)
 8019f94:	4293      	cmp	r3, r2
 8019f96:	d12b      	bne.n	8019ff0 <_strtod_l+0x8d0>
 8019f98:	9b08      	ldr	r3, [sp, #32]
 8019f9a:	4651      	mov	r1, sl
 8019f9c:	b303      	cbz	r3, 8019fe0 <_strtod_l+0x8c0>
 8019f9e:	4b9d      	ldr	r3, [pc, #628]	@ (801a214 <_strtod_l+0xaf4>)
 8019fa0:	465a      	mov	r2, fp
 8019fa2:	4013      	ands	r3, r2
 8019fa4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8019fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8019fac:	d81b      	bhi.n	8019fe6 <_strtod_l+0x8c6>
 8019fae:	0d1b      	lsrs	r3, r3, #20
 8019fb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8019fb8:	4299      	cmp	r1, r3
 8019fba:	d119      	bne.n	8019ff0 <_strtod_l+0x8d0>
 8019fbc:	4b96      	ldr	r3, [pc, #600]	@ (801a218 <_strtod_l+0xaf8>)
 8019fbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d102      	bne.n	8019fca <_strtod_l+0x8aa>
 8019fc4:	3101      	adds	r1, #1
 8019fc6:	f43f adca 	beq.w	8019b5e <_strtod_l+0x43e>
 8019fca:	4b92      	ldr	r3, [pc, #584]	@ (801a214 <_strtod_l+0xaf4>)
 8019fcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019fce:	401a      	ands	r2, r3
 8019fd0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8019fd4:	f04f 0a00 	mov.w	sl, #0
 8019fd8:	9b08      	ldr	r3, [sp, #32]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d1b8      	bne.n	8019f50 <_strtod_l+0x830>
 8019fde:	e5c9      	b.n	8019b74 <_strtod_l+0x454>
 8019fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8019fe4:	e7e8      	b.n	8019fb8 <_strtod_l+0x898>
 8019fe6:	4613      	mov	r3, r2
 8019fe8:	e7e6      	b.n	8019fb8 <_strtod_l+0x898>
 8019fea:	ea53 030a 	orrs.w	r3, r3, sl
 8019fee:	d0a1      	beq.n	8019f34 <_strtod_l+0x814>
 8019ff0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019ff2:	b1db      	cbz	r3, 801a02c <_strtod_l+0x90c>
 8019ff4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019ff6:	4213      	tst	r3, r2
 8019ff8:	d0ee      	beq.n	8019fd8 <_strtod_l+0x8b8>
 8019ffa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ffc:	9a08      	ldr	r2, [sp, #32]
 8019ffe:	4650      	mov	r0, sl
 801a000:	4659      	mov	r1, fp
 801a002:	b1bb      	cbz	r3, 801a034 <_strtod_l+0x914>
 801a004:	f7ff fb6c 	bl	80196e0 <sulp>
 801a008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a00c:	ec53 2b10 	vmov	r2, r3, d0
 801a010:	f7e6 f914 	bl	800023c <__adddf3>
 801a014:	4682      	mov	sl, r0
 801a016:	468b      	mov	fp, r1
 801a018:	e7de      	b.n	8019fd8 <_strtod_l+0x8b8>
 801a01a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a01e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a022:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a026:	f04f 3aff 	mov.w	sl, #4294967295
 801a02a:	e7d5      	b.n	8019fd8 <_strtod_l+0x8b8>
 801a02c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a02e:	ea13 0f0a 	tst.w	r3, sl
 801a032:	e7e1      	b.n	8019ff8 <_strtod_l+0x8d8>
 801a034:	f7ff fb54 	bl	80196e0 <sulp>
 801a038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a03c:	ec53 2b10 	vmov	r2, r3, d0
 801a040:	f7e6 f8fa 	bl	8000238 <__aeabi_dsub>
 801a044:	2200      	movs	r2, #0
 801a046:	2300      	movs	r3, #0
 801a048:	4682      	mov	sl, r0
 801a04a:	468b      	mov	fp, r1
 801a04c:	f7e6 fd14 	bl	8000a78 <__aeabi_dcmpeq>
 801a050:	2800      	cmp	r0, #0
 801a052:	d0c1      	beq.n	8019fd8 <_strtod_l+0x8b8>
 801a054:	e619      	b.n	8019c8a <_strtod_l+0x56a>
 801a056:	4641      	mov	r1, r8
 801a058:	4620      	mov	r0, r4
 801a05a:	f003 f96f 	bl	801d33c <__ratio>
 801a05e:	ec57 6b10 	vmov	r6, r7, d0
 801a062:	2200      	movs	r2, #0
 801a064:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a068:	4630      	mov	r0, r6
 801a06a:	4639      	mov	r1, r7
 801a06c:	f7e6 fd18 	bl	8000aa0 <__aeabi_dcmple>
 801a070:	2800      	cmp	r0, #0
 801a072:	d06f      	beq.n	801a154 <_strtod_l+0xa34>
 801a074:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a076:	2b00      	cmp	r3, #0
 801a078:	d17a      	bne.n	801a170 <_strtod_l+0xa50>
 801a07a:	f1ba 0f00 	cmp.w	sl, #0
 801a07e:	d158      	bne.n	801a132 <_strtod_l+0xa12>
 801a080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a082:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a086:	2b00      	cmp	r3, #0
 801a088:	d15a      	bne.n	801a140 <_strtod_l+0xa20>
 801a08a:	4b64      	ldr	r3, [pc, #400]	@ (801a21c <_strtod_l+0xafc>)
 801a08c:	2200      	movs	r2, #0
 801a08e:	4630      	mov	r0, r6
 801a090:	4639      	mov	r1, r7
 801a092:	f7e6 fcfb 	bl	8000a8c <__aeabi_dcmplt>
 801a096:	2800      	cmp	r0, #0
 801a098:	d159      	bne.n	801a14e <_strtod_l+0xa2e>
 801a09a:	4630      	mov	r0, r6
 801a09c:	4639      	mov	r1, r7
 801a09e:	4b60      	ldr	r3, [pc, #384]	@ (801a220 <_strtod_l+0xb00>)
 801a0a0:	2200      	movs	r2, #0
 801a0a2:	f7e6 fa81 	bl	80005a8 <__aeabi_dmul>
 801a0a6:	4606      	mov	r6, r0
 801a0a8:	460f      	mov	r7, r1
 801a0aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801a0ae:	9606      	str	r6, [sp, #24]
 801a0b0:	9307      	str	r3, [sp, #28]
 801a0b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a0b6:	4d57      	ldr	r5, [pc, #348]	@ (801a214 <_strtod_l+0xaf4>)
 801a0b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a0bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a0be:	401d      	ands	r5, r3
 801a0c0:	4b58      	ldr	r3, [pc, #352]	@ (801a224 <_strtod_l+0xb04>)
 801a0c2:	429d      	cmp	r5, r3
 801a0c4:	f040 80b2 	bne.w	801a22c <_strtod_l+0xb0c>
 801a0c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a0ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801a0ce:	ec4b ab10 	vmov	d0, sl, fp
 801a0d2:	f003 f86b 	bl	801d1ac <__ulp>
 801a0d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a0da:	ec51 0b10 	vmov	r0, r1, d0
 801a0de:	f7e6 fa63 	bl	80005a8 <__aeabi_dmul>
 801a0e2:	4652      	mov	r2, sl
 801a0e4:	465b      	mov	r3, fp
 801a0e6:	f7e6 f8a9 	bl	800023c <__adddf3>
 801a0ea:	460b      	mov	r3, r1
 801a0ec:	4949      	ldr	r1, [pc, #292]	@ (801a214 <_strtod_l+0xaf4>)
 801a0ee:	4a4e      	ldr	r2, [pc, #312]	@ (801a228 <_strtod_l+0xb08>)
 801a0f0:	4019      	ands	r1, r3
 801a0f2:	4291      	cmp	r1, r2
 801a0f4:	4682      	mov	sl, r0
 801a0f6:	d942      	bls.n	801a17e <_strtod_l+0xa5e>
 801a0f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a0fa:	4b47      	ldr	r3, [pc, #284]	@ (801a218 <_strtod_l+0xaf8>)
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	d103      	bne.n	801a108 <_strtod_l+0x9e8>
 801a100:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a102:	3301      	adds	r3, #1
 801a104:	f43f ad2b 	beq.w	8019b5e <_strtod_l+0x43e>
 801a108:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a218 <_strtod_l+0xaf8>
 801a10c:	f04f 3aff 	mov.w	sl, #4294967295
 801a110:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a112:	9805      	ldr	r0, [sp, #20]
 801a114:	f002 fd16 	bl	801cb44 <_Bfree>
 801a118:	9805      	ldr	r0, [sp, #20]
 801a11a:	4649      	mov	r1, r9
 801a11c:	f002 fd12 	bl	801cb44 <_Bfree>
 801a120:	9805      	ldr	r0, [sp, #20]
 801a122:	4641      	mov	r1, r8
 801a124:	f002 fd0e 	bl	801cb44 <_Bfree>
 801a128:	9805      	ldr	r0, [sp, #20]
 801a12a:	4621      	mov	r1, r4
 801a12c:	f002 fd0a 	bl	801cb44 <_Bfree>
 801a130:	e618      	b.n	8019d64 <_strtod_l+0x644>
 801a132:	f1ba 0f01 	cmp.w	sl, #1
 801a136:	d103      	bne.n	801a140 <_strtod_l+0xa20>
 801a138:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	f43f ada5 	beq.w	8019c8a <_strtod_l+0x56a>
 801a140:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a1f0 <_strtod_l+0xad0>
 801a144:	4f35      	ldr	r7, [pc, #212]	@ (801a21c <_strtod_l+0xafc>)
 801a146:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a14a:	2600      	movs	r6, #0
 801a14c:	e7b1      	b.n	801a0b2 <_strtod_l+0x992>
 801a14e:	4f34      	ldr	r7, [pc, #208]	@ (801a220 <_strtod_l+0xb00>)
 801a150:	2600      	movs	r6, #0
 801a152:	e7aa      	b.n	801a0aa <_strtod_l+0x98a>
 801a154:	4b32      	ldr	r3, [pc, #200]	@ (801a220 <_strtod_l+0xb00>)
 801a156:	4630      	mov	r0, r6
 801a158:	4639      	mov	r1, r7
 801a15a:	2200      	movs	r2, #0
 801a15c:	f7e6 fa24 	bl	80005a8 <__aeabi_dmul>
 801a160:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a162:	4606      	mov	r6, r0
 801a164:	460f      	mov	r7, r1
 801a166:	2b00      	cmp	r3, #0
 801a168:	d09f      	beq.n	801a0aa <_strtod_l+0x98a>
 801a16a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a16e:	e7a0      	b.n	801a0b2 <_strtod_l+0x992>
 801a170:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a1f8 <_strtod_l+0xad8>
 801a174:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a178:	ec57 6b17 	vmov	r6, r7, d7
 801a17c:	e799      	b.n	801a0b2 <_strtod_l+0x992>
 801a17e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a182:	9b08      	ldr	r3, [sp, #32]
 801a184:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d1c1      	bne.n	801a110 <_strtod_l+0x9f0>
 801a18c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a190:	0d1b      	lsrs	r3, r3, #20
 801a192:	051b      	lsls	r3, r3, #20
 801a194:	429d      	cmp	r5, r3
 801a196:	d1bb      	bne.n	801a110 <_strtod_l+0x9f0>
 801a198:	4630      	mov	r0, r6
 801a19a:	4639      	mov	r1, r7
 801a19c:	f7e6 fd64 	bl	8000c68 <__aeabi_d2lz>
 801a1a0:	f7e6 f9d4 	bl	800054c <__aeabi_l2d>
 801a1a4:	4602      	mov	r2, r0
 801a1a6:	460b      	mov	r3, r1
 801a1a8:	4630      	mov	r0, r6
 801a1aa:	4639      	mov	r1, r7
 801a1ac:	f7e6 f844 	bl	8000238 <__aeabi_dsub>
 801a1b0:	460b      	mov	r3, r1
 801a1b2:	4602      	mov	r2, r0
 801a1b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a1b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a1bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a1be:	ea46 060a 	orr.w	r6, r6, sl
 801a1c2:	431e      	orrs	r6, r3
 801a1c4:	d06f      	beq.n	801a2a6 <_strtod_l+0xb86>
 801a1c6:	a30e      	add	r3, pc, #56	@ (adr r3, 801a200 <_strtod_l+0xae0>)
 801a1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1cc:	f7e6 fc5e 	bl	8000a8c <__aeabi_dcmplt>
 801a1d0:	2800      	cmp	r0, #0
 801a1d2:	f47f accf 	bne.w	8019b74 <_strtod_l+0x454>
 801a1d6:	a30c      	add	r3, pc, #48	@ (adr r3, 801a208 <_strtod_l+0xae8>)
 801a1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a1e0:	f7e6 fc72 	bl	8000ac8 <__aeabi_dcmpgt>
 801a1e4:	2800      	cmp	r0, #0
 801a1e6:	d093      	beq.n	801a110 <_strtod_l+0x9f0>
 801a1e8:	e4c4      	b.n	8019b74 <_strtod_l+0x454>
 801a1ea:	bf00      	nop
 801a1ec:	f3af 8000 	nop.w
 801a1f0:	00000000 	.word	0x00000000
 801a1f4:	bff00000 	.word	0xbff00000
 801a1f8:	00000000 	.word	0x00000000
 801a1fc:	3ff00000 	.word	0x3ff00000
 801a200:	94a03595 	.word	0x94a03595
 801a204:	3fdfffff 	.word	0x3fdfffff
 801a208:	35afe535 	.word	0x35afe535
 801a20c:	3fe00000 	.word	0x3fe00000
 801a210:	000fffff 	.word	0x000fffff
 801a214:	7ff00000 	.word	0x7ff00000
 801a218:	7fefffff 	.word	0x7fefffff
 801a21c:	3ff00000 	.word	0x3ff00000
 801a220:	3fe00000 	.word	0x3fe00000
 801a224:	7fe00000 	.word	0x7fe00000
 801a228:	7c9fffff 	.word	0x7c9fffff
 801a22c:	9b08      	ldr	r3, [sp, #32]
 801a22e:	b323      	cbz	r3, 801a27a <_strtod_l+0xb5a>
 801a230:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a234:	d821      	bhi.n	801a27a <_strtod_l+0xb5a>
 801a236:	a328      	add	r3, pc, #160	@ (adr r3, 801a2d8 <_strtod_l+0xbb8>)
 801a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a23c:	4630      	mov	r0, r6
 801a23e:	4639      	mov	r1, r7
 801a240:	f7e6 fc2e 	bl	8000aa0 <__aeabi_dcmple>
 801a244:	b1a0      	cbz	r0, 801a270 <_strtod_l+0xb50>
 801a246:	4639      	mov	r1, r7
 801a248:	4630      	mov	r0, r6
 801a24a:	f7e6 fc85 	bl	8000b58 <__aeabi_d2uiz>
 801a24e:	2801      	cmp	r0, #1
 801a250:	bf38      	it	cc
 801a252:	2001      	movcc	r0, #1
 801a254:	f7e6 f92e 	bl	80004b4 <__aeabi_ui2d>
 801a258:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a25a:	4606      	mov	r6, r0
 801a25c:	460f      	mov	r7, r1
 801a25e:	b9fb      	cbnz	r3, 801a2a0 <_strtod_l+0xb80>
 801a260:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a264:	9014      	str	r0, [sp, #80]	@ 0x50
 801a266:	9315      	str	r3, [sp, #84]	@ 0x54
 801a268:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a26c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a270:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a272:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a276:	1b5b      	subs	r3, r3, r5
 801a278:	9311      	str	r3, [sp, #68]	@ 0x44
 801a27a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a27e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a282:	f002 ff93 	bl	801d1ac <__ulp>
 801a286:	4650      	mov	r0, sl
 801a288:	ec53 2b10 	vmov	r2, r3, d0
 801a28c:	4659      	mov	r1, fp
 801a28e:	f7e6 f98b 	bl	80005a8 <__aeabi_dmul>
 801a292:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a296:	f7e5 ffd1 	bl	800023c <__adddf3>
 801a29a:	4682      	mov	sl, r0
 801a29c:	468b      	mov	fp, r1
 801a29e:	e770      	b.n	801a182 <_strtod_l+0xa62>
 801a2a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a2a4:	e7e0      	b.n	801a268 <_strtod_l+0xb48>
 801a2a6:	a30e      	add	r3, pc, #56	@ (adr r3, 801a2e0 <_strtod_l+0xbc0>)
 801a2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2ac:	f7e6 fbee 	bl	8000a8c <__aeabi_dcmplt>
 801a2b0:	e798      	b.n	801a1e4 <_strtod_l+0xac4>
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a2b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a2b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a2ba:	6013      	str	r3, [r2, #0]
 801a2bc:	f7ff ba6d 	b.w	801979a <_strtod_l+0x7a>
 801a2c0:	2a65      	cmp	r2, #101	@ 0x65
 801a2c2:	f43f ab66 	beq.w	8019992 <_strtod_l+0x272>
 801a2c6:	2a45      	cmp	r2, #69	@ 0x45
 801a2c8:	f43f ab63 	beq.w	8019992 <_strtod_l+0x272>
 801a2cc:	2301      	movs	r3, #1
 801a2ce:	f7ff bb9e 	b.w	8019a0e <_strtod_l+0x2ee>
 801a2d2:	bf00      	nop
 801a2d4:	f3af 8000 	nop.w
 801a2d8:	ffc00000 	.word	0xffc00000
 801a2dc:	41dfffff 	.word	0x41dfffff
 801a2e0:	94a03595 	.word	0x94a03595
 801a2e4:	3fcfffff 	.word	0x3fcfffff

0801a2e8 <_strtod_r>:
 801a2e8:	4b01      	ldr	r3, [pc, #4]	@ (801a2f0 <_strtod_r+0x8>)
 801a2ea:	f7ff ba19 	b.w	8019720 <_strtod_l>
 801a2ee:	bf00      	nop
 801a2f0:	20000150 	.word	0x20000150

0801a2f4 <strtof>:
 801a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801a3b8 <strtof+0xc4>
 801a2fc:	4b29      	ldr	r3, [pc, #164]	@ (801a3a4 <strtof+0xb0>)
 801a2fe:	460a      	mov	r2, r1
 801a300:	ed2d 8b02 	vpush	{d8}
 801a304:	4601      	mov	r1, r0
 801a306:	f8d8 0000 	ldr.w	r0, [r8]
 801a30a:	f7ff fa09 	bl	8019720 <_strtod_l>
 801a30e:	ec55 4b10 	vmov	r4, r5, d0
 801a312:	4622      	mov	r2, r4
 801a314:	462b      	mov	r3, r5
 801a316:	4620      	mov	r0, r4
 801a318:	4629      	mov	r1, r5
 801a31a:	f7e6 fbdf 	bl	8000adc <__aeabi_dcmpun>
 801a31e:	b190      	cbz	r0, 801a346 <strtof+0x52>
 801a320:	2d00      	cmp	r5, #0
 801a322:	4821      	ldr	r0, [pc, #132]	@ (801a3a8 <strtof+0xb4>)
 801a324:	da09      	bge.n	801a33a <strtof+0x46>
 801a326:	f001 f9c7 	bl	801b6b8 <nanf>
 801a32a:	eeb1 8a40 	vneg.f32	s16, s0
 801a32e:	eeb0 0a48 	vmov.f32	s0, s16
 801a332:	ecbd 8b02 	vpop	{d8}
 801a336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a33a:	ecbd 8b02 	vpop	{d8}
 801a33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a342:	f001 b9b9 	b.w	801b6b8 <nanf>
 801a346:	4620      	mov	r0, r4
 801a348:	4629      	mov	r1, r5
 801a34a:	f7e6 fc25 	bl	8000b98 <__aeabi_d2f>
 801a34e:	ee08 0a10 	vmov	s16, r0
 801a352:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801a3ac <strtof+0xb8>
 801a356:	eeb0 7ac8 	vabs.f32	s14, s16
 801a35a:	eeb4 7a67 	vcmp.f32	s14, s15
 801a35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a362:	dd11      	ble.n	801a388 <strtof+0x94>
 801a364:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801a368:	4b11      	ldr	r3, [pc, #68]	@ (801a3b0 <strtof+0xbc>)
 801a36a:	f04f 32ff 	mov.w	r2, #4294967295
 801a36e:	4620      	mov	r0, r4
 801a370:	4639      	mov	r1, r7
 801a372:	f7e6 fbb3 	bl	8000adc <__aeabi_dcmpun>
 801a376:	b980      	cbnz	r0, 801a39a <strtof+0xa6>
 801a378:	4b0d      	ldr	r3, [pc, #52]	@ (801a3b0 <strtof+0xbc>)
 801a37a:	f04f 32ff 	mov.w	r2, #4294967295
 801a37e:	4620      	mov	r0, r4
 801a380:	4639      	mov	r1, r7
 801a382:	f7e6 fb8d 	bl	8000aa0 <__aeabi_dcmple>
 801a386:	b940      	cbnz	r0, 801a39a <strtof+0xa6>
 801a388:	ee18 3a10 	vmov	r3, s16
 801a38c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a390:	d1cd      	bne.n	801a32e <strtof+0x3a>
 801a392:	4b08      	ldr	r3, [pc, #32]	@ (801a3b4 <strtof+0xc0>)
 801a394:	402b      	ands	r3, r5
 801a396:	2b00      	cmp	r3, #0
 801a398:	d0c9      	beq.n	801a32e <strtof+0x3a>
 801a39a:	f8d8 3000 	ldr.w	r3, [r8]
 801a39e:	2222      	movs	r2, #34	@ 0x22
 801a3a0:	601a      	str	r2, [r3, #0]
 801a3a2:	e7c4      	b.n	801a32e <strtof+0x3a>
 801a3a4:	20000150 	.word	0x20000150
 801a3a8:	080223c6 	.word	0x080223c6
 801a3ac:	7f7fffff 	.word	0x7f7fffff
 801a3b0:	7fefffff 	.word	0x7fefffff
 801a3b4:	7ff00000 	.word	0x7ff00000
 801a3b8:	200002bc 	.word	0x200002bc

0801a3bc <_strtol_l.constprop.0>:
 801a3bc:	2b24      	cmp	r3, #36	@ 0x24
 801a3be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3c2:	4686      	mov	lr, r0
 801a3c4:	4690      	mov	r8, r2
 801a3c6:	d801      	bhi.n	801a3cc <_strtol_l.constprop.0+0x10>
 801a3c8:	2b01      	cmp	r3, #1
 801a3ca:	d106      	bne.n	801a3da <_strtol_l.constprop.0+0x1e>
 801a3cc:	f001 f928 	bl	801b620 <__errno>
 801a3d0:	2316      	movs	r3, #22
 801a3d2:	6003      	str	r3, [r0, #0]
 801a3d4:	2000      	movs	r0, #0
 801a3d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3da:	4834      	ldr	r0, [pc, #208]	@ (801a4ac <_strtol_l.constprop.0+0xf0>)
 801a3dc:	460d      	mov	r5, r1
 801a3de:	462a      	mov	r2, r5
 801a3e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a3e4:	5d06      	ldrb	r6, [r0, r4]
 801a3e6:	f016 0608 	ands.w	r6, r6, #8
 801a3ea:	d1f8      	bne.n	801a3de <_strtol_l.constprop.0+0x22>
 801a3ec:	2c2d      	cmp	r4, #45	@ 0x2d
 801a3ee:	d12d      	bne.n	801a44c <_strtol_l.constprop.0+0x90>
 801a3f0:	782c      	ldrb	r4, [r5, #0]
 801a3f2:	2601      	movs	r6, #1
 801a3f4:	1c95      	adds	r5, r2, #2
 801a3f6:	f033 0210 	bics.w	r2, r3, #16
 801a3fa:	d109      	bne.n	801a410 <_strtol_l.constprop.0+0x54>
 801a3fc:	2c30      	cmp	r4, #48	@ 0x30
 801a3fe:	d12a      	bne.n	801a456 <_strtol_l.constprop.0+0x9a>
 801a400:	782a      	ldrb	r2, [r5, #0]
 801a402:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a406:	2a58      	cmp	r2, #88	@ 0x58
 801a408:	d125      	bne.n	801a456 <_strtol_l.constprop.0+0x9a>
 801a40a:	786c      	ldrb	r4, [r5, #1]
 801a40c:	2310      	movs	r3, #16
 801a40e:	3502      	adds	r5, #2
 801a410:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a414:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a418:	2200      	movs	r2, #0
 801a41a:	fbbc f9f3 	udiv	r9, ip, r3
 801a41e:	4610      	mov	r0, r2
 801a420:	fb03 ca19 	mls	sl, r3, r9, ip
 801a424:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a428:	2f09      	cmp	r7, #9
 801a42a:	d81b      	bhi.n	801a464 <_strtol_l.constprop.0+0xa8>
 801a42c:	463c      	mov	r4, r7
 801a42e:	42a3      	cmp	r3, r4
 801a430:	dd27      	ble.n	801a482 <_strtol_l.constprop.0+0xc6>
 801a432:	1c57      	adds	r7, r2, #1
 801a434:	d007      	beq.n	801a446 <_strtol_l.constprop.0+0x8a>
 801a436:	4581      	cmp	r9, r0
 801a438:	d320      	bcc.n	801a47c <_strtol_l.constprop.0+0xc0>
 801a43a:	d101      	bne.n	801a440 <_strtol_l.constprop.0+0x84>
 801a43c:	45a2      	cmp	sl, r4
 801a43e:	db1d      	blt.n	801a47c <_strtol_l.constprop.0+0xc0>
 801a440:	fb00 4003 	mla	r0, r0, r3, r4
 801a444:	2201      	movs	r2, #1
 801a446:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a44a:	e7eb      	b.n	801a424 <_strtol_l.constprop.0+0x68>
 801a44c:	2c2b      	cmp	r4, #43	@ 0x2b
 801a44e:	bf04      	itt	eq
 801a450:	782c      	ldrbeq	r4, [r5, #0]
 801a452:	1c95      	addeq	r5, r2, #2
 801a454:	e7cf      	b.n	801a3f6 <_strtol_l.constprop.0+0x3a>
 801a456:	2b00      	cmp	r3, #0
 801a458:	d1da      	bne.n	801a410 <_strtol_l.constprop.0+0x54>
 801a45a:	2c30      	cmp	r4, #48	@ 0x30
 801a45c:	bf0c      	ite	eq
 801a45e:	2308      	moveq	r3, #8
 801a460:	230a      	movne	r3, #10
 801a462:	e7d5      	b.n	801a410 <_strtol_l.constprop.0+0x54>
 801a464:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a468:	2f19      	cmp	r7, #25
 801a46a:	d801      	bhi.n	801a470 <_strtol_l.constprop.0+0xb4>
 801a46c:	3c37      	subs	r4, #55	@ 0x37
 801a46e:	e7de      	b.n	801a42e <_strtol_l.constprop.0+0x72>
 801a470:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a474:	2f19      	cmp	r7, #25
 801a476:	d804      	bhi.n	801a482 <_strtol_l.constprop.0+0xc6>
 801a478:	3c57      	subs	r4, #87	@ 0x57
 801a47a:	e7d8      	b.n	801a42e <_strtol_l.constprop.0+0x72>
 801a47c:	f04f 32ff 	mov.w	r2, #4294967295
 801a480:	e7e1      	b.n	801a446 <_strtol_l.constprop.0+0x8a>
 801a482:	1c53      	adds	r3, r2, #1
 801a484:	d108      	bne.n	801a498 <_strtol_l.constprop.0+0xdc>
 801a486:	2322      	movs	r3, #34	@ 0x22
 801a488:	f8ce 3000 	str.w	r3, [lr]
 801a48c:	4660      	mov	r0, ip
 801a48e:	f1b8 0f00 	cmp.w	r8, #0
 801a492:	d0a0      	beq.n	801a3d6 <_strtol_l.constprop.0+0x1a>
 801a494:	1e69      	subs	r1, r5, #1
 801a496:	e006      	b.n	801a4a6 <_strtol_l.constprop.0+0xea>
 801a498:	b106      	cbz	r6, 801a49c <_strtol_l.constprop.0+0xe0>
 801a49a:	4240      	negs	r0, r0
 801a49c:	f1b8 0f00 	cmp.w	r8, #0
 801a4a0:	d099      	beq.n	801a3d6 <_strtol_l.constprop.0+0x1a>
 801a4a2:	2a00      	cmp	r2, #0
 801a4a4:	d1f6      	bne.n	801a494 <_strtol_l.constprop.0+0xd8>
 801a4a6:	f8c8 1000 	str.w	r1, [r8]
 801a4aa:	e794      	b.n	801a3d6 <_strtol_l.constprop.0+0x1a>
 801a4ac:	080221d9 	.word	0x080221d9

0801a4b0 <_strtol_r>:
 801a4b0:	f7ff bf84 	b.w	801a3bc <_strtol_l.constprop.0>

0801a4b4 <strtol>:
 801a4b4:	4613      	mov	r3, r2
 801a4b6:	460a      	mov	r2, r1
 801a4b8:	4601      	mov	r1, r0
 801a4ba:	4802      	ldr	r0, [pc, #8]	@ (801a4c4 <strtol+0x10>)
 801a4bc:	6800      	ldr	r0, [r0, #0]
 801a4be:	f7ff bf7d 	b.w	801a3bc <_strtol_l.constprop.0>
 801a4c2:	bf00      	nop
 801a4c4:	200002bc 	.word	0x200002bc

0801a4c8 <__cvt>:
 801a4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a4cc:	ec57 6b10 	vmov	r6, r7, d0
 801a4d0:	2f00      	cmp	r7, #0
 801a4d2:	460c      	mov	r4, r1
 801a4d4:	4619      	mov	r1, r3
 801a4d6:	463b      	mov	r3, r7
 801a4d8:	bfbb      	ittet	lt
 801a4da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a4de:	461f      	movlt	r7, r3
 801a4e0:	2300      	movge	r3, #0
 801a4e2:	232d      	movlt	r3, #45	@ 0x2d
 801a4e4:	700b      	strb	r3, [r1, #0]
 801a4e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a4e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a4ec:	4691      	mov	r9, r2
 801a4ee:	f023 0820 	bic.w	r8, r3, #32
 801a4f2:	bfbc      	itt	lt
 801a4f4:	4632      	movlt	r2, r6
 801a4f6:	4616      	movlt	r6, r2
 801a4f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a4fc:	d005      	beq.n	801a50a <__cvt+0x42>
 801a4fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a502:	d100      	bne.n	801a506 <__cvt+0x3e>
 801a504:	3401      	adds	r4, #1
 801a506:	2102      	movs	r1, #2
 801a508:	e000      	b.n	801a50c <__cvt+0x44>
 801a50a:	2103      	movs	r1, #3
 801a50c:	ab03      	add	r3, sp, #12
 801a50e:	9301      	str	r3, [sp, #4]
 801a510:	ab02      	add	r3, sp, #8
 801a512:	9300      	str	r3, [sp, #0]
 801a514:	ec47 6b10 	vmov	d0, r6, r7
 801a518:	4653      	mov	r3, sl
 801a51a:	4622      	mov	r2, r4
 801a51c:	f001 f978 	bl	801b810 <_dtoa_r>
 801a520:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a524:	4605      	mov	r5, r0
 801a526:	d119      	bne.n	801a55c <__cvt+0x94>
 801a528:	f019 0f01 	tst.w	r9, #1
 801a52c:	d00e      	beq.n	801a54c <__cvt+0x84>
 801a52e:	eb00 0904 	add.w	r9, r0, r4
 801a532:	2200      	movs	r2, #0
 801a534:	2300      	movs	r3, #0
 801a536:	4630      	mov	r0, r6
 801a538:	4639      	mov	r1, r7
 801a53a:	f7e6 fa9d 	bl	8000a78 <__aeabi_dcmpeq>
 801a53e:	b108      	cbz	r0, 801a544 <__cvt+0x7c>
 801a540:	f8cd 900c 	str.w	r9, [sp, #12]
 801a544:	2230      	movs	r2, #48	@ 0x30
 801a546:	9b03      	ldr	r3, [sp, #12]
 801a548:	454b      	cmp	r3, r9
 801a54a:	d31e      	bcc.n	801a58a <__cvt+0xc2>
 801a54c:	9b03      	ldr	r3, [sp, #12]
 801a54e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a550:	1b5b      	subs	r3, r3, r5
 801a552:	4628      	mov	r0, r5
 801a554:	6013      	str	r3, [r2, #0]
 801a556:	b004      	add	sp, #16
 801a558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a55c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a560:	eb00 0904 	add.w	r9, r0, r4
 801a564:	d1e5      	bne.n	801a532 <__cvt+0x6a>
 801a566:	7803      	ldrb	r3, [r0, #0]
 801a568:	2b30      	cmp	r3, #48	@ 0x30
 801a56a:	d10a      	bne.n	801a582 <__cvt+0xba>
 801a56c:	2200      	movs	r2, #0
 801a56e:	2300      	movs	r3, #0
 801a570:	4630      	mov	r0, r6
 801a572:	4639      	mov	r1, r7
 801a574:	f7e6 fa80 	bl	8000a78 <__aeabi_dcmpeq>
 801a578:	b918      	cbnz	r0, 801a582 <__cvt+0xba>
 801a57a:	f1c4 0401 	rsb	r4, r4, #1
 801a57e:	f8ca 4000 	str.w	r4, [sl]
 801a582:	f8da 3000 	ldr.w	r3, [sl]
 801a586:	4499      	add	r9, r3
 801a588:	e7d3      	b.n	801a532 <__cvt+0x6a>
 801a58a:	1c59      	adds	r1, r3, #1
 801a58c:	9103      	str	r1, [sp, #12]
 801a58e:	701a      	strb	r2, [r3, #0]
 801a590:	e7d9      	b.n	801a546 <__cvt+0x7e>

0801a592 <__exponent>:
 801a592:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a594:	2900      	cmp	r1, #0
 801a596:	bfba      	itte	lt
 801a598:	4249      	neglt	r1, r1
 801a59a:	232d      	movlt	r3, #45	@ 0x2d
 801a59c:	232b      	movge	r3, #43	@ 0x2b
 801a59e:	2909      	cmp	r1, #9
 801a5a0:	7002      	strb	r2, [r0, #0]
 801a5a2:	7043      	strb	r3, [r0, #1]
 801a5a4:	dd29      	ble.n	801a5fa <__exponent+0x68>
 801a5a6:	f10d 0307 	add.w	r3, sp, #7
 801a5aa:	461d      	mov	r5, r3
 801a5ac:	270a      	movs	r7, #10
 801a5ae:	461a      	mov	r2, r3
 801a5b0:	fbb1 f6f7 	udiv	r6, r1, r7
 801a5b4:	fb07 1416 	mls	r4, r7, r6, r1
 801a5b8:	3430      	adds	r4, #48	@ 0x30
 801a5ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a5be:	460c      	mov	r4, r1
 801a5c0:	2c63      	cmp	r4, #99	@ 0x63
 801a5c2:	f103 33ff 	add.w	r3, r3, #4294967295
 801a5c6:	4631      	mov	r1, r6
 801a5c8:	dcf1      	bgt.n	801a5ae <__exponent+0x1c>
 801a5ca:	3130      	adds	r1, #48	@ 0x30
 801a5cc:	1e94      	subs	r4, r2, #2
 801a5ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a5d2:	1c41      	adds	r1, r0, #1
 801a5d4:	4623      	mov	r3, r4
 801a5d6:	42ab      	cmp	r3, r5
 801a5d8:	d30a      	bcc.n	801a5f0 <__exponent+0x5e>
 801a5da:	f10d 0309 	add.w	r3, sp, #9
 801a5de:	1a9b      	subs	r3, r3, r2
 801a5e0:	42ac      	cmp	r4, r5
 801a5e2:	bf88      	it	hi
 801a5e4:	2300      	movhi	r3, #0
 801a5e6:	3302      	adds	r3, #2
 801a5e8:	4403      	add	r3, r0
 801a5ea:	1a18      	subs	r0, r3, r0
 801a5ec:	b003      	add	sp, #12
 801a5ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a5f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a5f8:	e7ed      	b.n	801a5d6 <__exponent+0x44>
 801a5fa:	2330      	movs	r3, #48	@ 0x30
 801a5fc:	3130      	adds	r1, #48	@ 0x30
 801a5fe:	7083      	strb	r3, [r0, #2]
 801a600:	70c1      	strb	r1, [r0, #3]
 801a602:	1d03      	adds	r3, r0, #4
 801a604:	e7f1      	b.n	801a5ea <__exponent+0x58>
	...

0801a608 <_printf_float>:
 801a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a60c:	b08d      	sub	sp, #52	@ 0x34
 801a60e:	460c      	mov	r4, r1
 801a610:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a614:	4616      	mov	r6, r2
 801a616:	461f      	mov	r7, r3
 801a618:	4605      	mov	r5, r0
 801a61a:	f000 ffa7 	bl	801b56c <_localeconv_r>
 801a61e:	6803      	ldr	r3, [r0, #0]
 801a620:	9304      	str	r3, [sp, #16]
 801a622:	4618      	mov	r0, r3
 801a624:	f7e5 fdfc 	bl	8000220 <strlen>
 801a628:	2300      	movs	r3, #0
 801a62a:	930a      	str	r3, [sp, #40]	@ 0x28
 801a62c:	f8d8 3000 	ldr.w	r3, [r8]
 801a630:	9005      	str	r0, [sp, #20]
 801a632:	3307      	adds	r3, #7
 801a634:	f023 0307 	bic.w	r3, r3, #7
 801a638:	f103 0208 	add.w	r2, r3, #8
 801a63c:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a640:	f8d4 b000 	ldr.w	fp, [r4]
 801a644:	f8c8 2000 	str.w	r2, [r8]
 801a648:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a64c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a650:	9307      	str	r3, [sp, #28]
 801a652:	f8cd 8018 	str.w	r8, [sp, #24]
 801a656:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a65a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a65e:	4b9c      	ldr	r3, [pc, #624]	@ (801a8d0 <_printf_float+0x2c8>)
 801a660:	f04f 32ff 	mov.w	r2, #4294967295
 801a664:	f7e6 fa3a 	bl	8000adc <__aeabi_dcmpun>
 801a668:	bb70      	cbnz	r0, 801a6c8 <_printf_float+0xc0>
 801a66a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a66e:	4b98      	ldr	r3, [pc, #608]	@ (801a8d0 <_printf_float+0x2c8>)
 801a670:	f04f 32ff 	mov.w	r2, #4294967295
 801a674:	f7e6 fa14 	bl	8000aa0 <__aeabi_dcmple>
 801a678:	bb30      	cbnz	r0, 801a6c8 <_printf_float+0xc0>
 801a67a:	2200      	movs	r2, #0
 801a67c:	2300      	movs	r3, #0
 801a67e:	4640      	mov	r0, r8
 801a680:	4649      	mov	r1, r9
 801a682:	f7e6 fa03 	bl	8000a8c <__aeabi_dcmplt>
 801a686:	b110      	cbz	r0, 801a68e <_printf_float+0x86>
 801a688:	232d      	movs	r3, #45	@ 0x2d
 801a68a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a68e:	4a91      	ldr	r2, [pc, #580]	@ (801a8d4 <_printf_float+0x2cc>)
 801a690:	4b91      	ldr	r3, [pc, #580]	@ (801a8d8 <_printf_float+0x2d0>)
 801a692:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a696:	bf94      	ite	ls
 801a698:	4690      	movls	r8, r2
 801a69a:	4698      	movhi	r8, r3
 801a69c:	2303      	movs	r3, #3
 801a69e:	6123      	str	r3, [r4, #16]
 801a6a0:	f02b 0304 	bic.w	r3, fp, #4
 801a6a4:	6023      	str	r3, [r4, #0]
 801a6a6:	f04f 0900 	mov.w	r9, #0
 801a6aa:	9700      	str	r7, [sp, #0]
 801a6ac:	4633      	mov	r3, r6
 801a6ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a6b0:	4621      	mov	r1, r4
 801a6b2:	4628      	mov	r0, r5
 801a6b4:	f000 f9d2 	bl	801aa5c <_printf_common>
 801a6b8:	3001      	adds	r0, #1
 801a6ba:	f040 808d 	bne.w	801a7d8 <_printf_float+0x1d0>
 801a6be:	f04f 30ff 	mov.w	r0, #4294967295
 801a6c2:	b00d      	add	sp, #52	@ 0x34
 801a6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6c8:	4642      	mov	r2, r8
 801a6ca:	464b      	mov	r3, r9
 801a6cc:	4640      	mov	r0, r8
 801a6ce:	4649      	mov	r1, r9
 801a6d0:	f7e6 fa04 	bl	8000adc <__aeabi_dcmpun>
 801a6d4:	b140      	cbz	r0, 801a6e8 <_printf_float+0xe0>
 801a6d6:	464b      	mov	r3, r9
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	bfbc      	itt	lt
 801a6dc:	232d      	movlt	r3, #45	@ 0x2d
 801a6de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a6e2:	4a7e      	ldr	r2, [pc, #504]	@ (801a8dc <_printf_float+0x2d4>)
 801a6e4:	4b7e      	ldr	r3, [pc, #504]	@ (801a8e0 <_printf_float+0x2d8>)
 801a6e6:	e7d4      	b.n	801a692 <_printf_float+0x8a>
 801a6e8:	6863      	ldr	r3, [r4, #4]
 801a6ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a6ee:	9206      	str	r2, [sp, #24]
 801a6f0:	1c5a      	adds	r2, r3, #1
 801a6f2:	d13b      	bne.n	801a76c <_printf_float+0x164>
 801a6f4:	2306      	movs	r3, #6
 801a6f6:	6063      	str	r3, [r4, #4]
 801a6f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a6fc:	2300      	movs	r3, #0
 801a6fe:	6022      	str	r2, [r4, #0]
 801a700:	9303      	str	r3, [sp, #12]
 801a702:	ab0a      	add	r3, sp, #40	@ 0x28
 801a704:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a708:	ab09      	add	r3, sp, #36	@ 0x24
 801a70a:	9300      	str	r3, [sp, #0]
 801a70c:	6861      	ldr	r1, [r4, #4]
 801a70e:	ec49 8b10 	vmov	d0, r8, r9
 801a712:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a716:	4628      	mov	r0, r5
 801a718:	f7ff fed6 	bl	801a4c8 <__cvt>
 801a71c:	9b06      	ldr	r3, [sp, #24]
 801a71e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a720:	2b47      	cmp	r3, #71	@ 0x47
 801a722:	4680      	mov	r8, r0
 801a724:	d129      	bne.n	801a77a <_printf_float+0x172>
 801a726:	1cc8      	adds	r0, r1, #3
 801a728:	db02      	blt.n	801a730 <_printf_float+0x128>
 801a72a:	6863      	ldr	r3, [r4, #4]
 801a72c:	4299      	cmp	r1, r3
 801a72e:	dd41      	ble.n	801a7b4 <_printf_float+0x1ac>
 801a730:	f1aa 0a02 	sub.w	sl, sl, #2
 801a734:	fa5f fa8a 	uxtb.w	sl, sl
 801a738:	3901      	subs	r1, #1
 801a73a:	4652      	mov	r2, sl
 801a73c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a740:	9109      	str	r1, [sp, #36]	@ 0x24
 801a742:	f7ff ff26 	bl	801a592 <__exponent>
 801a746:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a748:	1813      	adds	r3, r2, r0
 801a74a:	2a01      	cmp	r2, #1
 801a74c:	4681      	mov	r9, r0
 801a74e:	6123      	str	r3, [r4, #16]
 801a750:	dc02      	bgt.n	801a758 <_printf_float+0x150>
 801a752:	6822      	ldr	r2, [r4, #0]
 801a754:	07d2      	lsls	r2, r2, #31
 801a756:	d501      	bpl.n	801a75c <_printf_float+0x154>
 801a758:	3301      	adds	r3, #1
 801a75a:	6123      	str	r3, [r4, #16]
 801a75c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a760:	2b00      	cmp	r3, #0
 801a762:	d0a2      	beq.n	801a6aa <_printf_float+0xa2>
 801a764:	232d      	movs	r3, #45	@ 0x2d
 801a766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a76a:	e79e      	b.n	801a6aa <_printf_float+0xa2>
 801a76c:	9a06      	ldr	r2, [sp, #24]
 801a76e:	2a47      	cmp	r2, #71	@ 0x47
 801a770:	d1c2      	bne.n	801a6f8 <_printf_float+0xf0>
 801a772:	2b00      	cmp	r3, #0
 801a774:	d1c0      	bne.n	801a6f8 <_printf_float+0xf0>
 801a776:	2301      	movs	r3, #1
 801a778:	e7bd      	b.n	801a6f6 <_printf_float+0xee>
 801a77a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a77e:	d9db      	bls.n	801a738 <_printf_float+0x130>
 801a780:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a784:	d118      	bne.n	801a7b8 <_printf_float+0x1b0>
 801a786:	2900      	cmp	r1, #0
 801a788:	6863      	ldr	r3, [r4, #4]
 801a78a:	dd0b      	ble.n	801a7a4 <_printf_float+0x19c>
 801a78c:	6121      	str	r1, [r4, #16]
 801a78e:	b913      	cbnz	r3, 801a796 <_printf_float+0x18e>
 801a790:	6822      	ldr	r2, [r4, #0]
 801a792:	07d0      	lsls	r0, r2, #31
 801a794:	d502      	bpl.n	801a79c <_printf_float+0x194>
 801a796:	3301      	adds	r3, #1
 801a798:	440b      	add	r3, r1
 801a79a:	6123      	str	r3, [r4, #16]
 801a79c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a79e:	f04f 0900 	mov.w	r9, #0
 801a7a2:	e7db      	b.n	801a75c <_printf_float+0x154>
 801a7a4:	b913      	cbnz	r3, 801a7ac <_printf_float+0x1a4>
 801a7a6:	6822      	ldr	r2, [r4, #0]
 801a7a8:	07d2      	lsls	r2, r2, #31
 801a7aa:	d501      	bpl.n	801a7b0 <_printf_float+0x1a8>
 801a7ac:	3302      	adds	r3, #2
 801a7ae:	e7f4      	b.n	801a79a <_printf_float+0x192>
 801a7b0:	2301      	movs	r3, #1
 801a7b2:	e7f2      	b.n	801a79a <_printf_float+0x192>
 801a7b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a7b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a7ba:	4299      	cmp	r1, r3
 801a7bc:	db05      	blt.n	801a7ca <_printf_float+0x1c2>
 801a7be:	6823      	ldr	r3, [r4, #0]
 801a7c0:	6121      	str	r1, [r4, #16]
 801a7c2:	07d8      	lsls	r0, r3, #31
 801a7c4:	d5ea      	bpl.n	801a79c <_printf_float+0x194>
 801a7c6:	1c4b      	adds	r3, r1, #1
 801a7c8:	e7e7      	b.n	801a79a <_printf_float+0x192>
 801a7ca:	2900      	cmp	r1, #0
 801a7cc:	bfd4      	ite	le
 801a7ce:	f1c1 0202 	rsble	r2, r1, #2
 801a7d2:	2201      	movgt	r2, #1
 801a7d4:	4413      	add	r3, r2
 801a7d6:	e7e0      	b.n	801a79a <_printf_float+0x192>
 801a7d8:	6823      	ldr	r3, [r4, #0]
 801a7da:	055a      	lsls	r2, r3, #21
 801a7dc:	d407      	bmi.n	801a7ee <_printf_float+0x1e6>
 801a7de:	6923      	ldr	r3, [r4, #16]
 801a7e0:	4642      	mov	r2, r8
 801a7e2:	4631      	mov	r1, r6
 801a7e4:	4628      	mov	r0, r5
 801a7e6:	47b8      	blx	r7
 801a7e8:	3001      	adds	r0, #1
 801a7ea:	d12b      	bne.n	801a844 <_printf_float+0x23c>
 801a7ec:	e767      	b.n	801a6be <_printf_float+0xb6>
 801a7ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a7f2:	f240 80dd 	bls.w	801a9b0 <_printf_float+0x3a8>
 801a7f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a7fa:	2200      	movs	r2, #0
 801a7fc:	2300      	movs	r3, #0
 801a7fe:	f7e6 f93b 	bl	8000a78 <__aeabi_dcmpeq>
 801a802:	2800      	cmp	r0, #0
 801a804:	d033      	beq.n	801a86e <_printf_float+0x266>
 801a806:	4a37      	ldr	r2, [pc, #220]	@ (801a8e4 <_printf_float+0x2dc>)
 801a808:	2301      	movs	r3, #1
 801a80a:	4631      	mov	r1, r6
 801a80c:	4628      	mov	r0, r5
 801a80e:	47b8      	blx	r7
 801a810:	3001      	adds	r0, #1
 801a812:	f43f af54 	beq.w	801a6be <_printf_float+0xb6>
 801a816:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a81a:	4543      	cmp	r3, r8
 801a81c:	db02      	blt.n	801a824 <_printf_float+0x21c>
 801a81e:	6823      	ldr	r3, [r4, #0]
 801a820:	07d8      	lsls	r0, r3, #31
 801a822:	d50f      	bpl.n	801a844 <_printf_float+0x23c>
 801a824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a828:	4631      	mov	r1, r6
 801a82a:	4628      	mov	r0, r5
 801a82c:	47b8      	blx	r7
 801a82e:	3001      	adds	r0, #1
 801a830:	f43f af45 	beq.w	801a6be <_printf_float+0xb6>
 801a834:	f04f 0900 	mov.w	r9, #0
 801a838:	f108 38ff 	add.w	r8, r8, #4294967295
 801a83c:	f104 0a1a 	add.w	sl, r4, #26
 801a840:	45c8      	cmp	r8, r9
 801a842:	dc09      	bgt.n	801a858 <_printf_float+0x250>
 801a844:	6823      	ldr	r3, [r4, #0]
 801a846:	079b      	lsls	r3, r3, #30
 801a848:	f100 8103 	bmi.w	801aa52 <_printf_float+0x44a>
 801a84c:	68e0      	ldr	r0, [r4, #12]
 801a84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a850:	4298      	cmp	r0, r3
 801a852:	bfb8      	it	lt
 801a854:	4618      	movlt	r0, r3
 801a856:	e734      	b.n	801a6c2 <_printf_float+0xba>
 801a858:	2301      	movs	r3, #1
 801a85a:	4652      	mov	r2, sl
 801a85c:	4631      	mov	r1, r6
 801a85e:	4628      	mov	r0, r5
 801a860:	47b8      	blx	r7
 801a862:	3001      	adds	r0, #1
 801a864:	f43f af2b 	beq.w	801a6be <_printf_float+0xb6>
 801a868:	f109 0901 	add.w	r9, r9, #1
 801a86c:	e7e8      	b.n	801a840 <_printf_float+0x238>
 801a86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a870:	2b00      	cmp	r3, #0
 801a872:	dc39      	bgt.n	801a8e8 <_printf_float+0x2e0>
 801a874:	4a1b      	ldr	r2, [pc, #108]	@ (801a8e4 <_printf_float+0x2dc>)
 801a876:	2301      	movs	r3, #1
 801a878:	4631      	mov	r1, r6
 801a87a:	4628      	mov	r0, r5
 801a87c:	47b8      	blx	r7
 801a87e:	3001      	adds	r0, #1
 801a880:	f43f af1d 	beq.w	801a6be <_printf_float+0xb6>
 801a884:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a888:	ea59 0303 	orrs.w	r3, r9, r3
 801a88c:	d102      	bne.n	801a894 <_printf_float+0x28c>
 801a88e:	6823      	ldr	r3, [r4, #0]
 801a890:	07d9      	lsls	r1, r3, #31
 801a892:	d5d7      	bpl.n	801a844 <_printf_float+0x23c>
 801a894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a898:	4631      	mov	r1, r6
 801a89a:	4628      	mov	r0, r5
 801a89c:	47b8      	blx	r7
 801a89e:	3001      	adds	r0, #1
 801a8a0:	f43f af0d 	beq.w	801a6be <_printf_float+0xb6>
 801a8a4:	f04f 0a00 	mov.w	sl, #0
 801a8a8:	f104 0b1a 	add.w	fp, r4, #26
 801a8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a8ae:	425b      	negs	r3, r3
 801a8b0:	4553      	cmp	r3, sl
 801a8b2:	dc01      	bgt.n	801a8b8 <_printf_float+0x2b0>
 801a8b4:	464b      	mov	r3, r9
 801a8b6:	e793      	b.n	801a7e0 <_printf_float+0x1d8>
 801a8b8:	2301      	movs	r3, #1
 801a8ba:	465a      	mov	r2, fp
 801a8bc:	4631      	mov	r1, r6
 801a8be:	4628      	mov	r0, r5
 801a8c0:	47b8      	blx	r7
 801a8c2:	3001      	adds	r0, #1
 801a8c4:	f43f aefb 	beq.w	801a6be <_printf_float+0xb6>
 801a8c8:	f10a 0a01 	add.w	sl, sl, #1
 801a8cc:	e7ee      	b.n	801a8ac <_printf_float+0x2a4>
 801a8ce:	bf00      	nop
 801a8d0:	7fefffff 	.word	0x7fefffff
 801a8d4:	080222d9 	.word	0x080222d9
 801a8d8:	080222dd 	.word	0x080222dd
 801a8dc:	080222e1 	.word	0x080222e1
 801a8e0:	080222e5 	.word	0x080222e5
 801a8e4:	080222e9 	.word	0x080222e9
 801a8e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a8ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a8ee:	4553      	cmp	r3, sl
 801a8f0:	bfa8      	it	ge
 801a8f2:	4653      	movge	r3, sl
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	4699      	mov	r9, r3
 801a8f8:	dc36      	bgt.n	801a968 <_printf_float+0x360>
 801a8fa:	f04f 0b00 	mov.w	fp, #0
 801a8fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a902:	f104 021a 	add.w	r2, r4, #26
 801a906:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a908:	9306      	str	r3, [sp, #24]
 801a90a:	eba3 0309 	sub.w	r3, r3, r9
 801a90e:	455b      	cmp	r3, fp
 801a910:	dc31      	bgt.n	801a976 <_printf_float+0x36e>
 801a912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a914:	459a      	cmp	sl, r3
 801a916:	dc3a      	bgt.n	801a98e <_printf_float+0x386>
 801a918:	6823      	ldr	r3, [r4, #0]
 801a91a:	07da      	lsls	r2, r3, #31
 801a91c:	d437      	bmi.n	801a98e <_printf_float+0x386>
 801a91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a920:	ebaa 0903 	sub.w	r9, sl, r3
 801a924:	9b06      	ldr	r3, [sp, #24]
 801a926:	ebaa 0303 	sub.w	r3, sl, r3
 801a92a:	4599      	cmp	r9, r3
 801a92c:	bfa8      	it	ge
 801a92e:	4699      	movge	r9, r3
 801a930:	f1b9 0f00 	cmp.w	r9, #0
 801a934:	dc33      	bgt.n	801a99e <_printf_float+0x396>
 801a936:	f04f 0800 	mov.w	r8, #0
 801a93a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a93e:	f104 0b1a 	add.w	fp, r4, #26
 801a942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a944:	ebaa 0303 	sub.w	r3, sl, r3
 801a948:	eba3 0309 	sub.w	r3, r3, r9
 801a94c:	4543      	cmp	r3, r8
 801a94e:	f77f af79 	ble.w	801a844 <_printf_float+0x23c>
 801a952:	2301      	movs	r3, #1
 801a954:	465a      	mov	r2, fp
 801a956:	4631      	mov	r1, r6
 801a958:	4628      	mov	r0, r5
 801a95a:	47b8      	blx	r7
 801a95c:	3001      	adds	r0, #1
 801a95e:	f43f aeae 	beq.w	801a6be <_printf_float+0xb6>
 801a962:	f108 0801 	add.w	r8, r8, #1
 801a966:	e7ec      	b.n	801a942 <_printf_float+0x33a>
 801a968:	4642      	mov	r2, r8
 801a96a:	4631      	mov	r1, r6
 801a96c:	4628      	mov	r0, r5
 801a96e:	47b8      	blx	r7
 801a970:	3001      	adds	r0, #1
 801a972:	d1c2      	bne.n	801a8fa <_printf_float+0x2f2>
 801a974:	e6a3      	b.n	801a6be <_printf_float+0xb6>
 801a976:	2301      	movs	r3, #1
 801a978:	4631      	mov	r1, r6
 801a97a:	4628      	mov	r0, r5
 801a97c:	9206      	str	r2, [sp, #24]
 801a97e:	47b8      	blx	r7
 801a980:	3001      	adds	r0, #1
 801a982:	f43f ae9c 	beq.w	801a6be <_printf_float+0xb6>
 801a986:	9a06      	ldr	r2, [sp, #24]
 801a988:	f10b 0b01 	add.w	fp, fp, #1
 801a98c:	e7bb      	b.n	801a906 <_printf_float+0x2fe>
 801a98e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a992:	4631      	mov	r1, r6
 801a994:	4628      	mov	r0, r5
 801a996:	47b8      	blx	r7
 801a998:	3001      	adds	r0, #1
 801a99a:	d1c0      	bne.n	801a91e <_printf_float+0x316>
 801a99c:	e68f      	b.n	801a6be <_printf_float+0xb6>
 801a99e:	9a06      	ldr	r2, [sp, #24]
 801a9a0:	464b      	mov	r3, r9
 801a9a2:	4442      	add	r2, r8
 801a9a4:	4631      	mov	r1, r6
 801a9a6:	4628      	mov	r0, r5
 801a9a8:	47b8      	blx	r7
 801a9aa:	3001      	adds	r0, #1
 801a9ac:	d1c3      	bne.n	801a936 <_printf_float+0x32e>
 801a9ae:	e686      	b.n	801a6be <_printf_float+0xb6>
 801a9b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a9b4:	f1ba 0f01 	cmp.w	sl, #1
 801a9b8:	dc01      	bgt.n	801a9be <_printf_float+0x3b6>
 801a9ba:	07db      	lsls	r3, r3, #31
 801a9bc:	d536      	bpl.n	801aa2c <_printf_float+0x424>
 801a9be:	2301      	movs	r3, #1
 801a9c0:	4642      	mov	r2, r8
 801a9c2:	4631      	mov	r1, r6
 801a9c4:	4628      	mov	r0, r5
 801a9c6:	47b8      	blx	r7
 801a9c8:	3001      	adds	r0, #1
 801a9ca:	f43f ae78 	beq.w	801a6be <_printf_float+0xb6>
 801a9ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a9d2:	4631      	mov	r1, r6
 801a9d4:	4628      	mov	r0, r5
 801a9d6:	47b8      	blx	r7
 801a9d8:	3001      	adds	r0, #1
 801a9da:	f43f ae70 	beq.w	801a6be <_printf_float+0xb6>
 801a9de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a9e2:	2200      	movs	r2, #0
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a9ea:	f7e6 f845 	bl	8000a78 <__aeabi_dcmpeq>
 801a9ee:	b9c0      	cbnz	r0, 801aa22 <_printf_float+0x41a>
 801a9f0:	4653      	mov	r3, sl
 801a9f2:	f108 0201 	add.w	r2, r8, #1
 801a9f6:	4631      	mov	r1, r6
 801a9f8:	4628      	mov	r0, r5
 801a9fa:	47b8      	blx	r7
 801a9fc:	3001      	adds	r0, #1
 801a9fe:	d10c      	bne.n	801aa1a <_printf_float+0x412>
 801aa00:	e65d      	b.n	801a6be <_printf_float+0xb6>
 801aa02:	2301      	movs	r3, #1
 801aa04:	465a      	mov	r2, fp
 801aa06:	4631      	mov	r1, r6
 801aa08:	4628      	mov	r0, r5
 801aa0a:	47b8      	blx	r7
 801aa0c:	3001      	adds	r0, #1
 801aa0e:	f43f ae56 	beq.w	801a6be <_printf_float+0xb6>
 801aa12:	f108 0801 	add.w	r8, r8, #1
 801aa16:	45d0      	cmp	r8, sl
 801aa18:	dbf3      	blt.n	801aa02 <_printf_float+0x3fa>
 801aa1a:	464b      	mov	r3, r9
 801aa1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801aa20:	e6df      	b.n	801a7e2 <_printf_float+0x1da>
 801aa22:	f04f 0800 	mov.w	r8, #0
 801aa26:	f104 0b1a 	add.w	fp, r4, #26
 801aa2a:	e7f4      	b.n	801aa16 <_printf_float+0x40e>
 801aa2c:	2301      	movs	r3, #1
 801aa2e:	4642      	mov	r2, r8
 801aa30:	e7e1      	b.n	801a9f6 <_printf_float+0x3ee>
 801aa32:	2301      	movs	r3, #1
 801aa34:	464a      	mov	r2, r9
 801aa36:	4631      	mov	r1, r6
 801aa38:	4628      	mov	r0, r5
 801aa3a:	47b8      	blx	r7
 801aa3c:	3001      	adds	r0, #1
 801aa3e:	f43f ae3e 	beq.w	801a6be <_printf_float+0xb6>
 801aa42:	f108 0801 	add.w	r8, r8, #1
 801aa46:	68e3      	ldr	r3, [r4, #12]
 801aa48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801aa4a:	1a5b      	subs	r3, r3, r1
 801aa4c:	4543      	cmp	r3, r8
 801aa4e:	dcf0      	bgt.n	801aa32 <_printf_float+0x42a>
 801aa50:	e6fc      	b.n	801a84c <_printf_float+0x244>
 801aa52:	f04f 0800 	mov.w	r8, #0
 801aa56:	f104 0919 	add.w	r9, r4, #25
 801aa5a:	e7f4      	b.n	801aa46 <_printf_float+0x43e>

0801aa5c <_printf_common>:
 801aa5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa60:	4616      	mov	r6, r2
 801aa62:	4698      	mov	r8, r3
 801aa64:	688a      	ldr	r2, [r1, #8]
 801aa66:	690b      	ldr	r3, [r1, #16]
 801aa68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801aa6c:	4293      	cmp	r3, r2
 801aa6e:	bfb8      	it	lt
 801aa70:	4613      	movlt	r3, r2
 801aa72:	6033      	str	r3, [r6, #0]
 801aa74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801aa78:	4607      	mov	r7, r0
 801aa7a:	460c      	mov	r4, r1
 801aa7c:	b10a      	cbz	r2, 801aa82 <_printf_common+0x26>
 801aa7e:	3301      	adds	r3, #1
 801aa80:	6033      	str	r3, [r6, #0]
 801aa82:	6823      	ldr	r3, [r4, #0]
 801aa84:	0699      	lsls	r1, r3, #26
 801aa86:	bf42      	ittt	mi
 801aa88:	6833      	ldrmi	r3, [r6, #0]
 801aa8a:	3302      	addmi	r3, #2
 801aa8c:	6033      	strmi	r3, [r6, #0]
 801aa8e:	6825      	ldr	r5, [r4, #0]
 801aa90:	f015 0506 	ands.w	r5, r5, #6
 801aa94:	d106      	bne.n	801aaa4 <_printf_common+0x48>
 801aa96:	f104 0a19 	add.w	sl, r4, #25
 801aa9a:	68e3      	ldr	r3, [r4, #12]
 801aa9c:	6832      	ldr	r2, [r6, #0]
 801aa9e:	1a9b      	subs	r3, r3, r2
 801aaa0:	42ab      	cmp	r3, r5
 801aaa2:	dc26      	bgt.n	801aaf2 <_printf_common+0x96>
 801aaa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801aaa8:	6822      	ldr	r2, [r4, #0]
 801aaaa:	3b00      	subs	r3, #0
 801aaac:	bf18      	it	ne
 801aaae:	2301      	movne	r3, #1
 801aab0:	0692      	lsls	r2, r2, #26
 801aab2:	d42b      	bmi.n	801ab0c <_printf_common+0xb0>
 801aab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801aab8:	4641      	mov	r1, r8
 801aaba:	4638      	mov	r0, r7
 801aabc:	47c8      	blx	r9
 801aabe:	3001      	adds	r0, #1
 801aac0:	d01e      	beq.n	801ab00 <_printf_common+0xa4>
 801aac2:	6823      	ldr	r3, [r4, #0]
 801aac4:	6922      	ldr	r2, [r4, #16]
 801aac6:	f003 0306 	and.w	r3, r3, #6
 801aaca:	2b04      	cmp	r3, #4
 801aacc:	bf02      	ittt	eq
 801aace:	68e5      	ldreq	r5, [r4, #12]
 801aad0:	6833      	ldreq	r3, [r6, #0]
 801aad2:	1aed      	subeq	r5, r5, r3
 801aad4:	68a3      	ldr	r3, [r4, #8]
 801aad6:	bf0c      	ite	eq
 801aad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aadc:	2500      	movne	r5, #0
 801aade:	4293      	cmp	r3, r2
 801aae0:	bfc4      	itt	gt
 801aae2:	1a9b      	subgt	r3, r3, r2
 801aae4:	18ed      	addgt	r5, r5, r3
 801aae6:	2600      	movs	r6, #0
 801aae8:	341a      	adds	r4, #26
 801aaea:	42b5      	cmp	r5, r6
 801aaec:	d11a      	bne.n	801ab24 <_printf_common+0xc8>
 801aaee:	2000      	movs	r0, #0
 801aaf0:	e008      	b.n	801ab04 <_printf_common+0xa8>
 801aaf2:	2301      	movs	r3, #1
 801aaf4:	4652      	mov	r2, sl
 801aaf6:	4641      	mov	r1, r8
 801aaf8:	4638      	mov	r0, r7
 801aafa:	47c8      	blx	r9
 801aafc:	3001      	adds	r0, #1
 801aafe:	d103      	bne.n	801ab08 <_printf_common+0xac>
 801ab00:	f04f 30ff 	mov.w	r0, #4294967295
 801ab04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab08:	3501      	adds	r5, #1
 801ab0a:	e7c6      	b.n	801aa9a <_printf_common+0x3e>
 801ab0c:	18e1      	adds	r1, r4, r3
 801ab0e:	1c5a      	adds	r2, r3, #1
 801ab10:	2030      	movs	r0, #48	@ 0x30
 801ab12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ab16:	4422      	add	r2, r4
 801ab18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ab1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ab20:	3302      	adds	r3, #2
 801ab22:	e7c7      	b.n	801aab4 <_printf_common+0x58>
 801ab24:	2301      	movs	r3, #1
 801ab26:	4622      	mov	r2, r4
 801ab28:	4641      	mov	r1, r8
 801ab2a:	4638      	mov	r0, r7
 801ab2c:	47c8      	blx	r9
 801ab2e:	3001      	adds	r0, #1
 801ab30:	d0e6      	beq.n	801ab00 <_printf_common+0xa4>
 801ab32:	3601      	adds	r6, #1
 801ab34:	e7d9      	b.n	801aaea <_printf_common+0x8e>
	...

0801ab38 <_printf_i>:
 801ab38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab3c:	7e0f      	ldrb	r7, [r1, #24]
 801ab3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ab40:	2f78      	cmp	r7, #120	@ 0x78
 801ab42:	4691      	mov	r9, r2
 801ab44:	4680      	mov	r8, r0
 801ab46:	460c      	mov	r4, r1
 801ab48:	469a      	mov	sl, r3
 801ab4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ab4e:	d807      	bhi.n	801ab60 <_printf_i+0x28>
 801ab50:	2f62      	cmp	r7, #98	@ 0x62
 801ab52:	d80a      	bhi.n	801ab6a <_printf_i+0x32>
 801ab54:	2f00      	cmp	r7, #0
 801ab56:	f000 80d2 	beq.w	801acfe <_printf_i+0x1c6>
 801ab5a:	2f58      	cmp	r7, #88	@ 0x58
 801ab5c:	f000 80b9 	beq.w	801acd2 <_printf_i+0x19a>
 801ab60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ab64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ab68:	e03a      	b.n	801abe0 <_printf_i+0xa8>
 801ab6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ab6e:	2b15      	cmp	r3, #21
 801ab70:	d8f6      	bhi.n	801ab60 <_printf_i+0x28>
 801ab72:	a101      	add	r1, pc, #4	@ (adr r1, 801ab78 <_printf_i+0x40>)
 801ab74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ab78:	0801abd1 	.word	0x0801abd1
 801ab7c:	0801abe5 	.word	0x0801abe5
 801ab80:	0801ab61 	.word	0x0801ab61
 801ab84:	0801ab61 	.word	0x0801ab61
 801ab88:	0801ab61 	.word	0x0801ab61
 801ab8c:	0801ab61 	.word	0x0801ab61
 801ab90:	0801abe5 	.word	0x0801abe5
 801ab94:	0801ab61 	.word	0x0801ab61
 801ab98:	0801ab61 	.word	0x0801ab61
 801ab9c:	0801ab61 	.word	0x0801ab61
 801aba0:	0801ab61 	.word	0x0801ab61
 801aba4:	0801ace5 	.word	0x0801ace5
 801aba8:	0801ac0f 	.word	0x0801ac0f
 801abac:	0801ac9f 	.word	0x0801ac9f
 801abb0:	0801ab61 	.word	0x0801ab61
 801abb4:	0801ab61 	.word	0x0801ab61
 801abb8:	0801ad07 	.word	0x0801ad07
 801abbc:	0801ab61 	.word	0x0801ab61
 801abc0:	0801ac0f 	.word	0x0801ac0f
 801abc4:	0801ab61 	.word	0x0801ab61
 801abc8:	0801ab61 	.word	0x0801ab61
 801abcc:	0801aca7 	.word	0x0801aca7
 801abd0:	6833      	ldr	r3, [r6, #0]
 801abd2:	1d1a      	adds	r2, r3, #4
 801abd4:	681b      	ldr	r3, [r3, #0]
 801abd6:	6032      	str	r2, [r6, #0]
 801abd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801abdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801abe0:	2301      	movs	r3, #1
 801abe2:	e09d      	b.n	801ad20 <_printf_i+0x1e8>
 801abe4:	6833      	ldr	r3, [r6, #0]
 801abe6:	6820      	ldr	r0, [r4, #0]
 801abe8:	1d19      	adds	r1, r3, #4
 801abea:	6031      	str	r1, [r6, #0]
 801abec:	0606      	lsls	r6, r0, #24
 801abee:	d501      	bpl.n	801abf4 <_printf_i+0xbc>
 801abf0:	681d      	ldr	r5, [r3, #0]
 801abf2:	e003      	b.n	801abfc <_printf_i+0xc4>
 801abf4:	0645      	lsls	r5, r0, #25
 801abf6:	d5fb      	bpl.n	801abf0 <_printf_i+0xb8>
 801abf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801abfc:	2d00      	cmp	r5, #0
 801abfe:	da03      	bge.n	801ac08 <_printf_i+0xd0>
 801ac00:	232d      	movs	r3, #45	@ 0x2d
 801ac02:	426d      	negs	r5, r5
 801ac04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ac08:	4859      	ldr	r0, [pc, #356]	@ (801ad70 <_printf_i+0x238>)
 801ac0a:	230a      	movs	r3, #10
 801ac0c:	e011      	b.n	801ac32 <_printf_i+0xfa>
 801ac0e:	6821      	ldr	r1, [r4, #0]
 801ac10:	6833      	ldr	r3, [r6, #0]
 801ac12:	0608      	lsls	r0, r1, #24
 801ac14:	f853 5b04 	ldr.w	r5, [r3], #4
 801ac18:	d402      	bmi.n	801ac20 <_printf_i+0xe8>
 801ac1a:	0649      	lsls	r1, r1, #25
 801ac1c:	bf48      	it	mi
 801ac1e:	b2ad      	uxthmi	r5, r5
 801ac20:	2f6f      	cmp	r7, #111	@ 0x6f
 801ac22:	4853      	ldr	r0, [pc, #332]	@ (801ad70 <_printf_i+0x238>)
 801ac24:	6033      	str	r3, [r6, #0]
 801ac26:	bf14      	ite	ne
 801ac28:	230a      	movne	r3, #10
 801ac2a:	2308      	moveq	r3, #8
 801ac2c:	2100      	movs	r1, #0
 801ac2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801ac32:	6866      	ldr	r6, [r4, #4]
 801ac34:	60a6      	str	r6, [r4, #8]
 801ac36:	2e00      	cmp	r6, #0
 801ac38:	bfa2      	ittt	ge
 801ac3a:	6821      	ldrge	r1, [r4, #0]
 801ac3c:	f021 0104 	bicge.w	r1, r1, #4
 801ac40:	6021      	strge	r1, [r4, #0]
 801ac42:	b90d      	cbnz	r5, 801ac48 <_printf_i+0x110>
 801ac44:	2e00      	cmp	r6, #0
 801ac46:	d04b      	beq.n	801ace0 <_printf_i+0x1a8>
 801ac48:	4616      	mov	r6, r2
 801ac4a:	fbb5 f1f3 	udiv	r1, r5, r3
 801ac4e:	fb03 5711 	mls	r7, r3, r1, r5
 801ac52:	5dc7      	ldrb	r7, [r0, r7]
 801ac54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ac58:	462f      	mov	r7, r5
 801ac5a:	42bb      	cmp	r3, r7
 801ac5c:	460d      	mov	r5, r1
 801ac5e:	d9f4      	bls.n	801ac4a <_printf_i+0x112>
 801ac60:	2b08      	cmp	r3, #8
 801ac62:	d10b      	bne.n	801ac7c <_printf_i+0x144>
 801ac64:	6823      	ldr	r3, [r4, #0]
 801ac66:	07df      	lsls	r7, r3, #31
 801ac68:	d508      	bpl.n	801ac7c <_printf_i+0x144>
 801ac6a:	6923      	ldr	r3, [r4, #16]
 801ac6c:	6861      	ldr	r1, [r4, #4]
 801ac6e:	4299      	cmp	r1, r3
 801ac70:	bfde      	ittt	le
 801ac72:	2330      	movle	r3, #48	@ 0x30
 801ac74:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ac78:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ac7c:	1b92      	subs	r2, r2, r6
 801ac7e:	6122      	str	r2, [r4, #16]
 801ac80:	f8cd a000 	str.w	sl, [sp]
 801ac84:	464b      	mov	r3, r9
 801ac86:	aa03      	add	r2, sp, #12
 801ac88:	4621      	mov	r1, r4
 801ac8a:	4640      	mov	r0, r8
 801ac8c:	f7ff fee6 	bl	801aa5c <_printf_common>
 801ac90:	3001      	adds	r0, #1
 801ac92:	d14a      	bne.n	801ad2a <_printf_i+0x1f2>
 801ac94:	f04f 30ff 	mov.w	r0, #4294967295
 801ac98:	b004      	add	sp, #16
 801ac9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac9e:	6823      	ldr	r3, [r4, #0]
 801aca0:	f043 0320 	orr.w	r3, r3, #32
 801aca4:	6023      	str	r3, [r4, #0]
 801aca6:	4833      	ldr	r0, [pc, #204]	@ (801ad74 <_printf_i+0x23c>)
 801aca8:	2778      	movs	r7, #120	@ 0x78
 801acaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801acae:	6823      	ldr	r3, [r4, #0]
 801acb0:	6831      	ldr	r1, [r6, #0]
 801acb2:	061f      	lsls	r7, r3, #24
 801acb4:	f851 5b04 	ldr.w	r5, [r1], #4
 801acb8:	d402      	bmi.n	801acc0 <_printf_i+0x188>
 801acba:	065f      	lsls	r7, r3, #25
 801acbc:	bf48      	it	mi
 801acbe:	b2ad      	uxthmi	r5, r5
 801acc0:	6031      	str	r1, [r6, #0]
 801acc2:	07d9      	lsls	r1, r3, #31
 801acc4:	bf44      	itt	mi
 801acc6:	f043 0320 	orrmi.w	r3, r3, #32
 801acca:	6023      	strmi	r3, [r4, #0]
 801accc:	b11d      	cbz	r5, 801acd6 <_printf_i+0x19e>
 801acce:	2310      	movs	r3, #16
 801acd0:	e7ac      	b.n	801ac2c <_printf_i+0xf4>
 801acd2:	4827      	ldr	r0, [pc, #156]	@ (801ad70 <_printf_i+0x238>)
 801acd4:	e7e9      	b.n	801acaa <_printf_i+0x172>
 801acd6:	6823      	ldr	r3, [r4, #0]
 801acd8:	f023 0320 	bic.w	r3, r3, #32
 801acdc:	6023      	str	r3, [r4, #0]
 801acde:	e7f6      	b.n	801acce <_printf_i+0x196>
 801ace0:	4616      	mov	r6, r2
 801ace2:	e7bd      	b.n	801ac60 <_printf_i+0x128>
 801ace4:	6833      	ldr	r3, [r6, #0]
 801ace6:	6825      	ldr	r5, [r4, #0]
 801ace8:	6961      	ldr	r1, [r4, #20]
 801acea:	1d18      	adds	r0, r3, #4
 801acec:	6030      	str	r0, [r6, #0]
 801acee:	062e      	lsls	r6, r5, #24
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	d501      	bpl.n	801acf8 <_printf_i+0x1c0>
 801acf4:	6019      	str	r1, [r3, #0]
 801acf6:	e002      	b.n	801acfe <_printf_i+0x1c6>
 801acf8:	0668      	lsls	r0, r5, #25
 801acfa:	d5fb      	bpl.n	801acf4 <_printf_i+0x1bc>
 801acfc:	8019      	strh	r1, [r3, #0]
 801acfe:	2300      	movs	r3, #0
 801ad00:	6123      	str	r3, [r4, #16]
 801ad02:	4616      	mov	r6, r2
 801ad04:	e7bc      	b.n	801ac80 <_printf_i+0x148>
 801ad06:	6833      	ldr	r3, [r6, #0]
 801ad08:	1d1a      	adds	r2, r3, #4
 801ad0a:	6032      	str	r2, [r6, #0]
 801ad0c:	681e      	ldr	r6, [r3, #0]
 801ad0e:	6862      	ldr	r2, [r4, #4]
 801ad10:	2100      	movs	r1, #0
 801ad12:	4630      	mov	r0, r6
 801ad14:	f7e5 fa34 	bl	8000180 <memchr>
 801ad18:	b108      	cbz	r0, 801ad1e <_printf_i+0x1e6>
 801ad1a:	1b80      	subs	r0, r0, r6
 801ad1c:	6060      	str	r0, [r4, #4]
 801ad1e:	6863      	ldr	r3, [r4, #4]
 801ad20:	6123      	str	r3, [r4, #16]
 801ad22:	2300      	movs	r3, #0
 801ad24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ad28:	e7aa      	b.n	801ac80 <_printf_i+0x148>
 801ad2a:	6923      	ldr	r3, [r4, #16]
 801ad2c:	4632      	mov	r2, r6
 801ad2e:	4649      	mov	r1, r9
 801ad30:	4640      	mov	r0, r8
 801ad32:	47d0      	blx	sl
 801ad34:	3001      	adds	r0, #1
 801ad36:	d0ad      	beq.n	801ac94 <_printf_i+0x15c>
 801ad38:	6823      	ldr	r3, [r4, #0]
 801ad3a:	079b      	lsls	r3, r3, #30
 801ad3c:	d413      	bmi.n	801ad66 <_printf_i+0x22e>
 801ad3e:	68e0      	ldr	r0, [r4, #12]
 801ad40:	9b03      	ldr	r3, [sp, #12]
 801ad42:	4298      	cmp	r0, r3
 801ad44:	bfb8      	it	lt
 801ad46:	4618      	movlt	r0, r3
 801ad48:	e7a6      	b.n	801ac98 <_printf_i+0x160>
 801ad4a:	2301      	movs	r3, #1
 801ad4c:	4632      	mov	r2, r6
 801ad4e:	4649      	mov	r1, r9
 801ad50:	4640      	mov	r0, r8
 801ad52:	47d0      	blx	sl
 801ad54:	3001      	adds	r0, #1
 801ad56:	d09d      	beq.n	801ac94 <_printf_i+0x15c>
 801ad58:	3501      	adds	r5, #1
 801ad5a:	68e3      	ldr	r3, [r4, #12]
 801ad5c:	9903      	ldr	r1, [sp, #12]
 801ad5e:	1a5b      	subs	r3, r3, r1
 801ad60:	42ab      	cmp	r3, r5
 801ad62:	dcf2      	bgt.n	801ad4a <_printf_i+0x212>
 801ad64:	e7eb      	b.n	801ad3e <_printf_i+0x206>
 801ad66:	2500      	movs	r5, #0
 801ad68:	f104 0619 	add.w	r6, r4, #25
 801ad6c:	e7f5      	b.n	801ad5a <_printf_i+0x222>
 801ad6e:	bf00      	nop
 801ad70:	080222eb 	.word	0x080222eb
 801ad74:	080222fc 	.word	0x080222fc

0801ad78 <_scanf_float>:
 801ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad7c:	b087      	sub	sp, #28
 801ad7e:	4617      	mov	r7, r2
 801ad80:	9303      	str	r3, [sp, #12]
 801ad82:	688b      	ldr	r3, [r1, #8]
 801ad84:	1e5a      	subs	r2, r3, #1
 801ad86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ad8a:	bf81      	itttt	hi
 801ad8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ad90:	eb03 0b05 	addhi.w	fp, r3, r5
 801ad94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ad98:	608b      	strhi	r3, [r1, #8]
 801ad9a:	680b      	ldr	r3, [r1, #0]
 801ad9c:	460a      	mov	r2, r1
 801ad9e:	f04f 0500 	mov.w	r5, #0
 801ada2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801ada6:	f842 3b1c 	str.w	r3, [r2], #28
 801adaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801adae:	4680      	mov	r8, r0
 801adb0:	460c      	mov	r4, r1
 801adb2:	bf98      	it	ls
 801adb4:	f04f 0b00 	movls.w	fp, #0
 801adb8:	9201      	str	r2, [sp, #4]
 801adba:	4616      	mov	r6, r2
 801adbc:	46aa      	mov	sl, r5
 801adbe:	46a9      	mov	r9, r5
 801adc0:	9502      	str	r5, [sp, #8]
 801adc2:	68a2      	ldr	r2, [r4, #8]
 801adc4:	b152      	cbz	r2, 801addc <_scanf_float+0x64>
 801adc6:	683b      	ldr	r3, [r7, #0]
 801adc8:	781b      	ldrb	r3, [r3, #0]
 801adca:	2b4e      	cmp	r3, #78	@ 0x4e
 801adcc:	d864      	bhi.n	801ae98 <_scanf_float+0x120>
 801adce:	2b40      	cmp	r3, #64	@ 0x40
 801add0:	d83c      	bhi.n	801ae4c <_scanf_float+0xd4>
 801add2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801add6:	b2c8      	uxtb	r0, r1
 801add8:	280e      	cmp	r0, #14
 801adda:	d93a      	bls.n	801ae52 <_scanf_float+0xda>
 801addc:	f1b9 0f00 	cmp.w	r9, #0
 801ade0:	d003      	beq.n	801adea <_scanf_float+0x72>
 801ade2:	6823      	ldr	r3, [r4, #0]
 801ade4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ade8:	6023      	str	r3, [r4, #0]
 801adea:	f10a 3aff 	add.w	sl, sl, #4294967295
 801adee:	f1ba 0f01 	cmp.w	sl, #1
 801adf2:	f200 8117 	bhi.w	801b024 <_scanf_float+0x2ac>
 801adf6:	9b01      	ldr	r3, [sp, #4]
 801adf8:	429e      	cmp	r6, r3
 801adfa:	f200 8108 	bhi.w	801b00e <_scanf_float+0x296>
 801adfe:	2001      	movs	r0, #1
 801ae00:	b007      	add	sp, #28
 801ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801ae0a:	2a0d      	cmp	r2, #13
 801ae0c:	d8e6      	bhi.n	801addc <_scanf_float+0x64>
 801ae0e:	a101      	add	r1, pc, #4	@ (adr r1, 801ae14 <_scanf_float+0x9c>)
 801ae10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ae14:	0801af5b 	.word	0x0801af5b
 801ae18:	0801addd 	.word	0x0801addd
 801ae1c:	0801addd 	.word	0x0801addd
 801ae20:	0801addd 	.word	0x0801addd
 801ae24:	0801afbb 	.word	0x0801afbb
 801ae28:	0801af93 	.word	0x0801af93
 801ae2c:	0801addd 	.word	0x0801addd
 801ae30:	0801addd 	.word	0x0801addd
 801ae34:	0801af69 	.word	0x0801af69
 801ae38:	0801addd 	.word	0x0801addd
 801ae3c:	0801addd 	.word	0x0801addd
 801ae40:	0801addd 	.word	0x0801addd
 801ae44:	0801addd 	.word	0x0801addd
 801ae48:	0801af21 	.word	0x0801af21
 801ae4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801ae50:	e7db      	b.n	801ae0a <_scanf_float+0x92>
 801ae52:	290e      	cmp	r1, #14
 801ae54:	d8c2      	bhi.n	801addc <_scanf_float+0x64>
 801ae56:	a001      	add	r0, pc, #4	@ (adr r0, 801ae5c <_scanf_float+0xe4>)
 801ae58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ae5c:	0801af11 	.word	0x0801af11
 801ae60:	0801addd 	.word	0x0801addd
 801ae64:	0801af11 	.word	0x0801af11
 801ae68:	0801afa7 	.word	0x0801afa7
 801ae6c:	0801addd 	.word	0x0801addd
 801ae70:	0801aeb9 	.word	0x0801aeb9
 801ae74:	0801aef7 	.word	0x0801aef7
 801ae78:	0801aef7 	.word	0x0801aef7
 801ae7c:	0801aef7 	.word	0x0801aef7
 801ae80:	0801aef7 	.word	0x0801aef7
 801ae84:	0801aef7 	.word	0x0801aef7
 801ae88:	0801aef7 	.word	0x0801aef7
 801ae8c:	0801aef7 	.word	0x0801aef7
 801ae90:	0801aef7 	.word	0x0801aef7
 801ae94:	0801aef7 	.word	0x0801aef7
 801ae98:	2b6e      	cmp	r3, #110	@ 0x6e
 801ae9a:	d809      	bhi.n	801aeb0 <_scanf_float+0x138>
 801ae9c:	2b60      	cmp	r3, #96	@ 0x60
 801ae9e:	d8b2      	bhi.n	801ae06 <_scanf_float+0x8e>
 801aea0:	2b54      	cmp	r3, #84	@ 0x54
 801aea2:	d07b      	beq.n	801af9c <_scanf_float+0x224>
 801aea4:	2b59      	cmp	r3, #89	@ 0x59
 801aea6:	d199      	bne.n	801addc <_scanf_float+0x64>
 801aea8:	2d07      	cmp	r5, #7
 801aeaa:	d197      	bne.n	801addc <_scanf_float+0x64>
 801aeac:	2508      	movs	r5, #8
 801aeae:	e02c      	b.n	801af0a <_scanf_float+0x192>
 801aeb0:	2b74      	cmp	r3, #116	@ 0x74
 801aeb2:	d073      	beq.n	801af9c <_scanf_float+0x224>
 801aeb4:	2b79      	cmp	r3, #121	@ 0x79
 801aeb6:	e7f6      	b.n	801aea6 <_scanf_float+0x12e>
 801aeb8:	6821      	ldr	r1, [r4, #0]
 801aeba:	05c8      	lsls	r0, r1, #23
 801aebc:	d51b      	bpl.n	801aef6 <_scanf_float+0x17e>
 801aebe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801aec2:	6021      	str	r1, [r4, #0]
 801aec4:	f109 0901 	add.w	r9, r9, #1
 801aec8:	f1bb 0f00 	cmp.w	fp, #0
 801aecc:	d003      	beq.n	801aed6 <_scanf_float+0x15e>
 801aece:	3201      	adds	r2, #1
 801aed0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aed4:	60a2      	str	r2, [r4, #8]
 801aed6:	68a3      	ldr	r3, [r4, #8]
 801aed8:	3b01      	subs	r3, #1
 801aeda:	60a3      	str	r3, [r4, #8]
 801aedc:	6923      	ldr	r3, [r4, #16]
 801aede:	3301      	adds	r3, #1
 801aee0:	6123      	str	r3, [r4, #16]
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	3b01      	subs	r3, #1
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	607b      	str	r3, [r7, #4]
 801aeea:	f340 8087 	ble.w	801affc <_scanf_float+0x284>
 801aeee:	683b      	ldr	r3, [r7, #0]
 801aef0:	3301      	adds	r3, #1
 801aef2:	603b      	str	r3, [r7, #0]
 801aef4:	e765      	b.n	801adc2 <_scanf_float+0x4a>
 801aef6:	eb1a 0105 	adds.w	r1, sl, r5
 801aefa:	f47f af6f 	bne.w	801addc <_scanf_float+0x64>
 801aefe:	6822      	ldr	r2, [r4, #0]
 801af00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801af04:	6022      	str	r2, [r4, #0]
 801af06:	460d      	mov	r5, r1
 801af08:	468a      	mov	sl, r1
 801af0a:	f806 3b01 	strb.w	r3, [r6], #1
 801af0e:	e7e2      	b.n	801aed6 <_scanf_float+0x15e>
 801af10:	6822      	ldr	r2, [r4, #0]
 801af12:	0610      	lsls	r0, r2, #24
 801af14:	f57f af62 	bpl.w	801addc <_scanf_float+0x64>
 801af18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801af1c:	6022      	str	r2, [r4, #0]
 801af1e:	e7f4      	b.n	801af0a <_scanf_float+0x192>
 801af20:	f1ba 0f00 	cmp.w	sl, #0
 801af24:	d10e      	bne.n	801af44 <_scanf_float+0x1cc>
 801af26:	f1b9 0f00 	cmp.w	r9, #0
 801af2a:	d10e      	bne.n	801af4a <_scanf_float+0x1d2>
 801af2c:	6822      	ldr	r2, [r4, #0]
 801af2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801af32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801af36:	d108      	bne.n	801af4a <_scanf_float+0x1d2>
 801af38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801af3c:	6022      	str	r2, [r4, #0]
 801af3e:	f04f 0a01 	mov.w	sl, #1
 801af42:	e7e2      	b.n	801af0a <_scanf_float+0x192>
 801af44:	f1ba 0f02 	cmp.w	sl, #2
 801af48:	d055      	beq.n	801aff6 <_scanf_float+0x27e>
 801af4a:	2d01      	cmp	r5, #1
 801af4c:	d002      	beq.n	801af54 <_scanf_float+0x1dc>
 801af4e:	2d04      	cmp	r5, #4
 801af50:	f47f af44 	bne.w	801addc <_scanf_float+0x64>
 801af54:	3501      	adds	r5, #1
 801af56:	b2ed      	uxtb	r5, r5
 801af58:	e7d7      	b.n	801af0a <_scanf_float+0x192>
 801af5a:	f1ba 0f01 	cmp.w	sl, #1
 801af5e:	f47f af3d 	bne.w	801addc <_scanf_float+0x64>
 801af62:	f04f 0a02 	mov.w	sl, #2
 801af66:	e7d0      	b.n	801af0a <_scanf_float+0x192>
 801af68:	b97d      	cbnz	r5, 801af8a <_scanf_float+0x212>
 801af6a:	f1b9 0f00 	cmp.w	r9, #0
 801af6e:	f47f af38 	bne.w	801ade2 <_scanf_float+0x6a>
 801af72:	6822      	ldr	r2, [r4, #0]
 801af74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801af78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801af7c:	f040 8108 	bne.w	801b190 <_scanf_float+0x418>
 801af80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801af84:	6022      	str	r2, [r4, #0]
 801af86:	2501      	movs	r5, #1
 801af88:	e7bf      	b.n	801af0a <_scanf_float+0x192>
 801af8a:	2d03      	cmp	r5, #3
 801af8c:	d0e2      	beq.n	801af54 <_scanf_float+0x1dc>
 801af8e:	2d05      	cmp	r5, #5
 801af90:	e7de      	b.n	801af50 <_scanf_float+0x1d8>
 801af92:	2d02      	cmp	r5, #2
 801af94:	f47f af22 	bne.w	801addc <_scanf_float+0x64>
 801af98:	2503      	movs	r5, #3
 801af9a:	e7b6      	b.n	801af0a <_scanf_float+0x192>
 801af9c:	2d06      	cmp	r5, #6
 801af9e:	f47f af1d 	bne.w	801addc <_scanf_float+0x64>
 801afa2:	2507      	movs	r5, #7
 801afa4:	e7b1      	b.n	801af0a <_scanf_float+0x192>
 801afa6:	6822      	ldr	r2, [r4, #0]
 801afa8:	0591      	lsls	r1, r2, #22
 801afaa:	f57f af17 	bpl.w	801addc <_scanf_float+0x64>
 801afae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801afb2:	6022      	str	r2, [r4, #0]
 801afb4:	f8cd 9008 	str.w	r9, [sp, #8]
 801afb8:	e7a7      	b.n	801af0a <_scanf_float+0x192>
 801afba:	6822      	ldr	r2, [r4, #0]
 801afbc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801afc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801afc4:	d006      	beq.n	801afd4 <_scanf_float+0x25c>
 801afc6:	0550      	lsls	r0, r2, #21
 801afc8:	f57f af08 	bpl.w	801addc <_scanf_float+0x64>
 801afcc:	f1b9 0f00 	cmp.w	r9, #0
 801afd0:	f000 80de 	beq.w	801b190 <_scanf_float+0x418>
 801afd4:	0591      	lsls	r1, r2, #22
 801afd6:	bf58      	it	pl
 801afd8:	9902      	ldrpl	r1, [sp, #8]
 801afda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801afde:	bf58      	it	pl
 801afe0:	eba9 0101 	subpl.w	r1, r9, r1
 801afe4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801afe8:	bf58      	it	pl
 801afea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801afee:	6022      	str	r2, [r4, #0]
 801aff0:	f04f 0900 	mov.w	r9, #0
 801aff4:	e789      	b.n	801af0a <_scanf_float+0x192>
 801aff6:	f04f 0a03 	mov.w	sl, #3
 801affa:	e786      	b.n	801af0a <_scanf_float+0x192>
 801affc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b000:	4639      	mov	r1, r7
 801b002:	4640      	mov	r0, r8
 801b004:	4798      	blx	r3
 801b006:	2800      	cmp	r0, #0
 801b008:	f43f aedb 	beq.w	801adc2 <_scanf_float+0x4a>
 801b00c:	e6e6      	b.n	801addc <_scanf_float+0x64>
 801b00e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b012:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b016:	463a      	mov	r2, r7
 801b018:	4640      	mov	r0, r8
 801b01a:	4798      	blx	r3
 801b01c:	6923      	ldr	r3, [r4, #16]
 801b01e:	3b01      	subs	r3, #1
 801b020:	6123      	str	r3, [r4, #16]
 801b022:	e6e8      	b.n	801adf6 <_scanf_float+0x7e>
 801b024:	1e6b      	subs	r3, r5, #1
 801b026:	2b06      	cmp	r3, #6
 801b028:	d824      	bhi.n	801b074 <_scanf_float+0x2fc>
 801b02a:	2d02      	cmp	r5, #2
 801b02c:	d836      	bhi.n	801b09c <_scanf_float+0x324>
 801b02e:	9b01      	ldr	r3, [sp, #4]
 801b030:	429e      	cmp	r6, r3
 801b032:	f67f aee4 	bls.w	801adfe <_scanf_float+0x86>
 801b036:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b03a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b03e:	463a      	mov	r2, r7
 801b040:	4640      	mov	r0, r8
 801b042:	4798      	blx	r3
 801b044:	6923      	ldr	r3, [r4, #16]
 801b046:	3b01      	subs	r3, #1
 801b048:	6123      	str	r3, [r4, #16]
 801b04a:	e7f0      	b.n	801b02e <_scanf_float+0x2b6>
 801b04c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b050:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b054:	463a      	mov	r2, r7
 801b056:	4640      	mov	r0, r8
 801b058:	4798      	blx	r3
 801b05a:	6923      	ldr	r3, [r4, #16]
 801b05c:	3b01      	subs	r3, #1
 801b05e:	6123      	str	r3, [r4, #16]
 801b060:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b064:	fa5f fa8a 	uxtb.w	sl, sl
 801b068:	f1ba 0f02 	cmp.w	sl, #2
 801b06c:	d1ee      	bne.n	801b04c <_scanf_float+0x2d4>
 801b06e:	3d03      	subs	r5, #3
 801b070:	b2ed      	uxtb	r5, r5
 801b072:	1b76      	subs	r6, r6, r5
 801b074:	6823      	ldr	r3, [r4, #0]
 801b076:	05da      	lsls	r2, r3, #23
 801b078:	d530      	bpl.n	801b0dc <_scanf_float+0x364>
 801b07a:	055b      	lsls	r3, r3, #21
 801b07c:	d511      	bpl.n	801b0a2 <_scanf_float+0x32a>
 801b07e:	9b01      	ldr	r3, [sp, #4]
 801b080:	429e      	cmp	r6, r3
 801b082:	f67f aebc 	bls.w	801adfe <_scanf_float+0x86>
 801b086:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b08a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b08e:	463a      	mov	r2, r7
 801b090:	4640      	mov	r0, r8
 801b092:	4798      	blx	r3
 801b094:	6923      	ldr	r3, [r4, #16]
 801b096:	3b01      	subs	r3, #1
 801b098:	6123      	str	r3, [r4, #16]
 801b09a:	e7f0      	b.n	801b07e <_scanf_float+0x306>
 801b09c:	46aa      	mov	sl, r5
 801b09e:	46b3      	mov	fp, r6
 801b0a0:	e7de      	b.n	801b060 <_scanf_float+0x2e8>
 801b0a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b0a6:	6923      	ldr	r3, [r4, #16]
 801b0a8:	2965      	cmp	r1, #101	@ 0x65
 801b0aa:	f103 33ff 	add.w	r3, r3, #4294967295
 801b0ae:	f106 35ff 	add.w	r5, r6, #4294967295
 801b0b2:	6123      	str	r3, [r4, #16]
 801b0b4:	d00c      	beq.n	801b0d0 <_scanf_float+0x358>
 801b0b6:	2945      	cmp	r1, #69	@ 0x45
 801b0b8:	d00a      	beq.n	801b0d0 <_scanf_float+0x358>
 801b0ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b0be:	463a      	mov	r2, r7
 801b0c0:	4640      	mov	r0, r8
 801b0c2:	4798      	blx	r3
 801b0c4:	6923      	ldr	r3, [r4, #16]
 801b0c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b0ca:	3b01      	subs	r3, #1
 801b0cc:	1eb5      	subs	r5, r6, #2
 801b0ce:	6123      	str	r3, [r4, #16]
 801b0d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b0d4:	463a      	mov	r2, r7
 801b0d6:	4640      	mov	r0, r8
 801b0d8:	4798      	blx	r3
 801b0da:	462e      	mov	r6, r5
 801b0dc:	6822      	ldr	r2, [r4, #0]
 801b0de:	f012 0210 	ands.w	r2, r2, #16
 801b0e2:	d001      	beq.n	801b0e8 <_scanf_float+0x370>
 801b0e4:	2000      	movs	r0, #0
 801b0e6:	e68b      	b.n	801ae00 <_scanf_float+0x88>
 801b0e8:	7032      	strb	r2, [r6, #0]
 801b0ea:	6823      	ldr	r3, [r4, #0]
 801b0ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b0f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b0f4:	d11c      	bne.n	801b130 <_scanf_float+0x3b8>
 801b0f6:	9b02      	ldr	r3, [sp, #8]
 801b0f8:	454b      	cmp	r3, r9
 801b0fa:	eba3 0209 	sub.w	r2, r3, r9
 801b0fe:	d123      	bne.n	801b148 <_scanf_float+0x3d0>
 801b100:	9901      	ldr	r1, [sp, #4]
 801b102:	2200      	movs	r2, #0
 801b104:	4640      	mov	r0, r8
 801b106:	f7ff f8ef 	bl	801a2e8 <_strtod_r>
 801b10a:	9b03      	ldr	r3, [sp, #12]
 801b10c:	6821      	ldr	r1, [r4, #0]
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	f011 0f02 	tst.w	r1, #2
 801b114:	ec57 6b10 	vmov	r6, r7, d0
 801b118:	f103 0204 	add.w	r2, r3, #4
 801b11c:	d01f      	beq.n	801b15e <_scanf_float+0x3e6>
 801b11e:	9903      	ldr	r1, [sp, #12]
 801b120:	600a      	str	r2, [r1, #0]
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	e9c3 6700 	strd	r6, r7, [r3]
 801b128:	68e3      	ldr	r3, [r4, #12]
 801b12a:	3301      	adds	r3, #1
 801b12c:	60e3      	str	r3, [r4, #12]
 801b12e:	e7d9      	b.n	801b0e4 <_scanf_float+0x36c>
 801b130:	9b04      	ldr	r3, [sp, #16]
 801b132:	2b00      	cmp	r3, #0
 801b134:	d0e4      	beq.n	801b100 <_scanf_float+0x388>
 801b136:	9905      	ldr	r1, [sp, #20]
 801b138:	230a      	movs	r3, #10
 801b13a:	3101      	adds	r1, #1
 801b13c:	4640      	mov	r0, r8
 801b13e:	f7ff f9b7 	bl	801a4b0 <_strtol_r>
 801b142:	9b04      	ldr	r3, [sp, #16]
 801b144:	9e05      	ldr	r6, [sp, #20]
 801b146:	1ac2      	subs	r2, r0, r3
 801b148:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b14c:	429e      	cmp	r6, r3
 801b14e:	bf28      	it	cs
 801b150:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b154:	4910      	ldr	r1, [pc, #64]	@ (801b198 <_scanf_float+0x420>)
 801b156:	4630      	mov	r0, r6
 801b158:	f000 f918 	bl	801b38c <siprintf>
 801b15c:	e7d0      	b.n	801b100 <_scanf_float+0x388>
 801b15e:	f011 0f04 	tst.w	r1, #4
 801b162:	9903      	ldr	r1, [sp, #12]
 801b164:	600a      	str	r2, [r1, #0]
 801b166:	d1dc      	bne.n	801b122 <_scanf_float+0x3aa>
 801b168:	681d      	ldr	r5, [r3, #0]
 801b16a:	4632      	mov	r2, r6
 801b16c:	463b      	mov	r3, r7
 801b16e:	4630      	mov	r0, r6
 801b170:	4639      	mov	r1, r7
 801b172:	f7e5 fcb3 	bl	8000adc <__aeabi_dcmpun>
 801b176:	b128      	cbz	r0, 801b184 <_scanf_float+0x40c>
 801b178:	4808      	ldr	r0, [pc, #32]	@ (801b19c <_scanf_float+0x424>)
 801b17a:	f000 fa9d 	bl	801b6b8 <nanf>
 801b17e:	ed85 0a00 	vstr	s0, [r5]
 801b182:	e7d1      	b.n	801b128 <_scanf_float+0x3b0>
 801b184:	4630      	mov	r0, r6
 801b186:	4639      	mov	r1, r7
 801b188:	f7e5 fd06 	bl	8000b98 <__aeabi_d2f>
 801b18c:	6028      	str	r0, [r5, #0]
 801b18e:	e7cb      	b.n	801b128 <_scanf_float+0x3b0>
 801b190:	f04f 0900 	mov.w	r9, #0
 801b194:	e629      	b.n	801adea <_scanf_float+0x72>
 801b196:	bf00      	nop
 801b198:	0802230d 	.word	0x0802230d
 801b19c:	080223c6 	.word	0x080223c6

0801b1a0 <std>:
 801b1a0:	2300      	movs	r3, #0
 801b1a2:	b510      	push	{r4, lr}
 801b1a4:	4604      	mov	r4, r0
 801b1a6:	e9c0 3300 	strd	r3, r3, [r0]
 801b1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b1ae:	6083      	str	r3, [r0, #8]
 801b1b0:	8181      	strh	r1, [r0, #12]
 801b1b2:	6643      	str	r3, [r0, #100]	@ 0x64
 801b1b4:	81c2      	strh	r2, [r0, #14]
 801b1b6:	6183      	str	r3, [r0, #24]
 801b1b8:	4619      	mov	r1, r3
 801b1ba:	2208      	movs	r2, #8
 801b1bc:	305c      	adds	r0, #92	@ 0x5c
 801b1be:	f000 f948 	bl	801b452 <memset>
 801b1c2:	4b0d      	ldr	r3, [pc, #52]	@ (801b1f8 <std+0x58>)
 801b1c4:	6263      	str	r3, [r4, #36]	@ 0x24
 801b1c6:	4b0d      	ldr	r3, [pc, #52]	@ (801b1fc <std+0x5c>)
 801b1c8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b1ca:	4b0d      	ldr	r3, [pc, #52]	@ (801b200 <std+0x60>)
 801b1cc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b1ce:	4b0d      	ldr	r3, [pc, #52]	@ (801b204 <std+0x64>)
 801b1d0:	6323      	str	r3, [r4, #48]	@ 0x30
 801b1d2:	4b0d      	ldr	r3, [pc, #52]	@ (801b208 <std+0x68>)
 801b1d4:	6224      	str	r4, [r4, #32]
 801b1d6:	429c      	cmp	r4, r3
 801b1d8:	d006      	beq.n	801b1e8 <std+0x48>
 801b1da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b1de:	4294      	cmp	r4, r2
 801b1e0:	d002      	beq.n	801b1e8 <std+0x48>
 801b1e2:	33d0      	adds	r3, #208	@ 0xd0
 801b1e4:	429c      	cmp	r4, r3
 801b1e6:	d105      	bne.n	801b1f4 <std+0x54>
 801b1e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b1ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1f0:	f000 ba40 	b.w	801b674 <__retarget_lock_init_recursive>
 801b1f4:	bd10      	pop	{r4, pc}
 801b1f6:	bf00      	nop
 801b1f8:	0801b3cd 	.word	0x0801b3cd
 801b1fc:	0801b3ef 	.word	0x0801b3ef
 801b200:	0801b427 	.word	0x0801b427
 801b204:	0801b44b 	.word	0x0801b44b
 801b208:	20003004 	.word	0x20003004

0801b20c <stdio_exit_handler>:
 801b20c:	4a02      	ldr	r2, [pc, #8]	@ (801b218 <stdio_exit_handler+0xc>)
 801b20e:	4903      	ldr	r1, [pc, #12]	@ (801b21c <stdio_exit_handler+0x10>)
 801b210:	4803      	ldr	r0, [pc, #12]	@ (801b220 <stdio_exit_handler+0x14>)
 801b212:	f000 b869 	b.w	801b2e8 <_fwalk_sglue>
 801b216:	bf00      	nop
 801b218:	20000144 	.word	0x20000144
 801b21c:	0801da7d 	.word	0x0801da7d
 801b220:	200002c0 	.word	0x200002c0

0801b224 <cleanup_stdio>:
 801b224:	6841      	ldr	r1, [r0, #4]
 801b226:	4b0c      	ldr	r3, [pc, #48]	@ (801b258 <cleanup_stdio+0x34>)
 801b228:	4299      	cmp	r1, r3
 801b22a:	b510      	push	{r4, lr}
 801b22c:	4604      	mov	r4, r0
 801b22e:	d001      	beq.n	801b234 <cleanup_stdio+0x10>
 801b230:	f002 fc24 	bl	801da7c <_fflush_r>
 801b234:	68a1      	ldr	r1, [r4, #8]
 801b236:	4b09      	ldr	r3, [pc, #36]	@ (801b25c <cleanup_stdio+0x38>)
 801b238:	4299      	cmp	r1, r3
 801b23a:	d002      	beq.n	801b242 <cleanup_stdio+0x1e>
 801b23c:	4620      	mov	r0, r4
 801b23e:	f002 fc1d 	bl	801da7c <_fflush_r>
 801b242:	68e1      	ldr	r1, [r4, #12]
 801b244:	4b06      	ldr	r3, [pc, #24]	@ (801b260 <cleanup_stdio+0x3c>)
 801b246:	4299      	cmp	r1, r3
 801b248:	d004      	beq.n	801b254 <cleanup_stdio+0x30>
 801b24a:	4620      	mov	r0, r4
 801b24c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b250:	f002 bc14 	b.w	801da7c <_fflush_r>
 801b254:	bd10      	pop	{r4, pc}
 801b256:	bf00      	nop
 801b258:	20003004 	.word	0x20003004
 801b25c:	2000306c 	.word	0x2000306c
 801b260:	200030d4 	.word	0x200030d4

0801b264 <global_stdio_init.part.0>:
 801b264:	b510      	push	{r4, lr}
 801b266:	4b0b      	ldr	r3, [pc, #44]	@ (801b294 <global_stdio_init.part.0+0x30>)
 801b268:	4c0b      	ldr	r4, [pc, #44]	@ (801b298 <global_stdio_init.part.0+0x34>)
 801b26a:	4a0c      	ldr	r2, [pc, #48]	@ (801b29c <global_stdio_init.part.0+0x38>)
 801b26c:	601a      	str	r2, [r3, #0]
 801b26e:	4620      	mov	r0, r4
 801b270:	2200      	movs	r2, #0
 801b272:	2104      	movs	r1, #4
 801b274:	f7ff ff94 	bl	801b1a0 <std>
 801b278:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b27c:	2201      	movs	r2, #1
 801b27e:	2109      	movs	r1, #9
 801b280:	f7ff ff8e 	bl	801b1a0 <std>
 801b284:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b288:	2202      	movs	r2, #2
 801b28a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b28e:	2112      	movs	r1, #18
 801b290:	f7ff bf86 	b.w	801b1a0 <std>
 801b294:	2000313c 	.word	0x2000313c
 801b298:	20003004 	.word	0x20003004
 801b29c:	0801b20d 	.word	0x0801b20d

0801b2a0 <__sfp_lock_acquire>:
 801b2a0:	4801      	ldr	r0, [pc, #4]	@ (801b2a8 <__sfp_lock_acquire+0x8>)
 801b2a2:	f000 b9e8 	b.w	801b676 <__retarget_lock_acquire_recursive>
 801b2a6:	bf00      	nop
 801b2a8:	20003145 	.word	0x20003145

0801b2ac <__sfp_lock_release>:
 801b2ac:	4801      	ldr	r0, [pc, #4]	@ (801b2b4 <__sfp_lock_release+0x8>)
 801b2ae:	f000 b9e3 	b.w	801b678 <__retarget_lock_release_recursive>
 801b2b2:	bf00      	nop
 801b2b4:	20003145 	.word	0x20003145

0801b2b8 <__sinit>:
 801b2b8:	b510      	push	{r4, lr}
 801b2ba:	4604      	mov	r4, r0
 801b2bc:	f7ff fff0 	bl	801b2a0 <__sfp_lock_acquire>
 801b2c0:	6a23      	ldr	r3, [r4, #32]
 801b2c2:	b11b      	cbz	r3, 801b2cc <__sinit+0x14>
 801b2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b2c8:	f7ff bff0 	b.w	801b2ac <__sfp_lock_release>
 801b2cc:	4b04      	ldr	r3, [pc, #16]	@ (801b2e0 <__sinit+0x28>)
 801b2ce:	6223      	str	r3, [r4, #32]
 801b2d0:	4b04      	ldr	r3, [pc, #16]	@ (801b2e4 <__sinit+0x2c>)
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d1f5      	bne.n	801b2c4 <__sinit+0xc>
 801b2d8:	f7ff ffc4 	bl	801b264 <global_stdio_init.part.0>
 801b2dc:	e7f2      	b.n	801b2c4 <__sinit+0xc>
 801b2de:	bf00      	nop
 801b2e0:	0801b225 	.word	0x0801b225
 801b2e4:	2000313c 	.word	0x2000313c

0801b2e8 <_fwalk_sglue>:
 801b2e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2ec:	4607      	mov	r7, r0
 801b2ee:	4688      	mov	r8, r1
 801b2f0:	4614      	mov	r4, r2
 801b2f2:	2600      	movs	r6, #0
 801b2f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b2f8:	f1b9 0901 	subs.w	r9, r9, #1
 801b2fc:	d505      	bpl.n	801b30a <_fwalk_sglue+0x22>
 801b2fe:	6824      	ldr	r4, [r4, #0]
 801b300:	2c00      	cmp	r4, #0
 801b302:	d1f7      	bne.n	801b2f4 <_fwalk_sglue+0xc>
 801b304:	4630      	mov	r0, r6
 801b306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b30a:	89ab      	ldrh	r3, [r5, #12]
 801b30c:	2b01      	cmp	r3, #1
 801b30e:	d907      	bls.n	801b320 <_fwalk_sglue+0x38>
 801b310:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b314:	3301      	adds	r3, #1
 801b316:	d003      	beq.n	801b320 <_fwalk_sglue+0x38>
 801b318:	4629      	mov	r1, r5
 801b31a:	4638      	mov	r0, r7
 801b31c:	47c0      	blx	r8
 801b31e:	4306      	orrs	r6, r0
 801b320:	3568      	adds	r5, #104	@ 0x68
 801b322:	e7e9      	b.n	801b2f8 <_fwalk_sglue+0x10>

0801b324 <sniprintf>:
 801b324:	b40c      	push	{r2, r3}
 801b326:	b530      	push	{r4, r5, lr}
 801b328:	4b17      	ldr	r3, [pc, #92]	@ (801b388 <sniprintf+0x64>)
 801b32a:	1e0c      	subs	r4, r1, #0
 801b32c:	681d      	ldr	r5, [r3, #0]
 801b32e:	b09d      	sub	sp, #116	@ 0x74
 801b330:	da08      	bge.n	801b344 <sniprintf+0x20>
 801b332:	238b      	movs	r3, #139	@ 0x8b
 801b334:	602b      	str	r3, [r5, #0]
 801b336:	f04f 30ff 	mov.w	r0, #4294967295
 801b33a:	b01d      	add	sp, #116	@ 0x74
 801b33c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b340:	b002      	add	sp, #8
 801b342:	4770      	bx	lr
 801b344:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b348:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b34c:	bf14      	ite	ne
 801b34e:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b352:	4623      	moveq	r3, r4
 801b354:	9304      	str	r3, [sp, #16]
 801b356:	9307      	str	r3, [sp, #28]
 801b358:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b35c:	9002      	str	r0, [sp, #8]
 801b35e:	9006      	str	r0, [sp, #24]
 801b360:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b364:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b366:	ab21      	add	r3, sp, #132	@ 0x84
 801b368:	a902      	add	r1, sp, #8
 801b36a:	4628      	mov	r0, r5
 801b36c:	9301      	str	r3, [sp, #4]
 801b36e:	f002 f8c3 	bl	801d4f8 <_svfiprintf_r>
 801b372:	1c43      	adds	r3, r0, #1
 801b374:	bfbc      	itt	lt
 801b376:	238b      	movlt	r3, #139	@ 0x8b
 801b378:	602b      	strlt	r3, [r5, #0]
 801b37a:	2c00      	cmp	r4, #0
 801b37c:	d0dd      	beq.n	801b33a <sniprintf+0x16>
 801b37e:	9b02      	ldr	r3, [sp, #8]
 801b380:	2200      	movs	r2, #0
 801b382:	701a      	strb	r2, [r3, #0]
 801b384:	e7d9      	b.n	801b33a <sniprintf+0x16>
 801b386:	bf00      	nop
 801b388:	200002bc 	.word	0x200002bc

0801b38c <siprintf>:
 801b38c:	b40e      	push	{r1, r2, r3}
 801b38e:	b500      	push	{lr}
 801b390:	b09c      	sub	sp, #112	@ 0x70
 801b392:	ab1d      	add	r3, sp, #116	@ 0x74
 801b394:	9002      	str	r0, [sp, #8]
 801b396:	9006      	str	r0, [sp, #24]
 801b398:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b39c:	4809      	ldr	r0, [pc, #36]	@ (801b3c4 <siprintf+0x38>)
 801b39e:	9107      	str	r1, [sp, #28]
 801b3a0:	9104      	str	r1, [sp, #16]
 801b3a2:	4909      	ldr	r1, [pc, #36]	@ (801b3c8 <siprintf+0x3c>)
 801b3a4:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3a8:	9105      	str	r1, [sp, #20]
 801b3aa:	6800      	ldr	r0, [r0, #0]
 801b3ac:	9301      	str	r3, [sp, #4]
 801b3ae:	a902      	add	r1, sp, #8
 801b3b0:	f002 f8a2 	bl	801d4f8 <_svfiprintf_r>
 801b3b4:	9b02      	ldr	r3, [sp, #8]
 801b3b6:	2200      	movs	r2, #0
 801b3b8:	701a      	strb	r2, [r3, #0]
 801b3ba:	b01c      	add	sp, #112	@ 0x70
 801b3bc:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3c0:	b003      	add	sp, #12
 801b3c2:	4770      	bx	lr
 801b3c4:	200002bc 	.word	0x200002bc
 801b3c8:	ffff0208 	.word	0xffff0208

0801b3cc <__sread>:
 801b3cc:	b510      	push	{r4, lr}
 801b3ce:	460c      	mov	r4, r1
 801b3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3d4:	f000 f8f0 	bl	801b5b8 <_read_r>
 801b3d8:	2800      	cmp	r0, #0
 801b3da:	bfab      	itete	ge
 801b3dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b3de:	89a3      	ldrhlt	r3, [r4, #12]
 801b3e0:	181b      	addge	r3, r3, r0
 801b3e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b3e6:	bfac      	ite	ge
 801b3e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b3ea:	81a3      	strhlt	r3, [r4, #12]
 801b3ec:	bd10      	pop	{r4, pc}

0801b3ee <__swrite>:
 801b3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3f2:	461f      	mov	r7, r3
 801b3f4:	898b      	ldrh	r3, [r1, #12]
 801b3f6:	05db      	lsls	r3, r3, #23
 801b3f8:	4605      	mov	r5, r0
 801b3fa:	460c      	mov	r4, r1
 801b3fc:	4616      	mov	r6, r2
 801b3fe:	d505      	bpl.n	801b40c <__swrite+0x1e>
 801b400:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b404:	2302      	movs	r3, #2
 801b406:	2200      	movs	r2, #0
 801b408:	f000 f8c4 	bl	801b594 <_lseek_r>
 801b40c:	89a3      	ldrh	r3, [r4, #12]
 801b40e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b412:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b416:	81a3      	strh	r3, [r4, #12]
 801b418:	4632      	mov	r2, r6
 801b41a:	463b      	mov	r3, r7
 801b41c:	4628      	mov	r0, r5
 801b41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b422:	f000 b8eb 	b.w	801b5fc <_write_r>

0801b426 <__sseek>:
 801b426:	b510      	push	{r4, lr}
 801b428:	460c      	mov	r4, r1
 801b42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b42e:	f000 f8b1 	bl	801b594 <_lseek_r>
 801b432:	1c43      	adds	r3, r0, #1
 801b434:	89a3      	ldrh	r3, [r4, #12]
 801b436:	bf15      	itete	ne
 801b438:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b43a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b43e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b442:	81a3      	strheq	r3, [r4, #12]
 801b444:	bf18      	it	ne
 801b446:	81a3      	strhne	r3, [r4, #12]
 801b448:	bd10      	pop	{r4, pc}

0801b44a <__sclose>:
 801b44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b44e:	f000 b891 	b.w	801b574 <_close_r>

0801b452 <memset>:
 801b452:	4402      	add	r2, r0
 801b454:	4603      	mov	r3, r0
 801b456:	4293      	cmp	r3, r2
 801b458:	d100      	bne.n	801b45c <memset+0xa>
 801b45a:	4770      	bx	lr
 801b45c:	f803 1b01 	strb.w	r1, [r3], #1
 801b460:	e7f9      	b.n	801b456 <memset+0x4>

0801b462 <strncmp>:
 801b462:	b510      	push	{r4, lr}
 801b464:	b16a      	cbz	r2, 801b482 <strncmp+0x20>
 801b466:	3901      	subs	r1, #1
 801b468:	1884      	adds	r4, r0, r2
 801b46a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b46e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b472:	429a      	cmp	r2, r3
 801b474:	d103      	bne.n	801b47e <strncmp+0x1c>
 801b476:	42a0      	cmp	r0, r4
 801b478:	d001      	beq.n	801b47e <strncmp+0x1c>
 801b47a:	2a00      	cmp	r2, #0
 801b47c:	d1f5      	bne.n	801b46a <strncmp+0x8>
 801b47e:	1ad0      	subs	r0, r2, r3
 801b480:	bd10      	pop	{r4, pc}
 801b482:	4610      	mov	r0, r2
 801b484:	e7fc      	b.n	801b480 <strncmp+0x1e>
	...

0801b488 <strtok>:
 801b488:	4b16      	ldr	r3, [pc, #88]	@ (801b4e4 <strtok+0x5c>)
 801b48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b48e:	681f      	ldr	r7, [r3, #0]
 801b490:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b492:	4605      	mov	r5, r0
 801b494:	460e      	mov	r6, r1
 801b496:	b9ec      	cbnz	r4, 801b4d4 <strtok+0x4c>
 801b498:	2050      	movs	r0, #80	@ 0x50
 801b49a:	f7fe f863 	bl	8019564 <malloc>
 801b49e:	4602      	mov	r2, r0
 801b4a0:	6478      	str	r0, [r7, #68]	@ 0x44
 801b4a2:	b920      	cbnz	r0, 801b4ae <strtok+0x26>
 801b4a4:	4b10      	ldr	r3, [pc, #64]	@ (801b4e8 <strtok+0x60>)
 801b4a6:	4811      	ldr	r0, [pc, #68]	@ (801b4ec <strtok+0x64>)
 801b4a8:	215b      	movs	r1, #91	@ 0x5b
 801b4aa:	f000 f90b 	bl	801b6c4 <__assert_func>
 801b4ae:	e9c0 4400 	strd	r4, r4, [r0]
 801b4b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b4b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b4ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b4be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b4c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b4c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b4ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b4ce:	6184      	str	r4, [r0, #24]
 801b4d0:	7704      	strb	r4, [r0, #28]
 801b4d2:	6244      	str	r4, [r0, #36]	@ 0x24
 801b4d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b4d6:	4631      	mov	r1, r6
 801b4d8:	4628      	mov	r0, r5
 801b4da:	2301      	movs	r3, #1
 801b4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b4e0:	f000 b806 	b.w	801b4f0 <__strtok_r>
 801b4e4:	200002bc 	.word	0x200002bc
 801b4e8:	08022312 	.word	0x08022312
 801b4ec:	08022329 	.word	0x08022329

0801b4f0 <__strtok_r>:
 801b4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4f2:	4604      	mov	r4, r0
 801b4f4:	b908      	cbnz	r0, 801b4fa <__strtok_r+0xa>
 801b4f6:	6814      	ldr	r4, [r2, #0]
 801b4f8:	b144      	cbz	r4, 801b50c <__strtok_r+0x1c>
 801b4fa:	4620      	mov	r0, r4
 801b4fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b500:	460f      	mov	r7, r1
 801b502:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b506:	b91e      	cbnz	r6, 801b510 <__strtok_r+0x20>
 801b508:	b965      	cbnz	r5, 801b524 <__strtok_r+0x34>
 801b50a:	6015      	str	r5, [r2, #0]
 801b50c:	2000      	movs	r0, #0
 801b50e:	e005      	b.n	801b51c <__strtok_r+0x2c>
 801b510:	42b5      	cmp	r5, r6
 801b512:	d1f6      	bne.n	801b502 <__strtok_r+0x12>
 801b514:	2b00      	cmp	r3, #0
 801b516:	d1f0      	bne.n	801b4fa <__strtok_r+0xa>
 801b518:	6014      	str	r4, [r2, #0]
 801b51a:	7003      	strb	r3, [r0, #0]
 801b51c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b51e:	461c      	mov	r4, r3
 801b520:	e00c      	b.n	801b53c <__strtok_r+0x4c>
 801b522:	b915      	cbnz	r5, 801b52a <__strtok_r+0x3a>
 801b524:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b528:	460e      	mov	r6, r1
 801b52a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b52e:	42ab      	cmp	r3, r5
 801b530:	d1f7      	bne.n	801b522 <__strtok_r+0x32>
 801b532:	2b00      	cmp	r3, #0
 801b534:	d0f3      	beq.n	801b51e <__strtok_r+0x2e>
 801b536:	2300      	movs	r3, #0
 801b538:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b53c:	6014      	str	r4, [r2, #0]
 801b53e:	e7ed      	b.n	801b51c <__strtok_r+0x2c>

0801b540 <strstr>:
 801b540:	780a      	ldrb	r2, [r1, #0]
 801b542:	b570      	push	{r4, r5, r6, lr}
 801b544:	b96a      	cbnz	r2, 801b562 <strstr+0x22>
 801b546:	bd70      	pop	{r4, r5, r6, pc}
 801b548:	429a      	cmp	r2, r3
 801b54a:	d109      	bne.n	801b560 <strstr+0x20>
 801b54c:	460c      	mov	r4, r1
 801b54e:	4605      	mov	r5, r0
 801b550:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b554:	2b00      	cmp	r3, #0
 801b556:	d0f6      	beq.n	801b546 <strstr+0x6>
 801b558:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b55c:	429e      	cmp	r6, r3
 801b55e:	d0f7      	beq.n	801b550 <strstr+0x10>
 801b560:	3001      	adds	r0, #1
 801b562:	7803      	ldrb	r3, [r0, #0]
 801b564:	2b00      	cmp	r3, #0
 801b566:	d1ef      	bne.n	801b548 <strstr+0x8>
 801b568:	4618      	mov	r0, r3
 801b56a:	e7ec      	b.n	801b546 <strstr+0x6>

0801b56c <_localeconv_r>:
 801b56c:	4800      	ldr	r0, [pc, #0]	@ (801b570 <_localeconv_r+0x4>)
 801b56e:	4770      	bx	lr
 801b570:	20000240 	.word	0x20000240

0801b574 <_close_r>:
 801b574:	b538      	push	{r3, r4, r5, lr}
 801b576:	4d06      	ldr	r5, [pc, #24]	@ (801b590 <_close_r+0x1c>)
 801b578:	2300      	movs	r3, #0
 801b57a:	4604      	mov	r4, r0
 801b57c:	4608      	mov	r0, r1
 801b57e:	602b      	str	r3, [r5, #0]
 801b580:	f7eb f966 	bl	8006850 <_close>
 801b584:	1c43      	adds	r3, r0, #1
 801b586:	d102      	bne.n	801b58e <_close_r+0x1a>
 801b588:	682b      	ldr	r3, [r5, #0]
 801b58a:	b103      	cbz	r3, 801b58e <_close_r+0x1a>
 801b58c:	6023      	str	r3, [r4, #0]
 801b58e:	bd38      	pop	{r3, r4, r5, pc}
 801b590:	20003140 	.word	0x20003140

0801b594 <_lseek_r>:
 801b594:	b538      	push	{r3, r4, r5, lr}
 801b596:	4d07      	ldr	r5, [pc, #28]	@ (801b5b4 <_lseek_r+0x20>)
 801b598:	4604      	mov	r4, r0
 801b59a:	4608      	mov	r0, r1
 801b59c:	4611      	mov	r1, r2
 801b59e:	2200      	movs	r2, #0
 801b5a0:	602a      	str	r2, [r5, #0]
 801b5a2:	461a      	mov	r2, r3
 801b5a4:	f7eb f97b 	bl	800689e <_lseek>
 801b5a8:	1c43      	adds	r3, r0, #1
 801b5aa:	d102      	bne.n	801b5b2 <_lseek_r+0x1e>
 801b5ac:	682b      	ldr	r3, [r5, #0]
 801b5ae:	b103      	cbz	r3, 801b5b2 <_lseek_r+0x1e>
 801b5b0:	6023      	str	r3, [r4, #0]
 801b5b2:	bd38      	pop	{r3, r4, r5, pc}
 801b5b4:	20003140 	.word	0x20003140

0801b5b8 <_read_r>:
 801b5b8:	b538      	push	{r3, r4, r5, lr}
 801b5ba:	4d07      	ldr	r5, [pc, #28]	@ (801b5d8 <_read_r+0x20>)
 801b5bc:	4604      	mov	r4, r0
 801b5be:	4608      	mov	r0, r1
 801b5c0:	4611      	mov	r1, r2
 801b5c2:	2200      	movs	r2, #0
 801b5c4:	602a      	str	r2, [r5, #0]
 801b5c6:	461a      	mov	r2, r3
 801b5c8:	f7eb f909 	bl	80067de <_read>
 801b5cc:	1c43      	adds	r3, r0, #1
 801b5ce:	d102      	bne.n	801b5d6 <_read_r+0x1e>
 801b5d0:	682b      	ldr	r3, [r5, #0]
 801b5d2:	b103      	cbz	r3, 801b5d6 <_read_r+0x1e>
 801b5d4:	6023      	str	r3, [r4, #0]
 801b5d6:	bd38      	pop	{r3, r4, r5, pc}
 801b5d8:	20003140 	.word	0x20003140

0801b5dc <_sbrk_r>:
 801b5dc:	b538      	push	{r3, r4, r5, lr}
 801b5de:	4d06      	ldr	r5, [pc, #24]	@ (801b5f8 <_sbrk_r+0x1c>)
 801b5e0:	2300      	movs	r3, #0
 801b5e2:	4604      	mov	r4, r0
 801b5e4:	4608      	mov	r0, r1
 801b5e6:	602b      	str	r3, [r5, #0]
 801b5e8:	f7eb f966 	bl	80068b8 <_sbrk>
 801b5ec:	1c43      	adds	r3, r0, #1
 801b5ee:	d102      	bne.n	801b5f6 <_sbrk_r+0x1a>
 801b5f0:	682b      	ldr	r3, [r5, #0]
 801b5f2:	b103      	cbz	r3, 801b5f6 <_sbrk_r+0x1a>
 801b5f4:	6023      	str	r3, [r4, #0]
 801b5f6:	bd38      	pop	{r3, r4, r5, pc}
 801b5f8:	20003140 	.word	0x20003140

0801b5fc <_write_r>:
 801b5fc:	b538      	push	{r3, r4, r5, lr}
 801b5fe:	4d07      	ldr	r5, [pc, #28]	@ (801b61c <_write_r+0x20>)
 801b600:	4604      	mov	r4, r0
 801b602:	4608      	mov	r0, r1
 801b604:	4611      	mov	r1, r2
 801b606:	2200      	movs	r2, #0
 801b608:	602a      	str	r2, [r5, #0]
 801b60a:	461a      	mov	r2, r3
 801b60c:	f7eb f904 	bl	8006818 <_write>
 801b610:	1c43      	adds	r3, r0, #1
 801b612:	d102      	bne.n	801b61a <_write_r+0x1e>
 801b614:	682b      	ldr	r3, [r5, #0]
 801b616:	b103      	cbz	r3, 801b61a <_write_r+0x1e>
 801b618:	6023      	str	r3, [r4, #0]
 801b61a:	bd38      	pop	{r3, r4, r5, pc}
 801b61c:	20003140 	.word	0x20003140

0801b620 <__errno>:
 801b620:	4b01      	ldr	r3, [pc, #4]	@ (801b628 <__errno+0x8>)
 801b622:	6818      	ldr	r0, [r3, #0]
 801b624:	4770      	bx	lr
 801b626:	bf00      	nop
 801b628:	200002bc 	.word	0x200002bc

0801b62c <__libc_init_array>:
 801b62c:	b570      	push	{r4, r5, r6, lr}
 801b62e:	4d0d      	ldr	r5, [pc, #52]	@ (801b664 <__libc_init_array+0x38>)
 801b630:	4c0d      	ldr	r4, [pc, #52]	@ (801b668 <__libc_init_array+0x3c>)
 801b632:	1b64      	subs	r4, r4, r5
 801b634:	10a4      	asrs	r4, r4, #2
 801b636:	2600      	movs	r6, #0
 801b638:	42a6      	cmp	r6, r4
 801b63a:	d109      	bne.n	801b650 <__libc_init_array+0x24>
 801b63c:	4d0b      	ldr	r5, [pc, #44]	@ (801b66c <__libc_init_array+0x40>)
 801b63e:	4c0c      	ldr	r4, [pc, #48]	@ (801b670 <__libc_init_array+0x44>)
 801b640:	f004 faba 	bl	801fbb8 <_init>
 801b644:	1b64      	subs	r4, r4, r5
 801b646:	10a4      	asrs	r4, r4, #2
 801b648:	2600      	movs	r6, #0
 801b64a:	42a6      	cmp	r6, r4
 801b64c:	d105      	bne.n	801b65a <__libc_init_array+0x2e>
 801b64e:	bd70      	pop	{r4, r5, r6, pc}
 801b650:	f855 3b04 	ldr.w	r3, [r5], #4
 801b654:	4798      	blx	r3
 801b656:	3601      	adds	r6, #1
 801b658:	e7ee      	b.n	801b638 <__libc_init_array+0xc>
 801b65a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b65e:	4798      	blx	r3
 801b660:	3601      	adds	r6, #1
 801b662:	e7f2      	b.n	801b64a <__libc_init_array+0x1e>
 801b664:	08022808 	.word	0x08022808
 801b668:	08022808 	.word	0x08022808
 801b66c:	08022808 	.word	0x08022808
 801b670:	0802280c 	.word	0x0802280c

0801b674 <__retarget_lock_init_recursive>:
 801b674:	4770      	bx	lr

0801b676 <__retarget_lock_acquire_recursive>:
 801b676:	4770      	bx	lr

0801b678 <__retarget_lock_release_recursive>:
 801b678:	4770      	bx	lr

0801b67a <strcpy>:
 801b67a:	4603      	mov	r3, r0
 801b67c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b680:	f803 2b01 	strb.w	r2, [r3], #1
 801b684:	2a00      	cmp	r2, #0
 801b686:	d1f9      	bne.n	801b67c <strcpy+0x2>
 801b688:	4770      	bx	lr

0801b68a <memcpy>:
 801b68a:	440a      	add	r2, r1
 801b68c:	4291      	cmp	r1, r2
 801b68e:	f100 33ff 	add.w	r3, r0, #4294967295
 801b692:	d100      	bne.n	801b696 <memcpy+0xc>
 801b694:	4770      	bx	lr
 801b696:	b510      	push	{r4, lr}
 801b698:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b69c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b6a0:	4291      	cmp	r1, r2
 801b6a2:	d1f9      	bne.n	801b698 <memcpy+0xe>
 801b6a4:	bd10      	pop	{r4, pc}
	...

0801b6a8 <nan>:
 801b6a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b6b0 <nan+0x8>
 801b6ac:	4770      	bx	lr
 801b6ae:	bf00      	nop
 801b6b0:	00000000 	.word	0x00000000
 801b6b4:	7ff80000 	.word	0x7ff80000

0801b6b8 <nanf>:
 801b6b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b6c0 <nanf+0x8>
 801b6bc:	4770      	bx	lr
 801b6be:	bf00      	nop
 801b6c0:	7fc00000 	.word	0x7fc00000

0801b6c4 <__assert_func>:
 801b6c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b6c6:	4614      	mov	r4, r2
 801b6c8:	461a      	mov	r2, r3
 801b6ca:	4b09      	ldr	r3, [pc, #36]	@ (801b6f0 <__assert_func+0x2c>)
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	4605      	mov	r5, r0
 801b6d0:	68d8      	ldr	r0, [r3, #12]
 801b6d2:	b954      	cbnz	r4, 801b6ea <__assert_func+0x26>
 801b6d4:	4b07      	ldr	r3, [pc, #28]	@ (801b6f4 <__assert_func+0x30>)
 801b6d6:	461c      	mov	r4, r3
 801b6d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b6dc:	9100      	str	r1, [sp, #0]
 801b6de:	462b      	mov	r3, r5
 801b6e0:	4905      	ldr	r1, [pc, #20]	@ (801b6f8 <__assert_func+0x34>)
 801b6e2:	f002 f9f3 	bl	801dacc <fiprintf>
 801b6e6:	f002 fab1 	bl	801dc4c <abort>
 801b6ea:	4b04      	ldr	r3, [pc, #16]	@ (801b6fc <__assert_func+0x38>)
 801b6ec:	e7f4      	b.n	801b6d8 <__assert_func+0x14>
 801b6ee:	bf00      	nop
 801b6f0:	200002bc 	.word	0x200002bc
 801b6f4:	080223c6 	.word	0x080223c6
 801b6f8:	08022398 	.word	0x08022398
 801b6fc:	0802238b 	.word	0x0802238b

0801b700 <quorem>:
 801b700:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b704:	6903      	ldr	r3, [r0, #16]
 801b706:	690c      	ldr	r4, [r1, #16]
 801b708:	42a3      	cmp	r3, r4
 801b70a:	4607      	mov	r7, r0
 801b70c:	db7e      	blt.n	801b80c <quorem+0x10c>
 801b70e:	3c01      	subs	r4, #1
 801b710:	f101 0814 	add.w	r8, r1, #20
 801b714:	00a3      	lsls	r3, r4, #2
 801b716:	f100 0514 	add.w	r5, r0, #20
 801b71a:	9300      	str	r3, [sp, #0]
 801b71c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b720:	9301      	str	r3, [sp, #4]
 801b722:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b726:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b72a:	3301      	adds	r3, #1
 801b72c:	429a      	cmp	r2, r3
 801b72e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b732:	fbb2 f6f3 	udiv	r6, r2, r3
 801b736:	d32e      	bcc.n	801b796 <quorem+0x96>
 801b738:	f04f 0a00 	mov.w	sl, #0
 801b73c:	46c4      	mov	ip, r8
 801b73e:	46ae      	mov	lr, r5
 801b740:	46d3      	mov	fp, sl
 801b742:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b746:	b298      	uxth	r0, r3
 801b748:	fb06 a000 	mla	r0, r6, r0, sl
 801b74c:	0c02      	lsrs	r2, r0, #16
 801b74e:	0c1b      	lsrs	r3, r3, #16
 801b750:	fb06 2303 	mla	r3, r6, r3, r2
 801b754:	f8de 2000 	ldr.w	r2, [lr]
 801b758:	b280      	uxth	r0, r0
 801b75a:	b292      	uxth	r2, r2
 801b75c:	1a12      	subs	r2, r2, r0
 801b75e:	445a      	add	r2, fp
 801b760:	f8de 0000 	ldr.w	r0, [lr]
 801b764:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b768:	b29b      	uxth	r3, r3
 801b76a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b76e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b772:	b292      	uxth	r2, r2
 801b774:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b778:	45e1      	cmp	r9, ip
 801b77a:	f84e 2b04 	str.w	r2, [lr], #4
 801b77e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b782:	d2de      	bcs.n	801b742 <quorem+0x42>
 801b784:	9b00      	ldr	r3, [sp, #0]
 801b786:	58eb      	ldr	r3, [r5, r3]
 801b788:	b92b      	cbnz	r3, 801b796 <quorem+0x96>
 801b78a:	9b01      	ldr	r3, [sp, #4]
 801b78c:	3b04      	subs	r3, #4
 801b78e:	429d      	cmp	r5, r3
 801b790:	461a      	mov	r2, r3
 801b792:	d32f      	bcc.n	801b7f4 <quorem+0xf4>
 801b794:	613c      	str	r4, [r7, #16]
 801b796:	4638      	mov	r0, r7
 801b798:	f001 fc58 	bl	801d04c <__mcmp>
 801b79c:	2800      	cmp	r0, #0
 801b79e:	db25      	blt.n	801b7ec <quorem+0xec>
 801b7a0:	4629      	mov	r1, r5
 801b7a2:	2000      	movs	r0, #0
 801b7a4:	f858 2b04 	ldr.w	r2, [r8], #4
 801b7a8:	f8d1 c000 	ldr.w	ip, [r1]
 801b7ac:	fa1f fe82 	uxth.w	lr, r2
 801b7b0:	fa1f f38c 	uxth.w	r3, ip
 801b7b4:	eba3 030e 	sub.w	r3, r3, lr
 801b7b8:	4403      	add	r3, r0
 801b7ba:	0c12      	lsrs	r2, r2, #16
 801b7bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b7c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b7c4:	b29b      	uxth	r3, r3
 801b7c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b7ca:	45c1      	cmp	r9, r8
 801b7cc:	f841 3b04 	str.w	r3, [r1], #4
 801b7d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b7d4:	d2e6      	bcs.n	801b7a4 <quorem+0xa4>
 801b7d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b7da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b7de:	b922      	cbnz	r2, 801b7ea <quorem+0xea>
 801b7e0:	3b04      	subs	r3, #4
 801b7e2:	429d      	cmp	r5, r3
 801b7e4:	461a      	mov	r2, r3
 801b7e6:	d30b      	bcc.n	801b800 <quorem+0x100>
 801b7e8:	613c      	str	r4, [r7, #16]
 801b7ea:	3601      	adds	r6, #1
 801b7ec:	4630      	mov	r0, r6
 801b7ee:	b003      	add	sp, #12
 801b7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7f4:	6812      	ldr	r2, [r2, #0]
 801b7f6:	3b04      	subs	r3, #4
 801b7f8:	2a00      	cmp	r2, #0
 801b7fa:	d1cb      	bne.n	801b794 <quorem+0x94>
 801b7fc:	3c01      	subs	r4, #1
 801b7fe:	e7c6      	b.n	801b78e <quorem+0x8e>
 801b800:	6812      	ldr	r2, [r2, #0]
 801b802:	3b04      	subs	r3, #4
 801b804:	2a00      	cmp	r2, #0
 801b806:	d1ef      	bne.n	801b7e8 <quorem+0xe8>
 801b808:	3c01      	subs	r4, #1
 801b80a:	e7ea      	b.n	801b7e2 <quorem+0xe2>
 801b80c:	2000      	movs	r0, #0
 801b80e:	e7ee      	b.n	801b7ee <quorem+0xee>

0801b810 <_dtoa_r>:
 801b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b814:	69c7      	ldr	r7, [r0, #28]
 801b816:	b099      	sub	sp, #100	@ 0x64
 801b818:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b81c:	ec55 4b10 	vmov	r4, r5, d0
 801b820:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801b822:	9109      	str	r1, [sp, #36]	@ 0x24
 801b824:	4683      	mov	fp, r0
 801b826:	920e      	str	r2, [sp, #56]	@ 0x38
 801b828:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b82a:	b97f      	cbnz	r7, 801b84c <_dtoa_r+0x3c>
 801b82c:	2010      	movs	r0, #16
 801b82e:	f7fd fe99 	bl	8019564 <malloc>
 801b832:	4602      	mov	r2, r0
 801b834:	f8cb 001c 	str.w	r0, [fp, #28]
 801b838:	b920      	cbnz	r0, 801b844 <_dtoa_r+0x34>
 801b83a:	4ba7      	ldr	r3, [pc, #668]	@ (801bad8 <_dtoa_r+0x2c8>)
 801b83c:	21ef      	movs	r1, #239	@ 0xef
 801b83e:	48a7      	ldr	r0, [pc, #668]	@ (801badc <_dtoa_r+0x2cc>)
 801b840:	f7ff ff40 	bl	801b6c4 <__assert_func>
 801b844:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b848:	6007      	str	r7, [r0, #0]
 801b84a:	60c7      	str	r7, [r0, #12]
 801b84c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b850:	6819      	ldr	r1, [r3, #0]
 801b852:	b159      	cbz	r1, 801b86c <_dtoa_r+0x5c>
 801b854:	685a      	ldr	r2, [r3, #4]
 801b856:	604a      	str	r2, [r1, #4]
 801b858:	2301      	movs	r3, #1
 801b85a:	4093      	lsls	r3, r2
 801b85c:	608b      	str	r3, [r1, #8]
 801b85e:	4658      	mov	r0, fp
 801b860:	f001 f970 	bl	801cb44 <_Bfree>
 801b864:	f8db 301c 	ldr.w	r3, [fp, #28]
 801b868:	2200      	movs	r2, #0
 801b86a:	601a      	str	r2, [r3, #0]
 801b86c:	1e2b      	subs	r3, r5, #0
 801b86e:	bfb9      	ittee	lt
 801b870:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b874:	9303      	strlt	r3, [sp, #12]
 801b876:	2300      	movge	r3, #0
 801b878:	6033      	strge	r3, [r6, #0]
 801b87a:	9f03      	ldr	r7, [sp, #12]
 801b87c:	4b98      	ldr	r3, [pc, #608]	@ (801bae0 <_dtoa_r+0x2d0>)
 801b87e:	bfbc      	itt	lt
 801b880:	2201      	movlt	r2, #1
 801b882:	6032      	strlt	r2, [r6, #0]
 801b884:	43bb      	bics	r3, r7
 801b886:	d112      	bne.n	801b8ae <_dtoa_r+0x9e>
 801b888:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b88a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b88e:	6013      	str	r3, [r2, #0]
 801b890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b894:	4323      	orrs	r3, r4
 801b896:	f000 854d 	beq.w	801c334 <_dtoa_r+0xb24>
 801b89a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b89c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801baf4 <_dtoa_r+0x2e4>
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	f000 854f 	beq.w	801c344 <_dtoa_r+0xb34>
 801b8a6:	f10a 0303 	add.w	r3, sl, #3
 801b8aa:	f000 bd49 	b.w	801c340 <_dtoa_r+0xb30>
 801b8ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b8b2:	2200      	movs	r2, #0
 801b8b4:	ec51 0b17 	vmov	r0, r1, d7
 801b8b8:	2300      	movs	r3, #0
 801b8ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801b8be:	f7e5 f8db 	bl	8000a78 <__aeabi_dcmpeq>
 801b8c2:	4680      	mov	r8, r0
 801b8c4:	b158      	cbz	r0, 801b8de <_dtoa_r+0xce>
 801b8c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b8c8:	2301      	movs	r3, #1
 801b8ca:	6013      	str	r3, [r2, #0]
 801b8cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801b8ce:	b113      	cbz	r3, 801b8d6 <_dtoa_r+0xc6>
 801b8d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801b8d2:	4b84      	ldr	r3, [pc, #528]	@ (801bae4 <_dtoa_r+0x2d4>)
 801b8d4:	6013      	str	r3, [r2, #0]
 801b8d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801baf8 <_dtoa_r+0x2e8>
 801b8da:	f000 bd33 	b.w	801c344 <_dtoa_r+0xb34>
 801b8de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801b8e2:	aa16      	add	r2, sp, #88	@ 0x58
 801b8e4:	a917      	add	r1, sp, #92	@ 0x5c
 801b8e6:	4658      	mov	r0, fp
 801b8e8:	f001 fcd0 	bl	801d28c <__d2b>
 801b8ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b8f0:	4681      	mov	r9, r0
 801b8f2:	2e00      	cmp	r6, #0
 801b8f4:	d077      	beq.n	801b9e6 <_dtoa_r+0x1d6>
 801b8f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b8f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801b8fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b900:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b904:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b908:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b90c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b910:	4619      	mov	r1, r3
 801b912:	2200      	movs	r2, #0
 801b914:	4b74      	ldr	r3, [pc, #464]	@ (801bae8 <_dtoa_r+0x2d8>)
 801b916:	f7e4 fc8f 	bl	8000238 <__aeabi_dsub>
 801b91a:	a369      	add	r3, pc, #420	@ (adr r3, 801bac0 <_dtoa_r+0x2b0>)
 801b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b920:	f7e4 fe42 	bl	80005a8 <__aeabi_dmul>
 801b924:	a368      	add	r3, pc, #416	@ (adr r3, 801bac8 <_dtoa_r+0x2b8>)
 801b926:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b92a:	f7e4 fc87 	bl	800023c <__adddf3>
 801b92e:	4604      	mov	r4, r0
 801b930:	4630      	mov	r0, r6
 801b932:	460d      	mov	r5, r1
 801b934:	f7e4 fdce 	bl	80004d4 <__aeabi_i2d>
 801b938:	a365      	add	r3, pc, #404	@ (adr r3, 801bad0 <_dtoa_r+0x2c0>)
 801b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b93e:	f7e4 fe33 	bl	80005a8 <__aeabi_dmul>
 801b942:	4602      	mov	r2, r0
 801b944:	460b      	mov	r3, r1
 801b946:	4620      	mov	r0, r4
 801b948:	4629      	mov	r1, r5
 801b94a:	f7e4 fc77 	bl	800023c <__adddf3>
 801b94e:	4604      	mov	r4, r0
 801b950:	460d      	mov	r5, r1
 801b952:	f7e5 f8d9 	bl	8000b08 <__aeabi_d2iz>
 801b956:	2200      	movs	r2, #0
 801b958:	4607      	mov	r7, r0
 801b95a:	2300      	movs	r3, #0
 801b95c:	4620      	mov	r0, r4
 801b95e:	4629      	mov	r1, r5
 801b960:	f7e5 f894 	bl	8000a8c <__aeabi_dcmplt>
 801b964:	b140      	cbz	r0, 801b978 <_dtoa_r+0x168>
 801b966:	4638      	mov	r0, r7
 801b968:	f7e4 fdb4 	bl	80004d4 <__aeabi_i2d>
 801b96c:	4622      	mov	r2, r4
 801b96e:	462b      	mov	r3, r5
 801b970:	f7e5 f882 	bl	8000a78 <__aeabi_dcmpeq>
 801b974:	b900      	cbnz	r0, 801b978 <_dtoa_r+0x168>
 801b976:	3f01      	subs	r7, #1
 801b978:	2f16      	cmp	r7, #22
 801b97a:	d851      	bhi.n	801ba20 <_dtoa_r+0x210>
 801b97c:	4b5b      	ldr	r3, [pc, #364]	@ (801baec <_dtoa_r+0x2dc>)
 801b97e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b982:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801b98a:	f7e5 f87f 	bl	8000a8c <__aeabi_dcmplt>
 801b98e:	2800      	cmp	r0, #0
 801b990:	d048      	beq.n	801ba24 <_dtoa_r+0x214>
 801b992:	3f01      	subs	r7, #1
 801b994:	2300      	movs	r3, #0
 801b996:	9312      	str	r3, [sp, #72]	@ 0x48
 801b998:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b99a:	1b9b      	subs	r3, r3, r6
 801b99c:	1e5a      	subs	r2, r3, #1
 801b99e:	bf44      	itt	mi
 801b9a0:	f1c3 0801 	rsbmi	r8, r3, #1
 801b9a4:	2300      	movmi	r3, #0
 801b9a6:	9208      	str	r2, [sp, #32]
 801b9a8:	bf54      	ite	pl
 801b9aa:	f04f 0800 	movpl.w	r8, #0
 801b9ae:	9308      	strmi	r3, [sp, #32]
 801b9b0:	2f00      	cmp	r7, #0
 801b9b2:	db39      	blt.n	801ba28 <_dtoa_r+0x218>
 801b9b4:	9b08      	ldr	r3, [sp, #32]
 801b9b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 801b9b8:	443b      	add	r3, r7
 801b9ba:	9308      	str	r3, [sp, #32]
 801b9bc:	2300      	movs	r3, #0
 801b9be:	930a      	str	r3, [sp, #40]	@ 0x28
 801b9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b9c2:	2b09      	cmp	r3, #9
 801b9c4:	d864      	bhi.n	801ba90 <_dtoa_r+0x280>
 801b9c6:	2b05      	cmp	r3, #5
 801b9c8:	bfc4      	itt	gt
 801b9ca:	3b04      	subgt	r3, #4
 801b9cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801b9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b9d0:	f1a3 0302 	sub.w	r3, r3, #2
 801b9d4:	bfcc      	ite	gt
 801b9d6:	2400      	movgt	r4, #0
 801b9d8:	2401      	movle	r4, #1
 801b9da:	2b03      	cmp	r3, #3
 801b9dc:	d863      	bhi.n	801baa6 <_dtoa_r+0x296>
 801b9de:	e8df f003 	tbb	[pc, r3]
 801b9e2:	372a      	.short	0x372a
 801b9e4:	5535      	.short	0x5535
 801b9e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801b9ea:	441e      	add	r6, r3
 801b9ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801b9f0:	2b20      	cmp	r3, #32
 801b9f2:	bfc1      	itttt	gt
 801b9f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801b9f8:	409f      	lslgt	r7, r3
 801b9fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801b9fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ba02:	bfd6      	itet	le
 801ba04:	f1c3 0320 	rsble	r3, r3, #32
 801ba08:	ea47 0003 	orrgt.w	r0, r7, r3
 801ba0c:	fa04 f003 	lslle.w	r0, r4, r3
 801ba10:	f7e4 fd50 	bl	80004b4 <__aeabi_ui2d>
 801ba14:	2201      	movs	r2, #1
 801ba16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ba1a:	3e01      	subs	r6, #1
 801ba1c:	9214      	str	r2, [sp, #80]	@ 0x50
 801ba1e:	e777      	b.n	801b910 <_dtoa_r+0x100>
 801ba20:	2301      	movs	r3, #1
 801ba22:	e7b8      	b.n	801b996 <_dtoa_r+0x186>
 801ba24:	9012      	str	r0, [sp, #72]	@ 0x48
 801ba26:	e7b7      	b.n	801b998 <_dtoa_r+0x188>
 801ba28:	427b      	negs	r3, r7
 801ba2a:	930a      	str	r3, [sp, #40]	@ 0x28
 801ba2c:	2300      	movs	r3, #0
 801ba2e:	eba8 0807 	sub.w	r8, r8, r7
 801ba32:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ba34:	e7c4      	b.n	801b9c0 <_dtoa_r+0x1b0>
 801ba36:	2300      	movs	r3, #0
 801ba38:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ba3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	dc35      	bgt.n	801baac <_dtoa_r+0x29c>
 801ba40:	2301      	movs	r3, #1
 801ba42:	9300      	str	r3, [sp, #0]
 801ba44:	9307      	str	r3, [sp, #28]
 801ba46:	461a      	mov	r2, r3
 801ba48:	920e      	str	r2, [sp, #56]	@ 0x38
 801ba4a:	e00b      	b.n	801ba64 <_dtoa_r+0x254>
 801ba4c:	2301      	movs	r3, #1
 801ba4e:	e7f3      	b.n	801ba38 <_dtoa_r+0x228>
 801ba50:	2300      	movs	r3, #0
 801ba52:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ba54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ba56:	18fb      	adds	r3, r7, r3
 801ba58:	9300      	str	r3, [sp, #0]
 801ba5a:	3301      	adds	r3, #1
 801ba5c:	2b01      	cmp	r3, #1
 801ba5e:	9307      	str	r3, [sp, #28]
 801ba60:	bfb8      	it	lt
 801ba62:	2301      	movlt	r3, #1
 801ba64:	f8db 001c 	ldr.w	r0, [fp, #28]
 801ba68:	2100      	movs	r1, #0
 801ba6a:	2204      	movs	r2, #4
 801ba6c:	f102 0514 	add.w	r5, r2, #20
 801ba70:	429d      	cmp	r5, r3
 801ba72:	d91f      	bls.n	801bab4 <_dtoa_r+0x2a4>
 801ba74:	6041      	str	r1, [r0, #4]
 801ba76:	4658      	mov	r0, fp
 801ba78:	f001 f824 	bl	801cac4 <_Balloc>
 801ba7c:	4682      	mov	sl, r0
 801ba7e:	2800      	cmp	r0, #0
 801ba80:	d13c      	bne.n	801bafc <_dtoa_r+0x2ec>
 801ba82:	4b1b      	ldr	r3, [pc, #108]	@ (801baf0 <_dtoa_r+0x2e0>)
 801ba84:	4602      	mov	r2, r0
 801ba86:	f240 11af 	movw	r1, #431	@ 0x1af
 801ba8a:	e6d8      	b.n	801b83e <_dtoa_r+0x2e>
 801ba8c:	2301      	movs	r3, #1
 801ba8e:	e7e0      	b.n	801ba52 <_dtoa_r+0x242>
 801ba90:	2401      	movs	r4, #1
 801ba92:	2300      	movs	r3, #0
 801ba94:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba96:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ba98:	f04f 33ff 	mov.w	r3, #4294967295
 801ba9c:	9300      	str	r3, [sp, #0]
 801ba9e:	9307      	str	r3, [sp, #28]
 801baa0:	2200      	movs	r2, #0
 801baa2:	2312      	movs	r3, #18
 801baa4:	e7d0      	b.n	801ba48 <_dtoa_r+0x238>
 801baa6:	2301      	movs	r3, #1
 801baa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801baaa:	e7f5      	b.n	801ba98 <_dtoa_r+0x288>
 801baac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801baae:	9300      	str	r3, [sp, #0]
 801bab0:	9307      	str	r3, [sp, #28]
 801bab2:	e7d7      	b.n	801ba64 <_dtoa_r+0x254>
 801bab4:	3101      	adds	r1, #1
 801bab6:	0052      	lsls	r2, r2, #1
 801bab8:	e7d8      	b.n	801ba6c <_dtoa_r+0x25c>
 801baba:	bf00      	nop
 801babc:	f3af 8000 	nop.w
 801bac0:	636f4361 	.word	0x636f4361
 801bac4:	3fd287a7 	.word	0x3fd287a7
 801bac8:	8b60c8b3 	.word	0x8b60c8b3
 801bacc:	3fc68a28 	.word	0x3fc68a28
 801bad0:	509f79fb 	.word	0x509f79fb
 801bad4:	3fd34413 	.word	0x3fd34413
 801bad8:	08022312 	.word	0x08022312
 801badc:	080223d4 	.word	0x080223d4
 801bae0:	7ff00000 	.word	0x7ff00000
 801bae4:	080222ea 	.word	0x080222ea
 801bae8:	3ff80000 	.word	0x3ff80000
 801baec:	08022530 	.word	0x08022530
 801baf0:	0802242c 	.word	0x0802242c
 801baf4:	080223d0 	.word	0x080223d0
 801baf8:	080222e9 	.word	0x080222e9
 801bafc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bb00:	6018      	str	r0, [r3, #0]
 801bb02:	9b07      	ldr	r3, [sp, #28]
 801bb04:	2b0e      	cmp	r3, #14
 801bb06:	f200 80a4 	bhi.w	801bc52 <_dtoa_r+0x442>
 801bb0a:	2c00      	cmp	r4, #0
 801bb0c:	f000 80a1 	beq.w	801bc52 <_dtoa_r+0x442>
 801bb10:	2f00      	cmp	r7, #0
 801bb12:	dd33      	ble.n	801bb7c <_dtoa_r+0x36c>
 801bb14:	4bad      	ldr	r3, [pc, #692]	@ (801bdcc <_dtoa_r+0x5bc>)
 801bb16:	f007 020f 	and.w	r2, r7, #15
 801bb1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bb1e:	ed93 7b00 	vldr	d7, [r3]
 801bb22:	05f8      	lsls	r0, r7, #23
 801bb24:	ed8d 7b04 	vstr	d7, [sp, #16]
 801bb28:	ea4f 1427 	mov.w	r4, r7, asr #4
 801bb2c:	d516      	bpl.n	801bb5c <_dtoa_r+0x34c>
 801bb2e:	4ba8      	ldr	r3, [pc, #672]	@ (801bdd0 <_dtoa_r+0x5c0>)
 801bb30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bb34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bb38:	f7e4 fe60 	bl	80007fc <__aeabi_ddiv>
 801bb3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb40:	f004 040f 	and.w	r4, r4, #15
 801bb44:	2603      	movs	r6, #3
 801bb46:	4da2      	ldr	r5, [pc, #648]	@ (801bdd0 <_dtoa_r+0x5c0>)
 801bb48:	b954      	cbnz	r4, 801bb60 <_dtoa_r+0x350>
 801bb4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb52:	f7e4 fe53 	bl	80007fc <__aeabi_ddiv>
 801bb56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb5a:	e028      	b.n	801bbae <_dtoa_r+0x39e>
 801bb5c:	2602      	movs	r6, #2
 801bb5e:	e7f2      	b.n	801bb46 <_dtoa_r+0x336>
 801bb60:	07e1      	lsls	r1, r4, #31
 801bb62:	d508      	bpl.n	801bb76 <_dtoa_r+0x366>
 801bb64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb68:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bb6c:	f7e4 fd1c 	bl	80005a8 <__aeabi_dmul>
 801bb70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb74:	3601      	adds	r6, #1
 801bb76:	1064      	asrs	r4, r4, #1
 801bb78:	3508      	adds	r5, #8
 801bb7a:	e7e5      	b.n	801bb48 <_dtoa_r+0x338>
 801bb7c:	f000 80d2 	beq.w	801bd24 <_dtoa_r+0x514>
 801bb80:	427c      	negs	r4, r7
 801bb82:	4b92      	ldr	r3, [pc, #584]	@ (801bdcc <_dtoa_r+0x5bc>)
 801bb84:	4d92      	ldr	r5, [pc, #584]	@ (801bdd0 <_dtoa_r+0x5c0>)
 801bb86:	f004 020f 	and.w	r2, r4, #15
 801bb8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bb8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bb96:	f7e4 fd07 	bl	80005a8 <__aeabi_dmul>
 801bb9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bb9e:	1124      	asrs	r4, r4, #4
 801bba0:	2300      	movs	r3, #0
 801bba2:	2602      	movs	r6, #2
 801bba4:	2c00      	cmp	r4, #0
 801bba6:	f040 80b2 	bne.w	801bd0e <_dtoa_r+0x4fe>
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d1d3      	bne.n	801bb56 <_dtoa_r+0x346>
 801bbae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bbb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	f000 80b7 	beq.w	801bd28 <_dtoa_r+0x518>
 801bbba:	4b86      	ldr	r3, [pc, #536]	@ (801bdd4 <_dtoa_r+0x5c4>)
 801bbbc:	2200      	movs	r2, #0
 801bbbe:	4620      	mov	r0, r4
 801bbc0:	4629      	mov	r1, r5
 801bbc2:	f7e4 ff63 	bl	8000a8c <__aeabi_dcmplt>
 801bbc6:	2800      	cmp	r0, #0
 801bbc8:	f000 80ae 	beq.w	801bd28 <_dtoa_r+0x518>
 801bbcc:	9b07      	ldr	r3, [sp, #28]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	f000 80aa 	beq.w	801bd28 <_dtoa_r+0x518>
 801bbd4:	9b00      	ldr	r3, [sp, #0]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	dd37      	ble.n	801bc4a <_dtoa_r+0x43a>
 801bbda:	1e7b      	subs	r3, r7, #1
 801bbdc:	9304      	str	r3, [sp, #16]
 801bbde:	4620      	mov	r0, r4
 801bbe0:	4b7d      	ldr	r3, [pc, #500]	@ (801bdd8 <_dtoa_r+0x5c8>)
 801bbe2:	2200      	movs	r2, #0
 801bbe4:	4629      	mov	r1, r5
 801bbe6:	f7e4 fcdf 	bl	80005a8 <__aeabi_dmul>
 801bbea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bbee:	9c00      	ldr	r4, [sp, #0]
 801bbf0:	3601      	adds	r6, #1
 801bbf2:	4630      	mov	r0, r6
 801bbf4:	f7e4 fc6e 	bl	80004d4 <__aeabi_i2d>
 801bbf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bbfc:	f7e4 fcd4 	bl	80005a8 <__aeabi_dmul>
 801bc00:	4b76      	ldr	r3, [pc, #472]	@ (801bddc <_dtoa_r+0x5cc>)
 801bc02:	2200      	movs	r2, #0
 801bc04:	f7e4 fb1a 	bl	800023c <__adddf3>
 801bc08:	4605      	mov	r5, r0
 801bc0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bc0e:	2c00      	cmp	r4, #0
 801bc10:	f040 808d 	bne.w	801bd2e <_dtoa_r+0x51e>
 801bc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc18:	4b71      	ldr	r3, [pc, #452]	@ (801bde0 <_dtoa_r+0x5d0>)
 801bc1a:	2200      	movs	r2, #0
 801bc1c:	f7e4 fb0c 	bl	8000238 <__aeabi_dsub>
 801bc20:	4602      	mov	r2, r0
 801bc22:	460b      	mov	r3, r1
 801bc24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bc28:	462a      	mov	r2, r5
 801bc2a:	4633      	mov	r3, r6
 801bc2c:	f7e4 ff4c 	bl	8000ac8 <__aeabi_dcmpgt>
 801bc30:	2800      	cmp	r0, #0
 801bc32:	f040 828b 	bne.w	801c14c <_dtoa_r+0x93c>
 801bc36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc3a:	462a      	mov	r2, r5
 801bc3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801bc40:	f7e4 ff24 	bl	8000a8c <__aeabi_dcmplt>
 801bc44:	2800      	cmp	r0, #0
 801bc46:	f040 8128 	bne.w	801be9a <_dtoa_r+0x68a>
 801bc4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801bc4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bc52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	f2c0 815a 	blt.w	801bf0e <_dtoa_r+0x6fe>
 801bc5a:	2f0e      	cmp	r7, #14
 801bc5c:	f300 8157 	bgt.w	801bf0e <_dtoa_r+0x6fe>
 801bc60:	4b5a      	ldr	r3, [pc, #360]	@ (801bdcc <_dtoa_r+0x5bc>)
 801bc62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bc66:	ed93 7b00 	vldr	d7, [r3]
 801bc6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	ed8d 7b00 	vstr	d7, [sp]
 801bc72:	da03      	bge.n	801bc7c <_dtoa_r+0x46c>
 801bc74:	9b07      	ldr	r3, [sp, #28]
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	f340 8101 	ble.w	801be7e <_dtoa_r+0x66e>
 801bc7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bc80:	4656      	mov	r6, sl
 801bc82:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc86:	4620      	mov	r0, r4
 801bc88:	4629      	mov	r1, r5
 801bc8a:	f7e4 fdb7 	bl	80007fc <__aeabi_ddiv>
 801bc8e:	f7e4 ff3b 	bl	8000b08 <__aeabi_d2iz>
 801bc92:	4680      	mov	r8, r0
 801bc94:	f7e4 fc1e 	bl	80004d4 <__aeabi_i2d>
 801bc98:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bc9c:	f7e4 fc84 	bl	80005a8 <__aeabi_dmul>
 801bca0:	4602      	mov	r2, r0
 801bca2:	460b      	mov	r3, r1
 801bca4:	4620      	mov	r0, r4
 801bca6:	4629      	mov	r1, r5
 801bca8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801bcac:	f7e4 fac4 	bl	8000238 <__aeabi_dsub>
 801bcb0:	f806 4b01 	strb.w	r4, [r6], #1
 801bcb4:	9d07      	ldr	r5, [sp, #28]
 801bcb6:	eba6 040a 	sub.w	r4, r6, sl
 801bcba:	42a5      	cmp	r5, r4
 801bcbc:	4602      	mov	r2, r0
 801bcbe:	460b      	mov	r3, r1
 801bcc0:	f040 8117 	bne.w	801bef2 <_dtoa_r+0x6e2>
 801bcc4:	f7e4 faba 	bl	800023c <__adddf3>
 801bcc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bccc:	4604      	mov	r4, r0
 801bcce:	460d      	mov	r5, r1
 801bcd0:	f7e4 fefa 	bl	8000ac8 <__aeabi_dcmpgt>
 801bcd4:	2800      	cmp	r0, #0
 801bcd6:	f040 80f9 	bne.w	801becc <_dtoa_r+0x6bc>
 801bcda:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bcde:	4620      	mov	r0, r4
 801bce0:	4629      	mov	r1, r5
 801bce2:	f7e4 fec9 	bl	8000a78 <__aeabi_dcmpeq>
 801bce6:	b118      	cbz	r0, 801bcf0 <_dtoa_r+0x4e0>
 801bce8:	f018 0f01 	tst.w	r8, #1
 801bcec:	f040 80ee 	bne.w	801becc <_dtoa_r+0x6bc>
 801bcf0:	4649      	mov	r1, r9
 801bcf2:	4658      	mov	r0, fp
 801bcf4:	f000 ff26 	bl	801cb44 <_Bfree>
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	7033      	strb	r3, [r6, #0]
 801bcfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bcfe:	3701      	adds	r7, #1
 801bd00:	601f      	str	r7, [r3, #0]
 801bd02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	f000 831d 	beq.w	801c344 <_dtoa_r+0xb34>
 801bd0a:	601e      	str	r6, [r3, #0]
 801bd0c:	e31a      	b.n	801c344 <_dtoa_r+0xb34>
 801bd0e:	07e2      	lsls	r2, r4, #31
 801bd10:	d505      	bpl.n	801bd1e <_dtoa_r+0x50e>
 801bd12:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bd16:	f7e4 fc47 	bl	80005a8 <__aeabi_dmul>
 801bd1a:	3601      	adds	r6, #1
 801bd1c:	2301      	movs	r3, #1
 801bd1e:	1064      	asrs	r4, r4, #1
 801bd20:	3508      	adds	r5, #8
 801bd22:	e73f      	b.n	801bba4 <_dtoa_r+0x394>
 801bd24:	2602      	movs	r6, #2
 801bd26:	e742      	b.n	801bbae <_dtoa_r+0x39e>
 801bd28:	9c07      	ldr	r4, [sp, #28]
 801bd2a:	9704      	str	r7, [sp, #16]
 801bd2c:	e761      	b.n	801bbf2 <_dtoa_r+0x3e2>
 801bd2e:	4b27      	ldr	r3, [pc, #156]	@ (801bdcc <_dtoa_r+0x5bc>)
 801bd30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801bd32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bd36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bd3a:	4454      	add	r4, sl
 801bd3c:	2900      	cmp	r1, #0
 801bd3e:	d053      	beq.n	801bde8 <_dtoa_r+0x5d8>
 801bd40:	4928      	ldr	r1, [pc, #160]	@ (801bde4 <_dtoa_r+0x5d4>)
 801bd42:	2000      	movs	r0, #0
 801bd44:	f7e4 fd5a 	bl	80007fc <__aeabi_ddiv>
 801bd48:	4633      	mov	r3, r6
 801bd4a:	462a      	mov	r2, r5
 801bd4c:	f7e4 fa74 	bl	8000238 <__aeabi_dsub>
 801bd50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bd54:	4656      	mov	r6, sl
 801bd56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd5a:	f7e4 fed5 	bl	8000b08 <__aeabi_d2iz>
 801bd5e:	4605      	mov	r5, r0
 801bd60:	f7e4 fbb8 	bl	80004d4 <__aeabi_i2d>
 801bd64:	4602      	mov	r2, r0
 801bd66:	460b      	mov	r3, r1
 801bd68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd6c:	f7e4 fa64 	bl	8000238 <__aeabi_dsub>
 801bd70:	3530      	adds	r5, #48	@ 0x30
 801bd72:	4602      	mov	r2, r0
 801bd74:	460b      	mov	r3, r1
 801bd76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bd7a:	f806 5b01 	strb.w	r5, [r6], #1
 801bd7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bd82:	f7e4 fe83 	bl	8000a8c <__aeabi_dcmplt>
 801bd86:	2800      	cmp	r0, #0
 801bd88:	d171      	bne.n	801be6e <_dtoa_r+0x65e>
 801bd8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bd8e:	4911      	ldr	r1, [pc, #68]	@ (801bdd4 <_dtoa_r+0x5c4>)
 801bd90:	2000      	movs	r0, #0
 801bd92:	f7e4 fa51 	bl	8000238 <__aeabi_dsub>
 801bd96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801bd9a:	f7e4 fe77 	bl	8000a8c <__aeabi_dcmplt>
 801bd9e:	2800      	cmp	r0, #0
 801bda0:	f040 8095 	bne.w	801bece <_dtoa_r+0x6be>
 801bda4:	42a6      	cmp	r6, r4
 801bda6:	f43f af50 	beq.w	801bc4a <_dtoa_r+0x43a>
 801bdaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801bdae:	4b0a      	ldr	r3, [pc, #40]	@ (801bdd8 <_dtoa_r+0x5c8>)
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	f7e4 fbf9 	bl	80005a8 <__aeabi_dmul>
 801bdb6:	4b08      	ldr	r3, [pc, #32]	@ (801bdd8 <_dtoa_r+0x5c8>)
 801bdb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bdbc:	2200      	movs	r2, #0
 801bdbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdc2:	f7e4 fbf1 	bl	80005a8 <__aeabi_dmul>
 801bdc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bdca:	e7c4      	b.n	801bd56 <_dtoa_r+0x546>
 801bdcc:	08022530 	.word	0x08022530
 801bdd0:	08022508 	.word	0x08022508
 801bdd4:	3ff00000 	.word	0x3ff00000
 801bdd8:	40240000 	.word	0x40240000
 801bddc:	401c0000 	.word	0x401c0000
 801bde0:	40140000 	.word	0x40140000
 801bde4:	3fe00000 	.word	0x3fe00000
 801bde8:	4631      	mov	r1, r6
 801bdea:	4628      	mov	r0, r5
 801bdec:	f7e4 fbdc 	bl	80005a8 <__aeabi_dmul>
 801bdf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801bdf4:	9415      	str	r4, [sp, #84]	@ 0x54
 801bdf6:	4656      	mov	r6, sl
 801bdf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bdfc:	f7e4 fe84 	bl	8000b08 <__aeabi_d2iz>
 801be00:	4605      	mov	r5, r0
 801be02:	f7e4 fb67 	bl	80004d4 <__aeabi_i2d>
 801be06:	4602      	mov	r2, r0
 801be08:	460b      	mov	r3, r1
 801be0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be0e:	f7e4 fa13 	bl	8000238 <__aeabi_dsub>
 801be12:	3530      	adds	r5, #48	@ 0x30
 801be14:	f806 5b01 	strb.w	r5, [r6], #1
 801be18:	4602      	mov	r2, r0
 801be1a:	460b      	mov	r3, r1
 801be1c:	42a6      	cmp	r6, r4
 801be1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801be22:	f04f 0200 	mov.w	r2, #0
 801be26:	d124      	bne.n	801be72 <_dtoa_r+0x662>
 801be28:	4bac      	ldr	r3, [pc, #688]	@ (801c0dc <_dtoa_r+0x8cc>)
 801be2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801be2e:	f7e4 fa05 	bl	800023c <__adddf3>
 801be32:	4602      	mov	r2, r0
 801be34:	460b      	mov	r3, r1
 801be36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be3a:	f7e4 fe45 	bl	8000ac8 <__aeabi_dcmpgt>
 801be3e:	2800      	cmp	r0, #0
 801be40:	d145      	bne.n	801bece <_dtoa_r+0x6be>
 801be42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801be46:	49a5      	ldr	r1, [pc, #660]	@ (801c0dc <_dtoa_r+0x8cc>)
 801be48:	2000      	movs	r0, #0
 801be4a:	f7e4 f9f5 	bl	8000238 <__aeabi_dsub>
 801be4e:	4602      	mov	r2, r0
 801be50:	460b      	mov	r3, r1
 801be52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be56:	f7e4 fe19 	bl	8000a8c <__aeabi_dcmplt>
 801be5a:	2800      	cmp	r0, #0
 801be5c:	f43f aef5 	beq.w	801bc4a <_dtoa_r+0x43a>
 801be60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801be62:	1e73      	subs	r3, r6, #1
 801be64:	9315      	str	r3, [sp, #84]	@ 0x54
 801be66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801be6a:	2b30      	cmp	r3, #48	@ 0x30
 801be6c:	d0f8      	beq.n	801be60 <_dtoa_r+0x650>
 801be6e:	9f04      	ldr	r7, [sp, #16]
 801be70:	e73e      	b.n	801bcf0 <_dtoa_r+0x4e0>
 801be72:	4b9b      	ldr	r3, [pc, #620]	@ (801c0e0 <_dtoa_r+0x8d0>)
 801be74:	f7e4 fb98 	bl	80005a8 <__aeabi_dmul>
 801be78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be7c:	e7bc      	b.n	801bdf8 <_dtoa_r+0x5e8>
 801be7e:	d10c      	bne.n	801be9a <_dtoa_r+0x68a>
 801be80:	4b98      	ldr	r3, [pc, #608]	@ (801c0e4 <_dtoa_r+0x8d4>)
 801be82:	2200      	movs	r2, #0
 801be84:	e9dd 0100 	ldrd	r0, r1, [sp]
 801be88:	f7e4 fb8e 	bl	80005a8 <__aeabi_dmul>
 801be8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be90:	f7e4 fe10 	bl	8000ab4 <__aeabi_dcmpge>
 801be94:	2800      	cmp	r0, #0
 801be96:	f000 8157 	beq.w	801c148 <_dtoa_r+0x938>
 801be9a:	2400      	movs	r4, #0
 801be9c:	4625      	mov	r5, r4
 801be9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bea0:	43db      	mvns	r3, r3
 801bea2:	9304      	str	r3, [sp, #16]
 801bea4:	4656      	mov	r6, sl
 801bea6:	2700      	movs	r7, #0
 801bea8:	4621      	mov	r1, r4
 801beaa:	4658      	mov	r0, fp
 801beac:	f000 fe4a 	bl	801cb44 <_Bfree>
 801beb0:	2d00      	cmp	r5, #0
 801beb2:	d0dc      	beq.n	801be6e <_dtoa_r+0x65e>
 801beb4:	b12f      	cbz	r7, 801bec2 <_dtoa_r+0x6b2>
 801beb6:	42af      	cmp	r7, r5
 801beb8:	d003      	beq.n	801bec2 <_dtoa_r+0x6b2>
 801beba:	4639      	mov	r1, r7
 801bebc:	4658      	mov	r0, fp
 801bebe:	f000 fe41 	bl	801cb44 <_Bfree>
 801bec2:	4629      	mov	r1, r5
 801bec4:	4658      	mov	r0, fp
 801bec6:	f000 fe3d 	bl	801cb44 <_Bfree>
 801beca:	e7d0      	b.n	801be6e <_dtoa_r+0x65e>
 801becc:	9704      	str	r7, [sp, #16]
 801bece:	4633      	mov	r3, r6
 801bed0:	461e      	mov	r6, r3
 801bed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bed6:	2a39      	cmp	r2, #57	@ 0x39
 801bed8:	d107      	bne.n	801beea <_dtoa_r+0x6da>
 801beda:	459a      	cmp	sl, r3
 801bedc:	d1f8      	bne.n	801bed0 <_dtoa_r+0x6c0>
 801bede:	9a04      	ldr	r2, [sp, #16]
 801bee0:	3201      	adds	r2, #1
 801bee2:	9204      	str	r2, [sp, #16]
 801bee4:	2230      	movs	r2, #48	@ 0x30
 801bee6:	f88a 2000 	strb.w	r2, [sl]
 801beea:	781a      	ldrb	r2, [r3, #0]
 801beec:	3201      	adds	r2, #1
 801beee:	701a      	strb	r2, [r3, #0]
 801bef0:	e7bd      	b.n	801be6e <_dtoa_r+0x65e>
 801bef2:	4b7b      	ldr	r3, [pc, #492]	@ (801c0e0 <_dtoa_r+0x8d0>)
 801bef4:	2200      	movs	r2, #0
 801bef6:	f7e4 fb57 	bl	80005a8 <__aeabi_dmul>
 801befa:	2200      	movs	r2, #0
 801befc:	2300      	movs	r3, #0
 801befe:	4604      	mov	r4, r0
 801bf00:	460d      	mov	r5, r1
 801bf02:	f7e4 fdb9 	bl	8000a78 <__aeabi_dcmpeq>
 801bf06:	2800      	cmp	r0, #0
 801bf08:	f43f aebb 	beq.w	801bc82 <_dtoa_r+0x472>
 801bf0c:	e6f0      	b.n	801bcf0 <_dtoa_r+0x4e0>
 801bf0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bf10:	2a00      	cmp	r2, #0
 801bf12:	f000 80db 	beq.w	801c0cc <_dtoa_r+0x8bc>
 801bf16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bf18:	2a01      	cmp	r2, #1
 801bf1a:	f300 80bf 	bgt.w	801c09c <_dtoa_r+0x88c>
 801bf1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bf20:	2a00      	cmp	r2, #0
 801bf22:	f000 80b7 	beq.w	801c094 <_dtoa_r+0x884>
 801bf26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801bf2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801bf2c:	4646      	mov	r6, r8
 801bf2e:	9a08      	ldr	r2, [sp, #32]
 801bf30:	2101      	movs	r1, #1
 801bf32:	441a      	add	r2, r3
 801bf34:	4658      	mov	r0, fp
 801bf36:	4498      	add	r8, r3
 801bf38:	9208      	str	r2, [sp, #32]
 801bf3a:	f000 ff01 	bl	801cd40 <__i2b>
 801bf3e:	4605      	mov	r5, r0
 801bf40:	b15e      	cbz	r6, 801bf5a <_dtoa_r+0x74a>
 801bf42:	9b08      	ldr	r3, [sp, #32]
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	dd08      	ble.n	801bf5a <_dtoa_r+0x74a>
 801bf48:	42b3      	cmp	r3, r6
 801bf4a:	9a08      	ldr	r2, [sp, #32]
 801bf4c:	bfa8      	it	ge
 801bf4e:	4633      	movge	r3, r6
 801bf50:	eba8 0803 	sub.w	r8, r8, r3
 801bf54:	1af6      	subs	r6, r6, r3
 801bf56:	1ad3      	subs	r3, r2, r3
 801bf58:	9308      	str	r3, [sp, #32]
 801bf5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf5c:	b1f3      	cbz	r3, 801bf9c <_dtoa_r+0x78c>
 801bf5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801bf60:	2b00      	cmp	r3, #0
 801bf62:	f000 80b7 	beq.w	801c0d4 <_dtoa_r+0x8c4>
 801bf66:	b18c      	cbz	r4, 801bf8c <_dtoa_r+0x77c>
 801bf68:	4629      	mov	r1, r5
 801bf6a:	4622      	mov	r2, r4
 801bf6c:	4658      	mov	r0, fp
 801bf6e:	f000 ffa7 	bl	801cec0 <__pow5mult>
 801bf72:	464a      	mov	r2, r9
 801bf74:	4601      	mov	r1, r0
 801bf76:	4605      	mov	r5, r0
 801bf78:	4658      	mov	r0, fp
 801bf7a:	f000 fef7 	bl	801cd6c <__multiply>
 801bf7e:	4649      	mov	r1, r9
 801bf80:	9004      	str	r0, [sp, #16]
 801bf82:	4658      	mov	r0, fp
 801bf84:	f000 fdde 	bl	801cb44 <_Bfree>
 801bf88:	9b04      	ldr	r3, [sp, #16]
 801bf8a:	4699      	mov	r9, r3
 801bf8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bf8e:	1b1a      	subs	r2, r3, r4
 801bf90:	d004      	beq.n	801bf9c <_dtoa_r+0x78c>
 801bf92:	4649      	mov	r1, r9
 801bf94:	4658      	mov	r0, fp
 801bf96:	f000 ff93 	bl	801cec0 <__pow5mult>
 801bf9a:	4681      	mov	r9, r0
 801bf9c:	2101      	movs	r1, #1
 801bf9e:	4658      	mov	r0, fp
 801bfa0:	f000 fece 	bl	801cd40 <__i2b>
 801bfa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bfa6:	4604      	mov	r4, r0
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	f000 81cf 	beq.w	801c34c <_dtoa_r+0xb3c>
 801bfae:	461a      	mov	r2, r3
 801bfb0:	4601      	mov	r1, r0
 801bfb2:	4658      	mov	r0, fp
 801bfb4:	f000 ff84 	bl	801cec0 <__pow5mult>
 801bfb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bfba:	2b01      	cmp	r3, #1
 801bfbc:	4604      	mov	r4, r0
 801bfbe:	f300 8095 	bgt.w	801c0ec <_dtoa_r+0x8dc>
 801bfc2:	9b02      	ldr	r3, [sp, #8]
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	f040 8087 	bne.w	801c0d8 <_dtoa_r+0x8c8>
 801bfca:	9b03      	ldr	r3, [sp, #12]
 801bfcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	f040 8089 	bne.w	801c0e8 <_dtoa_r+0x8d8>
 801bfd6:	9b03      	ldr	r3, [sp, #12]
 801bfd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801bfdc:	0d1b      	lsrs	r3, r3, #20
 801bfde:	051b      	lsls	r3, r3, #20
 801bfe0:	b12b      	cbz	r3, 801bfee <_dtoa_r+0x7de>
 801bfe2:	9b08      	ldr	r3, [sp, #32]
 801bfe4:	3301      	adds	r3, #1
 801bfe6:	9308      	str	r3, [sp, #32]
 801bfe8:	f108 0801 	add.w	r8, r8, #1
 801bfec:	2301      	movs	r3, #1
 801bfee:	930a      	str	r3, [sp, #40]	@ 0x28
 801bff0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	f000 81b0 	beq.w	801c358 <_dtoa_r+0xb48>
 801bff8:	6923      	ldr	r3, [r4, #16]
 801bffa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801bffe:	6918      	ldr	r0, [r3, #16]
 801c000:	f000 fe52 	bl	801cca8 <__hi0bits>
 801c004:	f1c0 0020 	rsb	r0, r0, #32
 801c008:	9b08      	ldr	r3, [sp, #32]
 801c00a:	4418      	add	r0, r3
 801c00c:	f010 001f 	ands.w	r0, r0, #31
 801c010:	d077      	beq.n	801c102 <_dtoa_r+0x8f2>
 801c012:	f1c0 0320 	rsb	r3, r0, #32
 801c016:	2b04      	cmp	r3, #4
 801c018:	dd6b      	ble.n	801c0f2 <_dtoa_r+0x8e2>
 801c01a:	9b08      	ldr	r3, [sp, #32]
 801c01c:	f1c0 001c 	rsb	r0, r0, #28
 801c020:	4403      	add	r3, r0
 801c022:	4480      	add	r8, r0
 801c024:	4406      	add	r6, r0
 801c026:	9308      	str	r3, [sp, #32]
 801c028:	f1b8 0f00 	cmp.w	r8, #0
 801c02c:	dd05      	ble.n	801c03a <_dtoa_r+0x82a>
 801c02e:	4649      	mov	r1, r9
 801c030:	4642      	mov	r2, r8
 801c032:	4658      	mov	r0, fp
 801c034:	f000 ff9e 	bl	801cf74 <__lshift>
 801c038:	4681      	mov	r9, r0
 801c03a:	9b08      	ldr	r3, [sp, #32]
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	dd05      	ble.n	801c04c <_dtoa_r+0x83c>
 801c040:	4621      	mov	r1, r4
 801c042:	461a      	mov	r2, r3
 801c044:	4658      	mov	r0, fp
 801c046:	f000 ff95 	bl	801cf74 <__lshift>
 801c04a:	4604      	mov	r4, r0
 801c04c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d059      	beq.n	801c106 <_dtoa_r+0x8f6>
 801c052:	4621      	mov	r1, r4
 801c054:	4648      	mov	r0, r9
 801c056:	f000 fff9 	bl	801d04c <__mcmp>
 801c05a:	2800      	cmp	r0, #0
 801c05c:	da53      	bge.n	801c106 <_dtoa_r+0x8f6>
 801c05e:	1e7b      	subs	r3, r7, #1
 801c060:	9304      	str	r3, [sp, #16]
 801c062:	4649      	mov	r1, r9
 801c064:	2300      	movs	r3, #0
 801c066:	220a      	movs	r2, #10
 801c068:	4658      	mov	r0, fp
 801c06a:	f000 fd8d 	bl	801cb88 <__multadd>
 801c06e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c070:	4681      	mov	r9, r0
 801c072:	2b00      	cmp	r3, #0
 801c074:	f000 8172 	beq.w	801c35c <_dtoa_r+0xb4c>
 801c078:	2300      	movs	r3, #0
 801c07a:	4629      	mov	r1, r5
 801c07c:	220a      	movs	r2, #10
 801c07e:	4658      	mov	r0, fp
 801c080:	f000 fd82 	bl	801cb88 <__multadd>
 801c084:	9b00      	ldr	r3, [sp, #0]
 801c086:	2b00      	cmp	r3, #0
 801c088:	4605      	mov	r5, r0
 801c08a:	dc67      	bgt.n	801c15c <_dtoa_r+0x94c>
 801c08c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c08e:	2b02      	cmp	r3, #2
 801c090:	dc41      	bgt.n	801c116 <_dtoa_r+0x906>
 801c092:	e063      	b.n	801c15c <_dtoa_r+0x94c>
 801c094:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c096:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c09a:	e746      	b.n	801bf2a <_dtoa_r+0x71a>
 801c09c:	9b07      	ldr	r3, [sp, #28]
 801c09e:	1e5c      	subs	r4, r3, #1
 801c0a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c0a2:	42a3      	cmp	r3, r4
 801c0a4:	bfbf      	itttt	lt
 801c0a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801c0a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801c0aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801c0ac:	1ae3      	sublt	r3, r4, r3
 801c0ae:	bfb4      	ite	lt
 801c0b0:	18d2      	addlt	r2, r2, r3
 801c0b2:	1b1c      	subge	r4, r3, r4
 801c0b4:	9b07      	ldr	r3, [sp, #28]
 801c0b6:	bfbc      	itt	lt
 801c0b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c0ba:	2400      	movlt	r4, #0
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	bfb5      	itete	lt
 801c0c0:	eba8 0603 	sublt.w	r6, r8, r3
 801c0c4:	9b07      	ldrge	r3, [sp, #28]
 801c0c6:	2300      	movlt	r3, #0
 801c0c8:	4646      	movge	r6, r8
 801c0ca:	e730      	b.n	801bf2e <_dtoa_r+0x71e>
 801c0cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c0ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c0d0:	4646      	mov	r6, r8
 801c0d2:	e735      	b.n	801bf40 <_dtoa_r+0x730>
 801c0d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c0d6:	e75c      	b.n	801bf92 <_dtoa_r+0x782>
 801c0d8:	2300      	movs	r3, #0
 801c0da:	e788      	b.n	801bfee <_dtoa_r+0x7de>
 801c0dc:	3fe00000 	.word	0x3fe00000
 801c0e0:	40240000 	.word	0x40240000
 801c0e4:	40140000 	.word	0x40140000
 801c0e8:	9b02      	ldr	r3, [sp, #8]
 801c0ea:	e780      	b.n	801bfee <_dtoa_r+0x7de>
 801c0ec:	2300      	movs	r3, #0
 801c0ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801c0f0:	e782      	b.n	801bff8 <_dtoa_r+0x7e8>
 801c0f2:	d099      	beq.n	801c028 <_dtoa_r+0x818>
 801c0f4:	9a08      	ldr	r2, [sp, #32]
 801c0f6:	331c      	adds	r3, #28
 801c0f8:	441a      	add	r2, r3
 801c0fa:	4498      	add	r8, r3
 801c0fc:	441e      	add	r6, r3
 801c0fe:	9208      	str	r2, [sp, #32]
 801c100:	e792      	b.n	801c028 <_dtoa_r+0x818>
 801c102:	4603      	mov	r3, r0
 801c104:	e7f6      	b.n	801c0f4 <_dtoa_r+0x8e4>
 801c106:	9b07      	ldr	r3, [sp, #28]
 801c108:	9704      	str	r7, [sp, #16]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	dc20      	bgt.n	801c150 <_dtoa_r+0x940>
 801c10e:	9300      	str	r3, [sp, #0]
 801c110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c112:	2b02      	cmp	r3, #2
 801c114:	dd1e      	ble.n	801c154 <_dtoa_r+0x944>
 801c116:	9b00      	ldr	r3, [sp, #0]
 801c118:	2b00      	cmp	r3, #0
 801c11a:	f47f aec0 	bne.w	801be9e <_dtoa_r+0x68e>
 801c11e:	4621      	mov	r1, r4
 801c120:	2205      	movs	r2, #5
 801c122:	4658      	mov	r0, fp
 801c124:	f000 fd30 	bl	801cb88 <__multadd>
 801c128:	4601      	mov	r1, r0
 801c12a:	4604      	mov	r4, r0
 801c12c:	4648      	mov	r0, r9
 801c12e:	f000 ff8d 	bl	801d04c <__mcmp>
 801c132:	2800      	cmp	r0, #0
 801c134:	f77f aeb3 	ble.w	801be9e <_dtoa_r+0x68e>
 801c138:	4656      	mov	r6, sl
 801c13a:	2331      	movs	r3, #49	@ 0x31
 801c13c:	f806 3b01 	strb.w	r3, [r6], #1
 801c140:	9b04      	ldr	r3, [sp, #16]
 801c142:	3301      	adds	r3, #1
 801c144:	9304      	str	r3, [sp, #16]
 801c146:	e6ae      	b.n	801bea6 <_dtoa_r+0x696>
 801c148:	9c07      	ldr	r4, [sp, #28]
 801c14a:	9704      	str	r7, [sp, #16]
 801c14c:	4625      	mov	r5, r4
 801c14e:	e7f3      	b.n	801c138 <_dtoa_r+0x928>
 801c150:	9b07      	ldr	r3, [sp, #28]
 801c152:	9300      	str	r3, [sp, #0]
 801c154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c156:	2b00      	cmp	r3, #0
 801c158:	f000 8104 	beq.w	801c364 <_dtoa_r+0xb54>
 801c15c:	2e00      	cmp	r6, #0
 801c15e:	dd05      	ble.n	801c16c <_dtoa_r+0x95c>
 801c160:	4629      	mov	r1, r5
 801c162:	4632      	mov	r2, r6
 801c164:	4658      	mov	r0, fp
 801c166:	f000 ff05 	bl	801cf74 <__lshift>
 801c16a:	4605      	mov	r5, r0
 801c16c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c16e:	2b00      	cmp	r3, #0
 801c170:	d05a      	beq.n	801c228 <_dtoa_r+0xa18>
 801c172:	6869      	ldr	r1, [r5, #4]
 801c174:	4658      	mov	r0, fp
 801c176:	f000 fca5 	bl	801cac4 <_Balloc>
 801c17a:	4606      	mov	r6, r0
 801c17c:	b928      	cbnz	r0, 801c18a <_dtoa_r+0x97a>
 801c17e:	4b84      	ldr	r3, [pc, #528]	@ (801c390 <_dtoa_r+0xb80>)
 801c180:	4602      	mov	r2, r0
 801c182:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c186:	f7ff bb5a 	b.w	801b83e <_dtoa_r+0x2e>
 801c18a:	692a      	ldr	r2, [r5, #16]
 801c18c:	3202      	adds	r2, #2
 801c18e:	0092      	lsls	r2, r2, #2
 801c190:	f105 010c 	add.w	r1, r5, #12
 801c194:	300c      	adds	r0, #12
 801c196:	f7ff fa78 	bl	801b68a <memcpy>
 801c19a:	2201      	movs	r2, #1
 801c19c:	4631      	mov	r1, r6
 801c19e:	4658      	mov	r0, fp
 801c1a0:	f000 fee8 	bl	801cf74 <__lshift>
 801c1a4:	f10a 0301 	add.w	r3, sl, #1
 801c1a8:	9307      	str	r3, [sp, #28]
 801c1aa:	9b00      	ldr	r3, [sp, #0]
 801c1ac:	4453      	add	r3, sl
 801c1ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c1b0:	9b02      	ldr	r3, [sp, #8]
 801c1b2:	f003 0301 	and.w	r3, r3, #1
 801c1b6:	462f      	mov	r7, r5
 801c1b8:	930a      	str	r3, [sp, #40]	@ 0x28
 801c1ba:	4605      	mov	r5, r0
 801c1bc:	9b07      	ldr	r3, [sp, #28]
 801c1be:	4621      	mov	r1, r4
 801c1c0:	3b01      	subs	r3, #1
 801c1c2:	4648      	mov	r0, r9
 801c1c4:	9300      	str	r3, [sp, #0]
 801c1c6:	f7ff fa9b 	bl	801b700 <quorem>
 801c1ca:	4639      	mov	r1, r7
 801c1cc:	9002      	str	r0, [sp, #8]
 801c1ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c1d2:	4648      	mov	r0, r9
 801c1d4:	f000 ff3a 	bl	801d04c <__mcmp>
 801c1d8:	462a      	mov	r2, r5
 801c1da:	9008      	str	r0, [sp, #32]
 801c1dc:	4621      	mov	r1, r4
 801c1de:	4658      	mov	r0, fp
 801c1e0:	f000 ff50 	bl	801d084 <__mdiff>
 801c1e4:	68c2      	ldr	r2, [r0, #12]
 801c1e6:	4606      	mov	r6, r0
 801c1e8:	bb02      	cbnz	r2, 801c22c <_dtoa_r+0xa1c>
 801c1ea:	4601      	mov	r1, r0
 801c1ec:	4648      	mov	r0, r9
 801c1ee:	f000 ff2d 	bl	801d04c <__mcmp>
 801c1f2:	4602      	mov	r2, r0
 801c1f4:	4631      	mov	r1, r6
 801c1f6:	4658      	mov	r0, fp
 801c1f8:	920e      	str	r2, [sp, #56]	@ 0x38
 801c1fa:	f000 fca3 	bl	801cb44 <_Bfree>
 801c1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c200:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c202:	9e07      	ldr	r6, [sp, #28]
 801c204:	ea43 0102 	orr.w	r1, r3, r2
 801c208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c20a:	4319      	orrs	r1, r3
 801c20c:	d110      	bne.n	801c230 <_dtoa_r+0xa20>
 801c20e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c212:	d029      	beq.n	801c268 <_dtoa_r+0xa58>
 801c214:	9b08      	ldr	r3, [sp, #32]
 801c216:	2b00      	cmp	r3, #0
 801c218:	dd02      	ble.n	801c220 <_dtoa_r+0xa10>
 801c21a:	9b02      	ldr	r3, [sp, #8]
 801c21c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c220:	9b00      	ldr	r3, [sp, #0]
 801c222:	f883 8000 	strb.w	r8, [r3]
 801c226:	e63f      	b.n	801bea8 <_dtoa_r+0x698>
 801c228:	4628      	mov	r0, r5
 801c22a:	e7bb      	b.n	801c1a4 <_dtoa_r+0x994>
 801c22c:	2201      	movs	r2, #1
 801c22e:	e7e1      	b.n	801c1f4 <_dtoa_r+0x9e4>
 801c230:	9b08      	ldr	r3, [sp, #32]
 801c232:	2b00      	cmp	r3, #0
 801c234:	db04      	blt.n	801c240 <_dtoa_r+0xa30>
 801c236:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c238:	430b      	orrs	r3, r1
 801c23a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c23c:	430b      	orrs	r3, r1
 801c23e:	d120      	bne.n	801c282 <_dtoa_r+0xa72>
 801c240:	2a00      	cmp	r2, #0
 801c242:	dded      	ble.n	801c220 <_dtoa_r+0xa10>
 801c244:	4649      	mov	r1, r9
 801c246:	2201      	movs	r2, #1
 801c248:	4658      	mov	r0, fp
 801c24a:	f000 fe93 	bl	801cf74 <__lshift>
 801c24e:	4621      	mov	r1, r4
 801c250:	4681      	mov	r9, r0
 801c252:	f000 fefb 	bl	801d04c <__mcmp>
 801c256:	2800      	cmp	r0, #0
 801c258:	dc03      	bgt.n	801c262 <_dtoa_r+0xa52>
 801c25a:	d1e1      	bne.n	801c220 <_dtoa_r+0xa10>
 801c25c:	f018 0f01 	tst.w	r8, #1
 801c260:	d0de      	beq.n	801c220 <_dtoa_r+0xa10>
 801c262:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c266:	d1d8      	bne.n	801c21a <_dtoa_r+0xa0a>
 801c268:	9a00      	ldr	r2, [sp, #0]
 801c26a:	2339      	movs	r3, #57	@ 0x39
 801c26c:	7013      	strb	r3, [r2, #0]
 801c26e:	4633      	mov	r3, r6
 801c270:	461e      	mov	r6, r3
 801c272:	3b01      	subs	r3, #1
 801c274:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c278:	2a39      	cmp	r2, #57	@ 0x39
 801c27a:	d052      	beq.n	801c322 <_dtoa_r+0xb12>
 801c27c:	3201      	adds	r2, #1
 801c27e:	701a      	strb	r2, [r3, #0]
 801c280:	e612      	b.n	801bea8 <_dtoa_r+0x698>
 801c282:	2a00      	cmp	r2, #0
 801c284:	dd07      	ble.n	801c296 <_dtoa_r+0xa86>
 801c286:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c28a:	d0ed      	beq.n	801c268 <_dtoa_r+0xa58>
 801c28c:	9a00      	ldr	r2, [sp, #0]
 801c28e:	f108 0301 	add.w	r3, r8, #1
 801c292:	7013      	strb	r3, [r2, #0]
 801c294:	e608      	b.n	801bea8 <_dtoa_r+0x698>
 801c296:	9b07      	ldr	r3, [sp, #28]
 801c298:	9a07      	ldr	r2, [sp, #28]
 801c29a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c29e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c2a0:	4293      	cmp	r3, r2
 801c2a2:	d028      	beq.n	801c2f6 <_dtoa_r+0xae6>
 801c2a4:	4649      	mov	r1, r9
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	220a      	movs	r2, #10
 801c2aa:	4658      	mov	r0, fp
 801c2ac:	f000 fc6c 	bl	801cb88 <__multadd>
 801c2b0:	42af      	cmp	r7, r5
 801c2b2:	4681      	mov	r9, r0
 801c2b4:	f04f 0300 	mov.w	r3, #0
 801c2b8:	f04f 020a 	mov.w	r2, #10
 801c2bc:	4639      	mov	r1, r7
 801c2be:	4658      	mov	r0, fp
 801c2c0:	d107      	bne.n	801c2d2 <_dtoa_r+0xac2>
 801c2c2:	f000 fc61 	bl	801cb88 <__multadd>
 801c2c6:	4607      	mov	r7, r0
 801c2c8:	4605      	mov	r5, r0
 801c2ca:	9b07      	ldr	r3, [sp, #28]
 801c2cc:	3301      	adds	r3, #1
 801c2ce:	9307      	str	r3, [sp, #28]
 801c2d0:	e774      	b.n	801c1bc <_dtoa_r+0x9ac>
 801c2d2:	f000 fc59 	bl	801cb88 <__multadd>
 801c2d6:	4629      	mov	r1, r5
 801c2d8:	4607      	mov	r7, r0
 801c2da:	2300      	movs	r3, #0
 801c2dc:	220a      	movs	r2, #10
 801c2de:	4658      	mov	r0, fp
 801c2e0:	f000 fc52 	bl	801cb88 <__multadd>
 801c2e4:	4605      	mov	r5, r0
 801c2e6:	e7f0      	b.n	801c2ca <_dtoa_r+0xaba>
 801c2e8:	9b00      	ldr	r3, [sp, #0]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	bfcc      	ite	gt
 801c2ee:	461e      	movgt	r6, r3
 801c2f0:	2601      	movle	r6, #1
 801c2f2:	4456      	add	r6, sl
 801c2f4:	2700      	movs	r7, #0
 801c2f6:	4649      	mov	r1, r9
 801c2f8:	2201      	movs	r2, #1
 801c2fa:	4658      	mov	r0, fp
 801c2fc:	f000 fe3a 	bl	801cf74 <__lshift>
 801c300:	4621      	mov	r1, r4
 801c302:	4681      	mov	r9, r0
 801c304:	f000 fea2 	bl	801d04c <__mcmp>
 801c308:	2800      	cmp	r0, #0
 801c30a:	dcb0      	bgt.n	801c26e <_dtoa_r+0xa5e>
 801c30c:	d102      	bne.n	801c314 <_dtoa_r+0xb04>
 801c30e:	f018 0f01 	tst.w	r8, #1
 801c312:	d1ac      	bne.n	801c26e <_dtoa_r+0xa5e>
 801c314:	4633      	mov	r3, r6
 801c316:	461e      	mov	r6, r3
 801c318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c31c:	2a30      	cmp	r2, #48	@ 0x30
 801c31e:	d0fa      	beq.n	801c316 <_dtoa_r+0xb06>
 801c320:	e5c2      	b.n	801bea8 <_dtoa_r+0x698>
 801c322:	459a      	cmp	sl, r3
 801c324:	d1a4      	bne.n	801c270 <_dtoa_r+0xa60>
 801c326:	9b04      	ldr	r3, [sp, #16]
 801c328:	3301      	adds	r3, #1
 801c32a:	9304      	str	r3, [sp, #16]
 801c32c:	2331      	movs	r3, #49	@ 0x31
 801c32e:	f88a 3000 	strb.w	r3, [sl]
 801c332:	e5b9      	b.n	801bea8 <_dtoa_r+0x698>
 801c334:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c336:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c394 <_dtoa_r+0xb84>
 801c33a:	b11b      	cbz	r3, 801c344 <_dtoa_r+0xb34>
 801c33c:	f10a 0308 	add.w	r3, sl, #8
 801c340:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c342:	6013      	str	r3, [r2, #0]
 801c344:	4650      	mov	r0, sl
 801c346:	b019      	add	sp, #100	@ 0x64
 801c348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c34c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c34e:	2b01      	cmp	r3, #1
 801c350:	f77f ae37 	ble.w	801bfc2 <_dtoa_r+0x7b2>
 801c354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c356:	930a      	str	r3, [sp, #40]	@ 0x28
 801c358:	2001      	movs	r0, #1
 801c35a:	e655      	b.n	801c008 <_dtoa_r+0x7f8>
 801c35c:	9b00      	ldr	r3, [sp, #0]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	f77f aed6 	ble.w	801c110 <_dtoa_r+0x900>
 801c364:	4656      	mov	r6, sl
 801c366:	4621      	mov	r1, r4
 801c368:	4648      	mov	r0, r9
 801c36a:	f7ff f9c9 	bl	801b700 <quorem>
 801c36e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c372:	f806 8b01 	strb.w	r8, [r6], #1
 801c376:	9b00      	ldr	r3, [sp, #0]
 801c378:	eba6 020a 	sub.w	r2, r6, sl
 801c37c:	4293      	cmp	r3, r2
 801c37e:	ddb3      	ble.n	801c2e8 <_dtoa_r+0xad8>
 801c380:	4649      	mov	r1, r9
 801c382:	2300      	movs	r3, #0
 801c384:	220a      	movs	r2, #10
 801c386:	4658      	mov	r0, fp
 801c388:	f000 fbfe 	bl	801cb88 <__multadd>
 801c38c:	4681      	mov	r9, r0
 801c38e:	e7ea      	b.n	801c366 <_dtoa_r+0xb56>
 801c390:	0802242c 	.word	0x0802242c
 801c394:	080223c7 	.word	0x080223c7

0801c398 <_free_r>:
 801c398:	b538      	push	{r3, r4, r5, lr}
 801c39a:	4605      	mov	r5, r0
 801c39c:	2900      	cmp	r1, #0
 801c39e:	d041      	beq.n	801c424 <_free_r+0x8c>
 801c3a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c3a4:	1f0c      	subs	r4, r1, #4
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	bfb8      	it	lt
 801c3aa:	18e4      	addlt	r4, r4, r3
 801c3ac:	f7fd f98c 	bl	80196c8 <__malloc_lock>
 801c3b0:	4a1d      	ldr	r2, [pc, #116]	@ (801c428 <_free_r+0x90>)
 801c3b2:	6813      	ldr	r3, [r2, #0]
 801c3b4:	b933      	cbnz	r3, 801c3c4 <_free_r+0x2c>
 801c3b6:	6063      	str	r3, [r4, #4]
 801c3b8:	6014      	str	r4, [r2, #0]
 801c3ba:	4628      	mov	r0, r5
 801c3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c3c0:	f7fd b988 	b.w	80196d4 <__malloc_unlock>
 801c3c4:	42a3      	cmp	r3, r4
 801c3c6:	d908      	bls.n	801c3da <_free_r+0x42>
 801c3c8:	6820      	ldr	r0, [r4, #0]
 801c3ca:	1821      	adds	r1, r4, r0
 801c3cc:	428b      	cmp	r3, r1
 801c3ce:	bf01      	itttt	eq
 801c3d0:	6819      	ldreq	r1, [r3, #0]
 801c3d2:	685b      	ldreq	r3, [r3, #4]
 801c3d4:	1809      	addeq	r1, r1, r0
 801c3d6:	6021      	streq	r1, [r4, #0]
 801c3d8:	e7ed      	b.n	801c3b6 <_free_r+0x1e>
 801c3da:	461a      	mov	r2, r3
 801c3dc:	685b      	ldr	r3, [r3, #4]
 801c3de:	b10b      	cbz	r3, 801c3e4 <_free_r+0x4c>
 801c3e0:	42a3      	cmp	r3, r4
 801c3e2:	d9fa      	bls.n	801c3da <_free_r+0x42>
 801c3e4:	6811      	ldr	r1, [r2, #0]
 801c3e6:	1850      	adds	r0, r2, r1
 801c3e8:	42a0      	cmp	r0, r4
 801c3ea:	d10b      	bne.n	801c404 <_free_r+0x6c>
 801c3ec:	6820      	ldr	r0, [r4, #0]
 801c3ee:	4401      	add	r1, r0
 801c3f0:	1850      	adds	r0, r2, r1
 801c3f2:	4283      	cmp	r3, r0
 801c3f4:	6011      	str	r1, [r2, #0]
 801c3f6:	d1e0      	bne.n	801c3ba <_free_r+0x22>
 801c3f8:	6818      	ldr	r0, [r3, #0]
 801c3fa:	685b      	ldr	r3, [r3, #4]
 801c3fc:	6053      	str	r3, [r2, #4]
 801c3fe:	4408      	add	r0, r1
 801c400:	6010      	str	r0, [r2, #0]
 801c402:	e7da      	b.n	801c3ba <_free_r+0x22>
 801c404:	d902      	bls.n	801c40c <_free_r+0x74>
 801c406:	230c      	movs	r3, #12
 801c408:	602b      	str	r3, [r5, #0]
 801c40a:	e7d6      	b.n	801c3ba <_free_r+0x22>
 801c40c:	6820      	ldr	r0, [r4, #0]
 801c40e:	1821      	adds	r1, r4, r0
 801c410:	428b      	cmp	r3, r1
 801c412:	bf04      	itt	eq
 801c414:	6819      	ldreq	r1, [r3, #0]
 801c416:	685b      	ldreq	r3, [r3, #4]
 801c418:	6063      	str	r3, [r4, #4]
 801c41a:	bf04      	itt	eq
 801c41c:	1809      	addeq	r1, r1, r0
 801c41e:	6021      	streq	r1, [r4, #0]
 801c420:	6054      	str	r4, [r2, #4]
 801c422:	e7ca      	b.n	801c3ba <_free_r+0x22>
 801c424:	bd38      	pop	{r3, r4, r5, pc}
 801c426:	bf00      	nop
 801c428:	20003000 	.word	0x20003000

0801c42c <rshift>:
 801c42c:	6903      	ldr	r3, [r0, #16]
 801c42e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c432:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c436:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c43a:	f100 0414 	add.w	r4, r0, #20
 801c43e:	dd45      	ble.n	801c4cc <rshift+0xa0>
 801c440:	f011 011f 	ands.w	r1, r1, #31
 801c444:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c448:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c44c:	d10c      	bne.n	801c468 <rshift+0x3c>
 801c44e:	f100 0710 	add.w	r7, r0, #16
 801c452:	4629      	mov	r1, r5
 801c454:	42b1      	cmp	r1, r6
 801c456:	d334      	bcc.n	801c4c2 <rshift+0x96>
 801c458:	1a9b      	subs	r3, r3, r2
 801c45a:	009b      	lsls	r3, r3, #2
 801c45c:	1eea      	subs	r2, r5, #3
 801c45e:	4296      	cmp	r6, r2
 801c460:	bf38      	it	cc
 801c462:	2300      	movcc	r3, #0
 801c464:	4423      	add	r3, r4
 801c466:	e015      	b.n	801c494 <rshift+0x68>
 801c468:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c46c:	f1c1 0820 	rsb	r8, r1, #32
 801c470:	40cf      	lsrs	r7, r1
 801c472:	f105 0e04 	add.w	lr, r5, #4
 801c476:	46a1      	mov	r9, r4
 801c478:	4576      	cmp	r6, lr
 801c47a:	46f4      	mov	ip, lr
 801c47c:	d815      	bhi.n	801c4aa <rshift+0x7e>
 801c47e:	1a9a      	subs	r2, r3, r2
 801c480:	0092      	lsls	r2, r2, #2
 801c482:	3a04      	subs	r2, #4
 801c484:	3501      	adds	r5, #1
 801c486:	42ae      	cmp	r6, r5
 801c488:	bf38      	it	cc
 801c48a:	2200      	movcc	r2, #0
 801c48c:	18a3      	adds	r3, r4, r2
 801c48e:	50a7      	str	r7, [r4, r2]
 801c490:	b107      	cbz	r7, 801c494 <rshift+0x68>
 801c492:	3304      	adds	r3, #4
 801c494:	1b1a      	subs	r2, r3, r4
 801c496:	42a3      	cmp	r3, r4
 801c498:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c49c:	bf08      	it	eq
 801c49e:	2300      	moveq	r3, #0
 801c4a0:	6102      	str	r2, [r0, #16]
 801c4a2:	bf08      	it	eq
 801c4a4:	6143      	streq	r3, [r0, #20]
 801c4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c4aa:	f8dc c000 	ldr.w	ip, [ip]
 801c4ae:	fa0c fc08 	lsl.w	ip, ip, r8
 801c4b2:	ea4c 0707 	orr.w	r7, ip, r7
 801c4b6:	f849 7b04 	str.w	r7, [r9], #4
 801c4ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c4be:	40cf      	lsrs	r7, r1
 801c4c0:	e7da      	b.n	801c478 <rshift+0x4c>
 801c4c2:	f851 cb04 	ldr.w	ip, [r1], #4
 801c4c6:	f847 cf04 	str.w	ip, [r7, #4]!
 801c4ca:	e7c3      	b.n	801c454 <rshift+0x28>
 801c4cc:	4623      	mov	r3, r4
 801c4ce:	e7e1      	b.n	801c494 <rshift+0x68>

0801c4d0 <__hexdig_fun>:
 801c4d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c4d4:	2b09      	cmp	r3, #9
 801c4d6:	d802      	bhi.n	801c4de <__hexdig_fun+0xe>
 801c4d8:	3820      	subs	r0, #32
 801c4da:	b2c0      	uxtb	r0, r0
 801c4dc:	4770      	bx	lr
 801c4de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c4e2:	2b05      	cmp	r3, #5
 801c4e4:	d801      	bhi.n	801c4ea <__hexdig_fun+0x1a>
 801c4e6:	3847      	subs	r0, #71	@ 0x47
 801c4e8:	e7f7      	b.n	801c4da <__hexdig_fun+0xa>
 801c4ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c4ee:	2b05      	cmp	r3, #5
 801c4f0:	d801      	bhi.n	801c4f6 <__hexdig_fun+0x26>
 801c4f2:	3827      	subs	r0, #39	@ 0x27
 801c4f4:	e7f1      	b.n	801c4da <__hexdig_fun+0xa>
 801c4f6:	2000      	movs	r0, #0
 801c4f8:	4770      	bx	lr
	...

0801c4fc <__gethex>:
 801c4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c500:	b085      	sub	sp, #20
 801c502:	468a      	mov	sl, r1
 801c504:	9302      	str	r3, [sp, #8]
 801c506:	680b      	ldr	r3, [r1, #0]
 801c508:	9001      	str	r0, [sp, #4]
 801c50a:	4690      	mov	r8, r2
 801c50c:	1c9c      	adds	r4, r3, #2
 801c50e:	46a1      	mov	r9, r4
 801c510:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c514:	2830      	cmp	r0, #48	@ 0x30
 801c516:	d0fa      	beq.n	801c50e <__gethex+0x12>
 801c518:	eba9 0303 	sub.w	r3, r9, r3
 801c51c:	f1a3 0b02 	sub.w	fp, r3, #2
 801c520:	f7ff ffd6 	bl	801c4d0 <__hexdig_fun>
 801c524:	4605      	mov	r5, r0
 801c526:	2800      	cmp	r0, #0
 801c528:	d168      	bne.n	801c5fc <__gethex+0x100>
 801c52a:	49a0      	ldr	r1, [pc, #640]	@ (801c7ac <__gethex+0x2b0>)
 801c52c:	2201      	movs	r2, #1
 801c52e:	4648      	mov	r0, r9
 801c530:	f7fe ff97 	bl	801b462 <strncmp>
 801c534:	4607      	mov	r7, r0
 801c536:	2800      	cmp	r0, #0
 801c538:	d167      	bne.n	801c60a <__gethex+0x10e>
 801c53a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c53e:	4626      	mov	r6, r4
 801c540:	f7ff ffc6 	bl	801c4d0 <__hexdig_fun>
 801c544:	2800      	cmp	r0, #0
 801c546:	d062      	beq.n	801c60e <__gethex+0x112>
 801c548:	4623      	mov	r3, r4
 801c54a:	7818      	ldrb	r0, [r3, #0]
 801c54c:	2830      	cmp	r0, #48	@ 0x30
 801c54e:	4699      	mov	r9, r3
 801c550:	f103 0301 	add.w	r3, r3, #1
 801c554:	d0f9      	beq.n	801c54a <__gethex+0x4e>
 801c556:	f7ff ffbb 	bl	801c4d0 <__hexdig_fun>
 801c55a:	fab0 f580 	clz	r5, r0
 801c55e:	096d      	lsrs	r5, r5, #5
 801c560:	f04f 0b01 	mov.w	fp, #1
 801c564:	464a      	mov	r2, r9
 801c566:	4616      	mov	r6, r2
 801c568:	3201      	adds	r2, #1
 801c56a:	7830      	ldrb	r0, [r6, #0]
 801c56c:	f7ff ffb0 	bl	801c4d0 <__hexdig_fun>
 801c570:	2800      	cmp	r0, #0
 801c572:	d1f8      	bne.n	801c566 <__gethex+0x6a>
 801c574:	498d      	ldr	r1, [pc, #564]	@ (801c7ac <__gethex+0x2b0>)
 801c576:	2201      	movs	r2, #1
 801c578:	4630      	mov	r0, r6
 801c57a:	f7fe ff72 	bl	801b462 <strncmp>
 801c57e:	2800      	cmp	r0, #0
 801c580:	d13f      	bne.n	801c602 <__gethex+0x106>
 801c582:	b944      	cbnz	r4, 801c596 <__gethex+0x9a>
 801c584:	1c74      	adds	r4, r6, #1
 801c586:	4622      	mov	r2, r4
 801c588:	4616      	mov	r6, r2
 801c58a:	3201      	adds	r2, #1
 801c58c:	7830      	ldrb	r0, [r6, #0]
 801c58e:	f7ff ff9f 	bl	801c4d0 <__hexdig_fun>
 801c592:	2800      	cmp	r0, #0
 801c594:	d1f8      	bne.n	801c588 <__gethex+0x8c>
 801c596:	1ba4      	subs	r4, r4, r6
 801c598:	00a7      	lsls	r7, r4, #2
 801c59a:	7833      	ldrb	r3, [r6, #0]
 801c59c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c5a0:	2b50      	cmp	r3, #80	@ 0x50
 801c5a2:	d13e      	bne.n	801c622 <__gethex+0x126>
 801c5a4:	7873      	ldrb	r3, [r6, #1]
 801c5a6:	2b2b      	cmp	r3, #43	@ 0x2b
 801c5a8:	d033      	beq.n	801c612 <__gethex+0x116>
 801c5aa:	2b2d      	cmp	r3, #45	@ 0x2d
 801c5ac:	d034      	beq.n	801c618 <__gethex+0x11c>
 801c5ae:	1c71      	adds	r1, r6, #1
 801c5b0:	2400      	movs	r4, #0
 801c5b2:	7808      	ldrb	r0, [r1, #0]
 801c5b4:	f7ff ff8c 	bl	801c4d0 <__hexdig_fun>
 801c5b8:	1e43      	subs	r3, r0, #1
 801c5ba:	b2db      	uxtb	r3, r3
 801c5bc:	2b18      	cmp	r3, #24
 801c5be:	d830      	bhi.n	801c622 <__gethex+0x126>
 801c5c0:	f1a0 0210 	sub.w	r2, r0, #16
 801c5c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c5c8:	f7ff ff82 	bl	801c4d0 <__hexdig_fun>
 801c5cc:	f100 3cff 	add.w	ip, r0, #4294967295
 801c5d0:	fa5f fc8c 	uxtb.w	ip, ip
 801c5d4:	f1bc 0f18 	cmp.w	ip, #24
 801c5d8:	f04f 030a 	mov.w	r3, #10
 801c5dc:	d91e      	bls.n	801c61c <__gethex+0x120>
 801c5de:	b104      	cbz	r4, 801c5e2 <__gethex+0xe6>
 801c5e0:	4252      	negs	r2, r2
 801c5e2:	4417      	add	r7, r2
 801c5e4:	f8ca 1000 	str.w	r1, [sl]
 801c5e8:	b1ed      	cbz	r5, 801c626 <__gethex+0x12a>
 801c5ea:	f1bb 0f00 	cmp.w	fp, #0
 801c5ee:	bf0c      	ite	eq
 801c5f0:	2506      	moveq	r5, #6
 801c5f2:	2500      	movne	r5, #0
 801c5f4:	4628      	mov	r0, r5
 801c5f6:	b005      	add	sp, #20
 801c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5fc:	2500      	movs	r5, #0
 801c5fe:	462c      	mov	r4, r5
 801c600:	e7b0      	b.n	801c564 <__gethex+0x68>
 801c602:	2c00      	cmp	r4, #0
 801c604:	d1c7      	bne.n	801c596 <__gethex+0x9a>
 801c606:	4627      	mov	r7, r4
 801c608:	e7c7      	b.n	801c59a <__gethex+0x9e>
 801c60a:	464e      	mov	r6, r9
 801c60c:	462f      	mov	r7, r5
 801c60e:	2501      	movs	r5, #1
 801c610:	e7c3      	b.n	801c59a <__gethex+0x9e>
 801c612:	2400      	movs	r4, #0
 801c614:	1cb1      	adds	r1, r6, #2
 801c616:	e7cc      	b.n	801c5b2 <__gethex+0xb6>
 801c618:	2401      	movs	r4, #1
 801c61a:	e7fb      	b.n	801c614 <__gethex+0x118>
 801c61c:	fb03 0002 	mla	r0, r3, r2, r0
 801c620:	e7ce      	b.n	801c5c0 <__gethex+0xc4>
 801c622:	4631      	mov	r1, r6
 801c624:	e7de      	b.n	801c5e4 <__gethex+0xe8>
 801c626:	eba6 0309 	sub.w	r3, r6, r9
 801c62a:	3b01      	subs	r3, #1
 801c62c:	4629      	mov	r1, r5
 801c62e:	2b07      	cmp	r3, #7
 801c630:	dc0a      	bgt.n	801c648 <__gethex+0x14c>
 801c632:	9801      	ldr	r0, [sp, #4]
 801c634:	f000 fa46 	bl	801cac4 <_Balloc>
 801c638:	4604      	mov	r4, r0
 801c63a:	b940      	cbnz	r0, 801c64e <__gethex+0x152>
 801c63c:	4b5c      	ldr	r3, [pc, #368]	@ (801c7b0 <__gethex+0x2b4>)
 801c63e:	4602      	mov	r2, r0
 801c640:	21e4      	movs	r1, #228	@ 0xe4
 801c642:	485c      	ldr	r0, [pc, #368]	@ (801c7b4 <__gethex+0x2b8>)
 801c644:	f7ff f83e 	bl	801b6c4 <__assert_func>
 801c648:	3101      	adds	r1, #1
 801c64a:	105b      	asrs	r3, r3, #1
 801c64c:	e7ef      	b.n	801c62e <__gethex+0x132>
 801c64e:	f100 0a14 	add.w	sl, r0, #20
 801c652:	2300      	movs	r3, #0
 801c654:	4655      	mov	r5, sl
 801c656:	469b      	mov	fp, r3
 801c658:	45b1      	cmp	r9, r6
 801c65a:	d337      	bcc.n	801c6cc <__gethex+0x1d0>
 801c65c:	f845 bb04 	str.w	fp, [r5], #4
 801c660:	eba5 050a 	sub.w	r5, r5, sl
 801c664:	10ad      	asrs	r5, r5, #2
 801c666:	6125      	str	r5, [r4, #16]
 801c668:	4658      	mov	r0, fp
 801c66a:	f000 fb1d 	bl	801cca8 <__hi0bits>
 801c66e:	016d      	lsls	r5, r5, #5
 801c670:	f8d8 6000 	ldr.w	r6, [r8]
 801c674:	1a2d      	subs	r5, r5, r0
 801c676:	42b5      	cmp	r5, r6
 801c678:	dd54      	ble.n	801c724 <__gethex+0x228>
 801c67a:	1bad      	subs	r5, r5, r6
 801c67c:	4629      	mov	r1, r5
 801c67e:	4620      	mov	r0, r4
 801c680:	f000 feb1 	bl	801d3e6 <__any_on>
 801c684:	4681      	mov	r9, r0
 801c686:	b178      	cbz	r0, 801c6a8 <__gethex+0x1ac>
 801c688:	1e6b      	subs	r3, r5, #1
 801c68a:	1159      	asrs	r1, r3, #5
 801c68c:	f003 021f 	and.w	r2, r3, #31
 801c690:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801c694:	f04f 0901 	mov.w	r9, #1
 801c698:	fa09 f202 	lsl.w	r2, r9, r2
 801c69c:	420a      	tst	r2, r1
 801c69e:	d003      	beq.n	801c6a8 <__gethex+0x1ac>
 801c6a0:	454b      	cmp	r3, r9
 801c6a2:	dc36      	bgt.n	801c712 <__gethex+0x216>
 801c6a4:	f04f 0902 	mov.w	r9, #2
 801c6a8:	4629      	mov	r1, r5
 801c6aa:	4620      	mov	r0, r4
 801c6ac:	f7ff febe 	bl	801c42c <rshift>
 801c6b0:	442f      	add	r7, r5
 801c6b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c6b6:	42bb      	cmp	r3, r7
 801c6b8:	da42      	bge.n	801c740 <__gethex+0x244>
 801c6ba:	9801      	ldr	r0, [sp, #4]
 801c6bc:	4621      	mov	r1, r4
 801c6be:	f000 fa41 	bl	801cb44 <_Bfree>
 801c6c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c6c4:	2300      	movs	r3, #0
 801c6c6:	6013      	str	r3, [r2, #0]
 801c6c8:	25a3      	movs	r5, #163	@ 0xa3
 801c6ca:	e793      	b.n	801c5f4 <__gethex+0xf8>
 801c6cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801c6d0:	2a2e      	cmp	r2, #46	@ 0x2e
 801c6d2:	d012      	beq.n	801c6fa <__gethex+0x1fe>
 801c6d4:	2b20      	cmp	r3, #32
 801c6d6:	d104      	bne.n	801c6e2 <__gethex+0x1e6>
 801c6d8:	f845 bb04 	str.w	fp, [r5], #4
 801c6dc:	f04f 0b00 	mov.w	fp, #0
 801c6e0:	465b      	mov	r3, fp
 801c6e2:	7830      	ldrb	r0, [r6, #0]
 801c6e4:	9303      	str	r3, [sp, #12]
 801c6e6:	f7ff fef3 	bl	801c4d0 <__hexdig_fun>
 801c6ea:	9b03      	ldr	r3, [sp, #12]
 801c6ec:	f000 000f 	and.w	r0, r0, #15
 801c6f0:	4098      	lsls	r0, r3
 801c6f2:	ea4b 0b00 	orr.w	fp, fp, r0
 801c6f6:	3304      	adds	r3, #4
 801c6f8:	e7ae      	b.n	801c658 <__gethex+0x15c>
 801c6fa:	45b1      	cmp	r9, r6
 801c6fc:	d8ea      	bhi.n	801c6d4 <__gethex+0x1d8>
 801c6fe:	492b      	ldr	r1, [pc, #172]	@ (801c7ac <__gethex+0x2b0>)
 801c700:	9303      	str	r3, [sp, #12]
 801c702:	2201      	movs	r2, #1
 801c704:	4630      	mov	r0, r6
 801c706:	f7fe feac 	bl	801b462 <strncmp>
 801c70a:	9b03      	ldr	r3, [sp, #12]
 801c70c:	2800      	cmp	r0, #0
 801c70e:	d1e1      	bne.n	801c6d4 <__gethex+0x1d8>
 801c710:	e7a2      	b.n	801c658 <__gethex+0x15c>
 801c712:	1ea9      	subs	r1, r5, #2
 801c714:	4620      	mov	r0, r4
 801c716:	f000 fe66 	bl	801d3e6 <__any_on>
 801c71a:	2800      	cmp	r0, #0
 801c71c:	d0c2      	beq.n	801c6a4 <__gethex+0x1a8>
 801c71e:	f04f 0903 	mov.w	r9, #3
 801c722:	e7c1      	b.n	801c6a8 <__gethex+0x1ac>
 801c724:	da09      	bge.n	801c73a <__gethex+0x23e>
 801c726:	1b75      	subs	r5, r6, r5
 801c728:	4621      	mov	r1, r4
 801c72a:	9801      	ldr	r0, [sp, #4]
 801c72c:	462a      	mov	r2, r5
 801c72e:	f000 fc21 	bl	801cf74 <__lshift>
 801c732:	1b7f      	subs	r7, r7, r5
 801c734:	4604      	mov	r4, r0
 801c736:	f100 0a14 	add.w	sl, r0, #20
 801c73a:	f04f 0900 	mov.w	r9, #0
 801c73e:	e7b8      	b.n	801c6b2 <__gethex+0x1b6>
 801c740:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c744:	42bd      	cmp	r5, r7
 801c746:	dd6f      	ble.n	801c828 <__gethex+0x32c>
 801c748:	1bed      	subs	r5, r5, r7
 801c74a:	42ae      	cmp	r6, r5
 801c74c:	dc34      	bgt.n	801c7b8 <__gethex+0x2bc>
 801c74e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c752:	2b02      	cmp	r3, #2
 801c754:	d022      	beq.n	801c79c <__gethex+0x2a0>
 801c756:	2b03      	cmp	r3, #3
 801c758:	d024      	beq.n	801c7a4 <__gethex+0x2a8>
 801c75a:	2b01      	cmp	r3, #1
 801c75c:	d115      	bne.n	801c78a <__gethex+0x28e>
 801c75e:	42ae      	cmp	r6, r5
 801c760:	d113      	bne.n	801c78a <__gethex+0x28e>
 801c762:	2e01      	cmp	r6, #1
 801c764:	d10b      	bne.n	801c77e <__gethex+0x282>
 801c766:	9a02      	ldr	r2, [sp, #8]
 801c768:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c76c:	6013      	str	r3, [r2, #0]
 801c76e:	2301      	movs	r3, #1
 801c770:	6123      	str	r3, [r4, #16]
 801c772:	f8ca 3000 	str.w	r3, [sl]
 801c776:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c778:	2562      	movs	r5, #98	@ 0x62
 801c77a:	601c      	str	r4, [r3, #0]
 801c77c:	e73a      	b.n	801c5f4 <__gethex+0xf8>
 801c77e:	1e71      	subs	r1, r6, #1
 801c780:	4620      	mov	r0, r4
 801c782:	f000 fe30 	bl	801d3e6 <__any_on>
 801c786:	2800      	cmp	r0, #0
 801c788:	d1ed      	bne.n	801c766 <__gethex+0x26a>
 801c78a:	9801      	ldr	r0, [sp, #4]
 801c78c:	4621      	mov	r1, r4
 801c78e:	f000 f9d9 	bl	801cb44 <_Bfree>
 801c792:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c794:	2300      	movs	r3, #0
 801c796:	6013      	str	r3, [r2, #0]
 801c798:	2550      	movs	r5, #80	@ 0x50
 801c79a:	e72b      	b.n	801c5f4 <__gethex+0xf8>
 801c79c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d1f3      	bne.n	801c78a <__gethex+0x28e>
 801c7a2:	e7e0      	b.n	801c766 <__gethex+0x26a>
 801c7a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d1dd      	bne.n	801c766 <__gethex+0x26a>
 801c7aa:	e7ee      	b.n	801c78a <__gethex+0x28e>
 801c7ac:	08022184 	.word	0x08022184
 801c7b0:	0802242c 	.word	0x0802242c
 801c7b4:	0802243d 	.word	0x0802243d
 801c7b8:	1e6f      	subs	r7, r5, #1
 801c7ba:	f1b9 0f00 	cmp.w	r9, #0
 801c7be:	d130      	bne.n	801c822 <__gethex+0x326>
 801c7c0:	b127      	cbz	r7, 801c7cc <__gethex+0x2d0>
 801c7c2:	4639      	mov	r1, r7
 801c7c4:	4620      	mov	r0, r4
 801c7c6:	f000 fe0e 	bl	801d3e6 <__any_on>
 801c7ca:	4681      	mov	r9, r0
 801c7cc:	117a      	asrs	r2, r7, #5
 801c7ce:	2301      	movs	r3, #1
 801c7d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801c7d4:	f007 071f 	and.w	r7, r7, #31
 801c7d8:	40bb      	lsls	r3, r7
 801c7da:	4213      	tst	r3, r2
 801c7dc:	4629      	mov	r1, r5
 801c7de:	4620      	mov	r0, r4
 801c7e0:	bf18      	it	ne
 801c7e2:	f049 0902 	orrne.w	r9, r9, #2
 801c7e6:	f7ff fe21 	bl	801c42c <rshift>
 801c7ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801c7ee:	1b76      	subs	r6, r6, r5
 801c7f0:	2502      	movs	r5, #2
 801c7f2:	f1b9 0f00 	cmp.w	r9, #0
 801c7f6:	d047      	beq.n	801c888 <__gethex+0x38c>
 801c7f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c7fc:	2b02      	cmp	r3, #2
 801c7fe:	d015      	beq.n	801c82c <__gethex+0x330>
 801c800:	2b03      	cmp	r3, #3
 801c802:	d017      	beq.n	801c834 <__gethex+0x338>
 801c804:	2b01      	cmp	r3, #1
 801c806:	d109      	bne.n	801c81c <__gethex+0x320>
 801c808:	f019 0f02 	tst.w	r9, #2
 801c80c:	d006      	beq.n	801c81c <__gethex+0x320>
 801c80e:	f8da 3000 	ldr.w	r3, [sl]
 801c812:	ea49 0903 	orr.w	r9, r9, r3
 801c816:	f019 0f01 	tst.w	r9, #1
 801c81a:	d10e      	bne.n	801c83a <__gethex+0x33e>
 801c81c:	f045 0510 	orr.w	r5, r5, #16
 801c820:	e032      	b.n	801c888 <__gethex+0x38c>
 801c822:	f04f 0901 	mov.w	r9, #1
 801c826:	e7d1      	b.n	801c7cc <__gethex+0x2d0>
 801c828:	2501      	movs	r5, #1
 801c82a:	e7e2      	b.n	801c7f2 <__gethex+0x2f6>
 801c82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c82e:	f1c3 0301 	rsb	r3, r3, #1
 801c832:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c836:	2b00      	cmp	r3, #0
 801c838:	d0f0      	beq.n	801c81c <__gethex+0x320>
 801c83a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c83e:	f104 0314 	add.w	r3, r4, #20
 801c842:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c846:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c84a:	f04f 0c00 	mov.w	ip, #0
 801c84e:	4618      	mov	r0, r3
 801c850:	f853 2b04 	ldr.w	r2, [r3], #4
 801c854:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c858:	d01b      	beq.n	801c892 <__gethex+0x396>
 801c85a:	3201      	adds	r2, #1
 801c85c:	6002      	str	r2, [r0, #0]
 801c85e:	2d02      	cmp	r5, #2
 801c860:	f104 0314 	add.w	r3, r4, #20
 801c864:	d13c      	bne.n	801c8e0 <__gethex+0x3e4>
 801c866:	f8d8 2000 	ldr.w	r2, [r8]
 801c86a:	3a01      	subs	r2, #1
 801c86c:	42b2      	cmp	r2, r6
 801c86e:	d109      	bne.n	801c884 <__gethex+0x388>
 801c870:	1171      	asrs	r1, r6, #5
 801c872:	2201      	movs	r2, #1
 801c874:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c878:	f006 061f 	and.w	r6, r6, #31
 801c87c:	fa02 f606 	lsl.w	r6, r2, r6
 801c880:	421e      	tst	r6, r3
 801c882:	d13a      	bne.n	801c8fa <__gethex+0x3fe>
 801c884:	f045 0520 	orr.w	r5, r5, #32
 801c888:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c88a:	601c      	str	r4, [r3, #0]
 801c88c:	9b02      	ldr	r3, [sp, #8]
 801c88e:	601f      	str	r7, [r3, #0]
 801c890:	e6b0      	b.n	801c5f4 <__gethex+0xf8>
 801c892:	4299      	cmp	r1, r3
 801c894:	f843 cc04 	str.w	ip, [r3, #-4]
 801c898:	d8d9      	bhi.n	801c84e <__gethex+0x352>
 801c89a:	68a3      	ldr	r3, [r4, #8]
 801c89c:	459b      	cmp	fp, r3
 801c89e:	db17      	blt.n	801c8d0 <__gethex+0x3d4>
 801c8a0:	6861      	ldr	r1, [r4, #4]
 801c8a2:	9801      	ldr	r0, [sp, #4]
 801c8a4:	3101      	adds	r1, #1
 801c8a6:	f000 f90d 	bl	801cac4 <_Balloc>
 801c8aa:	4681      	mov	r9, r0
 801c8ac:	b918      	cbnz	r0, 801c8b6 <__gethex+0x3ba>
 801c8ae:	4b1a      	ldr	r3, [pc, #104]	@ (801c918 <__gethex+0x41c>)
 801c8b0:	4602      	mov	r2, r0
 801c8b2:	2184      	movs	r1, #132	@ 0x84
 801c8b4:	e6c5      	b.n	801c642 <__gethex+0x146>
 801c8b6:	6922      	ldr	r2, [r4, #16]
 801c8b8:	3202      	adds	r2, #2
 801c8ba:	f104 010c 	add.w	r1, r4, #12
 801c8be:	0092      	lsls	r2, r2, #2
 801c8c0:	300c      	adds	r0, #12
 801c8c2:	f7fe fee2 	bl	801b68a <memcpy>
 801c8c6:	4621      	mov	r1, r4
 801c8c8:	9801      	ldr	r0, [sp, #4]
 801c8ca:	f000 f93b 	bl	801cb44 <_Bfree>
 801c8ce:	464c      	mov	r4, r9
 801c8d0:	6923      	ldr	r3, [r4, #16]
 801c8d2:	1c5a      	adds	r2, r3, #1
 801c8d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c8d8:	6122      	str	r2, [r4, #16]
 801c8da:	2201      	movs	r2, #1
 801c8dc:	615a      	str	r2, [r3, #20]
 801c8de:	e7be      	b.n	801c85e <__gethex+0x362>
 801c8e0:	6922      	ldr	r2, [r4, #16]
 801c8e2:	455a      	cmp	r2, fp
 801c8e4:	dd0b      	ble.n	801c8fe <__gethex+0x402>
 801c8e6:	2101      	movs	r1, #1
 801c8e8:	4620      	mov	r0, r4
 801c8ea:	f7ff fd9f 	bl	801c42c <rshift>
 801c8ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c8f2:	3701      	adds	r7, #1
 801c8f4:	42bb      	cmp	r3, r7
 801c8f6:	f6ff aee0 	blt.w	801c6ba <__gethex+0x1be>
 801c8fa:	2501      	movs	r5, #1
 801c8fc:	e7c2      	b.n	801c884 <__gethex+0x388>
 801c8fe:	f016 061f 	ands.w	r6, r6, #31
 801c902:	d0fa      	beq.n	801c8fa <__gethex+0x3fe>
 801c904:	4453      	add	r3, sl
 801c906:	f1c6 0620 	rsb	r6, r6, #32
 801c90a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c90e:	f000 f9cb 	bl	801cca8 <__hi0bits>
 801c912:	42b0      	cmp	r0, r6
 801c914:	dbe7      	blt.n	801c8e6 <__gethex+0x3ea>
 801c916:	e7f0      	b.n	801c8fa <__gethex+0x3fe>
 801c918:	0802242c 	.word	0x0802242c

0801c91c <L_shift>:
 801c91c:	f1c2 0208 	rsb	r2, r2, #8
 801c920:	0092      	lsls	r2, r2, #2
 801c922:	b570      	push	{r4, r5, r6, lr}
 801c924:	f1c2 0620 	rsb	r6, r2, #32
 801c928:	6843      	ldr	r3, [r0, #4]
 801c92a:	6804      	ldr	r4, [r0, #0]
 801c92c:	fa03 f506 	lsl.w	r5, r3, r6
 801c930:	432c      	orrs	r4, r5
 801c932:	40d3      	lsrs	r3, r2
 801c934:	6004      	str	r4, [r0, #0]
 801c936:	f840 3f04 	str.w	r3, [r0, #4]!
 801c93a:	4288      	cmp	r0, r1
 801c93c:	d3f4      	bcc.n	801c928 <L_shift+0xc>
 801c93e:	bd70      	pop	{r4, r5, r6, pc}

0801c940 <__match>:
 801c940:	b530      	push	{r4, r5, lr}
 801c942:	6803      	ldr	r3, [r0, #0]
 801c944:	3301      	adds	r3, #1
 801c946:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c94a:	b914      	cbnz	r4, 801c952 <__match+0x12>
 801c94c:	6003      	str	r3, [r0, #0]
 801c94e:	2001      	movs	r0, #1
 801c950:	bd30      	pop	{r4, r5, pc}
 801c952:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c956:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801c95a:	2d19      	cmp	r5, #25
 801c95c:	bf98      	it	ls
 801c95e:	3220      	addls	r2, #32
 801c960:	42a2      	cmp	r2, r4
 801c962:	d0f0      	beq.n	801c946 <__match+0x6>
 801c964:	2000      	movs	r0, #0
 801c966:	e7f3      	b.n	801c950 <__match+0x10>

0801c968 <__hexnan>:
 801c968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c96c:	680b      	ldr	r3, [r1, #0]
 801c96e:	6801      	ldr	r1, [r0, #0]
 801c970:	115e      	asrs	r6, r3, #5
 801c972:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c976:	f013 031f 	ands.w	r3, r3, #31
 801c97a:	b087      	sub	sp, #28
 801c97c:	bf18      	it	ne
 801c97e:	3604      	addne	r6, #4
 801c980:	2500      	movs	r5, #0
 801c982:	1f37      	subs	r7, r6, #4
 801c984:	4682      	mov	sl, r0
 801c986:	4690      	mov	r8, r2
 801c988:	9301      	str	r3, [sp, #4]
 801c98a:	f846 5c04 	str.w	r5, [r6, #-4]
 801c98e:	46b9      	mov	r9, r7
 801c990:	463c      	mov	r4, r7
 801c992:	9502      	str	r5, [sp, #8]
 801c994:	46ab      	mov	fp, r5
 801c996:	784a      	ldrb	r2, [r1, #1]
 801c998:	1c4b      	adds	r3, r1, #1
 801c99a:	9303      	str	r3, [sp, #12]
 801c99c:	b342      	cbz	r2, 801c9f0 <__hexnan+0x88>
 801c99e:	4610      	mov	r0, r2
 801c9a0:	9105      	str	r1, [sp, #20]
 801c9a2:	9204      	str	r2, [sp, #16]
 801c9a4:	f7ff fd94 	bl	801c4d0 <__hexdig_fun>
 801c9a8:	2800      	cmp	r0, #0
 801c9aa:	d151      	bne.n	801ca50 <__hexnan+0xe8>
 801c9ac:	9a04      	ldr	r2, [sp, #16]
 801c9ae:	9905      	ldr	r1, [sp, #20]
 801c9b0:	2a20      	cmp	r2, #32
 801c9b2:	d818      	bhi.n	801c9e6 <__hexnan+0x7e>
 801c9b4:	9b02      	ldr	r3, [sp, #8]
 801c9b6:	459b      	cmp	fp, r3
 801c9b8:	dd13      	ble.n	801c9e2 <__hexnan+0x7a>
 801c9ba:	454c      	cmp	r4, r9
 801c9bc:	d206      	bcs.n	801c9cc <__hexnan+0x64>
 801c9be:	2d07      	cmp	r5, #7
 801c9c0:	dc04      	bgt.n	801c9cc <__hexnan+0x64>
 801c9c2:	462a      	mov	r2, r5
 801c9c4:	4649      	mov	r1, r9
 801c9c6:	4620      	mov	r0, r4
 801c9c8:	f7ff ffa8 	bl	801c91c <L_shift>
 801c9cc:	4544      	cmp	r4, r8
 801c9ce:	d952      	bls.n	801ca76 <__hexnan+0x10e>
 801c9d0:	2300      	movs	r3, #0
 801c9d2:	f1a4 0904 	sub.w	r9, r4, #4
 801c9d6:	f844 3c04 	str.w	r3, [r4, #-4]
 801c9da:	f8cd b008 	str.w	fp, [sp, #8]
 801c9de:	464c      	mov	r4, r9
 801c9e0:	461d      	mov	r5, r3
 801c9e2:	9903      	ldr	r1, [sp, #12]
 801c9e4:	e7d7      	b.n	801c996 <__hexnan+0x2e>
 801c9e6:	2a29      	cmp	r2, #41	@ 0x29
 801c9e8:	d157      	bne.n	801ca9a <__hexnan+0x132>
 801c9ea:	3102      	adds	r1, #2
 801c9ec:	f8ca 1000 	str.w	r1, [sl]
 801c9f0:	f1bb 0f00 	cmp.w	fp, #0
 801c9f4:	d051      	beq.n	801ca9a <__hexnan+0x132>
 801c9f6:	454c      	cmp	r4, r9
 801c9f8:	d206      	bcs.n	801ca08 <__hexnan+0xa0>
 801c9fa:	2d07      	cmp	r5, #7
 801c9fc:	dc04      	bgt.n	801ca08 <__hexnan+0xa0>
 801c9fe:	462a      	mov	r2, r5
 801ca00:	4649      	mov	r1, r9
 801ca02:	4620      	mov	r0, r4
 801ca04:	f7ff ff8a 	bl	801c91c <L_shift>
 801ca08:	4544      	cmp	r4, r8
 801ca0a:	d936      	bls.n	801ca7a <__hexnan+0x112>
 801ca0c:	f1a8 0204 	sub.w	r2, r8, #4
 801ca10:	4623      	mov	r3, r4
 801ca12:	f853 1b04 	ldr.w	r1, [r3], #4
 801ca16:	f842 1f04 	str.w	r1, [r2, #4]!
 801ca1a:	429f      	cmp	r7, r3
 801ca1c:	d2f9      	bcs.n	801ca12 <__hexnan+0xaa>
 801ca1e:	1b3b      	subs	r3, r7, r4
 801ca20:	f023 0303 	bic.w	r3, r3, #3
 801ca24:	3304      	adds	r3, #4
 801ca26:	3401      	adds	r4, #1
 801ca28:	3e03      	subs	r6, #3
 801ca2a:	42b4      	cmp	r4, r6
 801ca2c:	bf88      	it	hi
 801ca2e:	2304      	movhi	r3, #4
 801ca30:	4443      	add	r3, r8
 801ca32:	2200      	movs	r2, #0
 801ca34:	f843 2b04 	str.w	r2, [r3], #4
 801ca38:	429f      	cmp	r7, r3
 801ca3a:	d2fb      	bcs.n	801ca34 <__hexnan+0xcc>
 801ca3c:	683b      	ldr	r3, [r7, #0]
 801ca3e:	b91b      	cbnz	r3, 801ca48 <__hexnan+0xe0>
 801ca40:	4547      	cmp	r7, r8
 801ca42:	d128      	bne.n	801ca96 <__hexnan+0x12e>
 801ca44:	2301      	movs	r3, #1
 801ca46:	603b      	str	r3, [r7, #0]
 801ca48:	2005      	movs	r0, #5
 801ca4a:	b007      	add	sp, #28
 801ca4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca50:	3501      	adds	r5, #1
 801ca52:	2d08      	cmp	r5, #8
 801ca54:	f10b 0b01 	add.w	fp, fp, #1
 801ca58:	dd06      	ble.n	801ca68 <__hexnan+0x100>
 801ca5a:	4544      	cmp	r4, r8
 801ca5c:	d9c1      	bls.n	801c9e2 <__hexnan+0x7a>
 801ca5e:	2300      	movs	r3, #0
 801ca60:	f844 3c04 	str.w	r3, [r4, #-4]
 801ca64:	2501      	movs	r5, #1
 801ca66:	3c04      	subs	r4, #4
 801ca68:	6822      	ldr	r2, [r4, #0]
 801ca6a:	f000 000f 	and.w	r0, r0, #15
 801ca6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801ca72:	6020      	str	r0, [r4, #0]
 801ca74:	e7b5      	b.n	801c9e2 <__hexnan+0x7a>
 801ca76:	2508      	movs	r5, #8
 801ca78:	e7b3      	b.n	801c9e2 <__hexnan+0x7a>
 801ca7a:	9b01      	ldr	r3, [sp, #4]
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d0dd      	beq.n	801ca3c <__hexnan+0xd4>
 801ca80:	f1c3 0320 	rsb	r3, r3, #32
 801ca84:	f04f 32ff 	mov.w	r2, #4294967295
 801ca88:	40da      	lsrs	r2, r3
 801ca8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ca8e:	4013      	ands	r3, r2
 801ca90:	f846 3c04 	str.w	r3, [r6, #-4]
 801ca94:	e7d2      	b.n	801ca3c <__hexnan+0xd4>
 801ca96:	3f04      	subs	r7, #4
 801ca98:	e7d0      	b.n	801ca3c <__hexnan+0xd4>
 801ca9a:	2004      	movs	r0, #4
 801ca9c:	e7d5      	b.n	801ca4a <__hexnan+0xe2>

0801ca9e <__ascii_mbtowc>:
 801ca9e:	b082      	sub	sp, #8
 801caa0:	b901      	cbnz	r1, 801caa4 <__ascii_mbtowc+0x6>
 801caa2:	a901      	add	r1, sp, #4
 801caa4:	b142      	cbz	r2, 801cab8 <__ascii_mbtowc+0x1a>
 801caa6:	b14b      	cbz	r3, 801cabc <__ascii_mbtowc+0x1e>
 801caa8:	7813      	ldrb	r3, [r2, #0]
 801caaa:	600b      	str	r3, [r1, #0]
 801caac:	7812      	ldrb	r2, [r2, #0]
 801caae:	1e10      	subs	r0, r2, #0
 801cab0:	bf18      	it	ne
 801cab2:	2001      	movne	r0, #1
 801cab4:	b002      	add	sp, #8
 801cab6:	4770      	bx	lr
 801cab8:	4610      	mov	r0, r2
 801caba:	e7fb      	b.n	801cab4 <__ascii_mbtowc+0x16>
 801cabc:	f06f 0001 	mvn.w	r0, #1
 801cac0:	e7f8      	b.n	801cab4 <__ascii_mbtowc+0x16>
	...

0801cac4 <_Balloc>:
 801cac4:	b570      	push	{r4, r5, r6, lr}
 801cac6:	69c6      	ldr	r6, [r0, #28]
 801cac8:	4604      	mov	r4, r0
 801caca:	460d      	mov	r5, r1
 801cacc:	b976      	cbnz	r6, 801caec <_Balloc+0x28>
 801cace:	2010      	movs	r0, #16
 801cad0:	f7fc fd48 	bl	8019564 <malloc>
 801cad4:	4602      	mov	r2, r0
 801cad6:	61e0      	str	r0, [r4, #28]
 801cad8:	b920      	cbnz	r0, 801cae4 <_Balloc+0x20>
 801cada:	4b18      	ldr	r3, [pc, #96]	@ (801cb3c <_Balloc+0x78>)
 801cadc:	4818      	ldr	r0, [pc, #96]	@ (801cb40 <_Balloc+0x7c>)
 801cade:	216b      	movs	r1, #107	@ 0x6b
 801cae0:	f7fe fdf0 	bl	801b6c4 <__assert_func>
 801cae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cae8:	6006      	str	r6, [r0, #0]
 801caea:	60c6      	str	r6, [r0, #12]
 801caec:	69e6      	ldr	r6, [r4, #28]
 801caee:	68f3      	ldr	r3, [r6, #12]
 801caf0:	b183      	cbz	r3, 801cb14 <_Balloc+0x50>
 801caf2:	69e3      	ldr	r3, [r4, #28]
 801caf4:	68db      	ldr	r3, [r3, #12]
 801caf6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801cafa:	b9b8      	cbnz	r0, 801cb2c <_Balloc+0x68>
 801cafc:	2101      	movs	r1, #1
 801cafe:	fa01 f605 	lsl.w	r6, r1, r5
 801cb02:	1d72      	adds	r2, r6, #5
 801cb04:	0092      	lsls	r2, r2, #2
 801cb06:	4620      	mov	r0, r4
 801cb08:	f001 f8a7 	bl	801dc5a <_calloc_r>
 801cb0c:	b160      	cbz	r0, 801cb28 <_Balloc+0x64>
 801cb0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801cb12:	e00e      	b.n	801cb32 <_Balloc+0x6e>
 801cb14:	2221      	movs	r2, #33	@ 0x21
 801cb16:	2104      	movs	r1, #4
 801cb18:	4620      	mov	r0, r4
 801cb1a:	f001 f89e 	bl	801dc5a <_calloc_r>
 801cb1e:	69e3      	ldr	r3, [r4, #28]
 801cb20:	60f0      	str	r0, [r6, #12]
 801cb22:	68db      	ldr	r3, [r3, #12]
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d1e4      	bne.n	801caf2 <_Balloc+0x2e>
 801cb28:	2000      	movs	r0, #0
 801cb2a:	bd70      	pop	{r4, r5, r6, pc}
 801cb2c:	6802      	ldr	r2, [r0, #0]
 801cb2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801cb32:	2300      	movs	r3, #0
 801cb34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cb38:	e7f7      	b.n	801cb2a <_Balloc+0x66>
 801cb3a:	bf00      	nop
 801cb3c:	08022312 	.word	0x08022312
 801cb40:	0802249d 	.word	0x0802249d

0801cb44 <_Bfree>:
 801cb44:	b570      	push	{r4, r5, r6, lr}
 801cb46:	69c6      	ldr	r6, [r0, #28]
 801cb48:	4605      	mov	r5, r0
 801cb4a:	460c      	mov	r4, r1
 801cb4c:	b976      	cbnz	r6, 801cb6c <_Bfree+0x28>
 801cb4e:	2010      	movs	r0, #16
 801cb50:	f7fc fd08 	bl	8019564 <malloc>
 801cb54:	4602      	mov	r2, r0
 801cb56:	61e8      	str	r0, [r5, #28]
 801cb58:	b920      	cbnz	r0, 801cb64 <_Bfree+0x20>
 801cb5a:	4b09      	ldr	r3, [pc, #36]	@ (801cb80 <_Bfree+0x3c>)
 801cb5c:	4809      	ldr	r0, [pc, #36]	@ (801cb84 <_Bfree+0x40>)
 801cb5e:	218f      	movs	r1, #143	@ 0x8f
 801cb60:	f7fe fdb0 	bl	801b6c4 <__assert_func>
 801cb64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cb68:	6006      	str	r6, [r0, #0]
 801cb6a:	60c6      	str	r6, [r0, #12]
 801cb6c:	b13c      	cbz	r4, 801cb7e <_Bfree+0x3a>
 801cb6e:	69eb      	ldr	r3, [r5, #28]
 801cb70:	6862      	ldr	r2, [r4, #4]
 801cb72:	68db      	ldr	r3, [r3, #12]
 801cb74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cb78:	6021      	str	r1, [r4, #0]
 801cb7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cb7e:	bd70      	pop	{r4, r5, r6, pc}
 801cb80:	08022312 	.word	0x08022312
 801cb84:	0802249d 	.word	0x0802249d

0801cb88 <__multadd>:
 801cb88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cb8c:	690d      	ldr	r5, [r1, #16]
 801cb8e:	4607      	mov	r7, r0
 801cb90:	460c      	mov	r4, r1
 801cb92:	461e      	mov	r6, r3
 801cb94:	f101 0c14 	add.w	ip, r1, #20
 801cb98:	2000      	movs	r0, #0
 801cb9a:	f8dc 3000 	ldr.w	r3, [ip]
 801cb9e:	b299      	uxth	r1, r3
 801cba0:	fb02 6101 	mla	r1, r2, r1, r6
 801cba4:	0c1e      	lsrs	r6, r3, #16
 801cba6:	0c0b      	lsrs	r3, r1, #16
 801cba8:	fb02 3306 	mla	r3, r2, r6, r3
 801cbac:	b289      	uxth	r1, r1
 801cbae:	3001      	adds	r0, #1
 801cbb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cbb4:	4285      	cmp	r5, r0
 801cbb6:	f84c 1b04 	str.w	r1, [ip], #4
 801cbba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cbbe:	dcec      	bgt.n	801cb9a <__multadd+0x12>
 801cbc0:	b30e      	cbz	r6, 801cc06 <__multadd+0x7e>
 801cbc2:	68a3      	ldr	r3, [r4, #8]
 801cbc4:	42ab      	cmp	r3, r5
 801cbc6:	dc19      	bgt.n	801cbfc <__multadd+0x74>
 801cbc8:	6861      	ldr	r1, [r4, #4]
 801cbca:	4638      	mov	r0, r7
 801cbcc:	3101      	adds	r1, #1
 801cbce:	f7ff ff79 	bl	801cac4 <_Balloc>
 801cbd2:	4680      	mov	r8, r0
 801cbd4:	b928      	cbnz	r0, 801cbe2 <__multadd+0x5a>
 801cbd6:	4602      	mov	r2, r0
 801cbd8:	4b0c      	ldr	r3, [pc, #48]	@ (801cc0c <__multadd+0x84>)
 801cbda:	480d      	ldr	r0, [pc, #52]	@ (801cc10 <__multadd+0x88>)
 801cbdc:	21ba      	movs	r1, #186	@ 0xba
 801cbde:	f7fe fd71 	bl	801b6c4 <__assert_func>
 801cbe2:	6922      	ldr	r2, [r4, #16]
 801cbe4:	3202      	adds	r2, #2
 801cbe6:	f104 010c 	add.w	r1, r4, #12
 801cbea:	0092      	lsls	r2, r2, #2
 801cbec:	300c      	adds	r0, #12
 801cbee:	f7fe fd4c 	bl	801b68a <memcpy>
 801cbf2:	4621      	mov	r1, r4
 801cbf4:	4638      	mov	r0, r7
 801cbf6:	f7ff ffa5 	bl	801cb44 <_Bfree>
 801cbfa:	4644      	mov	r4, r8
 801cbfc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cc00:	3501      	adds	r5, #1
 801cc02:	615e      	str	r6, [r3, #20]
 801cc04:	6125      	str	r5, [r4, #16]
 801cc06:	4620      	mov	r0, r4
 801cc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc0c:	0802242c 	.word	0x0802242c
 801cc10:	0802249d 	.word	0x0802249d

0801cc14 <__s2b>:
 801cc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc18:	460c      	mov	r4, r1
 801cc1a:	4615      	mov	r5, r2
 801cc1c:	461f      	mov	r7, r3
 801cc1e:	2209      	movs	r2, #9
 801cc20:	3308      	adds	r3, #8
 801cc22:	4606      	mov	r6, r0
 801cc24:	fb93 f3f2 	sdiv	r3, r3, r2
 801cc28:	2100      	movs	r1, #0
 801cc2a:	2201      	movs	r2, #1
 801cc2c:	429a      	cmp	r2, r3
 801cc2e:	db09      	blt.n	801cc44 <__s2b+0x30>
 801cc30:	4630      	mov	r0, r6
 801cc32:	f7ff ff47 	bl	801cac4 <_Balloc>
 801cc36:	b940      	cbnz	r0, 801cc4a <__s2b+0x36>
 801cc38:	4602      	mov	r2, r0
 801cc3a:	4b19      	ldr	r3, [pc, #100]	@ (801cca0 <__s2b+0x8c>)
 801cc3c:	4819      	ldr	r0, [pc, #100]	@ (801cca4 <__s2b+0x90>)
 801cc3e:	21d3      	movs	r1, #211	@ 0xd3
 801cc40:	f7fe fd40 	bl	801b6c4 <__assert_func>
 801cc44:	0052      	lsls	r2, r2, #1
 801cc46:	3101      	adds	r1, #1
 801cc48:	e7f0      	b.n	801cc2c <__s2b+0x18>
 801cc4a:	9b08      	ldr	r3, [sp, #32]
 801cc4c:	6143      	str	r3, [r0, #20]
 801cc4e:	2d09      	cmp	r5, #9
 801cc50:	f04f 0301 	mov.w	r3, #1
 801cc54:	6103      	str	r3, [r0, #16]
 801cc56:	dd16      	ble.n	801cc86 <__s2b+0x72>
 801cc58:	f104 0909 	add.w	r9, r4, #9
 801cc5c:	46c8      	mov	r8, r9
 801cc5e:	442c      	add	r4, r5
 801cc60:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cc64:	4601      	mov	r1, r0
 801cc66:	3b30      	subs	r3, #48	@ 0x30
 801cc68:	220a      	movs	r2, #10
 801cc6a:	4630      	mov	r0, r6
 801cc6c:	f7ff ff8c 	bl	801cb88 <__multadd>
 801cc70:	45a0      	cmp	r8, r4
 801cc72:	d1f5      	bne.n	801cc60 <__s2b+0x4c>
 801cc74:	f1a5 0408 	sub.w	r4, r5, #8
 801cc78:	444c      	add	r4, r9
 801cc7a:	1b2d      	subs	r5, r5, r4
 801cc7c:	1963      	adds	r3, r4, r5
 801cc7e:	42bb      	cmp	r3, r7
 801cc80:	db04      	blt.n	801cc8c <__s2b+0x78>
 801cc82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc86:	340a      	adds	r4, #10
 801cc88:	2509      	movs	r5, #9
 801cc8a:	e7f6      	b.n	801cc7a <__s2b+0x66>
 801cc8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cc90:	4601      	mov	r1, r0
 801cc92:	3b30      	subs	r3, #48	@ 0x30
 801cc94:	220a      	movs	r2, #10
 801cc96:	4630      	mov	r0, r6
 801cc98:	f7ff ff76 	bl	801cb88 <__multadd>
 801cc9c:	e7ee      	b.n	801cc7c <__s2b+0x68>
 801cc9e:	bf00      	nop
 801cca0:	0802242c 	.word	0x0802242c
 801cca4:	0802249d 	.word	0x0802249d

0801cca8 <__hi0bits>:
 801cca8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801ccac:	4603      	mov	r3, r0
 801ccae:	bf36      	itet	cc
 801ccb0:	0403      	lslcc	r3, r0, #16
 801ccb2:	2000      	movcs	r0, #0
 801ccb4:	2010      	movcc	r0, #16
 801ccb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ccba:	bf3c      	itt	cc
 801ccbc:	021b      	lslcc	r3, r3, #8
 801ccbe:	3008      	addcc	r0, #8
 801ccc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ccc4:	bf3c      	itt	cc
 801ccc6:	011b      	lslcc	r3, r3, #4
 801ccc8:	3004      	addcc	r0, #4
 801ccca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ccce:	bf3c      	itt	cc
 801ccd0:	009b      	lslcc	r3, r3, #2
 801ccd2:	3002      	addcc	r0, #2
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	db05      	blt.n	801cce4 <__hi0bits+0x3c>
 801ccd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801ccdc:	f100 0001 	add.w	r0, r0, #1
 801cce0:	bf08      	it	eq
 801cce2:	2020      	moveq	r0, #32
 801cce4:	4770      	bx	lr

0801cce6 <__lo0bits>:
 801cce6:	6803      	ldr	r3, [r0, #0]
 801cce8:	4602      	mov	r2, r0
 801ccea:	f013 0007 	ands.w	r0, r3, #7
 801ccee:	d00b      	beq.n	801cd08 <__lo0bits+0x22>
 801ccf0:	07d9      	lsls	r1, r3, #31
 801ccf2:	d421      	bmi.n	801cd38 <__lo0bits+0x52>
 801ccf4:	0798      	lsls	r0, r3, #30
 801ccf6:	bf49      	itett	mi
 801ccf8:	085b      	lsrmi	r3, r3, #1
 801ccfa:	089b      	lsrpl	r3, r3, #2
 801ccfc:	2001      	movmi	r0, #1
 801ccfe:	6013      	strmi	r3, [r2, #0]
 801cd00:	bf5c      	itt	pl
 801cd02:	6013      	strpl	r3, [r2, #0]
 801cd04:	2002      	movpl	r0, #2
 801cd06:	4770      	bx	lr
 801cd08:	b299      	uxth	r1, r3
 801cd0a:	b909      	cbnz	r1, 801cd10 <__lo0bits+0x2a>
 801cd0c:	0c1b      	lsrs	r3, r3, #16
 801cd0e:	2010      	movs	r0, #16
 801cd10:	b2d9      	uxtb	r1, r3
 801cd12:	b909      	cbnz	r1, 801cd18 <__lo0bits+0x32>
 801cd14:	3008      	adds	r0, #8
 801cd16:	0a1b      	lsrs	r3, r3, #8
 801cd18:	0719      	lsls	r1, r3, #28
 801cd1a:	bf04      	itt	eq
 801cd1c:	091b      	lsreq	r3, r3, #4
 801cd1e:	3004      	addeq	r0, #4
 801cd20:	0799      	lsls	r1, r3, #30
 801cd22:	bf04      	itt	eq
 801cd24:	089b      	lsreq	r3, r3, #2
 801cd26:	3002      	addeq	r0, #2
 801cd28:	07d9      	lsls	r1, r3, #31
 801cd2a:	d403      	bmi.n	801cd34 <__lo0bits+0x4e>
 801cd2c:	085b      	lsrs	r3, r3, #1
 801cd2e:	f100 0001 	add.w	r0, r0, #1
 801cd32:	d003      	beq.n	801cd3c <__lo0bits+0x56>
 801cd34:	6013      	str	r3, [r2, #0]
 801cd36:	4770      	bx	lr
 801cd38:	2000      	movs	r0, #0
 801cd3a:	4770      	bx	lr
 801cd3c:	2020      	movs	r0, #32
 801cd3e:	4770      	bx	lr

0801cd40 <__i2b>:
 801cd40:	b510      	push	{r4, lr}
 801cd42:	460c      	mov	r4, r1
 801cd44:	2101      	movs	r1, #1
 801cd46:	f7ff febd 	bl	801cac4 <_Balloc>
 801cd4a:	4602      	mov	r2, r0
 801cd4c:	b928      	cbnz	r0, 801cd5a <__i2b+0x1a>
 801cd4e:	4b05      	ldr	r3, [pc, #20]	@ (801cd64 <__i2b+0x24>)
 801cd50:	4805      	ldr	r0, [pc, #20]	@ (801cd68 <__i2b+0x28>)
 801cd52:	f240 1145 	movw	r1, #325	@ 0x145
 801cd56:	f7fe fcb5 	bl	801b6c4 <__assert_func>
 801cd5a:	2301      	movs	r3, #1
 801cd5c:	6144      	str	r4, [r0, #20]
 801cd5e:	6103      	str	r3, [r0, #16]
 801cd60:	bd10      	pop	{r4, pc}
 801cd62:	bf00      	nop
 801cd64:	0802242c 	.word	0x0802242c
 801cd68:	0802249d 	.word	0x0802249d

0801cd6c <__multiply>:
 801cd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd70:	4614      	mov	r4, r2
 801cd72:	690a      	ldr	r2, [r1, #16]
 801cd74:	6923      	ldr	r3, [r4, #16]
 801cd76:	429a      	cmp	r2, r3
 801cd78:	bfa8      	it	ge
 801cd7a:	4623      	movge	r3, r4
 801cd7c:	460f      	mov	r7, r1
 801cd7e:	bfa4      	itt	ge
 801cd80:	460c      	movge	r4, r1
 801cd82:	461f      	movge	r7, r3
 801cd84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801cd88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801cd8c:	68a3      	ldr	r3, [r4, #8]
 801cd8e:	6861      	ldr	r1, [r4, #4]
 801cd90:	eb0a 0609 	add.w	r6, sl, r9
 801cd94:	42b3      	cmp	r3, r6
 801cd96:	b085      	sub	sp, #20
 801cd98:	bfb8      	it	lt
 801cd9a:	3101      	addlt	r1, #1
 801cd9c:	f7ff fe92 	bl	801cac4 <_Balloc>
 801cda0:	b930      	cbnz	r0, 801cdb0 <__multiply+0x44>
 801cda2:	4602      	mov	r2, r0
 801cda4:	4b44      	ldr	r3, [pc, #272]	@ (801ceb8 <__multiply+0x14c>)
 801cda6:	4845      	ldr	r0, [pc, #276]	@ (801cebc <__multiply+0x150>)
 801cda8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801cdac:	f7fe fc8a 	bl	801b6c4 <__assert_func>
 801cdb0:	f100 0514 	add.w	r5, r0, #20
 801cdb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cdb8:	462b      	mov	r3, r5
 801cdba:	2200      	movs	r2, #0
 801cdbc:	4543      	cmp	r3, r8
 801cdbe:	d321      	bcc.n	801ce04 <__multiply+0x98>
 801cdc0:	f107 0114 	add.w	r1, r7, #20
 801cdc4:	f104 0214 	add.w	r2, r4, #20
 801cdc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801cdcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801cdd0:	9302      	str	r3, [sp, #8]
 801cdd2:	1b13      	subs	r3, r2, r4
 801cdd4:	3b15      	subs	r3, #21
 801cdd6:	f023 0303 	bic.w	r3, r3, #3
 801cdda:	3304      	adds	r3, #4
 801cddc:	f104 0715 	add.w	r7, r4, #21
 801cde0:	42ba      	cmp	r2, r7
 801cde2:	bf38      	it	cc
 801cde4:	2304      	movcc	r3, #4
 801cde6:	9301      	str	r3, [sp, #4]
 801cde8:	9b02      	ldr	r3, [sp, #8]
 801cdea:	9103      	str	r1, [sp, #12]
 801cdec:	428b      	cmp	r3, r1
 801cdee:	d80c      	bhi.n	801ce0a <__multiply+0x9e>
 801cdf0:	2e00      	cmp	r6, #0
 801cdf2:	dd03      	ble.n	801cdfc <__multiply+0x90>
 801cdf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cdf8:	2b00      	cmp	r3, #0
 801cdfa:	d05b      	beq.n	801ceb4 <__multiply+0x148>
 801cdfc:	6106      	str	r6, [r0, #16]
 801cdfe:	b005      	add	sp, #20
 801ce00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce04:	f843 2b04 	str.w	r2, [r3], #4
 801ce08:	e7d8      	b.n	801cdbc <__multiply+0x50>
 801ce0a:	f8b1 a000 	ldrh.w	sl, [r1]
 801ce0e:	f1ba 0f00 	cmp.w	sl, #0
 801ce12:	d024      	beq.n	801ce5e <__multiply+0xf2>
 801ce14:	f104 0e14 	add.w	lr, r4, #20
 801ce18:	46a9      	mov	r9, r5
 801ce1a:	f04f 0c00 	mov.w	ip, #0
 801ce1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ce22:	f8d9 3000 	ldr.w	r3, [r9]
 801ce26:	fa1f fb87 	uxth.w	fp, r7
 801ce2a:	b29b      	uxth	r3, r3
 801ce2c:	fb0a 330b 	mla	r3, sl, fp, r3
 801ce30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801ce34:	f8d9 7000 	ldr.w	r7, [r9]
 801ce38:	4463      	add	r3, ip
 801ce3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ce3e:	fb0a c70b 	mla	r7, sl, fp, ip
 801ce42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801ce46:	b29b      	uxth	r3, r3
 801ce48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ce4c:	4572      	cmp	r2, lr
 801ce4e:	f849 3b04 	str.w	r3, [r9], #4
 801ce52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801ce56:	d8e2      	bhi.n	801ce1e <__multiply+0xb2>
 801ce58:	9b01      	ldr	r3, [sp, #4]
 801ce5a:	f845 c003 	str.w	ip, [r5, r3]
 801ce5e:	9b03      	ldr	r3, [sp, #12]
 801ce60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801ce64:	3104      	adds	r1, #4
 801ce66:	f1b9 0f00 	cmp.w	r9, #0
 801ce6a:	d021      	beq.n	801ceb0 <__multiply+0x144>
 801ce6c:	682b      	ldr	r3, [r5, #0]
 801ce6e:	f104 0c14 	add.w	ip, r4, #20
 801ce72:	46ae      	mov	lr, r5
 801ce74:	f04f 0a00 	mov.w	sl, #0
 801ce78:	f8bc b000 	ldrh.w	fp, [ip]
 801ce7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801ce80:	fb09 770b 	mla	r7, r9, fp, r7
 801ce84:	4457      	add	r7, sl
 801ce86:	b29b      	uxth	r3, r3
 801ce88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801ce8c:	f84e 3b04 	str.w	r3, [lr], #4
 801ce90:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ce94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ce98:	f8be 3000 	ldrh.w	r3, [lr]
 801ce9c:	fb09 330a 	mla	r3, r9, sl, r3
 801cea0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801cea4:	4562      	cmp	r2, ip
 801cea6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ceaa:	d8e5      	bhi.n	801ce78 <__multiply+0x10c>
 801ceac:	9f01      	ldr	r7, [sp, #4]
 801ceae:	51eb      	str	r3, [r5, r7]
 801ceb0:	3504      	adds	r5, #4
 801ceb2:	e799      	b.n	801cde8 <__multiply+0x7c>
 801ceb4:	3e01      	subs	r6, #1
 801ceb6:	e79b      	b.n	801cdf0 <__multiply+0x84>
 801ceb8:	0802242c 	.word	0x0802242c
 801cebc:	0802249d 	.word	0x0802249d

0801cec0 <__pow5mult>:
 801cec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cec4:	4615      	mov	r5, r2
 801cec6:	f012 0203 	ands.w	r2, r2, #3
 801ceca:	4607      	mov	r7, r0
 801cecc:	460e      	mov	r6, r1
 801cece:	d007      	beq.n	801cee0 <__pow5mult+0x20>
 801ced0:	4c25      	ldr	r4, [pc, #148]	@ (801cf68 <__pow5mult+0xa8>)
 801ced2:	3a01      	subs	r2, #1
 801ced4:	2300      	movs	r3, #0
 801ced6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ceda:	f7ff fe55 	bl	801cb88 <__multadd>
 801cede:	4606      	mov	r6, r0
 801cee0:	10ad      	asrs	r5, r5, #2
 801cee2:	d03d      	beq.n	801cf60 <__pow5mult+0xa0>
 801cee4:	69fc      	ldr	r4, [r7, #28]
 801cee6:	b97c      	cbnz	r4, 801cf08 <__pow5mult+0x48>
 801cee8:	2010      	movs	r0, #16
 801ceea:	f7fc fb3b 	bl	8019564 <malloc>
 801ceee:	4602      	mov	r2, r0
 801cef0:	61f8      	str	r0, [r7, #28]
 801cef2:	b928      	cbnz	r0, 801cf00 <__pow5mult+0x40>
 801cef4:	4b1d      	ldr	r3, [pc, #116]	@ (801cf6c <__pow5mult+0xac>)
 801cef6:	481e      	ldr	r0, [pc, #120]	@ (801cf70 <__pow5mult+0xb0>)
 801cef8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801cefc:	f7fe fbe2 	bl	801b6c4 <__assert_func>
 801cf00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cf04:	6004      	str	r4, [r0, #0]
 801cf06:	60c4      	str	r4, [r0, #12]
 801cf08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801cf0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801cf10:	b94c      	cbnz	r4, 801cf26 <__pow5mult+0x66>
 801cf12:	f240 2171 	movw	r1, #625	@ 0x271
 801cf16:	4638      	mov	r0, r7
 801cf18:	f7ff ff12 	bl	801cd40 <__i2b>
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	f8c8 0008 	str.w	r0, [r8, #8]
 801cf22:	4604      	mov	r4, r0
 801cf24:	6003      	str	r3, [r0, #0]
 801cf26:	f04f 0900 	mov.w	r9, #0
 801cf2a:	07eb      	lsls	r3, r5, #31
 801cf2c:	d50a      	bpl.n	801cf44 <__pow5mult+0x84>
 801cf2e:	4631      	mov	r1, r6
 801cf30:	4622      	mov	r2, r4
 801cf32:	4638      	mov	r0, r7
 801cf34:	f7ff ff1a 	bl	801cd6c <__multiply>
 801cf38:	4631      	mov	r1, r6
 801cf3a:	4680      	mov	r8, r0
 801cf3c:	4638      	mov	r0, r7
 801cf3e:	f7ff fe01 	bl	801cb44 <_Bfree>
 801cf42:	4646      	mov	r6, r8
 801cf44:	106d      	asrs	r5, r5, #1
 801cf46:	d00b      	beq.n	801cf60 <__pow5mult+0xa0>
 801cf48:	6820      	ldr	r0, [r4, #0]
 801cf4a:	b938      	cbnz	r0, 801cf5c <__pow5mult+0x9c>
 801cf4c:	4622      	mov	r2, r4
 801cf4e:	4621      	mov	r1, r4
 801cf50:	4638      	mov	r0, r7
 801cf52:	f7ff ff0b 	bl	801cd6c <__multiply>
 801cf56:	6020      	str	r0, [r4, #0]
 801cf58:	f8c0 9000 	str.w	r9, [r0]
 801cf5c:	4604      	mov	r4, r0
 801cf5e:	e7e4      	b.n	801cf2a <__pow5mult+0x6a>
 801cf60:	4630      	mov	r0, r6
 801cf62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cf66:	bf00      	nop
 801cf68:	080224f8 	.word	0x080224f8
 801cf6c:	08022312 	.word	0x08022312
 801cf70:	0802249d 	.word	0x0802249d

0801cf74 <__lshift>:
 801cf74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cf78:	460c      	mov	r4, r1
 801cf7a:	6849      	ldr	r1, [r1, #4]
 801cf7c:	6923      	ldr	r3, [r4, #16]
 801cf7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cf82:	68a3      	ldr	r3, [r4, #8]
 801cf84:	4607      	mov	r7, r0
 801cf86:	4691      	mov	r9, r2
 801cf88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cf8c:	f108 0601 	add.w	r6, r8, #1
 801cf90:	42b3      	cmp	r3, r6
 801cf92:	db0b      	blt.n	801cfac <__lshift+0x38>
 801cf94:	4638      	mov	r0, r7
 801cf96:	f7ff fd95 	bl	801cac4 <_Balloc>
 801cf9a:	4605      	mov	r5, r0
 801cf9c:	b948      	cbnz	r0, 801cfb2 <__lshift+0x3e>
 801cf9e:	4602      	mov	r2, r0
 801cfa0:	4b28      	ldr	r3, [pc, #160]	@ (801d044 <__lshift+0xd0>)
 801cfa2:	4829      	ldr	r0, [pc, #164]	@ (801d048 <__lshift+0xd4>)
 801cfa4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801cfa8:	f7fe fb8c 	bl	801b6c4 <__assert_func>
 801cfac:	3101      	adds	r1, #1
 801cfae:	005b      	lsls	r3, r3, #1
 801cfb0:	e7ee      	b.n	801cf90 <__lshift+0x1c>
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	f100 0114 	add.w	r1, r0, #20
 801cfb8:	f100 0210 	add.w	r2, r0, #16
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	4553      	cmp	r3, sl
 801cfc0:	db33      	blt.n	801d02a <__lshift+0xb6>
 801cfc2:	6920      	ldr	r0, [r4, #16]
 801cfc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cfc8:	f104 0314 	add.w	r3, r4, #20
 801cfcc:	f019 091f 	ands.w	r9, r9, #31
 801cfd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cfd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cfd8:	d02b      	beq.n	801d032 <__lshift+0xbe>
 801cfda:	f1c9 0e20 	rsb	lr, r9, #32
 801cfde:	468a      	mov	sl, r1
 801cfe0:	2200      	movs	r2, #0
 801cfe2:	6818      	ldr	r0, [r3, #0]
 801cfe4:	fa00 f009 	lsl.w	r0, r0, r9
 801cfe8:	4310      	orrs	r0, r2
 801cfea:	f84a 0b04 	str.w	r0, [sl], #4
 801cfee:	f853 2b04 	ldr.w	r2, [r3], #4
 801cff2:	459c      	cmp	ip, r3
 801cff4:	fa22 f20e 	lsr.w	r2, r2, lr
 801cff8:	d8f3      	bhi.n	801cfe2 <__lshift+0x6e>
 801cffa:	ebac 0304 	sub.w	r3, ip, r4
 801cffe:	3b15      	subs	r3, #21
 801d000:	f023 0303 	bic.w	r3, r3, #3
 801d004:	3304      	adds	r3, #4
 801d006:	f104 0015 	add.w	r0, r4, #21
 801d00a:	4584      	cmp	ip, r0
 801d00c:	bf38      	it	cc
 801d00e:	2304      	movcc	r3, #4
 801d010:	50ca      	str	r2, [r1, r3]
 801d012:	b10a      	cbz	r2, 801d018 <__lshift+0xa4>
 801d014:	f108 0602 	add.w	r6, r8, #2
 801d018:	3e01      	subs	r6, #1
 801d01a:	4638      	mov	r0, r7
 801d01c:	612e      	str	r6, [r5, #16]
 801d01e:	4621      	mov	r1, r4
 801d020:	f7ff fd90 	bl	801cb44 <_Bfree>
 801d024:	4628      	mov	r0, r5
 801d026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d02a:	f842 0f04 	str.w	r0, [r2, #4]!
 801d02e:	3301      	adds	r3, #1
 801d030:	e7c5      	b.n	801cfbe <__lshift+0x4a>
 801d032:	3904      	subs	r1, #4
 801d034:	f853 2b04 	ldr.w	r2, [r3], #4
 801d038:	f841 2f04 	str.w	r2, [r1, #4]!
 801d03c:	459c      	cmp	ip, r3
 801d03e:	d8f9      	bhi.n	801d034 <__lshift+0xc0>
 801d040:	e7ea      	b.n	801d018 <__lshift+0xa4>
 801d042:	bf00      	nop
 801d044:	0802242c 	.word	0x0802242c
 801d048:	0802249d 	.word	0x0802249d

0801d04c <__mcmp>:
 801d04c:	690a      	ldr	r2, [r1, #16]
 801d04e:	4603      	mov	r3, r0
 801d050:	6900      	ldr	r0, [r0, #16]
 801d052:	1a80      	subs	r0, r0, r2
 801d054:	b530      	push	{r4, r5, lr}
 801d056:	d10e      	bne.n	801d076 <__mcmp+0x2a>
 801d058:	3314      	adds	r3, #20
 801d05a:	3114      	adds	r1, #20
 801d05c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d060:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d064:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d068:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d06c:	4295      	cmp	r5, r2
 801d06e:	d003      	beq.n	801d078 <__mcmp+0x2c>
 801d070:	d205      	bcs.n	801d07e <__mcmp+0x32>
 801d072:	f04f 30ff 	mov.w	r0, #4294967295
 801d076:	bd30      	pop	{r4, r5, pc}
 801d078:	42a3      	cmp	r3, r4
 801d07a:	d3f3      	bcc.n	801d064 <__mcmp+0x18>
 801d07c:	e7fb      	b.n	801d076 <__mcmp+0x2a>
 801d07e:	2001      	movs	r0, #1
 801d080:	e7f9      	b.n	801d076 <__mcmp+0x2a>
	...

0801d084 <__mdiff>:
 801d084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d088:	4689      	mov	r9, r1
 801d08a:	4606      	mov	r6, r0
 801d08c:	4611      	mov	r1, r2
 801d08e:	4648      	mov	r0, r9
 801d090:	4614      	mov	r4, r2
 801d092:	f7ff ffdb 	bl	801d04c <__mcmp>
 801d096:	1e05      	subs	r5, r0, #0
 801d098:	d112      	bne.n	801d0c0 <__mdiff+0x3c>
 801d09a:	4629      	mov	r1, r5
 801d09c:	4630      	mov	r0, r6
 801d09e:	f7ff fd11 	bl	801cac4 <_Balloc>
 801d0a2:	4602      	mov	r2, r0
 801d0a4:	b928      	cbnz	r0, 801d0b2 <__mdiff+0x2e>
 801d0a6:	4b3f      	ldr	r3, [pc, #252]	@ (801d1a4 <__mdiff+0x120>)
 801d0a8:	f240 2137 	movw	r1, #567	@ 0x237
 801d0ac:	483e      	ldr	r0, [pc, #248]	@ (801d1a8 <__mdiff+0x124>)
 801d0ae:	f7fe fb09 	bl	801b6c4 <__assert_func>
 801d0b2:	2301      	movs	r3, #1
 801d0b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d0b8:	4610      	mov	r0, r2
 801d0ba:	b003      	add	sp, #12
 801d0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0c0:	bfbc      	itt	lt
 801d0c2:	464b      	movlt	r3, r9
 801d0c4:	46a1      	movlt	r9, r4
 801d0c6:	4630      	mov	r0, r6
 801d0c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d0cc:	bfba      	itte	lt
 801d0ce:	461c      	movlt	r4, r3
 801d0d0:	2501      	movlt	r5, #1
 801d0d2:	2500      	movge	r5, #0
 801d0d4:	f7ff fcf6 	bl	801cac4 <_Balloc>
 801d0d8:	4602      	mov	r2, r0
 801d0da:	b918      	cbnz	r0, 801d0e4 <__mdiff+0x60>
 801d0dc:	4b31      	ldr	r3, [pc, #196]	@ (801d1a4 <__mdiff+0x120>)
 801d0de:	f240 2145 	movw	r1, #581	@ 0x245
 801d0e2:	e7e3      	b.n	801d0ac <__mdiff+0x28>
 801d0e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d0e8:	6926      	ldr	r6, [r4, #16]
 801d0ea:	60c5      	str	r5, [r0, #12]
 801d0ec:	f109 0310 	add.w	r3, r9, #16
 801d0f0:	f109 0514 	add.w	r5, r9, #20
 801d0f4:	f104 0e14 	add.w	lr, r4, #20
 801d0f8:	f100 0b14 	add.w	fp, r0, #20
 801d0fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d100:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d104:	9301      	str	r3, [sp, #4]
 801d106:	46d9      	mov	r9, fp
 801d108:	f04f 0c00 	mov.w	ip, #0
 801d10c:	9b01      	ldr	r3, [sp, #4]
 801d10e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d112:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d116:	9301      	str	r3, [sp, #4]
 801d118:	fa1f f38a 	uxth.w	r3, sl
 801d11c:	4619      	mov	r1, r3
 801d11e:	b283      	uxth	r3, r0
 801d120:	1acb      	subs	r3, r1, r3
 801d122:	0c00      	lsrs	r0, r0, #16
 801d124:	4463      	add	r3, ip
 801d126:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d12a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d12e:	b29b      	uxth	r3, r3
 801d130:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d134:	4576      	cmp	r6, lr
 801d136:	f849 3b04 	str.w	r3, [r9], #4
 801d13a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d13e:	d8e5      	bhi.n	801d10c <__mdiff+0x88>
 801d140:	1b33      	subs	r3, r6, r4
 801d142:	3b15      	subs	r3, #21
 801d144:	f023 0303 	bic.w	r3, r3, #3
 801d148:	3415      	adds	r4, #21
 801d14a:	3304      	adds	r3, #4
 801d14c:	42a6      	cmp	r6, r4
 801d14e:	bf38      	it	cc
 801d150:	2304      	movcc	r3, #4
 801d152:	441d      	add	r5, r3
 801d154:	445b      	add	r3, fp
 801d156:	461e      	mov	r6, r3
 801d158:	462c      	mov	r4, r5
 801d15a:	4544      	cmp	r4, r8
 801d15c:	d30e      	bcc.n	801d17c <__mdiff+0xf8>
 801d15e:	f108 0103 	add.w	r1, r8, #3
 801d162:	1b49      	subs	r1, r1, r5
 801d164:	f021 0103 	bic.w	r1, r1, #3
 801d168:	3d03      	subs	r5, #3
 801d16a:	45a8      	cmp	r8, r5
 801d16c:	bf38      	it	cc
 801d16e:	2100      	movcc	r1, #0
 801d170:	440b      	add	r3, r1
 801d172:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d176:	b191      	cbz	r1, 801d19e <__mdiff+0x11a>
 801d178:	6117      	str	r7, [r2, #16]
 801d17a:	e79d      	b.n	801d0b8 <__mdiff+0x34>
 801d17c:	f854 1b04 	ldr.w	r1, [r4], #4
 801d180:	46e6      	mov	lr, ip
 801d182:	0c08      	lsrs	r0, r1, #16
 801d184:	fa1c fc81 	uxtah	ip, ip, r1
 801d188:	4471      	add	r1, lr
 801d18a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d18e:	b289      	uxth	r1, r1
 801d190:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d194:	f846 1b04 	str.w	r1, [r6], #4
 801d198:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d19c:	e7dd      	b.n	801d15a <__mdiff+0xd6>
 801d19e:	3f01      	subs	r7, #1
 801d1a0:	e7e7      	b.n	801d172 <__mdiff+0xee>
 801d1a2:	bf00      	nop
 801d1a4:	0802242c 	.word	0x0802242c
 801d1a8:	0802249d 	.word	0x0802249d

0801d1ac <__ulp>:
 801d1ac:	b082      	sub	sp, #8
 801d1ae:	ed8d 0b00 	vstr	d0, [sp]
 801d1b2:	9a01      	ldr	r2, [sp, #4]
 801d1b4:	4b0f      	ldr	r3, [pc, #60]	@ (801d1f4 <__ulp+0x48>)
 801d1b6:	4013      	ands	r3, r2
 801d1b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	dc08      	bgt.n	801d1d2 <__ulp+0x26>
 801d1c0:	425b      	negs	r3, r3
 801d1c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d1c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d1ca:	da04      	bge.n	801d1d6 <__ulp+0x2a>
 801d1cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d1d0:	4113      	asrs	r3, r2
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	e008      	b.n	801d1e8 <__ulp+0x3c>
 801d1d6:	f1a2 0314 	sub.w	r3, r2, #20
 801d1da:	2b1e      	cmp	r3, #30
 801d1dc:	bfda      	itte	le
 801d1de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d1e2:	40da      	lsrle	r2, r3
 801d1e4:	2201      	movgt	r2, #1
 801d1e6:	2300      	movs	r3, #0
 801d1e8:	4619      	mov	r1, r3
 801d1ea:	4610      	mov	r0, r2
 801d1ec:	ec41 0b10 	vmov	d0, r0, r1
 801d1f0:	b002      	add	sp, #8
 801d1f2:	4770      	bx	lr
 801d1f4:	7ff00000 	.word	0x7ff00000

0801d1f8 <__b2d>:
 801d1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d1fc:	6906      	ldr	r6, [r0, #16]
 801d1fe:	f100 0814 	add.w	r8, r0, #20
 801d202:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d206:	1f37      	subs	r7, r6, #4
 801d208:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d20c:	4610      	mov	r0, r2
 801d20e:	f7ff fd4b 	bl	801cca8 <__hi0bits>
 801d212:	f1c0 0320 	rsb	r3, r0, #32
 801d216:	280a      	cmp	r0, #10
 801d218:	600b      	str	r3, [r1, #0]
 801d21a:	491b      	ldr	r1, [pc, #108]	@ (801d288 <__b2d+0x90>)
 801d21c:	dc15      	bgt.n	801d24a <__b2d+0x52>
 801d21e:	f1c0 0c0b 	rsb	ip, r0, #11
 801d222:	fa22 f30c 	lsr.w	r3, r2, ip
 801d226:	45b8      	cmp	r8, r7
 801d228:	ea43 0501 	orr.w	r5, r3, r1
 801d22c:	bf34      	ite	cc
 801d22e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d232:	2300      	movcs	r3, #0
 801d234:	3015      	adds	r0, #21
 801d236:	fa02 f000 	lsl.w	r0, r2, r0
 801d23a:	fa23 f30c 	lsr.w	r3, r3, ip
 801d23e:	4303      	orrs	r3, r0
 801d240:	461c      	mov	r4, r3
 801d242:	ec45 4b10 	vmov	d0, r4, r5
 801d246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d24a:	45b8      	cmp	r8, r7
 801d24c:	bf3a      	itte	cc
 801d24e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d252:	f1a6 0708 	subcc.w	r7, r6, #8
 801d256:	2300      	movcs	r3, #0
 801d258:	380b      	subs	r0, #11
 801d25a:	d012      	beq.n	801d282 <__b2d+0x8a>
 801d25c:	f1c0 0120 	rsb	r1, r0, #32
 801d260:	fa23 f401 	lsr.w	r4, r3, r1
 801d264:	4082      	lsls	r2, r0
 801d266:	4322      	orrs	r2, r4
 801d268:	4547      	cmp	r7, r8
 801d26a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d26e:	bf8c      	ite	hi
 801d270:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d274:	2200      	movls	r2, #0
 801d276:	4083      	lsls	r3, r0
 801d278:	40ca      	lsrs	r2, r1
 801d27a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d27e:	4313      	orrs	r3, r2
 801d280:	e7de      	b.n	801d240 <__b2d+0x48>
 801d282:	ea42 0501 	orr.w	r5, r2, r1
 801d286:	e7db      	b.n	801d240 <__b2d+0x48>
 801d288:	3ff00000 	.word	0x3ff00000

0801d28c <__d2b>:
 801d28c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d290:	460f      	mov	r7, r1
 801d292:	2101      	movs	r1, #1
 801d294:	ec59 8b10 	vmov	r8, r9, d0
 801d298:	4616      	mov	r6, r2
 801d29a:	f7ff fc13 	bl	801cac4 <_Balloc>
 801d29e:	4604      	mov	r4, r0
 801d2a0:	b930      	cbnz	r0, 801d2b0 <__d2b+0x24>
 801d2a2:	4602      	mov	r2, r0
 801d2a4:	4b23      	ldr	r3, [pc, #140]	@ (801d334 <__d2b+0xa8>)
 801d2a6:	4824      	ldr	r0, [pc, #144]	@ (801d338 <__d2b+0xac>)
 801d2a8:	f240 310f 	movw	r1, #783	@ 0x30f
 801d2ac:	f7fe fa0a 	bl	801b6c4 <__assert_func>
 801d2b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d2b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d2b8:	b10d      	cbz	r5, 801d2be <__d2b+0x32>
 801d2ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d2be:	9301      	str	r3, [sp, #4]
 801d2c0:	f1b8 0300 	subs.w	r3, r8, #0
 801d2c4:	d023      	beq.n	801d30e <__d2b+0x82>
 801d2c6:	4668      	mov	r0, sp
 801d2c8:	9300      	str	r3, [sp, #0]
 801d2ca:	f7ff fd0c 	bl	801cce6 <__lo0bits>
 801d2ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d2d2:	b1d0      	cbz	r0, 801d30a <__d2b+0x7e>
 801d2d4:	f1c0 0320 	rsb	r3, r0, #32
 801d2d8:	fa02 f303 	lsl.w	r3, r2, r3
 801d2dc:	430b      	orrs	r3, r1
 801d2de:	40c2      	lsrs	r2, r0
 801d2e0:	6163      	str	r3, [r4, #20]
 801d2e2:	9201      	str	r2, [sp, #4]
 801d2e4:	9b01      	ldr	r3, [sp, #4]
 801d2e6:	61a3      	str	r3, [r4, #24]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	bf0c      	ite	eq
 801d2ec:	2201      	moveq	r2, #1
 801d2ee:	2202      	movne	r2, #2
 801d2f0:	6122      	str	r2, [r4, #16]
 801d2f2:	b1a5      	cbz	r5, 801d31e <__d2b+0x92>
 801d2f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d2f8:	4405      	add	r5, r0
 801d2fa:	603d      	str	r5, [r7, #0]
 801d2fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d300:	6030      	str	r0, [r6, #0]
 801d302:	4620      	mov	r0, r4
 801d304:	b003      	add	sp, #12
 801d306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d30a:	6161      	str	r1, [r4, #20]
 801d30c:	e7ea      	b.n	801d2e4 <__d2b+0x58>
 801d30e:	a801      	add	r0, sp, #4
 801d310:	f7ff fce9 	bl	801cce6 <__lo0bits>
 801d314:	9b01      	ldr	r3, [sp, #4]
 801d316:	6163      	str	r3, [r4, #20]
 801d318:	3020      	adds	r0, #32
 801d31a:	2201      	movs	r2, #1
 801d31c:	e7e8      	b.n	801d2f0 <__d2b+0x64>
 801d31e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d322:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d326:	6038      	str	r0, [r7, #0]
 801d328:	6918      	ldr	r0, [r3, #16]
 801d32a:	f7ff fcbd 	bl	801cca8 <__hi0bits>
 801d32e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d332:	e7e5      	b.n	801d300 <__d2b+0x74>
 801d334:	0802242c 	.word	0x0802242c
 801d338:	0802249d 	.word	0x0802249d

0801d33c <__ratio>:
 801d33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d340:	b085      	sub	sp, #20
 801d342:	e9cd 1000 	strd	r1, r0, [sp]
 801d346:	a902      	add	r1, sp, #8
 801d348:	f7ff ff56 	bl	801d1f8 <__b2d>
 801d34c:	9800      	ldr	r0, [sp, #0]
 801d34e:	a903      	add	r1, sp, #12
 801d350:	ec55 4b10 	vmov	r4, r5, d0
 801d354:	f7ff ff50 	bl	801d1f8 <__b2d>
 801d358:	9b01      	ldr	r3, [sp, #4]
 801d35a:	6919      	ldr	r1, [r3, #16]
 801d35c:	9b00      	ldr	r3, [sp, #0]
 801d35e:	691b      	ldr	r3, [r3, #16]
 801d360:	1ac9      	subs	r1, r1, r3
 801d362:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d366:	1a9b      	subs	r3, r3, r2
 801d368:	ec5b ab10 	vmov	sl, fp, d0
 801d36c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d370:	2b00      	cmp	r3, #0
 801d372:	bfce      	itee	gt
 801d374:	462a      	movgt	r2, r5
 801d376:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d37a:	465a      	movle	r2, fp
 801d37c:	462f      	mov	r7, r5
 801d37e:	46d9      	mov	r9, fp
 801d380:	bfcc      	ite	gt
 801d382:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d386:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d38a:	464b      	mov	r3, r9
 801d38c:	4652      	mov	r2, sl
 801d38e:	4620      	mov	r0, r4
 801d390:	4639      	mov	r1, r7
 801d392:	f7e3 fa33 	bl	80007fc <__aeabi_ddiv>
 801d396:	ec41 0b10 	vmov	d0, r0, r1
 801d39a:	b005      	add	sp, #20
 801d39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d3a0 <__copybits>:
 801d3a0:	3901      	subs	r1, #1
 801d3a2:	b570      	push	{r4, r5, r6, lr}
 801d3a4:	1149      	asrs	r1, r1, #5
 801d3a6:	6914      	ldr	r4, [r2, #16]
 801d3a8:	3101      	adds	r1, #1
 801d3aa:	f102 0314 	add.w	r3, r2, #20
 801d3ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d3b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d3b6:	1f05      	subs	r5, r0, #4
 801d3b8:	42a3      	cmp	r3, r4
 801d3ba:	d30c      	bcc.n	801d3d6 <__copybits+0x36>
 801d3bc:	1aa3      	subs	r3, r4, r2
 801d3be:	3b11      	subs	r3, #17
 801d3c0:	f023 0303 	bic.w	r3, r3, #3
 801d3c4:	3211      	adds	r2, #17
 801d3c6:	42a2      	cmp	r2, r4
 801d3c8:	bf88      	it	hi
 801d3ca:	2300      	movhi	r3, #0
 801d3cc:	4418      	add	r0, r3
 801d3ce:	2300      	movs	r3, #0
 801d3d0:	4288      	cmp	r0, r1
 801d3d2:	d305      	bcc.n	801d3e0 <__copybits+0x40>
 801d3d4:	bd70      	pop	{r4, r5, r6, pc}
 801d3d6:	f853 6b04 	ldr.w	r6, [r3], #4
 801d3da:	f845 6f04 	str.w	r6, [r5, #4]!
 801d3de:	e7eb      	b.n	801d3b8 <__copybits+0x18>
 801d3e0:	f840 3b04 	str.w	r3, [r0], #4
 801d3e4:	e7f4      	b.n	801d3d0 <__copybits+0x30>

0801d3e6 <__any_on>:
 801d3e6:	f100 0214 	add.w	r2, r0, #20
 801d3ea:	6900      	ldr	r0, [r0, #16]
 801d3ec:	114b      	asrs	r3, r1, #5
 801d3ee:	4298      	cmp	r0, r3
 801d3f0:	b510      	push	{r4, lr}
 801d3f2:	db11      	blt.n	801d418 <__any_on+0x32>
 801d3f4:	dd0a      	ble.n	801d40c <__any_on+0x26>
 801d3f6:	f011 011f 	ands.w	r1, r1, #31
 801d3fa:	d007      	beq.n	801d40c <__any_on+0x26>
 801d3fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d400:	fa24 f001 	lsr.w	r0, r4, r1
 801d404:	fa00 f101 	lsl.w	r1, r0, r1
 801d408:	428c      	cmp	r4, r1
 801d40a:	d10b      	bne.n	801d424 <__any_on+0x3e>
 801d40c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d410:	4293      	cmp	r3, r2
 801d412:	d803      	bhi.n	801d41c <__any_on+0x36>
 801d414:	2000      	movs	r0, #0
 801d416:	bd10      	pop	{r4, pc}
 801d418:	4603      	mov	r3, r0
 801d41a:	e7f7      	b.n	801d40c <__any_on+0x26>
 801d41c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d420:	2900      	cmp	r1, #0
 801d422:	d0f5      	beq.n	801d410 <__any_on+0x2a>
 801d424:	2001      	movs	r0, #1
 801d426:	e7f6      	b.n	801d416 <__any_on+0x30>

0801d428 <__ascii_wctomb>:
 801d428:	4603      	mov	r3, r0
 801d42a:	4608      	mov	r0, r1
 801d42c:	b141      	cbz	r1, 801d440 <__ascii_wctomb+0x18>
 801d42e:	2aff      	cmp	r2, #255	@ 0xff
 801d430:	d904      	bls.n	801d43c <__ascii_wctomb+0x14>
 801d432:	228a      	movs	r2, #138	@ 0x8a
 801d434:	601a      	str	r2, [r3, #0]
 801d436:	f04f 30ff 	mov.w	r0, #4294967295
 801d43a:	4770      	bx	lr
 801d43c:	700a      	strb	r2, [r1, #0]
 801d43e:	2001      	movs	r0, #1
 801d440:	4770      	bx	lr

0801d442 <__ssputs_r>:
 801d442:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d446:	688e      	ldr	r6, [r1, #8]
 801d448:	461f      	mov	r7, r3
 801d44a:	42be      	cmp	r6, r7
 801d44c:	680b      	ldr	r3, [r1, #0]
 801d44e:	4682      	mov	sl, r0
 801d450:	460c      	mov	r4, r1
 801d452:	4690      	mov	r8, r2
 801d454:	d82d      	bhi.n	801d4b2 <__ssputs_r+0x70>
 801d456:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d45a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d45e:	d026      	beq.n	801d4ae <__ssputs_r+0x6c>
 801d460:	6965      	ldr	r5, [r4, #20]
 801d462:	6909      	ldr	r1, [r1, #16]
 801d464:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d468:	eba3 0901 	sub.w	r9, r3, r1
 801d46c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d470:	1c7b      	adds	r3, r7, #1
 801d472:	444b      	add	r3, r9
 801d474:	106d      	asrs	r5, r5, #1
 801d476:	429d      	cmp	r5, r3
 801d478:	bf38      	it	cc
 801d47a:	461d      	movcc	r5, r3
 801d47c:	0553      	lsls	r3, r2, #21
 801d47e:	d527      	bpl.n	801d4d0 <__ssputs_r+0x8e>
 801d480:	4629      	mov	r1, r5
 801d482:	f7fc f8a1 	bl	80195c8 <_malloc_r>
 801d486:	4606      	mov	r6, r0
 801d488:	b360      	cbz	r0, 801d4e4 <__ssputs_r+0xa2>
 801d48a:	6921      	ldr	r1, [r4, #16]
 801d48c:	464a      	mov	r2, r9
 801d48e:	f7fe f8fc 	bl	801b68a <memcpy>
 801d492:	89a3      	ldrh	r3, [r4, #12]
 801d494:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d49c:	81a3      	strh	r3, [r4, #12]
 801d49e:	6126      	str	r6, [r4, #16]
 801d4a0:	6165      	str	r5, [r4, #20]
 801d4a2:	444e      	add	r6, r9
 801d4a4:	eba5 0509 	sub.w	r5, r5, r9
 801d4a8:	6026      	str	r6, [r4, #0]
 801d4aa:	60a5      	str	r5, [r4, #8]
 801d4ac:	463e      	mov	r6, r7
 801d4ae:	42be      	cmp	r6, r7
 801d4b0:	d900      	bls.n	801d4b4 <__ssputs_r+0x72>
 801d4b2:	463e      	mov	r6, r7
 801d4b4:	6820      	ldr	r0, [r4, #0]
 801d4b6:	4632      	mov	r2, r6
 801d4b8:	4641      	mov	r1, r8
 801d4ba:	f000 fbad 	bl	801dc18 <memmove>
 801d4be:	68a3      	ldr	r3, [r4, #8]
 801d4c0:	1b9b      	subs	r3, r3, r6
 801d4c2:	60a3      	str	r3, [r4, #8]
 801d4c4:	6823      	ldr	r3, [r4, #0]
 801d4c6:	4433      	add	r3, r6
 801d4c8:	6023      	str	r3, [r4, #0]
 801d4ca:	2000      	movs	r0, #0
 801d4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d4d0:	462a      	mov	r2, r5
 801d4d2:	f000 fbd6 	bl	801dc82 <_realloc_r>
 801d4d6:	4606      	mov	r6, r0
 801d4d8:	2800      	cmp	r0, #0
 801d4da:	d1e0      	bne.n	801d49e <__ssputs_r+0x5c>
 801d4dc:	6921      	ldr	r1, [r4, #16]
 801d4de:	4650      	mov	r0, sl
 801d4e0:	f7fe ff5a 	bl	801c398 <_free_r>
 801d4e4:	230c      	movs	r3, #12
 801d4e6:	f8ca 3000 	str.w	r3, [sl]
 801d4ea:	89a3      	ldrh	r3, [r4, #12]
 801d4ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d4f0:	81a3      	strh	r3, [r4, #12]
 801d4f2:	f04f 30ff 	mov.w	r0, #4294967295
 801d4f6:	e7e9      	b.n	801d4cc <__ssputs_r+0x8a>

0801d4f8 <_svfiprintf_r>:
 801d4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4fc:	4698      	mov	r8, r3
 801d4fe:	898b      	ldrh	r3, [r1, #12]
 801d500:	061b      	lsls	r3, r3, #24
 801d502:	b09d      	sub	sp, #116	@ 0x74
 801d504:	4607      	mov	r7, r0
 801d506:	460d      	mov	r5, r1
 801d508:	4614      	mov	r4, r2
 801d50a:	d510      	bpl.n	801d52e <_svfiprintf_r+0x36>
 801d50c:	690b      	ldr	r3, [r1, #16]
 801d50e:	b973      	cbnz	r3, 801d52e <_svfiprintf_r+0x36>
 801d510:	2140      	movs	r1, #64	@ 0x40
 801d512:	f7fc f859 	bl	80195c8 <_malloc_r>
 801d516:	6028      	str	r0, [r5, #0]
 801d518:	6128      	str	r0, [r5, #16]
 801d51a:	b930      	cbnz	r0, 801d52a <_svfiprintf_r+0x32>
 801d51c:	230c      	movs	r3, #12
 801d51e:	603b      	str	r3, [r7, #0]
 801d520:	f04f 30ff 	mov.w	r0, #4294967295
 801d524:	b01d      	add	sp, #116	@ 0x74
 801d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d52a:	2340      	movs	r3, #64	@ 0x40
 801d52c:	616b      	str	r3, [r5, #20]
 801d52e:	2300      	movs	r3, #0
 801d530:	9309      	str	r3, [sp, #36]	@ 0x24
 801d532:	2320      	movs	r3, #32
 801d534:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d538:	f8cd 800c 	str.w	r8, [sp, #12]
 801d53c:	2330      	movs	r3, #48	@ 0x30
 801d53e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d6dc <_svfiprintf_r+0x1e4>
 801d542:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d546:	f04f 0901 	mov.w	r9, #1
 801d54a:	4623      	mov	r3, r4
 801d54c:	469a      	mov	sl, r3
 801d54e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d552:	b10a      	cbz	r2, 801d558 <_svfiprintf_r+0x60>
 801d554:	2a25      	cmp	r2, #37	@ 0x25
 801d556:	d1f9      	bne.n	801d54c <_svfiprintf_r+0x54>
 801d558:	ebba 0b04 	subs.w	fp, sl, r4
 801d55c:	d00b      	beq.n	801d576 <_svfiprintf_r+0x7e>
 801d55e:	465b      	mov	r3, fp
 801d560:	4622      	mov	r2, r4
 801d562:	4629      	mov	r1, r5
 801d564:	4638      	mov	r0, r7
 801d566:	f7ff ff6c 	bl	801d442 <__ssputs_r>
 801d56a:	3001      	adds	r0, #1
 801d56c:	f000 80a7 	beq.w	801d6be <_svfiprintf_r+0x1c6>
 801d570:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d572:	445a      	add	r2, fp
 801d574:	9209      	str	r2, [sp, #36]	@ 0x24
 801d576:	f89a 3000 	ldrb.w	r3, [sl]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	f000 809f 	beq.w	801d6be <_svfiprintf_r+0x1c6>
 801d580:	2300      	movs	r3, #0
 801d582:	f04f 32ff 	mov.w	r2, #4294967295
 801d586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d58a:	f10a 0a01 	add.w	sl, sl, #1
 801d58e:	9304      	str	r3, [sp, #16]
 801d590:	9307      	str	r3, [sp, #28]
 801d592:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d596:	931a      	str	r3, [sp, #104]	@ 0x68
 801d598:	4654      	mov	r4, sl
 801d59a:	2205      	movs	r2, #5
 801d59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d5a0:	484e      	ldr	r0, [pc, #312]	@ (801d6dc <_svfiprintf_r+0x1e4>)
 801d5a2:	f7e2 fded 	bl	8000180 <memchr>
 801d5a6:	9a04      	ldr	r2, [sp, #16]
 801d5a8:	b9d8      	cbnz	r0, 801d5e2 <_svfiprintf_r+0xea>
 801d5aa:	06d0      	lsls	r0, r2, #27
 801d5ac:	bf44      	itt	mi
 801d5ae:	2320      	movmi	r3, #32
 801d5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d5b4:	0711      	lsls	r1, r2, #28
 801d5b6:	bf44      	itt	mi
 801d5b8:	232b      	movmi	r3, #43	@ 0x2b
 801d5ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d5be:	f89a 3000 	ldrb.w	r3, [sl]
 801d5c2:	2b2a      	cmp	r3, #42	@ 0x2a
 801d5c4:	d015      	beq.n	801d5f2 <_svfiprintf_r+0xfa>
 801d5c6:	9a07      	ldr	r2, [sp, #28]
 801d5c8:	4654      	mov	r4, sl
 801d5ca:	2000      	movs	r0, #0
 801d5cc:	f04f 0c0a 	mov.w	ip, #10
 801d5d0:	4621      	mov	r1, r4
 801d5d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d5d6:	3b30      	subs	r3, #48	@ 0x30
 801d5d8:	2b09      	cmp	r3, #9
 801d5da:	d94b      	bls.n	801d674 <_svfiprintf_r+0x17c>
 801d5dc:	b1b0      	cbz	r0, 801d60c <_svfiprintf_r+0x114>
 801d5de:	9207      	str	r2, [sp, #28]
 801d5e0:	e014      	b.n	801d60c <_svfiprintf_r+0x114>
 801d5e2:	eba0 0308 	sub.w	r3, r0, r8
 801d5e6:	fa09 f303 	lsl.w	r3, r9, r3
 801d5ea:	4313      	orrs	r3, r2
 801d5ec:	9304      	str	r3, [sp, #16]
 801d5ee:	46a2      	mov	sl, r4
 801d5f0:	e7d2      	b.n	801d598 <_svfiprintf_r+0xa0>
 801d5f2:	9b03      	ldr	r3, [sp, #12]
 801d5f4:	1d19      	adds	r1, r3, #4
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	9103      	str	r1, [sp, #12]
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	bfbb      	ittet	lt
 801d5fe:	425b      	neglt	r3, r3
 801d600:	f042 0202 	orrlt.w	r2, r2, #2
 801d604:	9307      	strge	r3, [sp, #28]
 801d606:	9307      	strlt	r3, [sp, #28]
 801d608:	bfb8      	it	lt
 801d60a:	9204      	strlt	r2, [sp, #16]
 801d60c:	7823      	ldrb	r3, [r4, #0]
 801d60e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d610:	d10a      	bne.n	801d628 <_svfiprintf_r+0x130>
 801d612:	7863      	ldrb	r3, [r4, #1]
 801d614:	2b2a      	cmp	r3, #42	@ 0x2a
 801d616:	d132      	bne.n	801d67e <_svfiprintf_r+0x186>
 801d618:	9b03      	ldr	r3, [sp, #12]
 801d61a:	1d1a      	adds	r2, r3, #4
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	9203      	str	r2, [sp, #12]
 801d620:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d624:	3402      	adds	r4, #2
 801d626:	9305      	str	r3, [sp, #20]
 801d628:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d6ec <_svfiprintf_r+0x1f4>
 801d62c:	7821      	ldrb	r1, [r4, #0]
 801d62e:	2203      	movs	r2, #3
 801d630:	4650      	mov	r0, sl
 801d632:	f7e2 fda5 	bl	8000180 <memchr>
 801d636:	b138      	cbz	r0, 801d648 <_svfiprintf_r+0x150>
 801d638:	9b04      	ldr	r3, [sp, #16]
 801d63a:	eba0 000a 	sub.w	r0, r0, sl
 801d63e:	2240      	movs	r2, #64	@ 0x40
 801d640:	4082      	lsls	r2, r0
 801d642:	4313      	orrs	r3, r2
 801d644:	3401      	adds	r4, #1
 801d646:	9304      	str	r3, [sp, #16]
 801d648:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d64c:	4824      	ldr	r0, [pc, #144]	@ (801d6e0 <_svfiprintf_r+0x1e8>)
 801d64e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d652:	2206      	movs	r2, #6
 801d654:	f7e2 fd94 	bl	8000180 <memchr>
 801d658:	2800      	cmp	r0, #0
 801d65a:	d036      	beq.n	801d6ca <_svfiprintf_r+0x1d2>
 801d65c:	4b21      	ldr	r3, [pc, #132]	@ (801d6e4 <_svfiprintf_r+0x1ec>)
 801d65e:	bb1b      	cbnz	r3, 801d6a8 <_svfiprintf_r+0x1b0>
 801d660:	9b03      	ldr	r3, [sp, #12]
 801d662:	3307      	adds	r3, #7
 801d664:	f023 0307 	bic.w	r3, r3, #7
 801d668:	3308      	adds	r3, #8
 801d66a:	9303      	str	r3, [sp, #12]
 801d66c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d66e:	4433      	add	r3, r6
 801d670:	9309      	str	r3, [sp, #36]	@ 0x24
 801d672:	e76a      	b.n	801d54a <_svfiprintf_r+0x52>
 801d674:	fb0c 3202 	mla	r2, ip, r2, r3
 801d678:	460c      	mov	r4, r1
 801d67a:	2001      	movs	r0, #1
 801d67c:	e7a8      	b.n	801d5d0 <_svfiprintf_r+0xd8>
 801d67e:	2300      	movs	r3, #0
 801d680:	3401      	adds	r4, #1
 801d682:	9305      	str	r3, [sp, #20]
 801d684:	4619      	mov	r1, r3
 801d686:	f04f 0c0a 	mov.w	ip, #10
 801d68a:	4620      	mov	r0, r4
 801d68c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d690:	3a30      	subs	r2, #48	@ 0x30
 801d692:	2a09      	cmp	r2, #9
 801d694:	d903      	bls.n	801d69e <_svfiprintf_r+0x1a6>
 801d696:	2b00      	cmp	r3, #0
 801d698:	d0c6      	beq.n	801d628 <_svfiprintf_r+0x130>
 801d69a:	9105      	str	r1, [sp, #20]
 801d69c:	e7c4      	b.n	801d628 <_svfiprintf_r+0x130>
 801d69e:	fb0c 2101 	mla	r1, ip, r1, r2
 801d6a2:	4604      	mov	r4, r0
 801d6a4:	2301      	movs	r3, #1
 801d6a6:	e7f0      	b.n	801d68a <_svfiprintf_r+0x192>
 801d6a8:	ab03      	add	r3, sp, #12
 801d6aa:	9300      	str	r3, [sp, #0]
 801d6ac:	462a      	mov	r2, r5
 801d6ae:	4b0e      	ldr	r3, [pc, #56]	@ (801d6e8 <_svfiprintf_r+0x1f0>)
 801d6b0:	a904      	add	r1, sp, #16
 801d6b2:	4638      	mov	r0, r7
 801d6b4:	f7fc ffa8 	bl	801a608 <_printf_float>
 801d6b8:	1c42      	adds	r2, r0, #1
 801d6ba:	4606      	mov	r6, r0
 801d6bc:	d1d6      	bne.n	801d66c <_svfiprintf_r+0x174>
 801d6be:	89ab      	ldrh	r3, [r5, #12]
 801d6c0:	065b      	lsls	r3, r3, #25
 801d6c2:	f53f af2d 	bmi.w	801d520 <_svfiprintf_r+0x28>
 801d6c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d6c8:	e72c      	b.n	801d524 <_svfiprintf_r+0x2c>
 801d6ca:	ab03      	add	r3, sp, #12
 801d6cc:	9300      	str	r3, [sp, #0]
 801d6ce:	462a      	mov	r2, r5
 801d6d0:	4b05      	ldr	r3, [pc, #20]	@ (801d6e8 <_svfiprintf_r+0x1f0>)
 801d6d2:	a904      	add	r1, sp, #16
 801d6d4:	4638      	mov	r0, r7
 801d6d6:	f7fd fa2f 	bl	801ab38 <_printf_i>
 801d6da:	e7ed      	b.n	801d6b8 <_svfiprintf_r+0x1c0>
 801d6dc:	080225f8 	.word	0x080225f8
 801d6e0:	08022602 	.word	0x08022602
 801d6e4:	0801a609 	.word	0x0801a609
 801d6e8:	0801d443 	.word	0x0801d443
 801d6ec:	080225fe 	.word	0x080225fe

0801d6f0 <__sfputc_r>:
 801d6f0:	6893      	ldr	r3, [r2, #8]
 801d6f2:	3b01      	subs	r3, #1
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	b410      	push	{r4}
 801d6f8:	6093      	str	r3, [r2, #8]
 801d6fa:	da08      	bge.n	801d70e <__sfputc_r+0x1e>
 801d6fc:	6994      	ldr	r4, [r2, #24]
 801d6fe:	42a3      	cmp	r3, r4
 801d700:	db01      	blt.n	801d706 <__sfputc_r+0x16>
 801d702:	290a      	cmp	r1, #10
 801d704:	d103      	bne.n	801d70e <__sfputc_r+0x1e>
 801d706:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d70a:	f000 b9f1 	b.w	801daf0 <__swbuf_r>
 801d70e:	6813      	ldr	r3, [r2, #0]
 801d710:	1c58      	adds	r0, r3, #1
 801d712:	6010      	str	r0, [r2, #0]
 801d714:	7019      	strb	r1, [r3, #0]
 801d716:	4608      	mov	r0, r1
 801d718:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d71c:	4770      	bx	lr

0801d71e <__sfputs_r>:
 801d71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d720:	4606      	mov	r6, r0
 801d722:	460f      	mov	r7, r1
 801d724:	4614      	mov	r4, r2
 801d726:	18d5      	adds	r5, r2, r3
 801d728:	42ac      	cmp	r4, r5
 801d72a:	d101      	bne.n	801d730 <__sfputs_r+0x12>
 801d72c:	2000      	movs	r0, #0
 801d72e:	e007      	b.n	801d740 <__sfputs_r+0x22>
 801d730:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d734:	463a      	mov	r2, r7
 801d736:	4630      	mov	r0, r6
 801d738:	f7ff ffda 	bl	801d6f0 <__sfputc_r>
 801d73c:	1c43      	adds	r3, r0, #1
 801d73e:	d1f3      	bne.n	801d728 <__sfputs_r+0xa>
 801d740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d744 <_vfiprintf_r>:
 801d744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d748:	460d      	mov	r5, r1
 801d74a:	b09d      	sub	sp, #116	@ 0x74
 801d74c:	4614      	mov	r4, r2
 801d74e:	4698      	mov	r8, r3
 801d750:	4606      	mov	r6, r0
 801d752:	b118      	cbz	r0, 801d75c <_vfiprintf_r+0x18>
 801d754:	6a03      	ldr	r3, [r0, #32]
 801d756:	b90b      	cbnz	r3, 801d75c <_vfiprintf_r+0x18>
 801d758:	f7fd fdae 	bl	801b2b8 <__sinit>
 801d75c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d75e:	07d9      	lsls	r1, r3, #31
 801d760:	d405      	bmi.n	801d76e <_vfiprintf_r+0x2a>
 801d762:	89ab      	ldrh	r3, [r5, #12]
 801d764:	059a      	lsls	r2, r3, #22
 801d766:	d402      	bmi.n	801d76e <_vfiprintf_r+0x2a>
 801d768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d76a:	f7fd ff84 	bl	801b676 <__retarget_lock_acquire_recursive>
 801d76e:	89ab      	ldrh	r3, [r5, #12]
 801d770:	071b      	lsls	r3, r3, #28
 801d772:	d501      	bpl.n	801d778 <_vfiprintf_r+0x34>
 801d774:	692b      	ldr	r3, [r5, #16]
 801d776:	b99b      	cbnz	r3, 801d7a0 <_vfiprintf_r+0x5c>
 801d778:	4629      	mov	r1, r5
 801d77a:	4630      	mov	r0, r6
 801d77c:	f000 f9f6 	bl	801db6c <__swsetup_r>
 801d780:	b170      	cbz	r0, 801d7a0 <_vfiprintf_r+0x5c>
 801d782:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d784:	07dc      	lsls	r4, r3, #31
 801d786:	d504      	bpl.n	801d792 <_vfiprintf_r+0x4e>
 801d788:	f04f 30ff 	mov.w	r0, #4294967295
 801d78c:	b01d      	add	sp, #116	@ 0x74
 801d78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d792:	89ab      	ldrh	r3, [r5, #12]
 801d794:	0598      	lsls	r0, r3, #22
 801d796:	d4f7      	bmi.n	801d788 <_vfiprintf_r+0x44>
 801d798:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d79a:	f7fd ff6d 	bl	801b678 <__retarget_lock_release_recursive>
 801d79e:	e7f3      	b.n	801d788 <_vfiprintf_r+0x44>
 801d7a0:	2300      	movs	r3, #0
 801d7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d7a4:	2320      	movs	r3, #32
 801d7a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d7aa:	f8cd 800c 	str.w	r8, [sp, #12]
 801d7ae:	2330      	movs	r3, #48	@ 0x30
 801d7b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d960 <_vfiprintf_r+0x21c>
 801d7b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d7b8:	f04f 0901 	mov.w	r9, #1
 801d7bc:	4623      	mov	r3, r4
 801d7be:	469a      	mov	sl, r3
 801d7c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d7c4:	b10a      	cbz	r2, 801d7ca <_vfiprintf_r+0x86>
 801d7c6:	2a25      	cmp	r2, #37	@ 0x25
 801d7c8:	d1f9      	bne.n	801d7be <_vfiprintf_r+0x7a>
 801d7ca:	ebba 0b04 	subs.w	fp, sl, r4
 801d7ce:	d00b      	beq.n	801d7e8 <_vfiprintf_r+0xa4>
 801d7d0:	465b      	mov	r3, fp
 801d7d2:	4622      	mov	r2, r4
 801d7d4:	4629      	mov	r1, r5
 801d7d6:	4630      	mov	r0, r6
 801d7d8:	f7ff ffa1 	bl	801d71e <__sfputs_r>
 801d7dc:	3001      	adds	r0, #1
 801d7de:	f000 80a7 	beq.w	801d930 <_vfiprintf_r+0x1ec>
 801d7e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d7e4:	445a      	add	r2, fp
 801d7e6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d7e8:	f89a 3000 	ldrb.w	r3, [sl]
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	f000 809f 	beq.w	801d930 <_vfiprintf_r+0x1ec>
 801d7f2:	2300      	movs	r3, #0
 801d7f4:	f04f 32ff 	mov.w	r2, #4294967295
 801d7f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d7fc:	f10a 0a01 	add.w	sl, sl, #1
 801d800:	9304      	str	r3, [sp, #16]
 801d802:	9307      	str	r3, [sp, #28]
 801d804:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d808:	931a      	str	r3, [sp, #104]	@ 0x68
 801d80a:	4654      	mov	r4, sl
 801d80c:	2205      	movs	r2, #5
 801d80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d812:	4853      	ldr	r0, [pc, #332]	@ (801d960 <_vfiprintf_r+0x21c>)
 801d814:	f7e2 fcb4 	bl	8000180 <memchr>
 801d818:	9a04      	ldr	r2, [sp, #16]
 801d81a:	b9d8      	cbnz	r0, 801d854 <_vfiprintf_r+0x110>
 801d81c:	06d1      	lsls	r1, r2, #27
 801d81e:	bf44      	itt	mi
 801d820:	2320      	movmi	r3, #32
 801d822:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d826:	0713      	lsls	r3, r2, #28
 801d828:	bf44      	itt	mi
 801d82a:	232b      	movmi	r3, #43	@ 0x2b
 801d82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d830:	f89a 3000 	ldrb.w	r3, [sl]
 801d834:	2b2a      	cmp	r3, #42	@ 0x2a
 801d836:	d015      	beq.n	801d864 <_vfiprintf_r+0x120>
 801d838:	9a07      	ldr	r2, [sp, #28]
 801d83a:	4654      	mov	r4, sl
 801d83c:	2000      	movs	r0, #0
 801d83e:	f04f 0c0a 	mov.w	ip, #10
 801d842:	4621      	mov	r1, r4
 801d844:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d848:	3b30      	subs	r3, #48	@ 0x30
 801d84a:	2b09      	cmp	r3, #9
 801d84c:	d94b      	bls.n	801d8e6 <_vfiprintf_r+0x1a2>
 801d84e:	b1b0      	cbz	r0, 801d87e <_vfiprintf_r+0x13a>
 801d850:	9207      	str	r2, [sp, #28]
 801d852:	e014      	b.n	801d87e <_vfiprintf_r+0x13a>
 801d854:	eba0 0308 	sub.w	r3, r0, r8
 801d858:	fa09 f303 	lsl.w	r3, r9, r3
 801d85c:	4313      	orrs	r3, r2
 801d85e:	9304      	str	r3, [sp, #16]
 801d860:	46a2      	mov	sl, r4
 801d862:	e7d2      	b.n	801d80a <_vfiprintf_r+0xc6>
 801d864:	9b03      	ldr	r3, [sp, #12]
 801d866:	1d19      	adds	r1, r3, #4
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	9103      	str	r1, [sp, #12]
 801d86c:	2b00      	cmp	r3, #0
 801d86e:	bfbb      	ittet	lt
 801d870:	425b      	neglt	r3, r3
 801d872:	f042 0202 	orrlt.w	r2, r2, #2
 801d876:	9307      	strge	r3, [sp, #28]
 801d878:	9307      	strlt	r3, [sp, #28]
 801d87a:	bfb8      	it	lt
 801d87c:	9204      	strlt	r2, [sp, #16]
 801d87e:	7823      	ldrb	r3, [r4, #0]
 801d880:	2b2e      	cmp	r3, #46	@ 0x2e
 801d882:	d10a      	bne.n	801d89a <_vfiprintf_r+0x156>
 801d884:	7863      	ldrb	r3, [r4, #1]
 801d886:	2b2a      	cmp	r3, #42	@ 0x2a
 801d888:	d132      	bne.n	801d8f0 <_vfiprintf_r+0x1ac>
 801d88a:	9b03      	ldr	r3, [sp, #12]
 801d88c:	1d1a      	adds	r2, r3, #4
 801d88e:	681b      	ldr	r3, [r3, #0]
 801d890:	9203      	str	r2, [sp, #12]
 801d892:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d896:	3402      	adds	r4, #2
 801d898:	9305      	str	r3, [sp, #20]
 801d89a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d970 <_vfiprintf_r+0x22c>
 801d89e:	7821      	ldrb	r1, [r4, #0]
 801d8a0:	2203      	movs	r2, #3
 801d8a2:	4650      	mov	r0, sl
 801d8a4:	f7e2 fc6c 	bl	8000180 <memchr>
 801d8a8:	b138      	cbz	r0, 801d8ba <_vfiprintf_r+0x176>
 801d8aa:	9b04      	ldr	r3, [sp, #16]
 801d8ac:	eba0 000a 	sub.w	r0, r0, sl
 801d8b0:	2240      	movs	r2, #64	@ 0x40
 801d8b2:	4082      	lsls	r2, r0
 801d8b4:	4313      	orrs	r3, r2
 801d8b6:	3401      	adds	r4, #1
 801d8b8:	9304      	str	r3, [sp, #16]
 801d8ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8be:	4829      	ldr	r0, [pc, #164]	@ (801d964 <_vfiprintf_r+0x220>)
 801d8c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d8c4:	2206      	movs	r2, #6
 801d8c6:	f7e2 fc5b 	bl	8000180 <memchr>
 801d8ca:	2800      	cmp	r0, #0
 801d8cc:	d03f      	beq.n	801d94e <_vfiprintf_r+0x20a>
 801d8ce:	4b26      	ldr	r3, [pc, #152]	@ (801d968 <_vfiprintf_r+0x224>)
 801d8d0:	bb1b      	cbnz	r3, 801d91a <_vfiprintf_r+0x1d6>
 801d8d2:	9b03      	ldr	r3, [sp, #12]
 801d8d4:	3307      	adds	r3, #7
 801d8d6:	f023 0307 	bic.w	r3, r3, #7
 801d8da:	3308      	adds	r3, #8
 801d8dc:	9303      	str	r3, [sp, #12]
 801d8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d8e0:	443b      	add	r3, r7
 801d8e2:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8e4:	e76a      	b.n	801d7bc <_vfiprintf_r+0x78>
 801d8e6:	fb0c 3202 	mla	r2, ip, r2, r3
 801d8ea:	460c      	mov	r4, r1
 801d8ec:	2001      	movs	r0, #1
 801d8ee:	e7a8      	b.n	801d842 <_vfiprintf_r+0xfe>
 801d8f0:	2300      	movs	r3, #0
 801d8f2:	3401      	adds	r4, #1
 801d8f4:	9305      	str	r3, [sp, #20]
 801d8f6:	4619      	mov	r1, r3
 801d8f8:	f04f 0c0a 	mov.w	ip, #10
 801d8fc:	4620      	mov	r0, r4
 801d8fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d902:	3a30      	subs	r2, #48	@ 0x30
 801d904:	2a09      	cmp	r2, #9
 801d906:	d903      	bls.n	801d910 <_vfiprintf_r+0x1cc>
 801d908:	2b00      	cmp	r3, #0
 801d90a:	d0c6      	beq.n	801d89a <_vfiprintf_r+0x156>
 801d90c:	9105      	str	r1, [sp, #20]
 801d90e:	e7c4      	b.n	801d89a <_vfiprintf_r+0x156>
 801d910:	fb0c 2101 	mla	r1, ip, r1, r2
 801d914:	4604      	mov	r4, r0
 801d916:	2301      	movs	r3, #1
 801d918:	e7f0      	b.n	801d8fc <_vfiprintf_r+0x1b8>
 801d91a:	ab03      	add	r3, sp, #12
 801d91c:	9300      	str	r3, [sp, #0]
 801d91e:	462a      	mov	r2, r5
 801d920:	4b12      	ldr	r3, [pc, #72]	@ (801d96c <_vfiprintf_r+0x228>)
 801d922:	a904      	add	r1, sp, #16
 801d924:	4630      	mov	r0, r6
 801d926:	f7fc fe6f 	bl	801a608 <_printf_float>
 801d92a:	4607      	mov	r7, r0
 801d92c:	1c78      	adds	r0, r7, #1
 801d92e:	d1d6      	bne.n	801d8de <_vfiprintf_r+0x19a>
 801d930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d932:	07d9      	lsls	r1, r3, #31
 801d934:	d405      	bmi.n	801d942 <_vfiprintf_r+0x1fe>
 801d936:	89ab      	ldrh	r3, [r5, #12]
 801d938:	059a      	lsls	r2, r3, #22
 801d93a:	d402      	bmi.n	801d942 <_vfiprintf_r+0x1fe>
 801d93c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d93e:	f7fd fe9b 	bl	801b678 <__retarget_lock_release_recursive>
 801d942:	89ab      	ldrh	r3, [r5, #12]
 801d944:	065b      	lsls	r3, r3, #25
 801d946:	f53f af1f 	bmi.w	801d788 <_vfiprintf_r+0x44>
 801d94a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d94c:	e71e      	b.n	801d78c <_vfiprintf_r+0x48>
 801d94e:	ab03      	add	r3, sp, #12
 801d950:	9300      	str	r3, [sp, #0]
 801d952:	462a      	mov	r2, r5
 801d954:	4b05      	ldr	r3, [pc, #20]	@ (801d96c <_vfiprintf_r+0x228>)
 801d956:	a904      	add	r1, sp, #16
 801d958:	4630      	mov	r0, r6
 801d95a:	f7fd f8ed 	bl	801ab38 <_printf_i>
 801d95e:	e7e4      	b.n	801d92a <_vfiprintf_r+0x1e6>
 801d960:	080225f8 	.word	0x080225f8
 801d964:	08022602 	.word	0x08022602
 801d968:	0801a609 	.word	0x0801a609
 801d96c:	0801d71f 	.word	0x0801d71f
 801d970:	080225fe 	.word	0x080225fe

0801d974 <__sflush_r>:
 801d974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d97c:	0716      	lsls	r6, r2, #28
 801d97e:	4605      	mov	r5, r0
 801d980:	460c      	mov	r4, r1
 801d982:	d454      	bmi.n	801da2e <__sflush_r+0xba>
 801d984:	684b      	ldr	r3, [r1, #4]
 801d986:	2b00      	cmp	r3, #0
 801d988:	dc02      	bgt.n	801d990 <__sflush_r+0x1c>
 801d98a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	dd48      	ble.n	801da22 <__sflush_r+0xae>
 801d990:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d992:	2e00      	cmp	r6, #0
 801d994:	d045      	beq.n	801da22 <__sflush_r+0xae>
 801d996:	2300      	movs	r3, #0
 801d998:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d99c:	682f      	ldr	r7, [r5, #0]
 801d99e:	6a21      	ldr	r1, [r4, #32]
 801d9a0:	602b      	str	r3, [r5, #0]
 801d9a2:	d030      	beq.n	801da06 <__sflush_r+0x92>
 801d9a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d9a6:	89a3      	ldrh	r3, [r4, #12]
 801d9a8:	0759      	lsls	r1, r3, #29
 801d9aa:	d505      	bpl.n	801d9b8 <__sflush_r+0x44>
 801d9ac:	6863      	ldr	r3, [r4, #4]
 801d9ae:	1ad2      	subs	r2, r2, r3
 801d9b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d9b2:	b10b      	cbz	r3, 801d9b8 <__sflush_r+0x44>
 801d9b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d9b6:	1ad2      	subs	r2, r2, r3
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9bc:	6a21      	ldr	r1, [r4, #32]
 801d9be:	4628      	mov	r0, r5
 801d9c0:	47b0      	blx	r6
 801d9c2:	1c43      	adds	r3, r0, #1
 801d9c4:	89a3      	ldrh	r3, [r4, #12]
 801d9c6:	d106      	bne.n	801d9d6 <__sflush_r+0x62>
 801d9c8:	6829      	ldr	r1, [r5, #0]
 801d9ca:	291d      	cmp	r1, #29
 801d9cc:	d82b      	bhi.n	801da26 <__sflush_r+0xb2>
 801d9ce:	4a2a      	ldr	r2, [pc, #168]	@ (801da78 <__sflush_r+0x104>)
 801d9d0:	410a      	asrs	r2, r1
 801d9d2:	07d6      	lsls	r6, r2, #31
 801d9d4:	d427      	bmi.n	801da26 <__sflush_r+0xb2>
 801d9d6:	2200      	movs	r2, #0
 801d9d8:	6062      	str	r2, [r4, #4]
 801d9da:	04d9      	lsls	r1, r3, #19
 801d9dc:	6922      	ldr	r2, [r4, #16]
 801d9de:	6022      	str	r2, [r4, #0]
 801d9e0:	d504      	bpl.n	801d9ec <__sflush_r+0x78>
 801d9e2:	1c42      	adds	r2, r0, #1
 801d9e4:	d101      	bne.n	801d9ea <__sflush_r+0x76>
 801d9e6:	682b      	ldr	r3, [r5, #0]
 801d9e8:	b903      	cbnz	r3, 801d9ec <__sflush_r+0x78>
 801d9ea:	6560      	str	r0, [r4, #84]	@ 0x54
 801d9ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d9ee:	602f      	str	r7, [r5, #0]
 801d9f0:	b1b9      	cbz	r1, 801da22 <__sflush_r+0xae>
 801d9f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d9f6:	4299      	cmp	r1, r3
 801d9f8:	d002      	beq.n	801da00 <__sflush_r+0x8c>
 801d9fa:	4628      	mov	r0, r5
 801d9fc:	f7fe fccc 	bl	801c398 <_free_r>
 801da00:	2300      	movs	r3, #0
 801da02:	6363      	str	r3, [r4, #52]	@ 0x34
 801da04:	e00d      	b.n	801da22 <__sflush_r+0xae>
 801da06:	2301      	movs	r3, #1
 801da08:	4628      	mov	r0, r5
 801da0a:	47b0      	blx	r6
 801da0c:	4602      	mov	r2, r0
 801da0e:	1c50      	adds	r0, r2, #1
 801da10:	d1c9      	bne.n	801d9a6 <__sflush_r+0x32>
 801da12:	682b      	ldr	r3, [r5, #0]
 801da14:	2b00      	cmp	r3, #0
 801da16:	d0c6      	beq.n	801d9a6 <__sflush_r+0x32>
 801da18:	2b1d      	cmp	r3, #29
 801da1a:	d001      	beq.n	801da20 <__sflush_r+0xac>
 801da1c:	2b16      	cmp	r3, #22
 801da1e:	d11e      	bne.n	801da5e <__sflush_r+0xea>
 801da20:	602f      	str	r7, [r5, #0]
 801da22:	2000      	movs	r0, #0
 801da24:	e022      	b.n	801da6c <__sflush_r+0xf8>
 801da26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da2a:	b21b      	sxth	r3, r3
 801da2c:	e01b      	b.n	801da66 <__sflush_r+0xf2>
 801da2e:	690f      	ldr	r7, [r1, #16]
 801da30:	2f00      	cmp	r7, #0
 801da32:	d0f6      	beq.n	801da22 <__sflush_r+0xae>
 801da34:	0793      	lsls	r3, r2, #30
 801da36:	680e      	ldr	r6, [r1, #0]
 801da38:	bf08      	it	eq
 801da3a:	694b      	ldreq	r3, [r1, #20]
 801da3c:	600f      	str	r7, [r1, #0]
 801da3e:	bf18      	it	ne
 801da40:	2300      	movne	r3, #0
 801da42:	eba6 0807 	sub.w	r8, r6, r7
 801da46:	608b      	str	r3, [r1, #8]
 801da48:	f1b8 0f00 	cmp.w	r8, #0
 801da4c:	dde9      	ble.n	801da22 <__sflush_r+0xae>
 801da4e:	6a21      	ldr	r1, [r4, #32]
 801da50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801da52:	4643      	mov	r3, r8
 801da54:	463a      	mov	r2, r7
 801da56:	4628      	mov	r0, r5
 801da58:	47b0      	blx	r6
 801da5a:	2800      	cmp	r0, #0
 801da5c:	dc08      	bgt.n	801da70 <__sflush_r+0xfc>
 801da5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da66:	81a3      	strh	r3, [r4, #12]
 801da68:	f04f 30ff 	mov.w	r0, #4294967295
 801da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801da70:	4407      	add	r7, r0
 801da72:	eba8 0800 	sub.w	r8, r8, r0
 801da76:	e7e7      	b.n	801da48 <__sflush_r+0xd4>
 801da78:	dfbffffe 	.word	0xdfbffffe

0801da7c <_fflush_r>:
 801da7c:	b538      	push	{r3, r4, r5, lr}
 801da7e:	690b      	ldr	r3, [r1, #16]
 801da80:	4605      	mov	r5, r0
 801da82:	460c      	mov	r4, r1
 801da84:	b913      	cbnz	r3, 801da8c <_fflush_r+0x10>
 801da86:	2500      	movs	r5, #0
 801da88:	4628      	mov	r0, r5
 801da8a:	bd38      	pop	{r3, r4, r5, pc}
 801da8c:	b118      	cbz	r0, 801da96 <_fflush_r+0x1a>
 801da8e:	6a03      	ldr	r3, [r0, #32]
 801da90:	b90b      	cbnz	r3, 801da96 <_fflush_r+0x1a>
 801da92:	f7fd fc11 	bl	801b2b8 <__sinit>
 801da96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d0f3      	beq.n	801da86 <_fflush_r+0xa>
 801da9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801daa0:	07d0      	lsls	r0, r2, #31
 801daa2:	d404      	bmi.n	801daae <_fflush_r+0x32>
 801daa4:	0599      	lsls	r1, r3, #22
 801daa6:	d402      	bmi.n	801daae <_fflush_r+0x32>
 801daa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801daaa:	f7fd fde4 	bl	801b676 <__retarget_lock_acquire_recursive>
 801daae:	4628      	mov	r0, r5
 801dab0:	4621      	mov	r1, r4
 801dab2:	f7ff ff5f 	bl	801d974 <__sflush_r>
 801dab6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dab8:	07da      	lsls	r2, r3, #31
 801daba:	4605      	mov	r5, r0
 801dabc:	d4e4      	bmi.n	801da88 <_fflush_r+0xc>
 801dabe:	89a3      	ldrh	r3, [r4, #12]
 801dac0:	059b      	lsls	r3, r3, #22
 801dac2:	d4e1      	bmi.n	801da88 <_fflush_r+0xc>
 801dac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dac6:	f7fd fdd7 	bl	801b678 <__retarget_lock_release_recursive>
 801daca:	e7dd      	b.n	801da88 <_fflush_r+0xc>

0801dacc <fiprintf>:
 801dacc:	b40e      	push	{r1, r2, r3}
 801dace:	b503      	push	{r0, r1, lr}
 801dad0:	4601      	mov	r1, r0
 801dad2:	ab03      	add	r3, sp, #12
 801dad4:	4805      	ldr	r0, [pc, #20]	@ (801daec <fiprintf+0x20>)
 801dad6:	f853 2b04 	ldr.w	r2, [r3], #4
 801dada:	6800      	ldr	r0, [r0, #0]
 801dadc:	9301      	str	r3, [sp, #4]
 801dade:	f7ff fe31 	bl	801d744 <_vfiprintf_r>
 801dae2:	b002      	add	sp, #8
 801dae4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dae8:	b003      	add	sp, #12
 801daea:	4770      	bx	lr
 801daec:	200002bc 	.word	0x200002bc

0801daf0 <__swbuf_r>:
 801daf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801daf2:	460e      	mov	r6, r1
 801daf4:	4614      	mov	r4, r2
 801daf6:	4605      	mov	r5, r0
 801daf8:	b118      	cbz	r0, 801db02 <__swbuf_r+0x12>
 801dafa:	6a03      	ldr	r3, [r0, #32]
 801dafc:	b90b      	cbnz	r3, 801db02 <__swbuf_r+0x12>
 801dafe:	f7fd fbdb 	bl	801b2b8 <__sinit>
 801db02:	69a3      	ldr	r3, [r4, #24]
 801db04:	60a3      	str	r3, [r4, #8]
 801db06:	89a3      	ldrh	r3, [r4, #12]
 801db08:	071a      	lsls	r2, r3, #28
 801db0a:	d501      	bpl.n	801db10 <__swbuf_r+0x20>
 801db0c:	6923      	ldr	r3, [r4, #16]
 801db0e:	b943      	cbnz	r3, 801db22 <__swbuf_r+0x32>
 801db10:	4621      	mov	r1, r4
 801db12:	4628      	mov	r0, r5
 801db14:	f000 f82a 	bl	801db6c <__swsetup_r>
 801db18:	b118      	cbz	r0, 801db22 <__swbuf_r+0x32>
 801db1a:	f04f 37ff 	mov.w	r7, #4294967295
 801db1e:	4638      	mov	r0, r7
 801db20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801db22:	6823      	ldr	r3, [r4, #0]
 801db24:	6922      	ldr	r2, [r4, #16]
 801db26:	1a98      	subs	r0, r3, r2
 801db28:	6963      	ldr	r3, [r4, #20]
 801db2a:	b2f6      	uxtb	r6, r6
 801db2c:	4283      	cmp	r3, r0
 801db2e:	4637      	mov	r7, r6
 801db30:	dc05      	bgt.n	801db3e <__swbuf_r+0x4e>
 801db32:	4621      	mov	r1, r4
 801db34:	4628      	mov	r0, r5
 801db36:	f7ff ffa1 	bl	801da7c <_fflush_r>
 801db3a:	2800      	cmp	r0, #0
 801db3c:	d1ed      	bne.n	801db1a <__swbuf_r+0x2a>
 801db3e:	68a3      	ldr	r3, [r4, #8]
 801db40:	3b01      	subs	r3, #1
 801db42:	60a3      	str	r3, [r4, #8]
 801db44:	6823      	ldr	r3, [r4, #0]
 801db46:	1c5a      	adds	r2, r3, #1
 801db48:	6022      	str	r2, [r4, #0]
 801db4a:	701e      	strb	r6, [r3, #0]
 801db4c:	6962      	ldr	r2, [r4, #20]
 801db4e:	1c43      	adds	r3, r0, #1
 801db50:	429a      	cmp	r2, r3
 801db52:	d004      	beq.n	801db5e <__swbuf_r+0x6e>
 801db54:	89a3      	ldrh	r3, [r4, #12]
 801db56:	07db      	lsls	r3, r3, #31
 801db58:	d5e1      	bpl.n	801db1e <__swbuf_r+0x2e>
 801db5a:	2e0a      	cmp	r6, #10
 801db5c:	d1df      	bne.n	801db1e <__swbuf_r+0x2e>
 801db5e:	4621      	mov	r1, r4
 801db60:	4628      	mov	r0, r5
 801db62:	f7ff ff8b 	bl	801da7c <_fflush_r>
 801db66:	2800      	cmp	r0, #0
 801db68:	d0d9      	beq.n	801db1e <__swbuf_r+0x2e>
 801db6a:	e7d6      	b.n	801db1a <__swbuf_r+0x2a>

0801db6c <__swsetup_r>:
 801db6c:	b538      	push	{r3, r4, r5, lr}
 801db6e:	4b29      	ldr	r3, [pc, #164]	@ (801dc14 <__swsetup_r+0xa8>)
 801db70:	4605      	mov	r5, r0
 801db72:	6818      	ldr	r0, [r3, #0]
 801db74:	460c      	mov	r4, r1
 801db76:	b118      	cbz	r0, 801db80 <__swsetup_r+0x14>
 801db78:	6a03      	ldr	r3, [r0, #32]
 801db7a:	b90b      	cbnz	r3, 801db80 <__swsetup_r+0x14>
 801db7c:	f7fd fb9c 	bl	801b2b8 <__sinit>
 801db80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db84:	0719      	lsls	r1, r3, #28
 801db86:	d422      	bmi.n	801dbce <__swsetup_r+0x62>
 801db88:	06da      	lsls	r2, r3, #27
 801db8a:	d407      	bmi.n	801db9c <__swsetup_r+0x30>
 801db8c:	2209      	movs	r2, #9
 801db8e:	602a      	str	r2, [r5, #0]
 801db90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801db94:	81a3      	strh	r3, [r4, #12]
 801db96:	f04f 30ff 	mov.w	r0, #4294967295
 801db9a:	e033      	b.n	801dc04 <__swsetup_r+0x98>
 801db9c:	0758      	lsls	r0, r3, #29
 801db9e:	d512      	bpl.n	801dbc6 <__swsetup_r+0x5a>
 801dba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dba2:	b141      	cbz	r1, 801dbb6 <__swsetup_r+0x4a>
 801dba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dba8:	4299      	cmp	r1, r3
 801dbaa:	d002      	beq.n	801dbb2 <__swsetup_r+0x46>
 801dbac:	4628      	mov	r0, r5
 801dbae:	f7fe fbf3 	bl	801c398 <_free_r>
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	6363      	str	r3, [r4, #52]	@ 0x34
 801dbb6:	89a3      	ldrh	r3, [r4, #12]
 801dbb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dbbc:	81a3      	strh	r3, [r4, #12]
 801dbbe:	2300      	movs	r3, #0
 801dbc0:	6063      	str	r3, [r4, #4]
 801dbc2:	6923      	ldr	r3, [r4, #16]
 801dbc4:	6023      	str	r3, [r4, #0]
 801dbc6:	89a3      	ldrh	r3, [r4, #12]
 801dbc8:	f043 0308 	orr.w	r3, r3, #8
 801dbcc:	81a3      	strh	r3, [r4, #12]
 801dbce:	6923      	ldr	r3, [r4, #16]
 801dbd0:	b94b      	cbnz	r3, 801dbe6 <__swsetup_r+0x7a>
 801dbd2:	89a3      	ldrh	r3, [r4, #12]
 801dbd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801dbd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dbdc:	d003      	beq.n	801dbe6 <__swsetup_r+0x7a>
 801dbde:	4621      	mov	r1, r4
 801dbe0:	4628      	mov	r0, r5
 801dbe2:	f000 f8a2 	bl	801dd2a <__smakebuf_r>
 801dbe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbea:	f013 0201 	ands.w	r2, r3, #1
 801dbee:	d00a      	beq.n	801dc06 <__swsetup_r+0x9a>
 801dbf0:	2200      	movs	r2, #0
 801dbf2:	60a2      	str	r2, [r4, #8]
 801dbf4:	6962      	ldr	r2, [r4, #20]
 801dbf6:	4252      	negs	r2, r2
 801dbf8:	61a2      	str	r2, [r4, #24]
 801dbfa:	6922      	ldr	r2, [r4, #16]
 801dbfc:	b942      	cbnz	r2, 801dc10 <__swsetup_r+0xa4>
 801dbfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801dc02:	d1c5      	bne.n	801db90 <__swsetup_r+0x24>
 801dc04:	bd38      	pop	{r3, r4, r5, pc}
 801dc06:	0799      	lsls	r1, r3, #30
 801dc08:	bf58      	it	pl
 801dc0a:	6962      	ldrpl	r2, [r4, #20]
 801dc0c:	60a2      	str	r2, [r4, #8]
 801dc0e:	e7f4      	b.n	801dbfa <__swsetup_r+0x8e>
 801dc10:	2000      	movs	r0, #0
 801dc12:	e7f7      	b.n	801dc04 <__swsetup_r+0x98>
 801dc14:	200002bc 	.word	0x200002bc

0801dc18 <memmove>:
 801dc18:	4288      	cmp	r0, r1
 801dc1a:	b510      	push	{r4, lr}
 801dc1c:	eb01 0402 	add.w	r4, r1, r2
 801dc20:	d902      	bls.n	801dc28 <memmove+0x10>
 801dc22:	4284      	cmp	r4, r0
 801dc24:	4623      	mov	r3, r4
 801dc26:	d807      	bhi.n	801dc38 <memmove+0x20>
 801dc28:	1e43      	subs	r3, r0, #1
 801dc2a:	42a1      	cmp	r1, r4
 801dc2c:	d008      	beq.n	801dc40 <memmove+0x28>
 801dc2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dc32:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dc36:	e7f8      	b.n	801dc2a <memmove+0x12>
 801dc38:	4402      	add	r2, r0
 801dc3a:	4601      	mov	r1, r0
 801dc3c:	428a      	cmp	r2, r1
 801dc3e:	d100      	bne.n	801dc42 <memmove+0x2a>
 801dc40:	bd10      	pop	{r4, pc}
 801dc42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dc46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dc4a:	e7f7      	b.n	801dc3c <memmove+0x24>

0801dc4c <abort>:
 801dc4c:	b508      	push	{r3, lr}
 801dc4e:	2006      	movs	r0, #6
 801dc50:	f000 f8d0 	bl	801ddf4 <raise>
 801dc54:	2001      	movs	r0, #1
 801dc56:	f7e8 fdb7 	bl	80067c8 <_exit>

0801dc5a <_calloc_r>:
 801dc5a:	b570      	push	{r4, r5, r6, lr}
 801dc5c:	fba1 5402 	umull	r5, r4, r1, r2
 801dc60:	b93c      	cbnz	r4, 801dc72 <_calloc_r+0x18>
 801dc62:	4629      	mov	r1, r5
 801dc64:	f7fb fcb0 	bl	80195c8 <_malloc_r>
 801dc68:	4606      	mov	r6, r0
 801dc6a:	b928      	cbnz	r0, 801dc78 <_calloc_r+0x1e>
 801dc6c:	2600      	movs	r6, #0
 801dc6e:	4630      	mov	r0, r6
 801dc70:	bd70      	pop	{r4, r5, r6, pc}
 801dc72:	220c      	movs	r2, #12
 801dc74:	6002      	str	r2, [r0, #0]
 801dc76:	e7f9      	b.n	801dc6c <_calloc_r+0x12>
 801dc78:	462a      	mov	r2, r5
 801dc7a:	4621      	mov	r1, r4
 801dc7c:	f7fd fbe9 	bl	801b452 <memset>
 801dc80:	e7f5      	b.n	801dc6e <_calloc_r+0x14>

0801dc82 <_realloc_r>:
 801dc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc86:	4680      	mov	r8, r0
 801dc88:	4615      	mov	r5, r2
 801dc8a:	460c      	mov	r4, r1
 801dc8c:	b921      	cbnz	r1, 801dc98 <_realloc_r+0x16>
 801dc8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dc92:	4611      	mov	r1, r2
 801dc94:	f7fb bc98 	b.w	80195c8 <_malloc_r>
 801dc98:	b92a      	cbnz	r2, 801dca6 <_realloc_r+0x24>
 801dc9a:	f7fe fb7d 	bl	801c398 <_free_r>
 801dc9e:	2400      	movs	r4, #0
 801dca0:	4620      	mov	r0, r4
 801dca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dca6:	f000 f8e3 	bl	801de70 <_malloc_usable_size_r>
 801dcaa:	4285      	cmp	r5, r0
 801dcac:	4606      	mov	r6, r0
 801dcae:	d802      	bhi.n	801dcb6 <_realloc_r+0x34>
 801dcb0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801dcb4:	d8f4      	bhi.n	801dca0 <_realloc_r+0x1e>
 801dcb6:	4629      	mov	r1, r5
 801dcb8:	4640      	mov	r0, r8
 801dcba:	f7fb fc85 	bl	80195c8 <_malloc_r>
 801dcbe:	4607      	mov	r7, r0
 801dcc0:	2800      	cmp	r0, #0
 801dcc2:	d0ec      	beq.n	801dc9e <_realloc_r+0x1c>
 801dcc4:	42b5      	cmp	r5, r6
 801dcc6:	462a      	mov	r2, r5
 801dcc8:	4621      	mov	r1, r4
 801dcca:	bf28      	it	cs
 801dccc:	4632      	movcs	r2, r6
 801dcce:	f7fd fcdc 	bl	801b68a <memcpy>
 801dcd2:	4621      	mov	r1, r4
 801dcd4:	4640      	mov	r0, r8
 801dcd6:	f7fe fb5f 	bl	801c398 <_free_r>
 801dcda:	463c      	mov	r4, r7
 801dcdc:	e7e0      	b.n	801dca0 <_realloc_r+0x1e>

0801dcde <__swhatbuf_r>:
 801dcde:	b570      	push	{r4, r5, r6, lr}
 801dce0:	460c      	mov	r4, r1
 801dce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dce6:	2900      	cmp	r1, #0
 801dce8:	b096      	sub	sp, #88	@ 0x58
 801dcea:	4615      	mov	r5, r2
 801dcec:	461e      	mov	r6, r3
 801dcee:	da0d      	bge.n	801dd0c <__swhatbuf_r+0x2e>
 801dcf0:	89a3      	ldrh	r3, [r4, #12]
 801dcf2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801dcf6:	f04f 0100 	mov.w	r1, #0
 801dcfa:	bf14      	ite	ne
 801dcfc:	2340      	movne	r3, #64	@ 0x40
 801dcfe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801dd02:	2000      	movs	r0, #0
 801dd04:	6031      	str	r1, [r6, #0]
 801dd06:	602b      	str	r3, [r5, #0]
 801dd08:	b016      	add	sp, #88	@ 0x58
 801dd0a:	bd70      	pop	{r4, r5, r6, pc}
 801dd0c:	466a      	mov	r2, sp
 801dd0e:	f000 f879 	bl	801de04 <_fstat_r>
 801dd12:	2800      	cmp	r0, #0
 801dd14:	dbec      	blt.n	801dcf0 <__swhatbuf_r+0x12>
 801dd16:	9901      	ldr	r1, [sp, #4]
 801dd18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801dd1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801dd20:	4259      	negs	r1, r3
 801dd22:	4159      	adcs	r1, r3
 801dd24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dd28:	e7eb      	b.n	801dd02 <__swhatbuf_r+0x24>

0801dd2a <__smakebuf_r>:
 801dd2a:	898b      	ldrh	r3, [r1, #12]
 801dd2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dd2e:	079d      	lsls	r5, r3, #30
 801dd30:	4606      	mov	r6, r0
 801dd32:	460c      	mov	r4, r1
 801dd34:	d507      	bpl.n	801dd46 <__smakebuf_r+0x1c>
 801dd36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801dd3a:	6023      	str	r3, [r4, #0]
 801dd3c:	6123      	str	r3, [r4, #16]
 801dd3e:	2301      	movs	r3, #1
 801dd40:	6163      	str	r3, [r4, #20]
 801dd42:	b003      	add	sp, #12
 801dd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dd46:	ab01      	add	r3, sp, #4
 801dd48:	466a      	mov	r2, sp
 801dd4a:	f7ff ffc8 	bl	801dcde <__swhatbuf_r>
 801dd4e:	9f00      	ldr	r7, [sp, #0]
 801dd50:	4605      	mov	r5, r0
 801dd52:	4639      	mov	r1, r7
 801dd54:	4630      	mov	r0, r6
 801dd56:	f7fb fc37 	bl	80195c8 <_malloc_r>
 801dd5a:	b948      	cbnz	r0, 801dd70 <__smakebuf_r+0x46>
 801dd5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd60:	059a      	lsls	r2, r3, #22
 801dd62:	d4ee      	bmi.n	801dd42 <__smakebuf_r+0x18>
 801dd64:	f023 0303 	bic.w	r3, r3, #3
 801dd68:	f043 0302 	orr.w	r3, r3, #2
 801dd6c:	81a3      	strh	r3, [r4, #12]
 801dd6e:	e7e2      	b.n	801dd36 <__smakebuf_r+0xc>
 801dd70:	89a3      	ldrh	r3, [r4, #12]
 801dd72:	6020      	str	r0, [r4, #0]
 801dd74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dd78:	81a3      	strh	r3, [r4, #12]
 801dd7a:	9b01      	ldr	r3, [sp, #4]
 801dd7c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dd80:	b15b      	cbz	r3, 801dd9a <__smakebuf_r+0x70>
 801dd82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd86:	4630      	mov	r0, r6
 801dd88:	f000 f84e 	bl	801de28 <_isatty_r>
 801dd8c:	b128      	cbz	r0, 801dd9a <__smakebuf_r+0x70>
 801dd8e:	89a3      	ldrh	r3, [r4, #12]
 801dd90:	f023 0303 	bic.w	r3, r3, #3
 801dd94:	f043 0301 	orr.w	r3, r3, #1
 801dd98:	81a3      	strh	r3, [r4, #12]
 801dd9a:	89a3      	ldrh	r3, [r4, #12]
 801dd9c:	431d      	orrs	r5, r3
 801dd9e:	81a5      	strh	r5, [r4, #12]
 801dda0:	e7cf      	b.n	801dd42 <__smakebuf_r+0x18>

0801dda2 <_raise_r>:
 801dda2:	291f      	cmp	r1, #31
 801dda4:	b538      	push	{r3, r4, r5, lr}
 801dda6:	4605      	mov	r5, r0
 801dda8:	460c      	mov	r4, r1
 801ddaa:	d904      	bls.n	801ddb6 <_raise_r+0x14>
 801ddac:	2316      	movs	r3, #22
 801ddae:	6003      	str	r3, [r0, #0]
 801ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 801ddb4:	bd38      	pop	{r3, r4, r5, pc}
 801ddb6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801ddb8:	b112      	cbz	r2, 801ddc0 <_raise_r+0x1e>
 801ddba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ddbe:	b94b      	cbnz	r3, 801ddd4 <_raise_r+0x32>
 801ddc0:	4628      	mov	r0, r5
 801ddc2:	f000 f853 	bl	801de6c <_getpid_r>
 801ddc6:	4622      	mov	r2, r4
 801ddc8:	4601      	mov	r1, r0
 801ddca:	4628      	mov	r0, r5
 801ddcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ddd0:	f000 b83a 	b.w	801de48 <_kill_r>
 801ddd4:	2b01      	cmp	r3, #1
 801ddd6:	d00a      	beq.n	801ddee <_raise_r+0x4c>
 801ddd8:	1c59      	adds	r1, r3, #1
 801ddda:	d103      	bne.n	801dde4 <_raise_r+0x42>
 801dddc:	2316      	movs	r3, #22
 801ddde:	6003      	str	r3, [r0, #0]
 801dde0:	2001      	movs	r0, #1
 801dde2:	e7e7      	b.n	801ddb4 <_raise_r+0x12>
 801dde4:	2100      	movs	r1, #0
 801dde6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ddea:	4620      	mov	r0, r4
 801ddec:	4798      	blx	r3
 801ddee:	2000      	movs	r0, #0
 801ddf0:	e7e0      	b.n	801ddb4 <_raise_r+0x12>
	...

0801ddf4 <raise>:
 801ddf4:	4b02      	ldr	r3, [pc, #8]	@ (801de00 <raise+0xc>)
 801ddf6:	4601      	mov	r1, r0
 801ddf8:	6818      	ldr	r0, [r3, #0]
 801ddfa:	f7ff bfd2 	b.w	801dda2 <_raise_r>
 801ddfe:	bf00      	nop
 801de00:	200002bc 	.word	0x200002bc

0801de04 <_fstat_r>:
 801de04:	b538      	push	{r3, r4, r5, lr}
 801de06:	4d07      	ldr	r5, [pc, #28]	@ (801de24 <_fstat_r+0x20>)
 801de08:	2300      	movs	r3, #0
 801de0a:	4604      	mov	r4, r0
 801de0c:	4608      	mov	r0, r1
 801de0e:	4611      	mov	r1, r2
 801de10:	602b      	str	r3, [r5, #0]
 801de12:	f7e8 fd29 	bl	8006868 <_fstat>
 801de16:	1c43      	adds	r3, r0, #1
 801de18:	d102      	bne.n	801de20 <_fstat_r+0x1c>
 801de1a:	682b      	ldr	r3, [r5, #0]
 801de1c:	b103      	cbz	r3, 801de20 <_fstat_r+0x1c>
 801de1e:	6023      	str	r3, [r4, #0]
 801de20:	bd38      	pop	{r3, r4, r5, pc}
 801de22:	bf00      	nop
 801de24:	20003140 	.word	0x20003140

0801de28 <_isatty_r>:
 801de28:	b538      	push	{r3, r4, r5, lr}
 801de2a:	4d06      	ldr	r5, [pc, #24]	@ (801de44 <_isatty_r+0x1c>)
 801de2c:	2300      	movs	r3, #0
 801de2e:	4604      	mov	r4, r0
 801de30:	4608      	mov	r0, r1
 801de32:	602b      	str	r3, [r5, #0]
 801de34:	f7e8 fd28 	bl	8006888 <_isatty>
 801de38:	1c43      	adds	r3, r0, #1
 801de3a:	d102      	bne.n	801de42 <_isatty_r+0x1a>
 801de3c:	682b      	ldr	r3, [r5, #0]
 801de3e:	b103      	cbz	r3, 801de42 <_isatty_r+0x1a>
 801de40:	6023      	str	r3, [r4, #0]
 801de42:	bd38      	pop	{r3, r4, r5, pc}
 801de44:	20003140 	.word	0x20003140

0801de48 <_kill_r>:
 801de48:	b538      	push	{r3, r4, r5, lr}
 801de4a:	4d07      	ldr	r5, [pc, #28]	@ (801de68 <_kill_r+0x20>)
 801de4c:	2300      	movs	r3, #0
 801de4e:	4604      	mov	r4, r0
 801de50:	4608      	mov	r0, r1
 801de52:	4611      	mov	r1, r2
 801de54:	602b      	str	r3, [r5, #0]
 801de56:	f7e8 fca7 	bl	80067a8 <_kill>
 801de5a:	1c43      	adds	r3, r0, #1
 801de5c:	d102      	bne.n	801de64 <_kill_r+0x1c>
 801de5e:	682b      	ldr	r3, [r5, #0]
 801de60:	b103      	cbz	r3, 801de64 <_kill_r+0x1c>
 801de62:	6023      	str	r3, [r4, #0]
 801de64:	bd38      	pop	{r3, r4, r5, pc}
 801de66:	bf00      	nop
 801de68:	20003140 	.word	0x20003140

0801de6c <_getpid_r>:
 801de6c:	f7e8 bc94 	b.w	8006798 <_getpid>

0801de70 <_malloc_usable_size_r>:
 801de70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de74:	1f18      	subs	r0, r3, #4
 801de76:	2b00      	cmp	r3, #0
 801de78:	bfbc      	itt	lt
 801de7a:	580b      	ldrlt	r3, [r1, r0]
 801de7c:	18c0      	addlt	r0, r0, r3
 801de7e:	4770      	bx	lr

0801de80 <cos>:
 801de80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801de82:	ec53 2b10 	vmov	r2, r3, d0
 801de86:	4826      	ldr	r0, [pc, #152]	@ (801df20 <cos+0xa0>)
 801de88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801de8c:	4281      	cmp	r1, r0
 801de8e:	d806      	bhi.n	801de9e <cos+0x1e>
 801de90:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801df18 <cos+0x98>
 801de94:	b005      	add	sp, #20
 801de96:	f85d eb04 	ldr.w	lr, [sp], #4
 801de9a:	f000 b9dd 	b.w	801e258 <__kernel_cos>
 801de9e:	4821      	ldr	r0, [pc, #132]	@ (801df24 <cos+0xa4>)
 801dea0:	4281      	cmp	r1, r0
 801dea2:	d908      	bls.n	801deb6 <cos+0x36>
 801dea4:	4610      	mov	r0, r2
 801dea6:	4619      	mov	r1, r3
 801dea8:	f7e2 f9c6 	bl	8000238 <__aeabi_dsub>
 801deac:	ec41 0b10 	vmov	d0, r0, r1
 801deb0:	b005      	add	sp, #20
 801deb2:	f85d fb04 	ldr.w	pc, [sp], #4
 801deb6:	4668      	mov	r0, sp
 801deb8:	f000 fb52 	bl	801e560 <__ieee754_rem_pio2>
 801debc:	f000 0003 	and.w	r0, r0, #3
 801dec0:	2801      	cmp	r0, #1
 801dec2:	d00b      	beq.n	801dedc <cos+0x5c>
 801dec4:	2802      	cmp	r0, #2
 801dec6:	d015      	beq.n	801def4 <cos+0x74>
 801dec8:	b9d8      	cbnz	r0, 801df02 <cos+0x82>
 801deca:	ed9d 1b02 	vldr	d1, [sp, #8]
 801dece:	ed9d 0b00 	vldr	d0, [sp]
 801ded2:	f000 f9c1 	bl	801e258 <__kernel_cos>
 801ded6:	ec51 0b10 	vmov	r0, r1, d0
 801deda:	e7e7      	b.n	801deac <cos+0x2c>
 801dedc:	ed9d 1b02 	vldr	d1, [sp, #8]
 801dee0:	ed9d 0b00 	vldr	d0, [sp]
 801dee4:	f000 fa80 	bl	801e3e8 <__kernel_sin>
 801dee8:	ec53 2b10 	vmov	r2, r3, d0
 801deec:	4610      	mov	r0, r2
 801deee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801def2:	e7db      	b.n	801deac <cos+0x2c>
 801def4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801def8:	ed9d 0b00 	vldr	d0, [sp]
 801defc:	f000 f9ac 	bl	801e258 <__kernel_cos>
 801df00:	e7f2      	b.n	801dee8 <cos+0x68>
 801df02:	ed9d 1b02 	vldr	d1, [sp, #8]
 801df06:	ed9d 0b00 	vldr	d0, [sp]
 801df0a:	2001      	movs	r0, #1
 801df0c:	f000 fa6c 	bl	801e3e8 <__kernel_sin>
 801df10:	e7e1      	b.n	801ded6 <cos+0x56>
 801df12:	bf00      	nop
 801df14:	f3af 8000 	nop.w
	...
 801df20:	3fe921fb 	.word	0x3fe921fb
 801df24:	7fefffff 	.word	0x7fefffff

0801df28 <sin>:
 801df28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801df2a:	ec53 2b10 	vmov	r2, r3, d0
 801df2e:	4826      	ldr	r0, [pc, #152]	@ (801dfc8 <sin+0xa0>)
 801df30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801df34:	4281      	cmp	r1, r0
 801df36:	d807      	bhi.n	801df48 <sin+0x20>
 801df38:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801dfc0 <sin+0x98>
 801df3c:	2000      	movs	r0, #0
 801df3e:	b005      	add	sp, #20
 801df40:	f85d eb04 	ldr.w	lr, [sp], #4
 801df44:	f000 ba50 	b.w	801e3e8 <__kernel_sin>
 801df48:	4820      	ldr	r0, [pc, #128]	@ (801dfcc <sin+0xa4>)
 801df4a:	4281      	cmp	r1, r0
 801df4c:	d908      	bls.n	801df60 <sin+0x38>
 801df4e:	4610      	mov	r0, r2
 801df50:	4619      	mov	r1, r3
 801df52:	f7e2 f971 	bl	8000238 <__aeabi_dsub>
 801df56:	ec41 0b10 	vmov	d0, r0, r1
 801df5a:	b005      	add	sp, #20
 801df5c:	f85d fb04 	ldr.w	pc, [sp], #4
 801df60:	4668      	mov	r0, sp
 801df62:	f000 fafd 	bl	801e560 <__ieee754_rem_pio2>
 801df66:	f000 0003 	and.w	r0, r0, #3
 801df6a:	2801      	cmp	r0, #1
 801df6c:	d00c      	beq.n	801df88 <sin+0x60>
 801df6e:	2802      	cmp	r0, #2
 801df70:	d011      	beq.n	801df96 <sin+0x6e>
 801df72:	b9e8      	cbnz	r0, 801dfb0 <sin+0x88>
 801df74:	ed9d 1b02 	vldr	d1, [sp, #8]
 801df78:	ed9d 0b00 	vldr	d0, [sp]
 801df7c:	2001      	movs	r0, #1
 801df7e:	f000 fa33 	bl	801e3e8 <__kernel_sin>
 801df82:	ec51 0b10 	vmov	r0, r1, d0
 801df86:	e7e6      	b.n	801df56 <sin+0x2e>
 801df88:	ed9d 1b02 	vldr	d1, [sp, #8]
 801df8c:	ed9d 0b00 	vldr	d0, [sp]
 801df90:	f000 f962 	bl	801e258 <__kernel_cos>
 801df94:	e7f5      	b.n	801df82 <sin+0x5a>
 801df96:	ed9d 1b02 	vldr	d1, [sp, #8]
 801df9a:	ed9d 0b00 	vldr	d0, [sp]
 801df9e:	2001      	movs	r0, #1
 801dfa0:	f000 fa22 	bl	801e3e8 <__kernel_sin>
 801dfa4:	ec53 2b10 	vmov	r2, r3, d0
 801dfa8:	4610      	mov	r0, r2
 801dfaa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801dfae:	e7d2      	b.n	801df56 <sin+0x2e>
 801dfb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 801dfb4:	ed9d 0b00 	vldr	d0, [sp]
 801dfb8:	f000 f94e 	bl	801e258 <__kernel_cos>
 801dfbc:	e7f2      	b.n	801dfa4 <sin+0x7c>
 801dfbe:	bf00      	nop
	...
 801dfc8:	3fe921fb 	.word	0x3fe921fb
 801dfcc:	7fefffff 	.word	0x7fefffff

0801dfd0 <expf>:
 801dfd0:	b508      	push	{r3, lr}
 801dfd2:	ed2d 8b02 	vpush	{d8}
 801dfd6:	eef0 8a40 	vmov.f32	s17, s0
 801dfda:	f000 fcf9 	bl	801e9d0 <__ieee754_expf>
 801dfde:	eeb0 8a40 	vmov.f32	s16, s0
 801dfe2:	eeb0 0a68 	vmov.f32	s0, s17
 801dfe6:	f000 f8ab 	bl	801e140 <finitef>
 801dfea:	b160      	cbz	r0, 801e006 <expf+0x36>
 801dfec:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801e02c <expf+0x5c>
 801dff0:	eef4 8ae7 	vcmpe.f32	s17, s15
 801dff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dff8:	dd0a      	ble.n	801e010 <expf+0x40>
 801dffa:	f7fd fb11 	bl	801b620 <__errno>
 801dffe:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801e030 <expf+0x60>
 801e002:	2322      	movs	r3, #34	@ 0x22
 801e004:	6003      	str	r3, [r0, #0]
 801e006:	eeb0 0a48 	vmov.f32	s0, s16
 801e00a:	ecbd 8b02 	vpop	{d8}
 801e00e:	bd08      	pop	{r3, pc}
 801e010:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801e034 <expf+0x64>
 801e014:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e01c:	d5f3      	bpl.n	801e006 <expf+0x36>
 801e01e:	f7fd faff 	bl	801b620 <__errno>
 801e022:	2322      	movs	r3, #34	@ 0x22
 801e024:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801e038 <expf+0x68>
 801e028:	6003      	str	r3, [r0, #0]
 801e02a:	e7ec      	b.n	801e006 <expf+0x36>
 801e02c:	42b17217 	.word	0x42b17217
 801e030:	7f800000 	.word	0x7f800000
 801e034:	c2cff1b5 	.word	0xc2cff1b5
 801e038:	00000000 	.word	0x00000000

0801e03c <logf>:
 801e03c:	b508      	push	{r3, lr}
 801e03e:	ed2d 8b02 	vpush	{d8}
 801e042:	eeb0 8a40 	vmov.f32	s16, s0
 801e046:	f000 fd91 	bl	801eb6c <__ieee754_logf>
 801e04a:	eeb4 8a48 	vcmp.f32	s16, s16
 801e04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e052:	d60f      	bvs.n	801e074 <logf+0x38>
 801e054:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801e058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e05c:	dc0a      	bgt.n	801e074 <logf+0x38>
 801e05e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801e062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e066:	d108      	bne.n	801e07a <logf+0x3e>
 801e068:	f7fd fada 	bl	801b620 <__errno>
 801e06c:	2322      	movs	r3, #34	@ 0x22
 801e06e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801e090 <logf+0x54>
 801e072:	6003      	str	r3, [r0, #0]
 801e074:	ecbd 8b02 	vpop	{d8}
 801e078:	bd08      	pop	{r3, pc}
 801e07a:	f7fd fad1 	bl	801b620 <__errno>
 801e07e:	ecbd 8b02 	vpop	{d8}
 801e082:	2321      	movs	r3, #33	@ 0x21
 801e084:	6003      	str	r3, [r0, #0]
 801e086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801e08a:	4802      	ldr	r0, [pc, #8]	@ (801e094 <logf+0x58>)
 801e08c:	f7fd bb14 	b.w	801b6b8 <nanf>
 801e090:	ff800000 	.word	0xff800000
 801e094:	080223c6 	.word	0x080223c6

0801e098 <fmin>:
 801e098:	b508      	push	{r3, lr}
 801e09a:	ed2d 8b04 	vpush	{d8-d9}
 801e09e:	eeb0 8a40 	vmov.f32	s16, s0
 801e0a2:	eef0 8a60 	vmov.f32	s17, s1
 801e0a6:	eeb0 9a41 	vmov.f32	s18, s2
 801e0aa:	eef0 9a61 	vmov.f32	s19, s3
 801e0ae:	f000 f81d 	bl	801e0ec <__fpclassifyd>
 801e0b2:	b950      	cbnz	r0, 801e0ca <fmin+0x32>
 801e0b4:	eeb0 8a49 	vmov.f32	s16, s18
 801e0b8:	eef0 8a69 	vmov.f32	s17, s19
 801e0bc:	eeb0 0a48 	vmov.f32	s0, s16
 801e0c0:	eef0 0a68 	vmov.f32	s1, s17
 801e0c4:	ecbd 8b04 	vpop	{d8-d9}
 801e0c8:	bd08      	pop	{r3, pc}
 801e0ca:	eeb0 0a49 	vmov.f32	s0, s18
 801e0ce:	eef0 0a69 	vmov.f32	s1, s19
 801e0d2:	f000 f80b 	bl	801e0ec <__fpclassifyd>
 801e0d6:	2800      	cmp	r0, #0
 801e0d8:	d0f0      	beq.n	801e0bc <fmin+0x24>
 801e0da:	ec53 2b19 	vmov	r2, r3, d9
 801e0de:	ec51 0b18 	vmov	r0, r1, d8
 801e0e2:	f7e2 fcd3 	bl	8000a8c <__aeabi_dcmplt>
 801e0e6:	2800      	cmp	r0, #0
 801e0e8:	d0e4      	beq.n	801e0b4 <fmin+0x1c>
 801e0ea:	e7e7      	b.n	801e0bc <fmin+0x24>

0801e0ec <__fpclassifyd>:
 801e0ec:	ec51 0b10 	vmov	r0, r1, d0
 801e0f0:	b510      	push	{r4, lr}
 801e0f2:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801e0f6:	460b      	mov	r3, r1
 801e0f8:	d019      	beq.n	801e12e <__fpclassifyd+0x42>
 801e0fa:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801e0fe:	490e      	ldr	r1, [pc, #56]	@ (801e138 <__fpclassifyd+0x4c>)
 801e100:	428a      	cmp	r2, r1
 801e102:	d90e      	bls.n	801e122 <__fpclassifyd+0x36>
 801e104:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801e108:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801e10c:	428a      	cmp	r2, r1
 801e10e:	d908      	bls.n	801e122 <__fpclassifyd+0x36>
 801e110:	4a0a      	ldr	r2, [pc, #40]	@ (801e13c <__fpclassifyd+0x50>)
 801e112:	4213      	tst	r3, r2
 801e114:	d007      	beq.n	801e126 <__fpclassifyd+0x3a>
 801e116:	4294      	cmp	r4, r2
 801e118:	d107      	bne.n	801e12a <__fpclassifyd+0x3e>
 801e11a:	fab0 f080 	clz	r0, r0
 801e11e:	0940      	lsrs	r0, r0, #5
 801e120:	bd10      	pop	{r4, pc}
 801e122:	2004      	movs	r0, #4
 801e124:	e7fc      	b.n	801e120 <__fpclassifyd+0x34>
 801e126:	2003      	movs	r0, #3
 801e128:	e7fa      	b.n	801e120 <__fpclassifyd+0x34>
 801e12a:	2000      	movs	r0, #0
 801e12c:	e7f8      	b.n	801e120 <__fpclassifyd+0x34>
 801e12e:	2800      	cmp	r0, #0
 801e130:	d1ee      	bne.n	801e110 <__fpclassifyd+0x24>
 801e132:	2002      	movs	r0, #2
 801e134:	e7f4      	b.n	801e120 <__fpclassifyd+0x34>
 801e136:	bf00      	nop
 801e138:	7fdfffff 	.word	0x7fdfffff
 801e13c:	7ff00000 	.word	0x7ff00000

0801e140 <finitef>:
 801e140:	ee10 3a10 	vmov	r3, s0
 801e144:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801e148:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801e14c:	bfac      	ite	ge
 801e14e:	2000      	movge	r0, #0
 801e150:	2001      	movlt	r0, #1
 801e152:	4770      	bx	lr

0801e154 <cosl>:
 801e154:	f7ff be94 	b.w	801de80 <cos>

0801e158 <sinl>:
 801e158:	f7ff bee6 	b.w	801df28 <sin>

0801e15c <acosl>:
 801e15c:	f000 bbfc 	b.w	801e958 <acos>

0801e160 <floor>:
 801e160:	ec51 0b10 	vmov	r0, r1, d0
 801e164:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e16c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e170:	2e13      	cmp	r6, #19
 801e172:	460c      	mov	r4, r1
 801e174:	4605      	mov	r5, r0
 801e176:	4680      	mov	r8, r0
 801e178:	dc34      	bgt.n	801e1e4 <floor+0x84>
 801e17a:	2e00      	cmp	r6, #0
 801e17c:	da17      	bge.n	801e1ae <floor+0x4e>
 801e17e:	a332      	add	r3, pc, #200	@ (adr r3, 801e248 <floor+0xe8>)
 801e180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e184:	f7e2 f85a 	bl	800023c <__adddf3>
 801e188:	2200      	movs	r2, #0
 801e18a:	2300      	movs	r3, #0
 801e18c:	f7e2 fc9c 	bl	8000ac8 <__aeabi_dcmpgt>
 801e190:	b150      	cbz	r0, 801e1a8 <floor+0x48>
 801e192:	2c00      	cmp	r4, #0
 801e194:	da55      	bge.n	801e242 <floor+0xe2>
 801e196:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e19a:	432c      	orrs	r4, r5
 801e19c:	2500      	movs	r5, #0
 801e19e:	42ac      	cmp	r4, r5
 801e1a0:	4c2b      	ldr	r4, [pc, #172]	@ (801e250 <floor+0xf0>)
 801e1a2:	bf08      	it	eq
 801e1a4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e1a8:	4621      	mov	r1, r4
 801e1aa:	4628      	mov	r0, r5
 801e1ac:	e023      	b.n	801e1f6 <floor+0x96>
 801e1ae:	4f29      	ldr	r7, [pc, #164]	@ (801e254 <floor+0xf4>)
 801e1b0:	4137      	asrs	r7, r6
 801e1b2:	ea01 0307 	and.w	r3, r1, r7
 801e1b6:	4303      	orrs	r3, r0
 801e1b8:	d01d      	beq.n	801e1f6 <floor+0x96>
 801e1ba:	a323      	add	r3, pc, #140	@ (adr r3, 801e248 <floor+0xe8>)
 801e1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1c0:	f7e2 f83c 	bl	800023c <__adddf3>
 801e1c4:	2200      	movs	r2, #0
 801e1c6:	2300      	movs	r3, #0
 801e1c8:	f7e2 fc7e 	bl	8000ac8 <__aeabi_dcmpgt>
 801e1cc:	2800      	cmp	r0, #0
 801e1ce:	d0eb      	beq.n	801e1a8 <floor+0x48>
 801e1d0:	2c00      	cmp	r4, #0
 801e1d2:	bfbe      	ittt	lt
 801e1d4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e1d8:	4133      	asrlt	r3, r6
 801e1da:	18e4      	addlt	r4, r4, r3
 801e1dc:	ea24 0407 	bic.w	r4, r4, r7
 801e1e0:	2500      	movs	r5, #0
 801e1e2:	e7e1      	b.n	801e1a8 <floor+0x48>
 801e1e4:	2e33      	cmp	r6, #51	@ 0x33
 801e1e6:	dd0a      	ble.n	801e1fe <floor+0x9e>
 801e1e8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e1ec:	d103      	bne.n	801e1f6 <floor+0x96>
 801e1ee:	4602      	mov	r2, r0
 801e1f0:	460b      	mov	r3, r1
 801e1f2:	f7e2 f823 	bl	800023c <__adddf3>
 801e1f6:	ec41 0b10 	vmov	d0, r0, r1
 801e1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e1fe:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e202:	f04f 37ff 	mov.w	r7, #4294967295
 801e206:	40df      	lsrs	r7, r3
 801e208:	4207      	tst	r7, r0
 801e20a:	d0f4      	beq.n	801e1f6 <floor+0x96>
 801e20c:	a30e      	add	r3, pc, #56	@ (adr r3, 801e248 <floor+0xe8>)
 801e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e212:	f7e2 f813 	bl	800023c <__adddf3>
 801e216:	2200      	movs	r2, #0
 801e218:	2300      	movs	r3, #0
 801e21a:	f7e2 fc55 	bl	8000ac8 <__aeabi_dcmpgt>
 801e21e:	2800      	cmp	r0, #0
 801e220:	d0c2      	beq.n	801e1a8 <floor+0x48>
 801e222:	2c00      	cmp	r4, #0
 801e224:	da0a      	bge.n	801e23c <floor+0xdc>
 801e226:	2e14      	cmp	r6, #20
 801e228:	d101      	bne.n	801e22e <floor+0xce>
 801e22a:	3401      	adds	r4, #1
 801e22c:	e006      	b.n	801e23c <floor+0xdc>
 801e22e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e232:	2301      	movs	r3, #1
 801e234:	40b3      	lsls	r3, r6
 801e236:	441d      	add	r5, r3
 801e238:	4545      	cmp	r5, r8
 801e23a:	d3f6      	bcc.n	801e22a <floor+0xca>
 801e23c:	ea25 0507 	bic.w	r5, r5, r7
 801e240:	e7b2      	b.n	801e1a8 <floor+0x48>
 801e242:	2500      	movs	r5, #0
 801e244:	462c      	mov	r4, r5
 801e246:	e7af      	b.n	801e1a8 <floor+0x48>
 801e248:	8800759c 	.word	0x8800759c
 801e24c:	7e37e43c 	.word	0x7e37e43c
 801e250:	bff00000 	.word	0xbff00000
 801e254:	000fffff 	.word	0x000fffff

0801e258 <__kernel_cos>:
 801e258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e25c:	ec57 6b10 	vmov	r6, r7, d0
 801e260:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e264:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e268:	ed8d 1b00 	vstr	d1, [sp]
 801e26c:	d206      	bcs.n	801e27c <__kernel_cos+0x24>
 801e26e:	4630      	mov	r0, r6
 801e270:	4639      	mov	r1, r7
 801e272:	f7e2 fc49 	bl	8000b08 <__aeabi_d2iz>
 801e276:	2800      	cmp	r0, #0
 801e278:	f000 8088 	beq.w	801e38c <__kernel_cos+0x134>
 801e27c:	4632      	mov	r2, r6
 801e27e:	463b      	mov	r3, r7
 801e280:	4630      	mov	r0, r6
 801e282:	4639      	mov	r1, r7
 801e284:	f7e2 f990 	bl	80005a8 <__aeabi_dmul>
 801e288:	4b51      	ldr	r3, [pc, #324]	@ (801e3d0 <__kernel_cos+0x178>)
 801e28a:	2200      	movs	r2, #0
 801e28c:	4604      	mov	r4, r0
 801e28e:	460d      	mov	r5, r1
 801e290:	f7e2 f98a 	bl	80005a8 <__aeabi_dmul>
 801e294:	a340      	add	r3, pc, #256	@ (adr r3, 801e398 <__kernel_cos+0x140>)
 801e296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e29a:	4682      	mov	sl, r0
 801e29c:	468b      	mov	fp, r1
 801e29e:	4620      	mov	r0, r4
 801e2a0:	4629      	mov	r1, r5
 801e2a2:	f7e2 f981 	bl	80005a8 <__aeabi_dmul>
 801e2a6:	a33e      	add	r3, pc, #248	@ (adr r3, 801e3a0 <__kernel_cos+0x148>)
 801e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2ac:	f7e1 ffc6 	bl	800023c <__adddf3>
 801e2b0:	4622      	mov	r2, r4
 801e2b2:	462b      	mov	r3, r5
 801e2b4:	f7e2 f978 	bl	80005a8 <__aeabi_dmul>
 801e2b8:	a33b      	add	r3, pc, #236	@ (adr r3, 801e3a8 <__kernel_cos+0x150>)
 801e2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2be:	f7e1 ffbb 	bl	8000238 <__aeabi_dsub>
 801e2c2:	4622      	mov	r2, r4
 801e2c4:	462b      	mov	r3, r5
 801e2c6:	f7e2 f96f 	bl	80005a8 <__aeabi_dmul>
 801e2ca:	a339      	add	r3, pc, #228	@ (adr r3, 801e3b0 <__kernel_cos+0x158>)
 801e2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2d0:	f7e1 ffb4 	bl	800023c <__adddf3>
 801e2d4:	4622      	mov	r2, r4
 801e2d6:	462b      	mov	r3, r5
 801e2d8:	f7e2 f966 	bl	80005a8 <__aeabi_dmul>
 801e2dc:	a336      	add	r3, pc, #216	@ (adr r3, 801e3b8 <__kernel_cos+0x160>)
 801e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2e2:	f7e1 ffa9 	bl	8000238 <__aeabi_dsub>
 801e2e6:	4622      	mov	r2, r4
 801e2e8:	462b      	mov	r3, r5
 801e2ea:	f7e2 f95d 	bl	80005a8 <__aeabi_dmul>
 801e2ee:	a334      	add	r3, pc, #208	@ (adr r3, 801e3c0 <__kernel_cos+0x168>)
 801e2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2f4:	f7e1 ffa2 	bl	800023c <__adddf3>
 801e2f8:	4622      	mov	r2, r4
 801e2fa:	462b      	mov	r3, r5
 801e2fc:	f7e2 f954 	bl	80005a8 <__aeabi_dmul>
 801e300:	4622      	mov	r2, r4
 801e302:	462b      	mov	r3, r5
 801e304:	f7e2 f950 	bl	80005a8 <__aeabi_dmul>
 801e308:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e30c:	4604      	mov	r4, r0
 801e30e:	460d      	mov	r5, r1
 801e310:	4630      	mov	r0, r6
 801e312:	4639      	mov	r1, r7
 801e314:	f7e2 f948 	bl	80005a8 <__aeabi_dmul>
 801e318:	460b      	mov	r3, r1
 801e31a:	4602      	mov	r2, r0
 801e31c:	4629      	mov	r1, r5
 801e31e:	4620      	mov	r0, r4
 801e320:	f7e1 ff8a 	bl	8000238 <__aeabi_dsub>
 801e324:	4b2b      	ldr	r3, [pc, #172]	@ (801e3d4 <__kernel_cos+0x17c>)
 801e326:	4598      	cmp	r8, r3
 801e328:	4606      	mov	r6, r0
 801e32a:	460f      	mov	r7, r1
 801e32c:	d810      	bhi.n	801e350 <__kernel_cos+0xf8>
 801e32e:	4602      	mov	r2, r0
 801e330:	460b      	mov	r3, r1
 801e332:	4650      	mov	r0, sl
 801e334:	4659      	mov	r1, fp
 801e336:	f7e1 ff7f 	bl	8000238 <__aeabi_dsub>
 801e33a:	460b      	mov	r3, r1
 801e33c:	4926      	ldr	r1, [pc, #152]	@ (801e3d8 <__kernel_cos+0x180>)
 801e33e:	4602      	mov	r2, r0
 801e340:	2000      	movs	r0, #0
 801e342:	f7e1 ff79 	bl	8000238 <__aeabi_dsub>
 801e346:	ec41 0b10 	vmov	d0, r0, r1
 801e34a:	b003      	add	sp, #12
 801e34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e350:	4b22      	ldr	r3, [pc, #136]	@ (801e3dc <__kernel_cos+0x184>)
 801e352:	4921      	ldr	r1, [pc, #132]	@ (801e3d8 <__kernel_cos+0x180>)
 801e354:	4598      	cmp	r8, r3
 801e356:	bf8c      	ite	hi
 801e358:	4d21      	ldrhi	r5, [pc, #132]	@ (801e3e0 <__kernel_cos+0x188>)
 801e35a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801e35e:	2400      	movs	r4, #0
 801e360:	4622      	mov	r2, r4
 801e362:	462b      	mov	r3, r5
 801e364:	2000      	movs	r0, #0
 801e366:	f7e1 ff67 	bl	8000238 <__aeabi_dsub>
 801e36a:	4622      	mov	r2, r4
 801e36c:	4680      	mov	r8, r0
 801e36e:	4689      	mov	r9, r1
 801e370:	462b      	mov	r3, r5
 801e372:	4650      	mov	r0, sl
 801e374:	4659      	mov	r1, fp
 801e376:	f7e1 ff5f 	bl	8000238 <__aeabi_dsub>
 801e37a:	4632      	mov	r2, r6
 801e37c:	463b      	mov	r3, r7
 801e37e:	f7e1 ff5b 	bl	8000238 <__aeabi_dsub>
 801e382:	4602      	mov	r2, r0
 801e384:	460b      	mov	r3, r1
 801e386:	4640      	mov	r0, r8
 801e388:	4649      	mov	r1, r9
 801e38a:	e7da      	b.n	801e342 <__kernel_cos+0xea>
 801e38c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801e3c8 <__kernel_cos+0x170>
 801e390:	e7db      	b.n	801e34a <__kernel_cos+0xf2>
 801e392:	bf00      	nop
 801e394:	f3af 8000 	nop.w
 801e398:	be8838d4 	.word	0xbe8838d4
 801e39c:	bda8fae9 	.word	0xbda8fae9
 801e3a0:	bdb4b1c4 	.word	0xbdb4b1c4
 801e3a4:	3e21ee9e 	.word	0x3e21ee9e
 801e3a8:	809c52ad 	.word	0x809c52ad
 801e3ac:	3e927e4f 	.word	0x3e927e4f
 801e3b0:	19cb1590 	.word	0x19cb1590
 801e3b4:	3efa01a0 	.word	0x3efa01a0
 801e3b8:	16c15177 	.word	0x16c15177
 801e3bc:	3f56c16c 	.word	0x3f56c16c
 801e3c0:	5555554c 	.word	0x5555554c
 801e3c4:	3fa55555 	.word	0x3fa55555
 801e3c8:	00000000 	.word	0x00000000
 801e3cc:	3ff00000 	.word	0x3ff00000
 801e3d0:	3fe00000 	.word	0x3fe00000
 801e3d4:	3fd33332 	.word	0x3fd33332
 801e3d8:	3ff00000 	.word	0x3ff00000
 801e3dc:	3fe90000 	.word	0x3fe90000
 801e3e0:	3fd20000 	.word	0x3fd20000
 801e3e4:	00000000 	.word	0x00000000

0801e3e8 <__kernel_sin>:
 801e3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3ec:	ec55 4b10 	vmov	r4, r5, d0
 801e3f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e3f4:	b085      	sub	sp, #20
 801e3f6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e3fa:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e3fe:	4680      	mov	r8, r0
 801e400:	d205      	bcs.n	801e40e <__kernel_sin+0x26>
 801e402:	4620      	mov	r0, r4
 801e404:	4629      	mov	r1, r5
 801e406:	f7e2 fb7f 	bl	8000b08 <__aeabi_d2iz>
 801e40a:	2800      	cmp	r0, #0
 801e40c:	d052      	beq.n	801e4b4 <__kernel_sin+0xcc>
 801e40e:	4622      	mov	r2, r4
 801e410:	462b      	mov	r3, r5
 801e412:	4620      	mov	r0, r4
 801e414:	4629      	mov	r1, r5
 801e416:	f7e2 f8c7 	bl	80005a8 <__aeabi_dmul>
 801e41a:	4682      	mov	sl, r0
 801e41c:	468b      	mov	fp, r1
 801e41e:	4602      	mov	r2, r0
 801e420:	460b      	mov	r3, r1
 801e422:	4620      	mov	r0, r4
 801e424:	4629      	mov	r1, r5
 801e426:	f7e2 f8bf 	bl	80005a8 <__aeabi_dmul>
 801e42a:	a342      	add	r3, pc, #264	@ (adr r3, 801e534 <__kernel_sin+0x14c>)
 801e42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e430:	e9cd 0100 	strd	r0, r1, [sp]
 801e434:	4650      	mov	r0, sl
 801e436:	4659      	mov	r1, fp
 801e438:	f7e2 f8b6 	bl	80005a8 <__aeabi_dmul>
 801e43c:	a33f      	add	r3, pc, #252	@ (adr r3, 801e53c <__kernel_sin+0x154>)
 801e43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e442:	f7e1 fef9 	bl	8000238 <__aeabi_dsub>
 801e446:	4652      	mov	r2, sl
 801e448:	465b      	mov	r3, fp
 801e44a:	f7e2 f8ad 	bl	80005a8 <__aeabi_dmul>
 801e44e:	a33d      	add	r3, pc, #244	@ (adr r3, 801e544 <__kernel_sin+0x15c>)
 801e450:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e454:	f7e1 fef2 	bl	800023c <__adddf3>
 801e458:	4652      	mov	r2, sl
 801e45a:	465b      	mov	r3, fp
 801e45c:	f7e2 f8a4 	bl	80005a8 <__aeabi_dmul>
 801e460:	a33a      	add	r3, pc, #232	@ (adr r3, 801e54c <__kernel_sin+0x164>)
 801e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e466:	f7e1 fee7 	bl	8000238 <__aeabi_dsub>
 801e46a:	4652      	mov	r2, sl
 801e46c:	465b      	mov	r3, fp
 801e46e:	f7e2 f89b 	bl	80005a8 <__aeabi_dmul>
 801e472:	a338      	add	r3, pc, #224	@ (adr r3, 801e554 <__kernel_sin+0x16c>)
 801e474:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e478:	f7e1 fee0 	bl	800023c <__adddf3>
 801e47c:	4606      	mov	r6, r0
 801e47e:	460f      	mov	r7, r1
 801e480:	f1b8 0f00 	cmp.w	r8, #0
 801e484:	d11b      	bne.n	801e4be <__kernel_sin+0xd6>
 801e486:	4602      	mov	r2, r0
 801e488:	460b      	mov	r3, r1
 801e48a:	4650      	mov	r0, sl
 801e48c:	4659      	mov	r1, fp
 801e48e:	f7e2 f88b 	bl	80005a8 <__aeabi_dmul>
 801e492:	a325      	add	r3, pc, #148	@ (adr r3, 801e528 <__kernel_sin+0x140>)
 801e494:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e498:	f7e1 fece 	bl	8000238 <__aeabi_dsub>
 801e49c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e4a0:	f7e2 f882 	bl	80005a8 <__aeabi_dmul>
 801e4a4:	4602      	mov	r2, r0
 801e4a6:	460b      	mov	r3, r1
 801e4a8:	4620      	mov	r0, r4
 801e4aa:	4629      	mov	r1, r5
 801e4ac:	f7e1 fec6 	bl	800023c <__adddf3>
 801e4b0:	4604      	mov	r4, r0
 801e4b2:	460d      	mov	r5, r1
 801e4b4:	ec45 4b10 	vmov	d0, r4, r5
 801e4b8:	b005      	add	sp, #20
 801e4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e4be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e4c2:	4b1b      	ldr	r3, [pc, #108]	@ (801e530 <__kernel_sin+0x148>)
 801e4c4:	2200      	movs	r2, #0
 801e4c6:	f7e2 f86f 	bl	80005a8 <__aeabi_dmul>
 801e4ca:	4632      	mov	r2, r6
 801e4cc:	4680      	mov	r8, r0
 801e4ce:	4689      	mov	r9, r1
 801e4d0:	463b      	mov	r3, r7
 801e4d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e4d6:	f7e2 f867 	bl	80005a8 <__aeabi_dmul>
 801e4da:	4602      	mov	r2, r0
 801e4dc:	460b      	mov	r3, r1
 801e4de:	4640      	mov	r0, r8
 801e4e0:	4649      	mov	r1, r9
 801e4e2:	f7e1 fea9 	bl	8000238 <__aeabi_dsub>
 801e4e6:	4652      	mov	r2, sl
 801e4e8:	465b      	mov	r3, fp
 801e4ea:	f7e2 f85d 	bl	80005a8 <__aeabi_dmul>
 801e4ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e4f2:	f7e1 fea1 	bl	8000238 <__aeabi_dsub>
 801e4f6:	a30c      	add	r3, pc, #48	@ (adr r3, 801e528 <__kernel_sin+0x140>)
 801e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4fc:	4606      	mov	r6, r0
 801e4fe:	460f      	mov	r7, r1
 801e500:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e504:	f7e2 f850 	bl	80005a8 <__aeabi_dmul>
 801e508:	4602      	mov	r2, r0
 801e50a:	460b      	mov	r3, r1
 801e50c:	4630      	mov	r0, r6
 801e50e:	4639      	mov	r1, r7
 801e510:	f7e1 fe94 	bl	800023c <__adddf3>
 801e514:	4602      	mov	r2, r0
 801e516:	460b      	mov	r3, r1
 801e518:	4620      	mov	r0, r4
 801e51a:	4629      	mov	r1, r5
 801e51c:	f7e1 fe8c 	bl	8000238 <__aeabi_dsub>
 801e520:	e7c6      	b.n	801e4b0 <__kernel_sin+0xc8>
 801e522:	bf00      	nop
 801e524:	f3af 8000 	nop.w
 801e528:	55555549 	.word	0x55555549
 801e52c:	3fc55555 	.word	0x3fc55555
 801e530:	3fe00000 	.word	0x3fe00000
 801e534:	5acfd57c 	.word	0x5acfd57c
 801e538:	3de5d93a 	.word	0x3de5d93a
 801e53c:	8a2b9ceb 	.word	0x8a2b9ceb
 801e540:	3e5ae5e6 	.word	0x3e5ae5e6
 801e544:	57b1fe7d 	.word	0x57b1fe7d
 801e548:	3ec71de3 	.word	0x3ec71de3
 801e54c:	19c161d5 	.word	0x19c161d5
 801e550:	3f2a01a0 	.word	0x3f2a01a0
 801e554:	1110f8a6 	.word	0x1110f8a6
 801e558:	3f811111 	.word	0x3f811111
 801e55c:	00000000 	.word	0x00000000

0801e560 <__ieee754_rem_pio2>:
 801e560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e564:	ec57 6b10 	vmov	r6, r7, d0
 801e568:	4bc5      	ldr	r3, [pc, #788]	@ (801e880 <__ieee754_rem_pio2+0x320>)
 801e56a:	b08d      	sub	sp, #52	@ 0x34
 801e56c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e570:	4598      	cmp	r8, r3
 801e572:	4604      	mov	r4, r0
 801e574:	9704      	str	r7, [sp, #16]
 801e576:	d807      	bhi.n	801e588 <__ieee754_rem_pio2+0x28>
 801e578:	2200      	movs	r2, #0
 801e57a:	2300      	movs	r3, #0
 801e57c:	ed80 0b00 	vstr	d0, [r0]
 801e580:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e584:	2500      	movs	r5, #0
 801e586:	e028      	b.n	801e5da <__ieee754_rem_pio2+0x7a>
 801e588:	4bbe      	ldr	r3, [pc, #760]	@ (801e884 <__ieee754_rem_pio2+0x324>)
 801e58a:	4598      	cmp	r8, r3
 801e58c:	d878      	bhi.n	801e680 <__ieee754_rem_pio2+0x120>
 801e58e:	9b04      	ldr	r3, [sp, #16]
 801e590:	4dbd      	ldr	r5, [pc, #756]	@ (801e888 <__ieee754_rem_pio2+0x328>)
 801e592:	2b00      	cmp	r3, #0
 801e594:	4630      	mov	r0, r6
 801e596:	a3ac      	add	r3, pc, #688	@ (adr r3, 801e848 <__ieee754_rem_pio2+0x2e8>)
 801e598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e59c:	4639      	mov	r1, r7
 801e59e:	dd38      	ble.n	801e612 <__ieee754_rem_pio2+0xb2>
 801e5a0:	f7e1 fe4a 	bl	8000238 <__aeabi_dsub>
 801e5a4:	45a8      	cmp	r8, r5
 801e5a6:	4606      	mov	r6, r0
 801e5a8:	460f      	mov	r7, r1
 801e5aa:	d01a      	beq.n	801e5e2 <__ieee754_rem_pio2+0x82>
 801e5ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 801e850 <__ieee754_rem_pio2+0x2f0>)
 801e5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5b2:	f7e1 fe41 	bl	8000238 <__aeabi_dsub>
 801e5b6:	4602      	mov	r2, r0
 801e5b8:	460b      	mov	r3, r1
 801e5ba:	4680      	mov	r8, r0
 801e5bc:	4689      	mov	r9, r1
 801e5be:	4630      	mov	r0, r6
 801e5c0:	4639      	mov	r1, r7
 801e5c2:	f7e1 fe39 	bl	8000238 <__aeabi_dsub>
 801e5c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 801e850 <__ieee754_rem_pio2+0x2f0>)
 801e5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5cc:	f7e1 fe34 	bl	8000238 <__aeabi_dsub>
 801e5d0:	e9c4 8900 	strd	r8, r9, [r4]
 801e5d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e5d8:	2501      	movs	r5, #1
 801e5da:	4628      	mov	r0, r5
 801e5dc:	b00d      	add	sp, #52	@ 0x34
 801e5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5e2:	a39d      	add	r3, pc, #628	@ (adr r3, 801e858 <__ieee754_rem_pio2+0x2f8>)
 801e5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5e8:	f7e1 fe26 	bl	8000238 <__aeabi_dsub>
 801e5ec:	a39c      	add	r3, pc, #624	@ (adr r3, 801e860 <__ieee754_rem_pio2+0x300>)
 801e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5f2:	4606      	mov	r6, r0
 801e5f4:	460f      	mov	r7, r1
 801e5f6:	f7e1 fe1f 	bl	8000238 <__aeabi_dsub>
 801e5fa:	4602      	mov	r2, r0
 801e5fc:	460b      	mov	r3, r1
 801e5fe:	4680      	mov	r8, r0
 801e600:	4689      	mov	r9, r1
 801e602:	4630      	mov	r0, r6
 801e604:	4639      	mov	r1, r7
 801e606:	f7e1 fe17 	bl	8000238 <__aeabi_dsub>
 801e60a:	a395      	add	r3, pc, #596	@ (adr r3, 801e860 <__ieee754_rem_pio2+0x300>)
 801e60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e610:	e7dc      	b.n	801e5cc <__ieee754_rem_pio2+0x6c>
 801e612:	f7e1 fe13 	bl	800023c <__adddf3>
 801e616:	45a8      	cmp	r8, r5
 801e618:	4606      	mov	r6, r0
 801e61a:	460f      	mov	r7, r1
 801e61c:	d018      	beq.n	801e650 <__ieee754_rem_pio2+0xf0>
 801e61e:	a38c      	add	r3, pc, #560	@ (adr r3, 801e850 <__ieee754_rem_pio2+0x2f0>)
 801e620:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e624:	f7e1 fe0a 	bl	800023c <__adddf3>
 801e628:	4602      	mov	r2, r0
 801e62a:	460b      	mov	r3, r1
 801e62c:	4680      	mov	r8, r0
 801e62e:	4689      	mov	r9, r1
 801e630:	4630      	mov	r0, r6
 801e632:	4639      	mov	r1, r7
 801e634:	f7e1 fe00 	bl	8000238 <__aeabi_dsub>
 801e638:	a385      	add	r3, pc, #532	@ (adr r3, 801e850 <__ieee754_rem_pio2+0x2f0>)
 801e63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e63e:	f7e1 fdfd 	bl	800023c <__adddf3>
 801e642:	f04f 35ff 	mov.w	r5, #4294967295
 801e646:	e9c4 8900 	strd	r8, r9, [r4]
 801e64a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e64e:	e7c4      	b.n	801e5da <__ieee754_rem_pio2+0x7a>
 801e650:	a381      	add	r3, pc, #516	@ (adr r3, 801e858 <__ieee754_rem_pio2+0x2f8>)
 801e652:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e656:	f7e1 fdf1 	bl	800023c <__adddf3>
 801e65a:	a381      	add	r3, pc, #516	@ (adr r3, 801e860 <__ieee754_rem_pio2+0x300>)
 801e65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e660:	4606      	mov	r6, r0
 801e662:	460f      	mov	r7, r1
 801e664:	f7e1 fdea 	bl	800023c <__adddf3>
 801e668:	4602      	mov	r2, r0
 801e66a:	460b      	mov	r3, r1
 801e66c:	4680      	mov	r8, r0
 801e66e:	4689      	mov	r9, r1
 801e670:	4630      	mov	r0, r6
 801e672:	4639      	mov	r1, r7
 801e674:	f7e1 fde0 	bl	8000238 <__aeabi_dsub>
 801e678:	a379      	add	r3, pc, #484	@ (adr r3, 801e860 <__ieee754_rem_pio2+0x300>)
 801e67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e67e:	e7de      	b.n	801e63e <__ieee754_rem_pio2+0xde>
 801e680:	4b82      	ldr	r3, [pc, #520]	@ (801e88c <__ieee754_rem_pio2+0x32c>)
 801e682:	4598      	cmp	r8, r3
 801e684:	f200 80d1 	bhi.w	801e82a <__ieee754_rem_pio2+0x2ca>
 801e688:	f000 f99a 	bl	801e9c0 <fabs>
 801e68c:	ec57 6b10 	vmov	r6, r7, d0
 801e690:	a375      	add	r3, pc, #468	@ (adr r3, 801e868 <__ieee754_rem_pio2+0x308>)
 801e692:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e696:	4630      	mov	r0, r6
 801e698:	4639      	mov	r1, r7
 801e69a:	f7e1 ff85 	bl	80005a8 <__aeabi_dmul>
 801e69e:	4b7c      	ldr	r3, [pc, #496]	@ (801e890 <__ieee754_rem_pio2+0x330>)
 801e6a0:	2200      	movs	r2, #0
 801e6a2:	f7e1 fdcb 	bl	800023c <__adddf3>
 801e6a6:	f7e2 fa2f 	bl	8000b08 <__aeabi_d2iz>
 801e6aa:	4605      	mov	r5, r0
 801e6ac:	f7e1 ff12 	bl	80004d4 <__aeabi_i2d>
 801e6b0:	4602      	mov	r2, r0
 801e6b2:	460b      	mov	r3, r1
 801e6b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e6b8:	a363      	add	r3, pc, #396	@ (adr r3, 801e848 <__ieee754_rem_pio2+0x2e8>)
 801e6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6be:	f7e1 ff73 	bl	80005a8 <__aeabi_dmul>
 801e6c2:	4602      	mov	r2, r0
 801e6c4:	460b      	mov	r3, r1
 801e6c6:	4630      	mov	r0, r6
 801e6c8:	4639      	mov	r1, r7
 801e6ca:	f7e1 fdb5 	bl	8000238 <__aeabi_dsub>
 801e6ce:	a360      	add	r3, pc, #384	@ (adr r3, 801e850 <__ieee754_rem_pio2+0x2f0>)
 801e6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6d4:	4682      	mov	sl, r0
 801e6d6:	468b      	mov	fp, r1
 801e6d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e6dc:	f7e1 ff64 	bl	80005a8 <__aeabi_dmul>
 801e6e0:	2d1f      	cmp	r5, #31
 801e6e2:	4606      	mov	r6, r0
 801e6e4:	460f      	mov	r7, r1
 801e6e6:	dc0c      	bgt.n	801e702 <__ieee754_rem_pio2+0x1a2>
 801e6e8:	4b6a      	ldr	r3, [pc, #424]	@ (801e894 <__ieee754_rem_pio2+0x334>)
 801e6ea:	1e6a      	subs	r2, r5, #1
 801e6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e6f0:	4543      	cmp	r3, r8
 801e6f2:	d006      	beq.n	801e702 <__ieee754_rem_pio2+0x1a2>
 801e6f4:	4632      	mov	r2, r6
 801e6f6:	463b      	mov	r3, r7
 801e6f8:	4650      	mov	r0, sl
 801e6fa:	4659      	mov	r1, fp
 801e6fc:	f7e1 fd9c 	bl	8000238 <__aeabi_dsub>
 801e700:	e00e      	b.n	801e720 <__ieee754_rem_pio2+0x1c0>
 801e702:	463b      	mov	r3, r7
 801e704:	4632      	mov	r2, r6
 801e706:	4650      	mov	r0, sl
 801e708:	4659      	mov	r1, fp
 801e70a:	f7e1 fd95 	bl	8000238 <__aeabi_dsub>
 801e70e:	ea4f 5328 	mov.w	r3, r8, asr #20
 801e712:	9305      	str	r3, [sp, #20]
 801e714:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e718:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801e71c:	2b10      	cmp	r3, #16
 801e71e:	dc02      	bgt.n	801e726 <__ieee754_rem_pio2+0x1c6>
 801e720:	e9c4 0100 	strd	r0, r1, [r4]
 801e724:	e039      	b.n	801e79a <__ieee754_rem_pio2+0x23a>
 801e726:	a34c      	add	r3, pc, #304	@ (adr r3, 801e858 <__ieee754_rem_pio2+0x2f8>)
 801e728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e72c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e730:	f7e1 ff3a 	bl	80005a8 <__aeabi_dmul>
 801e734:	4606      	mov	r6, r0
 801e736:	460f      	mov	r7, r1
 801e738:	4602      	mov	r2, r0
 801e73a:	460b      	mov	r3, r1
 801e73c:	4650      	mov	r0, sl
 801e73e:	4659      	mov	r1, fp
 801e740:	f7e1 fd7a 	bl	8000238 <__aeabi_dsub>
 801e744:	4602      	mov	r2, r0
 801e746:	460b      	mov	r3, r1
 801e748:	4680      	mov	r8, r0
 801e74a:	4689      	mov	r9, r1
 801e74c:	4650      	mov	r0, sl
 801e74e:	4659      	mov	r1, fp
 801e750:	f7e1 fd72 	bl	8000238 <__aeabi_dsub>
 801e754:	4632      	mov	r2, r6
 801e756:	463b      	mov	r3, r7
 801e758:	f7e1 fd6e 	bl	8000238 <__aeabi_dsub>
 801e75c:	a340      	add	r3, pc, #256	@ (adr r3, 801e860 <__ieee754_rem_pio2+0x300>)
 801e75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e762:	4606      	mov	r6, r0
 801e764:	460f      	mov	r7, r1
 801e766:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e76a:	f7e1 ff1d 	bl	80005a8 <__aeabi_dmul>
 801e76e:	4632      	mov	r2, r6
 801e770:	463b      	mov	r3, r7
 801e772:	f7e1 fd61 	bl	8000238 <__aeabi_dsub>
 801e776:	4602      	mov	r2, r0
 801e778:	460b      	mov	r3, r1
 801e77a:	4606      	mov	r6, r0
 801e77c:	460f      	mov	r7, r1
 801e77e:	4640      	mov	r0, r8
 801e780:	4649      	mov	r1, r9
 801e782:	f7e1 fd59 	bl	8000238 <__aeabi_dsub>
 801e786:	9a05      	ldr	r2, [sp, #20]
 801e788:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e78c:	1ad3      	subs	r3, r2, r3
 801e78e:	2b31      	cmp	r3, #49	@ 0x31
 801e790:	dc20      	bgt.n	801e7d4 <__ieee754_rem_pio2+0x274>
 801e792:	e9c4 0100 	strd	r0, r1, [r4]
 801e796:	46c2      	mov	sl, r8
 801e798:	46cb      	mov	fp, r9
 801e79a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801e79e:	4650      	mov	r0, sl
 801e7a0:	4642      	mov	r2, r8
 801e7a2:	464b      	mov	r3, r9
 801e7a4:	4659      	mov	r1, fp
 801e7a6:	f7e1 fd47 	bl	8000238 <__aeabi_dsub>
 801e7aa:	463b      	mov	r3, r7
 801e7ac:	4632      	mov	r2, r6
 801e7ae:	f7e1 fd43 	bl	8000238 <__aeabi_dsub>
 801e7b2:	9b04      	ldr	r3, [sp, #16]
 801e7b4:	2b00      	cmp	r3, #0
 801e7b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e7ba:	f6bf af0e 	bge.w	801e5da <__ieee754_rem_pio2+0x7a>
 801e7be:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801e7c2:	6063      	str	r3, [r4, #4]
 801e7c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e7c8:	f8c4 8000 	str.w	r8, [r4]
 801e7cc:	60a0      	str	r0, [r4, #8]
 801e7ce:	60e3      	str	r3, [r4, #12]
 801e7d0:	426d      	negs	r5, r5
 801e7d2:	e702      	b.n	801e5da <__ieee754_rem_pio2+0x7a>
 801e7d4:	a326      	add	r3, pc, #152	@ (adr r3, 801e870 <__ieee754_rem_pio2+0x310>)
 801e7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e7de:	f7e1 fee3 	bl	80005a8 <__aeabi_dmul>
 801e7e2:	4606      	mov	r6, r0
 801e7e4:	460f      	mov	r7, r1
 801e7e6:	4602      	mov	r2, r0
 801e7e8:	460b      	mov	r3, r1
 801e7ea:	4640      	mov	r0, r8
 801e7ec:	4649      	mov	r1, r9
 801e7ee:	f7e1 fd23 	bl	8000238 <__aeabi_dsub>
 801e7f2:	4602      	mov	r2, r0
 801e7f4:	460b      	mov	r3, r1
 801e7f6:	4682      	mov	sl, r0
 801e7f8:	468b      	mov	fp, r1
 801e7fa:	4640      	mov	r0, r8
 801e7fc:	4649      	mov	r1, r9
 801e7fe:	f7e1 fd1b 	bl	8000238 <__aeabi_dsub>
 801e802:	4632      	mov	r2, r6
 801e804:	463b      	mov	r3, r7
 801e806:	f7e1 fd17 	bl	8000238 <__aeabi_dsub>
 801e80a:	a31b      	add	r3, pc, #108	@ (adr r3, 801e878 <__ieee754_rem_pio2+0x318>)
 801e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e810:	4606      	mov	r6, r0
 801e812:	460f      	mov	r7, r1
 801e814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e818:	f7e1 fec6 	bl	80005a8 <__aeabi_dmul>
 801e81c:	4632      	mov	r2, r6
 801e81e:	463b      	mov	r3, r7
 801e820:	f7e1 fd0a 	bl	8000238 <__aeabi_dsub>
 801e824:	4606      	mov	r6, r0
 801e826:	460f      	mov	r7, r1
 801e828:	e764      	b.n	801e6f4 <__ieee754_rem_pio2+0x194>
 801e82a:	4b1b      	ldr	r3, [pc, #108]	@ (801e898 <__ieee754_rem_pio2+0x338>)
 801e82c:	4598      	cmp	r8, r3
 801e82e:	d935      	bls.n	801e89c <__ieee754_rem_pio2+0x33c>
 801e830:	4632      	mov	r2, r6
 801e832:	463b      	mov	r3, r7
 801e834:	4630      	mov	r0, r6
 801e836:	4639      	mov	r1, r7
 801e838:	f7e1 fcfe 	bl	8000238 <__aeabi_dsub>
 801e83c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e840:	e9c4 0100 	strd	r0, r1, [r4]
 801e844:	e69e      	b.n	801e584 <__ieee754_rem_pio2+0x24>
 801e846:	bf00      	nop
 801e848:	54400000 	.word	0x54400000
 801e84c:	3ff921fb 	.word	0x3ff921fb
 801e850:	1a626331 	.word	0x1a626331
 801e854:	3dd0b461 	.word	0x3dd0b461
 801e858:	1a600000 	.word	0x1a600000
 801e85c:	3dd0b461 	.word	0x3dd0b461
 801e860:	2e037073 	.word	0x2e037073
 801e864:	3ba3198a 	.word	0x3ba3198a
 801e868:	6dc9c883 	.word	0x6dc9c883
 801e86c:	3fe45f30 	.word	0x3fe45f30
 801e870:	2e000000 	.word	0x2e000000
 801e874:	3ba3198a 	.word	0x3ba3198a
 801e878:	252049c1 	.word	0x252049c1
 801e87c:	397b839a 	.word	0x397b839a
 801e880:	3fe921fb 	.word	0x3fe921fb
 801e884:	4002d97b 	.word	0x4002d97b
 801e888:	3ff921fb 	.word	0x3ff921fb
 801e88c:	413921fb 	.word	0x413921fb
 801e890:	3fe00000 	.word	0x3fe00000
 801e894:	0802260c 	.word	0x0802260c
 801e898:	7fefffff 	.word	0x7fefffff
 801e89c:	ea4f 5528 	mov.w	r5, r8, asr #20
 801e8a0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801e8a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801e8a8:	4630      	mov	r0, r6
 801e8aa:	460f      	mov	r7, r1
 801e8ac:	f7e2 f92c 	bl	8000b08 <__aeabi_d2iz>
 801e8b0:	f7e1 fe10 	bl	80004d4 <__aeabi_i2d>
 801e8b4:	4602      	mov	r2, r0
 801e8b6:	460b      	mov	r3, r1
 801e8b8:	4630      	mov	r0, r6
 801e8ba:	4639      	mov	r1, r7
 801e8bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e8c0:	f7e1 fcba 	bl	8000238 <__aeabi_dsub>
 801e8c4:	4b22      	ldr	r3, [pc, #136]	@ (801e950 <__ieee754_rem_pio2+0x3f0>)
 801e8c6:	2200      	movs	r2, #0
 801e8c8:	f7e1 fe6e 	bl	80005a8 <__aeabi_dmul>
 801e8cc:	460f      	mov	r7, r1
 801e8ce:	4606      	mov	r6, r0
 801e8d0:	f7e2 f91a 	bl	8000b08 <__aeabi_d2iz>
 801e8d4:	f7e1 fdfe 	bl	80004d4 <__aeabi_i2d>
 801e8d8:	4602      	mov	r2, r0
 801e8da:	460b      	mov	r3, r1
 801e8dc:	4630      	mov	r0, r6
 801e8de:	4639      	mov	r1, r7
 801e8e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801e8e4:	f7e1 fca8 	bl	8000238 <__aeabi_dsub>
 801e8e8:	4b19      	ldr	r3, [pc, #100]	@ (801e950 <__ieee754_rem_pio2+0x3f0>)
 801e8ea:	2200      	movs	r2, #0
 801e8ec:	f7e1 fe5c 	bl	80005a8 <__aeabi_dmul>
 801e8f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801e8f4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801e8f8:	f04f 0803 	mov.w	r8, #3
 801e8fc:	2600      	movs	r6, #0
 801e8fe:	2700      	movs	r7, #0
 801e900:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801e904:	4632      	mov	r2, r6
 801e906:	463b      	mov	r3, r7
 801e908:	46c2      	mov	sl, r8
 801e90a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e90e:	f7e2 f8b3 	bl	8000a78 <__aeabi_dcmpeq>
 801e912:	2800      	cmp	r0, #0
 801e914:	d1f4      	bne.n	801e900 <__ieee754_rem_pio2+0x3a0>
 801e916:	4b0f      	ldr	r3, [pc, #60]	@ (801e954 <__ieee754_rem_pio2+0x3f4>)
 801e918:	9301      	str	r3, [sp, #4]
 801e91a:	2302      	movs	r3, #2
 801e91c:	9300      	str	r3, [sp, #0]
 801e91e:	462a      	mov	r2, r5
 801e920:	4653      	mov	r3, sl
 801e922:	4621      	mov	r1, r4
 801e924:	a806      	add	r0, sp, #24
 801e926:	f000 fa3b 	bl	801eda0 <__kernel_rem_pio2>
 801e92a:	9b04      	ldr	r3, [sp, #16]
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	4605      	mov	r5, r0
 801e930:	f6bf ae53 	bge.w	801e5da <__ieee754_rem_pio2+0x7a>
 801e934:	e9d4 2100 	ldrd	r2, r1, [r4]
 801e938:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e93c:	e9c4 2300 	strd	r2, r3, [r4]
 801e940:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801e944:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801e948:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801e94c:	e740      	b.n	801e7d0 <__ieee754_rem_pio2+0x270>
 801e94e:	bf00      	nop
 801e950:	41700000 	.word	0x41700000
 801e954:	0802268c 	.word	0x0802268c

0801e958 <acos>:
 801e958:	b538      	push	{r3, r4, r5, lr}
 801e95a:	ed2d 8b02 	vpush	{d8}
 801e95e:	ec55 4b10 	vmov	r4, r5, d0
 801e962:	f000 fd75 	bl	801f450 <__ieee754_acos>
 801e966:	4622      	mov	r2, r4
 801e968:	462b      	mov	r3, r5
 801e96a:	4620      	mov	r0, r4
 801e96c:	4629      	mov	r1, r5
 801e96e:	eeb0 8a40 	vmov.f32	s16, s0
 801e972:	eef0 8a60 	vmov.f32	s17, s1
 801e976:	f7e2 f8b1 	bl	8000adc <__aeabi_dcmpun>
 801e97a:	b9a8      	cbnz	r0, 801e9a8 <acos+0x50>
 801e97c:	ec45 4b10 	vmov	d0, r4, r5
 801e980:	f000 f81e 	bl	801e9c0 <fabs>
 801e984:	4b0c      	ldr	r3, [pc, #48]	@ (801e9b8 <acos+0x60>)
 801e986:	ec51 0b10 	vmov	r0, r1, d0
 801e98a:	2200      	movs	r2, #0
 801e98c:	f7e2 f89c 	bl	8000ac8 <__aeabi_dcmpgt>
 801e990:	b150      	cbz	r0, 801e9a8 <acos+0x50>
 801e992:	f7fc fe45 	bl	801b620 <__errno>
 801e996:	ecbd 8b02 	vpop	{d8}
 801e99a:	2321      	movs	r3, #33	@ 0x21
 801e99c:	6003      	str	r3, [r0, #0]
 801e99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e9a2:	4806      	ldr	r0, [pc, #24]	@ (801e9bc <acos+0x64>)
 801e9a4:	f7fc be80 	b.w	801b6a8 <nan>
 801e9a8:	eeb0 0a48 	vmov.f32	s0, s16
 801e9ac:	eef0 0a68 	vmov.f32	s1, s17
 801e9b0:	ecbd 8b02 	vpop	{d8}
 801e9b4:	bd38      	pop	{r3, r4, r5, pc}
 801e9b6:	bf00      	nop
 801e9b8:	3ff00000 	.word	0x3ff00000
 801e9bc:	080223c6 	.word	0x080223c6

0801e9c0 <fabs>:
 801e9c0:	ec51 0b10 	vmov	r0, r1, d0
 801e9c4:	4602      	mov	r2, r0
 801e9c6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801e9ca:	ec43 2b10 	vmov	d0, r2, r3
 801e9ce:	4770      	bx	lr

0801e9d0 <__ieee754_expf>:
 801e9d0:	ee10 2a10 	vmov	r2, s0
 801e9d4:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801e9d8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801e9dc:	d902      	bls.n	801e9e4 <__ieee754_expf+0x14>
 801e9de:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e9e2:	4770      	bx	lr
 801e9e4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801e9e8:	d106      	bne.n	801e9f8 <__ieee754_expf+0x28>
 801e9ea:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801eb24 <__ieee754_expf+0x154>
 801e9ee:	2900      	cmp	r1, #0
 801e9f0:	bf18      	it	ne
 801e9f2:	eeb0 0a67 	vmovne.f32	s0, s15
 801e9f6:	4770      	bx	lr
 801e9f8:	484b      	ldr	r0, [pc, #300]	@ (801eb28 <__ieee754_expf+0x158>)
 801e9fa:	4282      	cmp	r2, r0
 801e9fc:	dd02      	ble.n	801ea04 <__ieee754_expf+0x34>
 801e9fe:	2000      	movs	r0, #0
 801ea00:	f000 b9c6 	b.w	801ed90 <__math_oflowf>
 801ea04:	2a00      	cmp	r2, #0
 801ea06:	da05      	bge.n	801ea14 <__ieee754_expf+0x44>
 801ea08:	4a48      	ldr	r2, [pc, #288]	@ (801eb2c <__ieee754_expf+0x15c>)
 801ea0a:	4293      	cmp	r3, r2
 801ea0c:	d902      	bls.n	801ea14 <__ieee754_expf+0x44>
 801ea0e:	2000      	movs	r0, #0
 801ea10:	f000 b9b8 	b.w	801ed84 <__math_uflowf>
 801ea14:	4a46      	ldr	r2, [pc, #280]	@ (801eb30 <__ieee754_expf+0x160>)
 801ea16:	4293      	cmp	r3, r2
 801ea18:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801ea1c:	d952      	bls.n	801eac4 <__ieee754_expf+0xf4>
 801ea1e:	4a45      	ldr	r2, [pc, #276]	@ (801eb34 <__ieee754_expf+0x164>)
 801ea20:	4293      	cmp	r3, r2
 801ea22:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801ea26:	d834      	bhi.n	801ea92 <__ieee754_expf+0xc2>
 801ea28:	4b43      	ldr	r3, [pc, #268]	@ (801eb38 <__ieee754_expf+0x168>)
 801ea2a:	4413      	add	r3, r2
 801ea2c:	ed93 7a00 	vldr	s14, [r3]
 801ea30:	4b42      	ldr	r3, [pc, #264]	@ (801eb3c <__ieee754_expf+0x16c>)
 801ea32:	4413      	add	r3, r2
 801ea34:	ee30 7a47 	vsub.f32	s14, s0, s14
 801ea38:	f1c1 0201 	rsb	r2, r1, #1
 801ea3c:	edd3 7a00 	vldr	s15, [r3]
 801ea40:	1a52      	subs	r2, r2, r1
 801ea42:	ee37 0a67 	vsub.f32	s0, s14, s15
 801ea46:	ee20 6a00 	vmul.f32	s12, s0, s0
 801ea4a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801eb40 <__ieee754_expf+0x170>
 801ea4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801eb44 <__ieee754_expf+0x174>
 801ea52:	eee6 6a05 	vfma.f32	s13, s12, s10
 801ea56:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801eb48 <__ieee754_expf+0x178>
 801ea5a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ea5e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801eb4c <__ieee754_expf+0x17c>
 801ea62:	eee5 6a06 	vfma.f32	s13, s10, s12
 801ea66:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801eb50 <__ieee754_expf+0x180>
 801ea6a:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ea6e:	eef0 6a40 	vmov.f32	s13, s0
 801ea72:	eee5 6a46 	vfms.f32	s13, s10, s12
 801ea76:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801ea7a:	ee20 5a26 	vmul.f32	s10, s0, s13
 801ea7e:	bb92      	cbnz	r2, 801eae6 <__ieee754_expf+0x116>
 801ea80:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801ea84:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801ea88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ea8c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801ea90:	4770      	bx	lr
 801ea92:	4b30      	ldr	r3, [pc, #192]	@ (801eb54 <__ieee754_expf+0x184>)
 801ea94:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801eb58 <__ieee754_expf+0x188>
 801ea98:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801eb5c <__ieee754_expf+0x18c>
 801ea9c:	4413      	add	r3, r2
 801ea9e:	edd3 7a00 	vldr	s15, [r3]
 801eaa2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801eaa6:	eeb0 7a40 	vmov.f32	s14, s0
 801eaaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801eaae:	ee17 2a90 	vmov	r2, s15
 801eab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801eab6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801eaba:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801eb60 <__ieee754_expf+0x190>
 801eabe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801eac2:	e7be      	b.n	801ea42 <__ieee754_expf+0x72>
 801eac4:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801eac8:	d20b      	bcs.n	801eae2 <__ieee754_expf+0x112>
 801eaca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801eb64 <__ieee754_expf+0x194>
 801eace:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ead2:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ead6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eada:	dd02      	ble.n	801eae2 <__ieee754_expf+0x112>
 801eadc:	ee30 0a25 	vadd.f32	s0, s0, s11
 801eae0:	4770      	bx	lr
 801eae2:	2200      	movs	r2, #0
 801eae4:	e7af      	b.n	801ea46 <__ieee754_expf+0x76>
 801eae6:	ee36 6a66 	vsub.f32	s12, s12, s13
 801eaea:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801eaee:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801eaf2:	bfb8      	it	lt
 801eaf4:	3264      	addlt	r2, #100	@ 0x64
 801eaf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801eafa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801eafe:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801eb02:	ee17 3a90 	vmov	r3, s15
 801eb06:	bfab      	itete	ge
 801eb08:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801eb0c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801eb10:	ee00 3a10 	vmovge	s0, r3
 801eb14:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801eb68 <__ieee754_expf+0x198>
 801eb18:	bfbc      	itt	lt
 801eb1a:	ee00 3a10 	vmovlt	s0, r3
 801eb1e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801eb22:	4770      	bx	lr
 801eb24:	00000000 	.word	0x00000000
 801eb28:	42b17217 	.word	0x42b17217
 801eb2c:	42cff1b5 	.word	0x42cff1b5
 801eb30:	3eb17218 	.word	0x3eb17218
 801eb34:	3f851591 	.word	0x3f851591
 801eb38:	0802279c 	.word	0x0802279c
 801eb3c:	08022794 	.word	0x08022794
 801eb40:	3331bb4c 	.word	0x3331bb4c
 801eb44:	b5ddea0e 	.word	0xb5ddea0e
 801eb48:	388ab355 	.word	0x388ab355
 801eb4c:	bb360b61 	.word	0xbb360b61
 801eb50:	3e2aaaab 	.word	0x3e2aaaab
 801eb54:	080227a4 	.word	0x080227a4
 801eb58:	3fb8aa3b 	.word	0x3fb8aa3b
 801eb5c:	3f317180 	.word	0x3f317180
 801eb60:	3717f7d1 	.word	0x3717f7d1
 801eb64:	7149f2ca 	.word	0x7149f2ca
 801eb68:	0d800000 	.word	0x0d800000

0801eb6c <__ieee754_logf>:
 801eb6c:	ee10 3a10 	vmov	r3, s0
 801eb70:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801eb74:	d106      	bne.n	801eb84 <__ieee754_logf+0x18>
 801eb76:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 801ed10 <__ieee754_logf+0x1a4>
 801eb7a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 801ed14 <__ieee754_logf+0x1a8>
 801eb7e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801eb82:	4770      	bx	lr
 801eb84:	2b00      	cmp	r3, #0
 801eb86:	461a      	mov	r2, r3
 801eb88:	da02      	bge.n	801eb90 <__ieee754_logf+0x24>
 801eb8a:	ee30 7a40 	vsub.f32	s14, s0, s0
 801eb8e:	e7f4      	b.n	801eb7a <__ieee754_logf+0xe>
 801eb90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801eb94:	db02      	blt.n	801eb9c <__ieee754_logf+0x30>
 801eb96:	ee30 0a00 	vadd.f32	s0, s0, s0
 801eb9a:	4770      	bx	lr
 801eb9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801eba0:	bfb8      	it	lt
 801eba2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 801ed18 <__ieee754_logf+0x1ac>
 801eba6:	485d      	ldr	r0, [pc, #372]	@ (801ed1c <__ieee754_logf+0x1b0>)
 801eba8:	bfbe      	ittt	lt
 801ebaa:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801ebae:	f06f 0118 	mvnlt.w	r1, #24
 801ebb2:	ee17 2a90 	vmovlt	r2, s15
 801ebb6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801ebba:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801ebbe:	4410      	add	r0, r2
 801ebc0:	bfa8      	it	ge
 801ebc2:	2100      	movge	r1, #0
 801ebc4:	3b7f      	subs	r3, #127	@ 0x7f
 801ebc6:	440b      	add	r3, r1
 801ebc8:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 801ebcc:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 801ebd0:	4311      	orrs	r1, r2
 801ebd2:	ee00 1a10 	vmov	s0, r1
 801ebd6:	4952      	ldr	r1, [pc, #328]	@ (801ed20 <__ieee754_logf+0x1b4>)
 801ebd8:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801ebdc:	f102 000f 	add.w	r0, r2, #15
 801ebe0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ebe4:	4001      	ands	r1, r0
 801ebe6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ebea:	bb89      	cbnz	r1, 801ec50 <__ieee754_logf+0xe4>
 801ebec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801ebf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ebf4:	d10f      	bne.n	801ec16 <__ieee754_logf+0xaa>
 801ebf6:	2b00      	cmp	r3, #0
 801ebf8:	f000 8087 	beq.w	801ed0a <__ieee754_logf+0x19e>
 801ebfc:	ee07 3a90 	vmov	s15, r3
 801ec00:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 801ed24 <__ieee754_logf+0x1b8>
 801ec04:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801ed28 <__ieee754_logf+0x1bc>
 801ec08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec0c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ec10:	eea7 0a87 	vfma.f32	s0, s15, s14
 801ec14:	4770      	bx	lr
 801ec16:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801ed2c <__ieee754_logf+0x1c0>
 801ec1a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801ec1e:	eee0 7a66 	vfms.f32	s15, s0, s13
 801ec22:	ee20 7a00 	vmul.f32	s14, s0, s0
 801ec26:	ee27 7a27 	vmul.f32	s14, s14, s15
 801ec2a:	b913      	cbnz	r3, 801ec32 <__ieee754_logf+0xc6>
 801ec2c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ec30:	4770      	bx	lr
 801ec32:	ee07 3a90 	vmov	s15, r3
 801ec36:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801ed24 <__ieee754_logf+0x1b8>
 801ec3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ec3e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ec42:	ee37 0a40 	vsub.f32	s0, s14, s0
 801ec46:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801ed28 <__ieee754_logf+0x1bc>
 801ec4a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801ec4e:	4770      	bx	lr
 801ec50:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801ec54:	ee70 7a27 	vadd.f32	s15, s0, s15
 801ec58:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801ed30 <__ieee754_logf+0x1c4>
 801ec5c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 801ed34 <__ieee754_logf+0x1c8>
 801ec60:	4935      	ldr	r1, [pc, #212]	@ (801ed38 <__ieee754_logf+0x1cc>)
 801ec62:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801ec66:	4411      	add	r1, r2
 801ec68:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 801ec6c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 801ec70:	430a      	orrs	r2, r1
 801ec72:	2a00      	cmp	r2, #0
 801ec74:	ee07 3a90 	vmov	s15, r3
 801ec78:	ee26 5a06 	vmul.f32	s10, s12, s12
 801ec7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801ec80:	ee25 7a05 	vmul.f32	s14, s10, s10
 801ec84:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801ed3c <__ieee754_logf+0x1d0>
 801ec88:	eee7 7a25 	vfma.f32	s15, s14, s11
 801ec8c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 801ed40 <__ieee754_logf+0x1d4>
 801ec90:	eee7 5a87 	vfma.f32	s11, s15, s14
 801ec94:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 801ed44 <__ieee754_logf+0x1d8>
 801ec98:	eee7 7a24 	vfma.f32	s15, s14, s9
 801ec9c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 801ed48 <__ieee754_logf+0x1dc>
 801eca0:	eee7 4a87 	vfma.f32	s9, s15, s14
 801eca4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801ed4c <__ieee754_logf+0x1e0>
 801eca8:	eee4 7a87 	vfma.f32	s15, s9, s14
 801ecac:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ecb0:	eee5 7a87 	vfma.f32	s15, s11, s14
 801ecb4:	dd1a      	ble.n	801ecec <__ieee754_logf+0x180>
 801ecb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801ecba:	ee20 7a07 	vmul.f32	s14, s0, s14
 801ecbe:	ee27 7a00 	vmul.f32	s14, s14, s0
 801ecc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ecc6:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ecca:	b913      	cbnz	r3, 801ecd2 <__ieee754_logf+0x166>
 801eccc:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ecd0:	e7ac      	b.n	801ec2c <__ieee754_logf+0xc0>
 801ecd2:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 801ed24 <__ieee754_logf+0x1b8>
 801ecd6:	eee6 7a86 	vfma.f32	s15, s13, s12
 801ecda:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ecde:	ee37 0a40 	vsub.f32	s0, s14, s0
 801ece2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801ed28 <__ieee754_logf+0x1bc>
 801ece6:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801ecea:	4770      	bx	lr
 801ecec:	ee70 7a67 	vsub.f32	s15, s0, s15
 801ecf0:	ee67 7a86 	vmul.f32	s15, s15, s12
 801ecf4:	b913      	cbnz	r3, 801ecfc <__ieee754_logf+0x190>
 801ecf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801ecfa:	4770      	bx	lr
 801ecfc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801ed24 <__ieee754_logf+0x1b8>
 801ed00:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801ed04:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ed08:	e7eb      	b.n	801ece2 <__ieee754_logf+0x176>
 801ed0a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801ed14 <__ieee754_logf+0x1a8>
 801ed0e:	4770      	bx	lr
 801ed10:	cc000000 	.word	0xcc000000
 801ed14:	00000000 	.word	0x00000000
 801ed18:	4c000000 	.word	0x4c000000
 801ed1c:	004afb20 	.word	0x004afb20
 801ed20:	007ffff0 	.word	0x007ffff0
 801ed24:	3717f7d1 	.word	0x3717f7d1
 801ed28:	3f317180 	.word	0x3f317180
 801ed2c:	3eaaaaab 	.word	0x3eaaaaab
 801ed30:	3e1cd04f 	.word	0x3e1cd04f
 801ed34:	3e178897 	.word	0x3e178897
 801ed38:	ffcf5c30 	.word	0xffcf5c30
 801ed3c:	3e638e29 	.word	0x3e638e29
 801ed40:	3ecccccd 	.word	0x3ecccccd
 801ed44:	3e3a3325 	.word	0x3e3a3325
 801ed48:	3e924925 	.word	0x3e924925
 801ed4c:	3f2aaaab 	.word	0x3f2aaaab

0801ed50 <with_errnof>:
 801ed50:	b510      	push	{r4, lr}
 801ed52:	ed2d 8b02 	vpush	{d8}
 801ed56:	eeb0 8a40 	vmov.f32	s16, s0
 801ed5a:	4604      	mov	r4, r0
 801ed5c:	f7fc fc60 	bl	801b620 <__errno>
 801ed60:	eeb0 0a48 	vmov.f32	s0, s16
 801ed64:	ecbd 8b02 	vpop	{d8}
 801ed68:	6004      	str	r4, [r0, #0]
 801ed6a:	bd10      	pop	{r4, pc}

0801ed6c <xflowf>:
 801ed6c:	b130      	cbz	r0, 801ed7c <xflowf+0x10>
 801ed6e:	eef1 7a40 	vneg.f32	s15, s0
 801ed72:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ed76:	2022      	movs	r0, #34	@ 0x22
 801ed78:	f7ff bfea 	b.w	801ed50 <with_errnof>
 801ed7c:	eef0 7a40 	vmov.f32	s15, s0
 801ed80:	e7f7      	b.n	801ed72 <xflowf+0x6>
	...

0801ed84 <__math_uflowf>:
 801ed84:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ed8c <__math_uflowf+0x8>
 801ed88:	f7ff bff0 	b.w	801ed6c <xflowf>
 801ed8c:	10000000 	.word	0x10000000

0801ed90 <__math_oflowf>:
 801ed90:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ed98 <__math_oflowf+0x8>
 801ed94:	f7ff bfea 	b.w	801ed6c <xflowf>
 801ed98:	70000000 	.word	0x70000000
 801ed9c:	00000000 	.word	0x00000000

0801eda0 <__kernel_rem_pio2>:
 801eda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eda4:	ed2d 8b02 	vpush	{d8}
 801eda8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801edac:	f112 0f14 	cmn.w	r2, #20
 801edb0:	9306      	str	r3, [sp, #24]
 801edb2:	9104      	str	r1, [sp, #16]
 801edb4:	4bbe      	ldr	r3, [pc, #760]	@ (801f0b0 <__kernel_rem_pio2+0x310>)
 801edb6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801edb8:	9008      	str	r0, [sp, #32]
 801edba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801edbe:	9300      	str	r3, [sp, #0]
 801edc0:	9b06      	ldr	r3, [sp, #24]
 801edc2:	f103 33ff 	add.w	r3, r3, #4294967295
 801edc6:	bfa8      	it	ge
 801edc8:	1ed4      	subge	r4, r2, #3
 801edca:	9305      	str	r3, [sp, #20]
 801edcc:	bfb2      	itee	lt
 801edce:	2400      	movlt	r4, #0
 801edd0:	2318      	movge	r3, #24
 801edd2:	fb94 f4f3 	sdivge	r4, r4, r3
 801edd6:	f06f 0317 	mvn.w	r3, #23
 801edda:	fb04 3303 	mla	r3, r4, r3, r3
 801edde:	eb03 0b02 	add.w	fp, r3, r2
 801ede2:	9b00      	ldr	r3, [sp, #0]
 801ede4:	9a05      	ldr	r2, [sp, #20]
 801ede6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801f0a0 <__kernel_rem_pio2+0x300>
 801edea:	eb03 0802 	add.w	r8, r3, r2
 801edee:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801edf0:	1aa7      	subs	r7, r4, r2
 801edf2:	ae20      	add	r6, sp, #128	@ 0x80
 801edf4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801edf8:	2500      	movs	r5, #0
 801edfa:	4545      	cmp	r5, r8
 801edfc:	dd13      	ble.n	801ee26 <__kernel_rem_pio2+0x86>
 801edfe:	9b06      	ldr	r3, [sp, #24]
 801ee00:	aa20      	add	r2, sp, #128	@ 0x80
 801ee02:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ee06:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801ee0a:	f04f 0800 	mov.w	r8, #0
 801ee0e:	9b00      	ldr	r3, [sp, #0]
 801ee10:	4598      	cmp	r8, r3
 801ee12:	dc31      	bgt.n	801ee78 <__kernel_rem_pio2+0xd8>
 801ee14:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801f0a0 <__kernel_rem_pio2+0x300>
 801ee18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ee1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ee20:	462f      	mov	r7, r5
 801ee22:	2600      	movs	r6, #0
 801ee24:	e01b      	b.n	801ee5e <__kernel_rem_pio2+0xbe>
 801ee26:	42ef      	cmn	r7, r5
 801ee28:	d407      	bmi.n	801ee3a <__kernel_rem_pio2+0x9a>
 801ee2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ee2e:	f7e1 fb51 	bl	80004d4 <__aeabi_i2d>
 801ee32:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ee36:	3501      	adds	r5, #1
 801ee38:	e7df      	b.n	801edfa <__kernel_rem_pio2+0x5a>
 801ee3a:	ec51 0b18 	vmov	r0, r1, d8
 801ee3e:	e7f8      	b.n	801ee32 <__kernel_rem_pio2+0x92>
 801ee40:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ee44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ee48:	f7e1 fbae 	bl	80005a8 <__aeabi_dmul>
 801ee4c:	4602      	mov	r2, r0
 801ee4e:	460b      	mov	r3, r1
 801ee50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ee54:	f7e1 f9f2 	bl	800023c <__adddf3>
 801ee58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee5c:	3601      	adds	r6, #1
 801ee5e:	9b05      	ldr	r3, [sp, #20]
 801ee60:	429e      	cmp	r6, r3
 801ee62:	f1a7 0708 	sub.w	r7, r7, #8
 801ee66:	ddeb      	ble.n	801ee40 <__kernel_rem_pio2+0xa0>
 801ee68:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee6c:	f108 0801 	add.w	r8, r8, #1
 801ee70:	ecaa 7b02 	vstmia	sl!, {d7}
 801ee74:	3508      	adds	r5, #8
 801ee76:	e7ca      	b.n	801ee0e <__kernel_rem_pio2+0x6e>
 801ee78:	9b00      	ldr	r3, [sp, #0]
 801ee7a:	f8dd 8000 	ldr.w	r8, [sp]
 801ee7e:	aa0c      	add	r2, sp, #48	@ 0x30
 801ee80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ee84:	930a      	str	r3, [sp, #40]	@ 0x28
 801ee86:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ee88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ee8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee8e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801ee92:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ee94:	ab98      	add	r3, sp, #608	@ 0x260
 801ee96:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ee9a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801ee9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801eea2:	ac0c      	add	r4, sp, #48	@ 0x30
 801eea4:	ab70      	add	r3, sp, #448	@ 0x1c0
 801eea6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801eeaa:	46a1      	mov	r9, r4
 801eeac:	46c2      	mov	sl, r8
 801eeae:	f1ba 0f00 	cmp.w	sl, #0
 801eeb2:	f1a5 0508 	sub.w	r5, r5, #8
 801eeb6:	dc77      	bgt.n	801efa8 <__kernel_rem_pio2+0x208>
 801eeb8:	4658      	mov	r0, fp
 801eeba:	ed9d 0b02 	vldr	d0, [sp, #8]
 801eebe:	f000 fd23 	bl	801f908 <scalbn>
 801eec2:	ec57 6b10 	vmov	r6, r7, d0
 801eec6:	2200      	movs	r2, #0
 801eec8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801eecc:	4630      	mov	r0, r6
 801eece:	4639      	mov	r1, r7
 801eed0:	f7e1 fb6a 	bl	80005a8 <__aeabi_dmul>
 801eed4:	ec41 0b10 	vmov	d0, r0, r1
 801eed8:	f7ff f942 	bl	801e160 <floor>
 801eedc:	4b75      	ldr	r3, [pc, #468]	@ (801f0b4 <__kernel_rem_pio2+0x314>)
 801eede:	ec51 0b10 	vmov	r0, r1, d0
 801eee2:	2200      	movs	r2, #0
 801eee4:	f7e1 fb60 	bl	80005a8 <__aeabi_dmul>
 801eee8:	4602      	mov	r2, r0
 801eeea:	460b      	mov	r3, r1
 801eeec:	4630      	mov	r0, r6
 801eeee:	4639      	mov	r1, r7
 801eef0:	f7e1 f9a2 	bl	8000238 <__aeabi_dsub>
 801eef4:	460f      	mov	r7, r1
 801eef6:	4606      	mov	r6, r0
 801eef8:	f7e1 fe06 	bl	8000b08 <__aeabi_d2iz>
 801eefc:	9002      	str	r0, [sp, #8]
 801eefe:	f7e1 fae9 	bl	80004d4 <__aeabi_i2d>
 801ef02:	4602      	mov	r2, r0
 801ef04:	460b      	mov	r3, r1
 801ef06:	4630      	mov	r0, r6
 801ef08:	4639      	mov	r1, r7
 801ef0a:	f7e1 f995 	bl	8000238 <__aeabi_dsub>
 801ef0e:	f1bb 0f00 	cmp.w	fp, #0
 801ef12:	4606      	mov	r6, r0
 801ef14:	460f      	mov	r7, r1
 801ef16:	dd6c      	ble.n	801eff2 <__kernel_rem_pio2+0x252>
 801ef18:	f108 31ff 	add.w	r1, r8, #4294967295
 801ef1c:	ab0c      	add	r3, sp, #48	@ 0x30
 801ef1e:	9d02      	ldr	r5, [sp, #8]
 801ef20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ef24:	f1cb 0018 	rsb	r0, fp, #24
 801ef28:	fa43 f200 	asr.w	r2, r3, r0
 801ef2c:	4415      	add	r5, r2
 801ef2e:	4082      	lsls	r2, r0
 801ef30:	1a9b      	subs	r3, r3, r2
 801ef32:	aa0c      	add	r2, sp, #48	@ 0x30
 801ef34:	9502      	str	r5, [sp, #8]
 801ef36:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ef3a:	f1cb 0217 	rsb	r2, fp, #23
 801ef3e:	fa43 f902 	asr.w	r9, r3, r2
 801ef42:	f1b9 0f00 	cmp.w	r9, #0
 801ef46:	dd64      	ble.n	801f012 <__kernel_rem_pio2+0x272>
 801ef48:	9b02      	ldr	r3, [sp, #8]
 801ef4a:	2200      	movs	r2, #0
 801ef4c:	3301      	adds	r3, #1
 801ef4e:	9302      	str	r3, [sp, #8]
 801ef50:	4615      	mov	r5, r2
 801ef52:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801ef56:	4590      	cmp	r8, r2
 801ef58:	f300 80b8 	bgt.w	801f0cc <__kernel_rem_pio2+0x32c>
 801ef5c:	f1bb 0f00 	cmp.w	fp, #0
 801ef60:	dd07      	ble.n	801ef72 <__kernel_rem_pio2+0x1d2>
 801ef62:	f1bb 0f01 	cmp.w	fp, #1
 801ef66:	f000 80bf 	beq.w	801f0e8 <__kernel_rem_pio2+0x348>
 801ef6a:	f1bb 0f02 	cmp.w	fp, #2
 801ef6e:	f000 80c6 	beq.w	801f0fe <__kernel_rem_pio2+0x35e>
 801ef72:	f1b9 0f02 	cmp.w	r9, #2
 801ef76:	d14c      	bne.n	801f012 <__kernel_rem_pio2+0x272>
 801ef78:	4632      	mov	r2, r6
 801ef7a:	463b      	mov	r3, r7
 801ef7c:	494e      	ldr	r1, [pc, #312]	@ (801f0b8 <__kernel_rem_pio2+0x318>)
 801ef7e:	2000      	movs	r0, #0
 801ef80:	f7e1 f95a 	bl	8000238 <__aeabi_dsub>
 801ef84:	4606      	mov	r6, r0
 801ef86:	460f      	mov	r7, r1
 801ef88:	2d00      	cmp	r5, #0
 801ef8a:	d042      	beq.n	801f012 <__kernel_rem_pio2+0x272>
 801ef8c:	4658      	mov	r0, fp
 801ef8e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801f0a8 <__kernel_rem_pio2+0x308>
 801ef92:	f000 fcb9 	bl	801f908 <scalbn>
 801ef96:	4630      	mov	r0, r6
 801ef98:	4639      	mov	r1, r7
 801ef9a:	ec53 2b10 	vmov	r2, r3, d0
 801ef9e:	f7e1 f94b 	bl	8000238 <__aeabi_dsub>
 801efa2:	4606      	mov	r6, r0
 801efa4:	460f      	mov	r7, r1
 801efa6:	e034      	b.n	801f012 <__kernel_rem_pio2+0x272>
 801efa8:	4b44      	ldr	r3, [pc, #272]	@ (801f0bc <__kernel_rem_pio2+0x31c>)
 801efaa:	2200      	movs	r2, #0
 801efac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efb0:	f7e1 fafa 	bl	80005a8 <__aeabi_dmul>
 801efb4:	f7e1 fda8 	bl	8000b08 <__aeabi_d2iz>
 801efb8:	f7e1 fa8c 	bl	80004d4 <__aeabi_i2d>
 801efbc:	4b40      	ldr	r3, [pc, #256]	@ (801f0c0 <__kernel_rem_pio2+0x320>)
 801efbe:	2200      	movs	r2, #0
 801efc0:	4606      	mov	r6, r0
 801efc2:	460f      	mov	r7, r1
 801efc4:	f7e1 faf0 	bl	80005a8 <__aeabi_dmul>
 801efc8:	4602      	mov	r2, r0
 801efca:	460b      	mov	r3, r1
 801efcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801efd0:	f7e1 f932 	bl	8000238 <__aeabi_dsub>
 801efd4:	f7e1 fd98 	bl	8000b08 <__aeabi_d2iz>
 801efd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801efdc:	f849 0b04 	str.w	r0, [r9], #4
 801efe0:	4639      	mov	r1, r7
 801efe2:	4630      	mov	r0, r6
 801efe4:	f7e1 f92a 	bl	800023c <__adddf3>
 801efe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801efec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eff0:	e75d      	b.n	801eeae <__kernel_rem_pio2+0x10e>
 801eff2:	d107      	bne.n	801f004 <__kernel_rem_pio2+0x264>
 801eff4:	f108 33ff 	add.w	r3, r8, #4294967295
 801eff8:	aa0c      	add	r2, sp, #48	@ 0x30
 801effa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801effe:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801f002:	e79e      	b.n	801ef42 <__kernel_rem_pio2+0x1a2>
 801f004:	4b2f      	ldr	r3, [pc, #188]	@ (801f0c4 <__kernel_rem_pio2+0x324>)
 801f006:	2200      	movs	r2, #0
 801f008:	f7e1 fd54 	bl	8000ab4 <__aeabi_dcmpge>
 801f00c:	2800      	cmp	r0, #0
 801f00e:	d143      	bne.n	801f098 <__kernel_rem_pio2+0x2f8>
 801f010:	4681      	mov	r9, r0
 801f012:	2200      	movs	r2, #0
 801f014:	2300      	movs	r3, #0
 801f016:	4630      	mov	r0, r6
 801f018:	4639      	mov	r1, r7
 801f01a:	f7e1 fd2d 	bl	8000a78 <__aeabi_dcmpeq>
 801f01e:	2800      	cmp	r0, #0
 801f020:	f000 80bf 	beq.w	801f1a2 <__kernel_rem_pio2+0x402>
 801f024:	f108 33ff 	add.w	r3, r8, #4294967295
 801f028:	2200      	movs	r2, #0
 801f02a:	9900      	ldr	r1, [sp, #0]
 801f02c:	428b      	cmp	r3, r1
 801f02e:	da6e      	bge.n	801f10e <__kernel_rem_pio2+0x36e>
 801f030:	2a00      	cmp	r2, #0
 801f032:	f000 8089 	beq.w	801f148 <__kernel_rem_pio2+0x3a8>
 801f036:	f108 38ff 	add.w	r8, r8, #4294967295
 801f03a:	ab0c      	add	r3, sp, #48	@ 0x30
 801f03c:	f1ab 0b18 	sub.w	fp, fp, #24
 801f040:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801f044:	2b00      	cmp	r3, #0
 801f046:	d0f6      	beq.n	801f036 <__kernel_rem_pio2+0x296>
 801f048:	4658      	mov	r0, fp
 801f04a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f0a8 <__kernel_rem_pio2+0x308>
 801f04e:	f000 fc5b 	bl	801f908 <scalbn>
 801f052:	f108 0301 	add.w	r3, r8, #1
 801f056:	00da      	lsls	r2, r3, #3
 801f058:	9205      	str	r2, [sp, #20]
 801f05a:	ec55 4b10 	vmov	r4, r5, d0
 801f05e:	aa70      	add	r2, sp, #448	@ 0x1c0
 801f060:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801f0bc <__kernel_rem_pio2+0x31c>
 801f064:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801f068:	4646      	mov	r6, r8
 801f06a:	f04f 0a00 	mov.w	sl, #0
 801f06e:	2e00      	cmp	r6, #0
 801f070:	f280 80cf 	bge.w	801f212 <__kernel_rem_pio2+0x472>
 801f074:	4644      	mov	r4, r8
 801f076:	2c00      	cmp	r4, #0
 801f078:	f2c0 80fd 	blt.w	801f276 <__kernel_rem_pio2+0x4d6>
 801f07c:	4b12      	ldr	r3, [pc, #72]	@ (801f0c8 <__kernel_rem_pio2+0x328>)
 801f07e:	461f      	mov	r7, r3
 801f080:	ab70      	add	r3, sp, #448	@ 0x1c0
 801f082:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f086:	9306      	str	r3, [sp, #24]
 801f088:	f04f 0a00 	mov.w	sl, #0
 801f08c:	f04f 0b00 	mov.w	fp, #0
 801f090:	2600      	movs	r6, #0
 801f092:	eba8 0504 	sub.w	r5, r8, r4
 801f096:	e0e2      	b.n	801f25e <__kernel_rem_pio2+0x4be>
 801f098:	f04f 0902 	mov.w	r9, #2
 801f09c:	e754      	b.n	801ef48 <__kernel_rem_pio2+0x1a8>
 801f09e:	bf00      	nop
	...
 801f0ac:	3ff00000 	.word	0x3ff00000
 801f0b0:	080227f0 	.word	0x080227f0
 801f0b4:	40200000 	.word	0x40200000
 801f0b8:	3ff00000 	.word	0x3ff00000
 801f0bc:	3e700000 	.word	0x3e700000
 801f0c0:	41700000 	.word	0x41700000
 801f0c4:	3fe00000 	.word	0x3fe00000
 801f0c8:	080227b0 	.word	0x080227b0
 801f0cc:	f854 3b04 	ldr.w	r3, [r4], #4
 801f0d0:	b945      	cbnz	r5, 801f0e4 <__kernel_rem_pio2+0x344>
 801f0d2:	b123      	cbz	r3, 801f0de <__kernel_rem_pio2+0x33e>
 801f0d4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801f0d8:	f844 3c04 	str.w	r3, [r4, #-4]
 801f0dc:	2301      	movs	r3, #1
 801f0de:	3201      	adds	r2, #1
 801f0e0:	461d      	mov	r5, r3
 801f0e2:	e738      	b.n	801ef56 <__kernel_rem_pio2+0x1b6>
 801f0e4:	1acb      	subs	r3, r1, r3
 801f0e6:	e7f7      	b.n	801f0d8 <__kernel_rem_pio2+0x338>
 801f0e8:	f108 32ff 	add.w	r2, r8, #4294967295
 801f0ec:	ab0c      	add	r3, sp, #48	@ 0x30
 801f0ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f0f2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f0f6:	a90c      	add	r1, sp, #48	@ 0x30
 801f0f8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f0fc:	e739      	b.n	801ef72 <__kernel_rem_pio2+0x1d2>
 801f0fe:	f108 32ff 	add.w	r2, r8, #4294967295
 801f102:	ab0c      	add	r3, sp, #48	@ 0x30
 801f104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f108:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f10c:	e7f3      	b.n	801f0f6 <__kernel_rem_pio2+0x356>
 801f10e:	a90c      	add	r1, sp, #48	@ 0x30
 801f110:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f114:	3b01      	subs	r3, #1
 801f116:	430a      	orrs	r2, r1
 801f118:	e787      	b.n	801f02a <__kernel_rem_pio2+0x28a>
 801f11a:	3401      	adds	r4, #1
 801f11c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f120:	2a00      	cmp	r2, #0
 801f122:	d0fa      	beq.n	801f11a <__kernel_rem_pio2+0x37a>
 801f124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f126:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f12a:	eb0d 0503 	add.w	r5, sp, r3
 801f12e:	9b06      	ldr	r3, [sp, #24]
 801f130:	aa20      	add	r2, sp, #128	@ 0x80
 801f132:	4443      	add	r3, r8
 801f134:	f108 0701 	add.w	r7, r8, #1
 801f138:	3d98      	subs	r5, #152	@ 0x98
 801f13a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801f13e:	4444      	add	r4, r8
 801f140:	42bc      	cmp	r4, r7
 801f142:	da04      	bge.n	801f14e <__kernel_rem_pio2+0x3ae>
 801f144:	46a0      	mov	r8, r4
 801f146:	e6a2      	b.n	801ee8e <__kernel_rem_pio2+0xee>
 801f148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f14a:	2401      	movs	r4, #1
 801f14c:	e7e6      	b.n	801f11c <__kernel_rem_pio2+0x37c>
 801f14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f150:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801f154:	f7e1 f9be 	bl	80004d4 <__aeabi_i2d>
 801f158:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801f420 <__kernel_rem_pio2+0x680>
 801f15c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f160:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f164:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f168:	46b2      	mov	sl, r6
 801f16a:	f04f 0800 	mov.w	r8, #0
 801f16e:	9b05      	ldr	r3, [sp, #20]
 801f170:	4598      	cmp	r8, r3
 801f172:	dd05      	ble.n	801f180 <__kernel_rem_pio2+0x3e0>
 801f174:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f178:	3701      	adds	r7, #1
 801f17a:	eca5 7b02 	vstmia	r5!, {d7}
 801f17e:	e7df      	b.n	801f140 <__kernel_rem_pio2+0x3a0>
 801f180:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801f184:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f188:	f7e1 fa0e 	bl	80005a8 <__aeabi_dmul>
 801f18c:	4602      	mov	r2, r0
 801f18e:	460b      	mov	r3, r1
 801f190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f194:	f7e1 f852 	bl	800023c <__adddf3>
 801f198:	f108 0801 	add.w	r8, r8, #1
 801f19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f1a0:	e7e5      	b.n	801f16e <__kernel_rem_pio2+0x3ce>
 801f1a2:	f1cb 0000 	rsb	r0, fp, #0
 801f1a6:	ec47 6b10 	vmov	d0, r6, r7
 801f1aa:	f000 fbad 	bl	801f908 <scalbn>
 801f1ae:	ec55 4b10 	vmov	r4, r5, d0
 801f1b2:	4b9d      	ldr	r3, [pc, #628]	@ (801f428 <__kernel_rem_pio2+0x688>)
 801f1b4:	2200      	movs	r2, #0
 801f1b6:	4620      	mov	r0, r4
 801f1b8:	4629      	mov	r1, r5
 801f1ba:	f7e1 fc7b 	bl	8000ab4 <__aeabi_dcmpge>
 801f1be:	b300      	cbz	r0, 801f202 <__kernel_rem_pio2+0x462>
 801f1c0:	4b9a      	ldr	r3, [pc, #616]	@ (801f42c <__kernel_rem_pio2+0x68c>)
 801f1c2:	2200      	movs	r2, #0
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	4629      	mov	r1, r5
 801f1c8:	f7e1 f9ee 	bl	80005a8 <__aeabi_dmul>
 801f1cc:	f7e1 fc9c 	bl	8000b08 <__aeabi_d2iz>
 801f1d0:	4606      	mov	r6, r0
 801f1d2:	f7e1 f97f 	bl	80004d4 <__aeabi_i2d>
 801f1d6:	4b94      	ldr	r3, [pc, #592]	@ (801f428 <__kernel_rem_pio2+0x688>)
 801f1d8:	2200      	movs	r2, #0
 801f1da:	f7e1 f9e5 	bl	80005a8 <__aeabi_dmul>
 801f1de:	460b      	mov	r3, r1
 801f1e0:	4602      	mov	r2, r0
 801f1e2:	4629      	mov	r1, r5
 801f1e4:	4620      	mov	r0, r4
 801f1e6:	f7e1 f827 	bl	8000238 <__aeabi_dsub>
 801f1ea:	f7e1 fc8d 	bl	8000b08 <__aeabi_d2iz>
 801f1ee:	ab0c      	add	r3, sp, #48	@ 0x30
 801f1f0:	f10b 0b18 	add.w	fp, fp, #24
 801f1f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f1f8:	f108 0801 	add.w	r8, r8, #1
 801f1fc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801f200:	e722      	b.n	801f048 <__kernel_rem_pio2+0x2a8>
 801f202:	4620      	mov	r0, r4
 801f204:	4629      	mov	r1, r5
 801f206:	f7e1 fc7f 	bl	8000b08 <__aeabi_d2iz>
 801f20a:	ab0c      	add	r3, sp, #48	@ 0x30
 801f20c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f210:	e71a      	b.n	801f048 <__kernel_rem_pio2+0x2a8>
 801f212:	ab0c      	add	r3, sp, #48	@ 0x30
 801f214:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f218:	f7e1 f95c 	bl	80004d4 <__aeabi_i2d>
 801f21c:	4622      	mov	r2, r4
 801f21e:	462b      	mov	r3, r5
 801f220:	f7e1 f9c2 	bl	80005a8 <__aeabi_dmul>
 801f224:	4652      	mov	r2, sl
 801f226:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801f22a:	465b      	mov	r3, fp
 801f22c:	4620      	mov	r0, r4
 801f22e:	4629      	mov	r1, r5
 801f230:	f7e1 f9ba 	bl	80005a8 <__aeabi_dmul>
 801f234:	3e01      	subs	r6, #1
 801f236:	4604      	mov	r4, r0
 801f238:	460d      	mov	r5, r1
 801f23a:	e718      	b.n	801f06e <__kernel_rem_pio2+0x2ce>
 801f23c:	9906      	ldr	r1, [sp, #24]
 801f23e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801f242:	9106      	str	r1, [sp, #24]
 801f244:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801f248:	f7e1 f9ae 	bl	80005a8 <__aeabi_dmul>
 801f24c:	4602      	mov	r2, r0
 801f24e:	460b      	mov	r3, r1
 801f250:	4650      	mov	r0, sl
 801f252:	4659      	mov	r1, fp
 801f254:	f7e0 fff2 	bl	800023c <__adddf3>
 801f258:	3601      	adds	r6, #1
 801f25a:	4682      	mov	sl, r0
 801f25c:	468b      	mov	fp, r1
 801f25e:	9b00      	ldr	r3, [sp, #0]
 801f260:	429e      	cmp	r6, r3
 801f262:	dc01      	bgt.n	801f268 <__kernel_rem_pio2+0x4c8>
 801f264:	42b5      	cmp	r5, r6
 801f266:	dae9      	bge.n	801f23c <__kernel_rem_pio2+0x49c>
 801f268:	ab48      	add	r3, sp, #288	@ 0x120
 801f26a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801f26e:	e9c5 ab00 	strd	sl, fp, [r5]
 801f272:	3c01      	subs	r4, #1
 801f274:	e6ff      	b.n	801f076 <__kernel_rem_pio2+0x2d6>
 801f276:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f278:	2b02      	cmp	r3, #2
 801f27a:	dc0b      	bgt.n	801f294 <__kernel_rem_pio2+0x4f4>
 801f27c:	2b00      	cmp	r3, #0
 801f27e:	dc39      	bgt.n	801f2f4 <__kernel_rem_pio2+0x554>
 801f280:	d05d      	beq.n	801f33e <__kernel_rem_pio2+0x59e>
 801f282:	9b02      	ldr	r3, [sp, #8]
 801f284:	f003 0007 	and.w	r0, r3, #7
 801f288:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801f28c:	ecbd 8b02 	vpop	{d8}
 801f290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f294:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f296:	2b03      	cmp	r3, #3
 801f298:	d1f3      	bne.n	801f282 <__kernel_rem_pio2+0x4e2>
 801f29a:	9b05      	ldr	r3, [sp, #20]
 801f29c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f2a0:	eb0d 0403 	add.w	r4, sp, r3
 801f2a4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801f2a8:	4625      	mov	r5, r4
 801f2aa:	46c2      	mov	sl, r8
 801f2ac:	f1ba 0f00 	cmp.w	sl, #0
 801f2b0:	f1a5 0508 	sub.w	r5, r5, #8
 801f2b4:	dc6b      	bgt.n	801f38e <__kernel_rem_pio2+0x5ee>
 801f2b6:	4645      	mov	r5, r8
 801f2b8:	2d01      	cmp	r5, #1
 801f2ba:	f1a4 0408 	sub.w	r4, r4, #8
 801f2be:	f300 8087 	bgt.w	801f3d0 <__kernel_rem_pio2+0x630>
 801f2c2:	9c05      	ldr	r4, [sp, #20]
 801f2c4:	ab48      	add	r3, sp, #288	@ 0x120
 801f2c6:	441c      	add	r4, r3
 801f2c8:	2000      	movs	r0, #0
 801f2ca:	2100      	movs	r1, #0
 801f2cc:	f1b8 0f01 	cmp.w	r8, #1
 801f2d0:	f300 809c 	bgt.w	801f40c <__kernel_rem_pio2+0x66c>
 801f2d4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801f2d8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801f2dc:	f1b9 0f00 	cmp.w	r9, #0
 801f2e0:	f040 80a6 	bne.w	801f430 <__kernel_rem_pio2+0x690>
 801f2e4:	9b04      	ldr	r3, [sp, #16]
 801f2e6:	e9c3 7800 	strd	r7, r8, [r3]
 801f2ea:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801f2ee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f2f2:	e7c6      	b.n	801f282 <__kernel_rem_pio2+0x4e2>
 801f2f4:	9d05      	ldr	r5, [sp, #20]
 801f2f6:	ab48      	add	r3, sp, #288	@ 0x120
 801f2f8:	441d      	add	r5, r3
 801f2fa:	4644      	mov	r4, r8
 801f2fc:	2000      	movs	r0, #0
 801f2fe:	2100      	movs	r1, #0
 801f300:	2c00      	cmp	r4, #0
 801f302:	da35      	bge.n	801f370 <__kernel_rem_pio2+0x5d0>
 801f304:	f1b9 0f00 	cmp.w	r9, #0
 801f308:	d038      	beq.n	801f37c <__kernel_rem_pio2+0x5dc>
 801f30a:	4602      	mov	r2, r0
 801f30c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f310:	9c04      	ldr	r4, [sp, #16]
 801f312:	e9c4 2300 	strd	r2, r3, [r4]
 801f316:	4602      	mov	r2, r0
 801f318:	460b      	mov	r3, r1
 801f31a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801f31e:	f7e0 ff8b 	bl	8000238 <__aeabi_dsub>
 801f322:	ad4a      	add	r5, sp, #296	@ 0x128
 801f324:	2401      	movs	r4, #1
 801f326:	45a0      	cmp	r8, r4
 801f328:	da2b      	bge.n	801f382 <__kernel_rem_pio2+0x5e2>
 801f32a:	f1b9 0f00 	cmp.w	r9, #0
 801f32e:	d002      	beq.n	801f336 <__kernel_rem_pio2+0x596>
 801f330:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f334:	4619      	mov	r1, r3
 801f336:	9b04      	ldr	r3, [sp, #16]
 801f338:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f33c:	e7a1      	b.n	801f282 <__kernel_rem_pio2+0x4e2>
 801f33e:	9c05      	ldr	r4, [sp, #20]
 801f340:	ab48      	add	r3, sp, #288	@ 0x120
 801f342:	441c      	add	r4, r3
 801f344:	2000      	movs	r0, #0
 801f346:	2100      	movs	r1, #0
 801f348:	f1b8 0f00 	cmp.w	r8, #0
 801f34c:	da09      	bge.n	801f362 <__kernel_rem_pio2+0x5c2>
 801f34e:	f1b9 0f00 	cmp.w	r9, #0
 801f352:	d002      	beq.n	801f35a <__kernel_rem_pio2+0x5ba>
 801f354:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f358:	4619      	mov	r1, r3
 801f35a:	9b04      	ldr	r3, [sp, #16]
 801f35c:	e9c3 0100 	strd	r0, r1, [r3]
 801f360:	e78f      	b.n	801f282 <__kernel_rem_pio2+0x4e2>
 801f362:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f366:	f7e0 ff69 	bl	800023c <__adddf3>
 801f36a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f36e:	e7eb      	b.n	801f348 <__kernel_rem_pio2+0x5a8>
 801f370:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801f374:	f7e0 ff62 	bl	800023c <__adddf3>
 801f378:	3c01      	subs	r4, #1
 801f37a:	e7c1      	b.n	801f300 <__kernel_rem_pio2+0x560>
 801f37c:	4602      	mov	r2, r0
 801f37e:	460b      	mov	r3, r1
 801f380:	e7c6      	b.n	801f310 <__kernel_rem_pio2+0x570>
 801f382:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801f386:	f7e0 ff59 	bl	800023c <__adddf3>
 801f38a:	3401      	adds	r4, #1
 801f38c:	e7cb      	b.n	801f326 <__kernel_rem_pio2+0x586>
 801f38e:	ed95 7b00 	vldr	d7, [r5]
 801f392:	ed8d 7b00 	vstr	d7, [sp]
 801f396:	ed95 7b02 	vldr	d7, [r5, #8]
 801f39a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f39e:	ec53 2b17 	vmov	r2, r3, d7
 801f3a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f3a6:	f7e0 ff49 	bl	800023c <__adddf3>
 801f3aa:	4602      	mov	r2, r0
 801f3ac:	460b      	mov	r3, r1
 801f3ae:	4606      	mov	r6, r0
 801f3b0:	460f      	mov	r7, r1
 801f3b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f3b6:	f7e0 ff3f 	bl	8000238 <__aeabi_dsub>
 801f3ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f3be:	f7e0 ff3d 	bl	800023c <__adddf3>
 801f3c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f3c6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801f3ca:	e9c5 6700 	strd	r6, r7, [r5]
 801f3ce:	e76d      	b.n	801f2ac <__kernel_rem_pio2+0x50c>
 801f3d0:	ed94 7b00 	vldr	d7, [r4]
 801f3d4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801f3d8:	ec51 0b17 	vmov	r0, r1, d7
 801f3dc:	4652      	mov	r2, sl
 801f3de:	465b      	mov	r3, fp
 801f3e0:	ed8d 7b00 	vstr	d7, [sp]
 801f3e4:	f7e0 ff2a 	bl	800023c <__adddf3>
 801f3e8:	4602      	mov	r2, r0
 801f3ea:	460b      	mov	r3, r1
 801f3ec:	4606      	mov	r6, r0
 801f3ee:	460f      	mov	r7, r1
 801f3f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f3f4:	f7e0 ff20 	bl	8000238 <__aeabi_dsub>
 801f3f8:	4652      	mov	r2, sl
 801f3fa:	465b      	mov	r3, fp
 801f3fc:	f7e0 ff1e 	bl	800023c <__adddf3>
 801f400:	3d01      	subs	r5, #1
 801f402:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f406:	e9c4 6700 	strd	r6, r7, [r4]
 801f40a:	e755      	b.n	801f2b8 <__kernel_rem_pio2+0x518>
 801f40c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f410:	f7e0 ff14 	bl	800023c <__adddf3>
 801f414:	f108 38ff 	add.w	r8, r8, #4294967295
 801f418:	e758      	b.n	801f2cc <__kernel_rem_pio2+0x52c>
 801f41a:	bf00      	nop
 801f41c:	f3af 8000 	nop.w
	...
 801f428:	41700000 	.word	0x41700000
 801f42c:	3e700000 	.word	0x3e700000
 801f430:	9b04      	ldr	r3, [sp, #16]
 801f432:	9a04      	ldr	r2, [sp, #16]
 801f434:	601f      	str	r7, [r3, #0]
 801f436:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801f43a:	605c      	str	r4, [r3, #4]
 801f43c:	609d      	str	r5, [r3, #8]
 801f43e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f442:	60d3      	str	r3, [r2, #12]
 801f444:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f448:	6110      	str	r0, [r2, #16]
 801f44a:	6153      	str	r3, [r2, #20]
 801f44c:	e719      	b.n	801f282 <__kernel_rem_pio2+0x4e2>
 801f44e:	bf00      	nop

0801f450 <__ieee754_acos>:
 801f450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f454:	ec55 4b10 	vmov	r4, r5, d0
 801f458:	49b7      	ldr	r1, [pc, #732]	@ (801f738 <__ieee754_acos+0x2e8>)
 801f45a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f45e:	428b      	cmp	r3, r1
 801f460:	d919      	bls.n	801f496 <__ieee754_acos+0x46>
 801f462:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801f466:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801f46a:	4323      	orrs	r3, r4
 801f46c:	d106      	bne.n	801f47c <__ieee754_acos+0x2c>
 801f46e:	2d00      	cmp	r5, #0
 801f470:	f340 8210 	ble.w	801f894 <__ieee754_acos+0x444>
 801f474:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801f6c8 <__ieee754_acos+0x278>
 801f478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f47c:	4622      	mov	r2, r4
 801f47e:	462b      	mov	r3, r5
 801f480:	4620      	mov	r0, r4
 801f482:	4629      	mov	r1, r5
 801f484:	f7e0 fed8 	bl	8000238 <__aeabi_dsub>
 801f488:	4602      	mov	r2, r0
 801f48a:	460b      	mov	r3, r1
 801f48c:	f7e1 f9b6 	bl	80007fc <__aeabi_ddiv>
 801f490:	ec41 0b10 	vmov	d0, r0, r1
 801f494:	e7f0      	b.n	801f478 <__ieee754_acos+0x28>
 801f496:	49a9      	ldr	r1, [pc, #676]	@ (801f73c <__ieee754_acos+0x2ec>)
 801f498:	428b      	cmp	r3, r1
 801f49a:	f200 8085 	bhi.w	801f5a8 <__ieee754_acos+0x158>
 801f49e:	4aa8      	ldr	r2, [pc, #672]	@ (801f740 <__ieee754_acos+0x2f0>)
 801f4a0:	4293      	cmp	r3, r2
 801f4a2:	f240 81fa 	bls.w	801f89a <__ieee754_acos+0x44a>
 801f4a6:	4622      	mov	r2, r4
 801f4a8:	462b      	mov	r3, r5
 801f4aa:	4620      	mov	r0, r4
 801f4ac:	4629      	mov	r1, r5
 801f4ae:	f7e1 f87b 	bl	80005a8 <__aeabi_dmul>
 801f4b2:	a387      	add	r3, pc, #540	@ (adr r3, 801f6d0 <__ieee754_acos+0x280>)
 801f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4b8:	4606      	mov	r6, r0
 801f4ba:	460f      	mov	r7, r1
 801f4bc:	f7e1 f874 	bl	80005a8 <__aeabi_dmul>
 801f4c0:	a385      	add	r3, pc, #532	@ (adr r3, 801f6d8 <__ieee754_acos+0x288>)
 801f4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4c6:	f7e0 feb9 	bl	800023c <__adddf3>
 801f4ca:	4632      	mov	r2, r6
 801f4cc:	463b      	mov	r3, r7
 801f4ce:	f7e1 f86b 	bl	80005a8 <__aeabi_dmul>
 801f4d2:	a383      	add	r3, pc, #524	@ (adr r3, 801f6e0 <__ieee754_acos+0x290>)
 801f4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4d8:	f7e0 feae 	bl	8000238 <__aeabi_dsub>
 801f4dc:	4632      	mov	r2, r6
 801f4de:	463b      	mov	r3, r7
 801f4e0:	f7e1 f862 	bl	80005a8 <__aeabi_dmul>
 801f4e4:	a380      	add	r3, pc, #512	@ (adr r3, 801f6e8 <__ieee754_acos+0x298>)
 801f4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4ea:	f7e0 fea7 	bl	800023c <__adddf3>
 801f4ee:	4632      	mov	r2, r6
 801f4f0:	463b      	mov	r3, r7
 801f4f2:	f7e1 f859 	bl	80005a8 <__aeabi_dmul>
 801f4f6:	a37e      	add	r3, pc, #504	@ (adr r3, 801f6f0 <__ieee754_acos+0x2a0>)
 801f4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f4fc:	f7e0 fe9c 	bl	8000238 <__aeabi_dsub>
 801f500:	4632      	mov	r2, r6
 801f502:	463b      	mov	r3, r7
 801f504:	f7e1 f850 	bl	80005a8 <__aeabi_dmul>
 801f508:	a37b      	add	r3, pc, #492	@ (adr r3, 801f6f8 <__ieee754_acos+0x2a8>)
 801f50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f50e:	f7e0 fe95 	bl	800023c <__adddf3>
 801f512:	4632      	mov	r2, r6
 801f514:	463b      	mov	r3, r7
 801f516:	f7e1 f847 	bl	80005a8 <__aeabi_dmul>
 801f51a:	a379      	add	r3, pc, #484	@ (adr r3, 801f700 <__ieee754_acos+0x2b0>)
 801f51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f520:	4680      	mov	r8, r0
 801f522:	4689      	mov	r9, r1
 801f524:	4630      	mov	r0, r6
 801f526:	4639      	mov	r1, r7
 801f528:	f7e1 f83e 	bl	80005a8 <__aeabi_dmul>
 801f52c:	a376      	add	r3, pc, #472	@ (adr r3, 801f708 <__ieee754_acos+0x2b8>)
 801f52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f532:	f7e0 fe81 	bl	8000238 <__aeabi_dsub>
 801f536:	4632      	mov	r2, r6
 801f538:	463b      	mov	r3, r7
 801f53a:	f7e1 f835 	bl	80005a8 <__aeabi_dmul>
 801f53e:	a374      	add	r3, pc, #464	@ (adr r3, 801f710 <__ieee754_acos+0x2c0>)
 801f540:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f544:	f7e0 fe7a 	bl	800023c <__adddf3>
 801f548:	4632      	mov	r2, r6
 801f54a:	463b      	mov	r3, r7
 801f54c:	f7e1 f82c 	bl	80005a8 <__aeabi_dmul>
 801f550:	a371      	add	r3, pc, #452	@ (adr r3, 801f718 <__ieee754_acos+0x2c8>)
 801f552:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f556:	f7e0 fe6f 	bl	8000238 <__aeabi_dsub>
 801f55a:	4632      	mov	r2, r6
 801f55c:	463b      	mov	r3, r7
 801f55e:	f7e1 f823 	bl	80005a8 <__aeabi_dmul>
 801f562:	4b78      	ldr	r3, [pc, #480]	@ (801f744 <__ieee754_acos+0x2f4>)
 801f564:	2200      	movs	r2, #0
 801f566:	f7e0 fe69 	bl	800023c <__adddf3>
 801f56a:	4602      	mov	r2, r0
 801f56c:	460b      	mov	r3, r1
 801f56e:	4640      	mov	r0, r8
 801f570:	4649      	mov	r1, r9
 801f572:	f7e1 f943 	bl	80007fc <__aeabi_ddiv>
 801f576:	4622      	mov	r2, r4
 801f578:	462b      	mov	r3, r5
 801f57a:	f7e1 f815 	bl	80005a8 <__aeabi_dmul>
 801f57e:	4602      	mov	r2, r0
 801f580:	460b      	mov	r3, r1
 801f582:	a167      	add	r1, pc, #412	@ (adr r1, 801f720 <__ieee754_acos+0x2d0>)
 801f584:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f588:	f7e0 fe56 	bl	8000238 <__aeabi_dsub>
 801f58c:	4602      	mov	r2, r0
 801f58e:	460b      	mov	r3, r1
 801f590:	4620      	mov	r0, r4
 801f592:	4629      	mov	r1, r5
 801f594:	f7e0 fe50 	bl	8000238 <__aeabi_dsub>
 801f598:	4602      	mov	r2, r0
 801f59a:	460b      	mov	r3, r1
 801f59c:	a162      	add	r1, pc, #392	@ (adr r1, 801f728 <__ieee754_acos+0x2d8>)
 801f59e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f5a2:	f7e0 fe49 	bl	8000238 <__aeabi_dsub>
 801f5a6:	e773      	b.n	801f490 <__ieee754_acos+0x40>
 801f5a8:	2d00      	cmp	r5, #0
 801f5aa:	f280 80cf 	bge.w	801f74c <__ieee754_acos+0x2fc>
 801f5ae:	4b65      	ldr	r3, [pc, #404]	@ (801f744 <__ieee754_acos+0x2f4>)
 801f5b0:	2200      	movs	r2, #0
 801f5b2:	4620      	mov	r0, r4
 801f5b4:	4629      	mov	r1, r5
 801f5b6:	f7e0 fe41 	bl	800023c <__adddf3>
 801f5ba:	4b63      	ldr	r3, [pc, #396]	@ (801f748 <__ieee754_acos+0x2f8>)
 801f5bc:	2200      	movs	r2, #0
 801f5be:	f7e0 fff3 	bl	80005a8 <__aeabi_dmul>
 801f5c2:	a343      	add	r3, pc, #268	@ (adr r3, 801f6d0 <__ieee754_acos+0x280>)
 801f5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5c8:	4604      	mov	r4, r0
 801f5ca:	460d      	mov	r5, r1
 801f5cc:	f7e0 ffec 	bl	80005a8 <__aeabi_dmul>
 801f5d0:	a341      	add	r3, pc, #260	@ (adr r3, 801f6d8 <__ieee754_acos+0x288>)
 801f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5d6:	f7e0 fe31 	bl	800023c <__adddf3>
 801f5da:	4622      	mov	r2, r4
 801f5dc:	462b      	mov	r3, r5
 801f5de:	f7e0 ffe3 	bl	80005a8 <__aeabi_dmul>
 801f5e2:	a33f      	add	r3, pc, #252	@ (adr r3, 801f6e0 <__ieee754_acos+0x290>)
 801f5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5e8:	f7e0 fe26 	bl	8000238 <__aeabi_dsub>
 801f5ec:	4622      	mov	r2, r4
 801f5ee:	462b      	mov	r3, r5
 801f5f0:	f7e0 ffda 	bl	80005a8 <__aeabi_dmul>
 801f5f4:	a33c      	add	r3, pc, #240	@ (adr r3, 801f6e8 <__ieee754_acos+0x298>)
 801f5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5fa:	f7e0 fe1f 	bl	800023c <__adddf3>
 801f5fe:	4622      	mov	r2, r4
 801f600:	462b      	mov	r3, r5
 801f602:	f7e0 ffd1 	bl	80005a8 <__aeabi_dmul>
 801f606:	a33a      	add	r3, pc, #232	@ (adr r3, 801f6f0 <__ieee754_acos+0x2a0>)
 801f608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f60c:	f7e0 fe14 	bl	8000238 <__aeabi_dsub>
 801f610:	4622      	mov	r2, r4
 801f612:	462b      	mov	r3, r5
 801f614:	f7e0 ffc8 	bl	80005a8 <__aeabi_dmul>
 801f618:	a337      	add	r3, pc, #220	@ (adr r3, 801f6f8 <__ieee754_acos+0x2a8>)
 801f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f61e:	f7e0 fe0d 	bl	800023c <__adddf3>
 801f622:	4622      	mov	r2, r4
 801f624:	462b      	mov	r3, r5
 801f626:	f7e0 ffbf 	bl	80005a8 <__aeabi_dmul>
 801f62a:	a335      	add	r3, pc, #212	@ (adr r3, 801f700 <__ieee754_acos+0x2b0>)
 801f62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f630:	4606      	mov	r6, r0
 801f632:	460f      	mov	r7, r1
 801f634:	4620      	mov	r0, r4
 801f636:	4629      	mov	r1, r5
 801f638:	f7e0 ffb6 	bl	80005a8 <__aeabi_dmul>
 801f63c:	a332      	add	r3, pc, #200	@ (adr r3, 801f708 <__ieee754_acos+0x2b8>)
 801f63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f642:	f7e0 fdf9 	bl	8000238 <__aeabi_dsub>
 801f646:	4622      	mov	r2, r4
 801f648:	462b      	mov	r3, r5
 801f64a:	f7e0 ffad 	bl	80005a8 <__aeabi_dmul>
 801f64e:	a330      	add	r3, pc, #192	@ (adr r3, 801f710 <__ieee754_acos+0x2c0>)
 801f650:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f654:	f7e0 fdf2 	bl	800023c <__adddf3>
 801f658:	4622      	mov	r2, r4
 801f65a:	462b      	mov	r3, r5
 801f65c:	f7e0 ffa4 	bl	80005a8 <__aeabi_dmul>
 801f660:	a32d      	add	r3, pc, #180	@ (adr r3, 801f718 <__ieee754_acos+0x2c8>)
 801f662:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f666:	f7e0 fde7 	bl	8000238 <__aeabi_dsub>
 801f66a:	4622      	mov	r2, r4
 801f66c:	462b      	mov	r3, r5
 801f66e:	f7e0 ff9b 	bl	80005a8 <__aeabi_dmul>
 801f672:	4b34      	ldr	r3, [pc, #208]	@ (801f744 <__ieee754_acos+0x2f4>)
 801f674:	2200      	movs	r2, #0
 801f676:	f7e0 fde1 	bl	800023c <__adddf3>
 801f67a:	ec45 4b10 	vmov	d0, r4, r5
 801f67e:	4680      	mov	r8, r0
 801f680:	4689      	mov	r9, r1
 801f682:	f000 f9bf 	bl	801fa04 <__ieee754_sqrt>
 801f686:	ec55 4b10 	vmov	r4, r5, d0
 801f68a:	4642      	mov	r2, r8
 801f68c:	464b      	mov	r3, r9
 801f68e:	4630      	mov	r0, r6
 801f690:	4639      	mov	r1, r7
 801f692:	f7e1 f8b3 	bl	80007fc <__aeabi_ddiv>
 801f696:	4622      	mov	r2, r4
 801f698:	462b      	mov	r3, r5
 801f69a:	f7e0 ff85 	bl	80005a8 <__aeabi_dmul>
 801f69e:	a320      	add	r3, pc, #128	@ (adr r3, 801f720 <__ieee754_acos+0x2d0>)
 801f6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f6a4:	f7e0 fdc8 	bl	8000238 <__aeabi_dsub>
 801f6a8:	4622      	mov	r2, r4
 801f6aa:	462b      	mov	r3, r5
 801f6ac:	f7e0 fdc6 	bl	800023c <__adddf3>
 801f6b0:	4602      	mov	r2, r0
 801f6b2:	460b      	mov	r3, r1
 801f6b4:	f7e0 fdc2 	bl	800023c <__adddf3>
 801f6b8:	4602      	mov	r2, r0
 801f6ba:	460b      	mov	r3, r1
 801f6bc:	a11c      	add	r1, pc, #112	@ (adr r1, 801f730 <__ieee754_acos+0x2e0>)
 801f6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f6c2:	e76e      	b.n	801f5a2 <__ieee754_acos+0x152>
 801f6c4:	f3af 8000 	nop.w
	...
 801f6d0:	0dfdf709 	.word	0x0dfdf709
 801f6d4:	3f023de1 	.word	0x3f023de1
 801f6d8:	7501b288 	.word	0x7501b288
 801f6dc:	3f49efe0 	.word	0x3f49efe0
 801f6e0:	b5688f3b 	.word	0xb5688f3b
 801f6e4:	3fa48228 	.word	0x3fa48228
 801f6e8:	0e884455 	.word	0x0e884455
 801f6ec:	3fc9c155 	.word	0x3fc9c155
 801f6f0:	03eb6f7d 	.word	0x03eb6f7d
 801f6f4:	3fd4d612 	.word	0x3fd4d612
 801f6f8:	55555555 	.word	0x55555555
 801f6fc:	3fc55555 	.word	0x3fc55555
 801f700:	b12e9282 	.word	0xb12e9282
 801f704:	3fb3b8c5 	.word	0x3fb3b8c5
 801f708:	1b8d0159 	.word	0x1b8d0159
 801f70c:	3fe6066c 	.word	0x3fe6066c
 801f710:	9c598ac8 	.word	0x9c598ac8
 801f714:	40002ae5 	.word	0x40002ae5
 801f718:	1c8a2d4b 	.word	0x1c8a2d4b
 801f71c:	40033a27 	.word	0x40033a27
 801f720:	33145c07 	.word	0x33145c07
 801f724:	3c91a626 	.word	0x3c91a626
 801f728:	54442d18 	.word	0x54442d18
 801f72c:	3ff921fb 	.word	0x3ff921fb
 801f730:	54442d18 	.word	0x54442d18
 801f734:	400921fb 	.word	0x400921fb
 801f738:	3fefffff 	.word	0x3fefffff
 801f73c:	3fdfffff 	.word	0x3fdfffff
 801f740:	3c600000 	.word	0x3c600000
 801f744:	3ff00000 	.word	0x3ff00000
 801f748:	3fe00000 	.word	0x3fe00000
 801f74c:	4622      	mov	r2, r4
 801f74e:	462b      	mov	r3, r5
 801f750:	496b      	ldr	r1, [pc, #428]	@ (801f900 <__ieee754_acos+0x4b0>)
 801f752:	2000      	movs	r0, #0
 801f754:	f7e0 fd70 	bl	8000238 <__aeabi_dsub>
 801f758:	4b6a      	ldr	r3, [pc, #424]	@ (801f904 <__ieee754_acos+0x4b4>)
 801f75a:	2200      	movs	r2, #0
 801f75c:	f7e0 ff24 	bl	80005a8 <__aeabi_dmul>
 801f760:	4604      	mov	r4, r0
 801f762:	460d      	mov	r5, r1
 801f764:	ec45 4b10 	vmov	d0, r4, r5
 801f768:	f000 f94c 	bl	801fa04 <__ieee754_sqrt>
 801f76c:	a34c      	add	r3, pc, #304	@ (adr r3, 801f8a0 <__ieee754_acos+0x450>)
 801f76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f772:	4620      	mov	r0, r4
 801f774:	4629      	mov	r1, r5
 801f776:	ec59 8b10 	vmov	r8, r9, d0
 801f77a:	f7e0 ff15 	bl	80005a8 <__aeabi_dmul>
 801f77e:	a34a      	add	r3, pc, #296	@ (adr r3, 801f8a8 <__ieee754_acos+0x458>)
 801f780:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f784:	f7e0 fd5a 	bl	800023c <__adddf3>
 801f788:	4622      	mov	r2, r4
 801f78a:	462b      	mov	r3, r5
 801f78c:	f7e0 ff0c 	bl	80005a8 <__aeabi_dmul>
 801f790:	a347      	add	r3, pc, #284	@ (adr r3, 801f8b0 <__ieee754_acos+0x460>)
 801f792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f796:	f7e0 fd4f 	bl	8000238 <__aeabi_dsub>
 801f79a:	4622      	mov	r2, r4
 801f79c:	462b      	mov	r3, r5
 801f79e:	f7e0 ff03 	bl	80005a8 <__aeabi_dmul>
 801f7a2:	a345      	add	r3, pc, #276	@ (adr r3, 801f8b8 <__ieee754_acos+0x468>)
 801f7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7a8:	f7e0 fd48 	bl	800023c <__adddf3>
 801f7ac:	4622      	mov	r2, r4
 801f7ae:	462b      	mov	r3, r5
 801f7b0:	f7e0 fefa 	bl	80005a8 <__aeabi_dmul>
 801f7b4:	a342      	add	r3, pc, #264	@ (adr r3, 801f8c0 <__ieee754_acos+0x470>)
 801f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7ba:	f7e0 fd3d 	bl	8000238 <__aeabi_dsub>
 801f7be:	4622      	mov	r2, r4
 801f7c0:	462b      	mov	r3, r5
 801f7c2:	f7e0 fef1 	bl	80005a8 <__aeabi_dmul>
 801f7c6:	a340      	add	r3, pc, #256	@ (adr r3, 801f8c8 <__ieee754_acos+0x478>)
 801f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7cc:	f7e0 fd36 	bl	800023c <__adddf3>
 801f7d0:	4622      	mov	r2, r4
 801f7d2:	462b      	mov	r3, r5
 801f7d4:	f7e0 fee8 	bl	80005a8 <__aeabi_dmul>
 801f7d8:	a33d      	add	r3, pc, #244	@ (adr r3, 801f8d0 <__ieee754_acos+0x480>)
 801f7da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7de:	4682      	mov	sl, r0
 801f7e0:	468b      	mov	fp, r1
 801f7e2:	4620      	mov	r0, r4
 801f7e4:	4629      	mov	r1, r5
 801f7e6:	f7e0 fedf 	bl	80005a8 <__aeabi_dmul>
 801f7ea:	a33b      	add	r3, pc, #236	@ (adr r3, 801f8d8 <__ieee754_acos+0x488>)
 801f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7f0:	f7e0 fd22 	bl	8000238 <__aeabi_dsub>
 801f7f4:	4622      	mov	r2, r4
 801f7f6:	462b      	mov	r3, r5
 801f7f8:	f7e0 fed6 	bl	80005a8 <__aeabi_dmul>
 801f7fc:	a338      	add	r3, pc, #224	@ (adr r3, 801f8e0 <__ieee754_acos+0x490>)
 801f7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f802:	f7e0 fd1b 	bl	800023c <__adddf3>
 801f806:	4622      	mov	r2, r4
 801f808:	462b      	mov	r3, r5
 801f80a:	f7e0 fecd 	bl	80005a8 <__aeabi_dmul>
 801f80e:	a336      	add	r3, pc, #216	@ (adr r3, 801f8e8 <__ieee754_acos+0x498>)
 801f810:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f814:	f7e0 fd10 	bl	8000238 <__aeabi_dsub>
 801f818:	4622      	mov	r2, r4
 801f81a:	462b      	mov	r3, r5
 801f81c:	f7e0 fec4 	bl	80005a8 <__aeabi_dmul>
 801f820:	4b37      	ldr	r3, [pc, #220]	@ (801f900 <__ieee754_acos+0x4b0>)
 801f822:	2200      	movs	r2, #0
 801f824:	f7e0 fd0a 	bl	800023c <__adddf3>
 801f828:	4602      	mov	r2, r0
 801f82a:	460b      	mov	r3, r1
 801f82c:	4650      	mov	r0, sl
 801f82e:	4659      	mov	r1, fp
 801f830:	f7e0 ffe4 	bl	80007fc <__aeabi_ddiv>
 801f834:	4642      	mov	r2, r8
 801f836:	464b      	mov	r3, r9
 801f838:	f7e0 feb6 	bl	80005a8 <__aeabi_dmul>
 801f83c:	2600      	movs	r6, #0
 801f83e:	4682      	mov	sl, r0
 801f840:	468b      	mov	fp, r1
 801f842:	4632      	mov	r2, r6
 801f844:	464b      	mov	r3, r9
 801f846:	4630      	mov	r0, r6
 801f848:	4649      	mov	r1, r9
 801f84a:	f7e0 fead 	bl	80005a8 <__aeabi_dmul>
 801f84e:	4602      	mov	r2, r0
 801f850:	460b      	mov	r3, r1
 801f852:	4620      	mov	r0, r4
 801f854:	4629      	mov	r1, r5
 801f856:	f7e0 fcef 	bl	8000238 <__aeabi_dsub>
 801f85a:	4632      	mov	r2, r6
 801f85c:	4604      	mov	r4, r0
 801f85e:	460d      	mov	r5, r1
 801f860:	464b      	mov	r3, r9
 801f862:	4640      	mov	r0, r8
 801f864:	4649      	mov	r1, r9
 801f866:	f7e0 fce9 	bl	800023c <__adddf3>
 801f86a:	4602      	mov	r2, r0
 801f86c:	460b      	mov	r3, r1
 801f86e:	4620      	mov	r0, r4
 801f870:	4629      	mov	r1, r5
 801f872:	f7e0 ffc3 	bl	80007fc <__aeabi_ddiv>
 801f876:	4602      	mov	r2, r0
 801f878:	460b      	mov	r3, r1
 801f87a:	4650      	mov	r0, sl
 801f87c:	4659      	mov	r1, fp
 801f87e:	f7e0 fcdd 	bl	800023c <__adddf3>
 801f882:	4632      	mov	r2, r6
 801f884:	464b      	mov	r3, r9
 801f886:	f7e0 fcd9 	bl	800023c <__adddf3>
 801f88a:	4602      	mov	r2, r0
 801f88c:	460b      	mov	r3, r1
 801f88e:	f7e0 fcd5 	bl	800023c <__adddf3>
 801f892:	e5fd      	b.n	801f490 <__ieee754_acos+0x40>
 801f894:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801f8f0 <__ieee754_acos+0x4a0>
 801f898:	e5ee      	b.n	801f478 <__ieee754_acos+0x28>
 801f89a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f8f8 <__ieee754_acos+0x4a8>
 801f89e:	e5eb      	b.n	801f478 <__ieee754_acos+0x28>
 801f8a0:	0dfdf709 	.word	0x0dfdf709
 801f8a4:	3f023de1 	.word	0x3f023de1
 801f8a8:	7501b288 	.word	0x7501b288
 801f8ac:	3f49efe0 	.word	0x3f49efe0
 801f8b0:	b5688f3b 	.word	0xb5688f3b
 801f8b4:	3fa48228 	.word	0x3fa48228
 801f8b8:	0e884455 	.word	0x0e884455
 801f8bc:	3fc9c155 	.word	0x3fc9c155
 801f8c0:	03eb6f7d 	.word	0x03eb6f7d
 801f8c4:	3fd4d612 	.word	0x3fd4d612
 801f8c8:	55555555 	.word	0x55555555
 801f8cc:	3fc55555 	.word	0x3fc55555
 801f8d0:	b12e9282 	.word	0xb12e9282
 801f8d4:	3fb3b8c5 	.word	0x3fb3b8c5
 801f8d8:	1b8d0159 	.word	0x1b8d0159
 801f8dc:	3fe6066c 	.word	0x3fe6066c
 801f8e0:	9c598ac8 	.word	0x9c598ac8
 801f8e4:	40002ae5 	.word	0x40002ae5
 801f8e8:	1c8a2d4b 	.word	0x1c8a2d4b
 801f8ec:	40033a27 	.word	0x40033a27
 801f8f0:	54442d18 	.word	0x54442d18
 801f8f4:	400921fb 	.word	0x400921fb
 801f8f8:	54442d18 	.word	0x54442d18
 801f8fc:	3ff921fb 	.word	0x3ff921fb
 801f900:	3ff00000 	.word	0x3ff00000
 801f904:	3fe00000 	.word	0x3fe00000

0801f908 <scalbn>:
 801f908:	b570      	push	{r4, r5, r6, lr}
 801f90a:	ec55 4b10 	vmov	r4, r5, d0
 801f90e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801f912:	4606      	mov	r6, r0
 801f914:	462b      	mov	r3, r5
 801f916:	b991      	cbnz	r1, 801f93e <scalbn+0x36>
 801f918:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f91c:	4323      	orrs	r3, r4
 801f91e:	d03d      	beq.n	801f99c <scalbn+0x94>
 801f920:	4b35      	ldr	r3, [pc, #212]	@ (801f9f8 <scalbn+0xf0>)
 801f922:	4620      	mov	r0, r4
 801f924:	4629      	mov	r1, r5
 801f926:	2200      	movs	r2, #0
 801f928:	f7e0 fe3e 	bl	80005a8 <__aeabi_dmul>
 801f92c:	4b33      	ldr	r3, [pc, #204]	@ (801f9fc <scalbn+0xf4>)
 801f92e:	429e      	cmp	r6, r3
 801f930:	4604      	mov	r4, r0
 801f932:	460d      	mov	r5, r1
 801f934:	da0f      	bge.n	801f956 <scalbn+0x4e>
 801f936:	a328      	add	r3, pc, #160	@ (adr r3, 801f9d8 <scalbn+0xd0>)
 801f938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f93c:	e01e      	b.n	801f97c <scalbn+0x74>
 801f93e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801f942:	4291      	cmp	r1, r2
 801f944:	d10b      	bne.n	801f95e <scalbn+0x56>
 801f946:	4622      	mov	r2, r4
 801f948:	4620      	mov	r0, r4
 801f94a:	4629      	mov	r1, r5
 801f94c:	f7e0 fc76 	bl	800023c <__adddf3>
 801f950:	4604      	mov	r4, r0
 801f952:	460d      	mov	r5, r1
 801f954:	e022      	b.n	801f99c <scalbn+0x94>
 801f956:	460b      	mov	r3, r1
 801f958:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801f95c:	3936      	subs	r1, #54	@ 0x36
 801f95e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801f962:	4296      	cmp	r6, r2
 801f964:	dd0d      	ble.n	801f982 <scalbn+0x7a>
 801f966:	2d00      	cmp	r5, #0
 801f968:	a11d      	add	r1, pc, #116	@ (adr r1, 801f9e0 <scalbn+0xd8>)
 801f96a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f96e:	da02      	bge.n	801f976 <scalbn+0x6e>
 801f970:	a11d      	add	r1, pc, #116	@ (adr r1, 801f9e8 <scalbn+0xe0>)
 801f972:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f976:	a31a      	add	r3, pc, #104	@ (adr r3, 801f9e0 <scalbn+0xd8>)
 801f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f97c:	f7e0 fe14 	bl	80005a8 <__aeabi_dmul>
 801f980:	e7e6      	b.n	801f950 <scalbn+0x48>
 801f982:	1872      	adds	r2, r6, r1
 801f984:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801f988:	428a      	cmp	r2, r1
 801f98a:	dcec      	bgt.n	801f966 <scalbn+0x5e>
 801f98c:	2a00      	cmp	r2, #0
 801f98e:	dd08      	ble.n	801f9a2 <scalbn+0x9a>
 801f990:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f994:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f998:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f99c:	ec45 4b10 	vmov	d0, r4, r5
 801f9a0:	bd70      	pop	{r4, r5, r6, pc}
 801f9a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801f9a6:	da08      	bge.n	801f9ba <scalbn+0xb2>
 801f9a8:	2d00      	cmp	r5, #0
 801f9aa:	a10b      	add	r1, pc, #44	@ (adr r1, 801f9d8 <scalbn+0xd0>)
 801f9ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f9b0:	dac1      	bge.n	801f936 <scalbn+0x2e>
 801f9b2:	a10f      	add	r1, pc, #60	@ (adr r1, 801f9f0 <scalbn+0xe8>)
 801f9b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f9b8:	e7bd      	b.n	801f936 <scalbn+0x2e>
 801f9ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801f9be:	3236      	adds	r2, #54	@ 0x36
 801f9c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801f9c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801f9c8:	4620      	mov	r0, r4
 801f9ca:	4b0d      	ldr	r3, [pc, #52]	@ (801fa00 <scalbn+0xf8>)
 801f9cc:	4629      	mov	r1, r5
 801f9ce:	2200      	movs	r2, #0
 801f9d0:	e7d4      	b.n	801f97c <scalbn+0x74>
 801f9d2:	bf00      	nop
 801f9d4:	f3af 8000 	nop.w
 801f9d8:	c2f8f359 	.word	0xc2f8f359
 801f9dc:	01a56e1f 	.word	0x01a56e1f
 801f9e0:	8800759c 	.word	0x8800759c
 801f9e4:	7e37e43c 	.word	0x7e37e43c
 801f9e8:	8800759c 	.word	0x8800759c
 801f9ec:	fe37e43c 	.word	0xfe37e43c
 801f9f0:	c2f8f359 	.word	0xc2f8f359
 801f9f4:	81a56e1f 	.word	0x81a56e1f
 801f9f8:	43500000 	.word	0x43500000
 801f9fc:	ffff3cb0 	.word	0xffff3cb0
 801fa00:	3c900000 	.word	0x3c900000

0801fa04 <__ieee754_sqrt>:
 801fa04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa08:	4a68      	ldr	r2, [pc, #416]	@ (801fbac <__ieee754_sqrt+0x1a8>)
 801fa0a:	ec55 4b10 	vmov	r4, r5, d0
 801fa0e:	43aa      	bics	r2, r5
 801fa10:	462b      	mov	r3, r5
 801fa12:	4621      	mov	r1, r4
 801fa14:	d110      	bne.n	801fa38 <__ieee754_sqrt+0x34>
 801fa16:	4622      	mov	r2, r4
 801fa18:	4620      	mov	r0, r4
 801fa1a:	4629      	mov	r1, r5
 801fa1c:	f7e0 fdc4 	bl	80005a8 <__aeabi_dmul>
 801fa20:	4602      	mov	r2, r0
 801fa22:	460b      	mov	r3, r1
 801fa24:	4620      	mov	r0, r4
 801fa26:	4629      	mov	r1, r5
 801fa28:	f7e0 fc08 	bl	800023c <__adddf3>
 801fa2c:	4604      	mov	r4, r0
 801fa2e:	460d      	mov	r5, r1
 801fa30:	ec45 4b10 	vmov	d0, r4, r5
 801fa34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fa38:	2d00      	cmp	r5, #0
 801fa3a:	dc0e      	bgt.n	801fa5a <__ieee754_sqrt+0x56>
 801fa3c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801fa40:	4322      	orrs	r2, r4
 801fa42:	d0f5      	beq.n	801fa30 <__ieee754_sqrt+0x2c>
 801fa44:	b19d      	cbz	r5, 801fa6e <__ieee754_sqrt+0x6a>
 801fa46:	4622      	mov	r2, r4
 801fa48:	4620      	mov	r0, r4
 801fa4a:	4629      	mov	r1, r5
 801fa4c:	f7e0 fbf4 	bl	8000238 <__aeabi_dsub>
 801fa50:	4602      	mov	r2, r0
 801fa52:	460b      	mov	r3, r1
 801fa54:	f7e0 fed2 	bl	80007fc <__aeabi_ddiv>
 801fa58:	e7e8      	b.n	801fa2c <__ieee754_sqrt+0x28>
 801fa5a:	152a      	asrs	r2, r5, #20
 801fa5c:	d115      	bne.n	801fa8a <__ieee754_sqrt+0x86>
 801fa5e:	2000      	movs	r0, #0
 801fa60:	e009      	b.n	801fa76 <__ieee754_sqrt+0x72>
 801fa62:	0acb      	lsrs	r3, r1, #11
 801fa64:	3a15      	subs	r2, #21
 801fa66:	0549      	lsls	r1, r1, #21
 801fa68:	2b00      	cmp	r3, #0
 801fa6a:	d0fa      	beq.n	801fa62 <__ieee754_sqrt+0x5e>
 801fa6c:	e7f7      	b.n	801fa5e <__ieee754_sqrt+0x5a>
 801fa6e:	462a      	mov	r2, r5
 801fa70:	e7fa      	b.n	801fa68 <__ieee754_sqrt+0x64>
 801fa72:	005b      	lsls	r3, r3, #1
 801fa74:	3001      	adds	r0, #1
 801fa76:	02dc      	lsls	r4, r3, #11
 801fa78:	d5fb      	bpl.n	801fa72 <__ieee754_sqrt+0x6e>
 801fa7a:	1e44      	subs	r4, r0, #1
 801fa7c:	1b12      	subs	r2, r2, r4
 801fa7e:	f1c0 0420 	rsb	r4, r0, #32
 801fa82:	fa21 f404 	lsr.w	r4, r1, r4
 801fa86:	4323      	orrs	r3, r4
 801fa88:	4081      	lsls	r1, r0
 801fa8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fa8e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801fa92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fa96:	07d2      	lsls	r2, r2, #31
 801fa98:	bf5c      	itt	pl
 801fa9a:	005b      	lslpl	r3, r3, #1
 801fa9c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801faa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801faa4:	bf58      	it	pl
 801faa6:	0049      	lslpl	r1, r1, #1
 801faa8:	2600      	movs	r6, #0
 801faaa:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801faae:	106d      	asrs	r5, r5, #1
 801fab0:	0049      	lsls	r1, r1, #1
 801fab2:	2016      	movs	r0, #22
 801fab4:	4632      	mov	r2, r6
 801fab6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801faba:	1917      	adds	r7, r2, r4
 801fabc:	429f      	cmp	r7, r3
 801fabe:	bfde      	ittt	le
 801fac0:	193a      	addle	r2, r7, r4
 801fac2:	1bdb      	suble	r3, r3, r7
 801fac4:	1936      	addle	r6, r6, r4
 801fac6:	0fcf      	lsrs	r7, r1, #31
 801fac8:	3801      	subs	r0, #1
 801faca:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801face:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fad2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fad6:	d1f0      	bne.n	801faba <__ieee754_sqrt+0xb6>
 801fad8:	4604      	mov	r4, r0
 801fada:	2720      	movs	r7, #32
 801fadc:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801fae0:	429a      	cmp	r2, r3
 801fae2:	eb00 0e0c 	add.w	lr, r0, ip
 801fae6:	db02      	blt.n	801faee <__ieee754_sqrt+0xea>
 801fae8:	d113      	bne.n	801fb12 <__ieee754_sqrt+0x10e>
 801faea:	458e      	cmp	lr, r1
 801faec:	d811      	bhi.n	801fb12 <__ieee754_sqrt+0x10e>
 801faee:	f1be 0f00 	cmp.w	lr, #0
 801faf2:	eb0e 000c 	add.w	r0, lr, ip
 801faf6:	da42      	bge.n	801fb7e <__ieee754_sqrt+0x17a>
 801faf8:	2800      	cmp	r0, #0
 801fafa:	db40      	blt.n	801fb7e <__ieee754_sqrt+0x17a>
 801fafc:	f102 0801 	add.w	r8, r2, #1
 801fb00:	1a9b      	subs	r3, r3, r2
 801fb02:	458e      	cmp	lr, r1
 801fb04:	bf88      	it	hi
 801fb06:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801fb0a:	eba1 010e 	sub.w	r1, r1, lr
 801fb0e:	4464      	add	r4, ip
 801fb10:	4642      	mov	r2, r8
 801fb12:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801fb16:	3f01      	subs	r7, #1
 801fb18:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801fb1c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fb20:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801fb24:	d1dc      	bne.n	801fae0 <__ieee754_sqrt+0xdc>
 801fb26:	4319      	orrs	r1, r3
 801fb28:	d01b      	beq.n	801fb62 <__ieee754_sqrt+0x15e>
 801fb2a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801fbb0 <__ieee754_sqrt+0x1ac>
 801fb2e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801fbb4 <__ieee754_sqrt+0x1b0>
 801fb32:	e9da 0100 	ldrd	r0, r1, [sl]
 801fb36:	e9db 2300 	ldrd	r2, r3, [fp]
 801fb3a:	f7e0 fb7d 	bl	8000238 <__aeabi_dsub>
 801fb3e:	e9da 8900 	ldrd	r8, r9, [sl]
 801fb42:	4602      	mov	r2, r0
 801fb44:	460b      	mov	r3, r1
 801fb46:	4640      	mov	r0, r8
 801fb48:	4649      	mov	r1, r9
 801fb4a:	f7e0 ffa9 	bl	8000aa0 <__aeabi_dcmple>
 801fb4e:	b140      	cbz	r0, 801fb62 <__ieee754_sqrt+0x15e>
 801fb50:	f1b4 3fff 	cmp.w	r4, #4294967295
 801fb54:	e9da 0100 	ldrd	r0, r1, [sl]
 801fb58:	e9db 2300 	ldrd	r2, r3, [fp]
 801fb5c:	d111      	bne.n	801fb82 <__ieee754_sqrt+0x17e>
 801fb5e:	3601      	adds	r6, #1
 801fb60:	463c      	mov	r4, r7
 801fb62:	1072      	asrs	r2, r6, #1
 801fb64:	0863      	lsrs	r3, r4, #1
 801fb66:	07f1      	lsls	r1, r6, #31
 801fb68:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801fb6c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801fb70:	bf48      	it	mi
 801fb72:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801fb76:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801fb7a:	4618      	mov	r0, r3
 801fb7c:	e756      	b.n	801fa2c <__ieee754_sqrt+0x28>
 801fb7e:	4690      	mov	r8, r2
 801fb80:	e7be      	b.n	801fb00 <__ieee754_sqrt+0xfc>
 801fb82:	f7e0 fb5b 	bl	800023c <__adddf3>
 801fb86:	e9da 8900 	ldrd	r8, r9, [sl]
 801fb8a:	4602      	mov	r2, r0
 801fb8c:	460b      	mov	r3, r1
 801fb8e:	4640      	mov	r0, r8
 801fb90:	4649      	mov	r1, r9
 801fb92:	f7e0 ff7b 	bl	8000a8c <__aeabi_dcmplt>
 801fb96:	b120      	cbz	r0, 801fba2 <__ieee754_sqrt+0x19e>
 801fb98:	1ca0      	adds	r0, r4, #2
 801fb9a:	bf08      	it	eq
 801fb9c:	3601      	addeq	r6, #1
 801fb9e:	3402      	adds	r4, #2
 801fba0:	e7df      	b.n	801fb62 <__ieee754_sqrt+0x15e>
 801fba2:	1c63      	adds	r3, r4, #1
 801fba4:	f023 0401 	bic.w	r4, r3, #1
 801fba8:	e7db      	b.n	801fb62 <__ieee754_sqrt+0x15e>
 801fbaa:	bf00      	nop
 801fbac:	7ff00000 	.word	0x7ff00000
 801fbb0:	20000318 	.word	0x20000318
 801fbb4:	20000310 	.word	0x20000310

0801fbb8 <_init>:
 801fbb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbba:	bf00      	nop
 801fbbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fbbe:	bc08      	pop	{r3}
 801fbc0:	469e      	mov	lr, r3
 801fbc2:	4770      	bx	lr

0801fbc4 <_fini>:
 801fbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbc6:	bf00      	nop
 801fbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fbca:	bc08      	pop	{r3}
 801fbcc:	469e      	mov	lr, r3
 801fbce:	4770      	bx	lr
