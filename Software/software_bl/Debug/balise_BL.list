
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001fbd0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002858  0801fd10  0801fd10  00020d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08022568  08022568  00023568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08022570  08022570  00023570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08022574  08022574  00023574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000318  20000008  08022578  00024008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000320  08022890  00024320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000358  080228c5  00024358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003088  20000370  080228d6  00024370  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200033f8  080228d6  000243f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00026000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00026000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080228d6  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0004c9df  00000000  00000000  00025a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a5c9  00000000  00000000  00072476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003f50  00000000  00000000  0007ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000307d  00000000  00000000  00080990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000158da  00000000  00000000  00083a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00054c73  00000000  00000000  000992e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e870  00000000  00000000  000edf5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020c7ca  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00012450  00000000  00000000  0020c810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000076  00000000  00000000  0021ec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	0801fcf8 	.word	0x0801fcf8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	0801fcf8 	.word	0x0801fcf8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <MX_ADC1_Init+0xfc>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800100a:	2201      	movs	r2, #1
 800100c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800100e:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001010:	2203      	movs	r2, #3
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800101e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001042:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001044:	f006 fb94 	bl	8007770 <HAL_ADC_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800104e:	f001 fe55 	bl	8002cfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ADC1_Init+0x100>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2306      	movs	r3, #6
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105e:	237f      	movs	r3, #127	@ 0x7f
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001062:	2304      	movs	r3, #4
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001070:	f006 fd62 	bl	8007b38 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f001 fe3f 	bl	8002cfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_ADC1_Init+0x104>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800108c:	f006 fd54 	bl	8007b38 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001096:	f001 fe31 	bl	8002cfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_ADC1_Init+0x108>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109e:	2312      	movs	r3, #18
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 80010a8:	f006 fd46 	bl	8007b38 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010b2:	f001 fe23 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	2000038c 	.word	0x2000038c
 80010c4:	50040000 	.word	0x50040000
 80010c8:	80000001 	.word	0x80000001
 80010cc:	c7520000 	.word	0xc7520000
 80010d0:	25b00200 	.word	0x25b00200

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_ADC_MspInit+0xa8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d13e      	bne.n	8001174 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fa:	f7ff ff4b 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff48 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f007 ff4f 	bl	8008fbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_ADC_MspInit+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001126:	2205      	movs	r2, #5
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800113e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800115a:	f007 fb5b 	bl	8008814 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001164:	f001 fdca 	bl	8002cfc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800116c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	50040000 	.word	0x50040000
 8001180:	200003f0 	.word	0x200003f0
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8091 	bne.w	80012c0 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f996 	bl	80004d4 <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	a14a      	add	r1, pc, #296	@ (adr r1, 80012d8 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b2:	f7ff fb23 	bl	80007fc <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fceb 	bl	8000b98 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 80011c6:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f98c 	bl	80004f8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4944      	ldr	r1, [pc, #272]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011ea:	f7ff fb07 	bl	80007fc <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4690      	mov	r8, r2
 80011f4:	4699      	mov	r9, r3
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f96a 	bl	80004d4 <__aeabi_i2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f975 	bl	80004f8 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 8001214:	f7ff faf2 	bl	80007fc <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f9c2 	bl	80005a8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7fe fffb 	bl	8000238 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9ad 	bl	80005a8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2f>
 800125a:	ee07 0a10 	vmov	s14, r0
 800125e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f92f 	bl	80004d4 <__aeabi_i2d>
 8001276:	a31a      	add	r3, pc, #104	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fabe 	bl	80007fc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7fe ffd6 	bl	800023c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f92b 	bl	80004f8 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f97d 	bl	80005a8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc6f 	bl	8000b98 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x180>)
 80012be:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012c0:	2203      	movs	r2, #3
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <HAL_ADC_ConvCpltCallback+0x184>)
 80012c6:	f006 fb9f 	bl	8007a08 <HAL_ADC_Start_DMA>



}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	d70a3d70 	.word	0xd70a3d70
 80012dc:	40b36323 	.word	0x40b36323
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40affe00 	.word	0x40affe00
 80012e8:	50040000 	.word	0x50040000
 80012ec:	20000888 	.word	0x20000888
 80012f0:	20000894 	.word	0x20000894
 80012f4:	20000008 	.word	0x20000008
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	40590000 	.word	0x40590000
 8001300:	40080000 	.word	0x40080000
 8001304:	20000890 	.word	0x20000890
 8001308:	20000898 	.word	0x20000898
 800130c:	2000038c 	.word	0x2000038c

08001310 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <APPD_EnableCPU2+0x34>)
 8001318:	1d3c      	adds	r4, r7, #4
 800131a:	461d      	mov	r5, r3
 800131c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001320:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001324:	c403      	stmia	r4!, {r0, r1}
 8001326:	8022      	strh	r2, [r4, #0]
 8001328:	3402      	adds	r4, #2
 800132a:	0c13      	lsrs	r3, r2, #16
 800132c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800132e:	f015 fd15 	bl	8016d5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4618      	mov	r0, r3
 8001336:	f014 ffa6 	bl	8016286 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800133a:	bf00      	nop
}
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bdb0      	pop	{r4, r5, r7, pc}
 8001342:	bf00      	nop
 8001344:	0801fd10 	.word	0x0801fd10

08001348 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 8001352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4905      	ldr	r1, [pc, #20]	@ (8001370 <LL_C2_PWR_SetPowerMode+0x28>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4313      	orrs	r3, r2
 8001360:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58000400 	.word	0x58000400

08001374 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 800137e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001382:	4905      	ldr	r1, [pc, #20]	@ (8001398 <LL_EXTI_EnableIT_32_63+0x24>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4313      	orrs	r3, r2
 8001388:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	58000800 	.word	0x58000800

0800139c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013a8:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80013aa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80013ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013b6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013c2:	4313      	orrs	r3, r2
 80013c4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	cafecafe 	.word	0xcafecafe

080013d8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <LL_DBGMCU_GetDeviceID+0x18>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e0042000 	.word	0xe0042000

0800141c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001420:	4b04      	ldr	r3, [pc, #16]	@ (8001434 <LL_DBGMCU_GetRevisionID+0x18>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	b29b      	uxth	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e0042000 	.word	0xe0042000

08001438 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4a04      	ldr	r2, [pc, #16]	@ (8001454 <LL_LPM_EnableSleep+0x1c>)
 8001442:	f023 0304 	bic.w	r3, r3, #4
 8001446:	6113      	str	r3, [r2, #16]
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	22ca      	movs	r2, #202	@ 0xca
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2253      	movs	r2, #83	@ 0x53
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001492:	b480      	push	{r7}
 8001494:	b083      	sub	sp, #12
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f023 0207 	bic.w	r2, r3, #7
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	609a      	str	r2, [r3, #8]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <MX_APPE_Config+0x18>)
 80014be:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80014c2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80014c4:	f000 f824 	bl	8001510 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80014c8:	f000 f829 	bl	800151e <Config_HSE>

  return;
 80014cc:	bf00      	nop
}
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58004000 	.word	0x58004000

080014d4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80014d8:	f000 f835 	bl	8001546 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80014dc:	f000 f84e 	bl	800157c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80014e0:	4903      	ldr	r1, [pc, #12]	@ (80014f0 <MX_APPE_Init+0x1c>)
 80014e2:	2000      	movs	r0, #0
 80014e4:	f000 fe4c 	bl	8002180 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80014e8:	f000 f856 	bl	8001598 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80014ec:	bf00      	nop
}
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000d28 	.word	0x20000d28

080014f4 <Init_Smps>:

void Init_Smps(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80014f8:	bf00      	nop
}
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <Init_Exti>:

void Init_Exti(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001506:	2050      	movs	r0, #80	@ 0x50
 8001508:	f7ff ff34 	bl	8001374 <LL_EXTI_EnableIT_32_63>

  return;
 800150c:	bf00      	nop
}
 800150e:	bd80      	pop	{r7, pc}

08001510 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001514:	bf00      	nop
}
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001524:	2000      	movs	r0, #0
 8001526:	f015 fca5 	bl	8016e74 <OTP_Read>
 800152a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	799b      	ldrb	r3, [r3, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff ff30 	bl	800139c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800153c:	bf00      	nop
 800153e:	bf00      	nop
}
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <System_Init>:

static void System_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  Init_Smps();
 800154a:	f7ff ffd3 	bl	80014f4 <Init_Smps>

  Init_Exti();
 800154e:	f7ff ffd8 	bl	8001502 <Init_Exti>

  Init_Rtc();
 8001552:	f000 f803 	bl	800155c <Init_Rtc>

  return;
 8001556:	bf00      	nop
}
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <Init_Rtc>:

static void Init_Rtc(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <Init_Rtc+0x1c>)
 8001562:	f7ff ff86 	bl	8001472 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001566:	2100      	movs	r1, #0
 8001568:	4803      	ldr	r0, [pc, #12]	@ (8001578 <Init_Rtc+0x1c>)
 800156a:	f7ff ff92 	bl	8001492 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800156e:	4802      	ldr	r0, [pc, #8]	@ (8001578 <Init_Rtc+0x1c>)
 8001570:	f7ff ff72 	bl	8001458 <LL_RTC_EnableWriteProtection>

  return;
 8001574:	bf00      	nop
}
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40002800 	.word	0x40002800

0800157c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001580:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001584:	f7ff ff28 	bl	80013d8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001588:	f017 ff4e 	bl	8019428 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800158c:	2004      	movs	r0, #4
 800158e:	f7ff fedb 	bl	8001348 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001592:	bf00      	nop
}
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800159e:	f015 fa27 	bl	80169f0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80015a2:	4a11      	ldr	r2, [pc, #68]	@ (80015e8 <appe_Tl_Init+0x50>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	2008      	movs	r0, #8
 80015a8:	f018 f87c 	bl	80196a4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <appe_Tl_Init+0x54>)
 80015ae:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <appe_Tl_Init+0x58>)
 80015b2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	480e      	ldr	r0, [pc, #56]	@ (80015f4 <appe_Tl_Init+0x5c>)
 80015ba:	f015 f8db 	bl	8016774 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <appe_Tl_Init+0x60>)
 80015c0:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <appe_Tl_Init+0x64>)
 80015c4:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001600 <appe_Tl_Init+0x68>)
 80015c8:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80015ca:	f240 533c 	movw	r3, #1340	@ 0x53c
 80015ce:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80015d0:	f107 0308 	add.w	r3, r7, #8
 80015d4:	4618      	mov	r0, r3
 80015d6:	f015 fb4d 	bl	8016c74 <TL_MM_Init>

  TL_Enable();
 80015da:	f015 fa03 	bl	80169e4 <TL_Enable>

  return;
 80015de:	bf00      	nop
}
 80015e0:	3720      	adds	r7, #32
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	080167ad 	.word	0x080167ad
 80015ec:	20030734 	.word	0x20030734
 80015f0:	08001605 	.word	0x08001605
 80015f4:	0800161d 	.word	0x0800161d
 80015f8:	2003094c 	.word	0x2003094c
 80015fc:	20030840 	.word	0x20030840
 8001600:	200301f8 	.word	0x200301f8

08001604 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800160e:	bf00      	nop
}
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	330b      	adds	r3, #11
 800162a:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001636:	2b07      	cmp	r3, #7
 8001638:	d81f      	bhi.n	800167a <APPE_SysUserEvtRx+0x5e>
 800163a:	a201      	add	r2, pc, #4	@ (adr r2, 8001640 <APPE_SysUserEvtRx+0x24>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001661 	.word	0x08001661
 8001644:	08001673 	.word	0x08001673
 8001648:	0800167b 	.word	0x0800167b
 800164c:	0800167b 	.word	0x0800167b
 8001650:	0800167b 	.word	0x0800167b
 8001654:	0800167b 	.word	0x0800167b
 8001658:	0800167b 	.word	0x0800167b
 800165c:	0800167b 	.word	0x0800167b
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4618      	mov	r0, r3
 8001666:	f014 fe3b 	bl	80162e0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f81b 	bl	80016a6 <APPE_SysEvtReadyProcessing>
    break;
 8001670:	e004      	b.n	800167c <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f806 	bl	8001684 <APPE_SysEvtError>
    break;
 8001678:	e000      	b.n	800167c <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800167a:	bf00      	nop
  }

  return;
 800167c:	bf00      	nop
}
 800167e:	3720      	adds	r7, #32
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	330b      	adds	r3, #11
 8001692:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3302      	adds	r3, #2
 8001698:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800169a:	bf00      	nop
}
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b08a      	sub	sp, #40	@ 0x28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80016bc:	2300      	movs	r3, #0
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	330b      	adds	r3, #11
 80016ca:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	3302      	adds	r3, #2
 80016d0:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d11d      	bne.n	8001716 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80016da:	f7ff fe19 	bl	8001310 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80016de:	230f      	movs	r3, #15
 80016e0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80016e2:	237f      	movs	r3, #127	@ 0x7f
 80016e4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80016e6:	f7ff fe99 	bl	800141c <LL_DBGMCU_GetRevisionID>
 80016ea:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80016f2:	f7ff fe85 	bl	8001400 <LL_DBGMCU_GetDeviceID>
 80016f6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f014 fdd6 	bl	80162b4 <SHCI_C2_Config>

    APP_BLE_Init();
 8001708:	f016 fa08 	bl	8017b1c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f017 fe9c 	bl	801944c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001714:	e007      	b.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d103      	bne.n	8001726 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
  return;
 8001724:	bf00      	nop
 8001726:	bf00      	nop
}
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001736:	f005 fe2f 	bl	8007398 <HAL_GetTick>
 800173a:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001746:	d00a      	beq.n	800175e <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001748:	f005 fe3e 	bl	80073c8 <HAL_GetTickFreq>
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4413      	add	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001756:	e002      	b.n	800175e <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001758:	f7ff fe6e 	bl	8001438 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800175c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800175e:	f005 fe1b 	bl	8007398 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	429a      	cmp	r2, r3
 800176c:	d8f4      	bhi.n	8001758 <HAL_Delay+0x2a>
  }
}
 800176e:	bf00      	nop
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800177c:	f04f 30ff 	mov.w	r0, #4294967295
 8001780:	f017 fe94 	bl	80194ac <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}

08001788 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800178c:	bf00      	nop
}
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f017 fe82 	bl	80194ac <UTIL_SEQ_Run>
  return;
 80017a8:	bf00      	nop
}
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80017b8:	2100      	movs	r1, #0
 80017ba:	2008      	movs	r0, #8
 80017bc:	f017 ff94 	bl	80196e8 <UTIL_SEQ_SetTask>
  return;
 80017c0:	bf00      	nop
}
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017d0:	2002      	movs	r0, #2
 80017d2:	f017 fff5 	bl	80197c0 <UTIL_SEQ_SetEvt>
  return;
 80017d6:	bf00      	nop
}
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80017e6:	2002      	movs	r0, #2
 80017e8:	f018 f80a 	bl	8019800 <UTIL_SEQ_WaitEvt>
  return;
 80017ec:	bf00      	nop
}
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <LL_AHB1_GRP1_EnableClock>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80017fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001800:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001802:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800180c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001810:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001818:	68fb      	ldr	r3, [r7, #12]
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800182a:	2004      	movs	r0, #4
 800182c:	f7ff ffe2 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff ffdf 	bl	80017f4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	200b      	movs	r0, #11
 800183c:	f006 ff8b 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001840:	200b      	movs	r0, #11
 8001842:	f006 ffa2 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	200c      	movs	r0, #12
 800184c:	f006 ff83 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001850:	200c      	movs	r0, #12
 8001852:	f006 ff9a 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	200d      	movs	r0, #13
 800185c:	f006 ff7b 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001860:	200d      	movs	r0, #13
 8001862:	f006 ff92 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	200e      	movs	r0, #14
 800186c:	f006 ff73 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001870:	200e      	movs	r0, #14
 8001872:	f006 ff8a 	bl	800878a <HAL_NVIC_EnableIRQ>

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}

0800187a <LL_AHB2_GRP1_EnableClock>:
{
 800187a:	b480      	push	{r7}
 800187c:	b085      	sub	sp, #20
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001888:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4313      	orrs	r3, r2
 8001890:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4013      	ands	r3, r2
 800189c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800189e:	68fb      	ldr	r3, [r7, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c0:	2004      	movs	r0, #4
 80018c2:	f7ff ffda 	bl	800187a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7ff ffd7 	bl	800187a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff ffd4 	bl	800187a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2101      	movs	r1, #1
 80018d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018da:	f007 fdd5 	bl	8009488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80018de:	2200      	movs	r2, #0
 80018e0:	2183      	movs	r1, #131	@ 0x83
 80018e2:	481b      	ldr	r0, [pc, #108]	@ (8001950 <MX_GPIO_Init+0xa4>)
 80018e4:	f007 fdd0 	bl	8009488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018e8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018ee:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80018f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	4619      	mov	r1, r3
 80018fc:	4815      	ldr	r0, [pc, #84]	@ (8001954 <MX_GPIO_Init+0xa8>)
 80018fe:	f007 fb5d 	bl	8008fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001902:	2301      	movs	r3, #1
 8001904:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4619      	mov	r1, r3
 8001916:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800191a:	f007 fb4f 	bl	8008fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 800191e:	2383      	movs	r3, #131	@ 0x83
 8001920:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	@ (8001950 <MX_GPIO_Init+0xa4>)
 8001934:	f007 fb42 	bl	8008fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2028      	movs	r0, #40	@ 0x28
 800193e:	f006 ff0a 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001942:	2028      	movs	r0, #40	@ 0x28
 8001944:	f006 ff21 	bl	800878a <HAL_NVIC_EnableIRQ>

}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000400 	.word	0x48000400
 8001954:	48000800 	.word	0x48000800

08001958 <LL_EXTI_EnableIT_0_31>:
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <LL_EXTI_EnableIT_0_31+0x24>)
 8001962:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001966:	4905      	ldr	r1, [pc, #20]	@ (800197c <LL_EXTI_EnableIT_0_31+0x24>)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	58000800 	.word	0x58000800

08001980 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4904      	ldr	r1, [pc, #16]	@ (80019a0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]

}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	58000800 	.word	0x58000800

080019a4 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80019ba:	e005      	b.n	80019c8 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80019c0:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <ReadRtcSsrValue+0x3c>)
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1f5      	bne.n	80019bc <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80019d0:	683b      	ldr	r3, [r7, #0]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40002800 	.word	0x40002800

080019e4 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	460a      	mov	r2, r1
 80019ee:	71fb      	strb	r3, [r7, #7]
 80019f0:	4613      	mov	r3, r2
 80019f2:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80019f4:	79ba      	ldrb	r2, [r7, #6]
 80019f6:	491d      	ldr	r1, [pc, #116]	@ (8001a6c <LinkTimerAfter+0x88>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	3315      	adds	r3, #21
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b06      	cmp	r3, #6
 8001a0c:	d009      	beq.n	8001a22 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001a0e:	7bfa      	ldrb	r2, [r7, #15]
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3314      	adds	r3, #20
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001a22:	79fa      	ldrb	r2, [r7, #7]
 8001a24:	4911      	ldr	r1, [pc, #68]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	440b      	add	r3, r1
 8001a30:	3315      	adds	r3, #21
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001a36:	79fa      	ldrb	r2, [r7, #7]
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	440b      	add	r3, r1
 8001a44:	3314      	adds	r3, #20
 8001a46:	79ba      	ldrb	r2, [r7, #6]
 8001a48:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001a4a:	79ba      	ldrb	r2, [r7, #6]
 8001a4c:	4907      	ldr	r1, [pc, #28]	@ (8001a6c <LinkTimerAfter+0x88>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	3315      	adds	r3, #21
 8001a5a:	79fa      	ldrb	r2, [r7, #7]
 8001a5c:	701a      	strb	r2, [r3, #0]

  return;
 8001a5e:	bf00      	nop
}
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000450 	.word	0x20000450

08001a70 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	460a      	mov	r2, r1
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <LinkTimerBefore+0xb8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	79ba      	ldrb	r2, [r7, #6]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d032      	beq.n	8001af2 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001a8c:	79ba      	ldrb	r2, [r7, #6]
 8001a8e:	4927      	ldr	r1, [pc, #156]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	440b      	add	r3, r1
 8001a9a:	3314      	adds	r3, #20
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001aa0:	7bfa      	ldrb	r2, [r7, #15]
 8001aa2:	4922      	ldr	r1, [pc, #136]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	440b      	add	r3, r1
 8001aae:	3315      	adds	r3, #21
 8001ab0:	79fa      	ldrb	r2, [r7, #7]
 8001ab2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	491d      	ldr	r1, [pc, #116]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001ab8:	4613      	mov	r3, r2
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3315      	adds	r3, #21
 8001ac4:	79ba      	ldrb	r2, [r7, #6]
 8001ac6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001ac8:	79fa      	ldrb	r2, [r7, #7]
 8001aca:	4918      	ldr	r1, [pc, #96]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001acc:	4613      	mov	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	4413      	add	r3, r2
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	440b      	add	r3, r1
 8001ad6:	3314      	adds	r3, #20
 8001ad8:	7bfa      	ldrb	r2, [r7, #15]
 8001ada:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001adc:	79ba      	ldrb	r2, [r7, #6]
 8001ade:	4913      	ldr	r1, [pc, #76]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	440b      	add	r3, r1
 8001aea:	3314      	adds	r3, #20
 8001aec:	79fa      	ldrb	r2, [r7, #7]
 8001aee:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001af0:	e014      	b.n	8001b1c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	490d      	ldr	r1, [pc, #52]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	3315      	adds	r3, #21
 8001b02:	79ba      	ldrb	r2, [r7, #6]
 8001b04:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001b06:	79ba      	ldrb	r2, [r7, #6]
 8001b08:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <LinkTimerBefore+0xbc>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	440b      	add	r3, r1
 8001b14:	3314      	adds	r3, #20
 8001b16:	79fa      	ldrb	r2, [r7, #7]
 8001b18:	701a      	strb	r2, [r3, #0]
  return;
 8001b1a:	bf00      	nop
}
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200004e0 	.word	0x200004e0
 8001b2c:	20000450 	.word	0x20000450

08001b30 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b3a:	4b4e      	ldr	r3, [pc, #312]	@ (8001c74 <linkTimer+0x144>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b06      	cmp	r3, #6
 8001b42:	d118      	bne.n	8001b76 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b44:	4b4b      	ldr	r3, [pc, #300]	@ (8001c74 <linkTimer+0x144>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c78 <linkTimer+0x148>)
 8001b4c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001b4e:	4a49      	ldr	r2, [pc, #292]	@ (8001c74 <linkTimer+0x144>)
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001b54:	79fa      	ldrb	r2, [r7, #7]
 8001b56:	4949      	ldr	r1, [pc, #292]	@ (8001c7c <linkTimer+0x14c>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	3315      	adds	r3, #21
 8001b64:	2206      	movs	r2, #6
 8001b66:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b68:	4b45      	ldr	r3, [pc, #276]	@ (8001c80 <linkTimer+0x150>)
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	81fb      	strh	r3, [r7, #14]
 8001b74:	e078      	b.n	8001c68 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001b76:	f000 f909 	bl	8001d8c <ReturnTimeElapsed>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001b7e:	79fa      	ldrb	r2, [r7, #7]
 8001b80:	493e      	ldr	r1, [pc, #248]	@ (8001c7c <linkTimer+0x14c>)
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	440b      	add	r3, r1
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	89fb      	ldrh	r3, [r7, #14]
 8001b92:	79fa      	ldrb	r2, [r7, #7]
 8001b94:	4419      	add	r1, r3
 8001b96:	4839      	ldr	r0, [pc, #228]	@ (8001c7c <linkTimer+0x14c>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4403      	add	r3, r0
 8001ba2:	3308      	adds	r3, #8
 8001ba4:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001ba6:	79fa      	ldrb	r2, [r7, #7]
 8001ba8:	4934      	ldr	r1, [pc, #208]	@ (8001c7c <linkTimer+0x14c>)
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3308      	adds	r3, #8
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001bba:	4b2e      	ldr	r3, [pc, #184]	@ (8001c74 <linkTimer+0x144>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c7c <linkTimer+0x14c>)
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	440b      	add	r3, r1
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	4413      	add	r3, r2
 8001bce:	3308      	adds	r3, #8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d337      	bcc.n	8001c48 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	@ (8001c74 <linkTimer+0x144>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001bde:	7b7a      	ldrb	r2, [r7, #13]
 8001be0:	4926      	ldr	r1, [pc, #152]	@ (8001c7c <linkTimer+0x14c>)
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	00db      	lsls	r3, r3, #3
 8001bea:	440b      	add	r3, r1
 8001bec:	3315      	adds	r3, #21
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001bf2:	e013      	b.n	8001c1c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001bf4:	7b7a      	ldrb	r2, [r7, #13]
 8001bf6:	4921      	ldr	r1, [pc, #132]	@ (8001c7c <linkTimer+0x14c>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	4413      	add	r3, r2
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	440b      	add	r3, r1
 8001c02:	3315      	adds	r3, #21
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001c08:	7b7a      	ldrb	r2, [r7, #13]
 8001c0a:	491c      	ldr	r1, [pc, #112]	@ (8001c7c <linkTimer+0x14c>)
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4413      	add	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	440b      	add	r3, r1
 8001c16:	3315      	adds	r3, #21
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001c1c:	7b3b      	ldrb	r3, [r7, #12]
 8001c1e:	2b06      	cmp	r3, #6
 8001c20:	d00b      	beq.n	8001c3a <linkTimer+0x10a>
 8001c22:	7b3a      	ldrb	r2, [r7, #12]
 8001c24:	4915      	ldr	r1, [pc, #84]	@ (8001c7c <linkTimer+0x14c>)
 8001c26:	4613      	mov	r3, r2
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	4413      	add	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	440b      	add	r3, r1
 8001c30:	3308      	adds	r3, #8
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d2dc      	bcs.n	8001bf4 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001c3a:	7b7a      	ldrb	r2, [r7, #13]
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fecf 	bl	80019e4 <LinkTimerAfter>
 8001c46:	e00f      	b.n	8001c68 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <linkTimer+0x144>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff0c 	bl	8001a70 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001c58:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <linkTimer+0x144>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	@ (8001c78 <linkTimer+0x148>)
 8001c60:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001c62:	4a04      	ldr	r2, [pc, #16]	@ (8001c74 <linkTimer+0x144>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001c68:	89fb      	ldrh	r3, [r7, #14]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200004e0 	.word	0x200004e0
 8001c78:	200004e1 	.word	0x200004e1
 8001c7c:	20000450 	.word	0x20000450
 8001c80:	200004e4 	.word	0x200004e4

08001c84 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001c94:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d111      	bne.n	8001cc4 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ca0:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	4b36      	ldr	r3, [pc, #216]	@ (8001d80 <UnlinkTimer+0xfc>)
 8001ca8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001caa:	79fa      	ldrb	r2, [r7, #7]
 8001cac:	4935      	ldr	r1, [pc, #212]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3315      	adds	r3, #21
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e03e      	b.n	8001d42 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001cc4:	79fa      	ldrb	r2, [r7, #7]
 8001cc6:	492f      	ldr	r1, [pc, #188]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cc8:	4613      	mov	r3, r2
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4413      	add	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	440b      	add	r3, r1
 8001cd2:	3314      	adds	r3, #20
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	492a      	ldr	r1, [pc, #168]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	440b      	add	r3, r1
 8001ce6:	3315      	adds	r3, #21
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001cec:	79f9      	ldrb	r1, [r7, #7]
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	4824      	ldr	r0, [pc, #144]	@ (8001d84 <UnlinkTimer+0x100>)
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	440b      	add	r3, r1
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4403      	add	r3, r0
 8001cfc:	3315      	adds	r3, #21
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b2d8      	uxtb	r0, r3
 8001d02:	4920      	ldr	r1, [pc, #128]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3315      	adds	r3, #21
 8001d10:	4602      	mov	r2, r0
 8001d12:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d14:	7bbb      	ldrb	r3, [r7, #14]
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d013      	beq.n	8001d42 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001d1a:	79f9      	ldrb	r1, [r7, #7]
 8001d1c:	7bba      	ldrb	r2, [r7, #14]
 8001d1e:	4819      	ldr	r0, [pc, #100]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d20:	460b      	mov	r3, r1
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	440b      	add	r3, r1
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4403      	add	r3, r0
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2d8      	uxtb	r0, r3
 8001d30:	4914      	ldr	r1, [pc, #80]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3314      	adds	r3, #20
 8001d3e:	4602      	mov	r2, r0
 8001d40:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001d42:	79fa      	ldrb	r2, [r7, #7]
 8001d44:	490f      	ldr	r1, [pc, #60]	@ (8001d84 <UnlinkTimer+0x100>)
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	440b      	add	r3, r1
 8001d50:	330c      	adds	r3, #12
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001d56:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <UnlinkTimer+0xf8>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	2b06      	cmp	r3, #6
 8001d5e:	d107      	bne.n	8001d70 <UnlinkTimer+0xec>
 8001d60:	79bb      	ldrb	r3, [r7, #6]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d104      	bne.n	8001d70 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d66:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <UnlinkTimer+0x104>)
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
}
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	200004e0 	.word	0x200004e0
 8001d80:	200004e1 	.word	0x200004e1
 8001d84:	20000450 	.word	0x20000450
 8001d88:	200004e4 	.word	0x200004e4

08001d8c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d026      	beq.n	8001dea <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001d9c:	f7ff fe02 	bl	80019a4 <ReadRtcSsrValue>
 8001da0:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d805      	bhi.n	8001db8 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001dac:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	607b      	str	r3, [r7, #4]
 8001db6:	e00a      	b.n	8001dce <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001db8:	4b11      	ldr	r3, [pc, #68]	@ (8001e00 <ReturnTimeElapsed+0x74>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <ReturnTimeElapsed+0x70>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	4413      	add	r3, r2
 8001dcc:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <ReturnTimeElapsed+0x78>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8001e08 <ReturnTimeElapsed+0x7c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	40d3      	lsrs	r3, r2
 8001de6:	607b      	str	r3, [r7, #4]
 8001de8:	e001      	b.n	8001dee <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	b29b      	uxth	r3, r3
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200004e4 	.word	0x200004e4
 8001e00:	200004ec 	.word	0x200004ec
 8001e04:	200004ea 	.word	0x200004ea
 8001e08:	200004e9 	.word	0x200004e9

08001e0c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d108      	bne.n	8001e2e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e1c:	f7ff fdc2 	bl	80019a4 <ReadRtcSsrValue>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4a21      	ldr	r2, [pc, #132]	@ (8001ea8 <RestartWakeupCounter+0x9c>)
 8001e24:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001e26:	2003      	movs	r0, #3
 8001e28:	f006 fcd7 	bl	80087da <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001e2c:	e039      	b.n	8001ea2 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d803      	bhi.n	8001e3c <RestartWakeupCounter+0x30>
 8001e34:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <RestartWakeupCounter+0xa0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d002      	beq.n	8001e42 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001e42:	bf00      	nop
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f8      	beq.n	8001e44 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001e62:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <RestartWakeupCounter+0xa8>)
 8001e66:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e6a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f006 fcc2 	bl	80087f6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <RestartWakeupCounter+0xac>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	0c1b      	lsrs	r3, r3, #16
 8001e78:	041b      	lsls	r3, r3, #16
 8001e7a:	88fa      	ldrh	r2, [r7, #6]
 8001e7c:	490e      	ldr	r1, [pc, #56]	@ (8001eb8 <RestartWakeupCounter+0xac>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001e82:	f7ff fd8f 	bl	80019a4 <ReadRtcSsrValue>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4a07      	ldr	r2, [pc, #28]	@ (8001ea8 <RestartWakeupCounter+0x9c>)
 8001e8a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <RestartWakeupCounter+0xa4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e9a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001e9c:	f3af 8000 	nop.w
  return ;
 8001ea0:	bf00      	nop
}
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200004e4 	.word	0x200004e4
 8001eac:	200004e9 	.word	0x200004e9
 8001eb0:	20000d28 	.word	0x20000d28
 8001eb4:	58000800 	.word	0x58000800
 8001eb8:	40002800 	.word	0x40002800

08001ebc <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001ec2:	4b45      	ldr	r3, [pc, #276]	@ (8001fd8 <RescheduleTimerList+0x11c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ece:	d107      	bne.n	8001ee0 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001ed0:	bf00      	nop
 8001ed2:	4b42      	ldr	r3, [pc, #264]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f8      	bne.n	8001ed2 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fdc <RescheduleTimerList+0x120>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eee:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe0 <RescheduleTimerList+0x124>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	493a      	ldr	r1, [pc, #232]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	3308      	adds	r3, #8
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001f0a:	f7ff ff3f 	bl	8001d8c <ReturnTimeElapsed>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d205      	bcs.n	8001f26 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f1e:	4b32      	ldr	r3, [pc, #200]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
 8001f24:	e04d      	b.n	8001fc2 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	4a30      	ldr	r2, [pc, #192]	@ (8001fec <RescheduleTimerList+0x130>)
 8001f2a:	8812      	ldrh	r2, [r2, #0]
 8001f2c:	b292      	uxth	r2, r2
 8001f2e:	4413      	add	r3, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d906      	bls.n	8001f46 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <RescheduleTimerList+0x130>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
 8001f44:	e03d      	b.n	8001fc2 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001f50:	4b25      	ldr	r3, [pc, #148]	@ (8001fe8 <RescheduleTimerList+0x12c>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f56:	e034      	b.n	8001fc2 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001f58:	7bfa      	ldrb	r2, [r7, #15]
 8001f5a:	4922      	ldr	r1, [pc, #136]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	440b      	add	r3, r1
 8001f66:	3308      	adds	r3, #8
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d20a      	bcs.n	8001f86 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	491c      	ldr	r1, [pc, #112]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f74:	4613      	mov	r3, r2
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3308      	adds	r3, #8
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e013      	b.n	8001fae <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001f86:	7bfa      	ldrb	r2, [r7, #15]
 8001f88:	4916      	ldr	r1, [pc, #88]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	3308      	adds	r3, #8
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	1ac9      	subs	r1, r1, r3
 8001f9e:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4403      	add	r3, r0
 8001faa:	3308      	adds	r3, #8
 8001fac:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	490c      	ldr	r1, [pc, #48]	@ (8001fe4 <RescheduleTimerList+0x128>)
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	440b      	add	r3, r1
 8001fbc:	3315      	adds	r3, #21
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2b06      	cmp	r3, #6
 8001fc6:	d1c7      	bne.n	8001f58 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001fc8:	89bb      	ldrh	r3, [r7, #12]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff1e 	bl	8001e0c <RestartWakeupCounter>

  return ;
 8001fd0:	bf00      	nop
}
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40002800 	.word	0x40002800
 8001fdc:	20000d28 	.word	0x20000d28
 8001fe0:	200004e0 	.word	0x200004e0
 8001fe4:	20000450 	.word	0x20000450
 8001fe8:	200004e8 	.word	0x200004e8
 8001fec:	200004ee 	.word	0x200004ee

08001ff0 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	@ 0x28
 8001ff4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffa:	617b      	str	r3, [r7, #20]
  return(result);
 8001ffc:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002000:	b672      	cpsid	i
}
 8002002:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002004:	4b59      	ldr	r3, [pc, #356]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	22ca      	movs	r2, #202	@ 0xca
 800200a:	625a      	str	r2, [r3, #36]	@ 0x24
 800200c:	4b57      	ldr	r3, [pc, #348]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2253      	movs	r2, #83	@ 0x53
 8002012:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002014:	4b55      	ldr	r3, [pc, #340]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002022:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002024:	4b52      	ldr	r3, [pc, #328]	@ (8002170 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800202c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002030:	4950      	ldr	r1, [pc, #320]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002032:	4613      	mov	r3, r2
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	330c      	adds	r3, #12
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d16e      	bne.n	8002124 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002046:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800204a:	494a      	ldr	r1, [pc, #296]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800205a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800205e:	4945      	ldr	r1, [pc, #276]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3310      	adds	r3, #16
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002070:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d04c      	beq.n	8002114 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800207a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800207e:	493d      	ldr	r1, [pc, #244]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	330d      	adds	r3, #13
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d124      	bne.n	80020de <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002098:	2101      	movs	r1, #1
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fdf2 	bl	8001c84 <UnlinkTimer>
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	f383 8810 	msr	PRIMASK, r3
}
 80020aa:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80020ac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80020b0:	4930      	ldr	r1, [pc, #192]	@ (8002174 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80020b2:	4613      	mov	r3, r2
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	3304      	adds	r3, #4
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f9b8 	bl	800243c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020cc:	4b27      	ldr	r3, [pc, #156]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	22ca      	movs	r2, #202	@ 0xca
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80020d4:	4b25      	ldr	r3, [pc, #148]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2253      	movs	r2, #83	@ 0x53
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24
 80020dc:	e012      	b.n	8002104 <HW_TS_RTC_Wakeup_Handler+0x114>
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f383 8810 	msr	PRIMASK, r3
}
 80020e8:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80020ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f920 	bl	8002334 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80020f4:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	22ca      	movs	r2, #202	@ 0xca
 80020fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2253      	movs	r2, #83	@ 0x53
 8002102:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002104:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	4619      	mov	r1, r3
 800210c:	69b8      	ldr	r0, [r7, #24]
 800210e:	f000 fa1b 	bl	8002548 <HW_TS_RTC_Int_AppNot>
 8002112:	e022      	b.n	800215a <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002114:	f7ff fed2 	bl	8001ebc <RescheduleTimerList>
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f383 8810 	msr	PRIMASK, r3
}
 8002122:	e01a      	b.n	800215a <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002124:	bf00      	nop
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f8      	beq.n	8002126 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002134:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002144:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002146:	4b0d      	ldr	r3, [pc, #52]	@ (800217c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002148:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002150:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f383 8810 	msr	PRIMASK, r3
}
 8002158:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800215a:	4b04      	ldr	r3, [pc, #16]	@ (800216c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	22ff      	movs	r2, #255	@ 0xff
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002162:	bf00      	nop
}
 8002164:	3728      	adds	r7, #40	@ 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000d28 	.word	0x20000d28
 8002170:	200004e0 	.word	0x200004e0
 8002174:	20000450 	.word	0x20000450
 8002178:	200004e8 	.word	0x200004e8
 800217c:	58000800 	.word	0x58000800

08002180 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800218c:	4b5e      	ldr	r3, [pc, #376]	@ (8002308 <HW_TS_Init+0x188>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	22ca      	movs	r2, #202	@ 0xca
 8002192:	625a      	str	r2, [r3, #36]	@ 0x24
 8002194:	4b5c      	ldr	r3, [pc, #368]	@ (8002308 <HW_TS_Init+0x188>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2253      	movs	r2, #83	@ 0x53
 800219a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800219c:	4b5b      	ldr	r3, [pc, #364]	@ (800230c <HW_TS_Init+0x18c>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a5a      	ldr	r2, [pc, #360]	@ (800230c <HW_TS_Init+0x18c>)
 80021a2:	f043 0320 	orr.w	r3, r3, #32
 80021a6:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80021a8:	4b58      	ldr	r3, [pc, #352]	@ (800230c <HW_TS_Init+0x18c>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	f1c3 0304 	rsb	r3, r3, #4
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	4b55      	ldr	r3, [pc, #340]	@ (8002310 <HW_TS_Init+0x190>)
 80021bc:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80021be:	4b53      	ldr	r3, [pc, #332]	@ (800230c <HW_TS_Init+0x18c>)
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021c6:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80021ca:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	fa92 f2a2 	rbit	r2, r2
 80021d2:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021d8:	697a      	ldr	r2, [r7, #20]
 80021da:	2a00      	cmp	r2, #0
 80021dc:	d101      	bne.n	80021e2 <HW_TS_Init+0x62>
  {
    return 32U;
 80021de:	2220      	movs	r2, #32
 80021e0:	e003      	b.n	80021ea <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	fab2 f282 	clz	r2, r2
 80021e8:	b2d2      	uxtb	r2, r2
 80021ea:	40d3      	lsrs	r3, r2
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	3301      	adds	r3, #1
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4b48      	ldr	r3, [pc, #288]	@ (8002314 <HW_TS_Init+0x194>)
 80021f4:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80021f6:	4b45      	ldr	r3, [pc, #276]	@ (800230c <HW_TS_Init+0x18c>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002200:	b29b      	uxth	r3, r3
 8002202:	3301      	adds	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <HW_TS_Init+0x198>)
 8002208:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800220a:	4b43      	ldr	r3, [pc, #268]	@ (8002318 <HW_TS_Init+0x198>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	3b01      	subs	r3, #1
 8002210:	4a40      	ldr	r2, [pc, #256]	@ (8002314 <HW_TS_Init+0x194>)
 8002212:	7812      	ldrb	r2, [r2, #0]
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800221c:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <HW_TS_Init+0x190>)
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	40d3      	lsrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800222a:	4293      	cmp	r3, r2
 800222c:	d904      	bls.n	8002238 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800222e:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <HW_TS_Init+0x19c>)
 8002230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	e003      	b.n	8002240 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b37      	ldr	r3, [pc, #220]	@ (800231c <HW_TS_Init+0x19c>)
 800223e:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002240:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002244:	f7ff fb9c 	bl	8001980 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002248:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800224c:	f7ff fb84 	bl	8001958 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d13d      	bne.n	80022d2 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002256:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <HW_TS_Init+0x1a0>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800225c:	4b31      	ldr	r3, [pc, #196]	@ (8002324 <HW_TS_Init+0x1a4>)
 800225e:	f04f 32ff 	mov.w	r2, #4294967295
 8002262:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002264:	2300      	movs	r3, #0
 8002266:	77fb      	strb	r3, [r7, #31]
 8002268:	e00c      	b.n	8002284 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800226a:	7ffa      	ldrb	r2, [r7, #31]
 800226c:	492e      	ldr	r1, [pc, #184]	@ (8002328 <HW_TS_Init+0x1a8>)
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	330c      	adds	r3, #12
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	3301      	adds	r3, #1
 8002282:	77fb      	strb	r3, [r7, #31]
 8002284:	7ffb      	ldrb	r3, [r7, #31]
 8002286:	2b05      	cmp	r3, #5
 8002288:	d9ef      	bls.n	800226a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800228a:	4b28      	ldr	r3, [pc, #160]	@ (800232c <HW_TS_Init+0x1ac>)
 800228c:	2206      	movs	r2, #6
 800228e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002290:	4b1d      	ldr	r3, [pc, #116]	@ (8002308 <HW_TS_Init+0x188>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b1c      	ldr	r3, [pc, #112]	@ (8002308 <HW_TS_Init+0x188>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800229e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80022a0:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <HW_TS_Init+0x188>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <HW_TS_Init+0x188>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80022b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002330 <HW_TS_Init+0x1b0>)
 80022b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022b8:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80022ba:	2003      	movs	r0, #3
 80022bc:	f006 fa9b 	bl	80087f6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <HW_TS_Init+0x188>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HW_TS_Init+0x188>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	e009      	b.n	80022e6 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HW_TS_Init+0x188>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d002      	beq.n	80022e6 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80022e0:	2003      	movs	r0, #3
 80022e2:	f006 fa7a 	bl	80087da <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HW_TS_Init+0x188>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	22ff      	movs	r2, #255	@ 0xff
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80022ee:	2200      	movs	r2, #0
 80022f0:	2103      	movs	r1, #3
 80022f2:	2003      	movs	r0, #3
 80022f4:	f006 fa2f 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022f8:	2003      	movs	r0, #3
 80022fa:	f006 fa46 	bl	800878a <HAL_NVIC_EnableIRQ>

  return;
 80022fe:	bf00      	nop
}
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000d28 	.word	0x20000d28
 800230c:	40002800 	.word	0x40002800
 8002310:	200004e9 	.word	0x200004e9
 8002314:	200004ea 	.word	0x200004ea
 8002318:	200004ec 	.word	0x200004ec
 800231c:	200004ee 	.word	0x200004ee
 8002320:	200004e8 	.word	0x200004e8
 8002324:	200004e4 	.word	0x200004e4
 8002328:	20000450 	.word	0x20000450
 800232c:	200004e0 	.word	0x200004e0
 8002330:	58000800 	.word	0x58000800

08002334 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800233e:	f3ef 8310 	mrs	r3, PRIMASK
 8002342:	60fb      	str	r3, [r7, #12]
  return(result);
 8002344:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002346:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002348:	b672      	cpsid	i
}
 800234a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800234c:	2003      	movs	r0, #3
 800234e:	f006 fa2a 	bl	80087a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002352:	4b34      	ldr	r3, [pc, #208]	@ (8002424 <HW_TS_Stop+0xf0>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	22ca      	movs	r2, #202	@ 0xca
 8002358:	625a      	str	r2, [r3, #36]	@ 0x24
 800235a:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <HW_TS_Stop+0xf0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2253      	movs	r2, #83	@ 0x53
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002362:	79fa      	ldrb	r2, [r7, #7]
 8002364:	4930      	ldr	r1, [pc, #192]	@ (8002428 <HW_TS_Stop+0xf4>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	330c      	adds	r3, #12
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d142      	bne.n	8002400 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fc80 	bl	8001c84 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002384:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HW_TS_Stop+0xf8>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800238a:	7cfb      	ldrb	r3, [r7, #19]
 800238c:	2b06      	cmp	r3, #6
 800238e:	d12f      	bne.n	80023f0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002390:	4b27      	ldr	r3, [pc, #156]	@ (8002430 <HW_TS_Stop+0xfc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800239c:	d107      	bne.n	80023ae <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800239e:	bf00      	nop
 80023a0:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f8      	bne.n	80023a0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80023ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023bc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80023be:	bf00      	nop
 80023c0:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f8      	beq.n	80023c0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <HW_TS_Stop+0xf0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80023de:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80023e0:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <HW_TS_Stop+0x100>)
 80023e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023e6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80023e8:	2003      	movs	r0, #3
 80023ea:	f006 fa04 	bl	80087f6 <HAL_NVIC_ClearPendingIRQ>
 80023ee:	e007      	b.n	8002400 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <HW_TS_Stop+0x104>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	7cfa      	ldrb	r2, [r7, #19]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80023fc:	f7ff fd5e 	bl	8001ebc <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <HW_TS_Stop+0xf0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	22ff      	movs	r2, #255	@ 0xff
 8002406:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002408:	2003      	movs	r0, #3
 800240a:	f006 f9be 	bl	800878a <HAL_NVIC_EnableIRQ>
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f383 8810 	msr	PRIMASK, r3
}
 8002418:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800241a:	bf00      	nop
}
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000d28 	.word	0x20000d28
 8002428:	20000450 	.word	0x20000450
 800242c:	200004e0 	.word	0x200004e0
 8002430:	40002800 	.word	0x40002800
 8002434:	58000800 	.word	0x58000800
 8002438:	200004e1 	.word	0x200004e1

0800243c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002448:	79fa      	ldrb	r2, [r7, #7]
 800244a:	493b      	ldr	r1, [pc, #236]	@ (8002538 <HW_TS_Start+0xfc>)
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	440b      	add	r3, r1
 8002456:	330c      	adds	r3, #12
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d103      	bne.n	8002468 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff ff66 	bl	8002334 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002468:	f3ef 8310 	mrs	r3, PRIMASK
 800246c:	60fb      	str	r3, [r7, #12]
  return(result);
 800246e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002472:	b672      	cpsid	i
}
 8002474:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002476:	2003      	movs	r0, #3
 8002478:	f006 f995 	bl	80087a6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800247c:	4b2f      	ldr	r3, [pc, #188]	@ (800253c <HW_TS_Start+0x100>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	22ca      	movs	r2, #202	@ 0xca
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
 8002484:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HW_TS_Start+0x100>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2253      	movs	r2, #83	@ 0x53
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800248c:	79fa      	ldrb	r2, [r7, #7]
 800248e:	492a      	ldr	r1, [pc, #168]	@ (8002538 <HW_TS_Start+0xfc>)
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	440b      	add	r3, r1
 800249a:	330c      	adds	r3, #12
 800249c:	2202      	movs	r2, #2
 800249e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80024a0:	79fa      	ldrb	r2, [r7, #7]
 80024a2:	4925      	ldr	r1, [pc, #148]	@ (8002538 <HW_TS_Start+0xfc>)
 80024a4:	4613      	mov	r3, r2
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	4413      	add	r3, r2
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	440b      	add	r3, r1
 80024ae:	3308      	adds	r3, #8
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80024b4:	79fa      	ldrb	r2, [r7, #7]
 80024b6:	4920      	ldr	r1, [pc, #128]	@ (8002538 <HW_TS_Start+0xfc>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	3304      	adds	r3, #4
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff fb30 	bl	8001b30 <linkTimer>
 80024d0:	4603      	mov	r3, r0
 80024d2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80024d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HW_TS_Start+0x104>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HW_TS_Start+0x108>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	7c7a      	ldrb	r2, [r7, #17]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d002      	beq.n	80024ec <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80024e6:	f7ff fce9 	bl	8001ebc <RescheduleTimerList>
 80024ea:	e013      	b.n	8002514 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80024ec:	79fa      	ldrb	r2, [r7, #7]
 80024ee:	4912      	ldr	r1, [pc, #72]	@ (8002538 <HW_TS_Start+0xfc>)
 80024f0:	4613      	mov	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	3308      	adds	r3, #8
 80024fc:	6819      	ldr	r1, [r3, #0]
 80024fe:	8a7b      	ldrh	r3, [r7, #18]
 8002500:	79fa      	ldrb	r2, [r7, #7]
 8002502:	1ac9      	subs	r1, r1, r3
 8002504:	480c      	ldr	r0, [pc, #48]	@ (8002538 <HW_TS_Start+0xfc>)
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4403      	add	r3, r0
 8002510:	3308      	adds	r3, #8
 8002512:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HW_TS_Start+0x100>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	22ff      	movs	r2, #255	@ 0xff
 800251a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800251c:	2003      	movs	r0, #3
 800251e:	f006 f934 	bl	800878a <HAL_NVIC_EnableIRQ>
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	f383 8810 	msr	PRIMASK, r3
}
 800252c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800252e:	bf00      	nop
}
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000450 	.word	0x20000450
 800253c:	20000d28 	.word	0x20000d28
 8002540:	200004e0 	.word	0x200004e0
 8002544:	200004e1 	.word	0x200004e1

08002548 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	460b      	mov	r3, r1
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4798      	blx	r3

  return;
 800255a:	bf00      	nop
}
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <LL_AHB2_GRP1_EnableClock>:
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800256a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800256e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4313      	orrs	r3, r2
 8002578:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4013      	ands	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800259c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4013      	ands	r3, r2
 80025b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025b8:	68fb      	ldr	r3, [r7, #12]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80025ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80025d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80025dc:	4013      	ands	r3, r2
 80025de:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002660 <MX_I2C1_Init+0x74>)
 80025f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002664 <MX_I2C1_Init+0x78>)
 80025f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002660 <MX_I2C1_Init+0x74>)
 80025f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002668 <MX_I2C1_Init+0x7c>)
 80025fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <MX_I2C1_Init+0x74>)
 80025fe:	2200      	movs	r2, #0
 8002600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002602:	4b17      	ldr	r3, [pc, #92]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002604:	2201      	movs	r2, #1
 8002606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002608:	4b15      	ldr	r3, [pc, #84]	@ (8002660 <MX_I2C1_Init+0x74>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800260e:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002610:	2200      	movs	r2, #0
 8002612:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002614:	4b12      	ldr	r3, [pc, #72]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002616:	2200      	movs	r2, #0
 8002618:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <MX_I2C1_Init+0x74>)
 800261c:	2200      	movs	r2, #0
 800261e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002620:	4b0f      	ldr	r3, [pc, #60]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002626:	480e      	ldr	r0, [pc, #56]	@ (8002660 <MX_I2C1_Init+0x74>)
 8002628:	f006 ff9c 	bl	8009564 <HAL_I2C_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002632:	f000 fb63 	bl	8002cfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002636:	2100      	movs	r1, #0
 8002638:	4809      	ldr	r0, [pc, #36]	@ (8002660 <MX_I2C1_Init+0x74>)
 800263a:	f007 fbdf 	bl	8009dfc <HAL_I2CEx_ConfigAnalogFilter>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002644:	f000 fb5a 	bl	8002cfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002648:	2100      	movs	r1, #0
 800264a:	4805      	ldr	r0, [pc, #20]	@ (8002660 <MX_I2C1_Init+0x74>)
 800264c:	f007 fc21 	bl	8009e92 <HAL_I2CEx_ConfigDigitalFilter>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002656:	f000 fb51 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200004f0 	.word	0x200004f0
 8002664:	40005400 	.word	0x40005400
 8002668:	10707dbc 	.word	0x10707dbc

0800266c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002670:	4b1d      	ldr	r3, [pc, #116]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002672:	4a1e      	ldr	r2, [pc, #120]	@ (80026ec <MX_I2C3_Init+0x80>)
 8002674:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00300B29;
 8002676:	4b1c      	ldr	r3, [pc, #112]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002678:	4a1d      	ldr	r2, [pc, #116]	@ (80026f0 <MX_I2C3_Init+0x84>)
 800267a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800267c:	4b1a      	ldr	r3, [pc, #104]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002682:	4b19      	ldr	r3, [pc, #100]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002684:	2201      	movs	r2, #1
 8002686:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002688:	4b17      	ldr	r3, [pc, #92]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800268e:	4b16      	ldr	r3, [pc, #88]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002694:	4b14      	ldr	r3, [pc, #80]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800269a:	4b13      	ldr	r3, [pc, #76]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 800269c:	2200      	movs	r2, #0
 800269e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026a0:	4b11      	ldr	r3, [pc, #68]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80026a6:	4810      	ldr	r0, [pc, #64]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026a8:	f006 ff5c 	bl	8009564 <HAL_I2C_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80026b2:	f000 fb23 	bl	8002cfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80026b6:	2100      	movs	r1, #0
 80026b8:	480b      	ldr	r0, [pc, #44]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026ba:	f007 fb9f 	bl	8009dfc <HAL_I2CEx_ConfigAnalogFilter>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80026c4:	f000 fb1a 	bl	8002cfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80026c8:	2100      	movs	r1, #0
 80026ca:	4807      	ldr	r0, [pc, #28]	@ (80026e8 <MX_I2C3_Init+0x7c>)
 80026cc:	f007 fbe1 	bl	8009e92 <HAL_I2CEx_ConfigDigitalFilter>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80026d6:	f000 fb11 	bl	8002cfc <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 80026da:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80026de:	f007 fc25 	bl	8009f2c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000544 	.word	0x20000544
 80026ec:	40005c00 	.word	0x40005c00
 80026f0:	00300b29 	.word	0x00300b29

080026f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b09c      	sub	sp, #112	@ 0x70
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026fc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	2250      	movs	r2, #80	@ 0x50
 8002712:	2100      	movs	r1, #0
 8002714:	4618      	mov	r0, r3
 8002716:	f019 f85c 	bl	801b7d2 <memset>
  if(i2cHandle->Instance==I2C1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a37      	ldr	r2, [pc, #220]	@ (80027fc <HAL_I2C_MspInit+0x108>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d127      	bne.n	8002774 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002724:	2304      	movs	r3, #4
 8002726:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002728:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272e:	f107 030c 	add.w	r3, r7, #12
 8002732:	4618      	mov	r0, r3
 8002734:	f00a fce9 	bl	800d10a <HAL_RCCEx_PeriphCLKConfig>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800273e:	f000 fadd 	bl	8002cfc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	2002      	movs	r0, #2
 8002744:	f7ff ff0d 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002748:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800274c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800274e:	2312      	movs	r3, #18
 8002750:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002756:	2300      	movs	r3, #0
 8002758:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800275a:	2304      	movs	r3, #4
 800275c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002762:	4619      	mov	r1, r3
 8002764:	4826      	ldr	r0, [pc, #152]	@ (8002800 <HAL_I2C_MspInit+0x10c>)
 8002766:	f006 fc29 	bl	8008fbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800276a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800276e:	f7ff ff11 	bl	8002594 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002772:	e03e      	b.n	80027f2 <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a22      	ldr	r2, [pc, #136]	@ (8002804 <HAL_I2C_MspInit+0x110>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d139      	bne.n	80027f2 <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800277e:	2308      	movs	r3, #8
 8002780:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002782:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002786:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002788:	f107 030c 	add.w	r3, r7, #12
 800278c:	4618      	mov	r0, r3
 800278e:	f00a fcbc 	bl	800d10a <HAL_RCCEx_PeriphCLKConfig>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8002798:	f000 fab0 	bl	8002cfc <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279c:	2001      	movs	r0, #1
 800279e:	f7ff fee0 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	2002      	movs	r0, #2
 80027a4:	f7ff fedd 	bl	8002562 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ac:	2312      	movs	r3, #18
 80027ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027b8:	2304      	movs	r3, #4
 80027ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027c0:	4619      	mov	r1, r3
 80027c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027c6:	f006 fbf9 	bl	8008fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027ca:	2310      	movs	r3, #16
 80027cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027ce:	2312      	movs	r3, #18
 80027d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d6:	2300      	movs	r3, #0
 80027d8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80027da:	2304      	movs	r3, #4
 80027dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027de:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027e2:	4619      	mov	r1, r3
 80027e4:	4806      	ldr	r0, [pc, #24]	@ (8002800 <HAL_I2C_MspInit+0x10c>)
 80027e6:	f006 fbe9 	bl	8008fbc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027ea:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80027ee:	f7ff fed1 	bl	8002594 <LL_APB1_GRP1_EnableClock>
}
 80027f2:	bf00      	nop
 80027f4:	3770      	adds	r7, #112	@ 0x70
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40005400 	.word	0x40005400
 8002800:	48000400 	.word	0x48000400
 8002804:	40005c00 	.word	0x40005c00

08002808 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a13      	ldr	r2, [pc, #76]	@ (8002864 <HAL_I2C_MspDeInit+0x5c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d10e      	bne.n	8002838 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800281a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800281e:	f7ff fed2 	bl	80025c6 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002822:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002826:	4810      	ldr	r0, [pc, #64]	@ (8002868 <HAL_I2C_MspDeInit+0x60>)
 8002828:	f006 fd38 	bl	800929c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800282c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002830:	480d      	ldr	r0, [pc, #52]	@ (8002868 <HAL_I2C_MspDeInit+0x60>)
 8002832:	f006 fd33 	bl	800929c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8002836:	e011      	b.n	800285c <HAL_I2C_MspDeInit+0x54>
  else if(i2cHandle->Instance==I2C3)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a0b      	ldr	r2, [pc, #44]	@ (800286c <HAL_I2C_MspDeInit+0x64>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d10c      	bne.n	800285c <HAL_I2C_MspDeInit+0x54>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002842:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002846:	f7ff febe 	bl	80025c6 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_7);
 800284a:	2180      	movs	r1, #128	@ 0x80
 800284c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002850:	f006 fd24 	bl	800929c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8002854:	2110      	movs	r1, #16
 8002856:	4804      	ldr	r0, [pc, #16]	@ (8002868 <HAL_I2C_MspDeInit+0x60>)
 8002858:	f006 fd20 	bl	800929c <HAL_GPIO_DeInit>
}
 800285c:	bf00      	nop
 800285e:	3708      	adds	r7, #8
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40005400 	.word	0x40005400
 8002868:	48000400 	.word	0x48000400
 800286c:	40005c00 	.word	0x40005c00

08002870 <LL_AHB3_GRP1_EnableClock>:
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800287c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800287e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4313      	orrs	r3, r2
 8002886:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800288c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002894:	68fb      	ldr	r3, [r7, #12]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <MX_IPCC_Init+0x20>)
 80028aa:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <MX_IPCC_Init+0x24>)
 80028ac:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <MX_IPCC_Init+0x20>)
 80028b0:	f007 fb4e 	bl	8009f50 <HAL_IPCC_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80028ba:	f000 fa1f 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000598 	.word	0x20000598
 80028c8:	58000c00 	.word	0x58000c00

080028cc <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002910 <HAL_IPCC_MspInit+0x44>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d113      	bne.n	8002906 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80028de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80028e2:	f7ff ffc5 	bl	8002870 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2100      	movs	r1, #0
 80028ea:	202c      	movs	r0, #44	@ 0x2c
 80028ec:	f005 ff33 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80028f0:	202c      	movs	r0, #44	@ 0x2c
 80028f2:	f005 ff4a 	bl	800878a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	202d      	movs	r0, #45	@ 0x2d
 80028fc:	f005 ff2b 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002900:	202d      	movs	r0, #45	@ 0x2d
 8002902:	f005 ff42 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	58000c00 	.word	0x58000c00

08002914 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	3220      	adds	r2, #32
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <LL_HSEM_1StepLock+0x2c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d001      	beq.n	8002932 <LL_HSEM_1StepLock+0x1e>
 800292e:	2301      	movs	r3, #1
 8002930:	e000      	b.n	8002934 <LL_HSEM_1StepLock+0x20>
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	80000400 	.word	0x80000400

08002944 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002954:	d12f      	bne.n	80029b6 <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8002956:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800295a:	4833      	ldr	r0, [pc, #204]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0xe4>)
 800295c:	f006 fd7c 	bl	8009458 <HAL_GPIO_ReadPin>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8002966:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 800296c:	f004 fd14 	bl	8007398 <HAL_GetTick>
 8002970:	4603      	mov	r3, r0
 8002972:	461a      	mov	r2, r3
 8002974:	4b2e      	ldr	r3, [pc, #184]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xec>)
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e010      	b.n	800299c <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 800297a:	4b2e      	ldr	r3, [pc, #184]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0xf0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	4a2c      	ldr	r2, [pc, #176]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002982:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8002984:	f004 fd08 	bl	8007398 <HAL_GetTick>
 8002988:	4603      	mov	r3, r0
 800298a:	4a29      	ldr	r2, [pc, #164]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xec>)
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	461a      	mov	r2, r3
 8002992:	4b26      	ldr	r3, [pc, #152]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xe8>)
 8002994:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8002996:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <HAL_GPIO_EXTI_Callback+0xec>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 800299c:	4b23      	ldr	r3, [pc, #140]	@ (8002a2c <HAL_GPIO_EXTI_Callback+0xe8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80029a4:	db07      	blt.n	80029b6 <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 80029a6:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xf4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	4a22      	ldr	r2, [pc, #136]	@ (8002a38 <HAL_GPIO_EXTI_Callback+0xf4>)
 80029ae:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 80029b0:	4b20      	ldr	r3, [pc, #128]	@ (8002a34 <HAL_GPIO_EXTI_Callback+0xf0>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029bc:	d12f      	bne.n	8002a1e <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 80029be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029c2:	4819      	ldr	r0, [pc, #100]	@ (8002a28 <HAL_GPIO_EXTI_Callback+0xe4>)
 80029c4:	f006 fd48 	bl	8009458 <HAL_GPIO_ReadPin>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 80029ce:	4b1b      	ldr	r3, [pc, #108]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 80029d4:	f004 fce0 	bl	8007398 <HAL_GetTick>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b18      	ldr	r3, [pc, #96]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e010      	b.n	8002a04 <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 80029e2:	4b18      	ldr	r3, [pc, #96]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0x100>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3301      	adds	r3, #1
 80029e8:	4a16      	ldr	r2, [pc, #88]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0x100>)
 80029ea:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 80029ec:	f004 fcd4 	bl	8007398 <HAL_GetTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a13      	ldr	r2, [pc, #76]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xfc>)
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xf8>)
 80029fc:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <HAL_GPIO_EXTI_Callback+0xfc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_GPIO_EXTI_Callback+0xf8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002a0c:	db07      	blt.n	8002a1e <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8002a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0x104>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	4a0c      	ldr	r2, [pc, #48]	@ (8002a48 <HAL_GPIO_EXTI_Callback+0x104>)
 8002a16:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8002a18:	4b0a      	ldr	r3, [pc, #40]	@ (8002a44 <HAL_GPIO_EXTI_Callback+0x100>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
		}



	}
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	48000800 	.word	0x48000800
 8002a2c:	20000b8c 	.word	0x20000b8c
 8002a30:	20000b94 	.word	0x20000b94
 8002a34:	20000860 	.word	0x20000860
 8002a38:	20000ba0 	.word	0x20000ba0
 8002a3c:	20000b90 	.word	0x20000b90
 8002a40:	20000b98 	.word	0x20000b98
 8002a44:	20000864 	.word	0x20000864
 8002a48:	20000b9c 	.word	0x20000b9c

08002a4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a52:	f004 fc33 	bl	80072bc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002a56:	f7fe fd2f 	bl	80014b8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a5a:	f000 f8b1 	bl	8002bc0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002a5e:	f000 f913 	bl	8002c88 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002a62:	f7ff ff1f 	bl	80028a4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8002a66:	f000 fde3 	bl	8003630 <MX_RF_Init>
  MX_GPIO_Init();
 8002a6a:	f7fe ff1f 	bl	80018ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002a6e:	f7fe feda 	bl	8001826 <MX_DMA_Init>
  MX_ADC1_Init();
 8002a72:	f7fe faa9 	bl	8000fc8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8002a76:	f7ff fdb9 	bl	80025ec <MX_I2C1_Init>
  MX_I2C3_Init();
 8002a7a:	f7ff fdf7 	bl	800266c <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8002a7e:	f004 f9e7 	bl	8006e50 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8002a82:	f003 ff15 	bl	80068b0 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002a86:	f003 ff61 	bl	800694c <MX_TIM16_Init>
  MX_TIM17_Init();
 8002a8a:	f003 ff87 	bl	800699c <MX_TIM17_Init>
  MX_SPI1_Init();
 8002a8e:	f000 fed5 	bl	800383c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8002a92:	f004 fa29 	bl	8006ee8 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8002a96:	f015 ff77 	bl	8018988 <MX_USB_Device_Init>
  MX_RTC_Init();
 8002a9a:	f000 fdfb 	bl	8003694 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Abort(&huart1);
 8002a9e:	4836      	ldr	r0, [pc, #216]	@ (8002b78 <main+0x12c>)
 8002aa0:	f00c ff76 	bl	800f990 <HAL_UART_Abort>
    HAL_UART_DeInit(&huart1);
 8002aa4:	4834      	ldr	r0, [pc, #208]	@ (8002b78 <main+0x12c>)
 8002aa6:	f00c fee7 	bl	800f878 <HAL_UART_DeInit>

    HAL_I2C_DeInit(&hi2c1);
 8002aaa:	4834      	ldr	r0, [pc, #208]	@ (8002b7c <main+0x130>)
 8002aac:	f006 fdf5 	bl	800969a <HAL_I2C_DeInit>



  	ssd1306_Init();
 8002ab0:	f001 f9a6 	bl	8003e00 <ssd1306_Init>

  	HAL_Delay(10);
 8002ab4:	200a      	movs	r0, #10
 8002ab6:	f7fe fe3a 	bl	800172e <HAL_Delay>
  	ssd1306_Fill(Black);
 8002aba:	2000      	movs	r0, #0
 8002abc:	f001 fa0a 	bl	8003ed4 <ssd1306_Fill>

  	ssd1306_DrawBitmap(30, 12, startimg, 72, 40, White);
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2328      	movs	r3, #40	@ 0x28
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2348      	movs	r3, #72	@ 0x48
 8002aca:	4a2d      	ldr	r2, [pc, #180]	@ (8002b80 <main+0x134>)
 8002acc:	210c      	movs	r1, #12
 8002ace:	201e      	movs	r0, #30
 8002ad0:	f001 fc4b 	bl	800436a <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8002ad4:	f001 fa16 	bl	8003f04 <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8002ad8:	2203      	movs	r2, #3
 8002ada:	492a      	ldr	r1, [pc, #168]	@ (8002b84 <main+0x138>)
 8002adc:	482a      	ldr	r0, [pc, #168]	@ (8002b88 <main+0x13c>)
 8002ade:	f004 ff93 	bl	8007a08 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8002ae2:	482a      	ldr	r0, [pc, #168]	@ (8002b8c <main+0x140>)
 8002ae4:	f00c fa08 	bl	800eef8 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8002ae8:	4829      	ldr	r0, [pc, #164]	@ (8002b90 <main+0x144>)
 8002aea:	f00c fa4b 	bl	800ef84 <HAL_TIM_Base_Start_IT>
  	//HAL_TIM_Base_Start_IT(&htim17);

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8002aee:	2201      	movs	r2, #1
 8002af0:	2101      	movs	r1, #1
 8002af2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002af6:	f006 fcc7 	bl	8009488 <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8002afa:	2064      	movs	r0, #100	@ 0x64
 8002afc:	f7fe fe17 	bl	800172e <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8002b00:	4824      	ldr	r0, [pc, #144]	@ (8002b94 <main+0x148>)
 8002b02:	f00c ff45 	bl	800f990 <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8002b06:	2240      	movs	r2, #64	@ 0x40
 8002b08:	4923      	ldr	r1, [pc, #140]	@ (8002b98 <main+0x14c>)
 8002b0a:	4822      	ldr	r0, [pc, #136]	@ (8002b94 <main+0x148>)
 8002b0c:	f00c fef4 	bl	800f8f8 <HAL_UART_Receive_DMA>

  	memset(flashread,'1',256);
 8002b10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b14:	2131      	movs	r1, #49	@ 0x31
 8002b16:	4821      	ldr	r0, [pc, #132]	@ (8002b9c <main+0x150>)
 8002b18:	f018 fe5b 	bl	801b7d2 <memset>
  	memset(flashwrite,'\0',256);
 8002b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b20:	2100      	movs	r1, #0
 8002b22:	481f      	ldr	r0, [pc, #124]	@ (8002ba0 <main+0x154>)
 8002b24:	f018 fe55 	bl	801b7d2 <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8002b28:	2232      	movs	r2, #50	@ 0x32
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	481d      	ldr	r0, [pc, #116]	@ (8002ba4 <main+0x158>)
 8002b2e:	f018 fe50 	bl	801b7d2 <memset>

  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8002b32:	2380      	movs	r3, #128	@ 0x80
 8002b34:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba8 <main+0x15c>)
 8002b36:	491d      	ldr	r1, [pc, #116]	@ (8002bac <main+0x160>)
 8002b38:	481d      	ldr	r0, [pc, #116]	@ (8002bb0 <main+0x164>)
 8002b3a:	f014 feb2 	bl	80178a2 <SPIF_Init>



  	getindex();
 8002b3e:	f001 f82b 	bl	8003b98 <getindex>

  	ssd1306_Fill(Black);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f001 f9c6 	bl	8003ed4 <ssd1306_Fill>

  	state=STATE_SPEED;
 8002b48:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <main+0x168>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
  	BTN_A=0;
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <main+0x16c>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
  	BTN_A_LONG=0;
 8002b54:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <main+0x170>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

  	HAL_Delay(700);
 8002b5a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002b5e:	f7fe fde6 	bl	800172e <HAL_Delay>

  	//LL_HSEM_1StepLock( HSEM, 5 );
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002b62:	f7fe fcb7 	bl	80014d4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002b66:	f7fe fe07 	bl	8001778 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
	  statemachine();
 8002b6a:	f001 fe69 	bl	8004840 <statemachine>
	  ssd1306_UpdateScreen();
 8002b6e:	f001 f9c9 	bl	8003f04 <ssd1306_UpdateScreen>
    MX_APPE_Process();
 8002b72:	bf00      	nop
 8002b74:	e7f7      	b.n	8002b66 <main+0x11a>
 8002b76:	bf00      	nop
 8002b78:	20001428 	.word	0x20001428
 8002b7c:	200004f0 	.word	0x200004f0
 8002b80:	080201d8 	.word	0x080201d8
 8002b84:	20000888 	.word	0x20000888
 8002b88:	2000038c 	.word	0x2000038c
 8002b8c:	200012b0 	.word	0x200012b0
 8002b90:	200012fc 	.word	0x200012fc
 8002b94:	20001394 	.word	0x20001394
 8002b98:	200005e0 	.word	0x200005e0
 8002b9c:	2000099c 	.word	0x2000099c
 8002ba0:	2000089c 	.word	0x2000089c
 8002ba4:	20000ac0 	.word	0x20000ac0
 8002ba8:	48000400 	.word	0x48000400
 8002bac:	20000d80 	.word	0x20000d80
 8002bb0:	20000868 	.word	0x20000868
 8002bb4:	200005d4 	.word	0x200005d4
 8002bb8:	20000860 	.word	0x20000860
 8002bbc:	20000ba0 	.word	0x20000ba0

08002bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b09a      	sub	sp, #104	@ 0x68
 8002bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc6:	f107 0320 	add.w	r3, r7, #32
 8002bca:	2248      	movs	r2, #72	@ 0x48
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f018 fdff 	bl	801b7d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]
 8002be2:	615a      	str	r2, [r3, #20]
 8002be4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be6:	4b27      	ldr	r3, [pc, #156]	@ (8002c84 <SystemClock_Config+0xc4>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bee:	4a25      	ldr	r2, [pc, #148]	@ (8002c84 <SystemClock_Config+0xc4>)
 8002bf0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b23      	ldr	r3, [pc, #140]	@ (8002c84 <SystemClock_Config+0xc4>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bfe:	603b      	str	r3, [r7, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002c02:	2303      	movs	r3, #3
 8002c04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002c06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c12:	2340      	movs	r3, #64	@ 0x40
 8002c14:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c16:	2302      	movs	r3, #2
 8002c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8002c1e:	2310      	movs	r3, #16
 8002c20:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8002c22:	2308      	movs	r3, #8
 8002c24:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002c2c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c30:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002c32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c36:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c38:	f107 0320 	add.w	r3, r7, #32
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f009 fab3 	bl	800c1a8 <HAL_RCC_OscConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002c48:	f000 f858 	bl	8002cfc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002c4c:	236f      	movs	r3, #111	@ 0x6f
 8002c4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c50:	2303      	movs	r3, #3
 8002c52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002c60:	2380      	movs	r3, #128	@ 0x80
 8002c62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	2103      	movs	r1, #3
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f009 fe0f 	bl	800c890 <HAL_RCC_ClockConfig>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8002c78:	f000 f840 	bl	8002cfc <Error_Handler>
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	3768      	adds	r7, #104	@ 0x68
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	58000400 	.word	0x58000400

08002c88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b094      	sub	sp, #80	@ 0x50
 8002c8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c8e:	463b      	mov	r3, r7
 8002c90:	2250      	movs	r2, #80	@ 0x50
 8002c92:	2100      	movs	r1, #0
 8002c94:	4618      	mov	r0, r3
 8002c96:	f018 fd9c 	bl	801b7d2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002c9a:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002c9e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8002ca0:	2306      	movs	r3, #6
 8002ca2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002ca4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002caa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cae:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002cb0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002cb4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002cb6:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002cba:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002cbc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002cc2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002cc8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002ccc:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cd6:	463b      	mov	r3, r7
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f00a fa16 	bl	800d10a <HAL_RCCEx_PeriphCLKConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002ce4:	f000 f80a 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 );
 8002ce8:	2105      	movs	r1, #5
 8002cea:	4803      	ldr	r0, [pc, #12]	@ (8002cf8 <PeriphCommonClock_Config+0x70>)
 8002cec:	f7ff fe12 	bl	8002914 <LL_HSEM_1StepLock>

  /* USER CODE END Smps */
}
 8002cf0:	bf00      	nop
 8002cf2:	3750      	adds	r7, #80	@ 0x50
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	58001400 	.word	0x58001400

08002cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d00:	b672      	cpsid	i
}
 8002d02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <Error_Handler+0x8>

08002d08 <gps_checksum>:
//on a une fonction de decodage par typme de trame interressante, puis une fonction nmea_parse servant à mettre à jour la structure de donnée avec lesdonnées presentes dans le databuffer, qui lui se met à jour tout seul.

char *data[15];

int gps_checksum(char *nmea_data)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7fd fa85 	bl	8000220 <strlen>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d801      	bhi.n	8002d20 <gps_checksum+0x18>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e038      	b.n	8002d92 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7fd fa7d 	bl	8000220 <strlen>
 8002d26:	4603      	mov	r3, r0
 8002d28:	3b04      	subs	r3, #4
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fd fa74 	bl	8000220 <strlen>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	3b03      	subs	r3, #3
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d48:	2300      	movs	r3, #0
 8002d4a:	613b      	str	r3, [r7, #16]
 8002d4c:	e00a      	b.n	8002d64 <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	4053      	eors	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	3301      	adds	r3, #1
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fd fa5b 	bl	8000220 <strlen>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	1f5a      	subs	r2, r3, #5
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d8ec      	bhi.n	8002d4e <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8002d74:	f107 0308 	add.w	r3, r7, #8
 8002d78:	2210      	movs	r2, #16
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f017 fd59 	bl	801a834 <strtol>
 8002d82:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d101      	bne.n	8002d90 <gps_checksum+0x88>
        return 1;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8002d90:	2300      	movs	r3, #0
    }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b0b7      	sub	sp, #220	@ 0xdc
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8002dac:	f107 0320 	add.w	r3, r7, #32
 8002db0:	2264      	movs	r2, #100	@ 0x64
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f018 fd0c 	bl	801b7d2 <memset>
    char *marker = strtok(inputString, ",");
 8002dba:	49c2      	ldr	r1, [pc, #776]	@ (80030c4 <nmea_GPGGA+0x328>)
 8002dbc:	6838      	ldr	r0, [r7, #0]
 8002dbe:	f018 fd23 	bl	801b808 <strtok>
 8002dc2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002dc6:	e027      	b.n	8002e18 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002dc8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8002dcc:	f7fd fa28 	bl	8000220 <strlen>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8002dd8:	1c63      	adds	r3, r4, #1
 8002dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dde:	4610      	mov	r0, r2
 8002de0:	f016 fd82 	bl	80198e8 <malloc>
 8002de4:	4603      	mov	r3, r0
 8002de6:	461a      	mov	r2, r3
 8002de8:	00a3      	lsls	r3, r4, #2
 8002dea:	33d8      	adds	r3, #216	@ 0xd8
 8002dec:	443b      	add	r3, r7
 8002dee:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8002df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002df6:	3b01      	subs	r3, #1
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	33d8      	adds	r3, #216	@ 0xd8
 8002dfc:	443b      	add	r3, r7
 8002dfe:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002e02:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f018 fdf7 	bl	801b9fa <strcpy>
        marker = strtok(NULL, ",");
 8002e0c:	49ad      	ldr	r1, [pc, #692]	@ (80030c4 <nmea_GPGGA+0x328>)
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f018 fcfa 	bl	801b808 <strtok>
 8002e14:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8002e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1d3      	bne.n	8002dc8 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8002e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8002e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	332c      	adds	r3, #44	@ 0x2c
 8002e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f018 fdde 	bl	801b9fa <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8002e3e:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e42:	2b53      	cmp	r3, #83	@ 0x53
 8002e44:	d004      	beq.n	8002e50 <nmea_GPGGA+0xb4>
 8002e46:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002e4a:	2b4e      	cmp	r3, #78	@ 0x4e
 8002e4c:	f040 8159 	bne.w	8003102 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e56:	e010      	b.n	8002e7a <nmea_GPGGA+0xde>
 8002e58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e5e:	4413      	add	r3, r2
 8002e60:	7819      	ldrb	r1, [r3, #0]
 8002e62:	f107 021c 	add.w	r2, r7, #28
 8002e66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e6a:	4413      	add	r3, r2
 8002e6c:	460a      	mov	r2, r1
 8002e6e:	701a      	strb	r2, [r3, #0]
 8002e70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e74:	3301      	adds	r3, #1
 8002e76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	ddea      	ble.n	8002e58 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e88:	e011      	b.n	8002eae <nmea_GPGGA+0x112>
 8002e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e90:	3302      	adds	r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	7819      	ldrb	r1, [r3, #0]
 8002e96:	f107 0214 	add.w	r2, r7, #20
 8002e9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e9e:	4413      	add	r3, r2
 8002ea0:	460a      	mov	r2, r1
 8002ea2:	701a      	strb	r2, [r3, #0]
 8002ea4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002eae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	dde9      	ble.n	8002e8a <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002eb6:	f107 031c 	add.w	r3, r7, #28
 8002eba:	220a      	movs	r2, #10
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f017 fcb8 	bl	801a834 <strtol>
 8002ec4:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f017 fbd0 	bl	801a674 <strtof>
 8002ed4:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ee4:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8002ee8:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80030c8 <nmea_GPGGA+0x32c>
 8002eec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	ee17 0a90 	vmov	r0, s15
 8002ef8:	f7fd fafe 	bl	80004f8 <__aeabi_f2d>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002f04:	2300      	movs	r3, #0
 8002f06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f0a:	e010      	b.n	8002f2e <nmea_GPGGA+0x192>
 8002f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f12:	4413      	add	r3, r2
 8002f14:	7819      	ldrb	r1, [r3, #0]
 8002f16:	f107 0210 	add.w	r2, r7, #16
 8002f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f1e:	4413      	add	r3, r2
 8002f20:	460a      	mov	r2, r1
 8002f22:	701a      	strb	r2, [r3, #0]
 8002f24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f28:	3301      	adds	r3, #1
 8002f2a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	ddea      	ble.n	8002f0c <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8002f36:	2300      	movs	r3, #0
 8002f38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f3c:	e011      	b.n	8002f62 <nmea_GPGGA+0x1c6>
 8002f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f44:	3303      	adds	r3, #3
 8002f46:	4413      	add	r3, r2
 8002f48:	7819      	ldrb	r1, [r3, #0]
 8002f4a:	f107 0208 	add.w	r2, r7, #8
 8002f4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f52:	4413      	add	r3, r2
 8002f54:	460a      	mov	r2, r1
 8002f56:	701a      	strb	r2, [r3, #0]
 8002f58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f66:	2b05      	cmp	r3, #5
 8002f68:	dde9      	ble.n	8002f3e <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8002f6a:	f107 0310 	add.w	r3, r7, #16
 8002f6e:	220a      	movs	r2, #10
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f017 fc5e 	bl	801a834 <strtol>
 8002f78:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	2100      	movs	r1, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	f017 fb76 	bl	801a674 <strtof>
 8002f88:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002f8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f90:	ee07 3a90 	vmov	s15, r3
 8002f94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f98:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002f9c:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 80030c8 <nmea_GPGGA+0x32c>
 8002fa0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa8:	ee17 0a90 	vmov	r0, s15
 8002fac:	f7fd faa4 	bl	80004f8 <__aeabi_f2d>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002fc4:	f7fd fd58 	bl	8000a78 <__aeabi_dcmpeq>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d176      	bne.n	80030bc <nmea_GPGGA+0x320>
 8002fce:	f04f 0200 	mov.w	r2, #0
 8002fd2:	f04f 0300 	mov.w	r3, #0
 8002fd6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002fda:	f7fd fd4d 	bl	8000a78 <__aeabi_dcmpeq>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d16b      	bne.n	80030bc <nmea_GPGGA+0x320>
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	4b38      	ldr	r3, [pc, #224]	@ (80030cc <nmea_GPGGA+0x330>)
 8002fea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002fee:	f7fd fd4d 	bl	8000a8c <__aeabi_dcmplt>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d061      	beq.n	80030bc <nmea_GPGGA+0x320>
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	4b34      	ldr	r3, [pc, #208]	@ (80030d0 <nmea_GPGGA+0x334>)
 8002ffe:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003002:	f7fd fd43 	bl	8000a8c <__aeabi_dcmplt>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d057      	beq.n	80030bc <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003012:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 800301c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003024:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800302e:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8003030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003032:	2100      	movs	r1, #0
 8003034:	4618      	mov	r0, r3
 8003036:	f017 fb1d 	bl	801a674 <strtof>
 800303a:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800303e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003042:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	d102      	bne.n	8003052 <nmea_GPGGA+0x2b6>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69db      	ldr	r3, [r3, #28]
 8003050:	e001      	b.n	8003056 <nmea_GPGGA+0x2ba>
 8003052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800305a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800305c:	220a      	movs	r2, #10
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f017 fbe7 	bl	801a834 <strtol>
 8003066:	4602      	mov	r2, r0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 800306c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800306e:	220a      	movs	r2, #10
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f017 fbde 	bl	801a834 <strtol>
 8003078:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 800307c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003080:	2b00      	cmp	r3, #0
 8003082:	bfcc      	ite	gt
 8003084:	2301      	movgt	r3, #1
 8003086:	2300      	movle	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8003090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003092:	2100      	movs	r1, #0
 8003094:	4618      	mov	r0, r3
 8003096:	f017 faed 	bl	801a674 <strtof>
 800309a:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 800309e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80030a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030aa:	d102      	bne.n	80030b2 <nmea_GPGGA+0x316>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	e001      	b.n	80030b6 <nmea_GPGGA+0x31a>
 80030b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80030ba:	e022      	b.n	8003102 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 80030bc:	2300      	movs	r3, #0
 80030be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030c2:	e016      	b.n	80030f2 <nmea_GPGGA+0x356>
 80030c4:	0801fd2c 	.word	0x0801fd2c
 80030c8:	42700000 	.word	0x42700000
 80030cc:	40568000 	.word	0x40568000
 80030d0:	40668000 	.word	0x40668000
 80030d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	33d8      	adds	r3, #216	@ 0xd8
 80030dc:	443b      	add	r3, r7
 80030de:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f016 fc08 	bl	80198f8 <free>
 80030e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80030ec:	3301      	adds	r3, #1
 80030ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80030f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030fa:	429a      	cmp	r2, r3
 80030fc:	dbea      	blt.n	80030d4 <nmea_GPGGA+0x338>
            return 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	e019      	b.n	8003136 <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003108:	e00e      	b.n	8003128 <nmea_GPGGA+0x38c>
 800310a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	33d8      	adds	r3, #216	@ 0xd8
 8003112:	443b      	add	r3, r7
 8003114:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003118:	4618      	mov	r0, r3
 800311a:	f016 fbed 	bl	80198f8 <free>
 800311e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003122:	3301      	adds	r3, #1
 8003124:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003128:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800312c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003130:	429a      	cmp	r2, r3
 8003132:	dbea      	blt.n	800310a <nmea_GPGGA+0x36e>
    return 1;
 8003134:	2301      	movs	r3, #1
}
 8003136:	4618      	mov	r0, r3
 8003138:	37dc      	adds	r7, #220	@ 0xdc
 800313a:	46bd      	mov	sp, r7
 800313c:	bd90      	pop	{r4, r7, pc}
 800313e:	bf00      	nop

08003140 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b0a3      	sub	sp, #140	@ 0x8c
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	2264      	movs	r2, #100	@ 0x64
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f018 fb3a 	bl	801b7d2 <memset>
    char *marker = strtok(inputString, ",");
 800315e:	493b      	ldr	r1, [pc, #236]	@ (800324c <nmea_GPGSA+0x10c>)
 8003160:	6838      	ldr	r0, [r7, #0]
 8003162:	f018 fb51 	bl	801b808 <strtok>
 8003166:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 800316a:	e027      	b.n	80031bc <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 800316c:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8003170:	f7fd f856 	bl	8000220 <strlen>
 8003174:	4603      	mov	r3, r0
 8003176:	1c5a      	adds	r2, r3, #1
 8003178:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 800317c:	1c63      	adds	r3, r4, #1
 800317e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003182:	4610      	mov	r0, r2
 8003184:	f016 fbb0 	bl	80198e8 <malloc>
 8003188:	4603      	mov	r3, r0
 800318a:	461a      	mov	r2, r3
 800318c:	00a3      	lsls	r3, r4, #2
 800318e:	3388      	adds	r3, #136	@ 0x88
 8003190:	443b      	add	r3, r7
 8003192:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 8003196:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800319a:	3b01      	subs	r3, #1
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	3388      	adds	r3, #136	@ 0x88
 80031a0:	443b      	add	r3, r7
 80031a2:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80031a6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80031aa:	4618      	mov	r0, r3
 80031ac:	f018 fc25 	bl	801b9fa <strcpy>
        marker = strtok(NULL, ",");
 80031b0:	4926      	ldr	r1, [pc, #152]	@ (800324c <nmea_GPGSA+0x10c>)
 80031b2:	2000      	movs	r0, #0
 80031b4:	f018 fb28 	bl	801b808 <strtok>
 80031b8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 80031bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1d3      	bne.n	800316c <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	220a      	movs	r2, #10
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f017 fb32 	bl	801a834 <strtol>
 80031d0:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 80031d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	bfcc      	ite	gt
 80031d8:	2301      	movgt	r3, #1
 80031da:	2300      	movle	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	461a      	mov	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 80031e8:	2303      	movs	r3, #3
 80031ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ec:	e00e      	b.n	800320c <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 80031ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	3388      	adds	r3, #136	@ 0x88
 80031f4:	443b      	add	r3, r7
 80031f6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003200:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003202:	3301      	adds	r3, #1
 8003204:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 8003206:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003208:	3301      	adds	r3, #1
 800320a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800320c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800320e:	2b0e      	cmp	r3, #14
 8003210:	dded      	ble.n	80031ee <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003216:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8003218:	2300      	movs	r3, #0
 800321a:	677b      	str	r3, [r7, #116]	@ 0x74
 800321c:	e00b      	b.n	8003236 <nmea_GPGSA+0xf6>
 800321e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	3388      	adds	r3, #136	@ 0x88
 8003224:	443b      	add	r3, r7
 8003226:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800322a:	4618      	mov	r0, r3
 800322c:	f016 fb64 	bl	80198f8 <free>
 8003230:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003232:	3301      	adds	r3, #1
 8003234:	677b      	str	r3, [r7, #116]	@ 0x74
 8003236:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003238:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800323c:	429a      	cmp	r2, r3
 800323e:	dbee      	blt.n	800321e <nmea_GPGSA+0xde>
    return 1;
 8003240:	2301      	movs	r3, #1
}
 8003242:	4618      	mov	r0, r3
 8003244:	378c      	adds	r7, #140	@ 0x8c
 8003246:	46bd      	mov	sp, r7
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	bf00      	nop
 800324c:	0801fd2c 	.word	0x0801fd2c

08003250 <nmea_GNRMC>:



int nmea_GNRMC(GPS *gps_data, char*inputString){
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b0a1      	sub	sp, #132	@ 0x84
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 800325e:	f107 030c 	add.w	r3, r7, #12
 8003262:	2264      	movs	r2, #100	@ 0x64
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f018 fab3 	bl	801b7d2 <memset>
    char *marker = strtok(inputString, ",");
 800326c:	4930      	ldr	r1, [pc, #192]	@ (8003330 <nmea_GNRMC+0xe0>)
 800326e:	6838      	ldr	r0, [r7, #0]
 8003270:	f018 faca 	bl	801b808 <strtok>
 8003274:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8003276:	e021      	b.n	80032bc <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003278:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800327a:	f7fc ffd1 	bl	8000220 <strlen>
 800327e:	4603      	mov	r3, r0
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8003284:	1c63      	adds	r3, r4, #1
 8003286:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003288:	4610      	mov	r0, r2
 800328a:	f016 fb2d 	bl	80198e8 <malloc>
 800328e:	4603      	mov	r3, r0
 8003290:	461a      	mov	r2, r3
 8003292:	00a3      	lsls	r3, r4, #2
 8003294:	3380      	adds	r3, #128	@ 0x80
 8003296:	443b      	add	r3, r7
 8003298:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 800329c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800329e:	3b01      	subs	r3, #1
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	3380      	adds	r3, #128	@ 0x80
 80032a4:	443b      	add	r3, r7
 80032a6:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80032aa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80032ac:	4618      	mov	r0, r3
 80032ae:	f018 fba4 	bl	801b9fa <strcpy>
        marker = strtok(NULL, ",");
 80032b2:	491f      	ldr	r1, [pc, #124]	@ (8003330 <nmea_GNRMC+0xe0>)
 80032b4:	2000      	movs	r0, #0
 80032b6:	f018 faa7 	bl	801b808 <strtok>
 80032ba:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 80032bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1da      	bne.n	8003278 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 80032c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f017 f9d4 	bl	801a674 <strtof>
 80032cc:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 80032d0:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80032d2:	f7fd f911 	bl	80004f8 <__aeabi_f2d>
 80032d6:	a314      	add	r3, pc, #80	@ (adr r3, 8003328 <nmea_GNRMC+0xd8>)
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f7fd fa8e 	bl	80007fc <__aeabi_ddiv>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	f7fd fc56 	bl	8000b98 <__aeabi_d2f>
 80032ec:	4602      	mov	r2, r0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 80032f2:	2300      	movs	r3, #0
 80032f4:	677b      	str	r3, [r7, #116]	@ 0x74
 80032f6:	e00b      	b.n	8003310 <nmea_GNRMC+0xc0>
 80032f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	3380      	adds	r3, #128	@ 0x80
 80032fe:	443b      	add	r3, r7
 8003300:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8003304:	4618      	mov	r0, r3
 8003306:	f016 faf7 	bl	80198f8 <free>
 800330a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800330c:	3301      	adds	r3, #1
 800330e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003310:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003312:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003314:	429a      	cmp	r2, r3
 8003316:	dbef      	blt.n	80032f8 <nmea_GNRMC+0xa8>
    return 1;
 8003318:	2301      	movs	r3, #1
}
 800331a:	4618      	mov	r0, r3
 800331c:	3784      	adds	r7, #132	@ 0x84
 800331e:	46bd      	mov	sp, r7
 8003320:	bd90      	pop	{r4, r7, pc}
 8003322:	bf00      	nop
 8003324:	f3af 8000 	nop.w
 8003328:	be76c8b4 	.word	0xbe76c8b4
 800332c:	3fff1a9f 	.word	0x3fff1a9f
 8003330:	0801fd2c 	.word	0x0801fd2c

08003334 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 800333e:	223c      	movs	r2, #60	@ 0x3c
 8003340:	2100      	movs	r1, #0
 8003342:	484e      	ldr	r0, [pc, #312]	@ (800347c <nmea_parse+0x148>)
 8003344:	f018 fa45 	bl	801b7d2 <memset>
    char * token = strtok(buffer, "$");
 8003348:	494d      	ldr	r1, [pc, #308]	@ (8003480 <nmea_parse+0x14c>)
 800334a:	6838      	ldr	r0, [r7, #0]
 800334c:	f018 fa5c 	bl	801b808 <strtok>
 8003350:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8003356:	e01d      	b.n	8003394 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003358:	6978      	ldr	r0, [r7, #20]
 800335a:	f7fc ff61 	bl	8000220 <strlen>
 800335e:	4603      	mov	r3, r0
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	693c      	ldr	r4, [r7, #16]
 8003364:	1c63      	adds	r3, r4, #1
 8003366:	613b      	str	r3, [r7, #16]
 8003368:	4610      	mov	r0, r2
 800336a:	f016 fabd 	bl	80198e8 <malloc>
 800336e:	4603      	mov	r3, r0
 8003370:	461a      	mov	r2, r3
 8003372:	4b42      	ldr	r3, [pc, #264]	@ (800347c <nmea_parse+0x148>)
 8003374:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	3b01      	subs	r3, #1
 800337c:	4a3f      	ldr	r2, [pc, #252]	@ (800347c <nmea_parse+0x148>)
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	6979      	ldr	r1, [r7, #20]
 8003384:	4618      	mov	r0, r3
 8003386:	f018 fb38 	bl	801b9fa <strcpy>
        token = strtok(NULL, "$");
 800338a:	493d      	ldr	r1, [pc, #244]	@ (8003480 <nmea_parse+0x14c>)
 800338c:	2000      	movs	r0, #0
 800338e:	f018 fa3b 	bl	801b808 <strtok>
 8003392:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1de      	bne.n	8003358 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 800339a:	2300      	movs	r3, #0
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e052      	b.n	8003446 <nmea_parse+0x112>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 80033a0:	4a36      	ldr	r2, [pc, #216]	@ (800347c <nmea_parse+0x148>)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033a8:	4936      	ldr	r1, [pc, #216]	@ (8003484 <nmea_parse+0x150>)
 80033aa:	4618      	mov	r0, r3
 80033ac:	f018 fa88 	bl	801b8c0 <strstr>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d044      	beq.n	8003440 <nmea_parse+0x10c>
 80033b6:	4a31      	ldr	r2, [pc, #196]	@ (800347c <nmea_parse+0x148>)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fca2 	bl	8002d08 <gps_checksum>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d03a      	beq.n	8003440 <nmea_parse+0x10c>
           if(strstr(data[i], "GNRMC")!=NULL){
 80033ca:	4a2c      	ldr	r2, [pc, #176]	@ (800347c <nmea_parse+0x148>)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	492d      	ldr	r1, [pc, #180]	@ (8003488 <nmea_parse+0x154>)
 80033d4:	4618      	mov	r0, r3
 80033d6:	f018 fa73 	bl	801b8c0 <strstr>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d008      	beq.n	80033f2 <nmea_parse+0xbe>
               nmea_GNRMC(gps_data, data[i]);
 80033e0:	4a26      	ldr	r2, [pc, #152]	@ (800347c <nmea_parse+0x148>)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e8:	4619      	mov	r1, r3
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff ff30 	bl	8003250 <nmea_GNRMC>
 80033f0:	e026      	b.n	8003440 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGSA")!=NULL){
 80033f2:	4a22      	ldr	r2, [pc, #136]	@ (800347c <nmea_parse+0x148>)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033fa:	4924      	ldr	r1, [pc, #144]	@ (800348c <nmea_parse+0x158>)
 80033fc:	4618      	mov	r0, r3
 80033fe:	f018 fa5f 	bl	801b8c0 <strstr>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <nmea_parse+0xe6>
               nmea_GPGSA(gps_data, data[i]);
 8003408:	4a1c      	ldr	r2, [pc, #112]	@ (800347c <nmea_parse+0x148>)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003410:	4619      	mov	r1, r3
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff fe94 	bl	8003140 <nmea_GPGSA>
 8003418:	e012      	b.n	8003440 <nmea_parse+0x10c>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 800341a:	4a18      	ldr	r2, [pc, #96]	@ (800347c <nmea_parse+0x148>)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003422:	491b      	ldr	r1, [pc, #108]	@ (8003490 <nmea_parse+0x15c>)
 8003424:	4618      	mov	r0, r3
 8003426:	f018 fa4b 	bl	801b8c0 <strstr>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <nmea_parse+0x10c>
               nmea_GPGGA(gps_data, data[i]);
 8003430:	4a12      	ldr	r2, [pc, #72]	@ (800347c <nmea_parse+0x148>)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003438:	4619      	mov	r1, r3
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7ff fcae 	bl	8002d9c <nmea_GPGGA>
    for(int i = 0; i<cnt; i++){
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	429a      	cmp	r2, r3
 800344c:	dba8      	blt.n	80033a0 <nmea_parse+0x6c>
           }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800344e:	2300      	movs	r3, #0
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	e009      	b.n	8003468 <nmea_parse+0x134>
 8003454:	4a09      	ldr	r2, [pc, #36]	@ (800347c <nmea_parse+0x148>)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800345c:	4618      	mov	r0, r3
 800345e:	f016 fa4b 	bl	80198f8 <free>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	429a      	cmp	r2, r3
 800346e:	dbf1      	blt.n	8003454 <nmea_parse+0x120>


}
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd90      	pop	{r4, r7, pc}
 800347a:	bf00      	nop
 800347c:	20000cec 	.word	0x20000cec
 8003480:	0801fd30 	.word	0x0801fd30
 8003484:	0801fd34 	.word	0x0801fd34
 8003488:	0801fd38 	.word	0x0801fd38
 800348c:	0801fd40 	.word	0x0801fd40
 8003490:	0801fd48 	.word	0x0801fd48
 8003494:	00000000 	.word	0x00000000

08003498 <distancecalc>:

}



double distancecalc(double lat1, double lat2, double long1, double long2){
 8003498:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800349c:	b08a      	sub	sp, #40	@ 0x28
 800349e:	af00      	add	r7, sp, #0
 80034a0:	ed87 0b06 	vstr	d0, [r7, #24]
 80034a4:	ed87 1b04 	vstr	d1, [r7, #16]
 80034a8:	ed87 2b02 	vstr	d2, [r7, #8]
 80034ac:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 80034bc:	a358      	add	r3, pc, #352	@ (adr r3, 8003620 <distancecalc+0x188>)
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034c6:	f7fd f86f 	bl	80005a8 <__aeabi_dmul>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	ec43 2b17 	vmov	d7, r2, r3
 80034d2:	eeb0 0a47 	vmov.f32	s0, s14
 80034d6:	eef0 0a67 	vmov.f32	s1, s15
 80034da:	f01a ffcf 	bl	801e47c <sinl>
 80034de:	ec55 4b10 	vmov	r4, r5, d0
 80034e2:	a34f      	add	r3, pc, #316	@ (adr r3, 8003620 <distancecalc+0x188>)
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034ec:	f7fd f85c 	bl	80005a8 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	ec43 2b17 	vmov	d7, r2, r3
 80034f8:	eeb0 0a47 	vmov.f32	s0, s14
 80034fc:	eef0 0a67 	vmov.f32	s1, s15
 8003500:	f01a ffbc 	bl	801e47c <sinl>
 8003504:	ec53 2b10 	vmov	r2, r3, d0
 8003508:	4620      	mov	r0, r4
 800350a:	4629      	mov	r1, r5
 800350c:	f7fd f84c 	bl	80005a8 <__aeabi_dmul>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4614      	mov	r4, r2
 8003516:	461d      	mov	r5, r3
 8003518:	a341      	add	r3, pc, #260	@ (adr r3, 8003620 <distancecalc+0x188>)
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003522:	f7fd f841 	bl	80005a8 <__aeabi_dmul>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	ec43 2b17 	vmov	d7, r2, r3
 800352e:	eeb0 0a47 	vmov.f32	s0, s14
 8003532:	eef0 0a67 	vmov.f32	s1, s15
 8003536:	f01a ff9f 	bl	801e478 <cosl>
 800353a:	ec59 8b10 	vmov	r8, r9, d0
 800353e:	a338      	add	r3, pc, #224	@ (adr r3, 8003620 <distancecalc+0x188>)
 8003540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003544:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003548:	f7fd f82e 	bl	80005a8 <__aeabi_dmul>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	ec43 2b17 	vmov	d7, r2, r3
 8003554:	eeb0 0a47 	vmov.f32	s0, s14
 8003558:	eef0 0a67 	vmov.f32	s1, s15
 800355c:	f01a ff8c 	bl	801e478 <cosl>
 8003560:	ec53 2b10 	vmov	r2, r3, d0
 8003564:	4640      	mov	r0, r8
 8003566:	4649      	mov	r1, r9
 8003568:	f7fd f81e 	bl	80005a8 <__aeabi_dmul>
 800356c:	4602      	mov	r2, r0
 800356e:	460b      	mov	r3, r1
 8003570:	4690      	mov	r8, r2
 8003572:	4699      	mov	r9, r3
 8003574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800357c:	f7fc fe5c 	bl	8000238 <__aeabi_dsub>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	a325      	add	r3, pc, #148	@ (adr r3, 8003620 <distancecalc+0x188>)
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	f7fd f80b 	bl	80005a8 <__aeabi_dmul>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	ec43 2b17 	vmov	d7, r2, r3
 800359a:	eeb0 0a47 	vmov.f32	s0, s14
 800359e:	eef0 0a67 	vmov.f32	s1, s15
 80035a2:	f01a ff69 	bl	801e478 <cosl>
 80035a6:	ec53 2b10 	vmov	r2, r3, d0
 80035aa:	4640      	mov	r0, r8
 80035ac:	4649      	mov	r1, r9
 80035ae:	f7fc fffb 	bl	80005a8 <__aeabi_dmul>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4620      	mov	r0, r4
 80035b8:	4629      	mov	r1, r5
 80035ba:	f7fc fe3f 	bl	800023c <__adddf3>
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	ec43 2b17 	vmov	d7, r2, r3
 80035c6:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8003618 <distancecalc+0x180>
 80035ca:	eeb0 0a47 	vmov.f32	s0, s14
 80035ce:	eef0 0a67 	vmov.f32	s1, s15
 80035d2:	f01a fef3 	bl	801e3bc <fmin>
 80035d6:	eeb0 7a40 	vmov.f32	s14, s0
 80035da:	eef0 7a60 	vmov.f32	s15, s1
 80035de:	eeb0 0a47 	vmov.f32	s0, s14
 80035e2:	eef0 0a67 	vmov.f32	s1, s15
 80035e6:	f01a ff4b 	bl	801e480 <acosl>
 80035ea:	ec51 0b10 	vmov	r0, r1, d0
 80035ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8003628 <distancecalc+0x190>)
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f7fc ffd8 	bl	80005a8 <__aeabi_dmul>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 8003600:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003604:	ec43 2b17 	vmov	d7, r2, r3
}
 8003608:	eeb0 0a47 	vmov.f32	s0, s14
 800360c:	eef0 0a67 	vmov.f32	s1, s15
 8003610:	3728      	adds	r7, #40	@ 0x28
 8003612:	46bd      	mov	sp, r7
 8003614:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003618:	00000000 	.word	0x00000000
 800361c:	3ff00000 	.word	0x3ff00000
 8003620:	a2529d39 	.word	0xa2529d39
 8003624:	3f91df46 	.word	0x3f91df46
 8003628:	00000000 	.word	0x00000000
 800362c:	41584dae 	.word	0x41584dae

08003630 <MX_RF_Init>:

/* USER CODE END 0 */

/* RF init function */
void MX_RF_Init(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800363e:	b480      	push	{r7}
 8003640:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800364e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003652:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_APB1_GRP1_EnableClock>:
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800366e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4313      	orrs	r3, r2
 8003676:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800367c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4013      	ands	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003684:	68fb      	ldr	r3, [r7, #12]
}
 8003686:	bf00      	nop
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800369a:	1d3b      	adds	r3, r7, #4
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	609a      	str	r2, [r3, #8]
 80036a4:	60da      	str	r2, [r3, #12]
 80036a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80036a8:	2300      	movs	r3, #0
 80036aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80036ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003760 <MX_RTC_Init+0xcc>)
 80036ae:	4a2d      	ldr	r2, [pc, #180]	@ (8003764 <MX_RTC_Init+0xd0>)
 80036b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80036b2:	4b2b      	ldr	r3, [pc, #172]	@ (8003760 <MX_RTC_Init+0xcc>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80036b8:	4b29      	ldr	r3, [pc, #164]	@ (8003760 <MX_RTC_Init+0xcc>)
 80036ba:	227f      	movs	r2, #127	@ 0x7f
 80036bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80036be:	4b28      	ldr	r3, [pc, #160]	@ (8003760 <MX_RTC_Init+0xcc>)
 80036c0:	f641 6284 	movw	r2, #7812	@ 0x1e84
 80036c4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80036c6:	4b26      	ldr	r3, [pc, #152]	@ (8003760 <MX_RTC_Init+0xcc>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80036cc:	4b24      	ldr	r3, [pc, #144]	@ (8003760 <MX_RTC_Init+0xcc>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80036d2:	4b23      	ldr	r3, [pc, #140]	@ (8003760 <MX_RTC_Init+0xcc>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036d8:	4b21      	ldr	r3, [pc, #132]	@ (8003760 <MX_RTC_Init+0xcc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036de:	4820      	ldr	r0, [pc, #128]	@ (8003760 <MX_RTC_Init+0xcc>)
 80036e0:	f009 ff9a 	bl	800d618 <HAL_RTC_Init>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80036ea:	f7ff fb07 	bl	8002cfc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003702:	2300      	movs	r3, #0
 8003704:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	2201      	movs	r2, #1
 800370a:	4619      	mov	r1, r3
 800370c:	4814      	ldr	r0, [pc, #80]	@ (8003760 <MX_RTC_Init+0xcc>)
 800370e:	f00a f833 	bl	800d778 <HAL_RTC_SetTime>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_RTC_Init+0x88>
  {
    Error_Handler();
 8003718:	f7ff faf0 	bl	8002cfc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800371c:	2301      	movs	r3, #1
 800371e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003720:	2301      	movs	r3, #1
 8003722:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003724:	2301      	movs	r3, #1
 8003726:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003728:	2300      	movs	r3, #0
 800372a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800372c:	463b      	mov	r3, r7
 800372e:	2201      	movs	r2, #1
 8003730:	4619      	mov	r1, r3
 8003732:	480b      	ldr	r0, [pc, #44]	@ (8003760 <MX_RTC_Init+0xcc>)
 8003734:	f00a f8e4 	bl	800d900 <HAL_RTC_SetDate>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 800373e:	f7ff fadd 	bl	8002cfc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8003742:	2204      	movs	r2, #4
 8003744:	2100      	movs	r1, #0
 8003746:	4806      	ldr	r0, [pc, #24]	@ (8003760 <MX_RTC_Init+0xcc>)
 8003748:	f00a f9f8 	bl	800db3c <HAL_RTCEx_SetWakeUpTimer_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003752:	f7ff fad3 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003756:	bf00      	nop
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20000d28 	.word	0x20000d28
 8003764:	40002800 	.word	0x40002800

08003768 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b096      	sub	sp, #88	@ 0x58
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003770:	f107 0308 	add.w	r3, r7, #8
 8003774:	2250      	movs	r2, #80	@ 0x50
 8003776:	2100      	movs	r1, #0
 8003778:	4618      	mov	r0, r3
 800377a:	f018 f82a 	bl	801b7d2 <memset>
  if(rtcHandle->Instance==RTC)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a14      	ldr	r2, [pc, #80]	@ (80037d4 <HAL_RTC_MspInit+0x6c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d121      	bne.n	80037cc <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8003788:	f008 f96a 	bl	800ba60 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 800378c:	f008 f968 	bl	800ba60 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003790:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003794:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8003796:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800379a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800379c:	f107 0308 	add.w	r3, r7, #8
 80037a0:	4618      	mov	r0, r3
 80037a2:	f009 fcb2 	bl	800d10a <HAL_RCCEx_PeriphCLKConfig>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80037ac:	f7ff faa6 	bl	8002cfc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80037b0:	f7ff ff45 	bl	800363e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80037b4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80037b8:	f7ff ff52 	bl	8003660 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80037bc:	2200      	movs	r2, #0
 80037be:	2100      	movs	r1, #0
 80037c0:	2003      	movs	r0, #3
 80037c2:	f004 ffc8 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80037c6:	2003      	movs	r0, #3
 80037c8:	f004 ffdf 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80037cc:	bf00      	nop
 80037ce:	3758      	adds	r7, #88	@ 0x58
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40002800 	.word	0x40002800

080037d8 <LL_AHB2_GRP1_EnableClock>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80037e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80037f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4013      	ands	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80037fc:	68fb      	ldr	r3, [r7, #12]
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800380a:	b480      	push	{r7}
 800380c:	b085      	sub	sp, #20
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003816:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003818:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4313      	orrs	r3, r2
 8003820:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003826:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4013      	ands	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800382e:	68fb      	ldr	r3, [r7, #12]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003840:	4b1b      	ldr	r3, [pc, #108]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003842:	4a1c      	ldr	r2, [pc, #112]	@ (80038b4 <MX_SPI1_Init+0x78>)
 8003844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003846:	4b1a      	ldr	r3, [pc, #104]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003848:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800384c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800384e:	4b18      	ldr	r3, [pc, #96]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003854:	4b16      	ldr	r3, [pc, #88]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003856:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800385a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800385c:	4b14      	ldr	r3, [pc, #80]	@ (80038b0 <MX_SPI1_Init+0x74>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003862:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003864:	2200      	movs	r2, #0
 8003866:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003868:	4b11      	ldr	r3, [pc, #68]	@ (80038b0 <MX_SPI1_Init+0x74>)
 800386a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800386e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003870:	4b0f      	ldr	r3, [pc, #60]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003872:	2210      	movs	r2, #16
 8003874:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003876:	4b0e      	ldr	r3, [pc, #56]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003878:	2200      	movs	r2, #0
 800387a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <MX_SPI1_Init+0x74>)
 800387e:	2200      	movs	r2, #0
 8003880:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003882:	4b0b      	ldr	r3, [pc, #44]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003884:	2200      	movs	r2, #0
 8003886:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003888:	4b09      	ldr	r3, [pc, #36]	@ (80038b0 <MX_SPI1_Init+0x74>)
 800388a:	2207      	movs	r2, #7
 800388c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800388e:	4b08      	ldr	r3, [pc, #32]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003894:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <MX_SPI1_Init+0x74>)
 8003896:	2208      	movs	r2, #8
 8003898:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800389a:	4805      	ldr	r0, [pc, #20]	@ (80038b0 <MX_SPI1_Init+0x74>)
 800389c:	f00a fa0a 	bl	800dcb4 <HAL_SPI_Init>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80038a6:	f7ff fa29 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038aa:	bf00      	nop
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	20000d80 	.word	0x20000d80
 80038b4:	40013000 	.word	0x40013000

080038b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 030c 	add.w	r3, r7, #12
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a46      	ldr	r2, [pc, #280]	@ (80039f0 <HAL_SPI_MspInit+0x138>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	f040 8085 	bne.w	80039e6 <HAL_SPI_MspInit+0x12e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038dc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80038e0:	f7ff ff93 	bl	800380a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e4:	2001      	movs	r0, #1
 80038e6:	f7ff ff77 	bl	80037d8 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ea:	2002      	movs	r0, #2
 80038ec:	f7ff ff74 	bl	80037d8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80038f0:	2342      	movs	r3, #66	@ 0x42
 80038f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fc:	2300      	movs	r3, #0
 80038fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003900:	2305      	movs	r3, #5
 8003902:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	4619      	mov	r1, r3
 800390a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800390e:	f005 fb55 	bl	8008fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003912:	2320      	movs	r3, #32
 8003914:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003922:	2305      	movs	r3, #5
 8003924:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003926:	f107 030c 	add.w	r3, r7, #12
 800392a:	4619      	mov	r1, r3
 800392c:	4831      	ldr	r0, [pc, #196]	@ (80039f4 <HAL_SPI_MspInit+0x13c>)
 800392e:	f005 fb45 	bl	8008fbc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel3;
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 8003934:	4a31      	ldr	r2, [pc, #196]	@ (80039fc <HAL_SPI_MspInit+0x144>)
 8003936:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003938:	4b2f      	ldr	r3, [pc, #188]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 800393a:	2206      	movs	r2, #6
 800393c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800393e:	4b2e      	ldr	r3, [pc, #184]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003944:	4b2c      	ldr	r3, [pc, #176]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800394a:	4b2b      	ldr	r3, [pc, #172]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 800394c:	2280      	movs	r2, #128	@ 0x80
 800394e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003950:	4b29      	ldr	r3, [pc, #164]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 8003952:	2200      	movs	r2, #0
 8003954:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003956:	4b28      	ldr	r3, [pc, #160]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 8003958:	2200      	movs	r2, #0
 800395a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800395c:	4b26      	ldr	r3, [pc, #152]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 800395e:	2200      	movs	r2, #0
 8003960:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003962:	4b25      	ldr	r3, [pc, #148]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 8003964:	2200      	movs	r2, #0
 8003966:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003968:	4823      	ldr	r0, [pc, #140]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 800396a:	f004 ff53 	bl	8008814 <HAL_DMA_Init>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_SPI_MspInit+0xc0>
    {
      Error_Handler();
 8003974:	f7ff f9c2 	bl	8002cfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a1f      	ldr	r2, [pc, #124]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 800397c:	659a      	str	r2, [r3, #88]	@ 0x58
 800397e:	4a1e      	ldr	r2, [pc, #120]	@ (80039f8 <HAL_SPI_MspInit+0x140>)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel4;
 8003984:	4b1e      	ldr	r3, [pc, #120]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 8003986:	4a1f      	ldr	r2, [pc, #124]	@ (8003a04 <HAL_SPI_MspInit+0x14c>)
 8003988:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800398a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 800398c:	2207      	movs	r2, #7
 800398e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003990:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 8003992:	2210      	movs	r2, #16
 8003994:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003996:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800399c:	4b18      	ldr	r3, [pc, #96]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 800399e:	2280      	movs	r2, #128	@ 0x80
 80039a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039a2:	4b17      	ldr	r3, [pc, #92]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a8:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80039ae:	4b14      	ldr	r3, [pc, #80]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039b4:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80039ba:	4811      	ldr	r0, [pc, #68]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 80039bc:	f004 ff2a 	bl	8008814 <HAL_DMA_Init>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80039c6:	f7ff f999 	bl	8002cfc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 80039ce:	655a      	str	r2, [r3, #84]	@ 0x54
 80039d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003a00 <HAL_SPI_MspInit+0x148>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2100      	movs	r1, #0
 80039da:	2022      	movs	r0, #34	@ 0x22
 80039dc:	f004 febb 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80039e0:	2022      	movs	r0, #34	@ 0x22
 80039e2:	f004 fed2 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80039e6:	bf00      	nop
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40013000 	.word	0x40013000
 80039f4:	48000400 	.word	0x48000400
 80039f8:	20000de4 	.word	0x20000de4
 80039fc:	40020030 	.word	0x40020030
 8003a00:	20000e44 	.word	0x20000e44
 8003a04:	40020044 	.word	0x40020044

08003a08 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2){
 8003a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0c:	ed2d 8b02 	vpush	{d8}
 8003a10:	b0a7      	sub	sp, #156	@ 0x9c
 8003a12:	af16      	add	r7, sp, #88	@ 0x58
 8003a14:	6378      	str	r0, [r7, #52]	@ 0x34
 8003a16:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
 8003a1a:	edc7 0a0b 	vstr	s1, [r7, #44]	@ 0x2c
 8003a1e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003a20:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a22:	ed87 1a08 	vstr	s2, [r7, #32]
	int framesize=0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8003a2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a2c:	f7fc fd64 	bl	80004f8 <__aeabi_f2d>
 8003a30:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003a34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003a36:	f7fc fd5f 	bl	80004f8 <__aeabi_f2d>
 8003a3a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fc fd58 	bl	80004f8 <__aeabi_f2d>
 8003a48:	a332      	add	r3, pc, #200	@ (adr r3, 8003b14 <csvframe+0x10c>)
 8003a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4e:	f7fc fdab 	bl	80005a8 <__aeabi_dmul>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	ec43 2b18 	vmov	d8, r2, r3
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a62:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fc fd44 	bl	80004f8 <__aeabi_f2d>
 8003a70:	4682      	mov	sl, r0
 8003a72:	468b      	mov	fp, r1
 8003a74:	6a38      	ldr	r0, [r7, #32]
 8003a76:	f7fc fd3f 	bl	80004f8 <__aeabi_f2d>
 8003a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8003af8 <csvframe+0xf0>)
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	60fb      	str	r3, [r7, #12]
 8003a80:	4b1e      	ldr	r3, [pc, #120]	@ (8003afc <csvframe+0xf4>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	60bb      	str	r3, [r7, #8]
 8003a86:	4b1e      	ldr	r3, [pc, #120]	@ (8003b00 <csvframe+0xf8>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b04 <csvframe+0xfc>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	461e      	mov	r6, r3
 8003a92:	4b1d      	ldr	r3, [pc, #116]	@ (8003b08 <csvframe+0x100>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	4b1c      	ldr	r3, [pc, #112]	@ (8003b0c <csvframe+0x104>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8003a9e:	9214      	str	r2, [sp, #80]	@ 0x50
 8003aa0:	9613      	str	r6, [sp, #76]	@ 0x4c
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	9212      	str	r2, [sp, #72]	@ 0x48
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	9211      	str	r2, [sp, #68]	@ 0x44
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	9310      	str	r3, [sp, #64]	@ 0x40
 8003aae:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8003ab6:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8003aba:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003abe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003ac2:	ed8d 8b04 	vstr	d8, [sp, #16]
 8003ac6:	ed97 7b04 	vldr	d7, [r7, #16]
 8003aca:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003ace:	ed97 7b06 	vldr	d7, [r7, #24]
 8003ad2:	ed8d 7b00 	vstr	d7, [sp]
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b10 <csvframe+0x108>)
 8003ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003adc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ade:	f017 fde1 	bl	801b6a4 <sniprintf>
 8003ae2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	return framesize;
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3744      	adds	r7, #68	@ 0x44
 8003aea:	46bd      	mov	sp, r7
 8003aec:	ecbd 8b02 	vpop	{d8}
 8003af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af4:	f3af 8000 	nop.w
 8003af8:	20000012 	.word	0x20000012
 8003afc:	20000011 	.word	0x20000011
 8003b00:	20000010 	.word	0x20000010
 8003b04:	20000b85 	.word	0x20000b85
 8003b08:	20000b86 	.word	0x20000b86
 8003b0c:	20000b84 	.word	0x20000b84
 8003b10:	0801fd50 	.word	0x0801fd50
 8003b14:	cccccccd 	.word	0xcccccccd
 8003b18:	400ccccc 	.word	0x400ccccc

08003b1c <storeindex>:


void storeindex(void){
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b09c      	sub	sp, #112	@ 0x70
 8003b20:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8003b22:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003b26:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8003b28:	463b      	mov	r3, r7
 8003b2a:	2264      	movs	r2, #100	@ 0x64
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f017 fe4f 	bl	801b7d2 <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8003b34:	4b14      	ldr	r3, [pc, #80]	@ (8003b88 <storeindex+0x6c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <storeindex+0x70>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	4613      	mov	r3, r2
 8003b42:	4a13      	ldr	r2, [pc, #76]	@ (8003b90 <storeindex+0x74>)
 8003b44:	2164      	movs	r1, #100	@ 0x64
 8003b46:	f017 fdad 	bl	801b6a4 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8003b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	da00      	bge.n	8003b52 <storeindex+0x36>
 8003b50:	330f      	adds	r3, #15
 8003b52:	111b      	asrs	r3, r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fcbd 	bl	80004d4 <__aeabi_i2d>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4610      	mov	r0, r2
 8003b60:	4619      	mov	r1, r3
 8003b62:	f7fc ffd1 	bl	8000b08 <__aeabi_d2iz>
 8003b66:	4603      	mov	r3, r0
 8003b68:	4619      	mov	r1, r3
 8003b6a:	480a      	ldr	r0, [pc, #40]	@ (8003b94 <storeindex+0x78>)
 8003b6c:	f013 fee5 	bl	801793a <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8003b70:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003b72:	463a      	mov	r2, r7
 8003b74:	2300      	movs	r3, #0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2364      	movs	r3, #100	@ 0x64
 8003b7a:	4806      	ldr	r0, [pc, #24]	@ (8003b94 <storeindex+0x78>)
 8003b7c:	f013 ff60 	bl	8017a40 <SPIF_WritePage>

}
 8003b80:	bf00      	nop
 8003b82:	3768      	adds	r7, #104	@ 0x68
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000a9c 	.word	0x20000a9c
 8003b8c:	20000aa0 	.word	0x20000aa0
 8003b90:	0801fda4 	.word	0x0801fda4
 8003b94:	20000868 	.word	0x20000868

08003b98 <getindex>:

void getindex(void){
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8003b9e:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8003ba2:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2332      	movs	r3, #50	@ 0x32
 8003bac:	4a2b      	ldr	r2, [pc, #172]	@ (8003c5c <getindex+0xc4>)
 8003bae:	482c      	ldr	r0, [pc, #176]	@ (8003c60 <getindex+0xc8>)
 8003bb0:	f013 ff64 	bl	8017a7c <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8003bb4:	220a      	movs	r2, #10
 8003bb6:	2124      	movs	r1, #36	@ 0x24
 8003bb8:	482a      	ldr	r0, [pc, #168]	@ (8003c64 <getindex+0xcc>)
 8003bba:	f017 fe0a 	bl	801b7d2 <memset>
	memset(numbuf2,'$',10);
 8003bbe:	220a      	movs	r2, #10
 8003bc0:	2124      	movs	r1, #36	@ 0x24
 8003bc2:	4829      	ldr	r0, [pc, #164]	@ (8003c68 <getindex+0xd0>)
 8003bc4:	f017 fe05 	bl	801b7d2 <memset>
	int cnt=0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8003bcc:	4b23      	ldr	r3, [pc, #140]	@ (8003c5c <getindex+0xc4>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	2b09      	cmp	r3, #9
 8003bd6:	dc3a      	bgt.n	8003c4e <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8003bd8:	e00b      	b.n	8003bf2 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8003bda:	4a20      	ldr	r2, [pc, #128]	@ (8003c5c <getindex+0xc4>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	7819      	ldrb	r1, [r3, #0]
 8003be2:	4a20      	ldr	r2, [pc, #128]	@ (8003c64 <getindex+0xcc>)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4413      	add	r3, r2
 8003be8:	460a      	mov	r2, r1
 8003bea:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8003bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c5c <getindex+0xc4>)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	2b24      	cmp	r3, #36	@ 0x24
 8003bfc:	d1ed      	bne.n	8003bda <getindex+0x42>
		  }
		  cnt++;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	3301      	adds	r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8003c08:	e00e      	b.n	8003c28 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8003c0a:	4a14      	ldr	r2, [pc, #80]	@ (8003c5c <getindex+0xc4>)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	7819      	ldrb	r1, [r3, #0]
 8003c12:	4a15      	ldr	r2, [pc, #84]	@ (8003c68 <getindex+0xd0>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4413      	add	r3, r2
 8003c18:	460a      	mov	r2, r1
 8003c1a:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3301      	adds	r3, #1
 8003c26:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8003c28:	4a0c      	ldr	r2, [pc, #48]	@ (8003c5c <getindex+0xc4>)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b24      	cmp	r3, #36	@ 0x24
 8003c32:	d1ea      	bne.n	8003c0a <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8003c34:	480b      	ldr	r0, [pc, #44]	@ (8003c64 <getindex+0xcc>)
 8003c36:	f015 fe53 	bl	80198e0 <atoi>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c6c <getindex+0xd4>)
 8003c3e:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8003c40:	4809      	ldr	r0, [pc, #36]	@ (8003c68 <getindex+0xd0>)
 8003c42:	f015 fe4d 	bl	80198e0 <atoi>
 8003c46:	4603      	mov	r3, r0
 8003c48:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <getindex+0xd8>)
 8003c4a:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8003c4c:	e001      	b.n	8003c52 <getindex+0xba>
		storeindex();
 8003c4e:	f7ff ff65 	bl	8003b1c <storeindex>
}
 8003c52:	bf00      	nop
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000d4c 	.word	0x20000d4c
 8003c60:	20000868 	.word	0x20000868
 8003c64:	20000aa8 	.word	0x20000aa8
 8003c68:	20000ab4 	.word	0x20000ab4
 8003c6c:	20000a9c 	.word	0x20000a9c
 8003c70:	20000aa0 	.word	0x20000aa0

08003c74 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8003c7e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d7c <writebuffertoflash+0x108>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	f003 030f 	and.w	r3, r3, #15
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d11b      	bne.n	8003cc4 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8003c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8003d80 <writebuffertoflash+0x10c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d117      	bne.n	8003cc4 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8003c94:	4b39      	ldr	r3, [pc, #228]	@ (8003d7c <writebuffertoflash+0x108>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	da00      	bge.n	8003ca0 <writebuffertoflash+0x2c>
 8003c9e:	330f      	adds	r3, #15
 8003ca0:	111b      	asrs	r3, r3, #4
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fc16 	bl	80004d4 <__aeabi_i2d>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4610      	mov	r0, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	f7fc ff2a 	bl	8000b08 <__aeabi_d2iz>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4832      	ldr	r0, [pc, #200]	@ (8003d84 <writebuffertoflash+0x110>)
 8003cba:	f013 fe3e 	bl	801793a <SPIF_EraseSector>
		sectoreraseen=1;
 8003cbe:	4b30      	ldr	r3, [pc, #192]	@ (8003d80 <writebuffertoflash+0x10c>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8003cc4:	4b30      	ldr	r3, [pc, #192]	@ (8003d88 <writebuffertoflash+0x114>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4413      	add	r3, r2
 8003ccc:	2bff      	cmp	r3, #255	@ 0xff
 8003cce:	dc11      	bgt.n	8003cf4 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8003cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d7c <writebuffertoflash+0x108>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003d88 <writebuffertoflash+0x114>)
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	9200      	str	r2, [sp, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4828      	ldr	r0, [pc, #160]	@ (8003d84 <writebuffertoflash+0x110>)
 8003ce2:	f013 fead 	bl	8017a40 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8003ce6:	4b28      	ldr	r3, [pc, #160]	@ (8003d88 <writebuffertoflash+0x114>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	4413      	add	r3, r2
 8003cee:	4a26      	ldr	r2, [pc, #152]	@ (8003d88 <writebuffertoflash+0x114>)
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e03c      	b.n	8003d6e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8003cf4:	4b21      	ldr	r3, [pc, #132]	@ (8003d7c <writebuffertoflash+0x108>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4b23      	ldr	r3, [pc, #140]	@ (8003d88 <writebuffertoflash+0x114>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d02:	461a      	mov	r2, r3
 8003d04:	4b20      	ldr	r3, [pc, #128]	@ (8003d88 <writebuffertoflash+0x114>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	481d      	ldr	r0, [pc, #116]	@ (8003d84 <writebuffertoflash+0x110>)
 8003d10:	f013 fe96 	bl	8017a40 <SPIF_WritePage>
		HAL_Delay(100);
 8003d14:	2064      	movs	r0, #100	@ 0x64
 8003d16:	f7fd fd0a 	bl	800172e <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8003d1a:	4b18      	ldr	r3, [pc, #96]	@ (8003d7c <writebuffertoflash+0x108>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	4b19      	ldr	r3, [pc, #100]	@ (8003d88 <writebuffertoflash+0x114>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	1899      	adds	r1, r3, r2
 8003d30:	4b15      	ldr	r3, [pc, #84]	@ (8003d88 <writebuffertoflash+0x114>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4613      	mov	r3, r2
 8003d44:	460a      	mov	r2, r1
 8003d46:	4601      	mov	r1, r0
 8003d48:	480e      	ldr	r0, [pc, #56]	@ (8003d84 <writebuffertoflash+0x110>)
 8003d4a:	f013 fe79 	bl	8017a40 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8003d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <writebuffertoflash+0x108>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3301      	adds	r3, #1
 8003d54:	4a09      	ldr	r2, [pc, #36]	@ (8003d7c <writebuffertoflash+0x108>)
 8003d56:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8003d58:	4b09      	ldr	r3, [pc, #36]	@ (8003d80 <writebuffertoflash+0x10c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8003d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d88 <writebuffertoflash+0x114>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	4a07      	ldr	r2, [pc, #28]	@ (8003d88 <writebuffertoflash+0x114>)
 8003d6c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8003d6e:	f7ff fed5 	bl	8003b1c <storeindex>

}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000aa0 	.word	0x20000aa0
 8003d80:	20000aa4 	.word	0x20000aa4
 8003d84:	20000868 	.word	0x20000868
 8003d88:	20000a9c 	.word	0x20000a9c

08003d8c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af04      	add	r7, sp, #16
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	9302      	str	r3, [sp, #8]
 8003dac:	2301      	movs	r3, #1
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	1dfb      	adds	r3, r7, #7
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2301      	movs	r3, #1
 8003db6:	2200      	movs	r2, #0
 8003db8:	2178      	movs	r1, #120	@ 0x78
 8003dba:	4803      	ldr	r0, [pc, #12]	@ (8003dc8 <ssd1306_WriteCommand+0x2c>)
 8003dbc:	f005 fc9c 	bl	80096f8 <HAL_I2C_Mem_Write>
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000544 	.word	0x20000544

08003dcc <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af04      	add	r7, sp, #16
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	f04f 32ff 	mov.w	r2, #4294967295
 8003dde:	9202      	str	r2, [sp, #8]
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	2301      	movs	r3, #1
 8003de8:	2240      	movs	r2, #64	@ 0x40
 8003dea:	2178      	movs	r1, #120	@ 0x78
 8003dec:	4803      	ldr	r0, [pc, #12]	@ (8003dfc <ssd1306_WriteData+0x30>)
 8003dee:	f005 fc83 	bl	80096f8 <HAL_I2C_Mem_Write>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000544 	.word	0x20000544

08003e00 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003e04:	f7ff ffc2 	bl	8003d8c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003e08:	2064      	movs	r0, #100	@ 0x64
 8003e0a:	f7fd fc90 	bl	800172e <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f000 fb1a 	bl	8004448 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003e14:	2020      	movs	r0, #32
 8003e16:	f7ff ffc1 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f7ff ffbe 	bl	8003d9c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003e20:	20b0      	movs	r0, #176	@ 0xb0
 8003e22:	f7ff ffbb 	bl	8003d9c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003e26:	20c8      	movs	r0, #200	@ 0xc8
 8003e28:	f7ff ffb8 	bl	8003d9c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	f7ff ffb5 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8003e32:	2010      	movs	r0, #16
 8003e34:	f7ff ffb2 	bl	8003d9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8003e38:	2040      	movs	r0, #64	@ 0x40
 8003e3a:	f7ff ffaf 	bl	8003d9c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8003e3e:	20ff      	movs	r0, #255	@ 0xff
 8003e40:	f000 faee 	bl	8004420 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8003e44:	20a1      	movs	r0, #161	@ 0xa1
 8003e46:	f7ff ffa9 	bl	8003d9c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8003e4a:	20a6      	movs	r0, #166	@ 0xa6
 8003e4c:	f7ff ffa6 	bl	8003d9c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003e50:	20a8      	movs	r0, #168	@ 0xa8
 8003e52:	f7ff ffa3 	bl	8003d9c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8003e56:	203f      	movs	r0, #63	@ 0x3f
 8003e58:	f7ff ffa0 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003e5c:	20a4      	movs	r0, #164	@ 0xa4
 8003e5e:	f7ff ff9d 	bl	8003d9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8003e62:	20d3      	movs	r0, #211	@ 0xd3
 8003e64:	f7ff ff9a 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8003e68:	2000      	movs	r0, #0
 8003e6a:	f7ff ff97 	bl	8003d9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003e6e:	20d5      	movs	r0, #213	@ 0xd5
 8003e70:	f7ff ff94 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003e74:	20f0      	movs	r0, #240	@ 0xf0
 8003e76:	f7ff ff91 	bl	8003d9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003e7a:	20d9      	movs	r0, #217	@ 0xd9
 8003e7c:	f7ff ff8e 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8003e80:	2022      	movs	r0, #34	@ 0x22
 8003e82:	f7ff ff8b 	bl	8003d9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003e86:	20da      	movs	r0, #218	@ 0xda
 8003e88:	f7ff ff88 	bl	8003d9c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003e8c:	2012      	movs	r0, #18
 8003e8e:	f7ff ff85 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003e92:	20db      	movs	r0, #219	@ 0xdb
 8003e94:	f7ff ff82 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003e98:	2020      	movs	r0, #32
 8003e9a:	f7ff ff7f 	bl	8003d9c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003e9e:	208d      	movs	r0, #141	@ 0x8d
 8003ea0:	f7ff ff7c 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003ea4:	2014      	movs	r0, #20
 8003ea6:	f7ff ff79 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f000 facc 	bl	8004448 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f000 f80f 	bl	8003ed4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003eb6:	f000 f825 	bl	8003f04 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003eba:	4b05      	ldr	r3, [pc, #20]	@ (8003ed0 <ssd1306_Init+0xd0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	@ (8003ed0 <ssd1306_Init+0xd0>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003ec6:	4b02      	ldr	r3, [pc, #8]	@ (8003ed0 <ssd1306_Init+0xd0>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	711a      	strb	r2, [r3, #4]
}
 8003ecc:	bf00      	nop
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	200012a4 	.word	0x200012a4

08003ed4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <ssd1306_Fill+0x14>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <ssd1306_Fill+0x16>
 8003ee8:	23ff      	movs	r3, #255	@ 0xff
 8003eea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4803      	ldr	r0, [pc, #12]	@ (8003f00 <ssd1306_Fill+0x2c>)
 8003ef2:	f017 fc6e 	bl	801b7d2 <memset>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000ea4 	.word	0x20000ea4

08003f04 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	71fb      	strb	r3, [r7, #7]
 8003f0e:	e016      	b.n	8003f3e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	3b50      	subs	r3, #80	@ 0x50
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ff40 	bl	8003d9c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7ff ff3d 	bl	8003d9c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003f22:	2010      	movs	r0, #16
 8003f24:	f7ff ff3a 	bl	8003d9c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	01db      	lsls	r3, r3, #7
 8003f2c:	4a08      	ldr	r2, [pc, #32]	@ (8003f50 <ssd1306_UpdateScreen+0x4c>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	2180      	movs	r1, #128	@ 0x80
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff4a 	bl	8003dcc <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	71fb      	strb	r3, [r7, #7]
 8003f3e:	79fb      	ldrb	r3, [r7, #7]
 8003f40:	2b07      	cmp	r3, #7
 8003f42:	d9e5      	bls.n	8003f10 <ssd1306_UpdateScreen+0xc>
    }
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	20000ea4 	.word	0x20000ea4

08003f54 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	71bb      	strb	r3, [r7, #6]
 8003f62:	4613      	mov	r3, r2
 8003f64:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	db3d      	blt.n	8003fea <ssd1306_DrawPixel+0x96>
 8003f6e:	79bb      	ldrb	r3, [r7, #6]
 8003f70:	2b3f      	cmp	r3, #63	@ 0x3f
 8003f72:	d83a      	bhi.n	8003fea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003f74:	797b      	ldrb	r3, [r7, #5]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d11a      	bne.n	8003fb0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003f7a:	79fa      	ldrb	r2, [r7, #7]
 8003f7c:	79bb      	ldrb	r3, [r7, #6]
 8003f7e:	08db      	lsrs	r3, r3, #3
 8003f80:	b2d8      	uxtb	r0, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	01db      	lsls	r3, r3, #7
 8003f86:	4413      	add	r3, r2
 8003f88:	4a1b      	ldr	r2, [pc, #108]	@ (8003ff8 <ssd1306_DrawPixel+0xa4>)
 8003f8a:	5cd3      	ldrb	r3, [r2, r3]
 8003f8c:	b25a      	sxtb	r2, r3
 8003f8e:	79bb      	ldrb	r3, [r7, #6]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	b25b      	sxtb	r3, r3
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	b259      	sxtb	r1, r3
 8003fa0:	79fa      	ldrb	r2, [r7, #7]
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	01db      	lsls	r3, r3, #7
 8003fa6:	4413      	add	r3, r2
 8003fa8:	b2c9      	uxtb	r1, r1
 8003faa:	4a13      	ldr	r2, [pc, #76]	@ (8003ff8 <ssd1306_DrawPixel+0xa4>)
 8003fac:	54d1      	strb	r1, [r2, r3]
 8003fae:	e01d      	b.n	8003fec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003fb0:	79fa      	ldrb	r2, [r7, #7]
 8003fb2:	79bb      	ldrb	r3, [r7, #6]
 8003fb4:	08db      	lsrs	r3, r3, #3
 8003fb6:	b2d8      	uxtb	r0, r3
 8003fb8:	4603      	mov	r3, r0
 8003fba:	01db      	lsls	r3, r3, #7
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8003ff8 <ssd1306_DrawPixel+0xa4>)
 8003fc0:	5cd3      	ldrb	r3, [r2, r3]
 8003fc2:	b25a      	sxtb	r2, r3
 8003fc4:	79bb      	ldrb	r3, [r7, #6]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	2101      	movs	r1, #1
 8003fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd0:	b25b      	sxtb	r3, r3
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	b25b      	sxtb	r3, r3
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	b259      	sxtb	r1, r3
 8003fda:	79fa      	ldrb	r2, [r7, #7]
 8003fdc:	4603      	mov	r3, r0
 8003fde:	01db      	lsls	r3, r3, #7
 8003fe0:	4413      	add	r3, r2
 8003fe2:	b2c9      	uxtb	r1, r1
 8003fe4:	4a04      	ldr	r2, [pc, #16]	@ (8003ff8 <ssd1306_DrawPixel+0xa4>)
 8003fe6:	54d1      	strb	r1, [r2, r3]
 8003fe8:	e000      	b.n	8003fec <ssd1306_DrawPixel+0x98>
        return;
 8003fea:	bf00      	nop
    }
}
 8003fec:	370c      	adds	r7, #12
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000ea4 	.word	0x20000ea4

08003ffc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8003ffc:	b590      	push	{r4, r7, lr}
 8003ffe:	b089      	sub	sp, #36	@ 0x24
 8004000:	af00      	add	r7, sp, #0
 8004002:	4604      	mov	r4, r0
 8004004:	1d38      	adds	r0, r7, #4
 8004006:	e880 0006 	stmia.w	r0, {r1, r2}
 800400a:	461a      	mov	r2, r3
 800400c:	4623      	mov	r3, r4
 800400e:	73fb      	strb	r3, [r7, #15]
 8004010:	4613      	mov	r3, r2
 8004012:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	2b1f      	cmp	r3, #31
 8004018:	d902      	bls.n	8004020 <ssd1306_WriteChar+0x24>
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b7e      	cmp	r3, #126	@ 0x7e
 800401e:	d901      	bls.n	8004024 <ssd1306_WriteChar+0x28>
        return 0;
 8004020:	2300      	movs	r3, #0
 8004022:	e06c      	b.n	80040fe <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004024:	4b38      	ldr	r3, [pc, #224]	@ (8004108 <ssd1306_WriteChar+0x10c>)
 8004026:	881b      	ldrh	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	793b      	ldrb	r3, [r7, #4]
 800402c:	4413      	add	r3, r2
 800402e:	2b80      	cmp	r3, #128	@ 0x80
 8004030:	dc06      	bgt.n	8004040 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004032:	4b35      	ldr	r3, [pc, #212]	@ (8004108 <ssd1306_WriteChar+0x10c>)
 8004034:	885b      	ldrh	r3, [r3, #2]
 8004036:	461a      	mov	r2, r3
 8004038:	797b      	ldrb	r3, [r7, #5]
 800403a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800403c:	2b40      	cmp	r3, #64	@ 0x40
 800403e:	dd01      	ble.n	8004044 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004040:	2300      	movs	r3, #0
 8004042:	e05c      	b.n	80040fe <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004044:	2300      	movs	r3, #0
 8004046:	61fb      	str	r3, [r7, #28]
 8004048:	e04c      	b.n	80040e4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	3b20      	subs	r3, #32
 8004050:	7979      	ldrb	r1, [r7, #5]
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4619      	mov	r1, r3
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	440b      	add	r3, r1
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004064:	2300      	movs	r3, #0
 8004066:	61bb      	str	r3, [r7, #24]
 8004068:	e034      	b.n	80040d4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d012      	beq.n	80040a0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800407a:	4b23      	ldr	r3, [pc, #140]	@ (8004108 <ssd1306_WriteChar+0x10c>)
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	69bb      	ldr	r3, [r7, #24]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	4413      	add	r3, r2
 8004086:	b2d8      	uxtb	r0, r3
 8004088:	4b1f      	ldr	r3, [pc, #124]	@ (8004108 <ssd1306_WriteChar+0x10c>)
 800408a:	885b      	ldrh	r3, [r3, #2]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	4413      	add	r3, r2
 8004094:	b2db      	uxtb	r3, r3
 8004096:	7bba      	ldrb	r2, [r7, #14]
 8004098:	4619      	mov	r1, r3
 800409a:	f7ff ff5b 	bl	8003f54 <ssd1306_DrawPixel>
 800409e:	e016      	b.n	80040ce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80040a0:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <ssd1306_WriteChar+0x10c>)
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	b2d8      	uxtb	r0, r3
 80040ae:	4b16      	ldr	r3, [pc, #88]	@ (8004108 <ssd1306_WriteChar+0x10c>)
 80040b0:	885b      	ldrh	r3, [r3, #2]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	b2d9      	uxtb	r1, r3
 80040bc:	7bbb      	ldrb	r3, [r7, #14]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	f7ff ff43 	bl	8003f54 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	3301      	adds	r3, #1
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	793b      	ldrb	r3, [r7, #4]
 80040d6:	461a      	mov	r2, r3
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	4293      	cmp	r3, r2
 80040dc:	d3c5      	bcc.n	800406a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3301      	adds	r3, #1
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	797b      	ldrb	r3, [r7, #5]
 80040e6:	461a      	mov	r2, r3
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d3ad      	bcc.n	800404a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <ssd1306_WriteChar+0x10c>)
 80040f0:	881b      	ldrh	r3, [r3, #0]
 80040f2:	793a      	ldrb	r2, [r7, #4]
 80040f4:	4413      	add	r3, r2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	4b03      	ldr	r3, [pc, #12]	@ (8004108 <ssd1306_WriteChar+0x10c>)
 80040fa:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3724      	adds	r7, #36	@ 0x24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd90      	pop	{r4, r7, pc}
 8004106:	bf00      	nop
 8004108:	200012a4 	.word	0x200012a4

0800410c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	1d38      	adds	r0, r7, #4
 8004116:	e880 0006 	stmia.w	r0, {r1, r2}
 800411a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800411c:	e012      	b.n	8004144 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	7818      	ldrb	r0, [r3, #0]
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	1d3a      	adds	r2, r7, #4
 8004126:	ca06      	ldmia	r2, {r1, r2}
 8004128:	f7ff ff68 	bl	8003ffc <ssd1306_WriteChar>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d002      	beq.n	800413e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	e008      	b.n	8004150 <ssd1306_WriteString+0x44>
        }
        str++;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3301      	adds	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e8      	bne.n	800411e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	781b      	ldrb	r3, [r3, #0]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	460a      	mov	r2, r1
 8004162:	71fb      	strb	r3, [r7, #7]
 8004164:	4613      	mov	r3, r2
 8004166:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	b29a      	uxth	r2, r3
 800416c:	4b05      	ldr	r3, [pc, #20]	@ (8004184 <ssd1306_SetCursor+0x2c>)
 800416e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004170:	79bb      	ldrb	r3, [r7, #6]
 8004172:	b29a      	uxth	r2, r3
 8004174:	4b03      	ldr	r3, [pc, #12]	@ (8004184 <ssd1306_SetCursor+0x2c>)
 8004176:	805a      	strh	r2, [r3, #2]
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	200012a4 	.word	0x200012a4

08004188 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b089      	sub	sp, #36	@ 0x24
 800418c:	af00      	add	r7, sp, #0
 800418e:	4604      	mov	r4, r0
 8004190:	4608      	mov	r0, r1
 8004192:	4611      	mov	r1, r2
 8004194:	461a      	mov	r2, r3
 8004196:	4623      	mov	r3, r4
 8004198:	71fb      	strb	r3, [r7, #7]
 800419a:	4603      	mov	r3, r0
 800419c:	71bb      	strb	r3, [r7, #6]
 800419e:	460b      	mov	r3, r1
 80041a0:	717b      	strb	r3, [r7, #5]
 80041a2:	4613      	mov	r3, r2
 80041a4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80041a6:	797a      	ldrb	r2, [r7, #5]
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	bfb8      	it	lt
 80041b0:	425b      	neglt	r3, r3
 80041b2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80041b4:	793a      	ldrb	r2, [r7, #4]
 80041b6:	79bb      	ldrb	r3, [r7, #6]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	bfb8      	it	lt
 80041be:	425b      	neglt	r3, r3
 80041c0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80041c2:	79fa      	ldrb	r2, [r7, #7]
 80041c4:	797b      	ldrb	r3, [r7, #5]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d201      	bcs.n	80041ce <ssd1306_Line+0x46>
 80041ca:	2301      	movs	r3, #1
 80041cc:	e001      	b.n	80041d2 <ssd1306_Line+0x4a>
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80041d4:	79ba      	ldrb	r2, [r7, #6]
 80041d6:	793b      	ldrb	r3, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d201      	bcs.n	80041e0 <ssd1306_Line+0x58>
 80041dc:	2301      	movs	r3, #1
 80041de:	e001      	b.n	80041e4 <ssd1306_Line+0x5c>
 80041e0:	f04f 33ff 	mov.w	r3, #4294967295
 80041e4:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80041ee:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80041f2:	7939      	ldrb	r1, [r7, #4]
 80041f4:	797b      	ldrb	r3, [r7, #5]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7ff feac 	bl	8003f54 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 80041fc:	e024      	b.n	8004248 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 80041fe:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004202:	79b9      	ldrb	r1, [r7, #6]
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fea4 	bl	8003f54 <ssd1306_DrawPixel>
        error2 = error * 2;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	005b      	lsls	r3, r3, #1
 8004210:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	425b      	negs	r3, r3
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	429a      	cmp	r2, r3
 800421a:	dd08      	ble.n	800422e <ssd1306_Line+0xa6>
            error -= deltaY;
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	79fb      	ldrb	r3, [r7, #7]
 800422a:	4413      	add	r3, r2
 800422c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	429a      	cmp	r2, r3
 8004234:	da08      	bge.n	8004248 <ssd1306_Line+0xc0>
            error += deltaX;
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	4413      	add	r3, r2
 800423c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	79bb      	ldrb	r3, [r7, #6]
 8004244:	4413      	add	r3, r2
 8004246:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004248:	79fa      	ldrb	r2, [r7, #7]
 800424a:	797b      	ldrb	r3, [r7, #5]
 800424c:	429a      	cmp	r2, r3
 800424e:	d1d6      	bne.n	80041fe <ssd1306_Line+0x76>
 8004250:	79ba      	ldrb	r2, [r7, #6]
 8004252:	793b      	ldrb	r3, [r7, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d1d2      	bne.n	80041fe <ssd1306_Line+0x76>
        }
    }
    return;
 8004258:	bf00      	nop
}
 800425a:	3724      	adds	r7, #36	@ 0x24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd90      	pop	{r4, r7, pc}

08004260 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004260:	b590      	push	{r4, r7, lr}
 8004262:	b085      	sub	sp, #20
 8004264:	af02      	add	r7, sp, #8
 8004266:	4604      	mov	r4, r0
 8004268:	4608      	mov	r0, r1
 800426a:	4611      	mov	r1, r2
 800426c:	461a      	mov	r2, r3
 800426e:	4623      	mov	r3, r4
 8004270:	71fb      	strb	r3, [r7, #7]
 8004272:	4603      	mov	r3, r0
 8004274:	71bb      	strb	r3, [r7, #6]
 8004276:	460b      	mov	r3, r1
 8004278:	717b      	strb	r3, [r7, #5]
 800427a:	4613      	mov	r3, r2
 800427c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800427e:	79bc      	ldrb	r4, [r7, #6]
 8004280:	797a      	ldrb	r2, [r7, #5]
 8004282:	79b9      	ldrb	r1, [r7, #6]
 8004284:	79f8      	ldrb	r0, [r7, #7]
 8004286:	7e3b      	ldrb	r3, [r7, #24]
 8004288:	9300      	str	r3, [sp, #0]
 800428a:	4623      	mov	r3, r4
 800428c:	f7ff ff7c 	bl	8004188 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004290:	793c      	ldrb	r4, [r7, #4]
 8004292:	797a      	ldrb	r2, [r7, #5]
 8004294:	79b9      	ldrb	r1, [r7, #6]
 8004296:	7978      	ldrb	r0, [r7, #5]
 8004298:	7e3b      	ldrb	r3, [r7, #24]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	4623      	mov	r3, r4
 800429e:	f7ff ff73 	bl	8004188 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80042a2:	793c      	ldrb	r4, [r7, #4]
 80042a4:	79fa      	ldrb	r2, [r7, #7]
 80042a6:	7939      	ldrb	r1, [r7, #4]
 80042a8:	7978      	ldrb	r0, [r7, #5]
 80042aa:	7e3b      	ldrb	r3, [r7, #24]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4623      	mov	r3, r4
 80042b0:	f7ff ff6a 	bl	8004188 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80042b4:	79bc      	ldrb	r4, [r7, #6]
 80042b6:	79fa      	ldrb	r2, [r7, #7]
 80042b8:	7939      	ldrb	r1, [r7, #4]
 80042ba:	79f8      	ldrb	r0, [r7, #7]
 80042bc:	7e3b      	ldrb	r3, [r7, #24]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	4623      	mov	r3, r4
 80042c2:	f7ff ff61 	bl	8004188 <ssd1306_Line>

    return;
 80042c6:	bf00      	nop
}
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd90      	pop	{r4, r7, pc}

080042ce <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80042ce:	b590      	push	{r4, r7, lr}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	4604      	mov	r4, r0
 80042d6:	4608      	mov	r0, r1
 80042d8:	4611      	mov	r1, r2
 80042da:	461a      	mov	r2, r3
 80042dc:	4623      	mov	r3, r4
 80042de:	71fb      	strb	r3, [r7, #7]
 80042e0:	4603      	mov	r3, r0
 80042e2:	71bb      	strb	r3, [r7, #6]
 80042e4:	460b      	mov	r3, r1
 80042e6:	717b      	strb	r3, [r7, #5]
 80042e8:	4613      	mov	r3, r2
 80042ea:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80042ec:	79fa      	ldrb	r2, [r7, #7]
 80042ee:	797b      	ldrb	r3, [r7, #5]
 80042f0:	4293      	cmp	r3, r2
 80042f2:	bf28      	it	cs
 80042f4:	4613      	movcs	r3, r2
 80042f6:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80042f8:	797a      	ldrb	r2, [r7, #5]
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	4293      	cmp	r3, r2
 80042fe:	bf38      	it	cc
 8004300:	4613      	movcc	r3, r2
 8004302:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8004304:	79ba      	ldrb	r2, [r7, #6]
 8004306:	793b      	ldrb	r3, [r7, #4]
 8004308:	4293      	cmp	r3, r2
 800430a:	bf28      	it	cs
 800430c:	4613      	movcs	r3, r2
 800430e:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004310:	793a      	ldrb	r2, [r7, #4]
 8004312:	79bb      	ldrb	r3, [r7, #6]
 8004314:	4293      	cmp	r3, r2
 8004316:	bf38      	it	cc
 8004318:	4613      	movcc	r3, r2
 800431a:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800431c:	7afb      	ldrb	r3, [r7, #11]
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e017      	b.n	8004352 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004322:	7b7b      	ldrb	r3, [r7, #13]
 8004324:	73bb      	strb	r3, [r7, #14]
 8004326:	e009      	b.n	800433c <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004328:	f897 2020 	ldrb.w	r2, [r7, #32]
 800432c:	7bf9      	ldrb	r1, [r7, #15]
 800432e:	7bbb      	ldrb	r3, [r7, #14]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fe0f 	bl	8003f54 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004336:	7bbb      	ldrb	r3, [r7, #14]
 8004338:	3301      	adds	r3, #1
 800433a:	73bb      	strb	r3, [r7, #14]
 800433c:	7bba      	ldrb	r2, [r7, #14]
 800433e:	7b3b      	ldrb	r3, [r7, #12]
 8004340:	429a      	cmp	r2, r3
 8004342:	d803      	bhi.n	800434c <ssd1306_FillRectangle+0x7e>
 8004344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004348:	2b00      	cmp	r3, #0
 800434a:	daed      	bge.n	8004328 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	3301      	adds	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	7abb      	ldrb	r3, [r7, #10]
 8004356:	429a      	cmp	r2, r3
 8004358:	d803      	bhi.n	8004362 <ssd1306_FillRectangle+0x94>
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b3f      	cmp	r3, #63	@ 0x3f
 800435e:	d9e0      	bls.n	8004322 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004360:	bf00      	nop
 8004362:	bf00      	nop
}
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bd90      	pop	{r4, r7, pc}

0800436a <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	603a      	str	r2, [r7, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4603      	mov	r3, r0
 8004376:	71fb      	strb	r3, [r7, #7]
 8004378:	460b      	mov	r3, r1
 800437a:	71bb      	strb	r3, [r7, #6]
 800437c:	4613      	mov	r3, r2
 800437e:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004380:	797b      	ldrb	r3, [r7, #5]
 8004382:	3307      	adds	r3, #7
 8004384:	2b00      	cmp	r3, #0
 8004386:	da00      	bge.n	800438a <ssd1306_DrawBitmap+0x20>
 8004388:	3307      	adds	r3, #7
 800438a:	10db      	asrs	r3, r3, #3
 800438c:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004396:	2b00      	cmp	r3, #0
 8004398:	db3e      	blt.n	8004418 <ssd1306_DrawBitmap+0xae>
 800439a:	79bb      	ldrb	r3, [r7, #6]
 800439c:	2b3f      	cmp	r3, #63	@ 0x3f
 800439e:	d83b      	bhi.n	8004418 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80043a0:	2300      	movs	r3, #0
 80043a2:	73bb      	strb	r3, [r7, #14]
 80043a4:	e033      	b.n	800440e <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80043a6:	2300      	movs	r3, #0
 80043a8:	737b      	strb	r3, [r7, #13]
 80043aa:	e026      	b.n	80043fa <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80043ac:	7b7b      	ldrb	r3, [r7, #13]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
 80043bc:	e00d      	b.n	80043da <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80043be:	7bbb      	ldrb	r3, [r7, #14]
 80043c0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043c4:	fb02 f303 	mul.w	r3, r2, r3
 80043c8:	7b7a      	ldrb	r2, [r7, #13]
 80043ca:	08d2      	lsrs	r2, r2, #3
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	4413      	add	r3, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	4413      	add	r3, r2
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80043da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	da08      	bge.n	80043f4 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80043e2:	79fa      	ldrb	r2, [r7, #7]
 80043e4:	7b7b      	ldrb	r3, [r7, #13]
 80043e6:	4413      	add	r3, r2
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	7f3a      	ldrb	r2, [r7, #28]
 80043ec:	79b9      	ldrb	r1, [r7, #6]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fdb0 	bl	8003f54 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80043f4:	7b7b      	ldrb	r3, [r7, #13]
 80043f6:	3301      	adds	r3, #1
 80043f8:	737b      	strb	r3, [r7, #13]
 80043fa:	7b7a      	ldrb	r2, [r7, #13]
 80043fc:	797b      	ldrb	r3, [r7, #5]
 80043fe:	429a      	cmp	r2, r3
 8004400:	d3d4      	bcc.n	80043ac <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8004402:	7bbb      	ldrb	r3, [r7, #14]
 8004404:	3301      	adds	r3, #1
 8004406:	73bb      	strb	r3, [r7, #14]
 8004408:	79bb      	ldrb	r3, [r7, #6]
 800440a:	3301      	adds	r3, #1
 800440c:	71bb      	strb	r3, [r7, #6]
 800440e:	7bba      	ldrb	r2, [r7, #14]
 8004410:	7e3b      	ldrb	r3, [r7, #24]
 8004412:	429a      	cmp	r2, r3
 8004414:	d3c7      	bcc.n	80043a6 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004416:	e000      	b.n	800441a <ssd1306_DrawBitmap+0xb0>
        return;
 8004418:	bf00      	nop
}
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8004420:	b580      	push	{r7, lr}
 8004422:	b084      	sub	sp, #16
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800442a:	2381      	movs	r3, #129	@ 0x81
 800442c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fcb3 	bl	8003d9c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fcaf 	bl	8003d9c <ssd1306_WriteCommand>
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
	...

08004448 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004452:	79fb      	ldrb	r3, [r7, #7]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004458:	23af      	movs	r3, #175	@ 0xaf
 800445a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800445c:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <ssd1306_SetDisplayOn+0x38>)
 800445e:	2201      	movs	r2, #1
 8004460:	715a      	strb	r2, [r3, #5]
 8004462:	e004      	b.n	800446e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004464:	23ae      	movs	r3, #174	@ 0xae
 8004466:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004468:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <ssd1306_SetDisplayOn+0x38>)
 800446a:	2200      	movs	r2, #0
 800446c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fc93 	bl	8003d9c <ssd1306_WriteCommand>
}
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	200012a4 	.word	0x200012a4
 8004484:	00000000 	.word	0x00000000

08004488 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b087      	sub	sp, #28
 800448c:	af02      	add	r7, sp, #8
 800448e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004492:	60b8      	str	r0, [r7, #8]
 8004494:	6079      	str	r1, [r7, #4]
 8004496:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	330f      	adds	r3, #15
 800449e:	b2d8      	uxtb	r0, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	3301      	adds	r3, #1
 80044a6:	b2d9      	uxtb	r1, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	330f      	adds	r3, #15
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	3305      	adds	r3, #5
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2401      	movs	r4, #1
 80044ba:	9400      	str	r4, [sp, #0]
 80044bc:	f7ff fe64 	bl	8004188 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	3310      	adds	r3, #16
 80044c6:	b2d8      	uxtb	r0, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	b2d9      	uxtb	r1, r3
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	3310      	adds	r3, #16
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	3305      	adds	r3, #5
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2401      	movs	r4, #1
 80044e2:	9400      	str	r4, [sp, #0]
 80044e4:	f7ff fe50 	bl	8004188 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	b2d8      	uxtb	r0, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	b2d9      	uxtb	r1, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	330e      	adds	r3, #14
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	3306      	adds	r3, #6
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2401      	movs	r4, #1
 8004502:	9400      	str	r4, [sp, #0]
 8004504:	f7ff feac 	bl	8004260 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7fb fff5 	bl	80004f8 <__aeabi_f2d>
 800450e:	a396      	add	r3, pc, #600	@ (adr r3, 8004768 <batterygauge+0x2e0>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fc fac4 	bl	8000aa0 <__aeabi_dcmple>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d02a      	beq.n	8004574 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	3302      	adds	r3, #2
 8004524:	b2d8      	uxtb	r0, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	3302      	adds	r3, #2
 800452c:	b2d9      	uxtb	r1, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	3303      	adds	r3, #3
 8004534:	b2da      	uxtb	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	3304      	adds	r3, #4
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2401      	movs	r4, #1
 8004540:	9400      	str	r4, [sp, #0]
 8004542:	f7ff fe8d 	bl	8004260 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d113      	bne.n	8004574 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	3302      	adds	r3, #2
 8004552:	b2d8      	uxtb	r0, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	b2db      	uxtb	r3, r3
 8004558:	3302      	adds	r3, #2
 800455a:	b2d9      	uxtb	r1, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	b2db      	uxtb	r3, r3
 8004560:	3303      	adds	r3, #3
 8004562:	b2da      	uxtb	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	3304      	adds	r3, #4
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2401      	movs	r4, #1
 800456e:	9400      	str	r4, [sp, #0]
 8004570:	f7ff fe76 	bl	8004260 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7fb ffbf 	bl	80004f8 <__aeabi_f2d>
 800457a:	a37b      	add	r3, pc, #492	@ (adr r3, 8004768 <batterygauge+0x2e0>)
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f7fc faa2 	bl	8000ac8 <__aeabi_dcmpgt>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d035      	beq.n	80045f6 <batterygauge+0x16e>
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f7fb ffb4 	bl	80004f8 <__aeabi_f2d>
 8004590:	a377      	add	r3, pc, #476	@ (adr r3, 8004770 <batterygauge+0x2e8>)
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fc fa83 	bl	8000aa0 <__aeabi_dcmple>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02a      	beq.n	80045f6 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	3302      	adds	r3, #2
 80045a6:	b2d8      	uxtb	r0, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	3302      	adds	r3, #2
 80045ae:	b2d9      	uxtb	r1, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	3303      	adds	r3, #3
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	3304      	adds	r3, #4
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2401      	movs	r4, #1
 80045c2:	9400      	str	r4, [sp, #0]
 80045c4:	f7ff fe4c 	bl	8004260 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d113      	bne.n	80045f6 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	3305      	adds	r3, #5
 80045d4:	b2d8      	uxtb	r0, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	3302      	adds	r3, #2
 80045dc:	b2d9      	uxtb	r1, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	3306      	adds	r3, #6
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	3304      	adds	r3, #4
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2401      	movs	r4, #1
 80045f0:	9400      	str	r4, [sp, #0]
 80045f2:	f7ff fe35 	bl	8004260 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7fb ff7e 	bl	80004f8 <__aeabi_f2d>
 80045fc:	a35c      	add	r3, pc, #368	@ (adr r3, 8004770 <batterygauge+0x2e8>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fc fa61 	bl	8000ac8 <__aeabi_dcmpgt>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d049      	beq.n	80046a0 <batterygauge+0x218>
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7fb ff73 	bl	80004f8 <__aeabi_f2d>
 8004612:	a359      	add	r3, pc, #356	@ (adr r3, 8004778 <batterygauge+0x2f0>)
 8004614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004618:	f7fc fa42 	bl	8000aa0 <__aeabi_dcmple>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d03e      	beq.n	80046a0 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	3302      	adds	r3, #2
 8004628:	b2d8      	uxtb	r0, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	3302      	adds	r3, #2
 8004630:	b2d9      	uxtb	r1, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	3303      	adds	r3, #3
 8004638:	b2da      	uxtb	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	b2db      	uxtb	r3, r3
 800463e:	3304      	adds	r3, #4
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2401      	movs	r4, #1
 8004644:	9400      	str	r4, [sp, #0]
 8004646:	f7ff fe0b 	bl	8004260 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	3305      	adds	r3, #5
 8004650:	b2d8      	uxtb	r0, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	b2db      	uxtb	r3, r3
 8004656:	3302      	adds	r3, #2
 8004658:	b2d9      	uxtb	r1, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	3306      	adds	r3, #6
 8004660:	b2da      	uxtb	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	3304      	adds	r3, #4
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2401      	movs	r4, #1
 800466c:	9400      	str	r4, [sp, #0]
 800466e:	f7ff fdf7 	bl	8004260 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d113      	bne.n	80046a0 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	3308      	adds	r3, #8
 800467e:	b2d8      	uxtb	r0, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	3302      	adds	r3, #2
 8004686:	b2d9      	uxtb	r1, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3309      	adds	r3, #9
 800468e:	b2da      	uxtb	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	b2db      	uxtb	r3, r3
 8004694:	3304      	adds	r3, #4
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2401      	movs	r4, #1
 800469a:	9400      	str	r4, [sp, #0]
 800469c:	f7ff fde0 	bl	8004260 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f7fb ff29 	bl	80004f8 <__aeabi_f2d>
 80046a6:	a334      	add	r3, pc, #208	@ (adr r3, 8004778 <batterygauge+0x2f0>)
 80046a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ac:	f7fc fa0c 	bl	8000ac8 <__aeabi_dcmpgt>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d100      	bne.n	80046b8 <batterygauge+0x230>
	}




}
 80046b6:	e052      	b.n	800475e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3302      	adds	r3, #2
 80046be:	b2d8      	uxtb	r0, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3302      	adds	r3, #2
 80046c6:	b2d9      	uxtb	r1, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	3303      	adds	r3, #3
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3304      	adds	r3, #4
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2401      	movs	r4, #1
 80046da:	9400      	str	r4, [sp, #0]
 80046dc:	f7ff fdc0 	bl	8004260 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	3305      	adds	r3, #5
 80046e6:	b2d8      	uxtb	r0, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	3302      	adds	r3, #2
 80046ee:	b2d9      	uxtb	r1, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	3306      	adds	r3, #6
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	3304      	adds	r3, #4
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2401      	movs	r4, #1
 8004702:	9400      	str	r4, [sp, #0]
 8004704:	f7ff fdac 	bl	8004260 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	3308      	adds	r3, #8
 800470e:	b2d8      	uxtb	r0, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	3302      	adds	r3, #2
 8004716:	b2d9      	uxtb	r1, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	3309      	adds	r3, #9
 800471e:	b2da      	uxtb	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3304      	adds	r3, #4
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2401      	movs	r4, #1
 800472a:	9400      	str	r4, [sp, #0]
 800472c:	f7ff fd98 	bl	8004260 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d113      	bne.n	800475e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	b2db      	uxtb	r3, r3
 800473a:	330b      	adds	r3, #11
 800473c:	b2d8      	uxtb	r0, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	b2db      	uxtb	r3, r3
 8004742:	3302      	adds	r3, #2
 8004744:	b2d9      	uxtb	r1, r3
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	330c      	adds	r3, #12
 800474c:	b2da      	uxtb	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	3304      	adds	r3, #4
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2401      	movs	r4, #1
 8004758:	9400      	str	r4, [sp, #0]
 800475a:	f7ff fd81 	bl	8004260 <ssd1306_DrawRectangle>
}
 800475e:	bf00      	nop
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}
 8004766:	bf00      	nop
 8004768:	9999999a 	.word	0x9999999a
 800476c:	400d9999 	.word	0x400d9999
 8004770:	33333333 	.word	0x33333333
 8004774:	400f3333 	.word	0x400f3333
 8004778:	66666666 	.word	0x66666666
 800477c:	40106666 	.word	0x40106666

08004780 <percentage>:

void percentage(float percent){
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af02      	add	r7, sp, #8
 8004786:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 20, floor(0.64*percent+32), 36, White);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fb feb4 	bl	80004f8 <__aeabi_f2d>
 8004790:	a329      	add	r3, pc, #164	@ (adr r3, 8004838 <percentage+0xb8>)
 8004792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004796:	f7fb ff07 	bl	80005a8 <__aeabi_dmul>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	f04f 0200 	mov.w	r2, #0
 80047a6:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <percentage+0xa8>)
 80047a8:	f7fb fd48 	bl	800023c <__adddf3>
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	ec43 2b17 	vmov	d7, r2, r3
 80047b4:	eeb0 0a47 	vmov.f32	s0, s14
 80047b8:	eef0 0a67 	vmov.f32	s1, s15
 80047bc:	f019 fe64 	bl	801e488 <floor>
 80047c0:	ec53 2b10 	vmov	r2, r3, d0
 80047c4:	4610      	mov	r0, r2
 80047c6:	4619      	mov	r1, r3
 80047c8:	f7fc f9c6 	bl	8000b58 <__aeabi_d2uiz>
 80047cc:	4603      	mov	r3, r0
 80047ce:	b2da      	uxtb	r2, r3
 80047d0:	2301      	movs	r3, #1
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	2324      	movs	r3, #36	@ 0x24
 80047d6:	2114      	movs	r1, #20
 80047d8:	2020      	movs	r0, #32
 80047da:	f7ff fd78 	bl	80042ce <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 20, 95, 36, White);
 80047de:	2301      	movs	r3, #1
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2324      	movs	r3, #36	@ 0x24
 80047e4:	225f      	movs	r2, #95	@ 0x5f
 80047e6:	2114      	movs	r1, #20
 80047e8:	2020      	movs	r0, #32
 80047ea:	f7ff fd39 	bl	8004260 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fb fe82 	bl	80004f8 <__aeabi_f2d>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	e9cd 2300 	strd	r2, r3, [sp]
 80047fc:	4a0b      	ldr	r2, [pc, #44]	@ (800482c <percentage+0xac>)
 80047fe:	2114      	movs	r1, #20
 8004800:	480b      	ldr	r0, [pc, #44]	@ (8004830 <percentage+0xb0>)
 8004802:	f016 ff4f 	bl	801b6a4 <sniprintf>
	ssd1306_SetCursor(45,24);
 8004806:	2118      	movs	r1, #24
 8004808:	202d      	movs	r0, #45	@ 0x2d
 800480a:	f7ff fca5 	bl	8004158 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 800480e:	4a09      	ldr	r2, [pc, #36]	@ (8004834 <percentage+0xb4>)
 8004810:	2301      	movs	r3, #1
 8004812:	ca06      	ldmia	r2, {r1, r2}
 8004814:	4806      	ldr	r0, [pc, #24]	@ (8004830 <percentage+0xb0>)
 8004816:	f7ff fc79 	bl	800410c <ssd1306_WriteString>


}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	f3af 8000 	nop.w
 8004828:	40400000 	.word	0x40400000
 800482c:	0801fdac 	.word	0x0801fdac
 8004830:	20000ac0 	.word	0x20000ac0
 8004834:	20000014 	.word	0x20000014
 8004838:	47ae147b 	.word	0x47ae147b
 800483c:	3fe47ae1 	.word	0x3fe47ae1

08004840 <statemachine>:





void statemachine(void){
 8004840:	b5b0      	push	{r4, r5, r7, lr}
 8004842:	ed2d 8b02 	vpush	{d8}
 8004846:	b08a      	sub	sp, #40	@ 0x28
 8004848:	af04      	add	r7, sp, #16
	switch(state){
 800484a:	4b9f      	ldr	r3, [pc, #636]	@ (8004ac8 <statemachine+0x288>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b05      	cmp	r3, #5
 8004850:	f201 8581 	bhi.w	8006356 <statemachine+0x1b16>
 8004854:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <statemachine+0x1c>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	08004875 	.word	0x08004875
 8004860:	08004c93 	.word	0x08004c93
 8004864:	0800544d 	.word	0x0800544d
 8004868:	08005af9 	.word	0x08005af9
 800486c:	08005d73 	.word	0x08005d73
 8004870:	0800627f 	.word	0x0800627f
	 case STATE_SPEED:
				 ssd1306_Fill(Black);
 8004874:	2000      	movs	r0, #0
 8004876:	f7ff fb2d 	bl	8003ed4 <ssd1306_Fill>
				 ssd1306_SetCursor(32, 32);
 800487a:	2120      	movs	r1, #32
 800487c:	2020      	movs	r0, #32
 800487e:	f7ff fc6b 	bl	8004158 <ssd1306_SetCursor>
				 nmea_parse(&myData, DataBuffer);
 8004882:	4992      	ldr	r1, [pc, #584]	@ (8004acc <statemachine+0x28c>)
 8004884:	4892      	ldr	r0, [pc, #584]	@ (8004ad0 <statemachine+0x290>)
 8004886:	f7fe fd55 	bl	8003334 <nmea_parse>
				 if(myData.speed>=vitmax){
 800488a:	4b91      	ldr	r3, [pc, #580]	@ (8004ad0 <statemachine+0x290>)
 800488c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004890:	4b90      	ldr	r3, [pc, #576]	@ (8004ad4 <statemachine+0x294>)
 8004892:	edd3 7a00 	vldr	s15, [r3]
 8004896:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800489a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489e:	db03      	blt.n	80048a8 <statemachine+0x68>
									 vitmax=myData.speed;
 80048a0:	4b8b      	ldr	r3, [pc, #556]	@ (8004ad0 <statemachine+0x290>)
 80048a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a4:	4a8b      	ldr	r2, [pc, #556]	@ (8004ad4 <statemachine+0x294>)
 80048a6:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80048a8:	f04f 0300 	mov.w	r3, #0
 80048ac:	617b      	str	r3, [r7, #20]
								 float sec=0;
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 80048b4:	4b86      	ldr	r3, [pc, #536]	@ (8004ad0 <statemachine+0x290>)
 80048b6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80048ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d032      	beq.n	800492a <statemachine+0xea>
									 pace=1000/(60*myData.speed);
 80048c4:	4b82      	ldr	r3, [pc, #520]	@ (8004ad0 <statemachine+0x290>)
 80048c6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80048ca:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8004ad8 <statemachine+0x298>
 80048ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80048d2:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8004adc <statemachine+0x29c>
 80048d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048da:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	f7fb fe0a 	bl	80004f8 <__aeabi_f2d>
 80048e4:	4604      	mov	r4, r0
 80048e6:	460d      	mov	r5, r1
 80048e8:	6978      	ldr	r0, [r7, #20]
 80048ea:	f7fb fe05 	bl	80004f8 <__aeabi_f2d>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	ec43 2b10 	vmov	d0, r2, r3
 80048f6:	f019 fdc7 	bl	801e488 <floor>
 80048fa:	ec53 2b10 	vmov	r2, r3, d0
 80048fe:	4620      	mov	r0, r4
 8004900:	4629      	mov	r1, r5
 8004902:	f7fb fc99 	bl	8000238 <__aeabi_dsub>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	4b73      	ldr	r3, [pc, #460]	@ (8004ae0 <statemachine+0x2a0>)
 8004914:	f7fb fe48 	bl	80005a8 <__aeabi_dmul>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4610      	mov	r0, r2
 800491e:	4619      	mov	r1, r3
 8004920:	f7fc f93a 	bl	8000b98 <__aeabi_d2f>
 8004924:	4603      	mov	r3, r0
 8004926:	613b      	str	r3, [r7, #16]
 8004928:	e001      	b.n	800492e <statemachine+0xee>
								 }
								 else {
									 pace=99;
 800492a:	4b6e      	ldr	r3, [pc, #440]	@ (8004ae4 <statemachine+0x2a4>)
 800492c:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 800492e:	4b6e      	ldr	r3, [pc, #440]	@ (8004ae8 <statemachine+0x2a8>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b02      	cmp	r3, #2
 8004934:	f000 80f0 	beq.w	8004b18 <statemachine+0x2d8>
 8004938:	2b02      	cmp	r3, #2
 800493a:	f300 8164 	bgt.w	8004c06 <statemachine+0x3c6>
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <statemachine+0x108>
 8004942:	2b01      	cmp	r3, #1
 8004944:	d05d      	beq.n	8004a02 <statemachine+0x1c2>
 8004946:	e15e      	b.n	8004c06 <statemachine+0x3c6>


				 case STATE_GROS:


						ssd1306_SetCursor(32, 12);
 8004948:	210c      	movs	r1, #12
 800494a:	2020      	movs	r0, #32
 800494c:	f7ff fc04 	bl	8004158 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8004950:	4b5f      	ldr	r3, [pc, #380]	@ (8004ad0 <statemachine+0x290>)
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	4618      	mov	r0, r3
 8004956:	f7fb fdcf 	bl	80004f8 <__aeabi_f2d>
 800495a:	a359      	add	r3, pc, #356	@ (adr r3, 8004ac0 <statemachine+0x280>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fe22 	bl	80005a8 <__aeabi_dmul>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	e9cd 2300 	strd	r2, r3, [sp]
 800496c:	4a5f      	ldr	r2, [pc, #380]	@ (8004aec <statemachine+0x2ac>)
 800496e:	210f      	movs	r1, #15
 8004970:	485f      	ldr	r0, [pc, #380]	@ (8004af0 <statemachine+0x2b0>)
 8004972:	f016 fe97 	bl	801b6a4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8004976:	4a5f      	ldr	r2, [pc, #380]	@ (8004af4 <statemachine+0x2b4>)
 8004978:	2301      	movs	r3, #1
 800497a:	ca06      	ldmia	r2, {r1, r2}
 800497c:	485c      	ldr	r0, [pc, #368]	@ (8004af0 <statemachine+0x2b0>)
 800497e:	f7ff fbc5 	bl	800410c <ssd1306_WriteString>
						ssd1306_SetCursor(32, 30);
 8004982:	211e      	movs	r1, #30
 8004984:	2020      	movs	r0, #32
 8004986:	f7ff fbe7 	bl	8004158 <ssd1306_SetCursor>
						ssd1306_WriteString("vit(kmh)", Font_6x8, White);
 800498a:	4a5b      	ldr	r2, [pc, #364]	@ (8004af8 <statemachine+0x2b8>)
 800498c:	2301      	movs	r3, #1
 800498e:	ca06      	ldmia	r2, {r1, r2}
 8004990:	485a      	ldr	r0, [pc, #360]	@ (8004afc <statemachine+0x2bc>)
 8004992:	f7ff fbbb 	bl	800410c <ssd1306_WriteString>
						ssd1306_SetCursor(32, 38);
 8004996:	2126      	movs	r1, #38	@ 0x26
 8004998:	2020      	movs	r0, #32
 800499a:	f7ff fbdd 	bl	8004158 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "max=%0.1fkmh",(vitmax)*3.6);
 800499e:	4b4d      	ldr	r3, [pc, #308]	@ (8004ad4 <statemachine+0x294>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fb fda8 	bl	80004f8 <__aeabi_f2d>
 80049a8:	a345      	add	r3, pc, #276	@ (adr r3, 8004ac0 <statemachine+0x280>)
 80049aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ae:	f7fb fdfb 	bl	80005a8 <__aeabi_dmul>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	e9cd 2300 	strd	r2, r3, [sp]
 80049ba:	4a51      	ldr	r2, [pc, #324]	@ (8004b00 <statemachine+0x2c0>)
 80049bc:	210f      	movs	r1, #15
 80049be:	484c      	ldr	r0, [pc, #304]	@ (8004af0 <statemachine+0x2b0>)
 80049c0:	f016 fe70 	bl	801b6a4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80049c4:	4a4c      	ldr	r2, [pc, #304]	@ (8004af8 <statemachine+0x2b8>)
 80049c6:	2301      	movs	r3, #1
 80049c8:	ca06      	ldmia	r2, {r1, r2}
 80049ca:	4849      	ldr	r0, [pc, #292]	@ (8004af0 <statemachine+0x2b0>)
 80049cc:	f7ff fb9e 	bl	800410c <ssd1306_WriteString>
						batterygauge(vbat,83, 30,1);
 80049d0:	4b4c      	ldr	r3, [pc, #304]	@ (8004b04 <statemachine+0x2c4>)
 80049d2:	edd3 7a00 	vldr	s15, [r3]
 80049d6:	2201      	movs	r2, #1
 80049d8:	211e      	movs	r1, #30
 80049da:	2053      	movs	r0, #83	@ 0x53
 80049dc:	eeb0 0a67 	vmov.f32	s0, s15
 80049e0:	f7ff fd52 	bl	8004488 <batterygauge>

					 if(BTN_B>=1){
 80049e4:	4b48      	ldr	r3, [pc, #288]	@ (8004b08 <statemachine+0x2c8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f340 8107 	ble.w	8004bfc <statemachine+0x3bc>
							spdstate++;
 80049ee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ae8 <statemachine+0x2a8>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4b3c      	ldr	r3, [pc, #240]	@ (8004ae8 <statemachine+0x2a8>)
 80049f8:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 80049fa:	4b43      	ldr	r3, [pc, #268]	@ (8004b08 <statemachine+0x2c8>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
					 					 				  	}




				  break;
 8004a00:	e0fc      	b.n	8004bfc <statemachine+0x3bc>
				 case STATE_GROS1:

					 ssd1306_SetCursor(32, 12);
 8004a02:	210c      	movs	r1, #12
 8004a04:	2020      	movs	r0, #32
 8004a06:	f7ff fba7 	bl	8004158 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1fkmh",vitmax*3.6);
 8004a0a:	4b32      	ldr	r3, [pc, #200]	@ (8004ad4 <statemachine+0x294>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fb fd72 	bl	80004f8 <__aeabi_f2d>
 8004a14:	a32a      	add	r3, pc, #168	@ (adr r3, 8004ac0 <statemachine+0x280>)
 8004a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a1a:	f7fb fdc5 	bl	80005a8 <__aeabi_dmul>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	460b      	mov	r3, r1
 8004a22:	e9cd 2300 	strd	r2, r3, [sp]
 8004a26:	4a39      	ldr	r2, [pc, #228]	@ (8004b0c <statemachine+0x2cc>)
 8004a28:	210f      	movs	r1, #15
 8004a2a:	4831      	ldr	r0, [pc, #196]	@ (8004af0 <statemachine+0x2b0>)
 8004a2c:	f016 fe3a 	bl	801b6a4 <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8004a30:	4a30      	ldr	r2, [pc, #192]	@ (8004af4 <statemachine+0x2b4>)
 8004a32:	2301      	movs	r3, #1
 8004a34:	ca06      	ldmia	r2, {r1, r2}
 8004a36:	482e      	ldr	r0, [pc, #184]	@ (8004af0 <statemachine+0x2b0>)
 8004a38:	f7ff fb68 	bl	800410c <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 30);
 8004a3c:	211e      	movs	r1, #30
 8004a3e:	2020      	movs	r0, #32
 8004a40:	f7ff fb8a 	bl	8004158 <ssd1306_SetCursor>
					 ssd1306_WriteString("maxspeed", Font_6x8, White);
 8004a44:	4a2c      	ldr	r2, [pc, #176]	@ (8004af8 <statemachine+0x2b8>)
 8004a46:	2301      	movs	r3, #1
 8004a48:	ca06      	ldmia	r2, {r1, r2}
 8004a4a:	4831      	ldr	r0, [pc, #196]	@ (8004b10 <statemachine+0x2d0>)
 8004a4c:	f7ff fb5e 	bl	800410c <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 38);
 8004a50:	2126      	movs	r1, #38	@ 0x26
 8004a52:	2020      	movs	r0, #32
 8004a54:	f7ff fb80 	bl	8004158 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "V=%0.1fkmh",(myData.speed)*3.6);
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <statemachine+0x290>)
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fb fd4b 	bl	80004f8 <__aeabi_f2d>
 8004a62:	a317      	add	r3, pc, #92	@ (adr r3, 8004ac0 <statemachine+0x280>)
 8004a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a68:	f7fb fd9e 	bl	80005a8 <__aeabi_dmul>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	e9cd 2300 	strd	r2, r3, [sp]
 8004a74:	4a27      	ldr	r2, [pc, #156]	@ (8004b14 <statemachine+0x2d4>)
 8004a76:	210f      	movs	r1, #15
 8004a78:	481d      	ldr	r0, [pc, #116]	@ (8004af0 <statemachine+0x2b0>)
 8004a7a:	f016 fe13 	bl	801b6a4 <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004af8 <statemachine+0x2b8>)
 8004a80:	2301      	movs	r3, #1
 8004a82:	ca06      	ldmia	r2, {r1, r2}
 8004a84:	481a      	ldr	r0, [pc, #104]	@ (8004af0 <statemachine+0x2b0>)
 8004a86:	f7ff fb41 	bl	800410c <ssd1306_WriteString>
					 batterygauge(vbat,83, 30,1);
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b04 <statemachine+0x2c4>)
 8004a8c:	edd3 7a00 	vldr	s15, [r3]
 8004a90:	2201      	movs	r2, #1
 8004a92:	211e      	movs	r1, #30
 8004a94:	2053      	movs	r0, #83	@ 0x53
 8004a96:	eeb0 0a67 	vmov.f32	s0, s15
 8004a9a:	f7ff fcf5 	bl	8004488 <batterygauge>





					 if(BTN_B>=1){
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b08 <statemachine+0x2c8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f340 80ac 	ble.w	8004c00 <statemachine+0x3c0>
					 							spdstate++;
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae8 <statemachine+0x2a8>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae8 <statemachine+0x2a8>)
 8004ab2:	701a      	strb	r2, [r3, #0]
					 							BTN_B=0;
 8004ab4:	4b14      	ldr	r3, [pc, #80]	@ (8004b08 <statemachine+0x2c8>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

					 					 					 				  	}



					 break;
 8004aba:	e0a1      	b.n	8004c00 <statemachine+0x3c0>
 8004abc:	f3af 8000 	nop.w
 8004ac0:	cccccccd 	.word	0xcccccccd
 8004ac4:	400ccccc 	.word	0x400ccccc
 8004ac8:	200005d4 	.word	0x200005d4
 8004acc:	20000620 	.word	0x20000620
 8004ad0:	20000820 	.word	0x20000820
 8004ad4:	20000b34 	.word	0x20000b34
 8004ad8:	42700000 	.word	0x42700000
 8004adc:	447a0000 	.word	0x447a0000
 8004ae0:	404e0000 	.word	0x404e0000
 8004ae4:	42c60000 	.word	0x42c60000
 8004ae8:	200005d5 	.word	0x200005d5
 8004aec:	0801fdb8 	.word	0x0801fdb8
 8004af0:	20000ac0 	.word	0x20000ac0
 8004af4:	20000024 	.word	0x20000024
 8004af8:	20000014 	.word	0x20000014
 8004afc:	0801fdc0 	.word	0x0801fdc0
 8004b00:	0801fdcc 	.word	0x0801fdcc
 8004b04:	20000898 	.word	0x20000898
 8004b08:	20000864 	.word	0x20000864
 8004b0c:	0801fddc 	.word	0x0801fddc
 8004b10:	0801fde8 	.word	0x0801fde8
 8004b14:	0801fdf4 	.word	0x0801fdf4
				  case STATE_SUMMARY:
				  						ssd1306_SetCursor(32, 12);
 8004b18:	210c      	movs	r1, #12
 8004b1a:	2020      	movs	r0, #32
 8004b1c:	f7ff fb1c 	bl	8004158 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 8004b20:	6978      	ldr	r0, [r7, #20]
 8004b22:	f7fb fce9 	bl	80004f8 <__aeabi_f2d>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	ec43 2b10 	vmov	d0, r2, r3
 8004b2e:	f019 fcab 	bl	801e488 <floor>
 8004b32:	eeb0 8a40 	vmov.f32	s16, s0
 8004b36:	eef0 8a60 	vmov.f32	s17, s1
 8004b3a:	6938      	ldr	r0, [r7, #16]
 8004b3c:	f7fb fcdc 	bl	80004f8 <__aeabi_f2d>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	ec43 2b10 	vmov	d0, r2, r3
 8004b48:	f019 fc9e 	bl	801e488 <floor>
 8004b4c:	eeb0 7a40 	vmov.f32	s14, s0
 8004b50:	eef0 7a60 	vmov.f32	s15, s1
 8004b54:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004b58:	ed8d 8b00 	vstr	d8, [sp]
 8004b5c:	4a7e      	ldr	r2, [pc, #504]	@ (8004d58 <statemachine+0x518>)
 8004b5e:	210f      	movs	r1, #15
 8004b60:	487e      	ldr	r0, [pc, #504]	@ (8004d5c <statemachine+0x51c>)
 8004b62:	f016 fd9f 	bl	801b6a4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_11x18, White);
 8004b66:	4a7e      	ldr	r2, [pc, #504]	@ (8004d60 <statemachine+0x520>)
 8004b68:	2301      	movs	r3, #1
 8004b6a:	ca06      	ldmia	r2, {r1, r2}
 8004b6c:	487b      	ldr	r0, [pc, #492]	@ (8004d5c <statemachine+0x51c>)
 8004b6e:	f7ff facd 	bl	800410c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 30);
 8004b72:	211e      	movs	r1, #30
 8004b74:	2020      	movs	r0, #32
 8004b76:	f7ff faef 	bl	8004158 <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 8004b7a:	4a7a      	ldr	r2, [pc, #488]	@ (8004d64 <statemachine+0x524>)
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	ca06      	ldmia	r2, {r1, r2}
 8004b80:	4879      	ldr	r0, [pc, #484]	@ (8004d68 <statemachine+0x528>)
 8004b82:	f7ff fac3 	bl	800410c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 38);
 8004b86:	2126      	movs	r1, #38	@ 0x26
 8004b88:	2020      	movs	r0, #32
 8004b8a:	f7ff fae5 	bl	8004158 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 8004b8e:	4b77      	ldr	r3, [pc, #476]	@ (8004d6c <statemachine+0x52c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fb fcb0 	bl	80004f8 <__aeabi_f2d>
 8004b98:	a36d      	add	r3, pc, #436	@ (adr r3, 8004d50 <statemachine+0x510>)
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	f7fb fd03 	bl	80005a8 <__aeabi_dmul>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	e9cd 2300 	strd	r2, r3, [sp]
 8004baa:	4a71      	ldr	r2, [pc, #452]	@ (8004d70 <statemachine+0x530>)
 8004bac:	210f      	movs	r1, #15
 8004bae:	486b      	ldr	r0, [pc, #428]	@ (8004d5c <statemachine+0x51c>)
 8004bb0:	f016 fd78 	bl	801b6a4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8004d64 <statemachine+0x524>)
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	ca06      	ldmia	r2, {r1, r2}
 8004bba:	4868      	ldr	r0, [pc, #416]	@ (8004d5c <statemachine+0x51c>)
 8004bbc:	f7ff faa6 	bl	800410c <ssd1306_WriteString>
				  						batterygauge(vbat,83, 30,1);
 8004bc0:	4b6c      	ldr	r3, [pc, #432]	@ (8004d74 <statemachine+0x534>)
 8004bc2:	edd3 7a00 	vldr	s15, [r3]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	211e      	movs	r1, #30
 8004bca:	2053      	movs	r0, #83	@ 0x53
 8004bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd0:	f7ff fc5a 	bl	8004488 <batterygauge>



				  					 if(BTN_B>=1){
 8004bd4:	4b68      	ldr	r3, [pc, #416]	@ (8004d78 <statemachine+0x538>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dd13      	ble.n	8004c04 <statemachine+0x3c4>
				  								spdstate--;
 8004bdc:	4b67      	ldr	r3, [pc, #412]	@ (8004d7c <statemachine+0x53c>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	4b65      	ldr	r3, [pc, #404]	@ (8004d7c <statemachine+0x53c>)
 8004be6:	701a      	strb	r2, [r3, #0]
				  								spdstate--;
 8004be8:	4b64      	ldr	r3, [pc, #400]	@ (8004d7c <statemachine+0x53c>)
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b2da      	uxtb	r2, r3
 8004bf0:	4b62      	ldr	r3, [pc, #392]	@ (8004d7c <statemachine+0x53c>)
 8004bf2:	701a      	strb	r2, [r3, #0]
				  								BTN_B=0;
 8004bf4:	4b60      	ldr	r3, [pc, #384]	@ (8004d78 <statemachine+0x538>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	601a      	str	r2, [r3, #0]
				  					 					 				  	}




				  					 break;
 8004bfa:	e003      	b.n	8004c04 <statemachine+0x3c4>
				  break;
 8004bfc:	bf00      	nop
 8004bfe:	e002      	b.n	8004c06 <statemachine+0x3c6>
					 break;
 8004c00:	bf00      	nop
 8004c02:	e000      	b.n	8004c06 <statemachine+0x3c6>
				  					 break;
 8004c04:	bf00      	nop
				  }
				  					if(BTN_A>=1){
 8004c06:	4b5e      	ldr	r3, [pc, #376]	@ (8004d80 <statemachine+0x540>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	dd0b      	ble.n	8004c26 <statemachine+0x3e6>
				  									 					state++;
 8004c0e:	4b5d      	ldr	r3, [pc, #372]	@ (8004d84 <statemachine+0x544>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	4b5b      	ldr	r3, [pc, #364]	@ (8004d84 <statemachine+0x544>)
 8004c18:	701a      	strb	r2, [r3, #0]
				  									 					BTN_A=0;
 8004c1a:	4b59      	ldr	r3, [pc, #356]	@ (8004d80 <statemachine+0x540>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
				  									 					BTN_B=0;
 8004c20:	4b55      	ldr	r3, [pc, #340]	@ (8004d78 <statemachine+0x538>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	601a      	str	r2, [r3, #0]
				  									  	}
				  									 	 if(BTN_A_LONG>=1){
 8004c26:	4b58      	ldr	r3, [pc, #352]	@ (8004d88 <statemachine+0x548>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	dd23      	ble.n	8004c76 <statemachine+0x436>
				  									 						 				 									state++;
 8004c2e:	4b55      	ldr	r3, [pc, #340]	@ (8004d84 <statemachine+0x544>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	4b53      	ldr	r3, [pc, #332]	@ (8004d84 <statemachine+0x544>)
 8004c38:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004c3a:	4b52      	ldr	r3, [pc, #328]	@ (8004d84 <statemachine+0x544>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	4b50      	ldr	r3, [pc, #320]	@ (8004d84 <statemachine+0x544>)
 8004c44:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004c46:	4b4f      	ldr	r3, [pc, #316]	@ (8004d84 <statemachine+0x544>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	4b4d      	ldr	r3, [pc, #308]	@ (8004d84 <statemachine+0x544>)
 8004c50:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004c52:	4b4c      	ldr	r3, [pc, #304]	@ (8004d84 <statemachine+0x544>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	3301      	adds	r3, #1
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d84 <statemachine+0x544>)
 8004c5c:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8004c5e:	4b49      	ldr	r3, [pc, #292]	@ (8004d84 <statemachine+0x544>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	3301      	adds	r3, #1
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	4b47      	ldr	r3, [pc, #284]	@ (8004d84 <statemachine+0x544>)
 8004c68:	701a      	strb	r2, [r3, #0]

				  									 						 				 									  			 	BTN_A_LONG=0;
 8004c6a:	4b47      	ldr	r3, [pc, #284]	@ (8004d88 <statemachine+0x548>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
				  									 						 				 									  			 	BTN_B=0;
 8004c70:	4b41      	ldr	r3, [pc, #260]	@ (8004d78 <statemachine+0x538>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
				  									 						 				 									  	}
				  									 	 if(BTN_B_LONG>=1){
 8004c76:	4b45      	ldr	r3, [pc, #276]	@ (8004d8c <statemachine+0x54c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f341 835f 	ble.w	800633e <statemachine+0x1afe>
				  									 					  							  vitmax=0;
 8004c80:	4b3a      	ldr	r3, [pc, #232]	@ (8004d6c <statemachine+0x52c>)
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]
				  									 					  							BTN_B_LONG=0;
 8004c88:	4b40      	ldr	r3, [pc, #256]	@ (8004d8c <statemachine+0x54c>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
				  									 					  						}

				  									 	 break;
 8004c8e:	f001 bb56 	b.w	800633e <statemachine+0x1afe>


				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8004c92:	2000      	movs	r0, #0
 8004c94:	f7ff f91e 	bl	8003ed4 <ssd1306_Fill>

					  if(settimeen==0){
 8004c98:	4b3d      	ldr	r3, [pc, #244]	@ (8004d90 <statemachine+0x550>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d145      	bne.n	8004d2c <statemachine+0x4ec>

						  if(myData.fix==1){
 8004ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8004d94 <statemachine+0x554>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d141      	bne.n	8004d2c <statemachine+0x4ec>
							settimeen=1;
 8004ca8:	4b39      	ldr	r3, [pc, #228]	@ (8004d90 <statemachine+0x550>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004cae:	4b39      	ldr	r3, [pc, #228]	@ (8004d94 <statemachine+0x554>)
 8004cb0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	0092      	lsls	r2, r2, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	4b33      	ldr	r3, [pc, #204]	@ (8004d94 <statemachine+0x554>)
 8004cc6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004cca:	f003 030f 	and.w	r3, r3, #15
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	4b30      	ldr	r3, [pc, #192]	@ (8004d98 <statemachine+0x558>)
 8004cd6:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004cd8:	4b2e      	ldr	r3, [pc, #184]	@ (8004d94 <statemachine+0x554>)
 8004cda:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	0092      	lsls	r2, r2, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	005b      	lsls	r3, r3, #1
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	4b29      	ldr	r3, [pc, #164]	@ (8004d94 <statemachine+0x554>)
 8004cf0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	4b27      	ldr	r3, [pc, #156]	@ (8004d9c <statemachine+0x55c>)
 8004d00:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004d02:	4b24      	ldr	r3, [pc, #144]	@ (8004d94 <statemachine+0x554>)
 8004d04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	0092      	lsls	r2, r2, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	4b1e      	ldr	r3, [pc, #120]	@ (8004d94 <statemachine+0x554>)
 8004d1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	4413      	add	r3, r2
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <statemachine+0x560>)
 8004d2a:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8004d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8004da4 <statemachine+0x564>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	f000 8333 	beq.w	800539c <statemachine+0xb5c>
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	f301 8303 	bgt.w	8006342 <statemachine+0x1b02>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d033      	beq.n	8004da8 <statemachine+0x568>
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f000 8098 	beq.w	8004e76 <statemachine+0x636>
						  				 									 									  	}

					  }


					  break;
 8004d46:	f001 bafc 	b.w	8006342 <statemachine+0x1b02>
 8004d4a:	bf00      	nop
 8004d4c:	f3af 8000 	nop.w
 8004d50:	cccccccd 	.word	0xcccccccd
 8004d54:	400ccccc 	.word	0x400ccccc
 8004d58:	0801fe00 	.word	0x0801fe00
 8004d5c:	20000ac0 	.word	0x20000ac0
 8004d60:	20000024 	.word	0x20000024
 8004d64:	20000014 	.word	0x20000014
 8004d68:	0801fe10 	.word	0x0801fe10
 8004d6c:	20000b34 	.word	0x20000b34
 8004d70:	0801fdf4 	.word	0x0801fdf4
 8004d74:	20000898 	.word	0x20000898
 8004d78:	20000864 	.word	0x20000864
 8004d7c:	200005d5 	.word	0x200005d5
 8004d80:	20000860 	.word	0x20000860
 8004d84:	200005d4 	.word	0x200005d4
 8004d88:	20000ba0 	.word	0x20000ba0
 8004d8c:	20000b9c 	.word	0x20000b9c
 8004d90:	20000b88 	.word	0x20000b88
 8004d94:	20000820 	.word	0x20000820
 8004d98:	20000b85 	.word	0x20000b85
 8004d9c:	20000b86 	.word	0x20000b86
 8004da0:	20000b84 	.word	0x20000b84
 8004da4:	200005d9 	.word	0x200005d9
						  ssd1306_SetCursor(32,12);
 8004da8:	210c      	movs	r1, #12
 8004daa:	2020      	movs	r0, #32
 8004dac:	f7ff f9d4 	bl	8004158 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8004db0:	4aa7      	ldr	r2, [pc, #668]	@ (8005050 <statemachine+0x810>)
 8004db2:	2301      	movs	r3, #1
 8004db4:	ca06      	ldmia	r2, {r1, r2}
 8004db6:	48a7      	ldr	r0, [pc, #668]	@ (8005054 <statemachine+0x814>)
 8004db8:	f7ff f9a8 	bl	800410c <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8004dbc:	4ba6      	ldr	r3, [pc, #664]	@ (8005058 <statemachine+0x818>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4aa6      	ldr	r2, [pc, #664]	@ (800505c <statemachine+0x81c>)
 8004dc2:	2132      	movs	r1, #50	@ 0x32
 8004dc4:	48a6      	ldr	r0, [pc, #664]	@ (8005060 <statemachine+0x820>)
 8004dc6:	f016 fc6d 	bl	801b6a4 <sniprintf>
						  ssd1306_SetCursor(32,22);
 8004dca:	2116      	movs	r1, #22
 8004dcc:	2020      	movs	r0, #32
 8004dce:	f7ff f9c3 	bl	8004158 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004dd2:	4aa4      	ldr	r2, [pc, #656]	@ (8005064 <statemachine+0x824>)
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	ca06      	ldmia	r2, {r1, r2}
 8004dd8:	48a1      	ldr	r0, [pc, #644]	@ (8005060 <statemachine+0x820>)
 8004dda:	f7ff f997 	bl	800410c <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8004dde:	4ba2      	ldr	r3, [pc, #648]	@ (8005068 <statemachine+0x828>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4aa2      	ldr	r2, [pc, #648]	@ (800506c <statemachine+0x82c>)
 8004de4:	2132      	movs	r1, #50	@ 0x32
 8004de6:	489e      	ldr	r0, [pc, #632]	@ (8005060 <statemachine+0x820>)
 8004de8:	f016 fc5c 	bl	801b6a4 <sniprintf>
						  ssd1306_SetCursor(32,32);
 8004dec:	2120      	movs	r1, #32
 8004dee:	2020      	movs	r0, #32
 8004df0:	f7ff f9b2 	bl	8004158 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004df4:	4a9b      	ldr	r2, [pc, #620]	@ (8005064 <statemachine+0x824>)
 8004df6:	2301      	movs	r3, #1
 8004df8:	ca06      	ldmia	r2, {r1, r2}
 8004dfa:	4899      	ldr	r0, [pc, #612]	@ (8005060 <statemachine+0x820>)
 8004dfc:	f7ff f986 	bl	800410c <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8004e00:	4b9b      	ldr	r3, [pc, #620]	@ (8005070 <statemachine+0x830>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	dd0e      	ble.n	8004e26 <statemachine+0x5e6>
							balisestate++;
 8004e08:	4b9a      	ldr	r3, [pc, #616]	@ (8005074 <statemachine+0x834>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	4b98      	ldr	r3, [pc, #608]	@ (8005074 <statemachine+0x834>)
 8004e12:	701a      	strb	r2, [r3, #0]
							BTN_B_LONG=0;
 8004e14:	4b96      	ldr	r3, [pc, #600]	@ (8005070 <statemachine+0x830>)
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8004e1a:	4b97      	ldr	r3, [pc, #604]	@ (8005078 <statemachine+0x838>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8004e20:	4896      	ldr	r0, [pc, #600]	@ (800507c <statemachine+0x83c>)
 8004e22:	f00a f8af 	bl	800ef84 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8004e26:	4b94      	ldr	r3, [pc, #592]	@ (8005078 <statemachine+0x838>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	dd0e      	ble.n	8004e4c <statemachine+0x60c>
						  				  			 	state++;
 8004e2e:	4b94      	ldr	r3, [pc, #592]	@ (8005080 <statemachine+0x840>)
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	3301      	adds	r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	4b92      	ldr	r3, [pc, #584]	@ (8005080 <statemachine+0x840>)
 8004e38:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8004e3a:	4b8f      	ldr	r3, [pc, #572]	@ (8005078 <statemachine+0x838>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004e40:	4b90      	ldr	r3, [pc, #576]	@ (8005084 <statemachine+0x844>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8004e46:	4b90      	ldr	r3, [pc, #576]	@ (8005088 <statemachine+0x848>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004e4c:	4b8f      	ldr	r3, [pc, #572]	@ (800508c <statemachine+0x84c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f340 82f5 	ble.w	8005440 <statemachine+0xc00>
									  state--;
 8004e56:	4b8a      	ldr	r3, [pc, #552]	@ (8005080 <statemachine+0x840>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	4b88      	ldr	r3, [pc, #544]	@ (8005080 <statemachine+0x840>)
 8004e60:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8004e62:	4b8a      	ldr	r3, [pc, #552]	@ (800508c <statemachine+0x84c>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8004e68:	4b86      	ldr	r3, [pc, #536]	@ (8005084 <statemachine+0x844>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8004e6e:	4b86      	ldr	r3, [pc, #536]	@ (8005088 <statemachine+0x848>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
						  break;
 8004e74:	e2e4      	b.n	8005440 <statemachine+0xc00>
						  if(myData.speed>=vitmax){
 8004e76:	4b86      	ldr	r3, [pc, #536]	@ (8005090 <statemachine+0x850>)
 8004e78:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004e7c:	4b85      	ldr	r3, [pc, #532]	@ (8005094 <statemachine+0x854>)
 8004e7e:	edd3 7a00 	vldr	s15, [r3]
 8004e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8a:	db03      	blt.n	8004e94 <statemachine+0x654>
						  									 vitmax=myData.speed;
 8004e8c:	4b80      	ldr	r3, [pc, #512]	@ (8005090 <statemachine+0x850>)
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e90:	4a80      	ldr	r2, [pc, #512]	@ (8005094 <statemachine+0x854>)
 8004e92:	6013      	str	r3, [r2, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8004e94:	4b74      	ldr	r3, [pc, #464]	@ (8005068 <statemachine+0x828>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	dd05      	ble.n	8004eac <statemachine+0x66c>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8004ea0:	4876      	ldr	r0, [pc, #472]	@ (800507c <statemachine+0x83c>)
 8004ea2:	f00a f8bd 	bl	800f020 <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8004ea6:	4b73      	ldr	r3, [pc, #460]	@ (8005074 <statemachine+0x834>)
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8004eac:	4b7a      	ldr	r3, [pc, #488]	@ (8005098 <statemachine+0x858>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	f040 80b0 	bne.w	8005016 <statemachine+0x7d6>
							  oldlat=myData.latitude;
 8004eb6:	4b76      	ldr	r3, [pc, #472]	@ (8005090 <statemachine+0x850>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	4977      	ldr	r1, [pc, #476]	@ (800509c <statemachine+0x85c>)
 8004ebe:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8004ec2:	4b73      	ldr	r3, [pc, #460]	@ (8005090 <statemachine+0x850>)
 8004ec4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004ec8:	4975      	ldr	r1, [pc, #468]	@ (80050a0 <statemachine+0x860>)
 8004eca:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8004ece:	4975      	ldr	r1, [pc, #468]	@ (80050a4 <statemachine+0x864>)
 8004ed0:	486f      	ldr	r0, [pc, #444]	@ (8005090 <statemachine+0x850>)
 8004ed2:	f7fe fa2f 	bl	8003334 <nmea_parse>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8004ed6:	4b71      	ldr	r3, [pc, #452]	@ (800509c <statemachine+0x85c>)
 8004ed8:	ed93 7b00 	vldr	d7, [r3]
 8004edc:	4b6c      	ldr	r3, [pc, #432]	@ (8005090 <statemachine+0x850>)
 8004ede:	ed93 6b00 	vldr	d6, [r3]
 8004ee2:	4b6f      	ldr	r3, [pc, #444]	@ (80050a0 <statemachine+0x860>)
 8004ee4:	ed93 5b00 	vldr	d5, [r3]
 8004ee8:	4b69      	ldr	r3, [pc, #420]	@ (8005090 <statemachine+0x850>)
 8004eea:	ed93 4b04 	vldr	d4, [r3, #16]
 8004eee:	eeb0 3a44 	vmov.f32	s6, s8
 8004ef2:	eef0 3a64 	vmov.f32	s7, s9
 8004ef6:	eeb0 2a45 	vmov.f32	s4, s10
 8004efa:	eef0 2a65 	vmov.f32	s5, s11
 8004efe:	eeb0 1a46 	vmov.f32	s2, s12
 8004f02:	eef0 1a66 	vmov.f32	s3, s13
 8004f06:	eeb0 0a47 	vmov.f32	s0, s14
 8004f0a:	eef0 0a67 	vmov.f32	s1, s15
 8004f0e:	f7fe fac3 	bl	8003498 <distancecalc>
 8004f12:	ec51 0b10 	vmov	r0, r1, d0
 8004f16:	a34c      	add	r3, pc, #304	@ (adr r3, 8005048 <statemachine+0x808>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f7fb fdd4 	bl	8000ac8 <__aeabi_dcmpgt>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d02b      	beq.n	8004f7e <statemachine+0x73e>
								  myData.latitude=oldlat;
 8004f26:	4b5d      	ldr	r3, [pc, #372]	@ (800509c <statemachine+0x85c>)
 8004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2c:	4958      	ldr	r1, [pc, #352]	@ (8005090 <statemachine+0x850>)
 8004f2e:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8004f32:	4b5b      	ldr	r3, [pc, #364]	@ (80050a0 <statemachine+0x860>)
 8004f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f38:	4955      	ldr	r1, [pc, #340]	@ (8005090 <statemachine+0x850>)
 8004f3a:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80050a8 <statemachine+0x868>)
 8004f40:	edd3 7a00 	vldr	s15, [r3]
 8004f44:	4b59      	ldr	r3, [pc, #356]	@ (80050ac <statemachine+0x86c>)
 8004f46:	ed93 7a00 	vldr	s14, [r3]
 8004f4a:	4b51      	ldr	r3, [pc, #324]	@ (8005090 <statemachine+0x850>)
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	4a50      	ldr	r2, [pc, #320]	@ (8005090 <statemachine+0x850>)
 8004f50:	edd2 6a08 	vldr	s13, [r2, #32]
 8004f54:	eeb0 1a66 	vmov.f32	s2, s13
 8004f58:	461a      	mov	r2, r3
 8004f5a:	494d      	ldr	r1, [pc, #308]	@ (8005090 <statemachine+0x850>)
 8004f5c:	eef0 0a47 	vmov.f32	s1, s14
 8004f60:	eeb0 0a67 	vmov.f32	s0, s15
 8004f64:	4852      	ldr	r0, [pc, #328]	@ (80050b0 <statemachine+0x870>)
 8004f66:	f7fe fd4f 	bl	8003a08 <csvframe>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	4a51      	ldr	r2, [pc, #324]	@ (80050b4 <statemachine+0x874>)
 8004f6e:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8004f70:	4b50      	ldr	r3, [pc, #320]	@ (80050b4 <statemachine+0x874>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4619      	mov	r1, r3
 8004f76:	484e      	ldr	r0, [pc, #312]	@ (80050b0 <statemachine+0x870>)
 8004f78:	f7fe fe7c 	bl	8003c74 <writebuffertoflash>
 8004f7c:	e048      	b.n	8005010 <statemachine+0x7d0>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8004f7e:	4b47      	ldr	r3, [pc, #284]	@ (800509c <statemachine+0x85c>)
 8004f80:	ed93 7b00 	vldr	d7, [r3]
 8004f84:	4b42      	ldr	r3, [pc, #264]	@ (8005090 <statemachine+0x850>)
 8004f86:	ed93 6b00 	vldr	d6, [r3]
 8004f8a:	4b45      	ldr	r3, [pc, #276]	@ (80050a0 <statemachine+0x860>)
 8004f8c:	ed93 5b00 	vldr	d5, [r3]
 8004f90:	4b3f      	ldr	r3, [pc, #252]	@ (8005090 <statemachine+0x850>)
 8004f92:	ed93 4b04 	vldr	d4, [r3, #16]
 8004f96:	eeb0 3a44 	vmov.f32	s6, s8
 8004f9a:	eef0 3a64 	vmov.f32	s7, s9
 8004f9e:	eeb0 2a45 	vmov.f32	s4, s10
 8004fa2:	eef0 2a65 	vmov.f32	s5, s11
 8004fa6:	eeb0 1a46 	vmov.f32	s2, s12
 8004faa:	eef0 1a66 	vmov.f32	s3, s13
 8004fae:	eeb0 0a47 	vmov.f32	s0, s14
 8004fb2:	eef0 0a67 	vmov.f32	s1, s15
 8004fb6:	f7fe fa6f 	bl	8003498 <distancecalc>
 8004fba:	ec51 0b10 	vmov	r0, r1, d0
 8004fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80050b8 <statemachine+0x878>)
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	f7fb f93a 	bl	800023c <__adddf3>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	493a      	ldr	r1, [pc, #232]	@ (80050b8 <statemachine+0x878>)
 8004fce:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop);
 8004fd2:	4b35      	ldr	r3, [pc, #212]	@ (80050a8 <statemachine+0x868>)
 8004fd4:	edd3 7a00 	vldr	s15, [r3]
 8004fd8:	4b34      	ldr	r3, [pc, #208]	@ (80050ac <statemachine+0x86c>)
 8004fda:	ed93 7a00 	vldr	s14, [r3]
 8004fde:	4b2c      	ldr	r3, [pc, #176]	@ (8005090 <statemachine+0x850>)
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8005090 <statemachine+0x850>)
 8004fe4:	edd2 6a08 	vldr	s13, [r2, #32]
 8004fe8:	eeb0 1a66 	vmov.f32	s2, s13
 8004fec:	461a      	mov	r2, r3
 8004fee:	4928      	ldr	r1, [pc, #160]	@ (8005090 <statemachine+0x850>)
 8004ff0:	eef0 0a47 	vmov.f32	s1, s14
 8004ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ff8:	482d      	ldr	r0, [pc, #180]	@ (80050b0 <statemachine+0x870>)
 8004ffa:	f7fe fd05 	bl	8003a08 <csvframe>
 8004ffe:	4603      	mov	r3, r0
 8005000:	4a2c      	ldr	r2, [pc, #176]	@ (80050b4 <statemachine+0x874>)
 8005002:	6013      	str	r3, [r2, #0]
								  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8005004:	4b2b      	ldr	r3, [pc, #172]	@ (80050b4 <statemachine+0x874>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4619      	mov	r1, r3
 800500a:	4829      	ldr	r0, [pc, #164]	@ (80050b0 <statemachine+0x870>)
 800500c:	f7fe fe32 	bl	8003c74 <writebuffertoflash>
							  enablewrite=0;
 8005010:	4b21      	ldr	r3, [pc, #132]	@ (8005098 <statemachine+0x858>)
 8005012:	2200      	movs	r2, #0
 8005014:	601a      	str	r2, [r3, #0]
						  ssd1306_SetCursor(32,12);
 8005016:	210c      	movs	r1, #12
 8005018:	2020      	movs	r0, #32
 800501a:	f7ff f89d 	bl	8004158 <ssd1306_SetCursor>
						  switch(ecranstate){
 800501e:	4b27      	ldr	r3, [pc, #156]	@ (80050bc <statemachine+0x87c>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b05      	cmp	r3, #5
 8005024:	f200 8145 	bhi.w	80052b2 <statemachine+0xa72>
 8005028:	a201      	add	r2, pc, #4	@ (adr r2, 8005030 <statemachine+0x7f0>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	080050c1 	.word	0x080050c1
 8005034:	080050ff 	.word	0x080050ff
 8005038:	08005143 	.word	0x08005143
 800503c:	0800518f 	.word	0x0800518f
 8005040:	080051d9 	.word	0x080051d9
 8005044:	08005223 	.word	0x08005223
 8005048:	00000000 	.word	0x00000000
 800504c:	40616000 	.word	0x40616000
 8005050:	20000014 	.word	0x20000014
 8005054:	0801fe18 	.word	0x0801fe18
 8005058:	20000a9c 	.word	0x20000a9c
 800505c:	0801fe20 	.word	0x0801fe20
 8005060:	20000ac0 	.word	0x20000ac0
 8005064:	2000001c 	.word	0x2000001c
 8005068:	20000aa0 	.word	0x20000aa0
 800506c:	0801fe2c 	.word	0x0801fe2c
 8005070:	20000b9c 	.word	0x20000b9c
 8005074:	200005d9 	.word	0x200005d9
 8005078:	20000860 	.word	0x20000860
 800507c:	20001348 	.word	0x20001348
 8005080:	200005d4 	.word	0x200005d4
 8005084:	20000864 	.word	0x20000864
 8005088:	20000b88 	.word	0x20000b88
 800508c:	20000ba0 	.word	0x20000ba0
 8005090:	20000820 	.word	0x20000820
 8005094:	20000b34 	.word	0x20000b34
 8005098:	20000b80 	.word	0x20000b80
 800509c:	20000b70 	.word	0x20000b70
 80050a0:	20000b78 	.word	0x20000b78
 80050a4:	20000620 	.word	0x20000620
 80050a8:	20000890 	.word	0x20000890
 80050ac:	20000898 	.word	0x20000898
 80050b0:	2000089c 	.word	0x2000089c
 80050b4:	20000b4c 	.word	0x20000b4c
 80050b8:	20000b68 	.word	0x20000b68
 80050bc:	20000ce8 	.word	0x20000ce8
							  snprintf((char *)bufferscreen,50,"p=%d",pagenumber);
 80050c0:	4ba0      	ldr	r3, [pc, #640]	@ (8005344 <statemachine+0xb04>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4aa0      	ldr	r2, [pc, #640]	@ (8005348 <statemachine+0xb08>)
 80050c6:	2132      	movs	r1, #50	@ 0x32
 80050c8:	48a0      	ldr	r0, [pc, #640]	@ (800534c <statemachine+0xb0c>)
 80050ca:	f016 faeb 	bl	801b6a4 <sniprintf>
							  						 	ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 80050ce:	4aa0      	ldr	r2, [pc, #640]	@ (8005350 <statemachine+0xb10>)
 80050d0:	2301      	movs	r3, #1
 80050d2:	ca06      	ldmia	r2, {r1, r2}
 80050d4:	489d      	ldr	r0, [pc, #628]	@ (800534c <statemachine+0xb0c>)
 80050d6:	f7ff f819 	bl	800410c <ssd1306_WriteString>
							  if(BTN_B>=1){
 80050da:	4b9e      	ldr	r3, [pc, #632]	@ (8005354 <statemachine+0xb14>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f340 80dc 	ble.w	800529c <statemachine+0xa5c>
														  ecranstate++;
 80050e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005358 <statemachine+0xb18>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	3301      	adds	r3, #1
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	4b9a      	ldr	r3, [pc, #616]	@ (8005358 <statemachine+0xb18>)
 80050ee:	701a      	strb	r2, [r3, #0]
													  	BTN_B=0;
 80050f0:	4b98      	ldr	r3, [pc, #608]	@ (8005354 <statemachine+0xb14>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
													  	BTN_A=0;
 80050f6:	4b99      	ldr	r3, [pc, #612]	@ (800535c <statemachine+0xb1c>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]
							  break;
 80050fc:	e0ce      	b.n	800529c <statemachine+0xa5c>
							  snprintf((char  *)bufferscreen,50,"d=%0.1lfm",distanceparcouru);
 80050fe:	4b98      	ldr	r3, [pc, #608]	@ (8005360 <statemachine+0xb20>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	e9cd 2300 	strd	r2, r3, [sp]
 8005108:	4a96      	ldr	r2, [pc, #600]	@ (8005364 <statemachine+0xb24>)
 800510a:	2132      	movs	r1, #50	@ 0x32
 800510c:	488f      	ldr	r0, [pc, #572]	@ (800534c <statemachine+0xb0c>)
 800510e:	f016 fac9 	bl	801b6a4 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 8005112:	4a8f      	ldr	r2, [pc, #572]	@ (8005350 <statemachine+0xb10>)
 8005114:	2301      	movs	r3, #1
 8005116:	ca06      	ldmia	r2, {r1, r2}
 8005118:	488c      	ldr	r0, [pc, #560]	@ (800534c <statemachine+0xb0c>)
 800511a:	f7fe fff7 	bl	800410c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800511e:	4b8d      	ldr	r3, [pc, #564]	@ (8005354 <statemachine+0xb14>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	f340 80bc 	ble.w	80052a0 <statemachine+0xa60>
							  														  ecranstate++;
 8005128:	4b8b      	ldr	r3, [pc, #556]	@ (8005358 <statemachine+0xb18>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	4b89      	ldr	r3, [pc, #548]	@ (8005358 <statemachine+0xb18>)
 8005132:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005134:	4b87      	ldr	r3, [pc, #540]	@ (8005354 <statemachine+0xb14>)
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800513a:	4b88      	ldr	r3, [pc, #544]	@ (800535c <statemachine+0xb1c>)
 800513c:	2200      	movs	r2, #0
 800513e:	601a      	str	r2, [r3, #0]
							  break;
 8005140:	e0ae      	b.n	80052a0 <statemachine+0xa60>
							  snprintf((char  *)bufferscreen,50,"v=%0.1fKmh",myData.speed);
 8005142:	4b89      	ldr	r3, [pc, #548]	@ (8005368 <statemachine+0xb28>)
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	4618      	mov	r0, r3
 8005148:	f7fb f9d6 	bl	80004f8 <__aeabi_f2d>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	e9cd 2300 	strd	r2, r3, [sp]
 8005154:	4a85      	ldr	r2, [pc, #532]	@ (800536c <statemachine+0xb2c>)
 8005156:	2132      	movs	r1, #50	@ 0x32
 8005158:	487c      	ldr	r0, [pc, #496]	@ (800534c <statemachine+0xb0c>)
 800515a:	f016 faa3 	bl	801b6a4 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 800515e:	4a7c      	ldr	r2, [pc, #496]	@ (8005350 <statemachine+0xb10>)
 8005160:	2301      	movs	r3, #1
 8005162:	ca06      	ldmia	r2, {r1, r2}
 8005164:	4879      	ldr	r0, [pc, #484]	@ (800534c <statemachine+0xb0c>)
 8005166:	f7fe ffd1 	bl	800410c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800516a:	4b7a      	ldr	r3, [pc, #488]	@ (8005354 <statemachine+0xb14>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	f340 8098 	ble.w	80052a4 <statemachine+0xa64>
							  														  ecranstate++;
 8005174:	4b78      	ldr	r3, [pc, #480]	@ (8005358 <statemachine+0xb18>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	3301      	adds	r3, #1
 800517a:	b2da      	uxtb	r2, r3
 800517c:	4b76      	ldr	r3, [pc, #472]	@ (8005358 <statemachine+0xb18>)
 800517e:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005180:	4b74      	ldr	r3, [pc, #464]	@ (8005354 <statemachine+0xb14>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005186:	4b75      	ldr	r3, [pc, #468]	@ (800535c <statemachine+0xb1c>)
 8005188:	2200      	movs	r2, #0
 800518a:	601a      	str	r2, [r3, #0]
							  break;
 800518c:	e08a      	b.n	80052a4 <statemachine+0xa64>
							  snprintf((char  *)bufferscreen,50,"h=%0.1fm",myData.altitude);
 800518e:	4b76      	ldr	r3, [pc, #472]	@ (8005368 <statemachine+0xb28>)
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fb f9b0 	bl	80004f8 <__aeabi_f2d>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	e9cd 2300 	strd	r2, r3, [sp]
 80051a0:	4a73      	ldr	r2, [pc, #460]	@ (8005370 <statemachine+0xb30>)
 80051a2:	2132      	movs	r1, #50	@ 0x32
 80051a4:	4869      	ldr	r0, [pc, #420]	@ (800534c <statemachine+0xb0c>)
 80051a6:	f016 fa7d 	bl	801b6a4 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 80051aa:	4a69      	ldr	r2, [pc, #420]	@ (8005350 <statemachine+0xb10>)
 80051ac:	2301      	movs	r3, #1
 80051ae:	ca06      	ldmia	r2, {r1, r2}
 80051b0:	4866      	ldr	r0, [pc, #408]	@ (800534c <statemachine+0xb0c>)
 80051b2:	f7fe ffab 	bl	800410c <ssd1306_WriteString>
							  if(BTN_B>=1){
 80051b6:	4b67      	ldr	r3, [pc, #412]	@ (8005354 <statemachine+0xb14>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	dd74      	ble.n	80052a8 <statemachine+0xa68>
							  														  ecranstate++;
 80051be:	4b66      	ldr	r3, [pc, #408]	@ (8005358 <statemachine+0xb18>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	3301      	adds	r3, #1
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4b64      	ldr	r3, [pc, #400]	@ (8005358 <statemachine+0xb18>)
 80051c8:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80051ca:	4b62      	ldr	r3, [pc, #392]	@ (8005354 <statemachine+0xb14>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80051d0:	4b62      	ldr	r3, [pc, #392]	@ (800535c <statemachine+0xb1c>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
							  break;
 80051d6:	e067      	b.n	80052a8 <statemachine+0xa68>
							  snprintf((char  *)bufferscreen,50,"v=%0.1fV",vbat);
 80051d8:	4b66      	ldr	r3, [pc, #408]	@ (8005374 <statemachine+0xb34>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7fb f98b 	bl	80004f8 <__aeabi_f2d>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	e9cd 2300 	strd	r2, r3, [sp]
 80051ea:	4a63      	ldr	r2, [pc, #396]	@ (8005378 <statemachine+0xb38>)
 80051ec:	2132      	movs	r1, #50	@ 0x32
 80051ee:	4857      	ldr	r0, [pc, #348]	@ (800534c <statemachine+0xb0c>)
 80051f0:	f016 fa58 	bl	801b6a4 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 80051f4:	4a56      	ldr	r2, [pc, #344]	@ (8005350 <statemachine+0xb10>)
 80051f6:	2301      	movs	r3, #1
 80051f8:	ca06      	ldmia	r2, {r1, r2}
 80051fa:	4854      	ldr	r0, [pc, #336]	@ (800534c <statemachine+0xb0c>)
 80051fc:	f7fe ff86 	bl	800410c <ssd1306_WriteString>
							  if(BTN_B>=1){
 8005200:	4b54      	ldr	r3, [pc, #336]	@ (8005354 <statemachine+0xb14>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	dd51      	ble.n	80052ac <statemachine+0xa6c>
							  														  ecranstate++;
 8005208:	4b53      	ldr	r3, [pc, #332]	@ (8005358 <statemachine+0xb18>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	3301      	adds	r3, #1
 800520e:	b2da      	uxtb	r2, r3
 8005210:	4b51      	ldr	r3, [pc, #324]	@ (8005358 <statemachine+0xb18>)
 8005212:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8005214:	4b4f      	ldr	r3, [pc, #316]	@ (8005354 <statemachine+0xb14>)
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800521a:	4b50      	ldr	r3, [pc, #320]	@ (800535c <statemachine+0xb1c>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
							  break;
 8005220:	e044      	b.n	80052ac <statemachine+0xa6c>
							  snprintf((char  *)bufferscreen,50,"Max=%0.1fkmh",vitmax);
 8005222:	4b56      	ldr	r3, [pc, #344]	@ (800537c <statemachine+0xb3c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fb f966 	bl	80004f8 <__aeabi_f2d>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	e9cd 2300 	strd	r2, r3, [sp]
 8005234:	4a52      	ldr	r2, [pc, #328]	@ (8005380 <statemachine+0xb40>)
 8005236:	2132      	movs	r1, #50	@ 0x32
 8005238:	4844      	ldr	r0, [pc, #272]	@ (800534c <statemachine+0xb0c>)
 800523a:	f016 fa33 	bl	801b6a4 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_11x18,White);
 800523e:	4a44      	ldr	r2, [pc, #272]	@ (8005350 <statemachine+0xb10>)
 8005240:	2301      	movs	r3, #1
 8005242:	ca06      	ldmia	r2, {r1, r2}
 8005244:	4841      	ldr	r0, [pc, #260]	@ (800534c <statemachine+0xb0c>)
 8005246:	f7fe ff61 	bl	800410c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800524a:	4b42      	ldr	r3, [pc, #264]	@ (8005354 <statemachine+0xb14>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	dd2e      	ble.n	80052b0 <statemachine+0xa70>
							  														ecranstate--;
 8005252:	4b41      	ldr	r3, [pc, #260]	@ (8005358 <statemachine+0xb18>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	3b01      	subs	r3, #1
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b3f      	ldr	r3, [pc, #252]	@ (8005358 <statemachine+0xb18>)
 800525c:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800525e:	4b3e      	ldr	r3, [pc, #248]	@ (8005358 <statemachine+0xb18>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	3b01      	subs	r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	4b3c      	ldr	r3, [pc, #240]	@ (8005358 <statemachine+0xb18>)
 8005268:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 800526a:	4b3b      	ldr	r3, [pc, #236]	@ (8005358 <statemachine+0xb18>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	3b01      	subs	r3, #1
 8005270:	b2da      	uxtb	r2, r3
 8005272:	4b39      	ldr	r3, [pc, #228]	@ (8005358 <statemachine+0xb18>)
 8005274:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005276:	4b38      	ldr	r3, [pc, #224]	@ (8005358 <statemachine+0xb18>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	3b01      	subs	r3, #1
 800527c:	b2da      	uxtb	r2, r3
 800527e:	4b36      	ldr	r3, [pc, #216]	@ (8005358 <statemachine+0xb18>)
 8005280:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 8005282:	4b35      	ldr	r3, [pc, #212]	@ (8005358 <statemachine+0xb18>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	3b01      	subs	r3, #1
 8005288:	b2da      	uxtb	r2, r3
 800528a:	4b33      	ldr	r3, [pc, #204]	@ (8005358 <statemachine+0xb18>)
 800528c:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 800528e:	4b31      	ldr	r3, [pc, #196]	@ (8005354 <statemachine+0xb14>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8005294:	4b31      	ldr	r3, [pc, #196]	@ (800535c <statemachine+0xb1c>)
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]
							  break;
 800529a:	e009      	b.n	80052b0 <statemachine+0xa70>
							  break;
 800529c:	bf00      	nop
 800529e:	e008      	b.n	80052b2 <statemachine+0xa72>
							  break;
 80052a0:	bf00      	nop
 80052a2:	e006      	b.n	80052b2 <statemachine+0xa72>
							  break;
 80052a4:	bf00      	nop
 80052a6:	e004      	b.n	80052b2 <statemachine+0xa72>
							  break;
 80052a8:	bf00      	nop
 80052aa:	e002      	b.n	80052b2 <statemachine+0xa72>
							  break;
 80052ac:	bf00      	nop
 80052ae:	e000      	b.n	80052b2 <statemachine+0xa72>
							  break;
 80052b0:	bf00      	nop
						 	ssd1306_SetCursor(32,30);
 80052b2:	211e      	movs	r1, #30
 80052b4:	2020      	movs	r0, #32
 80052b6:	f7fe ff4f 	bl	8004158 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 80052ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005368 <statemachine+0xb28>)
 80052bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052be:	4a31      	ldr	r2, [pc, #196]	@ (8005384 <statemachine+0xb44>)
 80052c0:	2132      	movs	r1, #50	@ 0x32
 80052c2:	4822      	ldr	r0, [pc, #136]	@ (800534c <statemachine+0xb0c>)
 80052c4:	f016 f9ee 	bl	801b6a4 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80052c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005388 <statemachine+0xb48>)
 80052ca:	2301      	movs	r3, #1
 80052cc:	ca06      	ldmia	r2, {r1, r2}
 80052ce:	481f      	ldr	r0, [pc, #124]	@ (800534c <statemachine+0xb0c>)
 80052d0:	f7fe ff1c 	bl	800410c <ssd1306_WriteString>
						 	batterygauge(vbat,83, 30,1);
 80052d4:	4b27      	ldr	r3, [pc, #156]	@ (8005374 <statemachine+0xb34>)
 80052d6:	edd3 7a00 	vldr	s15, [r3]
 80052da:	2201      	movs	r2, #1
 80052dc:	211e      	movs	r1, #30
 80052de:	2053      	movs	r0, #83	@ 0x53
 80052e0:	eeb0 0a67 	vmov.f32	s0, s15
 80052e4:	f7ff f8d0 	bl	8004488 <batterygauge>
						 	ssd1306_SetCursor(32,38);
 80052e8:	2126      	movs	r1, #38	@ 0x26
 80052ea:	2020      	movs	r0, #32
 80052ec:	f7fe ff34 	bl	8004158 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 80052f0:	4b20      	ldr	r3, [pc, #128]	@ (8005374 <statemachine+0xb34>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fb f8ff 	bl	80004f8 <__aeabi_f2d>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	e9cd 2300 	strd	r2, r3, [sp]
 8005302:	4a22      	ldr	r2, [pc, #136]	@ (800538c <statemachine+0xb4c>)
 8005304:	2132      	movs	r1, #50	@ 0x32
 8005306:	4811      	ldr	r0, [pc, #68]	@ (800534c <statemachine+0xb0c>)
 8005308:	f016 f9cc 	bl	801b6a4 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800530c:	4a1e      	ldr	r2, [pc, #120]	@ (8005388 <statemachine+0xb48>)
 800530e:	2301      	movs	r3, #1
 8005310:	ca06      	ldmia	r2, {r1, r2}
 8005312:	480e      	ldr	r0, [pc, #56]	@ (800534c <statemachine+0xb0c>)
 8005314:	f7fe fefa 	bl	800410c <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8005318:	4b1d      	ldr	r3, [pc, #116]	@ (8005390 <statemachine+0xb50>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	f340 8092 	ble.w	8005446 <statemachine+0xc06>
						  						  balisestate--;
 8005322:	4b1c      	ldr	r3, [pc, #112]	@ (8005394 <statemachine+0xb54>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	3b01      	subs	r3, #1
 8005328:	b2da      	uxtb	r2, r3
 800532a:	4b1a      	ldr	r3, [pc, #104]	@ (8005394 <statemachine+0xb54>)
 800532c:	701a      	strb	r2, [r3, #0]
						  						  BTN_B_LONG=0;
 800532e:	4b18      	ldr	r3, [pc, #96]	@ (8005390 <statemachine+0xb50>)
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 8005334:	4b09      	ldr	r3, [pc, #36]	@ (800535c <statemachine+0xb1c>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 800533a:	4817      	ldr	r0, [pc, #92]	@ (8005398 <statemachine+0xb58>)
 800533c:	f009 fe70 	bl	800f020 <HAL_TIM_Base_Stop_IT>
						  break;
 8005340:	e081      	b.n	8005446 <statemachine+0xc06>
 8005342:	bf00      	nop
 8005344:	20000aa0 	.word	0x20000aa0
 8005348:	0801fe34 	.word	0x0801fe34
 800534c:	20000ac0 	.word	0x20000ac0
 8005350:	20000024 	.word	0x20000024
 8005354:	20000864 	.word	0x20000864
 8005358:	20000ce8 	.word	0x20000ce8
 800535c:	20000860 	.word	0x20000860
 8005360:	20000b68 	.word	0x20000b68
 8005364:	0801fe3c 	.word	0x0801fe3c
 8005368:	20000820 	.word	0x20000820
 800536c:	0801fe48 	.word	0x0801fe48
 8005370:	0801fe54 	.word	0x0801fe54
 8005374:	20000898 	.word	0x20000898
 8005378:	0801fe60 	.word	0x0801fe60
 800537c:	20000b34 	.word	0x20000b34
 8005380:	0801fe6c 	.word	0x0801fe6c
 8005384:	0801fe7c 	.word	0x0801fe7c
 8005388:	20000014 	.word	0x20000014
 800538c:	0801fe84 	.word	0x0801fe84
 8005390:	20000b9c 	.word	0x20000b9c
 8005394:	200005d9 	.word	0x200005d9
 8005398:	20001348 	.word	0x20001348
						  ssd1306_SetCursor(32,12);
 800539c:	210c      	movs	r1, #12
 800539e:	2020      	movs	r0, #32
 80053a0:	f7fe feda 	bl	8004158 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 80053a4:	4a97      	ldr	r2, [pc, #604]	@ (8005604 <statemachine+0xdc4>)
 80053a6:	2301      	movs	r3, #1
 80053a8:	ca06      	ldmia	r2, {r1, r2}
 80053aa:	4897      	ldr	r0, [pc, #604]	@ (8005608 <statemachine+0xdc8>)
 80053ac:	f7fe feae 	bl	800410c <ssd1306_WriteString>
						  ssd1306_SetCursor(32,20);
 80053b0:	2114      	movs	r1, #20
 80053b2:	2020      	movs	r0, #32
 80053b4:	f7fe fed0 	bl	8004158 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 80053b8:	4a92      	ldr	r2, [pc, #584]	@ (8005604 <statemachine+0xdc4>)
 80053ba:	2301      	movs	r3, #1
 80053bc:	ca06      	ldmia	r2, {r1, r2}
 80053be:	4893      	ldr	r0, [pc, #588]	@ (800560c <statemachine+0xdcc>)
 80053c0:	f7fe fea4 	bl	800410c <ssd1306_WriteString>
						  ssd1306_SetCursor(32,28);
 80053c4:	211c      	movs	r1, #28
 80053c6:	2020      	movs	r0, #32
 80053c8:	f7fe fec6 	bl	8004158 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 80053cc:	4b90      	ldr	r3, [pc, #576]	@ (8005610 <statemachine+0xdd0>)
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	4b90      	ldr	r3, [pc, #576]	@ (8005614 <statemachine+0xdd4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	4613      	mov	r3, r2
 80053d8:	4a8f      	ldr	r2, [pc, #572]	@ (8005618 <statemachine+0xdd8>)
 80053da:	2132      	movs	r1, #50	@ 0x32
 80053dc:	488f      	ldr	r0, [pc, #572]	@ (800561c <statemachine+0xddc>)
 80053de:	f016 f961 	bl	801b6a4 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 80053e2:	4a88      	ldr	r2, [pc, #544]	@ (8005604 <statemachine+0xdc4>)
 80053e4:	2301      	movs	r3, #1
 80053e6:	ca06      	ldmia	r2, {r1, r2}
 80053e8:	488c      	ldr	r0, [pc, #560]	@ (800561c <statemachine+0xddc>)
 80053ea:	f7fe fe8f 	bl	800410c <ssd1306_WriteString>
						  if(BTN_A>=1){
 80053ee:	4b8c      	ldr	r3, [pc, #560]	@ (8005620 <statemachine+0xde0>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	dd0e      	ble.n	8005414 <statemachine+0xbd4>
						  				  			 	state++;
 80053f6:	4b8b      	ldr	r3, [pc, #556]	@ (8005624 <statemachine+0xde4>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	3301      	adds	r3, #1
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	4b89      	ldr	r3, [pc, #548]	@ (8005624 <statemachine+0xde4>)
 8005400:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8005402:	4b87      	ldr	r3, [pc, #540]	@ (8005620 <statemachine+0xde0>)
 8005404:	2200      	movs	r2, #0
 8005406:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8005408:	4b87      	ldr	r3, [pc, #540]	@ (8005628 <statemachine+0xde8>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 800540e:	4b87      	ldr	r3, [pc, #540]	@ (800562c <statemachine+0xdec>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8005414:	4b86      	ldr	r3, [pc, #536]	@ (8005630 <statemachine+0xdf0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f340 8792 	ble.w	8006342 <statemachine+0x1b02>
						  				 									 									  			 	state--;
 800541e:	4b81      	ldr	r3, [pc, #516]	@ (8005624 <statemachine+0xde4>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	3b01      	subs	r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	4b7f      	ldr	r3, [pc, #508]	@ (8005624 <statemachine+0xde4>)
 8005428:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 800542a:	4b7d      	ldr	r3, [pc, #500]	@ (8005620 <statemachine+0xde0>)
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 8005430:	4b7d      	ldr	r3, [pc, #500]	@ (8005628 <statemachine+0xde8>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 8005436:	4b7e      	ldr	r3, [pc, #504]	@ (8005630 <statemachine+0xdf0>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
					  break;
 800543c:	f000 bf81 	b.w	8006342 <statemachine+0x1b02>
						  break;
 8005440:	bf00      	nop
 8005442:	f000 bf7e 	b.w	8006342 <statemachine+0x1b02>
						  break;
 8005446:	bf00      	nop
					  break;
 8005448:	f000 bf7b 	b.w	8006342 <statemachine+0x1b02>

	case STATE_POS:
			  ssd1306_Fill(Black);
 800544c:	2000      	movs	r0, #0
 800544e:	f7fe fd41 	bl	8003ed4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 8005452:	4978      	ldr	r1, [pc, #480]	@ (8005634 <statemachine+0xdf4>)
 8005454:	4878      	ldr	r0, [pc, #480]	@ (8005638 <statemachine+0xdf8>)
 8005456:	f7fd ff6d 	bl	8003334 <nmea_parse>
			  switch(posstate){
 800545a:	4b78      	ldr	r3, [pc, #480]	@ (800563c <statemachine+0xdfc>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b05      	cmp	r3, #5
 8005460:	f200 8324 	bhi.w	8005aac <statemachine+0x126c>
 8005464:	a201      	add	r2, pc, #4	@ (adr r2, 800546c <statemachine+0xc2c>)
 8005466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800546a:	bf00      	nop
 800546c:	08005485 	.word	0x08005485
 8005470:	0800552f 	.word	0x0800552f
 8005474:	08005665 	.word	0x08005665
 8005478:	08005723 	.word	0x08005723
 800547c:	080057e1 	.word	0x080057e1
 8005480:	08005935 	.word	0x08005935

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 12);
 8005484:	210c      	movs	r1, #12
 8005486:	2020      	movs	r0, #32
 8005488:	f7fe fe66 	bl	8004158 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 800548c:	4a6c      	ldr	r2, [pc, #432]	@ (8005640 <statemachine+0xe00>)
 800548e:	210f      	movs	r1, #15
 8005490:	4862      	ldr	r0, [pc, #392]	@ (800561c <statemachine+0xddc>)
 8005492:	f016 f907 	bl	801b6a4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005496:	4a5b      	ldr	r2, [pc, #364]	@ (8005604 <statemachine+0xdc4>)
 8005498:	2301      	movs	r3, #1
 800549a:	ca06      	ldmia	r2, {r1, r2}
 800549c:	485f      	ldr	r0, [pc, #380]	@ (800561c <statemachine+0xddc>)
 800549e:	f7fe fe35 	bl	800410c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80054a2:	4b65      	ldr	r3, [pc, #404]	@ (8005638 <statemachine+0xdf8>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	e9cd 2300 	strd	r2, r3, [sp]
 80054ac:	4a65      	ldr	r2, [pc, #404]	@ (8005644 <statemachine+0xe04>)
 80054ae:	210f      	movs	r1, #15
 80054b0:	485a      	ldr	r0, [pc, #360]	@ (800561c <statemachine+0xddc>)
 80054b2:	f016 f8f7 	bl	801b6a4 <sniprintf>
						ssd1306_SetCursor(32, 20);
 80054b6:	2114      	movs	r1, #20
 80054b8:	2020      	movs	r0, #32
 80054ba:	f7fe fe4d 	bl	8004158 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054be:	4a51      	ldr	r2, [pc, #324]	@ (8005604 <statemachine+0xdc4>)
 80054c0:	2301      	movs	r3, #1
 80054c2:	ca06      	ldmia	r2, {r1, r2}
 80054c4:	4855      	ldr	r0, [pc, #340]	@ (800561c <statemachine+0xddc>)
 80054c6:	f7fe fe21 	bl	800410c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 80054ca:	4a5f      	ldr	r2, [pc, #380]	@ (8005648 <statemachine+0xe08>)
 80054cc:	210f      	movs	r1, #15
 80054ce:	4853      	ldr	r0, [pc, #332]	@ (800561c <statemachine+0xddc>)
 80054d0:	f016 f8e8 	bl	801b6a4 <sniprintf>
						ssd1306_SetCursor(32, 28);
 80054d4:	211c      	movs	r1, #28
 80054d6:	2020      	movs	r0, #32
 80054d8:	f7fe fe3e 	bl	8004158 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80054dc:	4a49      	ldr	r2, [pc, #292]	@ (8005604 <statemachine+0xdc4>)
 80054de:	2301      	movs	r3, #1
 80054e0:	ca06      	ldmia	r2, {r1, r2}
 80054e2:	484e      	ldr	r0, [pc, #312]	@ (800561c <statemachine+0xddc>)
 80054e4:	f7fe fe12 	bl	800410c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80054e8:	4b53      	ldr	r3, [pc, #332]	@ (8005638 <statemachine+0xdf8>)
 80054ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80054ee:	e9cd 2300 	strd	r2, r3, [sp]
 80054f2:	4a54      	ldr	r2, [pc, #336]	@ (8005644 <statemachine+0xe04>)
 80054f4:	210f      	movs	r1, #15
 80054f6:	4849      	ldr	r0, [pc, #292]	@ (800561c <statemachine+0xddc>)
 80054f8:	f016 f8d4 	bl	801b6a4 <sniprintf>
						ssd1306_SetCursor(32, 36);
 80054fc:	2124      	movs	r1, #36	@ 0x24
 80054fe:	2020      	movs	r0, #32
 8005500:	f7fe fe2a 	bl	8004158 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005504:	4a3f      	ldr	r2, [pc, #252]	@ (8005604 <statemachine+0xdc4>)
 8005506:	2301      	movs	r3, #1
 8005508:	ca06      	ldmia	r2, {r1, r2}
 800550a:	4844      	ldr	r0, [pc, #272]	@ (800561c <statemachine+0xddc>)
 800550c:	f7fe fdfe 	bl	800410c <ssd1306_WriteString>
				  if(BTN_B>=1){
 8005510:	4b45      	ldr	r3, [pc, #276]	@ (8005628 <statemachine+0xde8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	f340 82be 	ble.w	8005a96 <statemachine+0x1256>
					  posstate++;
 800551a:	4b48      	ldr	r3, [pc, #288]	@ (800563c <statemachine+0xdfc>)
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	b2da      	uxtb	r2, r3
 8005522:	4b46      	ldr	r3, [pc, #280]	@ (800563c <statemachine+0xdfc>)
 8005524:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8005526:	4b40      	ldr	r3, [pc, #256]	@ (8005628 <statemachine+0xde8>)
 8005528:	2200      	movs	r2, #0
 800552a:	601a      	str	r2, [r3, #0]
				  }



				  break;
 800552c:	e2b3      	b.n	8005a96 <statemachine+0x1256>
			  case STATE_INFO:
				  ssd1306_Fill(Black);
 800552e:	2000      	movs	r0, #0
 8005530:	f7fe fcd0 	bl	8003ed4 <ssd1306_Fill>
				  nmea_parse(&myData, DataBuffer);
 8005534:	493f      	ldr	r1, [pc, #252]	@ (8005634 <statemachine+0xdf4>)
 8005536:	4840      	ldr	r0, [pc, #256]	@ (8005638 <statemachine+0xdf8>)
 8005538:	f7fd fefc 	bl	8003334 <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 800553c:	4b3e      	ldr	r3, [pc, #248]	@ (8005638 <statemachine+0xdf8>)
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	4618      	mov	r0, r3
 8005542:	f7fa ffd9 	bl	80004f8 <__aeabi_f2d>
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	e9cd 2300 	strd	r2, r3, [sp]
 800554e:	4a3f      	ldr	r2, [pc, #252]	@ (800564c <statemachine+0xe0c>)
 8005550:	210f      	movs	r1, #15
 8005552:	4832      	ldr	r0, [pc, #200]	@ (800561c <statemachine+0xddc>)
 8005554:	f016 f8a6 	bl	801b6a4 <sniprintf>
				ssd1306_SetCursor(32, 12);
 8005558:	210c      	movs	r1, #12
 800555a:	2020      	movs	r0, #32
 800555c:	f7fe fdfc 	bl	8004158 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005560:	4a28      	ldr	r2, [pc, #160]	@ (8005604 <statemachine+0xdc4>)
 8005562:	2301      	movs	r3, #1
 8005564:	ca06      	ldmia	r2, {r1, r2}
 8005566:	482d      	ldr	r0, [pc, #180]	@ (800561c <statemachine+0xddc>)
 8005568:	f7fe fdd0 	bl	800410c <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 800556c:	4b38      	ldr	r3, [pc, #224]	@ (8005650 <statemachine+0xe10>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7fa ffc1 	bl	80004f8 <__aeabi_f2d>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	e9cd 2300 	strd	r2, r3, [sp]
 800557e:	4a35      	ldr	r2, [pc, #212]	@ (8005654 <statemachine+0xe14>)
 8005580:	2114      	movs	r1, #20
 8005582:	4826      	ldr	r0, [pc, #152]	@ (800561c <statemachine+0xddc>)
 8005584:	f016 f88e 	bl	801b6a4 <sniprintf>
				ssd1306_SetCursor(32, 20);
 8005588:	2114      	movs	r1, #20
 800558a:	2020      	movs	r0, #32
 800558c:	f7fe fde4 	bl	8004158 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005590:	4a1c      	ldr	r2, [pc, #112]	@ (8005604 <statemachine+0xdc4>)
 8005592:	2301      	movs	r3, #1
 8005594:	ca06      	ldmia	r2, {r1, r2}
 8005596:	4821      	ldr	r0, [pc, #132]	@ (800561c <statemachine+0xddc>)
 8005598:	f7fe fdb8 	bl	800410c <ssd1306_WriteString>
				ssd1306_SetCursor(32, 28);
 800559c:	211c      	movs	r1, #28
 800559e:	2020      	movs	r0, #32
 80055a0:	f7fe fdda 	bl	8004158 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 80055a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005658 <statemachine+0xe18>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fa ffa5 	bl	80004f8 <__aeabi_f2d>
 80055ae:	4602      	mov	r2, r0
 80055b0:	460b      	mov	r3, r1
 80055b2:	e9cd 2300 	strd	r2, r3, [sp]
 80055b6:	4a29      	ldr	r2, [pc, #164]	@ (800565c <statemachine+0xe1c>)
 80055b8:	210f      	movs	r1, #15
 80055ba:	4818      	ldr	r0, [pc, #96]	@ (800561c <statemachine+0xddc>)
 80055bc:	f016 f872 	bl	801b6a4 <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80055c0:	4a10      	ldr	r2, [pc, #64]	@ (8005604 <statemachine+0xdc4>)
 80055c2:	2301      	movs	r3, #1
 80055c4:	ca06      	ldmia	r2, {r1, r2}
 80055c6:	4815      	ldr	r0, [pc, #84]	@ (800561c <statemachine+0xddc>)
 80055c8:	f7fe fda0 	bl	800410c <ssd1306_WriteString>
				 if(BTN_B>=1){
 80055cc:	4b16      	ldr	r3, [pc, #88]	@ (8005628 <statemachine+0xde8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	dd08      	ble.n	80055e6 <statemachine+0xda6>
								  					  posstate++;
 80055d4:	4b19      	ldr	r3, [pc, #100]	@ (800563c <statemachine+0xdfc>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	3301      	adds	r3, #1
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	4b17      	ldr	r3, [pc, #92]	@ (800563c <statemachine+0xdfc>)
 80055de:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 80055e0:	4b11      	ldr	r3, [pc, #68]	@ (8005628 <statemachine+0xde8>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 80055e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005660 <statemachine+0xe20>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f340 8255 	ble.w	8005a9a <statemachine+0x125a>
													  posstate--;
 80055f0:	4b12      	ldr	r3, [pc, #72]	@ (800563c <statemachine+0xdfc>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	4b10      	ldr	r3, [pc, #64]	@ (800563c <statemachine+0xdfc>)
 80055fa:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 80055fc:	4b18      	ldr	r3, [pc, #96]	@ (8005660 <statemachine+0xe20>)
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]
												}

				  break;
 8005602:	e24a      	b.n	8005a9a <statemachine+0x125a>
 8005604:	20000014 	.word	0x20000014
 8005608:	0801fe8c 	.word	0x0801fe8c
 800560c:	0801fe94 	.word	0x0801fe94
 8005610:	20000a9c 	.word	0x20000a9c
 8005614:	20000aa0 	.word	0x20000aa0
 8005618:	0801fe9c 	.word	0x0801fe9c
 800561c:	20000ac0 	.word	0x20000ac0
 8005620:	20000860 	.word	0x20000860
 8005624:	200005d4 	.word	0x200005d4
 8005628:	20000864 	.word	0x20000864
 800562c:	20000b88 	.word	0x20000b88
 8005630:	20000ba0 	.word	0x20000ba0
 8005634:	20000620 	.word	0x20000620
 8005638:	20000820 	.word	0x20000820
 800563c:	200005d6 	.word	0x200005d6
 8005640:	0801fea4 	.word	0x0801fea4
 8005644:	0801feb0 	.word	0x0801feb0
 8005648:	0801feb8 	.word	0x0801feb8
 800564c:	0801fec4 	.word	0x0801fec4
 8005650:	20000898 	.word	0x20000898
 8005654:	0801fed0 	.word	0x0801fed0
 8005658:	20000890 	.word	0x20000890
 800565c:	0801fedc 	.word	0x0801fedc
 8005660:	20000b9c 	.word	0x20000b9c
			  case STATE_LAT:
						ssd1306_SetCursor(32, 12);
 8005664:	210c      	movs	r1, #12
 8005666:	2020      	movs	r0, #32
 8005668:	f7fe fd76 	bl	8004158 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 800566c:	4aa0      	ldr	r2, [pc, #640]	@ (80058f0 <statemachine+0x10b0>)
 800566e:	210f      	movs	r1, #15
 8005670:	48a0      	ldr	r0, [pc, #640]	@ (80058f4 <statemachine+0x10b4>)
 8005672:	f016 f817 	bl	801b6a4 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005676:	4aa0      	ldr	r2, [pc, #640]	@ (80058f8 <statemachine+0x10b8>)
 8005678:	2301      	movs	r3, #1
 800567a:	ca06      	ldmia	r2, {r1, r2}
 800567c:	489d      	ldr	r0, [pc, #628]	@ (80058f4 <statemachine+0x10b4>)
 800567e:	f7fe fd45 	bl	800410c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005682:	4b9e      	ldr	r3, [pc, #632]	@ (80058fc <statemachine+0x10bc>)
 8005684:	7a1b      	ldrb	r3, [r3, #8]
 8005686:	4a9e      	ldr	r2, [pc, #632]	@ (8005900 <statemachine+0x10c0>)
 8005688:	210f      	movs	r1, #15
 800568a:	489a      	ldr	r0, [pc, #616]	@ (80058f4 <statemachine+0x10b4>)
 800568c:	f016 f80a 	bl	801b6a4 <sniprintf>
						ssd1306_SetCursor(32, 20);
 8005690:	2114      	movs	r1, #20
 8005692:	2020      	movs	r0, #32
 8005694:	f7fe fd60 	bl	8004158 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005698:	4a97      	ldr	r2, [pc, #604]	@ (80058f8 <statemachine+0x10b8>)
 800569a:	2301      	movs	r3, #1
 800569c:	ca06      	ldmia	r2, {r1, r2}
 800569e:	4895      	ldr	r0, [pc, #596]	@ (80058f4 <statemachine+0x10b4>)
 80056a0:	f7fe fd34 	bl	800410c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80056a4:	4a97      	ldr	r2, [pc, #604]	@ (8005904 <statemachine+0x10c4>)
 80056a6:	210f      	movs	r1, #15
 80056a8:	4892      	ldr	r0, [pc, #584]	@ (80058f4 <statemachine+0x10b4>)
 80056aa:	f015 fffb 	bl	801b6a4 <sniprintf>
						ssd1306_SetCursor(32, 28);
 80056ae:	211c      	movs	r1, #28
 80056b0:	2020      	movs	r0, #32
 80056b2:	f7fe fd51 	bl	8004158 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80056b6:	4a90      	ldr	r2, [pc, #576]	@ (80058f8 <statemachine+0x10b8>)
 80056b8:	2301      	movs	r3, #1
 80056ba:	ca06      	ldmia	r2, {r1, r2}
 80056bc:	488d      	ldr	r0, [pc, #564]	@ (80058f4 <statemachine+0x10b4>)
 80056be:	f7fe fd25 	bl	800410c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 80056c2:	4b8e      	ldr	r3, [pc, #568]	@ (80058fc <statemachine+0x10bc>)
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	e9cd 2300 	strd	r2, r3, [sp]
 80056cc:	4a8e      	ldr	r2, [pc, #568]	@ (8005908 <statemachine+0x10c8>)
 80056ce:	210f      	movs	r1, #15
 80056d0:	4888      	ldr	r0, [pc, #544]	@ (80058f4 <statemachine+0x10b4>)
 80056d2:	f015 ffe7 	bl	801b6a4 <sniprintf>
						ssd1306_SetCursor(32, 36);
 80056d6:	2124      	movs	r1, #36	@ 0x24
 80056d8:	2020      	movs	r0, #32
 80056da:	f7fe fd3d 	bl	8004158 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80056de:	4a86      	ldr	r2, [pc, #536]	@ (80058f8 <statemachine+0x10b8>)
 80056e0:	2301      	movs	r3, #1
 80056e2:	ca06      	ldmia	r2, {r1, r2}
 80056e4:	4883      	ldr	r0, [pc, #524]	@ (80058f4 <statemachine+0x10b4>)
 80056e6:	f7fe fd11 	bl	800410c <ssd1306_WriteString>


				  if(BTN_B>=1){
 80056ea:	4b88      	ldr	r3, [pc, #544]	@ (800590c <statemachine+0x10cc>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dd08      	ble.n	8005704 <statemachine+0xec4>
				  					  posstate++;
 80056f2:	4b87      	ldr	r3, [pc, #540]	@ (8005910 <statemachine+0x10d0>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	3301      	adds	r3, #1
 80056f8:	b2da      	uxtb	r2, r3
 80056fa:	4b85      	ldr	r3, [pc, #532]	@ (8005910 <statemachine+0x10d0>)
 80056fc:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80056fe:	4b83      	ldr	r3, [pc, #524]	@ (800590c <statemachine+0x10cc>)
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8005704:	4b83      	ldr	r3, [pc, #524]	@ (8005914 <statemachine+0x10d4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	f340 81c8 	ble.w	8005a9e <statemachine+0x125e>
									  posstate--;
 800570e:	4b80      	ldr	r3, [pc, #512]	@ (8005910 <statemachine+0x10d0>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	3b01      	subs	r3, #1
 8005714:	b2da      	uxtb	r2, r3
 8005716:	4b7e      	ldr	r3, [pc, #504]	@ (8005910 <statemachine+0x10d0>)
 8005718:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 800571a:	4b7e      	ldr	r3, [pc, #504]	@ (8005914 <statemachine+0x10d4>)
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
								}



				  break;
 8005720:	e1bd      	b.n	8005a9e <statemachine+0x125e>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 12);
 8005722:	210c      	movs	r1, #12
 8005724:	2020      	movs	r0, #32
 8005726:	f7fe fd17 	bl	8004158 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 800572a:	4a7b      	ldr	r2, [pc, #492]	@ (8005918 <statemachine+0x10d8>)
 800572c:	210f      	movs	r1, #15
 800572e:	4871      	ldr	r0, [pc, #452]	@ (80058f4 <statemachine+0x10b4>)
 8005730:	f015 ffb8 	bl	801b6a4 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005734:	4a70      	ldr	r2, [pc, #448]	@ (80058f8 <statemachine+0x10b8>)
 8005736:	2301      	movs	r3, #1
 8005738:	ca06      	ldmia	r2, {r1, r2}
 800573a:	486e      	ldr	r0, [pc, #440]	@ (80058f4 <statemachine+0x10b4>)
 800573c:	f7fe fce6 	bl	800410c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8005740:	4b6e      	ldr	r3, [pc, #440]	@ (80058fc <statemachine+0x10bc>)
 8005742:	7e1b      	ldrb	r3, [r3, #24]
 8005744:	4a6e      	ldr	r2, [pc, #440]	@ (8005900 <statemachine+0x10c0>)
 8005746:	210f      	movs	r1, #15
 8005748:	486a      	ldr	r0, [pc, #424]	@ (80058f4 <statemachine+0x10b4>)
 800574a:	f015 ffab 	bl	801b6a4 <sniprintf>
					ssd1306_SetCursor(32, 20);
 800574e:	2114      	movs	r1, #20
 8005750:	2020      	movs	r0, #32
 8005752:	f7fe fd01 	bl	8004158 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005756:	4a68      	ldr	r2, [pc, #416]	@ (80058f8 <statemachine+0x10b8>)
 8005758:	2301      	movs	r3, #1
 800575a:	ca06      	ldmia	r2, {r1, r2}
 800575c:	4865      	ldr	r0, [pc, #404]	@ (80058f4 <statemachine+0x10b4>)
 800575e:	f7fe fcd5 	bl	800410c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 8005762:	4a6e      	ldr	r2, [pc, #440]	@ (800591c <statemachine+0x10dc>)
 8005764:	210f      	movs	r1, #15
 8005766:	4863      	ldr	r0, [pc, #396]	@ (80058f4 <statemachine+0x10b4>)
 8005768:	f015 ff9c 	bl	801b6a4 <sniprintf>
					ssd1306_SetCursor(32, 28);
 800576c:	211c      	movs	r1, #28
 800576e:	2020      	movs	r0, #32
 8005770:	f7fe fcf2 	bl	8004158 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005774:	4a60      	ldr	r2, [pc, #384]	@ (80058f8 <statemachine+0x10b8>)
 8005776:	2301      	movs	r3, #1
 8005778:	ca06      	ldmia	r2, {r1, r2}
 800577a:	485e      	ldr	r0, [pc, #376]	@ (80058f4 <statemachine+0x10b4>)
 800577c:	f7fe fcc6 	bl	800410c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8005780:	4b5e      	ldr	r3, [pc, #376]	@ (80058fc <statemachine+0x10bc>)
 8005782:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005786:	e9cd 2300 	strd	r2, r3, [sp]
 800578a:	4a5f      	ldr	r2, [pc, #380]	@ (8005908 <statemachine+0x10c8>)
 800578c:	210f      	movs	r1, #15
 800578e:	4859      	ldr	r0, [pc, #356]	@ (80058f4 <statemachine+0x10b4>)
 8005790:	f015 ff88 	bl	801b6a4 <sniprintf>
					ssd1306_SetCursor(32, 36);
 8005794:	2124      	movs	r1, #36	@ 0x24
 8005796:	2020      	movs	r0, #32
 8005798:	f7fe fcde 	bl	8004158 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800579c:	4a56      	ldr	r2, [pc, #344]	@ (80058f8 <statemachine+0x10b8>)
 800579e:	2301      	movs	r3, #1
 80057a0:	ca06      	ldmia	r2, {r1, r2}
 80057a2:	4854      	ldr	r0, [pc, #336]	@ (80058f4 <statemachine+0x10b4>)
 80057a4:	f7fe fcb2 	bl	800410c <ssd1306_WriteString>

				  if(BTN_B>=1){
 80057a8:	4b58      	ldr	r3, [pc, #352]	@ (800590c <statemachine+0x10cc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	dd08      	ble.n	80057c2 <statemachine+0xf82>
				  					  posstate++;
 80057b0:	4b57      	ldr	r3, [pc, #348]	@ (8005910 <statemachine+0x10d0>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	3301      	adds	r3, #1
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	4b55      	ldr	r3, [pc, #340]	@ (8005910 <statemachine+0x10d0>)
 80057ba:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 80057bc:	4b53      	ldr	r3, [pc, #332]	@ (800590c <statemachine+0x10cc>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80057c2:	4b54      	ldr	r3, [pc, #336]	@ (8005914 <statemachine+0x10d4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f340 816b 	ble.w	8005aa2 <statemachine+0x1262>
									  posstate--;
 80057cc:	4b50      	ldr	r3, [pc, #320]	@ (8005910 <statemachine+0x10d0>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b2da      	uxtb	r2, r3
 80057d4:	4b4e      	ldr	r3, [pc, #312]	@ (8005910 <statemachine+0x10d0>)
 80057d6:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 80057d8:	4b4e      	ldr	r3, [pc, #312]	@ (8005914 <statemachine+0x10d4>)
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
								}

				  break;
 80057de:	e160      	b.n	8005aa2 <statemachine+0x1262>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 12);
 80057e0:	210c      	movs	r1, #12
 80057e2:	2020      	movs	r0, #32
 80057e4:	f7fe fcb8 	bl	8004158 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 80057e8:	4a4d      	ldr	r2, [pc, #308]	@ (8005920 <statemachine+0x10e0>)
 80057ea:	210f      	movs	r1, #15
 80057ec:	4841      	ldr	r0, [pc, #260]	@ (80058f4 <statemachine+0x10b4>)
 80057ee:	f015 ff59 	bl	801b6a4 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80057f2:	4a41      	ldr	r2, [pc, #260]	@ (80058f8 <statemachine+0x10b8>)
 80057f4:	2301      	movs	r3, #1
 80057f6:	ca06      	ldmia	r2, {r1, r2}
 80057f8:	483e      	ldr	r0, [pc, #248]	@ (80058f4 <statemachine+0x10b4>)
 80057fa:	f7fe fc87 	bl	800410c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80057fe:	4b3f      	ldr	r3, [pc, #252]	@ (80058fc <statemachine+0x10bc>)
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	4618      	mov	r0, r3
 8005804:	f7fa fe78 	bl	80004f8 <__aeabi_f2d>
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	e9cd 2300 	strd	r2, r3, [sp]
 8005810:	4a44      	ldr	r2, [pc, #272]	@ (8005924 <statemachine+0x10e4>)
 8005812:	210f      	movs	r1, #15
 8005814:	4837      	ldr	r0, [pc, #220]	@ (80058f4 <statemachine+0x10b4>)
 8005816:	f015 ff45 	bl	801b6a4 <sniprintf>
				  						ssd1306_SetCursor(32, 20);
 800581a:	2114      	movs	r1, #20
 800581c:	2020      	movs	r0, #32
 800581e:	f7fe fc9b 	bl	8004158 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005822:	4a35      	ldr	r2, [pc, #212]	@ (80058f8 <statemachine+0x10b8>)
 8005824:	2301      	movs	r3, #1
 8005826:	ca06      	ldmia	r2, {r1, r2}
 8005828:	4832      	ldr	r0, [pc, #200]	@ (80058f4 <statemachine+0x10b4>)
 800582a:	f7fe fc6f 	bl	800410c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 800582e:	4a3e      	ldr	r2, [pc, #248]	@ (8005928 <statemachine+0x10e8>)
 8005830:	210f      	movs	r1, #15
 8005832:	4830      	ldr	r0, [pc, #192]	@ (80058f4 <statemachine+0x10b4>)
 8005834:	f015 ff36 	bl	801b6a4 <sniprintf>
				  						ssd1306_SetCursor(32, 28);
 8005838:	211c      	movs	r1, #28
 800583a:	2020      	movs	r0, #32
 800583c:	f7fe fc8c 	bl	8004158 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005840:	4a2d      	ldr	r2, [pc, #180]	@ (80058f8 <statemachine+0x10b8>)
 8005842:	2301      	movs	r3, #1
 8005844:	ca06      	ldmia	r2, {r1, r2}
 8005846:	482b      	ldr	r0, [pc, #172]	@ (80058f4 <statemachine+0x10b4>)
 8005848:	f7fe fc60 	bl	800410c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 800584c:	4b2b      	ldr	r3, [pc, #172]	@ (80058fc <statemachine+0x10bc>)
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	4618      	mov	r0, r3
 8005852:	f7fa fe51 	bl	80004f8 <__aeabi_f2d>
 8005856:	a324      	add	r3, pc, #144	@ (adr r3, 80058e8 <statemachine+0x10a8>)
 8005858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585c:	f7fa fea4 	bl	80005a8 <__aeabi_dmul>
 8005860:	4602      	mov	r2, r0
 8005862:	460b      	mov	r3, r1
 8005864:	4610      	mov	r0, r2
 8005866:	4619      	mov	r1, r3
 8005868:	f7fb f996 	bl	8000b98 <__aeabi_d2f>
 800586c:	4603      	mov	r3, r0
 800586e:	ee00 3a10 	vmov	s0, r3
 8005872:	f018 fd6d 	bl	801e350 <expf>
 8005876:	eef0 7a40 	vmov.f32	s15, s0
 800587a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800592c <statemachine+0x10ec>
 800587e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005882:	ee17 0a90 	vmov	r0, s15
 8005886:	f7fa fe37 	bl	80004f8 <__aeabi_f2d>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	e9cd 2300 	strd	r2, r3, [sp]
 8005892:	4a27      	ldr	r2, [pc, #156]	@ (8005930 <statemachine+0x10f0>)
 8005894:	210f      	movs	r1, #15
 8005896:	4817      	ldr	r0, [pc, #92]	@ (80058f4 <statemachine+0x10b4>)
 8005898:	f015 ff04 	bl	801b6a4 <sniprintf>
				  						ssd1306_SetCursor(32, 36);
 800589c:	2124      	movs	r1, #36	@ 0x24
 800589e:	2020      	movs	r0, #32
 80058a0:	f7fe fc5a 	bl	8004158 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80058a4:	4a14      	ldr	r2, [pc, #80]	@ (80058f8 <statemachine+0x10b8>)
 80058a6:	2301      	movs	r3, #1
 80058a8:	ca06      	ldmia	r2, {r1, r2}
 80058aa:	4812      	ldr	r0, [pc, #72]	@ (80058f4 <statemachine+0x10b4>)
 80058ac:	f7fe fc2e 	bl	800410c <ssd1306_WriteString>

				  if(BTN_B>=1){
 80058b0:	4b16      	ldr	r3, [pc, #88]	@ (800590c <statemachine+0x10cc>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dd08      	ble.n	80058ca <statemachine+0x108a>
				  					posstate++;
 80058b8:	4b15      	ldr	r3, [pc, #84]	@ (8005910 <statemachine+0x10d0>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	3301      	adds	r3, #1
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <statemachine+0x10d0>)
 80058c2:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 80058c4:	4b11      	ldr	r3, [pc, #68]	@ (800590c <statemachine+0x10cc>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 80058ca:	4b12      	ldr	r3, [pc, #72]	@ (8005914 <statemachine+0x10d4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f340 80e9 	ble.w	8005aa6 <statemachine+0x1266>
					  posstate--;
 80058d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005910 <statemachine+0x10d0>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	3b01      	subs	r3, #1
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005910 <statemachine+0x10d0>)
 80058de:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 80058e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <statemachine+0x10d4>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
				}
				  break;
 80058e6:	e0de      	b.n	8005aa6 <statemachine+0x1266>
 80058e8:	fb798882 	.word	0xfb798882
 80058ec:	bf1e1818 	.word	0xbf1e1818
 80058f0:	0801fee8 	.word	0x0801fee8
 80058f4:	20000ac0 	.word	0x20000ac0
 80058f8:	20000014 	.word	0x20000014
 80058fc:	20000820 	.word	0x20000820
 8005900:	0801fef4 	.word	0x0801fef4
 8005904:	0801fea4 	.word	0x0801fea4
 8005908:	0801feb0 	.word	0x0801feb0
 800590c:	20000864 	.word	0x20000864
 8005910:	200005d6 	.word	0x200005d6
 8005914:	20000b9c 	.word	0x20000b9c
 8005918:	0801fef8 	.word	0x0801fef8
 800591c:	0801feb8 	.word	0x0801feb8
 8005920:	0801ff04 	.word	0x0801ff04
 8005924:	0801ff10 	.word	0x0801ff10
 8005928:	0801ff18 	.word	0x0801ff18
 800592c:	447a0000 	.word	0x447a0000
 8005930:	0801ff24 	.word	0x0801ff24
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 8005934:	2000      	movs	r0, #0
 8005936:	f7fe facd 	bl	8003ed4 <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 800593a:	4999      	ldr	r1, [pc, #612]	@ (8005ba0 <statemachine+0x1360>)
 800593c:	4899      	ldr	r0, [pc, #612]	@ (8005ba4 <statemachine+0x1364>)
 800593e:	f7fd fcf9 	bl	8003334 <nmea_parse>
			  			  if(settimeen==0){
 8005942:	4b99      	ldr	r3, [pc, #612]	@ (8005ba8 <statemachine+0x1368>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d141      	bne.n	80059ce <statemachine+0x118e>

			  							settimeen=1;
 800594a:	4b97      	ldr	r3, [pc, #604]	@ (8005ba8 <statemachine+0x1368>)
 800594c:	2201      	movs	r2, #1
 800594e:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8005950:	4b94      	ldr	r3, [pc, #592]	@ (8005ba4 <statemachine+0x1364>)
 8005952:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005956:	f003 030f 	and.w	r3, r3, #15
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	0092      	lsls	r2, r2, #2
 8005960:	4413      	add	r3, r2
 8005962:	005b      	lsls	r3, r3, #1
 8005964:	b2da      	uxtb	r2, r3
 8005966:	4b8f      	ldr	r3, [pc, #572]	@ (8005ba4 <statemachine+0x1364>)
 8005968:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	b2db      	uxtb	r3, r3
 8005972:	4413      	add	r3, r2
 8005974:	b2da      	uxtb	r2, r3
 8005976:	4b8d      	ldr	r3, [pc, #564]	@ (8005bac <statemachine+0x136c>)
 8005978:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 800597a:	4b8a      	ldr	r3, [pc, #552]	@ (8005ba4 <statemachine+0x1364>)
 800597c:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8005980:	f003 030f 	and.w	r3, r3, #15
 8005984:	b2db      	uxtb	r3, r3
 8005986:	461a      	mov	r2, r3
 8005988:	0092      	lsls	r2, r2, #2
 800598a:	4413      	add	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	b2da      	uxtb	r2, r3
 8005990:	4b84      	ldr	r3, [pc, #528]	@ (8005ba4 <statemachine+0x1364>)
 8005992:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	b2db      	uxtb	r3, r3
 800599c:	4413      	add	r3, r2
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	4b83      	ldr	r3, [pc, #524]	@ (8005bb0 <statemachine+0x1370>)
 80059a2:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 80059a4:	4b7f      	ldr	r3, [pc, #508]	@ (8005ba4 <statemachine+0x1364>)
 80059a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	0092      	lsls	r2, r2, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	4b7a      	ldr	r3, [pc, #488]	@ (8005ba4 <statemachine+0x1364>)
 80059bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059c0:	f003 030f 	and.w	r3, r3, #15
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	4413      	add	r3, r2
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	4b7a      	ldr	r3, [pc, #488]	@ (8005bb4 <statemachine+0x1374>)
 80059cc:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 12);
 80059ce:	210c      	movs	r1, #12
 80059d0:	2020      	movs	r0, #32
 80059d2:	f7fe fbc1 	bl	8004158 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 80059d6:	4a78      	ldr	r2, [pc, #480]	@ (8005bb8 <statemachine+0x1378>)
 80059d8:	2301      	movs	r3, #1
 80059da:	ca06      	ldmia	r2, {r1, r2}
 80059dc:	4877      	ldr	r0, [pc, #476]	@ (8005bbc <statemachine+0x137c>)
 80059de:	f7fe fb95 	bl	800410c <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 22);
 80059e2:	2116      	movs	r1, #22
 80059e4:	2020      	movs	r0, #32
 80059e6:	f7fe fbb7 	bl	8004158 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 80059ea:	4b70      	ldr	r3, [pc, #448]	@ (8005bac <statemachine+0x136c>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b6f      	ldr	r3, [pc, #444]	@ (8005bb0 <statemachine+0x1370>)
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	4613      	mov	r3, r2
 80059f8:	4a71      	ldr	r2, [pc, #452]	@ (8005bc0 <statemachine+0x1380>)
 80059fa:	210f      	movs	r1, #15
 80059fc:	4871      	ldr	r0, [pc, #452]	@ (8005bc4 <statemachine+0x1384>)
 80059fe:	f015 fe51 	bl	801b6a4 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005a02:	4a71      	ldr	r2, [pc, #452]	@ (8005bc8 <statemachine+0x1388>)
 8005a04:	2301      	movs	r3, #1
 8005a06:	ca06      	ldmia	r2, {r1, r2}
 8005a08:	486e      	ldr	r0, [pc, #440]	@ (8005bc4 <statemachine+0x1384>)
 8005a0a:	f7fe fb7f 	bl	800410c <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 32);
 8005a0e:	2120      	movs	r1, #32
 8005a10:	2020      	movs	r0, #32
 8005a12:	f7fe fba1 	bl	8004158 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 8005a16:	4b67      	ldr	r3, [pc, #412]	@ (8005bb4 <statemachine+0x1374>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	4a6c      	ldr	r2, [pc, #432]	@ (8005bcc <statemachine+0x138c>)
 8005a1c:	210f      	movs	r1, #15
 8005a1e:	4869      	ldr	r0, [pc, #420]	@ (8005bc4 <statemachine+0x1384>)
 8005a20:	f015 fe40 	bl	801b6a4 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8005a24:	4a64      	ldr	r2, [pc, #400]	@ (8005bb8 <statemachine+0x1378>)
 8005a26:	2301      	movs	r3, #1
 8005a28:	ca06      	ldmia	r2, {r1, r2}
 8005a2a:	4866      	ldr	r0, [pc, #408]	@ (8005bc4 <statemachine+0x1384>)
 8005a2c:	f7fe fb6e 	bl	800410c <ssd1306_WriteString>
			  				if(BTN_B>=1){
 8005a30:	4b67      	ldr	r3, [pc, #412]	@ (8005bd0 <statemachine+0x1390>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	dd20      	ble.n	8005a7a <statemachine+0x123a>
			  					posstate--;
 8005a38:	4b66      	ldr	r3, [pc, #408]	@ (8005bd4 <statemachine+0x1394>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	4b64      	ldr	r3, [pc, #400]	@ (8005bd4 <statemachine+0x1394>)
 8005a42:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005a44:	4b63      	ldr	r3, [pc, #396]	@ (8005bd4 <statemachine+0x1394>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	4b61      	ldr	r3, [pc, #388]	@ (8005bd4 <statemachine+0x1394>)
 8005a4e:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005a50:	4b60      	ldr	r3, [pc, #384]	@ (8005bd4 <statemachine+0x1394>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	4b5e      	ldr	r3, [pc, #376]	@ (8005bd4 <statemachine+0x1394>)
 8005a5a:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005a5c:	4b5d      	ldr	r3, [pc, #372]	@ (8005bd4 <statemachine+0x1394>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	4b5b      	ldr	r3, [pc, #364]	@ (8005bd4 <statemachine+0x1394>)
 8005a66:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8005a68:	4b5a      	ldr	r3, [pc, #360]	@ (8005bd4 <statemachine+0x1394>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	4b58      	ldr	r3, [pc, #352]	@ (8005bd4 <statemachine+0x1394>)
 8005a72:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 8005a74:	4b56      	ldr	r3, [pc, #344]	@ (8005bd0 <statemachine+0x1390>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8005a7a:	4b57      	ldr	r3, [pc, #348]	@ (8005bd8 <statemachine+0x1398>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	dd13      	ble.n	8005aaa <statemachine+0x126a>
			  							  					posstate--;
 8005a82:	4b54      	ldr	r3, [pc, #336]	@ (8005bd4 <statemachine+0x1394>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	4b52      	ldr	r3, [pc, #328]	@ (8005bd4 <statemachine+0x1394>)
 8005a8c:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 8005a8e:	4b52      	ldr	r3, [pc, #328]	@ (8005bd8 <statemachine+0x1398>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 8005a94:	e009      	b.n	8005aaa <statemachine+0x126a>
				  break;
 8005a96:	bf00      	nop
 8005a98:	e008      	b.n	8005aac <statemachine+0x126c>
				  break;
 8005a9a:	bf00      	nop
 8005a9c:	e006      	b.n	8005aac <statemachine+0x126c>
				  break;
 8005a9e:	bf00      	nop
 8005aa0:	e004      	b.n	8005aac <statemachine+0x126c>
				  break;
 8005aa2:	bf00      	nop
 8005aa4:	e002      	b.n	8005aac <statemachine+0x126c>
				  break;
 8005aa6:	bf00      	nop
 8005aa8:	e000      	b.n	8005aac <statemachine+0x126c>
			  			break;
 8005aaa:	bf00      	nop
			  }

					if(BTN_A>=1){
 8005aac:	4b4b      	ldr	r3, [pc, #300]	@ (8005bdc <statemachine+0x139c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	dd0b      	ble.n	8005acc <statemachine+0x128c>
							state++;
 8005ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8005be0 <statemachine+0x13a0>)
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	4b48      	ldr	r3, [pc, #288]	@ (8005be0 <statemachine+0x13a0>)
 8005abe:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005ac0:	4b46      	ldr	r3, [pc, #280]	@ (8005bdc <statemachine+0x139c>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005ac6:	4b42      	ldr	r3, [pc, #264]	@ (8005bd0 <statemachine+0x1390>)
 8005ac8:	2200      	movs	r2, #0
 8005aca:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8005acc:	4b45      	ldr	r3, [pc, #276]	@ (8005be4 <statemachine+0x13a4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f340 8438 	ble.w	8006346 <statemachine+0x1b06>
									 									 									  			 	state--;
 8005ad6:	4b42      	ldr	r3, [pc, #264]	@ (8005be0 <statemachine+0x13a0>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	4b40      	ldr	r3, [pc, #256]	@ (8005be0 <statemachine+0x13a0>)
 8005ae0:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8005ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8005bdc <statemachine+0x139c>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8005ae8:	4b39      	ldr	r3, [pc, #228]	@ (8005bd0 <statemachine+0x1390>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8005aee:	4b3d      	ldr	r3, [pc, #244]	@ (8005be4 <statemachine+0x13a4>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8005af4:	f000 bc27 	b.w	8006346 <statemachine+0x1b06>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8005af8:	2000      	movs	r0, #0
 8005afa:	f7fe f9eb 	bl	8003ed4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 12);
 8005afe:	210c      	movs	r1, #12
 8005b00:	2020      	movs	r0, #32
 8005b02:	f7fe fb29 	bl	8004158 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8005b06:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb8 <statemachine+0x1378>)
 8005b08:	2301      	movs	r3, #1
 8005b0a:	ca06      	ldmia	r2, {r1, r2}
 8005b0c:	4836      	ldr	r0, [pc, #216]	@ (8005be8 <statemachine+0x13a8>)
 8005b0e:	f7fe fafd 	bl	800410c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 32);
 8005b12:	2120      	movs	r1, #32
 8005b14:	2020      	movs	r0, #32
 8005b16:	f7fe fb1f 	bl	8004158 <ssd1306_SetCursor>

			  switch(chronostate){
 8005b1a:	4b34      	ldr	r3, [pc, #208]	@ (8005bec <statemachine+0x13ac>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d072      	beq.n	8005c08 <statemachine+0x13c8>
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	f300 80a1 	bgt.w	8005c6a <statemachine+0x142a>
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d002      	beq.n	8005b32 <statemachine+0x12f2>
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d01e      	beq.n	8005b6e <statemachine+0x132e>
 8005b30:	e09b      	b.n	8005c6a <statemachine+0x142a>
			  case STATE_RESET:
				  min=0;
 8005b32:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf0 <statemachine+0x13b0>)
 8005b34:	f04f 0200 	mov.w	r2, #0
 8005b38:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8005b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8005bf4 <statemachine+0x13b4>)
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8005b42:	4b2d      	ldr	r3, [pc, #180]	@ (8005bf8 <statemachine+0x13b8>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8005b48:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <statemachine+0x1390>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f340 8087 	ble.w	8005c60 <statemachine+0x1420>
				  		chronostate++;
 8005b52:	4b26      	ldr	r3, [pc, #152]	@ (8005bec <statemachine+0x13ac>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	3301      	adds	r3, #1
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <statemachine+0x13ac>)
 8005b5c:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8005bd0 <statemachine+0x1390>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8005b64:	4b25      	ldr	r3, [pc, #148]	@ (8005bfc <statemachine+0x13bc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a25      	ldr	r2, [pc, #148]	@ (8005c00 <statemachine+0x13c0>)
 8005b6a:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8005b6c:	e078      	b.n	8005c60 <statemachine+0x1420>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8005b6e:	4b23      	ldr	r3, [pc, #140]	@ (8005bfc <statemachine+0x13bc>)
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	4b23      	ldr	r3, [pc, #140]	@ (8005c00 <statemachine+0x13c0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	1ad2      	subs	r2, r2, r3
 8005b78:	4b22      	ldr	r3, [pc, #136]	@ (8005c04 <statemachine+0x13c4>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf8 <statemachine+0x13b8>)
 8005b80:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005b82:	4b13      	ldr	r3, [pc, #76]	@ (8005bd0 <statemachine+0x1390>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	dd6c      	ble.n	8005c64 <statemachine+0x1424>
				  		chronostate++;
 8005b8a:	4b18      	ldr	r3, [pc, #96]	@ (8005bec <statemachine+0x13ac>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	4b16      	ldr	r3, [pc, #88]	@ (8005bec <statemachine+0x13ac>)
 8005b94:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8005b96:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd0 <statemachine+0x1390>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8005b9c:	e062      	b.n	8005c64 <statemachine+0x1424>
 8005b9e:	bf00      	nop
 8005ba0:	20000620 	.word	0x20000620
 8005ba4:	20000820 	.word	0x20000820
 8005ba8:	20000b88 	.word	0x20000b88
 8005bac:	20000b85 	.word	0x20000b85
 8005bb0:	20000b86 	.word	0x20000b86
 8005bb4:	20000b84 	.word	0x20000b84
 8005bb8:	20000014 	.word	0x20000014
 8005bbc:	0801ff30 	.word	0x0801ff30
 8005bc0:	0801ff38 	.word	0x0801ff38
 8005bc4:	20000ac0 	.word	0x20000ac0
 8005bc8:	2000001c 	.word	0x2000001c
 8005bcc:	0801ff44 	.word	0x0801ff44
 8005bd0:	20000864 	.word	0x20000864
 8005bd4:	200005d6 	.word	0x200005d6
 8005bd8:	20000b9c 	.word	0x20000b9c
 8005bdc:	20000860 	.word	0x20000860
 8005be0:	200005d4 	.word	0x200005d4
 8005be4:	20000ba0 	.word	0x20000ba0
 8005be8:	0801ff50 	.word	0x0801ff50
 8005bec:	200005d7 	.word	0x200005d7
 8005bf0:	20000b3c 	.word	0x20000b3c
 8005bf4:	20000b38 	.word	0x20000b38
 8005bf8:	20000b44 	.word	0x20000b44
 8005bfc:	2000151c 	.word	0x2000151c
 8005c00:	20000b40 	.word	0x20000b40
 8005c04:	20000b48 	.word	0x20000b48
			  case STATE_PAUSE:
				  timehandler=calctime;
 8005c08:	4b88      	ldr	r3, [pc, #544]	@ (8005e2c <statemachine+0x15ec>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a88      	ldr	r2, [pc, #544]	@ (8005e30 <statemachine+0x15f0>)
 8005c0e:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8005c10:	4b88      	ldr	r3, [pc, #544]	@ (8005e34 <statemachine+0x15f4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dd0c      	ble.n	8005c32 <statemachine+0x13f2>
				  			chronostate--;
 8005c18:	4b87      	ldr	r3, [pc, #540]	@ (8005e38 <statemachine+0x15f8>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	4b85      	ldr	r3, [pc, #532]	@ (8005e38 <statemachine+0x15f8>)
 8005c22:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8005c24:	4b83      	ldr	r3, [pc, #524]	@ (8005e34 <statemachine+0x15f4>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8005c2a:	4b84      	ldr	r3, [pc, #528]	@ (8005e3c <statemachine+0x15fc>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a84      	ldr	r2, [pc, #528]	@ (8005e40 <statemachine+0x1600>)
 8005c30:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8005c32:	4b84      	ldr	r3, [pc, #528]	@ (8005e44 <statemachine+0x1604>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	dd16      	ble.n	8005c68 <statemachine+0x1428>
				  				  	chronostate--;
 8005c3a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e38 <statemachine+0x15f8>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4b7d      	ldr	r3, [pc, #500]	@ (8005e38 <statemachine+0x15f8>)
 8005c44:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8005c46:	4b7c      	ldr	r3, [pc, #496]	@ (8005e38 <statemachine+0x15f8>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8005e38 <statemachine+0x15f8>)
 8005c50:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8005c52:	4b7c      	ldr	r3, [pc, #496]	@ (8005e44 <statemachine+0x1604>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8005c58:	4b75      	ldr	r3, [pc, #468]	@ (8005e30 <statemachine+0x15f0>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8005c5e:	e003      	b.n	8005c68 <statemachine+0x1428>
				  break;
 8005c60:	bf00      	nop
 8005c62:	e002      	b.n	8005c6a <statemachine+0x142a>
				  break;
 8005c64:	bf00      	nop
 8005c66:	e000      	b.n	8005c6a <statemachine+0x142a>
				  break;
 8005c68:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8005c6a:	4b70      	ldr	r3, [pc, #448]	@ (8005e2c <statemachine+0x15ec>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	ee07 3a90 	vmov	s15, r3
 8005c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c76:	ed9f 7a74 	vldr	s14, [pc, #464]	@ 8005e48 <statemachine+0x1608>
 8005c7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c7e:	ee16 0a90 	vmov	r0, s13
 8005c82:	f7fa fc39 	bl	80004f8 <__aeabi_f2d>
 8005c86:	4602      	mov	r2, r0
 8005c88:	460b      	mov	r3, r1
 8005c8a:	ec43 2b10 	vmov	d0, r2, r3
 8005c8e:	f018 fbfb 	bl	801e488 <floor>
 8005c92:	ec53 2b10 	vmov	r2, r3, d0
 8005c96:	4610      	mov	r0, r2
 8005c98:	4619      	mov	r1, r3
 8005c9a:	f7fa ff7d 	bl	8000b98 <__aeabi_d2f>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8005e4c <statemachine+0x160c>)
 8005ca2:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8005ca4:	4b61      	ldr	r3, [pc, #388]	@ (8005e2c <statemachine+0x15ec>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cb0:	4b66      	ldr	r3, [pc, #408]	@ (8005e4c <statemachine+0x160c>)
 8005cb2:	edd3 7a00 	vldr	s15, [r3]
 8005cb6:	eddf 6a64 	vldr	s13, [pc, #400]	@ 8005e48 <statemachine+0x1608>
 8005cba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005cbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cc2:	eddf 6a63 	vldr	s13, [pc, #396]	@ 8005e50 <statemachine+0x1610>
 8005cc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cca:	4b62      	ldr	r3, [pc, #392]	@ (8005e54 <statemachine+0x1614>)
 8005ccc:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8005cd0:	4b5e      	ldr	r3, [pc, #376]	@ (8005e4c <statemachine+0x160c>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fa fc0f 	bl	80004f8 <__aeabi_f2d>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	e9cd 2300 	strd	r2, r3, [sp]
 8005ce2:	4a5d      	ldr	r2, [pc, #372]	@ (8005e58 <statemachine+0x1618>)
 8005ce4:	210f      	movs	r1, #15
 8005ce6:	485d      	ldr	r0, [pc, #372]	@ (8005e5c <statemachine+0x161c>)
 8005ce8:	f015 fcdc 	bl	801b6a4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005cec:	4a5c      	ldr	r2, [pc, #368]	@ (8005e60 <statemachine+0x1620>)
 8005cee:	2301      	movs	r3, #1
 8005cf0:	ca06      	ldmia	r2, {r1, r2}
 8005cf2:	485a      	ldr	r0, [pc, #360]	@ (8005e5c <statemachine+0x161c>)
 8005cf4:	f7fe fa0a 	bl	800410c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 44);
 8005cf8:	212c      	movs	r1, #44	@ 0x2c
 8005cfa:	2020      	movs	r0, #32
 8005cfc:	f7fe fa2c 	bl	8004158 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8005d00:	4b54      	ldr	r3, [pc, #336]	@ (8005e54 <statemachine+0x1614>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fa fbf7 	bl	80004f8 <__aeabi_f2d>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	e9cd 2300 	strd	r2, r3, [sp]
 8005d12:	4a54      	ldr	r2, [pc, #336]	@ (8005e64 <statemachine+0x1624>)
 8005d14:	210f      	movs	r1, #15
 8005d16:	4851      	ldr	r0, [pc, #324]	@ (8005e5c <statemachine+0x161c>)
 8005d18:	f015 fcc4 	bl	801b6a4 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8005d1c:	4a50      	ldr	r2, [pc, #320]	@ (8005e60 <statemachine+0x1620>)
 8005d1e:	2301      	movs	r3, #1
 8005d20:	ca06      	ldmia	r2, {r1, r2}
 8005d22:	484e      	ldr	r0, [pc, #312]	@ (8005e5c <statemachine+0x161c>)
 8005d24:	f7fe f9f2 	bl	800410c <ssd1306_WriteString>


			  if(BTN_A>=1){
 8005d28:	4b4f      	ldr	r3, [pc, #316]	@ (8005e68 <statemachine+0x1628>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	dd0b      	ble.n	8005d48 <statemachine+0x1508>
			 	state++;
 8005d30:	4b4e      	ldr	r3, [pc, #312]	@ (8005e6c <statemachine+0x162c>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	4b4c      	ldr	r3, [pc, #304]	@ (8005e6c <statemachine+0x162c>)
 8005d3a:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8005d3c:	4b4a      	ldr	r3, [pc, #296]	@ (8005e68 <statemachine+0x1628>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8005d42:	4b3c      	ldr	r3, [pc, #240]	@ (8005e34 <statemachine+0x15f4>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8005d48:	4b49      	ldr	r3, [pc, #292]	@ (8005e70 <statemachine+0x1630>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f340 82fc 	ble.w	800634a <statemachine+0x1b0a>
			  				 									 									  			 	state--;
 8005d52:	4b46      	ldr	r3, [pc, #280]	@ (8005e6c <statemachine+0x162c>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	4b44      	ldr	r3, [pc, #272]	@ (8005e6c <statemachine+0x162c>)
 8005d5c:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8005d5e:	4b42      	ldr	r3, [pc, #264]	@ (8005e68 <statemachine+0x1628>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8005d64:	4b33      	ldr	r3, [pc, #204]	@ (8005e34 <statemachine+0x15f4>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8005d6a:	4b41      	ldr	r3, [pc, #260]	@ (8005e70 <statemachine+0x1630>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8005d70:	e2eb      	b.n	800634a <statemachine+0x1b0a>




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8005d72:	2000      	movs	r0, #0
 8005d74:	f7fe f8ae 	bl	8003ed4 <ssd1306_Fill>
				  ssd1306_SetCursor(32,12);
 8005d78:	210c      	movs	r1, #12
 8005d7a:	2020      	movs	r0, #32
 8005d7c:	f7fe f9ec 	bl	8004158 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8005d80:	4a3c      	ldr	r2, [pc, #240]	@ (8005e74 <statemachine+0x1634>)
 8005d82:	2301      	movs	r3, #1
 8005d84:	ca06      	ldmia	r2, {r1, r2}
 8005d86:	483c      	ldr	r0, [pc, #240]	@ (8005e78 <statemachine+0x1638>)
 8005d88:	f7fe f9c0 	bl	800410c <ssd1306_WriteString>
				  switch(usbstate){
 8005d8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e7c <statemachine+0x163c>)
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	f000 815a 	beq.w	800604a <statemachine+0x180a>
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	f300 82d9 	bgt.w	800634e <statemachine+0x1b0e>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <statemachine+0x1566>
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d071      	beq.n	8005e88 <statemachine+0x1648>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8005da4:	e2d3      	b.n	800634e <statemachine+0x1b0e>
				 					  ssd1306_SetCursor(32,20);
 8005da6:	2114      	movs	r1, #20
 8005da8:	2020      	movs	r0, #32
 8005daa:	f7fe f9d5 	bl	8004158 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8005dae:	4a31      	ldr	r2, [pc, #196]	@ (8005e74 <statemachine+0x1634>)
 8005db0:	2301      	movs	r3, #1
 8005db2:	ca06      	ldmia	r2, {r1, r2}
 8005db4:	4832      	ldr	r0, [pc, #200]	@ (8005e80 <statemachine+0x1640>)
 8005db6:	f7fe f9a9 	bl	800410c <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8005dba:	4b32      	ldr	r3, [pc, #200]	@ (8005e84 <statemachine+0x1644>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8005dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8005e34 <statemachine+0x15f4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	dd0b      	ble.n	8005de0 <statemachine+0x15a0>
				 						  usbstate++;
 8005dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8005e7c <statemachine+0x163c>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	3301      	adds	r3, #1
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8005e7c <statemachine+0x163c>)
 8005dd2:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8005dd4:	4b17      	ldr	r3, [pc, #92]	@ (8005e34 <statemachine+0x15f4>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8005dda:	4b23      	ldr	r3, [pc, #140]	@ (8005e68 <statemachine+0x1628>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005de0:	4b21      	ldr	r3, [pc, #132]	@ (8005e68 <statemachine+0x1628>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	dd0b      	ble.n	8005e00 <statemachine+0x15c0>
				 						 state++;
 8005de8:	4b20      	ldr	r3, [pc, #128]	@ (8005e6c <statemachine+0x162c>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	4b1e      	ldr	r3, [pc, #120]	@ (8005e6c <statemachine+0x162c>)
 8005df2:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005df4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e68 <statemachine+0x1628>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8005dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <statemachine+0x15f4>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005e00:	4b1b      	ldr	r3, [pc, #108]	@ (8005e70 <statemachine+0x1630>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f340 8234 	ble.w	8006272 <statemachine+0x1a32>
				 									 									 									  			 	state--;
 8005e0a:	4b18      	ldr	r3, [pc, #96]	@ (8005e6c <statemachine+0x162c>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	4b16      	ldr	r3, [pc, #88]	@ (8005e6c <statemachine+0x162c>)
 8005e14:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8005e16:	4b14      	ldr	r3, [pc, #80]	@ (8005e68 <statemachine+0x1628>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8005e1c:	4b05      	ldr	r3, [pc, #20]	@ (8005e34 <statemachine+0x15f4>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8005e22:	4b13      	ldr	r3, [pc, #76]	@ (8005e70 <statemachine+0x1630>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	601a      	str	r2, [r3, #0]
				 					  break;
 8005e28:	e223      	b.n	8006272 <statemachine+0x1a32>
 8005e2a:	bf00      	nop
 8005e2c:	20000b44 	.word	0x20000b44
 8005e30:	20000b48 	.word	0x20000b48
 8005e34:	20000864 	.word	0x20000864
 8005e38:	200005d7 	.word	0x200005d7
 8005e3c:	2000151c 	.word	0x2000151c
 8005e40:	20000b40 	.word	0x20000b40
 8005e44:	20000b9c 	.word	0x20000b9c
 8005e48:	476a6000 	.word	0x476a6000
 8005e4c:	20000b3c 	.word	0x20000b3c
 8005e50:	447a0000 	.word	0x447a0000
 8005e54:	20000b38 	.word	0x20000b38
 8005e58:	0801ff58 	.word	0x0801ff58
 8005e5c:	20000ac0 	.word	0x20000ac0
 8005e60:	2000001c 	.word	0x2000001c
 8005e64:	0801ff64 	.word	0x0801ff64
 8005e68:	20000860 	.word	0x20000860
 8005e6c:	200005d4 	.word	0x200005d4
 8005e70:	20000ba0 	.word	0x20000ba0
 8005e74:	20000014 	.word	0x20000014
 8005e78:	0801ff6c 	.word	0x0801ff6c
 8005e7c:	200005d8 	.word	0x200005d8
 8005e80:	0801ff70 	.word	0x0801ff70
 8005e84:	20000b58 	.word	0x20000b58
				 					 ssd1306_SetCursor(32,20);
 8005e88:	2114      	movs	r1, #20
 8005e8a:	2020      	movs	r0, #32
 8005e8c:	f7fe f964 	bl	8004158 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8005e90:	4ab6      	ldr	r2, [pc, #728]	@ (800616c <statemachine+0x192c>)
 8005e92:	2301      	movs	r3, #1
 8005e94:	ca06      	ldmia	r2, {r1, r2}
 8005e96:	48b6      	ldr	r0, [pc, #728]	@ (8006170 <statemachine+0x1930>)
 8005e98:	f7fe f938 	bl	800410c <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,28);
 8005e9c:	211c      	movs	r1, #28
 8005e9e:	2020      	movs	r0, #32
 8005ea0:	f7fe f95a 	bl	8004158 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8005ea4:	4ab1      	ldr	r2, [pc, #708]	@ (800616c <statemachine+0x192c>)
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	ca06      	ldmia	r2, {r1, r2}
 8005eaa:	48b2      	ldr	r0, [pc, #712]	@ (8006174 <statemachine+0x1934>)
 8005eac:	f7fe f92e 	bl	800410c <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8005eb0:	4bb1      	ldr	r3, [pc, #708]	@ (8006178 <statemachine+0x1938>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d137      	bne.n	8005f28 <statemachine+0x16e8>
					 					 ssd1306_Fill(Black);
 8005eb8:	2000      	movs	r0, #0
 8005eba:	f7fe f80b 	bl	8003ed4 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,12);
 8005ebe:	210c      	movs	r1, #12
 8005ec0:	2020      	movs	r0, #32
 8005ec2:	f7fe f949 	bl	8004158 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005ec6:	4aa9      	ldr	r2, [pc, #676]	@ (800616c <statemachine+0x192c>)
 8005ec8:	2301      	movs	r3, #1
 8005eca:	ca06      	ldmia	r2, {r1, r2}
 8005ecc:	48ab      	ldr	r0, [pc, #684]	@ (800617c <statemachine+0x193c>)
 8005ece:	f7fe f91d 	bl	800410c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,20);
 8005ed2:	2114      	movs	r1, #20
 8005ed4:	2020      	movs	r0, #32
 8005ed6:	f7fe f93f 	bl	8004158 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8005eda:	4aa9      	ldr	r2, [pc, #676]	@ (8006180 <statemachine+0x1940>)
 8005edc:	2301      	movs	r3, #1
 8005ede:	ca06      	ldmia	r2, {r1, r2}
 8005ee0:	48a8      	ldr	r0, [pc, #672]	@ (8006184 <statemachine+0x1944>)
 8005ee2:	f7fe f913 	bl	800410c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,30);
 8005ee6:	211e      	movs	r1, #30
 8005ee8:	2020      	movs	r0, #32
 8005eea:	f7fe f935 	bl	8004158 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 8005eee:	4ba6      	ldr	r3, [pc, #664]	@ (8006188 <statemachine+0x1948>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005efa:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 800618c <statemachine+0x194c>
 8005efe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f02:	ee16 0a90 	vmov	r0, s13
 8005f06:	f7fa faf7 	bl	80004f8 <__aeabi_f2d>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	e9cd 2300 	strd	r2, r3, [sp]
 8005f12:	4a9f      	ldr	r2, [pc, #636]	@ (8006190 <statemachine+0x1950>)
 8005f14:	2132      	movs	r1, #50	@ 0x32
 8005f16:	489f      	ldr	r0, [pc, #636]	@ (8006194 <statemachine+0x1954>)
 8005f18:	f015 fbc4 	bl	801b6a4 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005f1c:	4a93      	ldr	r2, [pc, #588]	@ (800616c <statemachine+0x192c>)
 8005f1e:	2301      	movs	r3, #1
 8005f20:	ca06      	ldmia	r2, {r1, r2}
 8005f22:	489c      	ldr	r0, [pc, #624]	@ (8006194 <statemachine+0x1954>)
 8005f24:	f7fe f8f2 	bl	800410c <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8005f28:	4b9b      	ldr	r3, [pc, #620]	@ (8006198 <statemachine+0x1958>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	dd7a      	ble.n	8006026 <statemachine+0x17e6>
				 						erasetime=HAL_GetTick();
 8005f30:	f001 fa32 	bl	8007398 <HAL_GetTick>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	4b93      	ldr	r3, [pc, #588]	@ (8006188 <statemachine+0x1948>)
 8005f3a:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e03f      	b.n	8005fc2 <statemachine+0x1782>
				 							ssd1306_Fill(Black);
 8005f42:	2000      	movs	r0, #0
 8005f44:	f7fd ffc6 	bl	8003ed4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005f48:	2120      	movs	r1, #32
 8005f4a:	2020      	movs	r0, #32
 8005f4c:	f7fe f904 	bl	8004158 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 8005f50:	4a86      	ldr	r2, [pc, #536]	@ (800616c <statemachine+0x192c>)
 8005f52:	2301      	movs	r3, #1
 8005f54:	ca06      	ldmia	r2, {r1, r2}
 8005f56:	4889      	ldr	r0, [pc, #548]	@ (800617c <statemachine+0x193c>)
 8005f58:	f7fe f8d8 	bl	800410c <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4619      	mov	r1, r3
 8005f60:	488e      	ldr	r0, [pc, #568]	@ (800619c <statemachine+0x195c>)
 8005f62:	f011 fcea 	bl	801793a <SPIF_EraseSector>
				 							if(i>=1){
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	dd21      	ble.n	8005fb0 <statemachine+0x1770>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2264      	movs	r2, #100	@ 0x64
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	ee07 3a90 	vmov	s15, r3
 8005f78:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8005f7c:	4b88      	ldr	r3, [pc, #544]	@ (80061a0 <statemachine+0x1960>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da00      	bge.n	8005f86 <statemachine+0x1746>
 8005f84:	330f      	adds	r3, #15
 8005f86:	111b      	asrs	r3, r3, #4
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa faa3 	bl	80004d4 <__aeabi_i2d>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	460b      	mov	r3, r1
 8005f92:	4610      	mov	r0, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	f7fa fdb7 	bl	8000b08 <__aeabi_d2iz>
 8005f9a:	ee07 0a90 	vmov	s15, r0
 8005f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fa2:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005fa6:	eeb0 0a47 	vmov.f32	s0, s14
 8005faa:	f7fe fbe9 	bl	8004780 <percentage>
 8005fae:	e003      	b.n	8005fb8 <statemachine+0x1778>
				 								percentage((float) 0);
 8005fb0:	ed9f 0a7c 	vldr	s0, [pc, #496]	@ 80061a4 <statemachine+0x1964>
 8005fb4:	f7fe fbe4 	bl	8004780 <percentage>
				 							ssd1306_UpdateScreen();
 8005fb8:	f7fd ffa4 	bl	8003f04 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60fb      	str	r3, [r7, #12]
 8005fc2:	4b77      	ldr	r3, [pc, #476]	@ (80061a0 <statemachine+0x1960>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	da00      	bge.n	8005fcc <statemachine+0x178c>
 8005fca:	330f      	adds	r3, #15
 8005fcc:	111b      	asrs	r3, r3, #4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fa fa80 	bl	80004d4 <__aeabi_i2d>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4619      	mov	r1, r3
 8005fdc:	f7fa fd94 	bl	8000b08 <__aeabi_d2iz>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	ddac      	ble.n	8005f42 <statemachine+0x1702>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005fe8:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8005fec:	486b      	ldr	r0, [pc, #428]	@ (800619c <statemachine+0x195c>)
 8005fee:	f011 fca4 	bl	801793a <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 8005ff2:	f001 f9d1 	bl	8007398 <HAL_GetTick>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	4a63      	ldr	r2, [pc, #396]	@ (8006188 <statemachine+0x1948>)
 8005ffa:	6812      	ldr	r2, [r2, #0]
 8005ffc:	1a9b      	subs	r3, r3, r2
 8005ffe:	461a      	mov	r2, r3
 8006000:	4b61      	ldr	r3, [pc, #388]	@ (8006188 <statemachine+0x1948>)
 8006002:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8006004:	4b5c      	ldr	r3, [pc, #368]	@ (8006178 <statemachine+0x1938>)
 8006006:	2201      	movs	r2, #1
 8006008:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 800600a:	4b67      	ldr	r3, [pc, #412]	@ (80061a8 <statemachine+0x1968>)
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 8006010:	4b63      	ldr	r3, [pc, #396]	@ (80061a0 <statemachine+0x1960>)
 8006012:	2200      	movs	r2, #0
 8006014:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8006016:	f7fd fd81 	bl	8003b1c <storeindex>
				 						BTN_A=0;
 800601a:	4b5f      	ldr	r3, [pc, #380]	@ (8006198 <statemachine+0x1958>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 8006020:	4b62      	ldr	r3, [pc, #392]	@ (80061ac <statemachine+0x196c>)
 8006022:	2200      	movs	r2, #0
 8006024:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8006026:	4b61      	ldr	r3, [pc, #388]	@ (80061ac <statemachine+0x196c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f340 8123 	ble.w	8006276 <statemachine+0x1a36>
					 						usbstate++;
 8006030:	4b5f      	ldr	r3, [pc, #380]	@ (80061b0 <statemachine+0x1970>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	b2da      	uxtb	r2, r3
 8006038:	4b5d      	ldr	r3, [pc, #372]	@ (80061b0 <statemachine+0x1970>)
 800603a:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 800603c:	4b5b      	ldr	r3, [pc, #364]	@ (80061ac <statemachine+0x196c>)
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 8006042:	4b55      	ldr	r3, [pc, #340]	@ (8006198 <statemachine+0x1958>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
				 			  break;
 8006048:	e115      	b.n	8006276 <statemachine+0x1a36>
				 					ssd1306_Fill(Black);
 800604a:	2000      	movs	r0, #0
 800604c:	f7fd ff42 	bl	8003ed4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,20);
 8006050:	2114      	movs	r1, #20
 8006052:	2020      	movs	r0, #32
 8006054:	f7fe f880 	bl	8004158 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8006058:	4a44      	ldr	r2, [pc, #272]	@ (800616c <statemachine+0x192c>)
 800605a:	2301      	movs	r3, #1
 800605c:	ca06      	ldmia	r2, {r1, r2}
 800605e:	4855      	ldr	r0, [pc, #340]	@ (80061b4 <statemachine+0x1974>)
 8006060:	f7fe f854 	bl	800410c <ssd1306_WriteString>
				 					if(pagenumber>0){
 8006064:	4b4e      	ldr	r3, [pc, #312]	@ (80061a0 <statemachine+0x1960>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	f340 80b1 	ble.w	80061d0 <statemachine+0x1990>
				 					int i=0;
 800606e:	2300      	movs	r3, #0
 8006070:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 8006072:	4b51      	ldr	r3, [pc, #324]	@ (80061b8 <statemachine+0x1978>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d165      	bne.n	8006146 <statemachine+0x1906>
				 						while(i<pagenumber){
 800607a:	e036      	b.n	80060ea <statemachine+0x18aa>
				 							ssd1306_Fill(Black);
 800607c:	2000      	movs	r0, #0
 800607e:	f7fd ff29 	bl	8003ed4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,12);
 8006082:	210c      	movs	r1, #12
 8006084:	2020      	movs	r0, #32
 8006086:	f7fe f867 	bl	8004158 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 800608a:	4a38      	ldr	r2, [pc, #224]	@ (800616c <statemachine+0x192c>)
 800608c:	2301      	movs	r3, #1
 800608e:	ca06      	ldmia	r2, {r1, r2}
 8006090:	4848      	ldr	r0, [pc, #288]	@ (80061b4 <statemachine+0x1974>)
 8006092:	f7fe f83b 	bl	800410c <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8006096:	68b9      	ldr	r1, [r7, #8]
 8006098:	2300      	movs	r3, #0
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060a0:	4a46      	ldr	r2, [pc, #280]	@ (80061bc <statemachine+0x197c>)
 80060a2:	483e      	ldr	r0, [pc, #248]	@ (800619c <statemachine+0x195c>)
 80060a4:	f011 fcea 	bl	8017a7c <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 80060a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80060ac:	4843      	ldr	r0, [pc, #268]	@ (80061bc <statemachine+0x197c>)
 80060ae:	f012 fd3f 	bl	8018b30 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2264      	movs	r2, #100	@ 0x64
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	ee07 3a90 	vmov	s15, r3
 80060be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060c2:	4b37      	ldr	r3, [pc, #220]	@ (80061a0 <statemachine+0x1960>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80060d2:	eeb0 0a66 	vmov.f32	s0, s13
 80060d6:	f7fe fb53 	bl	8004780 <percentage>
				 							ssd1306_UpdateScreen();
 80060da:	f7fd ff13 	bl	8003f04 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 80060de:	207d      	movs	r0, #125	@ 0x7d
 80060e0:	f7fb fb25 	bl	800172e <HAL_Delay>
				 							i++;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 80060ea:	4b2d      	ldr	r3, [pc, #180]	@ (80061a0 <statemachine+0x1960>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	dbc3      	blt.n	800607c <statemachine+0x183c>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 80060f4:	4b2a      	ldr	r3, [pc, #168]	@ (80061a0 <statemachine+0x1960>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4619      	mov	r1, r3
 80060fa:	4b2b      	ldr	r3, [pc, #172]	@ (80061a8 <statemachine+0x1968>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	2300      	movs	r3, #0
 8006102:	9300      	str	r3, [sp, #0]
 8006104:	4613      	mov	r3, r2
 8006106:	4a2d      	ldr	r2, [pc, #180]	@ (80061bc <statemachine+0x197c>)
 8006108:	4824      	ldr	r0, [pc, #144]	@ (800619c <statemachine+0x195c>)
 800610a:	f011 fcb7 	bl	8017a7c <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 800610e:	4b26      	ldr	r3, [pc, #152]	@ (80061a8 <statemachine+0x1968>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	4619      	mov	r1, r3
 8006116:	4829      	ldr	r0, [pc, #164]	@ (80061bc <statemachine+0x197c>)
 8006118:	f012 fd0a 	bl	8018b30 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 800611c:	207d      	movs	r0, #125	@ 0x7d
 800611e:	f7fb fb06 	bl	800172e <HAL_Delay>
				 						int taillefin=0;
 8006122:	2300      	movs	r3, #0
 8006124:	607b      	str	r3, [r7, #4]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 8006126:	4a26      	ldr	r2, [pc, #152]	@ (80061c0 <statemachine+0x1980>)
 8006128:	2140      	movs	r1, #64	@ 0x40
 800612a:	4826      	ldr	r0, [pc, #152]	@ (80061c4 <statemachine+0x1984>)
 800612c:	f015 faba 	bl	801b6a4 <sniprintf>
 8006130:	6078      	str	r0, [r7, #4]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	b29b      	uxth	r3, r3
 8006136:	4619      	mov	r1, r3
 8006138:	4822      	ldr	r0, [pc, #136]	@ (80061c4 <statemachine+0x1984>)
 800613a:	f012 fcf9 	bl	8018b30 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 800613e:	4b1e      	ldr	r3, [pc, #120]	@ (80061b8 <statemachine+0x1978>)
 8006140:	2201      	movs	r2, #1
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e003      	b.n	800614e <statemachine+0x190e>
				 						usbpercent=1;
 8006146:	4b20      	ldr	r3, [pc, #128]	@ (80061c8 <statemachine+0x1988>)
 8006148:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800614c:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 800614e:	2000      	movs	r0, #0
 8006150:	f7fd fec0 	bl	8003ed4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,35);
 8006154:	2123      	movs	r1, #35	@ 0x23
 8006156:	2020      	movs	r0, #32
 8006158:	f7fd fffe 	bl	8004158 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 800615c:	4a08      	ldr	r2, [pc, #32]	@ (8006180 <statemachine+0x1940>)
 800615e:	2301      	movs	r3, #1
 8006160:	ca06      	ldmia	r2, {r1, r2}
 8006162:	481a      	ldr	r0, [pc, #104]	@ (80061cc <statemachine+0x198c>)
 8006164:	f7fd ffd2 	bl	800410c <ssd1306_WriteString>
 8006168:	e049      	b.n	80061fe <statemachine+0x19be>
 800616a:	bf00      	nop
 800616c:	20000014 	.word	0x20000014
 8006170:	0801ff7c 	.word	0x0801ff7c
 8006174:	0801ff84 	.word	0x0801ff84
 8006178:	20000b54 	.word	0x20000b54
 800617c:	0801ff6c 	.word	0x0801ff6c
 8006180:	2000001c 	.word	0x2000001c
 8006184:	0801ff90 	.word	0x0801ff90
 8006188:	20000b50 	.word	0x20000b50
 800618c:	447a0000 	.word	0x447a0000
 8006190:	0801ff94 	.word	0x0801ff94
 8006194:	20000ac0 	.word	0x20000ac0
 8006198:	20000860 	.word	0x20000860
 800619c:	20000868 	.word	0x20000868
 80061a0:	20000aa0 	.word	0x20000aa0
 80061a4:	00000000 	.word	0x00000000
 80061a8:	20000a9c 	.word	0x20000a9c
 80061ac:	20000864 	.word	0x20000864
 80061b0:	200005d8 	.word	0x200005d8
 80061b4:	0801ff9c 	.word	0x0801ff9c
 80061b8:	20000b58 	.word	0x20000b58
 80061bc:	2000099c 	.word	0x2000099c
 80061c0:	0801ffa4 	.word	0x0801ffa4
 80061c4:	20000af4 	.word	0x20000af4
 80061c8:	20000b5c 	.word	0x20000b5c
 80061cc:	0801ffb4 	.word	0x0801ffb4
				 							ssd1306_Fill(Black);
 80061d0:	2000      	movs	r0, #0
 80061d2:	f7fd fe7f 	bl	8003ed4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,20);
 80061d6:	2114      	movs	r1, #20
 80061d8:	2020      	movs	r0, #32
 80061da:	f7fd ffbd 	bl	8004158 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 80061de:	4a61      	ldr	r2, [pc, #388]	@ (8006364 <statemachine+0x1b24>)
 80061e0:	2301      	movs	r3, #1
 80061e2:	ca06      	ldmia	r2, {r1, r2}
 80061e4:	4860      	ldr	r0, [pc, #384]	@ (8006368 <statemachine+0x1b28>)
 80061e6:	f7fd ff91 	bl	800410c <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,28);
 80061ea:	211c      	movs	r1, #28
 80061ec:	2020      	movs	r0, #32
 80061ee:	f7fd ffb3 	bl	8004158 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_6x8,White);
 80061f2:	4a5c      	ldr	r2, [pc, #368]	@ (8006364 <statemachine+0x1b24>)
 80061f4:	2301      	movs	r3, #1
 80061f6:	ca06      	ldmia	r2, {r1, r2}
 80061f8:	485c      	ldr	r0, [pc, #368]	@ (800636c <statemachine+0x1b2c>)
 80061fa:	f7fd ff87 	bl	800410c <ssd1306_WriteString>
				 					if(BTN_B>=1){
 80061fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006370 <statemachine+0x1b30>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	dd11      	ble.n	800622a <statemachine+0x19ea>
				 									 						usbstate--;
 8006206:	4b5b      	ldr	r3, [pc, #364]	@ (8006374 <statemachine+0x1b34>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	3b01      	subs	r3, #1
 800620c:	b2da      	uxtb	r2, r3
 800620e:	4b59      	ldr	r3, [pc, #356]	@ (8006374 <statemachine+0x1b34>)
 8006210:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8006212:	4b58      	ldr	r3, [pc, #352]	@ (8006374 <statemachine+0x1b34>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	3b01      	subs	r3, #1
 8006218:	b2da      	uxtb	r2, r3
 800621a:	4b56      	ldr	r3, [pc, #344]	@ (8006374 <statemachine+0x1b34>)
 800621c:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 800621e:	4b54      	ldr	r3, [pc, #336]	@ (8006370 <statemachine+0x1b30>)
 8006220:	2200      	movs	r2, #0
 8006222:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 8006224:	4b54      	ldr	r3, [pc, #336]	@ (8006378 <statemachine+0x1b38>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 800622a:	4b53      	ldr	r3, [pc, #332]	@ (8006378 <statemachine+0x1b38>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	dd0b      	ble.n	800624a <statemachine+0x1a0a>
				 									  			 	state++;
 8006232:	4b52      	ldr	r3, [pc, #328]	@ (800637c <statemachine+0x1b3c>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	b2da      	uxtb	r2, r3
 800623a:	4b50      	ldr	r3, [pc, #320]	@ (800637c <statemachine+0x1b3c>)
 800623c:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 800623e:	4b4e      	ldr	r3, [pc, #312]	@ (8006378 <statemachine+0x1b38>)
 8006240:	2200      	movs	r2, #0
 8006242:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8006244:	4b4a      	ldr	r3, [pc, #296]	@ (8006370 <statemachine+0x1b30>)
 8006246:	2200      	movs	r2, #0
 8006248:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 800624a:	4b4d      	ldr	r3, [pc, #308]	@ (8006380 <statemachine+0x1b40>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	dd13      	ble.n	800627a <statemachine+0x1a3a>
				 									 									  			 	state--;
 8006252:	4b4a      	ldr	r3, [pc, #296]	@ (800637c <statemachine+0x1b3c>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	3b01      	subs	r3, #1
 8006258:	b2da      	uxtb	r2, r3
 800625a:	4b48      	ldr	r3, [pc, #288]	@ (800637c <statemachine+0x1b3c>)
 800625c:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 800625e:	4b46      	ldr	r3, [pc, #280]	@ (8006378 <statemachine+0x1b38>)
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 8006264:	4b42      	ldr	r3, [pc, #264]	@ (8006370 <statemachine+0x1b30>)
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 800626a:	4b45      	ldr	r3, [pc, #276]	@ (8006380 <statemachine+0x1b40>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
				 					 break;
 8006270:	e003      	b.n	800627a <statemachine+0x1a3a>
				 					  break;
 8006272:	bf00      	nop
 8006274:	e06b      	b.n	800634e <statemachine+0x1b0e>
				 			  break;
 8006276:	bf00      	nop
 8006278:	e069      	b.n	800634e <statemachine+0x1b0e>
				 					 break;
 800627a:	bf00      	nop
				  break;
 800627c:	e067      	b.n	800634e <statemachine+0x1b0e>

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 800627e:	2000      	movs	r0, #0
 8006280:	f7fd fe28 	bl	8003ed4 <ssd1306_Fill>
					  ssd1306_SetCursor(32,12);
 8006284:	210c      	movs	r1, #12
 8006286:	2020      	movs	r0, #32
 8006288:	f7fd ff66 	bl	8004158 <ssd1306_SetCursor>
					  ssd1306_WriteString("bluetooth",Font_6x8,White);
 800628c:	4a35      	ldr	r2, [pc, #212]	@ (8006364 <statemachine+0x1b24>)
 800628e:	2301      	movs	r3, #1
 8006290:	ca06      	ldmia	r2, {r1, r2}
 8006292:	483c      	ldr	r0, [pc, #240]	@ (8006384 <statemachine+0x1b44>)
 8006294:	f7fd ff3a 	bl	800410c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,20);
 8006298:	2114      	movs	r1, #20
 800629a:	2020      	movs	r0, #32
 800629c:	f7fd ff5c 	bl	8004158 <ssd1306_SetCursor>

					  ssd1306_WriteString((char *) blereceivebuf, Font_7x10, White);
 80062a0:	4a39      	ldr	r2, [pc, #228]	@ (8006388 <statemachine+0x1b48>)
 80062a2:	2301      	movs	r3, #1
 80062a4:	ca06      	ldmia	r2, {r1, r2}
 80062a6:	4839      	ldr	r0, [pc, #228]	@ (800638c <statemachine+0x1b4c>)
 80062a8:	f7fd ff30 	bl	800410c <ssd1306_WriteString>



					  if(BTN_B>=1){
 80062ac:	4b30      	ldr	r3, [pc, #192]	@ (8006370 <statemachine+0x1b30>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dd08      	ble.n	80062c6 <statemachine+0x1a86>


						  bluetoothsend=1;
 80062b4:	4b36      	ldr	r3, [pc, #216]	@ (8006390 <statemachine+0x1b50>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	601a      	str	r2, [r3, #0]
						  BTN_B=0;
 80062ba:	4b2d      	ldr	r3, [pc, #180]	@ (8006370 <statemachine+0x1b30>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
						  BTN_B_LONG=0;
 80062c0:	4b34      	ldr	r3, [pc, #208]	@ (8006394 <statemachine+0x1b54>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
					  }


				  if(BTN_A>=1){
 80062c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006378 <statemachine+0x1b38>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dd23      	ble.n	8006316 <statemachine+0x1ad6>
						state--;
 80062ce:	4b2b      	ldr	r3, [pc, #172]	@ (800637c <statemachine+0x1b3c>)
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	4b29      	ldr	r3, [pc, #164]	@ (800637c <statemachine+0x1b3c>)
 80062d8:	701a      	strb	r2, [r3, #0]
						state--;
 80062da:	4b28      	ldr	r3, [pc, #160]	@ (800637c <statemachine+0x1b3c>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	3b01      	subs	r3, #1
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	4b26      	ldr	r3, [pc, #152]	@ (800637c <statemachine+0x1b3c>)
 80062e4:	701a      	strb	r2, [r3, #0]
						state--;
 80062e6:	4b25      	ldr	r3, [pc, #148]	@ (800637c <statemachine+0x1b3c>)
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	4b23      	ldr	r3, [pc, #140]	@ (800637c <statemachine+0x1b3c>)
 80062f0:	701a      	strb	r2, [r3, #0]
						state--;
 80062f2:	4b22      	ldr	r3, [pc, #136]	@ (800637c <statemachine+0x1b3c>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	4b20      	ldr	r3, [pc, #128]	@ (800637c <statemachine+0x1b3c>)
 80062fc:	701a      	strb	r2, [r3, #0]
						state--;
 80062fe:	4b1f      	ldr	r3, [pc, #124]	@ (800637c <statemachine+0x1b3c>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	3b01      	subs	r3, #1
 8006304:	b2da      	uxtb	r2, r3
 8006306:	4b1d      	ldr	r3, [pc, #116]	@ (800637c <statemachine+0x1b3c>)
 8006308:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 800630a:	4b1b      	ldr	r3, [pc, #108]	@ (8006378 <statemachine+0x1b38>)
 800630c:	2200      	movs	r2, #0
 800630e:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 8006310:	4b17      	ldr	r3, [pc, #92]	@ (8006370 <statemachine+0x1b30>)
 8006312:	2200      	movs	r2, #0
 8006314:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 8006316:	4b1a      	ldr	r3, [pc, #104]	@ (8006380 <statemachine+0x1b40>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	dd19      	ble.n	8006352 <statemachine+0x1b12>
							state--;
 800631e:	4b17      	ldr	r3, [pc, #92]	@ (800637c <statemachine+0x1b3c>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	3b01      	subs	r3, #1
 8006324:	b2da      	uxtb	r2, r3
 8006326:	4b15      	ldr	r3, [pc, #84]	@ (800637c <statemachine+0x1b3c>)
 8006328:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 800632a:	4b13      	ldr	r3, [pc, #76]	@ (8006378 <statemachine+0x1b38>)
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8006330:	4b0f      	ldr	r3, [pc, #60]	@ (8006370 <statemachine+0x1b30>)
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 8006336:	4b12      	ldr	r3, [pc, #72]	@ (8006380 <statemachine+0x1b40>)
 8006338:	2200      	movs	r2, #0
 800633a:	601a      	str	r2, [r3, #0]
							}



					  break;
 800633c:	e009      	b.n	8006352 <statemachine+0x1b12>
				  									 	 break;
 800633e:	bf00      	nop
 8006340:	e008      	b.n	8006354 <statemachine+0x1b14>
					  break;
 8006342:	bf00      	nop
 8006344:	e006      	b.n	8006354 <statemachine+0x1b14>
			  break;
 8006346:	bf00      	nop
 8006348:	e004      	b.n	8006354 <statemachine+0x1b14>
			  break;
 800634a:	bf00      	nop
 800634c:	e002      	b.n	8006354 <statemachine+0x1b14>
				  break;
 800634e:	bf00      	nop
 8006350:	e000      	b.n	8006354 <statemachine+0x1b14>
					  break;
 8006352:	bf00      	nop




	}
return ;
 8006354:	bf00      	nop
 8006356:	bf00      	nop
}
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	ecbd 8b02 	vpop	{d8}
 8006360:	bdb0      	pop	{r4, r5, r7, pc}
 8006362:	bf00      	nop
 8006364:	20000014 	.word	0x20000014
 8006368:	0801ff9c 	.word	0x0801ff9c
 800636c:	0801ffbc 	.word	0x0801ffbc
 8006370:	20000864 	.word	0x20000864
 8006374:	200005d8 	.word	0x200005d8
 8006378:	20000860 	.word	0x20000860
 800637c:	200005d4 	.word	0x200005d4
 8006380:	20000ba0 	.word	0x20000ba0
 8006384:	0801ffc4 	.word	0x0801ffc4
 8006388:	2000001c 	.word	0x2000001c
 800638c:	20000ba8 	.word	0x20000ba8
 8006390:	20000ba4 	.word	0x20000ba4
 8006394:	20000b9c 	.word	0x20000b9c

08006398 <LL_AHB3_GRP1_EnableClock>:
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80063a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80063b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4013      	ands	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80063bc:	68fb      	ldr	r3, [r7, #12]
}
 80063be:	bf00      	nop
 80063c0:	3714      	adds	r7, #20
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80063ce:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80063d2:	f7ff ffe1 	bl	8006398 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80063d6:	2200      	movs	r2, #0
 80063d8:	2100      	movs	r1, #0
 80063da:	202e      	movs	r0, #46	@ 0x2e
 80063dc:	f002 f9bb 	bl	8008756 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80063e0:	202e      	movs	r0, #46	@ 0x2e
 80063e2:	f002 f9d2 	bl	800878a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063e6:	bf00      	nop
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 80063f0:	2114      	movs	r1, #20
 80063f2:	2020      	movs	r0, #32
 80063f4:	f7fd feb0 	bl	8004158 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 80063f8:	4a04      	ldr	r2, [pc, #16]	@ (800640c <NMI_Handler+0x20>)
 80063fa:	2301      	movs	r3, #1
 80063fc:	ca06      	ldmia	r2, {r1, r2}
 80063fe:	4804      	ldr	r0, [pc, #16]	@ (8006410 <NMI_Handler+0x24>)
 8006400:	f7fd fe84 	bl	800410c <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 8006404:	f7fd fd7e 	bl	8003f04 <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 8006408:	bf00      	nop
 800640a:	e7f1      	b.n	80063f0 <NMI_Handler+0x4>
 800640c:	2000001c 	.word	0x2000001c
 8006410:	0801ffd0 	.word	0x0801ffd0

08006414 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006418:	2114      	movs	r1, #20
 800641a:	2020      	movs	r0, #32
 800641c:	f7fd fe9c 	bl	8004158 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8006420:	4a04      	ldr	r2, [pc, #16]	@ (8006434 <HardFault_Handler+0x20>)
 8006422:	2301      	movs	r3, #1
 8006424:	ca06      	ldmia	r2, {r1, r2}
 8006426:	4804      	ldr	r0, [pc, #16]	@ (8006438 <HardFault_Handler+0x24>)
 8006428:	f7fd fe70 	bl	800410c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800642c:	f7fd fd6a 	bl	8003f04 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006430:	bf00      	nop
 8006432:	e7f1      	b.n	8006418 <HardFault_Handler+0x4>
 8006434:	2000001c 	.word	0x2000001c
 8006438:	0801ffd4 	.word	0x0801ffd4

0800643c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006440:	2114      	movs	r1, #20
 8006442:	2020      	movs	r0, #32
 8006444:	f7fd fe88 	bl	8004158 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 8006448:	4a04      	ldr	r2, [pc, #16]	@ (800645c <MemManage_Handler+0x20>)
 800644a:	2301      	movs	r3, #1
 800644c:	ca06      	ldmia	r2, {r1, r2}
 800644e:	4804      	ldr	r0, [pc, #16]	@ (8006460 <MemManage_Handler+0x24>)
 8006450:	f7fd fe5c 	bl	800410c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8006454:	f7fd fd56 	bl	8003f04 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006458:	bf00      	nop
 800645a:	e7f1      	b.n	8006440 <MemManage_Handler+0x4>
 800645c:	2000001c 	.word	0x2000001c
 8006460:	0801ffe0 	.word	0x0801ffe0

08006464 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006468:	2114      	movs	r1, #20
 800646a:	2020      	movs	r0, #32
 800646c:	f7fd fe74 	bl	8004158 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8006470:	4a04      	ldr	r2, [pc, #16]	@ (8006484 <BusFault_Handler+0x20>)
 8006472:	2301      	movs	r3, #1
 8006474:	ca06      	ldmia	r2, {r1, r2}
 8006476:	4804      	ldr	r0, [pc, #16]	@ (8006488 <BusFault_Handler+0x24>)
 8006478:	f7fd fe48 	bl	800410c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 800647c:	f7fd fd42 	bl	8003f04 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8006480:	bf00      	nop
 8006482:	e7f1      	b.n	8006468 <BusFault_Handler+0x4>
 8006484:	2000001c 	.word	0x2000001c
 8006488:	0801ffe4 	.word	0x0801ffe4

0800648c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8006490:	2114      	movs	r1, #20
 8006492:	2020      	movs	r0, #32
 8006494:	f7fd fe60 	bl	8004158 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 8006498:	4a04      	ldr	r2, [pc, #16]	@ (80064ac <UsageFault_Handler+0x20>)
 800649a:	2301      	movs	r3, #1
 800649c:	ca06      	ldmia	r2, {r1, r2}
 800649e:	4804      	ldr	r0, [pc, #16]	@ (80064b0 <UsageFault_Handler+0x24>)
 80064a0:	f7fd fe34 	bl	800410c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80064a4:	f7fd fd2e 	bl	8003f04 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80064a8:	bf00      	nop
 80064aa:	e7f1      	b.n	8006490 <UsageFault_Handler+0x4>
 80064ac:	2000001c 	.word	0x2000001c
 80064b0:	0801ffe8 	.word	0x0801ffe8

080064b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80064b8:	bf00      	nop
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80064c2:	b480      	push	{r7}
 80064c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064c6:	bf00      	nop
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064e2:	f000 ff45 	bl	8007370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064e6:	bf00      	nop
 80064e8:	bd80      	pop	{r7, pc}

080064ea <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80064ee:	f7fb fd7f 	bl	8001ff0 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80064f2:	bf00      	nop
 80064f4:	bd80      	pop	{r7, pc}
	...

080064f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80064fc:	4802      	ldr	r0, [pc, #8]	@ (8006508 <DMA1_Channel1_IRQHandler+0x10>)
 80064fe:	f002 fc00 	bl	8008d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	200003f0 	.word	0x200003f0

0800650c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006510:	4802      	ldr	r0, [pc, #8]	@ (800651c <DMA1_Channel2_IRQHandler+0x10>)
 8006512:	f002 fbf6 	bl	8008d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200014bc 	.word	0x200014bc

08006520 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8006524:	4802      	ldr	r0, [pc, #8]	@ (8006530 <DMA1_Channel3_IRQHandler+0x10>)
 8006526:	f002 fbec 	bl	8008d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800652a:	bf00      	nop
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000de4 	.word	0x20000de4

08006534 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8006538:	4802      	ldr	r0, [pc, #8]	@ (8006544 <DMA1_Channel4_IRQHandler+0x10>)
 800653a:	f002 fbe2 	bl	8008d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800653e:	bf00      	nop
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000e44 	.word	0x20000e44

08006548 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800654c:	4802      	ldr	r0, [pc, #8]	@ (8006558 <USB_LP_IRQHandler+0x10>)
 800654e:	f003 fe75 	bl	800a23c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8006552:	bf00      	nop
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20002d10 	.word	0x20002d10

0800655c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006560:	4805      	ldr	r0, [pc, #20]	@ (8006578 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8006562:	f008 fd8c 	bl	800f07e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 8006566:	f000 fa79 	bl	8006a5c <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800656a:	2101      	movs	r1, #1
 800656c:	4803      	ldr	r0, [pc, #12]	@ (800657c <TIM1_UP_TIM16_IRQHandler+0x20>)
 800656e:	f002 ffa3 	bl	80094b8 <HAL_GPIO_TogglePin>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006572:	bf00      	nop
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	200012fc 	.word	0x200012fc
 800657c:	48000400 	.word	0x48000400

08006580 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8006584:	4808      	ldr	r0, [pc, #32]	@ (80065a8 <TIM1_TRG_COM_TIM17_IRQHandler+0x28>)
 8006586:	f008 fd7a 	bl	800f07e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 800658a:	2102      	movs	r1, #2
 800658c:	4807      	ldr	r0, [pc, #28]	@ (80065ac <TIM1_TRG_COM_TIM17_IRQHandler+0x2c>)
 800658e:	f002 ff93 	bl	80094b8 <HAL_GPIO_TogglePin>
  cptdoubledonnee+=1;
 8006592:	4b07      	ldr	r3, [pc, #28]	@ (80065b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3301      	adds	r3, #1
 8006598:	4a05      	ldr	r2, [pc, #20]	@ (80065b0 <TIM1_TRG_COM_TIM17_IRQHandler+0x30>)
 800659a:	6013      	str	r3, [r2, #0]
  enablewrite=1;
 800659c:	4b05      	ldr	r3, [pc, #20]	@ (80065b4 <TIM1_TRG_COM_TIM17_IRQHandler+0x34>)
 800659e:	2201      	movs	r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80065a2:	bf00      	nop
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	20001348 	.word	0x20001348
 80065ac:	48000400 	.word	0x48000400
 80065b0:	20000b60 	.word	0x20000b60
 80065b4:	20000b80 	.word	0x20000b80

080065b8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80065bc:	4802      	ldr	r0, [pc, #8]	@ (80065c8 <SPI1_IRQHandler+0x10>)
 80065be:	f007 fff1 	bl	800e5a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80065c2:	bf00      	nop
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000d80 	.word	0x20000d80

080065cc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80065d0:	4802      	ldr	r0, [pc, #8]	@ (80065dc <LPUART1_IRQHandler+0x10>)
 80065d2:	f009 faeb 	bl	800fbac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80065d6:	bf00      	nop
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20001394 	.word	0x20001394

080065e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80065e4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80065e8:	f002 ff80 	bl	80094ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80065ec:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80065f0:	f002 ff7c 	bl	80094ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80065f4:	bf00      	nop
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80065fc:	f012 f886 	bl	801870c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8006600:	bf00      	nop
 8006602:	bd80      	pop	{r7, pc}

08006604 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8006608:	f012 f8b6 	bl	8018778 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800660c:	bf00      	nop
 800660e:	bd80      	pop	{r7, pc}

08006610 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8006614:	f002 ff82 	bl	800951c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8006618:	bf00      	nop
 800661a:	bd80      	pop	{r7, pc}

0800661c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800661c:	b480      	push	{r7}
 800661e:	af00      	add	r7, sp, #0
  return 1;
 8006620:	2301      	movs	r3, #1
}
 8006622:	4618      	mov	r0, r3
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <_kill>:

int _kill(int pid, int sig)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006636:	f015 f9b3 	bl	801b9a0 <__errno>
 800663a:	4603      	mov	r3, r0
 800663c:	2216      	movs	r2, #22
 800663e:	601a      	str	r2, [r3, #0]
  return -1;
 8006640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <_exit>:

void _exit (int status)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006654:	f04f 31ff 	mov.w	r1, #4294967295
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ffe7 	bl	800662c <_kill>
  while (1) {}    /* Make sure we hang here */
 800665e:	bf00      	nop
 8006660:	e7fd      	b.n	800665e <_exit+0x12>

08006662 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	e00a      	b.n	800668a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006674:	f3af 8000 	nop.w
 8006678:	4601      	mov	r1, r0
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	1c5a      	adds	r2, r3, #1
 800667e:	60ba      	str	r2, [r7, #8]
 8006680:	b2ca      	uxtb	r2, r1
 8006682:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	3301      	adds	r3, #1
 8006688:	617b      	str	r3, [r7, #20]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	429a      	cmp	r2, r3
 8006690:	dbf0      	blt.n	8006674 <_read+0x12>
  }

  return len;
 8006692:	687b      	ldr	r3, [r7, #4]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066a8:	2300      	movs	r3, #0
 80066aa:	617b      	str	r3, [r7, #20]
 80066ac:	e009      	b.n	80066c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	60ba      	str	r2, [r7, #8]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	3301      	adds	r3, #1
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	dbf1      	blt.n	80066ae <_write+0x12>
  }
  return len;
 80066ca:	687b      	ldr	r3, [r7, #4]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <_close>:

int _close(int file)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80066dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80066fc:	605a      	str	r2, [r3, #4]
  return 0;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <_isatty>:

int _isatty(int file)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006714:	2301      	movs	r3, #1
}
 8006716:	4618      	mov	r0, r3
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr

08006722 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006722:	b480      	push	{r7}
 8006724:	b085      	sub	sp, #20
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006744:	4a14      	ldr	r2, [pc, #80]	@ (8006798 <_sbrk+0x5c>)
 8006746:	4b15      	ldr	r3, [pc, #84]	@ (800679c <_sbrk+0x60>)
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006750:	4b13      	ldr	r3, [pc, #76]	@ (80067a0 <_sbrk+0x64>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006758:	4b11      	ldr	r3, [pc, #68]	@ (80067a0 <_sbrk+0x64>)
 800675a:	4a12      	ldr	r2, [pc, #72]	@ (80067a4 <_sbrk+0x68>)
 800675c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800675e:	4b10      	ldr	r3, [pc, #64]	@ (80067a0 <_sbrk+0x64>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	429a      	cmp	r2, r3
 800676a:	d207      	bcs.n	800677c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800676c:	f015 f918 	bl	801b9a0 <__errno>
 8006770:	4603      	mov	r3, r0
 8006772:	220c      	movs	r2, #12
 8006774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	e009      	b.n	8006790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800677c:	4b08      	ldr	r3, [pc, #32]	@ (80067a0 <_sbrk+0x64>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006782:	4b07      	ldr	r3, [pc, #28]	@ (80067a0 <_sbrk+0x64>)
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	4a05      	ldr	r2, [pc, #20]	@ (80067a0 <_sbrk+0x64>)
 800678c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	20030000 	.word	0x20030000
 800679c:	00000400 	.word	0x00000400
 80067a0:	200012ac 	.word	0x200012ac
 80067a4:	200033f8 	.word	0x200033f8

080067a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80067ac:	4b24      	ldr	r3, [pc, #144]	@ (8006840 <SystemInit+0x98>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b2:	4a23      	ldr	r2, [pc, #140]	@ (8006840 <SystemInit+0x98>)
 80067b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80067bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067c6:	f043 0301 	orr.w	r3, r3, #1
 80067ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80067cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067d0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80067d4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80067d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80067e0:	4b18      	ldr	r3, [pc, #96]	@ (8006844 <SystemInit+0x9c>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80067e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80067ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067f2:	f023 0305 	bic.w	r3, r3, #5
 80067f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80067fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006806:	f023 0301 	bic.w	r3, r3, #1
 800680a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800680e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006812:	4a0d      	ldr	r2, [pc, #52]	@ (8006848 <SystemInit+0xa0>)
 8006814:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8006816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800681a:	4a0b      	ldr	r2, [pc, #44]	@ (8006848 <SystemInit+0xa0>)
 800681c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800681e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006828:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800682c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800682e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006832:	2200      	movs	r2, #0
 8006834:	619a      	str	r2, [r3, #24]
}
 8006836:	bf00      	nop
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	e000ed00 	.word	0xe000ed00
 8006844:	faf6fefb 	.word	0xfaf6fefb
 8006848:	22041000 	.word	0x22041000

0800684c <LL_APB1_GRP1_EnableClock>:
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006854:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006858:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800685a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4313      	orrs	r3, r2
 8006862:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006868:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4013      	ands	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006870:	68fb      	ldr	r3, [r7, #12]
}
 8006872:	bf00      	nop
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <LL_APB2_GRP1_EnableClock>:
{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800688a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800688c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4313      	orrs	r3, r2
 8006894:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006896:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800689a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4013      	ands	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80068a2:	68fb      	ldr	r3, [r7, #12]
}
 80068a4:	bf00      	nop
 80068a6:	3714      	adds	r7, #20
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80068b6:	f107 0310 	add.w	r3, r7, #16
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	605a      	str	r2, [r3, #4]
 80068c0:	609a      	str	r2, [r3, #8]
 80068c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068c4:	1d3b      	adds	r3, r7, #4
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	605a      	str	r2, [r3, #4]
 80068cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80068ce:	4b1e      	ldr	r3, [pc, #120]	@ (8006948 <MX_TIM2_Init+0x98>)
 80068d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80068d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 80068d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006948 <MX_TIM2_Init+0x98>)
 80068d8:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80068dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068de:	4b1a      	ldr	r3, [pc, #104]	@ (8006948 <MX_TIM2_Init+0x98>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80068e4:	4b18      	ldr	r3, [pc, #96]	@ (8006948 <MX_TIM2_Init+0x98>)
 80068e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80068ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068ec:	4b16      	ldr	r3, [pc, #88]	@ (8006948 <MX_TIM2_Init+0x98>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068f2:	4b15      	ldr	r3, [pc, #84]	@ (8006948 <MX_TIM2_Init+0x98>)
 80068f4:	2200      	movs	r2, #0
 80068f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80068f8:	4813      	ldr	r0, [pc, #76]	@ (8006948 <MX_TIM2_Init+0x98>)
 80068fa:	f008 faa5 	bl	800ee48 <HAL_TIM_Base_Init>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8006904:	f7fc f9fa 	bl	8002cfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800690c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800690e:	f107 0310 	add.w	r3, r7, #16
 8006912:	4619      	mov	r1, r3
 8006914:	480c      	ldr	r0, [pc, #48]	@ (8006948 <MX_TIM2_Init+0x98>)
 8006916:	f008 fcb9 	bl	800f28c <HAL_TIM_ConfigClockSource>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8006920:	f7fc f9ec 	bl	8002cfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006924:	2320      	movs	r3, #32
 8006926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006928:	2300      	movs	r3, #0
 800692a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800692c:	1d3b      	adds	r3, r7, #4
 800692e:	4619      	mov	r1, r3
 8006930:	4805      	ldr	r0, [pc, #20]	@ (8006948 <MX_TIM2_Init+0x98>)
 8006932:	f008 feb3 	bl	800f69c <HAL_TIMEx_MasterConfigSynchronization>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800693c:	f7fc f9de 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006940:	bf00      	nop
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	200012b0 	.word	0x200012b0

0800694c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006950:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <MX_TIM16_Init+0x48>)
 8006952:	4a11      	ldr	r2, [pc, #68]	@ (8006998 <MX_TIM16_Init+0x4c>)
 8006954:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 8006956:	4b0f      	ldr	r3, [pc, #60]	@ (8006994 <MX_TIM16_Init+0x48>)
 8006958:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800695c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <MX_TIM16_Init+0x48>)
 8006960:	2200      	movs	r2, #0
 8006962:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <MX_TIM16_Init+0x48>)
 8006966:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800696a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800696c:	4b09      	ldr	r3, [pc, #36]	@ (8006994 <MX_TIM16_Init+0x48>)
 800696e:	2200      	movs	r2, #0
 8006970:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006972:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <MX_TIM16_Init+0x48>)
 8006974:	2200      	movs	r2, #0
 8006976:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006978:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <MX_TIM16_Init+0x48>)
 800697a:	2200      	movs	r2, #0
 800697c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800697e:	4805      	ldr	r0, [pc, #20]	@ (8006994 <MX_TIM16_Init+0x48>)
 8006980:	f008 fa62 	bl	800ee48 <HAL_TIM_Base_Init>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d001      	beq.n	800698e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800698a:	f7fc f9b7 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800698e:	bf00      	nop
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	200012fc 	.word	0x200012fc
 8006998:	40014400 	.word	0x40014400

0800699c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80069a0:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <MX_TIM17_Init+0x48>)
 80069a2:	4a11      	ldr	r2, [pc, #68]	@ (80069e8 <MX_TIM17_Init+0x4c>)
 80069a4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 80069a6:	4b0f      	ldr	r3, [pc, #60]	@ (80069e4 <MX_TIM17_Init+0x48>)
 80069a8:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80069ac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069ae:	4b0d      	ldr	r3, [pc, #52]	@ (80069e4 <MX_TIM17_Init+0x48>)
 80069b0:	2200      	movs	r2, #0
 80069b2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 80069b4:	4b0b      	ldr	r3, [pc, #44]	@ (80069e4 <MX_TIM17_Init+0x48>)
 80069b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80069ba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80069bc:	4b09      	ldr	r3, [pc, #36]	@ (80069e4 <MX_TIM17_Init+0x48>)
 80069be:	2200      	movs	r2, #0
 80069c0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80069c2:	4b08      	ldr	r3, [pc, #32]	@ (80069e4 <MX_TIM17_Init+0x48>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80069c8:	4b06      	ldr	r3, [pc, #24]	@ (80069e4 <MX_TIM17_Init+0x48>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80069ce:	4805      	ldr	r0, [pc, #20]	@ (80069e4 <MX_TIM17_Init+0x48>)
 80069d0:	f008 fa3a 	bl	800ee48 <HAL_TIM_Base_Init>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80069da:	f7fc f98f 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80069de:	bf00      	nop
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20001348 	.word	0x20001348
 80069e8:	40014800 	.word	0x40014800

080069ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069fc:	d103      	bne.n	8006a06 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069fe:	2001      	movs	r0, #1
 8006a00:	f7ff ff24 	bl	800684c <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006a04:	e022      	b.n	8006a4c <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a12      	ldr	r2, [pc, #72]	@ (8006a54 <HAL_TIM_Base_MspInit+0x68>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10c      	bne.n	8006a2a <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006a10:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8006a14:	f7ff ff33 	bl	800687e <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006a18:	2200      	movs	r2, #0
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	2019      	movs	r0, #25
 8006a1e:	f001 fe9a 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006a22:	2019      	movs	r0, #25
 8006a24:	f001 feb1 	bl	800878a <HAL_NVIC_EnableIRQ>
}
 8006a28:	e010      	b.n	8006a4c <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a58 <HAL_TIM_Base_MspInit+0x6c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d10b      	bne.n	8006a4c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006a34:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8006a38:	f7ff ff21 	bl	800687e <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2100      	movs	r1, #0
 8006a40:	201a      	movs	r0, #26
 8006a42:	f001 fe88 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006a46:	201a      	movs	r0, #26
 8006a48:	f001 fe9f 	bl	800878a <HAL_NVIC_EnableIRQ>
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40014400 	.word	0x40014400
 8006a58:	40014800 	.word	0x40014800

08006a5c <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0

	SEC+=1;
 8006a60:	4b98      	ldr	r3, [pc, #608]	@ (8006cc4 <updatedate+0x268>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	3301      	adds	r3, #1
 8006a66:	b2da      	uxtb	r2, r3
 8006a68:	4b96      	ldr	r3, [pc, #600]	@ (8006cc4 <updatedate+0x268>)
 8006a6a:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8006a6c:	4b95      	ldr	r3, [pc, #596]	@ (8006cc4 <updatedate+0x268>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b3b      	cmp	r3, #59	@ 0x3b
 8006a72:	d908      	bls.n	8006a86 <updatedate+0x2a>
		SEC=0;
 8006a74:	4b93      	ldr	r3, [pc, #588]	@ (8006cc4 <updatedate+0x268>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8006a7a:	4b93      	ldr	r3, [pc, #588]	@ (8006cc8 <updatedate+0x26c>)
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	3301      	adds	r3, #1
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	4b91      	ldr	r3, [pc, #580]	@ (8006cc8 <updatedate+0x26c>)
 8006a84:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8006a86:	4b90      	ldr	r3, [pc, #576]	@ (8006cc8 <updatedate+0x26c>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b3b      	cmp	r3, #59	@ 0x3b
 8006a8c:	d908      	bls.n	8006aa0 <updatedate+0x44>

		MINUTE=0;
 8006a8e:	4b8e      	ldr	r3, [pc, #568]	@ (8006cc8 <updatedate+0x26c>)
 8006a90:	2200      	movs	r2, #0
 8006a92:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8006a94:	4b8d      	ldr	r3, [pc, #564]	@ (8006ccc <updatedate+0x270>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	4b8b      	ldr	r3, [pc, #556]	@ (8006ccc <updatedate+0x270>)
 8006a9e:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8006aa0:	4b8a      	ldr	r3, [pc, #552]	@ (8006ccc <updatedate+0x270>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b17      	cmp	r3, #23
 8006aa6:	d908      	bls.n	8006aba <updatedate+0x5e>
		HR=0;
 8006aa8:	4b88      	ldr	r3, [pc, #544]	@ (8006ccc <updatedate+0x270>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8006aae:	4b88      	ldr	r3, [pc, #544]	@ (8006cd0 <updatedate+0x274>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	b2da      	uxtb	r2, r3
 8006ab6:	4b86      	ldr	r3, [pc, #536]	@ (8006cd0 <updatedate+0x274>)
 8006ab8:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8006aba:	4b86      	ldr	r3, [pc, #536]	@ (8006cd4 <updatedate+0x278>)
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	2b0b      	cmp	r3, #11
 8006ac0:	f200 8137 	bhi.w	8006d32 <updatedate+0x2d6>
 8006ac4:	a201      	add	r2, pc, #4	@ (adr r2, 8006acc <updatedate+0x70>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006afd 	.word	0x08006afd
 8006ad0:	08006b27 	.word	0x08006b27
 8006ad4:	08006b51 	.word	0x08006b51
 8006ad8:	08006b7b 	.word	0x08006b7b
 8006adc:	08006ba5 	.word	0x08006ba5
 8006ae0:	08006bcf 	.word	0x08006bcf
 8006ae4:	08006bf9 	.word	0x08006bf9
 8006ae8:	08006c23 	.word	0x08006c23
 8006aec:	08006c4b 	.word	0x08006c4b
 8006af0:	08006c73 	.word	0x08006c73
 8006af4:	08006c9b 	.word	0x08006c9b
 8006af8:	08006cdd 	.word	0x08006cdd

	case JANVIER:
		if(JOURS>31){
 8006afc:	4b74      	ldr	r3, [pc, #464]	@ (8006cd0 <updatedate+0x274>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b1f      	cmp	r3, #31
 8006b02:	f240 80ff 	bls.w	8006d04 <updatedate+0x2a8>
			JOURS=1;
 8006b06:	4b72      	ldr	r3, [pc, #456]	@ (8006cd0 <updatedate+0x274>)
 8006b08:	2201      	movs	r2, #1
 8006b0a:	701a      	strb	r2, [r3, #0]
			mois++;
 8006b0c:	4b71      	ldr	r3, [pc, #452]	@ (8006cd4 <updatedate+0x278>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	3301      	adds	r3, #1
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	4b6f      	ldr	r3, [pc, #444]	@ (8006cd4 <updatedate+0x278>)
 8006b16:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8006b18:	4b6f      	ldr	r3, [pc, #444]	@ (8006cd8 <updatedate+0x27c>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	b2da      	uxtb	r2, r3
 8006b20:	4b6d      	ldr	r3, [pc, #436]	@ (8006cd8 <updatedate+0x27c>)
 8006b22:	701a      	strb	r2, [r3, #0]
		}

		break;
 8006b24:	e0ee      	b.n	8006d04 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8006b26:	4b6a      	ldr	r3, [pc, #424]	@ (8006cd0 <updatedate+0x274>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b1d      	cmp	r3, #29
 8006b2c:	f240 80ec 	bls.w	8006d08 <updatedate+0x2ac>
					JOURS=1;
 8006b30:	4b67      	ldr	r3, [pc, #412]	@ (8006cd0 <updatedate+0x274>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	701a      	strb	r2, [r3, #0]
					mois++;
 8006b36:	4b67      	ldr	r3, [pc, #412]	@ (8006cd4 <updatedate+0x278>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	4b65      	ldr	r3, [pc, #404]	@ (8006cd4 <updatedate+0x278>)
 8006b40:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006b42:	4b65      	ldr	r3, [pc, #404]	@ (8006cd8 <updatedate+0x27c>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	3301      	adds	r3, #1
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	4b63      	ldr	r3, [pc, #396]	@ (8006cd8 <updatedate+0x27c>)
 8006b4c:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006b4e:	e0db      	b.n	8006d08 <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8006b50:	4b5f      	ldr	r3, [pc, #380]	@ (8006cd0 <updatedate+0x274>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	2b1f      	cmp	r3, #31
 8006b56:	f240 80d9 	bls.w	8006d0c <updatedate+0x2b0>
					JOURS=1;
 8006b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8006cd0 <updatedate+0x274>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006b60:	4b5c      	ldr	r3, [pc, #368]	@ (8006cd4 <updatedate+0x278>)
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	3301      	adds	r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	4b5a      	ldr	r3, [pc, #360]	@ (8006cd4 <updatedate+0x278>)
 8006b6a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8006cd8 <updatedate+0x27c>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	3301      	adds	r3, #1
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	4b58      	ldr	r3, [pc, #352]	@ (8006cd8 <updatedate+0x27c>)
 8006b76:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006b78:	e0c8      	b.n	8006d0c <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8006b7a:	4b55      	ldr	r3, [pc, #340]	@ (8006cd0 <updatedate+0x274>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b1e      	cmp	r3, #30
 8006b80:	f240 80c6 	bls.w	8006d10 <updatedate+0x2b4>
					JOURS=1;
 8006b84:	4b52      	ldr	r3, [pc, #328]	@ (8006cd0 <updatedate+0x274>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
					mois++;
 8006b8a:	4b52      	ldr	r3, [pc, #328]	@ (8006cd4 <updatedate+0x278>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	4b50      	ldr	r3, [pc, #320]	@ (8006cd4 <updatedate+0x278>)
 8006b94:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006b96:	4b50      	ldr	r3, [pc, #320]	@ (8006cd8 <updatedate+0x27c>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8006cd8 <updatedate+0x27c>)
 8006ba0:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006ba2:	e0b5      	b.n	8006d10 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8006ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8006cd0 <updatedate+0x274>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b1f      	cmp	r3, #31
 8006baa:	f240 80b3 	bls.w	8006d14 <updatedate+0x2b8>
					JOURS=1;
 8006bae:	4b48      	ldr	r3, [pc, #288]	@ (8006cd0 <updatedate+0x274>)
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	701a      	strb	r2, [r3, #0]
					mois++;
 8006bb4:	4b47      	ldr	r3, [pc, #284]	@ (8006cd4 <updatedate+0x278>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	4b45      	ldr	r3, [pc, #276]	@ (8006cd4 <updatedate+0x278>)
 8006bbe:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006bc0:	4b45      	ldr	r3, [pc, #276]	@ (8006cd8 <updatedate+0x27c>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	4b43      	ldr	r3, [pc, #268]	@ (8006cd8 <updatedate+0x27c>)
 8006bca:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006bcc:	e0a2      	b.n	8006d14 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8006bce:	4b40      	ldr	r3, [pc, #256]	@ (8006cd0 <updatedate+0x274>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b1e      	cmp	r3, #30
 8006bd4:	f240 80a0 	bls.w	8006d18 <updatedate+0x2bc>
					JOURS=1;
 8006bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8006cd0 <updatedate+0x274>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	701a      	strb	r2, [r3, #0]
					mois++;
 8006bde:	4b3d      	ldr	r3, [pc, #244]	@ (8006cd4 <updatedate+0x278>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	3301      	adds	r3, #1
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	4b3b      	ldr	r3, [pc, #236]	@ (8006cd4 <updatedate+0x278>)
 8006be8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006bea:	4b3b      	ldr	r3, [pc, #236]	@ (8006cd8 <updatedate+0x27c>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	4b39      	ldr	r3, [pc, #228]	@ (8006cd8 <updatedate+0x27c>)
 8006bf4:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006bf6:	e08f      	b.n	8006d18 <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8006bf8:	4b35      	ldr	r3, [pc, #212]	@ (8006cd0 <updatedate+0x274>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b1f      	cmp	r3, #31
 8006bfe:	f240 808d 	bls.w	8006d1c <updatedate+0x2c0>
					JOURS=1;
 8006c02:	4b33      	ldr	r3, [pc, #204]	@ (8006cd0 <updatedate+0x274>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]
					mois++;
 8006c08:	4b32      	ldr	r3, [pc, #200]	@ (8006cd4 <updatedate+0x278>)
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	4b30      	ldr	r3, [pc, #192]	@ (8006cd4 <updatedate+0x278>)
 8006c12:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006c14:	4b30      	ldr	r3, [pc, #192]	@ (8006cd8 <updatedate+0x27c>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8006cd8 <updatedate+0x27c>)
 8006c1e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006c20:	e07c      	b.n	8006d1c <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8006c22:	4b2b      	ldr	r3, [pc, #172]	@ (8006cd0 <updatedate+0x274>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b1f      	cmp	r3, #31
 8006c28:	d97a      	bls.n	8006d20 <updatedate+0x2c4>
					JOURS=1;
 8006c2a:	4b29      	ldr	r3, [pc, #164]	@ (8006cd0 <updatedate+0x274>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006c30:	4b28      	ldr	r3, [pc, #160]	@ (8006cd4 <updatedate+0x278>)
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	3301      	adds	r3, #1
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	4b26      	ldr	r3, [pc, #152]	@ (8006cd4 <updatedate+0x278>)
 8006c3a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006c3c:	4b26      	ldr	r3, [pc, #152]	@ (8006cd8 <updatedate+0x27c>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	4b24      	ldr	r3, [pc, #144]	@ (8006cd8 <updatedate+0x27c>)
 8006c46:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006c48:	e06a      	b.n	8006d20 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8006c4a:	4b21      	ldr	r3, [pc, #132]	@ (8006cd0 <updatedate+0x274>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b1e      	cmp	r3, #30
 8006c50:	d968      	bls.n	8006d24 <updatedate+0x2c8>
					JOURS=1;
 8006c52:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd0 <updatedate+0x274>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
					mois++;
 8006c58:	4b1e      	ldr	r3, [pc, #120]	@ (8006cd4 <updatedate+0x278>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd4 <updatedate+0x278>)
 8006c62:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006c64:	4b1c      	ldr	r3, [pc, #112]	@ (8006cd8 <updatedate+0x27c>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006cd8 <updatedate+0x27c>)
 8006c6e:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006c70:	e058      	b.n	8006d24 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8006c72:	4b17      	ldr	r3, [pc, #92]	@ (8006cd0 <updatedate+0x274>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b1f      	cmp	r3, #31
 8006c78:	d956      	bls.n	8006d28 <updatedate+0x2cc>
					JOURS=1;
 8006c7a:	4b15      	ldr	r3, [pc, #84]	@ (8006cd0 <updatedate+0x274>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	701a      	strb	r2, [r3, #0]
					mois++;
 8006c80:	4b14      	ldr	r3, [pc, #80]	@ (8006cd4 <updatedate+0x278>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	4b12      	ldr	r3, [pc, #72]	@ (8006cd4 <updatedate+0x278>)
 8006c8a:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006c8c:	4b12      	ldr	r3, [pc, #72]	@ (8006cd8 <updatedate+0x27c>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	3301      	adds	r3, #1
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	4b10      	ldr	r3, [pc, #64]	@ (8006cd8 <updatedate+0x27c>)
 8006c96:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006c98:	e046      	b.n	8006d28 <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd0 <updatedate+0x274>)
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b1e      	cmp	r3, #30
 8006ca0:	d944      	bls.n	8006d2c <updatedate+0x2d0>
					JOURS=1;
 8006ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <updatedate+0x274>)
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	701a      	strb	r2, [r3, #0]
					mois++;
 8006ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd4 <updatedate+0x278>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	3301      	adds	r3, #1
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	4b08      	ldr	r3, [pc, #32]	@ (8006cd4 <updatedate+0x278>)
 8006cb2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006cb4:	4b08      	ldr	r3, [pc, #32]	@ (8006cd8 <updatedate+0x27c>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	4b06      	ldr	r3, [pc, #24]	@ (8006cd8 <updatedate+0x27c>)
 8006cbe:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006cc0:	e034      	b.n	8006d2c <updatedate+0x2d0>
 8006cc2:	bf00      	nop
 8006cc4:	20000b84 	.word	0x20000b84
 8006cc8:	20000b86 	.word	0x20000b86
 8006ccc:	20000b85 	.word	0x20000b85
 8006cd0:	20000010 	.word	0x20000010
 8006cd4:	20000b87 	.word	0x20000b87
 8006cd8:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8006cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8006d5c <updatedate+0x300>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b1f      	cmp	r3, #31
 8006ce2:	d925      	bls.n	8006d30 <updatedate+0x2d4>
					JOURS=1;
 8006ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8006d5c <updatedate+0x300>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	701a      	strb	r2, [r3, #0]
					mois++;
 8006cea:	4b1d      	ldr	r3, [pc, #116]	@ (8006d60 <updatedate+0x304>)
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8006d60 <updatedate+0x304>)
 8006cf4:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8006cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8006d64 <updatedate+0x308>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	4b19      	ldr	r3, [pc, #100]	@ (8006d64 <updatedate+0x308>)
 8006d00:	701a      	strb	r2, [r3, #0]
				}
		break;
 8006d02:	e015      	b.n	8006d30 <updatedate+0x2d4>
		break;
 8006d04:	bf00      	nop
 8006d06:	e014      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d08:	bf00      	nop
 8006d0a:	e012      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d0c:	bf00      	nop
 8006d0e:	e010      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d10:	bf00      	nop
 8006d12:	e00e      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d14:	bf00      	nop
 8006d16:	e00c      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d18:	bf00      	nop
 8006d1a:	e00a      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d1c:	bf00      	nop
 8006d1e:	e008      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d20:	bf00      	nop
 8006d22:	e006      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d24:	bf00      	nop
 8006d26:	e004      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d28:	bf00      	nop
 8006d2a:	e002      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d2c:	bf00      	nop
 8006d2e:	e000      	b.n	8006d32 <updatedate+0x2d6>
		break;
 8006d30:	bf00      	nop

	}

	if(MOIS>12){
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <updatedate+0x308>)
 8006d34:	781b      	ldrb	r3, [r3, #0]
 8006d36:	2b0c      	cmp	r3, #12
 8006d38:	d90b      	bls.n	8006d52 <updatedate+0x2f6>
		mois=JANVIER;
 8006d3a:	4b09      	ldr	r3, [pc, #36]	@ (8006d60 <updatedate+0x304>)
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8006d40:	4b08      	ldr	r3, [pc, #32]	@ (8006d64 <updatedate+0x308>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8006d46:	4b08      	ldr	r3, [pc, #32]	@ (8006d68 <updatedate+0x30c>)
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	4b06      	ldr	r3, [pc, #24]	@ (8006d68 <updatedate+0x30c>)
 8006d50:	801a      	strh	r2, [r3, #0]
	}
}
 8006d52:	bf00      	nop
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	20000010 	.word	0x20000010
 8006d60:	20000b87 	.word	0x20000b87
 8006d64:	20000011 	.word	0x20000011
 8006d68:	20000012 	.word	0x20000012

08006d6c <LL_AHB2_GRP1_EnableClock>:
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006d84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d90:	68fb      	ldr	r3, [r7, #12]
}
 8006d92:	bf00      	nop
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <LL_APB1_GRP2_EnableClock>:
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006da6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006daa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006db6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
}
 8006dc4:	bf00      	nop
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <LL_APB1_GRP2_DisableClock>:
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8006dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ddc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006de6:	4013      	ands	r3, r2
 8006de8:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <LL_APB2_GRP1_EnableClock>:
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e02:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e04:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006e0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4013      	ands	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
}
 8006e1c:	bf00      	nop
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8006e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	43db      	mvns	r3, r3
 8006e3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e3e:	4013      	ands	r3, r2
 8006e40:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8006e42:	bf00      	nop
 8006e44:	370c      	adds	r7, #12
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
	...

08006e50 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006e54:	4b22      	ldr	r3, [pc, #136]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e56:	4a23      	ldr	r2, [pc, #140]	@ (8006ee4 <MX_LPUART1_UART_Init+0x94>)
 8006e58:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 8006e5a:	4b21      	ldr	r3, [pc, #132]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8006e60:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006e62:	4b1f      	ldr	r3, [pc, #124]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006e68:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006e74:	4b1a      	ldr	r3, [pc, #104]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e76:	220c      	movs	r2, #12
 8006e78:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e7a:	4b19      	ldr	r3, [pc, #100]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006e80:	4b17      	ldr	r3, [pc, #92]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006e86:	4b16      	ldr	r3, [pc, #88]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006e8c:	4b14      	ldr	r3, [pc, #80]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006e92:	4b13      	ldr	r3, [pc, #76]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006e98:	4811      	ldr	r0, [pc, #68]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006e9a:	f008 fc9d 	bl	800f7d8 <HAL_UART_Init>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006ea4:	f7fb ff2a 	bl	8002cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	480d      	ldr	r0, [pc, #52]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006eac:	f00a f8a2 	bl	8010ff4 <HAL_UARTEx_SetTxFifoThreshold>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006eb6:	f7fb ff21 	bl	8002cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006eba:	2100      	movs	r1, #0
 8006ebc:	4808      	ldr	r0, [pc, #32]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006ebe:	f00a f8d7 	bl	8011070 <HAL_UARTEx_SetRxFifoThreshold>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006ec8:	f7fb ff18 	bl	8002cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006ecc:	4804      	ldr	r0, [pc, #16]	@ (8006ee0 <MX_LPUART1_UART_Init+0x90>)
 8006ece:	f00a f858 	bl	8010f82 <HAL_UARTEx_DisableFifoMode>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d001      	beq.n	8006edc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006ed8:	f7fb ff10 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006edc:	bf00      	nop
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20001394 	.word	0x20001394
 8006ee4:	40008000 	.word	0x40008000

08006ee8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006eec:	4b22      	ldr	r3, [pc, #136]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006eee:	4a23      	ldr	r2, [pc, #140]	@ (8006f7c <MX_USART1_UART_Init+0x94>)
 8006ef0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006ef2:	4b21      	ldr	r3, [pc, #132]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006ef8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006efa:	4b1f      	ldr	r3, [pc, #124]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006f00:	4b1d      	ldr	r3, [pc, #116]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006f06:	4b1c      	ldr	r3, [pc, #112]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f0e:	220c      	movs	r2, #12
 8006f10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f12:	4b19      	ldr	r3, [pc, #100]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f18:	4b17      	ldr	r3, [pc, #92]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f1e:	4b16      	ldr	r3, [pc, #88]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f20:	2200      	movs	r2, #0
 8006f22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f24:	4b14      	ldr	r3, [pc, #80]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f2a:	4b13      	ldr	r3, [pc, #76]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f30:	4811      	ldr	r0, [pc, #68]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f32:	f008 fc51 	bl	800f7d8 <HAL_UART_Init>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006f3c:	f7fb fede 	bl	8002cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f40:	2100      	movs	r1, #0
 8006f42:	480d      	ldr	r0, [pc, #52]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f44:	f00a f856 	bl	8010ff4 <HAL_UARTEx_SetTxFifoThreshold>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006f4e:	f7fb fed5 	bl	8002cfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f52:	2100      	movs	r1, #0
 8006f54:	4808      	ldr	r0, [pc, #32]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f56:	f00a f88b 	bl	8011070 <HAL_UARTEx_SetRxFifoThreshold>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006f60:	f7fb fecc 	bl	8002cfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006f64:	4804      	ldr	r0, [pc, #16]	@ (8006f78 <MX_USART1_UART_Init+0x90>)
 8006f66:	f00a f80c 	bl	8010f82 <HAL_UARTEx_DisableFifoMode>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006f70:	f7fb fec4 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006f74:	bf00      	nop
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20001428 	.word	0x20001428
 8006f7c:	40013800 	.word	0x40013800

08006f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b09c      	sub	sp, #112	@ 0x70
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	605a      	str	r2, [r3, #4]
 8006f92:	609a      	str	r2, [r3, #8]
 8006f94:	60da      	str	r2, [r3, #12]
 8006f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006f98:	f107 030c 	add.w	r3, r7, #12
 8006f9c:	2250      	movs	r2, #80	@ 0x50
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f014 fc16 	bl	801b7d2 <memset>
  if(uartHandle->Instance==LPUART1)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a46      	ldr	r2, [pc, #280]	@ (80070c4 <HAL_UART_MspInit+0x144>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d158      	bne.n	8007062 <HAL_UART_MspInit+0xe2>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8006fb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f006 f8a3 	bl	800d10a <HAL_RCCEx_PeriphCLKConfig>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006fca:	f7fb fe97 	bl	8002cfc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006fce:	2001      	movs	r0, #1
 8006fd0:	f7ff fee5 	bl	8006d9e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fd4:	2001      	movs	r0, #1
 8006fd6:	f7ff fec9 	bl	8006d6c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006fda:	230c      	movs	r3, #12
 8006fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fde:	2302      	movs	r3, #2
 8006fe0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006fea:	2308      	movs	r3, #8
 8006fec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fee:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ff8:	f001 ffe0 	bl	8008fbc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8006ffc:	4b32      	ldr	r3, [pc, #200]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 8006ffe:	4a33      	ldr	r2, [pc, #204]	@ (80070cc <HAL_UART_MspInit+0x14c>)
 8007000:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007002:	4b31      	ldr	r3, [pc, #196]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 8007004:	2210      	movs	r2, #16
 8007006:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007008:	4b2f      	ldr	r3, [pc, #188]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 800700a:	2200      	movs	r2, #0
 800700c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800700e:	4b2e      	ldr	r3, [pc, #184]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 8007010:	2200      	movs	r2, #0
 8007012:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007014:	4b2c      	ldr	r3, [pc, #176]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 8007016:	2280      	movs	r2, #128	@ 0x80
 8007018:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800701a:	4b2b      	ldr	r3, [pc, #172]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 800701c:	2200      	movs	r2, #0
 800701e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007020:	4b29      	ldr	r3, [pc, #164]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 8007022:	2200      	movs	r2, #0
 8007024:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8007026:	4b28      	ldr	r3, [pc, #160]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 8007028:	2220      	movs	r2, #32
 800702a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800702c:	4b26      	ldr	r3, [pc, #152]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 800702e:	2200      	movs	r2, #0
 8007030:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8007032:	4825      	ldr	r0, [pc, #148]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 8007034:	f001 fbee 	bl	8008814 <HAL_DMA_Init>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800703e:	f7fb fe5d 	bl	8002cfc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a20      	ldr	r2, [pc, #128]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 8007046:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800704a:	4a1f      	ldr	r2, [pc, #124]	@ (80070c8 <HAL_UART_MspInit+0x148>)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8007050:	2200      	movs	r2, #0
 8007052:	2100      	movs	r1, #0
 8007054:	2025      	movs	r0, #37	@ 0x25
 8007056:	f001 fb7e 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800705a:	2025      	movs	r0, #37	@ 0x25
 800705c:	f001 fb95 	bl	800878a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8007060:	e02b      	b.n	80070ba <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART1)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1a      	ldr	r2, [pc, #104]	@ (80070d0 <HAL_UART_MspInit+0x150>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d126      	bne.n	80070ba <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800706c:	2301      	movs	r3, #1
 800706e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8007070:	2300      	movs	r3, #0
 8007072:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007074:	f107 030c 	add.w	r3, r7, #12
 8007078:	4618      	mov	r0, r3
 800707a:	f006 f846 	bl	800d10a <HAL_RCCEx_PeriphCLKConfig>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8007084:	f7fb fe3a 	bl	8002cfc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8007088:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800708c:	f7ff feb3 	bl	8006df6 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007090:	2001      	movs	r0, #1
 8007092:	f7ff fe6b 	bl	8006d6c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007096:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800709a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800709c:	2302      	movs	r3, #2
 800709e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070a4:	2300      	movs	r3, #0
 80070a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80070a8:	2307      	movs	r3, #7
 80070aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80070b0:	4619      	mov	r1, r3
 80070b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070b6:	f001 ff81 	bl	8008fbc <HAL_GPIO_Init>
}
 80070ba:	bf00      	nop
 80070bc:	3770      	adds	r7, #112	@ 0x70
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	40008000 	.word	0x40008000
 80070c8:	200014bc 	.word	0x200014bc
 80070cc:	4002001c 	.word	0x4002001c
 80070d0:	40013800 	.word	0x40013800

080070d4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a13      	ldr	r2, [pc, #76]	@ (8007130 <HAL_UART_MspDeInit+0x5c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d111      	bne.n	800710a <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80070e6:	2001      	movs	r0, #1
 80070e8:	f7ff fe72 	bl	8006dd0 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80070ec:	210c      	movs	r1, #12
 80070ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80070f2:	f002 f8d3 	bl	800929c <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070fc:	4618      	mov	r0, r3
 80070fe:	f001 fc31 	bl	8008964 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8007102:	2025      	movs	r0, #37	@ 0x25
 8007104:	f001 fb4f 	bl	80087a6 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8007108:	e00e      	b.n	8007128 <HAL_UART_MspDeInit+0x54>
  else if(uartHandle->Instance==USART1)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a09      	ldr	r2, [pc, #36]	@ (8007134 <HAL_UART_MspDeInit+0x60>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d109      	bne.n	8007128 <HAL_UART_MspDeInit+0x54>
    __HAL_RCC_USART1_CLK_DISABLE();
 8007114:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8007118:	f7ff fe86 	bl	8006e28 <LL_APB2_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800711c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007124:	f002 f8ba 	bl	800929c <HAL_GPIO_DeInit>
}
 8007128:	bf00      	nop
 800712a:	3708      	adds	r7, #8
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40008000 	.word	0x40008000
 8007134:	40013800 	.word	0x40013800

08007138 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	oldPos = newPos; //keep track of the last position in the buffer
 8007140:	4b3a      	ldr	r3, [pc, #232]	@ (800722c <HAL_UART_RxCpltCallback+0xf4>)
 8007142:	881a      	ldrh	r2, [r3, #0]
 8007144:	4b3a      	ldr	r3, [pc, #232]	@ (8007230 <HAL_UART_RxCpltCallback+0xf8>)
 8007146:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 8007148:	4b39      	ldr	r3, [pc, #228]	@ (8007230 <HAL_UART_RxCpltCallback+0xf8>)
 800714a:	881b      	ldrh	r3, [r3, #0]
 800714c:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8007150:	d922      	bls.n	8007198 <HAL_UART_RxCpltCallback+0x60>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8007152:	4b37      	ldr	r3, [pc, #220]	@ (8007230 <HAL_UART_RxCpltCallback+0xf8>)
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800715a:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 800715c:	4b34      	ldr	r3, [pc, #208]	@ (8007230 <HAL_UART_RxCpltCallback+0xf8>)
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	4b34      	ldr	r3, [pc, #208]	@ (8007234 <HAL_UART_RxCpltCallback+0xfc>)
 8007164:	4413      	add	r3, r2
 8007166:	89fa      	ldrh	r2, [r7, #14]
 8007168:	4933      	ldr	r1, [pc, #204]	@ (8007238 <HAL_UART_RxCpltCallback+0x100>)
 800716a:	4618      	mov	r0, r3
 800716c:	f014 fc4d 	bl	801ba0a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8007170:	4b2f      	ldr	r3, [pc, #188]	@ (8007230 <HAL_UART_RxCpltCallback+0xf8>)
 8007172:	2200      	movs	r2, #0
 8007174:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8007176:	89fb      	ldrh	r3, [r7, #14]
 8007178:	4a2f      	ldr	r2, [pc, #188]	@ (8007238 <HAL_UART_RxCpltCallback+0x100>)
 800717a:	1899      	adds	r1, r3, r2
 800717c:	89fb      	ldrh	r3, [r7, #14]
 800717e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8007182:	461a      	mov	r2, r3
 8007184:	482b      	ldr	r0, [pc, #172]	@ (8007234 <HAL_UART_RxCpltCallback+0xfc>)
 8007186:	f014 fc40 	bl	801ba0a <memcpy>
				newPos = (64-datatocopy);  // update the position
 800718a:	89fb      	ldrh	r3, [r7, #14]
 800718c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8007190:	b29a      	uxth	r2, r3
 8007192:	4b26      	ldr	r3, [pc, #152]	@ (800722c <HAL_UART_RxCpltCallback+0xf4>)
 8007194:	801a      	strh	r2, [r3, #0]
 8007196:	e01e      	b.n	80071d6 <HAL_UART_RxCpltCallback+0x9e>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 8007198:	4b25      	ldr	r3, [pc, #148]	@ (8007230 <HAL_UART_RxCpltCallback+0xf8>)
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	4b25      	ldr	r3, [pc, #148]	@ (8007234 <HAL_UART_RxCpltCallback+0xfc>)
 80071a0:	441a      	add	r2, r3
 80071a2:	4b25      	ldr	r3, [pc, #148]	@ (8007238 <HAL_UART_RxCpltCallback+0x100>)
 80071a4:	4610      	mov	r0, r2
 80071a6:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80071aa:	4602      	mov	r2, r0
 80071ac:	4619      	mov	r1, r3
 80071ae:	f8d1 c000 	ldr.w	ip, [r1]
 80071b2:	684e      	ldr	r6, [r1, #4]
 80071b4:	688d      	ldr	r5, [r1, #8]
 80071b6:	68c9      	ldr	r1, [r1, #12]
 80071b8:	f8c2 c000 	str.w	ip, [r2]
 80071bc:	6056      	str	r6, [r2, #4]
 80071be:	6095      	str	r5, [r2, #8]
 80071c0:	60d1      	str	r1, [r2, #12]
 80071c2:	3310      	adds	r3, #16
 80071c4:	3010      	adds	r0, #16
 80071c6:	42a3      	cmp	r3, r4
 80071c8:	d1ef      	bne.n	80071aa <HAL_UART_RxCpltCallback+0x72>
				newPos = 64+oldPos; //update buffer position
 80071ca:	4b19      	ldr	r3, [pc, #100]	@ (8007230 <HAL_UART_RxCpltCallback+0xf8>)
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	3340      	adds	r3, #64	@ 0x40
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	4b16      	ldr	r3, [pc, #88]	@ (800722c <HAL_UART_RxCpltCallback+0xf4>)
 80071d4:	801a      	strh	r2, [r3, #0]

			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80071d6:	2240      	movs	r2, #64	@ 0x40
 80071d8:	4917      	ldr	r1, [pc, #92]	@ (8007238 <HAL_UART_RxCpltCallback+0x100>)
 80071da:	4818      	ldr	r0, [pc, #96]	@ (800723c <HAL_UART_RxCpltCallback+0x104>)
 80071dc:	f008 fb8c 	bl	800f8f8 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 80071e0:	4b17      	ldr	r3, [pc, #92]	@ (8007240 <HAL_UART_RxCpltCallback+0x108>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	4b16      	ldr	r3, [pc, #88]	@ (8007240 <HAL_UART_RxCpltCallback+0x108>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 0204 	bic.w	r2, r2, #4
 80071ee:	601a      	str	r2, [r3, #0]
			memcpy((uint8_t *) receivedtrame,(uint8_t *)RxBuffer,64);
 80071f0:	4a14      	ldr	r2, [pc, #80]	@ (8007244 <HAL_UART_RxCpltCallback+0x10c>)
 80071f2:	4b11      	ldr	r3, [pc, #68]	@ (8007238 <HAL_UART_RxCpltCallback+0x100>)
 80071f4:	4610      	mov	r0, r2
 80071f6:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80071fa:	4602      	mov	r2, r0
 80071fc:	4619      	mov	r1, r3
 80071fe:	f8d1 c000 	ldr.w	ip, [r1]
 8007202:	684e      	ldr	r6, [r1, #4]
 8007204:	688d      	ldr	r5, [r1, #8]
 8007206:	68c9      	ldr	r1, [r1, #12]
 8007208:	f8c2 c000 	str.w	ip, [r2]
 800720c:	6056      	str	r6, [r2, #4]
 800720e:	6095      	str	r5, [r2, #8]
 8007210:	60d1      	str	r1, [r2, #12]
 8007212:	3310      	adds	r3, #16
 8007214:	3010      	adds	r0, #16
 8007216:	42a3      	cmp	r3, r4
 8007218:	d1ef      	bne.n	80071fa <HAL_UART_RxCpltCallback+0xc2>

	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//l'appel de cette fonction réactive l'intérruption.
 800721a:	2240      	movs	r2, #64	@ 0x40
 800721c:	4906      	ldr	r1, [pc, #24]	@ (8007238 <HAL_UART_RxCpltCallback+0x100>)
 800721e:	4807      	ldr	r0, [pc, #28]	@ (800723c <HAL_UART_RxCpltCallback+0x104>)
 8007220:	f008 fb6a 	bl	800f8f8 <HAL_UART_Receive_DMA>
}
 8007224:	bf00      	nop
 8007226:	3714      	adds	r7, #20
 8007228:	46bd      	mov	sp, r7
 800722a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800722c:	200005dc 	.word	0x200005dc
 8007230:	200005da 	.word	0x200005da
 8007234:	20000620 	.word	0x20000620
 8007238:	200005e0 	.word	0x200005e0
 800723c:	20001394 	.word	0x20001394
 8007240:	200014bc 	.word	0x200014bc
 8007244:	20000ca8 	.word	0x20000ca8

08007248 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007248:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800724a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800724c:	3304      	adds	r3, #4

0800724e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800724e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007250:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007252:	d3f9      	bcc.n	8007248 <CopyDataInit>
  bx lr
 8007254:	4770      	bx	lr

08007256 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007256:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007258:	3004      	adds	r0, #4

0800725a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800725a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800725c:	d3fb      	bcc.n	8007256 <FillZerobss>
  bx lr
 800725e:	4770      	bx	lr

08007260 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007260:	480c      	ldr	r0, [pc, #48]	@ (8007294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007262:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007264:	f7ff faa0 	bl	80067a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007268:	480b      	ldr	r0, [pc, #44]	@ (8007298 <LoopForever+0x6>)
 800726a:	490c      	ldr	r1, [pc, #48]	@ (800729c <LoopForever+0xa>)
 800726c:	4a0c      	ldr	r2, [pc, #48]	@ (80072a0 <LoopForever+0xe>)
 800726e:	2300      	movs	r3, #0
 8007270:	f7ff ffed 	bl	800724e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8007274:	480b      	ldr	r0, [pc, #44]	@ (80072a4 <LoopForever+0x12>)
 8007276:	490c      	ldr	r1, [pc, #48]	@ (80072a8 <LoopForever+0x16>)
 8007278:	4a0c      	ldr	r2, [pc, #48]	@ (80072ac <LoopForever+0x1a>)
 800727a:	2300      	movs	r3, #0
 800727c:	f7ff ffe7 	bl	800724e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007280:	480b      	ldr	r0, [pc, #44]	@ (80072b0 <LoopForever+0x1e>)
 8007282:	490c      	ldr	r1, [pc, #48]	@ (80072b4 <LoopForever+0x22>)
 8007284:	2300      	movs	r3, #0
 8007286:	f7ff ffe8 	bl	800725a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800728a:	f014 fb8f 	bl	801b9ac <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800728e:	f7fb fbdd 	bl	8002a4c <main>

08007292 <LoopForever>:

LoopForever:
  b LoopForever
 8007292:	e7fe      	b.n	8007292 <LoopForever>
  ldr   r0, =_estack
 8007294:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007298:	20000008 	.word	0x20000008
 800729c:	20000320 	.word	0x20000320
 80072a0:	08022578 	.word	0x08022578
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80072a4:	200301e4 	.word	0x200301e4
 80072a8:	20030a67 	.word	0x20030a67
 80072ac:	080228d6 	.word	0x080228d6
  INIT_BSS _sbss, _ebss
 80072b0:	20000370 	.word	0x20000370
 80072b4:	200033f8 	.word	0x200033f8

080072b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80072b8:	e7fe      	b.n	80072b8 <ADC1_IRQHandler>
	...

080072bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072c6:	4b0c      	ldr	r3, [pc, #48]	@ (80072f8 <HAL_Init+0x3c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a0b      	ldr	r2, [pc, #44]	@ (80072f8 <HAL_Init+0x3c>)
 80072cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072d2:	2003      	movs	r0, #3
 80072d4:	f001 fa34 	bl	8008740 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80072d8:	200f      	movs	r0, #15
 80072da:	f000 f80f 	bl	80072fc <HAL_InitTick>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	71fb      	strb	r3, [r7, #7]
 80072e8:	e001      	b.n	80072ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80072ea:	f7ff f86e 	bl	80063ca <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80072ee:	79fb      	ldrb	r3, [r7, #7]
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	58004000 	.word	0x58004000

080072fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007308:	4b17      	ldr	r3, [pc, #92]	@ (8007368 <HAL_InitTick+0x6c>)
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d024      	beq.n	800735a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007310:	f005 fc6a 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 8007314:	4602      	mov	r2, r0
 8007316:	4b14      	ldr	r3, [pc, #80]	@ (8007368 <HAL_InitTick+0x6c>)
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	4619      	mov	r1, r3
 800731c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007320:	fbb3 f3f1 	udiv	r3, r3, r1
 8007324:	fbb2 f3f3 	udiv	r3, r2, r3
 8007328:	4618      	mov	r0, r3
 800732a:	f001 fa4a 	bl	80087c2 <HAL_SYSTICK_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10f      	bne.n	8007354 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b0f      	cmp	r3, #15
 8007338:	d809      	bhi.n	800734e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800733a:	2200      	movs	r2, #0
 800733c:	6879      	ldr	r1, [r7, #4]
 800733e:	f04f 30ff 	mov.w	r0, #4294967295
 8007342:	f001 fa08 	bl	8008756 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007346:	4a09      	ldr	r2, [pc, #36]	@ (800736c <HAL_InitTick+0x70>)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	e007      	b.n	800735e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	73fb      	strb	r3, [r7, #15]
 8007352:	e004      	b.n	800735e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	73fb      	strb	r3, [r7, #15]
 8007358:	e001      	b.n	800735e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	20000034 	.word	0x20000034
 800736c:	20000030 	.word	0x20000030

08007370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007374:	4b06      	ldr	r3, [pc, #24]	@ (8007390 <HAL_IncTick+0x20>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	4b06      	ldr	r3, [pc, #24]	@ (8007394 <HAL_IncTick+0x24>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4413      	add	r3, r2
 8007380:	4a04      	ldr	r2, [pc, #16]	@ (8007394 <HAL_IncTick+0x24>)
 8007382:	6013      	str	r3, [r2, #0]
}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	20000034 	.word	0x20000034
 8007394:	2000151c 	.word	0x2000151c

08007398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  return uwTick;
 800739c:	4b03      	ldr	r3, [pc, #12]	@ (80073ac <HAL_GetTick+0x14>)
 800739e:	681b      	ldr	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	2000151c 	.word	0x2000151c

080073b0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80073b4:	4b03      	ldr	r3, [pc, #12]	@ (80073c4 <HAL_GetTickPrio+0x14>)
 80073b6:	681b      	ldr	r3, [r3, #0]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20000030 	.word	0x20000030

080073c8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80073cc:	4b03      	ldr	r3, [pc, #12]	@ (80073dc <HAL_GetTickFreq+0x14>)
 80073ce:	781b      	ldrb	r3, [r3, #0]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	20000034 	.word	0x20000034

080073e0 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	609a      	str	r2, [r3, #8]
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3360      	adds	r3, #96	@ 0x60
 800745a:	461a      	mov	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b08      	ldr	r3, [pc, #32]	@ (800748c <LL_ADC_SetOffset+0x44>)
 800746a:	4013      	ands	r3, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	4313      	orrs	r3, r2
 8007478:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	03fff000 	.word	0x03fff000

08007490 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3360      	adds	r3, #96	@ 0x60
 800749e:	461a      	mov	r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3360      	adds	r3, #96	@ 0x60
 80074cc:	461a      	mov	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	431a      	orrs	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80074e6:	bf00      	nop
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800750a:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3330      	adds	r3, #48	@ 0x30
 8007528:	461a      	mov	r2, r3
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	0a1b      	lsrs	r3, r3, #8
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	f003 030c 	and.w	r3, r3, #12
 8007534:	4413      	add	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	f003 031f 	and.w	r3, r3, #31
 8007542:	211f      	movs	r1, #31
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	43db      	mvns	r3, r3
 800754a:	401a      	ands	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	0e9b      	lsrs	r3, r3, #26
 8007550:	f003 011f 	and.w	r1, r3, #31
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	f003 031f 	and.w	r3, r3, #31
 800755a:	fa01 f303 	lsl.w	r3, r1, r3
 800755e:	431a      	orrs	r2, r3
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8007564:	bf00      	nop
 8007566:	371c      	adds	r7, #28
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007570:	b480      	push	{r7}
 8007572:	b087      	sub	sp, #28
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3314      	adds	r3, #20
 8007580:	461a      	mov	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	0e5b      	lsrs	r3, r3, #25
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	f003 0304 	and.w	r3, r3, #4
 800758c:	4413      	add	r3, r2
 800758e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	0d1b      	lsrs	r3, r3, #20
 8007598:	f003 031f 	and.w	r3, r3, #31
 800759c:	2107      	movs	r1, #7
 800759e:	fa01 f303 	lsl.w	r3, r1, r3
 80075a2:	43db      	mvns	r3, r3
 80075a4:	401a      	ands	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	0d1b      	lsrs	r3, r3, #20
 80075aa:	f003 031f 	and.w	r3, r3, #31
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	fa01 f303 	lsl.w	r3, r1, r3
 80075b4:	431a      	orrs	r2, r3
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr
	...

080075c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075e0:	43db      	mvns	r3, r3
 80075e2:	401a      	ands	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f003 0318 	and.w	r3, r3, #24
 80075ea:	4908      	ldr	r1, [pc, #32]	@ (800760c <LL_ADC_SetChannelSingleDiff+0x44>)
 80075ec:	40d9      	lsrs	r1, r3
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	400b      	ands	r3, r1
 80075f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075f6:	431a      	orrs	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	0007ffff 	.word	0x0007ffff

08007610 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8007620:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	6093      	str	r3, [r2, #8]
}
 8007628:	bf00      	nop
 800762a:	370c      	adds	r7, #12
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007644:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007648:	d101      	bne.n	800764e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800764a:	2301      	movs	r3, #1
 800764c:	e000      	b.n	8007650 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800764e:	2300      	movs	r3, #0
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800766c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007670:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007694:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007698:	d101      	bne.n	800769e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800769a:	2301      	movs	r3, #1
 800769c:	e000      	b.n	80076a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80076c0:	f043 0201 	orr.w	r2, r3, #1
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f003 0301 	and.w	r3, r3, #1
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <LL_ADC_IsEnabled+0x18>
 80076e8:	2301      	movs	r3, #1
 80076ea:	e000      	b.n	80076ee <LL_ADC_IsEnabled+0x1a>
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800770a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800770e:	f043 0204 	orr.w	r2, r3, #4
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007716:	bf00      	nop
 8007718:	370c      	adds	r7, #12
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007722:	b480      	push	{r7}
 8007724:	b083      	sub	sp, #12
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f003 0304 	and.w	r3, r3, #4
 8007732:	2b04      	cmp	r3, #4
 8007734:	d101      	bne.n	800773a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007736:	2301      	movs	r3, #1
 8007738:	e000      	b.n	800773c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b08      	cmp	r3, #8
 800775a:	d101      	bne.n	8007760 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
	...

08007770 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b088      	sub	sp, #32
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800777c:	2300      	movs	r3, #0
 800777e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007780:	2300      	movs	r3, #0
 8007782:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d101      	bne.n	800778e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e12e      	b.n	80079ec <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007798:	2b00      	cmp	r3, #0
 800779a:	d109      	bne.n	80077b0 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7f9 fc99 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7ff ff3d 	bl	8007634 <LL_ADC_IsDeepPowerDownEnabled>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7ff ff23 	bl	8007610 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff ff58 	bl	8007684 <LL_ADC_IsInternalRegulatorEnabled>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d115      	bne.n	8007806 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4618      	mov	r0, r3
 80077e0:	f7ff ff3c 	bl	800765c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80077e4:	4b83      	ldr	r3, [pc, #524]	@ (80079f4 <HAL_ADC_Init+0x284>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	099b      	lsrs	r3, r3, #6
 80077ea:	4a83      	ldr	r2, [pc, #524]	@ (80079f8 <HAL_ADC_Init+0x288>)
 80077ec:	fba2 2303 	umull	r2, r3, r2, r3
 80077f0:	099b      	lsrs	r3, r3, #6
 80077f2:	3301      	adds	r3, #1
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80077f8:	e002      	b.n	8007800 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	3b01      	subs	r3, #1
 80077fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1f9      	bne.n	80077fa <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff ff3a 	bl	8007684 <LL_ADC_IsInternalRegulatorEnabled>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10d      	bne.n	8007832 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781a:	f043 0210 	orr.w	r2, r3, #16
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007826:	f043 0201 	orr.w	r2, r3, #1
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff ff73 	bl	8007722 <LL_ADC_REG_IsConversionOngoing>
 800783c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007842:	f003 0310 	and.w	r3, r3, #16
 8007846:	2b00      	cmp	r3, #0
 8007848:	f040 80c7 	bne.w	80079da <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f040 80c3 	bne.w	80079da <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007858:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800785c:	f043 0202 	orr.w	r2, r3, #2
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff ff33 	bl	80076d4 <LL_ADC_IsEnabled>
 800786e:	4603      	mov	r3, r0
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10b      	bne.n	800788c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007874:	4861      	ldr	r0, [pc, #388]	@ (80079fc <HAL_ADC_Init+0x28c>)
 8007876:	f7ff ff2d 	bl	80076d4 <LL_ADC_IsEnabled>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d105      	bne.n	800788c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	4619      	mov	r1, r3
 8007886:	485e      	ldr	r0, [pc, #376]	@ (8007a00 <HAL_ADC_Init+0x290>)
 8007888:	f7ff fdaa 	bl	80073e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7e5b      	ldrb	r3, [r3, #25]
 8007890:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007896:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800789c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80078a2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078aa:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80078ac:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d106      	bne.n	80078cc <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078c2:	3b01      	subs	r3, #1
 80078c4:	045b      	lsls	r3, r3, #17
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078d8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80078e2:	69ba      	ldr	r2, [r7, #24]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68da      	ldr	r2, [r3, #12]
 80078ee:	4b45      	ldr	r3, [pc, #276]	@ (8007a04 <HAL_ADC_Init+0x294>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6812      	ldr	r2, [r2, #0]
 80078f6:	69b9      	ldr	r1, [r7, #24]
 80078f8:	430b      	orrs	r3, r1
 80078fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4618      	mov	r0, r3
 8007902:	f7ff ff0e 	bl	8007722 <LL_ADC_REG_IsConversionOngoing>
 8007906:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff ff1b 	bl	8007748 <LL_ADC_INJ_IsConversionOngoing>
 8007912:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d13d      	bne.n	8007996 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d13a      	bne.n	8007996 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007924:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800792c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800792e:	4313      	orrs	r3, r2
 8007930:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800793c:	f023 0302 	bic.w	r3, r3, #2
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	69b9      	ldr	r1, [r7, #24]
 8007946:	430b      	orrs	r3, r1
 8007948:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007950:	2b01      	cmp	r3, #1
 8007952:	d118      	bne.n	8007986 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800795e:	f023 0304 	bic.w	r3, r3, #4
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800796a:	4311      	orrs	r1, r2
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007970:	4311      	orrs	r1, r2
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007976:	430a      	orrs	r2, r1
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	611a      	str	r2, [r3, #16]
 8007984:	e007      	b.n	8007996 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 0201 	bic.w	r2, r2, #1
 8007994:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d10c      	bne.n	80079b8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a4:	f023 010f 	bic.w	r1, r3, #15
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	1e5a      	subs	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80079b6:	e007      	b.n	80079c8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 020f 	bic.w	r2, r2, #15
 80079c6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079cc:	f023 0303 	bic.w	r3, r3, #3
 80079d0:	f043 0201 	orr.w	r2, r3, #1
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	655a      	str	r2, [r3, #84]	@ 0x54
 80079d8:	e007      	b.n	80079ea <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079de:	f043 0210 	orr.w	r2, r3, #16
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3720      	adds	r7, #32
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	2000002c 	.word	0x2000002c
 80079f8:	053e2d63 	.word	0x053e2d63
 80079fc:	50040000 	.word	0x50040000
 8007a00:	50040300 	.word	0x50040300
 8007a04:	fff0c007 	.word	0xfff0c007

08007a08 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff fe82 	bl	8007722 <LL_ADC_REG_IsConversionOngoing>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d167      	bne.n	8007af4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	d101      	bne.n	8007a32 <HAL_ADC_Start_DMA+0x2a>
 8007a2e:	2302      	movs	r3, #2
 8007a30:	e063      	b.n	8007afa <HAL_ADC_Start_DMA+0xf2>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 fc42 	bl	80082c4 <ADC_Enable>
 8007a40:	4603      	mov	r3, r0
 8007a42:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007a44:	7dfb      	ldrb	r3, [r7, #23]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d14f      	bne.n	8007aea <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007a52:	f023 0301 	bic.w	r3, r3, #1
 8007a56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d006      	beq.n	8007a78 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a6e:	f023 0206 	bic.w	r2, r3, #6
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a76:	e002      	b.n	8007a7e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a82:	4a20      	ldr	r2, [pc, #128]	@ (8007b04 <HAL_ADC_Start_DMA+0xfc>)
 8007a84:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007b08 <HAL_ADC_Start_DMA+0x100>)
 8007a8c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a92:	4a1e      	ldr	r2, [pc, #120]	@ (8007b0c <HAL_ADC_Start_DMA+0x104>)
 8007a94:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	221c      	movs	r2, #28
 8007a9c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0210 	orr.w	r2, r2, #16
 8007ab4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f042 0201 	orr.w	r2, r2, #1
 8007ac4:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3340      	adds	r3, #64	@ 0x40
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	68ba      	ldr	r2, [r7, #8]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f000 ffdb 	bl	8008a90 <HAL_DMA_Start_IT>
 8007ada:	4603      	mov	r3, r0
 8007adc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7ff fe09 	bl	80076fa <LL_ADC_REG_StartConversion>
 8007ae8:	e006      	b.n	8007af8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8007af2:	e001      	b.n	8007af8 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007af4:	2302      	movs	r3, #2
 8007af6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	080083b9 	.word	0x080083b9
 8007b08:	08008491 	.word	0x08008491
 8007b0c:	080084ad 	.word	0x080084ad

08007b10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b0b6      	sub	sp, #216	@ 0xd8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d101      	bne.n	8007b5a <HAL_ADC_ConfigChannel+0x22>
 8007b56:	2302      	movs	r3, #2
 8007b58:	e39f      	b.n	800829a <HAL_ADC_ConfigChannel+0x762>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7ff fddb 	bl	8007722 <LL_ADC_REG_IsConversionOngoing>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f040 8384 	bne.w	800827c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	6859      	ldr	r1, [r3, #4]
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	f7ff fcc9 	bl	8007518 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff fdc9 	bl	8007722 <LL_ADC_REG_IsConversionOngoing>
 8007b90:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fdd5 	bl	8007748 <LL_ADC_INJ_IsConversionOngoing>
 8007b9e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007ba2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f040 81a6 	bne.w	8007ef8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f040 81a1 	bne.w	8007ef8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6819      	ldr	r1, [r3, #0]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f7ff fcd4 	bl	8007570 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	695a      	ldr	r2, [r3, #20]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	08db      	lsrs	r3, r3, #3
 8007bd4:	f003 0303 	and.w	r3, r3, #3
 8007bd8:	005b      	lsls	r3, r3, #1
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	d00a      	beq.n	8007c00 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	6919      	ldr	r1, [r3, #16]
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007bfa:	f7ff fc25 	bl	8007448 <LL_ADC_SetOffset>
 8007bfe:	e17b      	b.n	8007ef8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff fc42 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d10a      	bne.n	8007c2c <HAL_ADC_ConfigChannel+0xf4>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7ff fc37 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007c22:	4603      	mov	r3, r0
 8007c24:	0e9b      	lsrs	r3, r3, #26
 8007c26:	f003 021f 	and.w	r2, r3, #31
 8007c2a:	e01e      	b.n	8007c6a <HAL_ADC_ConfigChannel+0x132>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2100      	movs	r1, #0
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff fc2c 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c42:	fa93 f3a3 	rbit	r3, r3
 8007c46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8007c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8007c52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8007c5a:	2320      	movs	r3, #32
 8007c5c:	e004      	b.n	8007c68 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8007c5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c62:	fab3 f383 	clz	r3, r3
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d105      	bne.n	8007c82 <HAL_ADC_ConfigChannel+0x14a>
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	0e9b      	lsrs	r3, r3, #26
 8007c7c:	f003 031f 	and.w	r3, r3, #31
 8007c80:	e018      	b.n	8007cb4 <HAL_ADC_ConfigChannel+0x17c>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c8e:	fa93 f3a3 	rbit	r3, r3
 8007c92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007c96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d101      	bne.n	8007caa <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8007ca6:	2320      	movs	r3, #32
 8007ca8:	e004      	b.n	8007cb4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8007caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007cae:	fab3 f383 	clz	r3, r3
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d106      	bne.n	8007cc6 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff fbfb 	bl	80074bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2101      	movs	r1, #1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7ff fbdf 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10a      	bne.n	8007cf2 <HAL_ADC_ConfigChannel+0x1ba>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2101      	movs	r1, #1
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7ff fbd4 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	0e9b      	lsrs	r3, r3, #26
 8007cec:	f003 021f 	and.w	r2, r3, #31
 8007cf0:	e01e      	b.n	8007d30 <HAL_ADC_ConfigChannel+0x1f8>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7ff fbc9 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007d08:	fa93 f3a3 	rbit	r3, r3
 8007d0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007d10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007d18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8007d20:	2320      	movs	r3, #32
 8007d22:	e004      	b.n	8007d2e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8007d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007d28:	fab3 f383 	clz	r3, r3
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	461a      	mov	r2, r3
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d105      	bne.n	8007d48 <HAL_ADC_ConfigChannel+0x210>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	0e9b      	lsrs	r3, r3, #26
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	e018      	b.n	8007d7a <HAL_ADC_ConfigChannel+0x242>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d54:	fa93 f3a3 	rbit	r3, r3
 8007d58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007d5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007d60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8007d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007d6c:	2320      	movs	r3, #32
 8007d6e:	e004      	b.n	8007d7a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d74:	fab3 f383 	clz	r3, r3
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d106      	bne.n	8007d8c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	2200      	movs	r2, #0
 8007d84:	2101      	movs	r1, #1
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff fb98 	bl	80074bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2102      	movs	r1, #2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7ff fb7c 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10a      	bne.n	8007db8 <HAL_ADC_ConfigChannel+0x280>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2102      	movs	r1, #2
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff fb71 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007dae:	4603      	mov	r3, r0
 8007db0:	0e9b      	lsrs	r3, r3, #26
 8007db2:	f003 021f 	and.w	r2, r3, #31
 8007db6:	e01e      	b.n	8007df6 <HAL_ADC_ConfigChannel+0x2be>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff fb66 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007dce:	fa93 f3a3 	rbit	r3, r3
 8007dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007dda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007dde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d101      	bne.n	8007dea <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8007de6:	2320      	movs	r3, #32
 8007de8:	e004      	b.n	8007df4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007dee:	fab3 f383 	clz	r3, r3
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	461a      	mov	r2, r3
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d105      	bne.n	8007e0e <HAL_ADC_ConfigChannel+0x2d6>
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	0e9b      	lsrs	r3, r3, #26
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	e016      	b.n	8007e3c <HAL_ADC_ConfigChannel+0x304>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e1a:	fa93 f3a3 	rbit	r3, r3
 8007e1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007e20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007e22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8007e2e:	2320      	movs	r3, #32
 8007e30:	e004      	b.n	8007e3c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8007e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e36:	fab3 f383 	clz	r3, r3
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	429a      	cmp	r2, r3
 8007e3e:	d106      	bne.n	8007e4e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2200      	movs	r2, #0
 8007e46:	2102      	movs	r1, #2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7ff fb37 	bl	80074bc <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2103      	movs	r1, #3
 8007e54:	4618      	mov	r0, r3
 8007e56:	f7ff fb1b 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <HAL_ADC_ConfigChannel+0x342>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2103      	movs	r1, #3
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7ff fb10 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007e70:	4603      	mov	r3, r0
 8007e72:	0e9b      	lsrs	r3, r3, #26
 8007e74:	f003 021f 	and.w	r2, r3, #31
 8007e78:	e017      	b.n	8007eaa <HAL_ADC_ConfigChannel+0x372>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2103      	movs	r1, #3
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7ff fb05 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007e86:	4603      	mov	r3, r0
 8007e88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e8c:	fa93 f3a3 	rbit	r3, r3
 8007e90:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8007e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e94:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8007e96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007e9c:	2320      	movs	r3, #32
 8007e9e:	e003      	b.n	8007ea8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ea2:	fab3 f383 	clz	r3, r3
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d105      	bne.n	8007ec2 <HAL_ADC_ConfigChannel+0x38a>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	0e9b      	lsrs	r3, r3, #26
 8007ebc:	f003 031f 	and.w	r3, r3, #31
 8007ec0:	e011      	b.n	8007ee6 <HAL_ADC_ConfigChannel+0x3ae>
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007eca:	fa93 f3a3 	rbit	r3, r3
 8007ece:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ed2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007ed4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007eda:	2320      	movs	r3, #32
 8007edc:	e003      	b.n	8007ee6 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ee0:	fab3 f383 	clz	r3, r3
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d106      	bne.n	8007ef8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2103      	movs	r1, #3
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fae2 	bl	80074bc <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7ff fbe9 	bl	80076d4 <LL_ADC_IsEnabled>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f040 81c2 	bne.w	800828e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	6819      	ldr	r1, [r3, #0]
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	461a      	mov	r2, r3
 8007f18:	f7ff fb56 	bl	80075c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	4a8e      	ldr	r2, [pc, #568]	@ (800815c <HAL_ADC_ConfigChannel+0x624>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	f040 8130 	bne.w	8008188 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10b      	bne.n	8007f50 <HAL_ADC_ConfigChannel+0x418>
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	0e9b      	lsrs	r3, r3, #26
 8007f3e:	3301      	adds	r3, #1
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	2b09      	cmp	r3, #9
 8007f46:	bf94      	ite	ls
 8007f48:	2301      	movls	r3, #1
 8007f4a:	2300      	movhi	r3, #0
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	e019      	b.n	8007f84 <HAL_ADC_ConfigChannel+0x44c>
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f58:	fa93 f3a3 	rbit	r3, r3
 8007f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f60:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8007f62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8007f68:	2320      	movs	r3, #32
 8007f6a:	e003      	b.n	8007f74 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8007f6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f6e:	fab3 f383 	clz	r3, r3
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	3301      	adds	r3, #1
 8007f76:	f003 031f 	and.w	r3, r3, #31
 8007f7a:	2b09      	cmp	r3, #9
 8007f7c:	bf94      	ite	ls
 8007f7e:	2301      	movls	r3, #1
 8007f80:	2300      	movhi	r3, #0
 8007f82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d079      	beq.n	800807c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d107      	bne.n	8007fa4 <HAL_ADC_ConfigChannel+0x46c>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	0e9b      	lsrs	r3, r3, #26
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	069b      	lsls	r3, r3, #26
 8007f9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007fa2:	e015      	b.n	8007fd0 <HAL_ADC_ConfigChannel+0x498>
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fac:	fa93 f3a3 	rbit	r3, r3
 8007fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fb4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8007fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007fbc:	2320      	movs	r3, #32
 8007fbe:	e003      	b.n	8007fc8 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc2:	fab3 f383 	clz	r3, r3
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	3301      	adds	r3, #1
 8007fca:	069b      	lsls	r3, r3, #26
 8007fcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d109      	bne.n	8007ff0 <HAL_ADC_ConfigChannel+0x4b8>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	0e9b      	lsrs	r3, r3, #26
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	f003 031f 	and.w	r3, r3, #31
 8007fe8:	2101      	movs	r1, #1
 8007fea:	fa01 f303 	lsl.w	r3, r1, r3
 8007fee:	e017      	b.n	8008020 <HAL_ADC_ConfigChannel+0x4e8>
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ff8:	fa93 f3a3 	rbit	r3, r3
 8007ffc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008000:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8008002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8008008:	2320      	movs	r3, #32
 800800a:	e003      	b.n	8008014 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800800c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800800e:	fab3 f383 	clz	r3, r3
 8008012:	b2db      	uxtb	r3, r3
 8008014:	3301      	adds	r3, #1
 8008016:	f003 031f 	and.w	r3, r3, #31
 800801a:	2101      	movs	r1, #1
 800801c:	fa01 f303 	lsl.w	r3, r1, r3
 8008020:	ea42 0103 	orr.w	r1, r2, r3
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10a      	bne.n	8008046 <HAL_ADC_ConfigChannel+0x50e>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	0e9b      	lsrs	r3, r3, #26
 8008036:	3301      	adds	r3, #1
 8008038:	f003 021f 	and.w	r2, r3, #31
 800803c:	4613      	mov	r3, r2
 800803e:	005b      	lsls	r3, r3, #1
 8008040:	4413      	add	r3, r2
 8008042:	051b      	lsls	r3, r3, #20
 8008044:	e018      	b.n	8008078 <HAL_ADC_ConfigChannel+0x540>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800804c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804e:	fa93 f3a3 	rbit	r3, r3
 8008052:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8008054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8008058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800805e:	2320      	movs	r3, #32
 8008060:	e003      	b.n	800806a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8008062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008064:	fab3 f383 	clz	r3, r3
 8008068:	b2db      	uxtb	r3, r3
 800806a:	3301      	adds	r3, #1
 800806c:	f003 021f 	and.w	r2, r3, #31
 8008070:	4613      	mov	r3, r2
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	4413      	add	r3, r2
 8008076:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008078:	430b      	orrs	r3, r1
 800807a:	e080      	b.n	800817e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008084:	2b00      	cmp	r3, #0
 8008086:	d107      	bne.n	8008098 <HAL_ADC_ConfigChannel+0x560>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	0e9b      	lsrs	r3, r3, #26
 800808e:	3301      	adds	r3, #1
 8008090:	069b      	lsls	r3, r3, #26
 8008092:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008096:	e015      	b.n	80080c4 <HAL_ADC_ConfigChannel+0x58c>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800809e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080a0:	fa93 f3a3 	rbit	r3, r3
 80080a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80080a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80080aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d101      	bne.n	80080b4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80080b0:	2320      	movs	r3, #32
 80080b2:	e003      	b.n	80080bc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	fab3 f383 	clz	r3, r3
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	3301      	adds	r3, #1
 80080be:	069b      	lsls	r3, r3, #26
 80080c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d109      	bne.n	80080e4 <HAL_ADC_ConfigChannel+0x5ac>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	0e9b      	lsrs	r3, r3, #26
 80080d6:	3301      	adds	r3, #1
 80080d8:	f003 031f 	and.w	r3, r3, #31
 80080dc:	2101      	movs	r1, #1
 80080de:	fa01 f303 	lsl.w	r3, r1, r3
 80080e2:	e017      	b.n	8008114 <HAL_ADC_ConfigChannel+0x5dc>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	fa93 f3a3 	rbit	r3, r3
 80080f0:	61fb      	str	r3, [r7, #28]
  return result;
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80080fc:	2320      	movs	r3, #32
 80080fe:	e003      	b.n	8008108 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8008100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008102:	fab3 f383 	clz	r3, r3
 8008106:	b2db      	uxtb	r3, r3
 8008108:	3301      	adds	r3, #1
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	2101      	movs	r1, #1
 8008110:	fa01 f303 	lsl.w	r3, r1, r3
 8008114:	ea42 0103 	orr.w	r1, r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10d      	bne.n	8008140 <HAL_ADC_ConfigChannel+0x608>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	0e9b      	lsrs	r3, r3, #26
 800812a:	3301      	adds	r3, #1
 800812c:	f003 021f 	and.w	r2, r3, #31
 8008130:	4613      	mov	r3, r2
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	4413      	add	r3, r2
 8008136:	3b1e      	subs	r3, #30
 8008138:	051b      	lsls	r3, r3, #20
 800813a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800813e:	e01d      	b.n	800817c <HAL_ADC_ConfigChannel+0x644>
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	fa93 f3a3 	rbit	r3, r3
 800814c:	613b      	str	r3, [r7, #16]
  return result;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d103      	bne.n	8008160 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8008158:	2320      	movs	r3, #32
 800815a:	e005      	b.n	8008168 <HAL_ADC_ConfigChannel+0x630>
 800815c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	fab3 f383 	clz	r3, r3
 8008166:	b2db      	uxtb	r3, r3
 8008168:	3301      	adds	r3, #1
 800816a:	f003 021f 	and.w	r2, r3, #31
 800816e:	4613      	mov	r3, r2
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	4413      	add	r3, r2
 8008174:	3b1e      	subs	r3, #30
 8008176:	051b      	lsls	r3, r3, #20
 8008178:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800817c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008182:	4619      	mov	r1, r3
 8008184:	f7ff f9f4 	bl	8007570 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	4b45      	ldr	r3, [pc, #276]	@ (80082a4 <HAL_ADC_ConfigChannel+0x76c>)
 800818e:	4013      	ands	r3, r2
 8008190:	2b00      	cmp	r3, #0
 8008192:	d07c      	beq.n	800828e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008194:	4844      	ldr	r0, [pc, #272]	@ (80082a8 <HAL_ADC_ConfigChannel+0x770>)
 8008196:	f7ff f949 	bl	800742c <LL_ADC_GetCommonPathInternalCh>
 800819a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800819e:	4843      	ldr	r0, [pc, #268]	@ (80082ac <HAL_ADC_ConfigChannel+0x774>)
 80081a0:	f7ff fa98 	bl	80076d4 <LL_ADC_IsEnabled>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d15e      	bne.n	8008268 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a40      	ldr	r2, [pc, #256]	@ (80082b0 <HAL_ADC_ConfigChannel+0x778>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d127      	bne.n	8008204 <HAL_ADC_ConfigChannel+0x6cc>
 80081b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d121      	bne.n	8008204 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a39      	ldr	r2, [pc, #228]	@ (80082ac <HAL_ADC_ConfigChannel+0x774>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d161      	bne.n	800828e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80081ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80081ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80081d2:	4619      	mov	r1, r3
 80081d4:	4834      	ldr	r0, [pc, #208]	@ (80082a8 <HAL_ADC_ConfigChannel+0x770>)
 80081d6:	f7ff f916 	bl	8007406 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80081da:	4b36      	ldr	r3, [pc, #216]	@ (80082b4 <HAL_ADC_ConfigChannel+0x77c>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	099b      	lsrs	r3, r3, #6
 80081e0:	4a35      	ldr	r2, [pc, #212]	@ (80082b8 <HAL_ADC_ConfigChannel+0x780>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	099b      	lsrs	r3, r3, #6
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	4613      	mov	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80081f4:	e002      	b.n	80081fc <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f9      	bne.n	80081f6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008202:	e044      	b.n	800828e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a2c      	ldr	r2, [pc, #176]	@ (80082bc <HAL_ADC_ConfigChannel+0x784>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d113      	bne.n	8008236 <HAL_ADC_ConfigChannel+0x6fe>
 800820e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008212:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10d      	bne.n	8008236 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a23      	ldr	r2, [pc, #140]	@ (80082ac <HAL_ADC_ConfigChannel+0x774>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d134      	bne.n	800828e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008228:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800822c:	4619      	mov	r1, r3
 800822e:	481e      	ldr	r0, [pc, #120]	@ (80082a8 <HAL_ADC_ConfigChannel+0x770>)
 8008230:	f7ff f8e9 	bl	8007406 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008234:	e02b      	b.n	800828e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a21      	ldr	r2, [pc, #132]	@ (80082c0 <HAL_ADC_ConfigChannel+0x788>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d126      	bne.n	800828e <HAL_ADC_ConfigChannel+0x756>
 8008240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008244:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d120      	bne.n	800828e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a16      	ldr	r2, [pc, #88]	@ (80082ac <HAL_ADC_ConfigChannel+0x774>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d11b      	bne.n	800828e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800825a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800825e:	4619      	mov	r1, r3
 8008260:	4811      	ldr	r0, [pc, #68]	@ (80082a8 <HAL_ADC_ConfigChannel+0x770>)
 8008262:	f7ff f8d0 	bl	8007406 <LL_ADC_SetCommonPathInternalCh>
 8008266:	e012      	b.n	800828e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800826c:	f043 0220 	orr.w	r2, r3, #32
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800827a:	e008      	b.n	800828e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008280:	f043 0220 	orr.w	r2, r3, #32
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8008296:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800829a:	4618      	mov	r0, r3
 800829c:	37d8      	adds	r7, #216	@ 0xd8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	80080000 	.word	0x80080000
 80082a8:	50040300 	.word	0x50040300
 80082ac:	50040000 	.word	0x50040000
 80082b0:	c7520000 	.word	0xc7520000
 80082b4:	2000002c 	.word	0x2000002c
 80082b8:	053e2d63 	.word	0x053e2d63
 80082bc:	cb840000 	.word	0xcb840000
 80082c0:	80000001 	.word	0x80000001

080082c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff f9fd 	bl	80076d4 <LL_ADC_IsEnabled>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d15e      	bne.n	800839e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	4b30      	ldr	r3, [pc, #192]	@ (80083a8 <ADC_Enable+0xe4>)
 80082e8:	4013      	ands	r3, r2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00d      	beq.n	800830a <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082f2:	f043 0210 	orr.w	r2, r3, #16
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082fe:	f043 0201 	orr.w	r2, r3, #1
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e04a      	b.n	80083a0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4618      	mov	r0, r3
 8008310:	f7ff f9cc 	bl	80076ac <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8008314:	4825      	ldr	r0, [pc, #148]	@ (80083ac <ADC_Enable+0xe8>)
 8008316:	f7ff f889 	bl	800742c <LL_ADC_GetCommonPathInternalCh>
 800831a:	4603      	mov	r3, r0
 800831c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00f      	beq.n	8008344 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008324:	4b22      	ldr	r3, [pc, #136]	@ (80083b0 <ADC_Enable+0xec>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	099b      	lsrs	r3, r3, #6
 800832a:	4a22      	ldr	r2, [pc, #136]	@ (80083b4 <ADC_Enable+0xf0>)
 800832c:	fba2 2303 	umull	r2, r3, r2, r3
 8008330:	099b      	lsrs	r3, r3, #6
 8008332:	3301      	adds	r3, #1
 8008334:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8008336:	e002      	b.n	800833e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	3b01      	subs	r3, #1
 800833c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1f9      	bne.n	8008338 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8008344:	f7ff f828 	bl	8007398 <HAL_GetTick>
 8008348:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800834a:	e021      	b.n	8008390 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4618      	mov	r0, r3
 8008352:	f7ff f9bf 	bl	80076d4 <LL_ADC_IsEnabled>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d104      	bne.n	8008366 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f7ff f9a3 	bl	80076ac <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008366:	f7ff f817 	bl	8007398 <HAL_GetTick>
 800836a:	4602      	mov	r2, r0
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	1ad3      	subs	r3, r2, r3
 8008370:	2b02      	cmp	r3, #2
 8008372:	d90d      	bls.n	8008390 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008378:	f043 0210 	orr.w	r2, r3, #16
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008384:	f043 0201 	orr.w	r2, r3, #1
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e007      	b.n	80083a0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b01      	cmp	r3, #1
 800839c:	d1d6      	bne.n	800834c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	8000003f 	.word	0x8000003f
 80083ac:	50040300 	.word	0x50040300
 80083b0:	2000002c 	.word	0x2000002c
 80083b4:	053e2d63 	.word	0x053e2d63

080083b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ca:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d14b      	bne.n	800846a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083d6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0308 	and.w	r3, r3, #8
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d021      	beq.n	8008430 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff f87e 	bl	80074f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d032      	beq.n	8008462 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d12b      	bne.n	8008462 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800840e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800841a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d11f      	bne.n	8008462 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008426:	f043 0201 	orr.w	r2, r3, #1
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	655a      	str	r2, [r3, #84]	@ 0x54
 800842e:	e018      	b.n	8008462 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f003 0302 	and.w	r3, r3, #2
 800843a:	2b00      	cmp	r3, #0
 800843c:	d111      	bne.n	8008462 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008442:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d105      	bne.n	8008462 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800845a:	f043 0201 	orr.w	r2, r3, #1
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f7f8 fe90 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008468:	e00e      	b.n	8008488 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846e:	f003 0310 	and.w	r3, r3, #16
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f7ff fb54 	bl	8007b24 <HAL_ADC_ErrorCallback>
}
 800847c:	e004      	b.n	8008488 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	4798      	blx	r3
}
 8008488:	bf00      	nop
 800848a:	3710      	adds	r7, #16
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b084      	sub	sp, #16
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800849c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7ff fb36 	bl	8007b10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80084a4:	bf00      	nop
 80084a6:	3710      	adds	r7, #16
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ca:	f043 0204 	orr.w	r2, r3, #4
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7ff fb26 	bl	8007b24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80084d8:	bf00      	nop
 80084da:	3710      	adds	r7, #16
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008524 <__NVIC_SetPriorityGrouping+0x44>)
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80084fc:	4013      	ands	r3, r2
 80084fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800850c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008512:	4a04      	ldr	r2, [pc, #16]	@ (8008524 <__NVIC_SetPriorityGrouping+0x44>)
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	60d3      	str	r3, [r2, #12]
}
 8008518:	bf00      	nop
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	e000ed00 	.word	0xe000ed00

08008528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008528:	b480      	push	{r7}
 800852a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800852c:	4b04      	ldr	r3, [pc, #16]	@ (8008540 <__NVIC_GetPriorityGrouping+0x18>)
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	0a1b      	lsrs	r3, r3, #8
 8008532:	f003 0307 	and.w	r3, r3, #7
}
 8008536:	4618      	mov	r0, r3
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	e000ed00 	.word	0xe000ed00

08008544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800854e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008552:	2b00      	cmp	r3, #0
 8008554:	db0b      	blt.n	800856e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	f003 021f 	and.w	r2, r3, #31
 800855c:	4907      	ldr	r1, [pc, #28]	@ (800857c <__NVIC_EnableIRQ+0x38>)
 800855e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008562:	095b      	lsrs	r3, r3, #5
 8008564:	2001      	movs	r0, #1
 8008566:	fa00 f202 	lsl.w	r2, r0, r2
 800856a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800856e:	bf00      	nop
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	e000e100 	.word	0xe000e100

08008580 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800858a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800858e:	2b00      	cmp	r3, #0
 8008590:	db12      	blt.n	80085b8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	f003 021f 	and.w	r2, r3, #31
 8008598:	490a      	ldr	r1, [pc, #40]	@ (80085c4 <__NVIC_DisableIRQ+0x44>)
 800859a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	2001      	movs	r0, #1
 80085a2:	fa00 f202 	lsl.w	r2, r0, r2
 80085a6:	3320      	adds	r3, #32
 80085a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80085ac:	f3bf 8f4f 	dsb	sy
}
 80085b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80085b2:	f3bf 8f6f 	isb	sy
}
 80085b6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	e000e100 	.word	0xe000e100

080085c8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	db0c      	blt.n	80085f4 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	f003 021f 	and.w	r2, r3, #31
 80085e0:	4907      	ldr	r1, [pc, #28]	@ (8008600 <__NVIC_SetPendingIRQ+0x38>)
 80085e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085e6:	095b      	lsrs	r3, r3, #5
 80085e8:	2001      	movs	r0, #1
 80085ea:	fa00 f202 	lsl.w	r2, r0, r2
 80085ee:	3340      	adds	r3, #64	@ 0x40
 80085f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	e000e100 	.word	0xe000e100

08008604 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800860e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008612:	2b00      	cmp	r3, #0
 8008614:	db0c      	blt.n	8008630 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008616:	79fb      	ldrb	r3, [r7, #7]
 8008618:	f003 021f 	and.w	r2, r3, #31
 800861c:	4907      	ldr	r1, [pc, #28]	@ (800863c <__NVIC_ClearPendingIRQ+0x38>)
 800861e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	2001      	movs	r0, #1
 8008626:	fa00 f202 	lsl.w	r2, r0, r2
 800862a:	3360      	adds	r3, #96	@ 0x60
 800862c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008630:	bf00      	nop
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	e000e100 	.word	0xe000e100

08008640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800864c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008650:	2b00      	cmp	r3, #0
 8008652:	db0a      	blt.n	800866a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	b2da      	uxtb	r2, r3
 8008658:	490c      	ldr	r1, [pc, #48]	@ (800868c <__NVIC_SetPriority+0x4c>)
 800865a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865e:	0112      	lsls	r2, r2, #4
 8008660:	b2d2      	uxtb	r2, r2
 8008662:	440b      	add	r3, r1
 8008664:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008668:	e00a      	b.n	8008680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	b2da      	uxtb	r2, r3
 800866e:	4908      	ldr	r1, [pc, #32]	@ (8008690 <__NVIC_SetPriority+0x50>)
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	3b04      	subs	r3, #4
 8008678:	0112      	lsls	r2, r2, #4
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	440b      	add	r3, r1
 800867e:	761a      	strb	r2, [r3, #24]
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	e000e100 	.word	0xe000e100
 8008690:	e000ed00 	.word	0xe000ed00

08008694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008694:	b480      	push	{r7}
 8008696:	b089      	sub	sp, #36	@ 0x24
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0307 	and.w	r3, r3, #7
 80086a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	f1c3 0307 	rsb	r3, r3, #7
 80086ae:	2b04      	cmp	r3, #4
 80086b0:	bf28      	it	cs
 80086b2:	2304      	movcs	r3, #4
 80086b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	3304      	adds	r3, #4
 80086ba:	2b06      	cmp	r3, #6
 80086bc:	d902      	bls.n	80086c4 <NVIC_EncodePriority+0x30>
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	3b03      	subs	r3, #3
 80086c2:	e000      	b.n	80086c6 <NVIC_EncodePriority+0x32>
 80086c4:	2300      	movs	r3, #0
 80086c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086c8:	f04f 32ff 	mov.w	r2, #4294967295
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	fa02 f303 	lsl.w	r3, r2, r3
 80086d2:	43da      	mvns	r2, r3
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	401a      	ands	r2, r3
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086dc:	f04f 31ff 	mov.w	r1, #4294967295
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	fa01 f303 	lsl.w	r3, r1, r3
 80086e6:	43d9      	mvns	r1, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086ec:	4313      	orrs	r3, r2
         );
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3724      	adds	r7, #36	@ 0x24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
	...

080086fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	3b01      	subs	r3, #1
 8008708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800870c:	d301      	bcc.n	8008712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800870e:	2301      	movs	r3, #1
 8008710:	e00f      	b.n	8008732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008712:	4a0a      	ldr	r2, [pc, #40]	@ (800873c <SysTick_Config+0x40>)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3b01      	subs	r3, #1
 8008718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800871a:	210f      	movs	r1, #15
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	f7ff ff8e 	bl	8008640 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008724:	4b05      	ldr	r3, [pc, #20]	@ (800873c <SysTick_Config+0x40>)
 8008726:	2200      	movs	r2, #0
 8008728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800872a:	4b04      	ldr	r3, [pc, #16]	@ (800873c <SysTick_Config+0x40>)
 800872c:	2207      	movs	r2, #7
 800872e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	3708      	adds	r7, #8
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	e000e010 	.word	0xe000e010

08008740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7ff fec9 	bl	80084e0 <__NVIC_SetPriorityGrouping>
}
 800874e:	bf00      	nop
 8008750:	3708      	adds	r7, #8
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b086      	sub	sp, #24
 800875a:	af00      	add	r7, sp, #0
 800875c:	4603      	mov	r3, r0
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	607a      	str	r2, [r7, #4]
 8008762:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008764:	f7ff fee0 	bl	8008528 <__NVIC_GetPriorityGrouping>
 8008768:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	68b9      	ldr	r1, [r7, #8]
 800876e:	6978      	ldr	r0, [r7, #20]
 8008770:	f7ff ff90 	bl	8008694 <NVIC_EncodePriority>
 8008774:	4602      	mov	r2, r0
 8008776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877a:	4611      	mov	r1, r2
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff ff5f 	bl	8008640 <__NVIC_SetPriority>
}
 8008782:	bf00      	nop
 8008784:	3718      	adds	r7, #24
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}

0800878a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b082      	sub	sp, #8
 800878e:	af00      	add	r7, sp, #0
 8008790:	4603      	mov	r3, r0
 8008792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fed3 	bl	8008544 <__NVIC_EnableIRQ>
}
 800879e:	bf00      	nop
 80087a0:	3708      	adds	r7, #8
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}

080087a6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	4603      	mov	r3, r0
 80087ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80087b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff fee3 	bl	8008580 <__NVIC_DisableIRQ>
}
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7ff ff96 	bl	80086fc <SysTick_Config>
 80087d0:	4603      	mov	r3, r0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b082      	sub	sp, #8
 80087de:	af00      	add	r7, sp, #0
 80087e0:	4603      	mov	r3, r0
 80087e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80087e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7ff feed 	bl	80085c8 <__NVIC_SetPendingIRQ>
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	4603      	mov	r3, r0
 80087fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8008800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008804:	4618      	mov	r0, r3
 8008806:	f7ff fefd 	bl	8008604 <__NVIC_ClearPendingIRQ>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e08e      	b.n	8008944 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	461a      	mov	r2, r3
 800882c:	4b47      	ldr	r3, [pc, #284]	@ (800894c <HAL_DMA_Init+0x138>)
 800882e:	429a      	cmp	r2, r3
 8008830:	d80f      	bhi.n	8008852 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	4b45      	ldr	r3, [pc, #276]	@ (8008950 <HAL_DMA_Init+0x13c>)
 800883a:	4413      	add	r3, r2
 800883c:	4a45      	ldr	r2, [pc, #276]	@ (8008954 <HAL_DMA_Init+0x140>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	009a      	lsls	r2, r3, #2
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a42      	ldr	r2, [pc, #264]	@ (8008958 <HAL_DMA_Init+0x144>)
 800884e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008850:	e00e      	b.n	8008870 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	4b40      	ldr	r3, [pc, #256]	@ (800895c <HAL_DMA_Init+0x148>)
 800885a:	4413      	add	r3, r2
 800885c:	4a3d      	ldr	r2, [pc, #244]	@ (8008954 <HAL_DMA_Init+0x140>)
 800885e:	fba2 2303 	umull	r2, r3, r2, r3
 8008862:	091b      	lsrs	r3, r3, #4
 8008864:	009a      	lsls	r2, r3, #2
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a3c      	ldr	r2, [pc, #240]	@ (8008960 <HAL_DMA_Init+0x14c>)
 800886e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800888a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008894:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80088ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	4313      	orrs	r3, r2
 80088b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68fa      	ldr	r2, [r7, #12]
 80088c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 fb16 	bl	8008ef4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088d0:	d102      	bne.n	80088d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088e0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80088e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80088ee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d010      	beq.n	800891a <HAL_DMA_Init+0x106>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d80c      	bhi.n	800891a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fb35 	bl	8008f70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008916:	605a      	str	r2, [r3, #4]
 8008918:	e008      	b.n	800892c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	40020407 	.word	0x40020407
 8008950:	bffdfff8 	.word	0xbffdfff8
 8008954:	cccccccd 	.word	0xcccccccd
 8008958:	40020000 	.word	0x40020000
 800895c:	bffdfbf8 	.word	0xbffdfbf8
 8008960:	40020400 	.word	0x40020400

08008964 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e07b      	b.n	8008a6e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0201 	bic.w	r2, r2, #1
 8008984:	601a      	str	r2, [r3, #0]

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	4b3a      	ldr	r3, [pc, #232]	@ (8008a78 <HAL_DMA_DeInit+0x114>)
 800898e:	429a      	cmp	r2, r3
 8008990:	d80f      	bhi.n	80089b2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	4b38      	ldr	r3, [pc, #224]	@ (8008a7c <HAL_DMA_DeInit+0x118>)
 800899a:	4413      	add	r3, r2
 800899c:	4a38      	ldr	r2, [pc, #224]	@ (8008a80 <HAL_DMA_DeInit+0x11c>)
 800899e:	fba2 2303 	umull	r2, r3, r2, r3
 80089a2:	091b      	lsrs	r3, r3, #4
 80089a4:	009a      	lsls	r2, r3, #2
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a35      	ldr	r2, [pc, #212]	@ (8008a84 <HAL_DMA_DeInit+0x120>)
 80089ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80089b0:	e00e      	b.n	80089d0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	461a      	mov	r2, r3
 80089b8:	4b33      	ldr	r3, [pc, #204]	@ (8008a88 <HAL_DMA_DeInit+0x124>)
 80089ba:	4413      	add	r3, r2
 80089bc:	4a30      	ldr	r2, [pc, #192]	@ (8008a80 <HAL_DMA_DeInit+0x11c>)
 80089be:	fba2 2303 	umull	r2, r3, r2, r3
 80089c2:	091b      	lsrs	r3, r3, #4
 80089c4:	009a      	lsls	r2, r3, #2
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a2f      	ldr	r2, [pc, #188]	@ (8008a8c <HAL_DMA_DeInit+0x128>)
 80089ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089dc:	f003 021c 	and.w	r2, r3, #28
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089e4:	2101      	movs	r1, #1
 80089e6:	fa01 f202 	lsl.w	r2, r1, r2
 80089ea:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fa81 	bl	8008ef4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008a02:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00f      	beq.n	8008a2c <HAL_DMA_DeInit+0xc8>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	d80b      	bhi.n	8008a2c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 faab 	bl	8008f70 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a1e:	2200      	movs	r2, #0
 8008a20:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008a2a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40020407 	.word	0x40020407
 8008a7c:	bffdfff8 	.word	0xbffdfff8
 8008a80:	cccccccd 	.word	0xcccccccd
 8008a84:	40020000 	.word	0x40020000
 8008a88:	bffdfbf8 	.word	0xbffdfbf8
 8008a8c:	40020400 	.word	0x40020400

08008a90 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b086      	sub	sp, #24
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	60f8      	str	r0, [r7, #12]
 8008a98:	60b9      	str	r1, [r7, #8]
 8008a9a:	607a      	str	r2, [r7, #4]
 8008a9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d101      	bne.n	8008ab0 <HAL_DMA_Start_IT+0x20>
 8008aac:	2302      	movs	r3, #2
 8008aae:	e066      	b.n	8008b7e <HAL_DMA_Start_IT+0xee>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	d155      	bne.n	8008b70 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f022 0201 	bic.w	r2, r2, #1
 8008ae0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	68b9      	ldr	r1, [r7, #8]
 8008ae8:	68f8      	ldr	r0, [r7, #12]
 8008aea:	f000 f9c5 	bl	8008e78 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d008      	beq.n	8008b08 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f042 020e 	orr.w	r2, r2, #14
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	e00f      	b.n	8008b28 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f022 0204 	bic.w	r2, r2, #4
 8008b16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 020a 	orr.w	r2, r2, #10
 8008b26:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d007      	beq.n	8008b46 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b44:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b5c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f042 0201 	orr.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]
 8008b6e:	e005      	b.n	8008b7c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008b78:	2302      	movs	r3, #2
 8008b7a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3718      	adds	r7, #24
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d101      	bne.n	8008b98 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e04f      	b.n	8008c38 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d008      	beq.n	8008bb6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2204      	movs	r2, #4
 8008ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e040      	b.n	8008c38 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 020e 	bic.w	r2, r2, #14
 8008bc4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008bd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f022 0201 	bic.w	r2, r2, #1
 8008be4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bea:	f003 021c 	and.w	r2, r3, #28
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf2:	2101      	movs	r1, #1
 8008bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8008bf8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008c02:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00c      	beq.n	8008c26 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008c24:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d005      	beq.n	8008c68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2204      	movs	r2, #4
 8008c60:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	73fb      	strb	r3, [r7, #15]
 8008c66:	e047      	b.n	8008cf8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 020e 	bic.w	r2, r2, #14
 8008c76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0201 	bic.w	r2, r2, #1
 8008c86:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c9c:	f003 021c 	and.w	r2, r3, #28
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8008caa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008cb4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00c      	beq.n	8008cd8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008ccc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008cd6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d003      	beq.n	8008cf8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	4798      	blx	r3
    }
  }
  return status;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d1e:	f003 031c 	and.w	r3, r3, #28
 8008d22:	2204      	movs	r2, #4
 8008d24:	409a      	lsls	r2, r3
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d026      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x7a>
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f003 0304 	and.w	r3, r3, #4
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d021      	beq.n	8008d7c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d107      	bne.n	8008d56 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0204 	bic.w	r2, r2, #4
 8008d54:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d5a:	f003 021c 	and.w	r2, r3, #28
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d62:	2104      	movs	r1, #4
 8008d64:	fa01 f202 	lsl.w	r2, r1, r2
 8008d68:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d071      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008d7a:	e06c      	b.n	8008e56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d80:	f003 031c 	and.w	r3, r3, #28
 8008d84:	2202      	movs	r2, #2
 8008d86:	409a      	lsls	r2, r3
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d02e      	beq.n	8008dee <HAL_DMA_IRQHandler+0xec>
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d029      	beq.n	8008dee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0320 	and.w	r3, r3, #32
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f022 020a 	bic.w	r2, r2, #10
 8008db6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc4:	f003 021c 	and.w	r2, r3, #28
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dcc:	2102      	movs	r1, #2
 8008dce:	fa01 f202 	lsl.w	r2, r1, r2
 8008dd2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d038      	beq.n	8008e56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008dec:	e033      	b.n	8008e56 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008df2:	f003 031c 	and.w	r3, r3, #28
 8008df6:	2208      	movs	r2, #8
 8008df8:	409a      	lsls	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d02a      	beq.n	8008e58 <HAL_DMA_IRQHandler+0x156>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	f003 0308 	and.w	r3, r3, #8
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d025      	beq.n	8008e58 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f022 020e 	bic.w	r2, r2, #14
 8008e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e20:	f003 021c 	and.w	r2, r3, #28
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e28:	2101      	movs	r1, #1
 8008e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8008e2e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d004      	beq.n	8008e58 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
}
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008e8e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d004      	beq.n	8008ea2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008ea0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ea6:	f003 021c 	and.w	r2, r3, #28
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eae:	2101      	movs	r1, #1
 8008eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8008eb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	2b10      	cmp	r3, #16
 8008ec4:	d108      	bne.n	8008ed8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008ed6:	e007      	b.n	8008ee8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	60da      	str	r2, [r3, #12]
}
 8008ee8:	bf00      	nop
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr

08008ef4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	461a      	mov	r2, r3
 8008f02:	4b17      	ldr	r3, [pc, #92]	@ (8008f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d80a      	bhi.n	8008f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f0c:	089b      	lsrs	r3, r3, #2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008f14:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	6493      	str	r3, [r2, #72]	@ 0x48
 8008f1c:	e007      	b.n	8008f2e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f22:	089b      	lsrs	r3, r3, #2
 8008f24:	009a      	lsls	r2, r3, #2
 8008f26:	4b0f      	ldr	r3, [pc, #60]	@ (8008f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008f28:	4413      	add	r3, r2
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	3b08      	subs	r3, #8
 8008f36:	4a0c      	ldr	r2, [pc, #48]	@ (8008f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008f38:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3c:	091b      	lsrs	r3, r3, #4
 8008f3e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a0a      	ldr	r2, [pc, #40]	@ (8008f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008f44:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	f003 031f 	and.w	r3, r3, #31
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	409a      	lsls	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	40020407 	.word	0x40020407
 8008f64:	4002081c 	.word	0x4002081c
 8008f68:	cccccccd 	.word	0xcccccccd
 8008f6c:	40020880 	.word	0x40020880

08008f70 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f80:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008f86:	4413      	add	r3, r2
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a09      	ldr	r2, [pc, #36]	@ (8008fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008f94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	f003 0303 	and.w	r3, r3, #3
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	409a      	lsls	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	1000823f 	.word	0x1000823f
 8008fb8:	40020940 	.word	0x40020940

08008fbc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008fca:	e14c      	b.n	8009266 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd8:	4013      	ands	r3, r2
 8008fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 813e 	beq.w	8009260 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f003 0303 	and.w	r3, r3, #3
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d005      	beq.n	8008ffc <HAL_GPIO_Init+0x40>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f003 0303 	and.w	r3, r3, #3
 8008ff8:	2b02      	cmp	r3, #2
 8008ffa:	d130      	bne.n	800905e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	005b      	lsls	r3, r3, #1
 8009006:	2203      	movs	r2, #3
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	43db      	mvns	r3, r3
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	4013      	ands	r3, r2
 8009012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	68da      	ldr	r2, [r3, #12]
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	fa02 f303 	lsl.w	r3, r2, r3
 8009020:	693a      	ldr	r2, [r7, #16]
 8009022:	4313      	orrs	r3, r2
 8009024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	693a      	ldr	r2, [r7, #16]
 800902a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009032:	2201      	movs	r2, #1
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	fa02 f303 	lsl.w	r3, r2, r3
 800903a:	43db      	mvns	r3, r3
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	4013      	ands	r3, r2
 8009040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	091b      	lsrs	r3, r3, #4
 8009048:	f003 0201 	and.w	r2, r3, #1
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	4313      	orrs	r3, r2
 8009056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	2b03      	cmp	r3, #3
 8009068:	d017      	beq.n	800909a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	2203      	movs	r2, #3
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	43db      	mvns	r3, r3
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4013      	ands	r3, r2
 8009080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	689a      	ldr	r2, [r3, #8]
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	005b      	lsls	r3, r3, #1
 800908a:	fa02 f303 	lsl.w	r3, r2, r3
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	4313      	orrs	r3, r2
 8009092:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	f003 0303 	and.w	r3, r3, #3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d123      	bne.n	80090ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	08da      	lsrs	r2, r3, #3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3208      	adds	r2, #8
 80090ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	f003 0307 	and.w	r3, r3, #7
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	220f      	movs	r2, #15
 80090be:	fa02 f303 	lsl.w	r3, r2, r3
 80090c2:	43db      	mvns	r3, r3
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	4013      	ands	r3, r2
 80090c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	691a      	ldr	r2, [r3, #16]
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	f003 0307 	and.w	r3, r3, #7
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	fa02 f303 	lsl.w	r3, r2, r3
 80090da:	693a      	ldr	r2, [r7, #16]
 80090dc:	4313      	orrs	r3, r2
 80090de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	08da      	lsrs	r2, r3, #3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3208      	adds	r2, #8
 80090e8:	6939      	ldr	r1, [r7, #16]
 80090ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	005b      	lsls	r3, r3, #1
 80090f8:	2203      	movs	r2, #3
 80090fa:	fa02 f303 	lsl.w	r3, r2, r3
 80090fe:	43db      	mvns	r3, r3
 8009100:	693a      	ldr	r2, [r7, #16]
 8009102:	4013      	ands	r3, r2
 8009104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f003 0203 	and.w	r2, r3, #3
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	005b      	lsls	r3, r3, #1
 8009112:	fa02 f303 	lsl.w	r3, r2, r3
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	4313      	orrs	r3, r2
 800911a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 8098 	beq.w	8009260 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8009130:	4a54      	ldr	r2, [pc, #336]	@ (8009284 <HAL_GPIO_Init+0x2c8>)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	089b      	lsrs	r3, r3, #2
 8009136:	3302      	adds	r3, #2
 8009138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800913c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	f003 0303 	and.w	r3, r3, #3
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	220f      	movs	r2, #15
 8009148:	fa02 f303 	lsl.w	r3, r2, r3
 800914c:	43db      	mvns	r3, r3
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	4013      	ands	r3, r2
 8009152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800915a:	d019      	beq.n	8009190 <HAL_GPIO_Init+0x1d4>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a4a      	ldr	r2, [pc, #296]	@ (8009288 <HAL_GPIO_Init+0x2cc>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d013      	beq.n	800918c <HAL_GPIO_Init+0x1d0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a49      	ldr	r2, [pc, #292]	@ (800928c <HAL_GPIO_Init+0x2d0>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d00d      	beq.n	8009188 <HAL_GPIO_Init+0x1cc>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a48      	ldr	r2, [pc, #288]	@ (8009290 <HAL_GPIO_Init+0x2d4>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d007      	beq.n	8009184 <HAL_GPIO_Init+0x1c8>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a47      	ldr	r2, [pc, #284]	@ (8009294 <HAL_GPIO_Init+0x2d8>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d101      	bne.n	8009180 <HAL_GPIO_Init+0x1c4>
 800917c:	2304      	movs	r3, #4
 800917e:	e008      	b.n	8009192 <HAL_GPIO_Init+0x1d6>
 8009180:	2307      	movs	r3, #7
 8009182:	e006      	b.n	8009192 <HAL_GPIO_Init+0x1d6>
 8009184:	2303      	movs	r3, #3
 8009186:	e004      	b.n	8009192 <HAL_GPIO_Init+0x1d6>
 8009188:	2302      	movs	r3, #2
 800918a:	e002      	b.n	8009192 <HAL_GPIO_Init+0x1d6>
 800918c:	2301      	movs	r3, #1
 800918e:	e000      	b.n	8009192 <HAL_GPIO_Init+0x1d6>
 8009190:	2300      	movs	r3, #0
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	f002 0203 	and.w	r2, r2, #3
 8009198:	0092      	lsls	r2, r2, #2
 800919a:	4093      	lsls	r3, r2
 800919c:	693a      	ldr	r2, [r7, #16]
 800919e:	4313      	orrs	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80091a2:	4938      	ldr	r1, [pc, #224]	@ (8009284 <HAL_GPIO_Init+0x2c8>)
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	089b      	lsrs	r3, r3, #2
 80091a8:	3302      	adds	r3, #2
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80091b0:	4b39      	ldr	r3, [pc, #228]	@ (8009298 <HAL_GPIO_Init+0x2dc>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	43db      	mvns	r3, r3
 80091ba:	693a      	ldr	r2, [r7, #16]
 80091bc:	4013      	ands	r3, r2
 80091be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d003      	beq.n	80091d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80091cc:	693a      	ldr	r2, [r7, #16]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80091d4:	4a30      	ldr	r2, [pc, #192]	@ (8009298 <HAL_GPIO_Init+0x2dc>)
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80091da:	4b2f      	ldr	r3, [pc, #188]	@ (8009298 <HAL_GPIO_Init+0x2dc>)
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	43db      	mvns	r3, r3
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	4013      	ands	r3, r2
 80091e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80091fe:	4a26      	ldr	r2, [pc, #152]	@ (8009298 <HAL_GPIO_Init+0x2dc>)
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009204:	4b24      	ldr	r3, [pc, #144]	@ (8009298 <HAL_GPIO_Init+0x2dc>)
 8009206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800920a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	43db      	mvns	r3, r3
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	4013      	ands	r3, r2
 8009214:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4313      	orrs	r3, r2
 8009228:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800922a:	4a1b      	ldr	r2, [pc, #108]	@ (8009298 <HAL_GPIO_Init+0x2dc>)
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8009232:	4b19      	ldr	r3, [pc, #100]	@ (8009298 <HAL_GPIO_Init+0x2dc>)
 8009234:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	43db      	mvns	r3, r3
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	4013      	ands	r3, r2
 8009242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d003      	beq.n	8009258 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	4313      	orrs	r3, r2
 8009256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009258:	4a0f      	ldr	r2, [pc, #60]	@ (8009298 <HAL_GPIO_Init+0x2dc>)
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	3301      	adds	r3, #1
 8009264:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	fa22 f303 	lsr.w	r3, r2, r3
 8009270:	2b00      	cmp	r3, #0
 8009272:	f47f aeab 	bne.w	8008fcc <HAL_GPIO_Init+0x10>
  }
}
 8009276:	bf00      	nop
 8009278:	bf00      	nop
 800927a:	371c      	adds	r7, #28
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	40010000 	.word	0x40010000
 8009288:	48000400 	.word	0x48000400
 800928c:	48000800 	.word	0x48000800
 8009290:	48000c00 	.word	0x48000c00
 8009294:	48001000 	.word	0x48001000
 8009298:	58000800 	.word	0x58000800

0800929c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800929c:	b480      	push	{r7}
 800929e:	b087      	sub	sp, #28
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80092a6:	2300      	movs	r3, #0
 80092a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80092aa:	e0bb      	b.n	8009424 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80092ac:	2201      	movs	r2, #1
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	fa02 f303 	lsl.w	r3, r2, r3
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	4013      	ands	r3, r2
 80092b8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 80ae 	beq.w	800941e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80092c2:	4a5f      	ldr	r2, [pc, #380]	@ (8009440 <HAL_GPIO_DeInit+0x1a4>)
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	089b      	lsrs	r3, r3, #2
 80092c8:	3302      	adds	r3, #2
 80092ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ce:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f003 0303 	and.w	r3, r3, #3
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	220f      	movs	r2, #15
 80092da:	fa02 f303 	lsl.w	r3, r2, r3
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	4013      	ands	r3, r2
 80092e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80092ea:	d019      	beq.n	8009320 <HAL_GPIO_DeInit+0x84>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a55      	ldr	r2, [pc, #340]	@ (8009444 <HAL_GPIO_DeInit+0x1a8>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d013      	beq.n	800931c <HAL_GPIO_DeInit+0x80>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a54      	ldr	r2, [pc, #336]	@ (8009448 <HAL_GPIO_DeInit+0x1ac>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d00d      	beq.n	8009318 <HAL_GPIO_DeInit+0x7c>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a53      	ldr	r2, [pc, #332]	@ (800944c <HAL_GPIO_DeInit+0x1b0>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d007      	beq.n	8009314 <HAL_GPIO_DeInit+0x78>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	4a52      	ldr	r2, [pc, #328]	@ (8009450 <HAL_GPIO_DeInit+0x1b4>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d101      	bne.n	8009310 <HAL_GPIO_DeInit+0x74>
 800930c:	2304      	movs	r3, #4
 800930e:	e008      	b.n	8009322 <HAL_GPIO_DeInit+0x86>
 8009310:	2307      	movs	r3, #7
 8009312:	e006      	b.n	8009322 <HAL_GPIO_DeInit+0x86>
 8009314:	2303      	movs	r3, #3
 8009316:	e004      	b.n	8009322 <HAL_GPIO_DeInit+0x86>
 8009318:	2302      	movs	r3, #2
 800931a:	e002      	b.n	8009322 <HAL_GPIO_DeInit+0x86>
 800931c:	2301      	movs	r3, #1
 800931e:	e000      	b.n	8009322 <HAL_GPIO_DeInit+0x86>
 8009320:	2300      	movs	r3, #0
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	f002 0203 	and.w	r2, r2, #3
 8009328:	0092      	lsls	r2, r2, #2
 800932a:	4093      	lsls	r3, r2
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	429a      	cmp	r2, r3
 8009330:	d136      	bne.n	80093a0 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009332:	4b48      	ldr	r3, [pc, #288]	@ (8009454 <HAL_GPIO_DeInit+0x1b8>)
 8009334:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	43db      	mvns	r3, r3
 800933c:	4945      	ldr	r1, [pc, #276]	@ (8009454 <HAL_GPIO_DeInit+0x1b8>)
 800933e:	4013      	ands	r3, r2
 8009340:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8009344:	4b43      	ldr	r3, [pc, #268]	@ (8009454 <HAL_GPIO_DeInit+0x1b8>)
 8009346:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	43db      	mvns	r3, r3
 800934e:	4941      	ldr	r1, [pc, #260]	@ (8009454 <HAL_GPIO_DeInit+0x1b8>)
 8009350:	4013      	ands	r3, r2
 8009352:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8009356:	4b3f      	ldr	r3, [pc, #252]	@ (8009454 <HAL_GPIO_DeInit+0x1b8>)
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	43db      	mvns	r3, r3
 800935e:	493d      	ldr	r1, [pc, #244]	@ (8009454 <HAL_GPIO_DeInit+0x1b8>)
 8009360:	4013      	ands	r3, r2
 8009362:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8009364:	4b3b      	ldr	r3, [pc, #236]	@ (8009454 <HAL_GPIO_DeInit+0x1b8>)
 8009366:	685a      	ldr	r2, [r3, #4]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	43db      	mvns	r3, r3
 800936c:	4939      	ldr	r1, [pc, #228]	@ (8009454 <HAL_GPIO_DeInit+0x1b8>)
 800936e:	4013      	ands	r3, r2
 8009370:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	009b      	lsls	r3, r3, #2
 800937a:	220f      	movs	r2, #15
 800937c:	fa02 f303 	lsl.w	r3, r2, r3
 8009380:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009382:	4a2f      	ldr	r2, [pc, #188]	@ (8009440 <HAL_GPIO_DeInit+0x1a4>)
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	089b      	lsrs	r3, r3, #2
 8009388:	3302      	adds	r3, #2
 800938a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	43da      	mvns	r2, r3
 8009392:	482b      	ldr	r0, [pc, #172]	@ (8009440 <HAL_GPIO_DeInit+0x1a4>)
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	089b      	lsrs	r3, r3, #2
 8009398:	400a      	ands	r2, r1
 800939a:	3302      	adds	r3, #2
 800939c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	005b      	lsls	r3, r3, #1
 80093a8:	2103      	movs	r1, #3
 80093aa:	fa01 f303 	lsl.w	r3, r1, r3
 80093ae:	431a      	orrs	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	08da      	lsrs	r2, r3, #3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3208      	adds	r2, #8
 80093bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093c0:	697b      	ldr	r3, [r7, #20]
 80093c2:	f003 0307 	and.w	r3, r3, #7
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	220f      	movs	r2, #15
 80093ca:	fa02 f303 	lsl.w	r3, r2, r3
 80093ce:	43db      	mvns	r3, r3
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	08d2      	lsrs	r2, r2, #3
 80093d4:	4019      	ands	r1, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	3208      	adds	r2, #8
 80093da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	005b      	lsls	r3, r3, #1
 80093e6:	2103      	movs	r1, #3
 80093e8:	fa01 f303 	lsl.w	r3, r1, r3
 80093ec:	43db      	mvns	r3, r3
 80093ee:	401a      	ands	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	2101      	movs	r1, #1
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009400:	43db      	mvns	r3, r3
 8009402:	401a      	ands	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	005b      	lsls	r3, r3, #1
 8009410:	2103      	movs	r1, #3
 8009412:	fa01 f303 	lsl.w	r3, r1, r3
 8009416:	43db      	mvns	r3, r3
 8009418:	401a      	ands	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	3301      	adds	r3, #1
 8009422:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	fa22 f303 	lsr.w	r3, r2, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	f47f af3d 	bne.w	80092ac <HAL_GPIO_DeInit+0x10>
  }
}
 8009432:	bf00      	nop
 8009434:	bf00      	nop
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40010000 	.word	0x40010000
 8009444:	48000400 	.word	0x48000400
 8009448:	48000800 	.word	0x48000800
 800944c:	48000c00 	.word	0x48000c00
 8009450:	48001000 	.word	0x48001000
 8009454:	58000800 	.word	0x58000800

08009458 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	691a      	ldr	r2, [r3, #16]
 8009468:	887b      	ldrh	r3, [r7, #2]
 800946a:	4013      	ands	r3, r2
 800946c:	2b00      	cmp	r3, #0
 800946e:	d002      	beq.n	8009476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009470:	2301      	movs	r3, #1
 8009472:	73fb      	strb	r3, [r7, #15]
 8009474:	e001      	b.n	800947a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009476:	2300      	movs	r3, #0
 8009478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800947a:	7bfb      	ldrb	r3, [r7, #15]
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr

08009488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	807b      	strh	r3, [r7, #2]
 8009494:	4613      	mov	r3, r2
 8009496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009498:	787b      	ldrb	r3, [r7, #1]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800949e:	887a      	ldrh	r2, [r7, #2]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80094a4:	e002      	b.n	80094ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80094a6:	887a      	ldrh	r2, [r7, #2]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80094ac:	bf00      	nop
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	460b      	mov	r3, r1
 80094c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	695b      	ldr	r3, [r3, #20]
 80094c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80094ca:	887a      	ldrh	r2, [r7, #2]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4013      	ands	r3, r2
 80094d0:	041a      	lsls	r2, r3, #16
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	43d9      	mvns	r1, r3
 80094d6:	887b      	ldrh	r3, [r7, #2]
 80094d8:	400b      	ands	r3, r1
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	619a      	str	r2, [r3, #24]
}
 80094e0:	bf00      	nop
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80094f6:	4b08      	ldr	r3, [pc, #32]	@ (8009518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80094f8:	68da      	ldr	r2, [r3, #12]
 80094fa:	88fb      	ldrh	r3, [r7, #6]
 80094fc:	4013      	ands	r3, r2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d006      	beq.n	8009510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009502:	4a05      	ldr	r2, [pc, #20]	@ (8009518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009504:	88fb      	ldrh	r3, [r7, #6]
 8009506:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009508:	88fb      	ldrh	r3, [r7, #6]
 800950a:	4618      	mov	r0, r3
 800950c:	f7f9 fa1a 	bl	8002944 <HAL_GPIO_EXTI_Callback>
  }
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	58000800 	.word	0x58000800

0800951c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8009522:	4b0a      	ldr	r3, [pc, #40]	@ (800954c <HAL_HSEM_IRQHandler+0x30>)
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009528:	4b08      	ldr	r3, [pc, #32]	@ (800954c <HAL_HSEM_IRQHandler+0x30>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	43db      	mvns	r3, r3
 8009530:	4906      	ldr	r1, [pc, #24]	@ (800954c <HAL_HSEM_IRQHandler+0x30>)
 8009532:	4013      	ands	r3, r2
 8009534:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8009536:	4a05      	ldr	r2, [pc, #20]	@ (800954c <HAL_HSEM_IRQHandler+0x30>)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f000 f807 	bl	8009550 <HAL_HSEM_FreeCallback>
}
 8009542:	bf00      	nop
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	58001500 	.word	0x58001500

08009550 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e08d      	b.n	8009692 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800957c:	b2db      	uxtb	r3, r3
 800957e:	2b00      	cmp	r3, #0
 8009580:	d106      	bne.n	8009590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7f9 f8b2 	bl	80026f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2224      	movs	r2, #36	@ 0x24
 8009594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f022 0201 	bic.w	r2, r2, #1
 80095a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685a      	ldr	r2, [r3, #4]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80095b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80095c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68db      	ldr	r3, [r3, #12]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d107      	bne.n	80095de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80095da:	609a      	str	r2, [r3, #8]
 80095dc:	e006      	b.n	80095ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80095ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d108      	bne.n	8009606 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685a      	ldr	r2, [r3, #4]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009602:	605a      	str	r2, [r3, #4]
 8009604:	e007      	b.n	8009616 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009614:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	6812      	ldr	r2, [r2, #0]
 8009620:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009624:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009628:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	68da      	ldr	r2, [r3, #12]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009638:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	691a      	ldr	r2, [r3, #16]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	430a      	orrs	r2, r1
 8009652:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	69d9      	ldr	r1, [r3, #28]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a1a      	ldr	r2, [r3, #32]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2220      	movs	r2, #32
 800967e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e021      	b.n	80096f0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2224      	movs	r2, #36	@ 0x24
 80096b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f022 0201 	bic.w	r2, r2, #1
 80096c2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f7f9 f89f 	bl	8002808 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80096ee:	2300      	movs	r3, #0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3708      	adds	r7, #8
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af02      	add	r7, sp, #8
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	4608      	mov	r0, r1
 8009702:	4611      	mov	r1, r2
 8009704:	461a      	mov	r2, r3
 8009706:	4603      	mov	r3, r0
 8009708:	817b      	strh	r3, [r7, #10]
 800970a:	460b      	mov	r3, r1
 800970c:	813b      	strh	r3, [r7, #8]
 800970e:	4613      	mov	r3, r2
 8009710:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b20      	cmp	r3, #32
 800971c:	f040 80f9 	bne.w	8009912 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d002      	beq.n	800972c <HAL_I2C_Mem_Write+0x34>
 8009726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009728:	2b00      	cmp	r3, #0
 800972a:	d105      	bne.n	8009738 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009732:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e0ed      	b.n	8009914 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800973e:	2b01      	cmp	r3, #1
 8009740:	d101      	bne.n	8009746 <HAL_I2C_Mem_Write+0x4e>
 8009742:	2302      	movs	r3, #2
 8009744:	e0e6      	b.n	8009914 <HAL_I2C_Mem_Write+0x21c>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800974e:	f7fd fe23 	bl	8007398 <HAL_GetTick>
 8009752:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	2319      	movs	r3, #25
 800975a:	2201      	movs	r2, #1
 800975c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f955 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 8009766:	4603      	mov	r3, r0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d001      	beq.n	8009770 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	e0d1      	b.n	8009914 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2221      	movs	r2, #33	@ 0x21
 8009774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2240      	movs	r2, #64	@ 0x40
 800977c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a3a      	ldr	r2, [r7, #32]
 800978a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009790:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009798:	88f8      	ldrh	r0, [r7, #6]
 800979a:	893a      	ldrh	r2, [r7, #8]
 800979c:	8979      	ldrh	r1, [r7, #10]
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	4603      	mov	r3, r0
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f8b9 	bl	8009920 <I2C_RequestMemoryWrite>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d005      	beq.n	80097c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e0a9      	b.n	8009914 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	2bff      	cmp	r3, #255	@ 0xff
 80097c8:	d90e      	bls.n	80097e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	22ff      	movs	r2, #255	@ 0xff
 80097ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097d4:	b2da      	uxtb	r2, r3
 80097d6:	8979      	ldrh	r1, [r7, #10]
 80097d8:	2300      	movs	r3, #0
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 fad9 	bl	8009d98 <I2C_TransferConfig>
 80097e6:	e00f      	b.n	8009808 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	8979      	ldrh	r1, [r7, #10]
 80097fa:	2300      	movs	r3, #0
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	f000 fac8 	bl	8009d98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009808:	697a      	ldr	r2, [r7, #20]
 800980a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f000 f958 	bl	8009ac2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	e07b      	b.n	8009914 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009820:	781a      	ldrb	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800982c:	1c5a      	adds	r2, r3, #1
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009836:	b29b      	uxth	r3, r3
 8009838:	3b01      	subs	r3, #1
 800983a:	b29a      	uxth	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009844:	3b01      	subs	r3, #1
 8009846:	b29a      	uxth	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009850:	b29b      	uxth	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d034      	beq.n	80098c0 <HAL_I2C_Mem_Write+0x1c8>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800985a:	2b00      	cmp	r3, #0
 800985c:	d130      	bne.n	80098c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009864:	2200      	movs	r2, #0
 8009866:	2180      	movs	r1, #128	@ 0x80
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f8d1 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e04d      	b.n	8009914 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800987c:	b29b      	uxth	r3, r3
 800987e:	2bff      	cmp	r3, #255	@ 0xff
 8009880:	d90e      	bls.n	80098a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	22ff      	movs	r2, #255	@ 0xff
 8009886:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800988c:	b2da      	uxtb	r2, r3
 800988e:	8979      	ldrh	r1, [r7, #10]
 8009890:	2300      	movs	r3, #0
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 fa7d 	bl	8009d98 <I2C_TransferConfig>
 800989e:	e00f      	b.n	80098c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	8979      	ldrh	r1, [r7, #10]
 80098b2:	2300      	movs	r3, #0
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 fa6c 	bl	8009d98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d19e      	bne.n	8009808 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 f93e 	bl	8009b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e01a      	b.n	8009914 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2220      	movs	r2, #32
 80098e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6859      	ldr	r1, [r3, #4]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	4b0a      	ldr	r3, [pc, #40]	@ (800991c <HAL_I2C_Mem_Write+0x224>)
 80098f2:	400b      	ands	r3, r1
 80098f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2220      	movs	r2, #32
 80098fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	e000      	b.n	8009914 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009912:	2302      	movs	r3, #2
  }
}
 8009914:	4618      	mov	r0, r3
 8009916:	3718      	adds	r7, #24
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}
 800991c:	fe00e800 	.word	0xfe00e800

08009920 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af02      	add	r7, sp, #8
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	4608      	mov	r0, r1
 800992a:	4611      	mov	r1, r2
 800992c:	461a      	mov	r2, r3
 800992e:	4603      	mov	r3, r0
 8009930:	817b      	strh	r3, [r7, #10]
 8009932:	460b      	mov	r3, r1
 8009934:	813b      	strh	r3, [r7, #8]
 8009936:	4613      	mov	r3, r2
 8009938:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800993a:	88fb      	ldrh	r3, [r7, #6]
 800993c:	b2da      	uxtb	r2, r3
 800993e:	8979      	ldrh	r1, [r7, #10]
 8009940:	4b20      	ldr	r3, [pc, #128]	@ (80099c4 <I2C_RequestMemoryWrite+0xa4>)
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 fa25 	bl	8009d98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800994e:	69fa      	ldr	r2, [r7, #28]
 8009950:	69b9      	ldr	r1, [r7, #24]
 8009952:	68f8      	ldr	r0, [r7, #12]
 8009954:	f000 f8b5 	bl	8009ac2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d001      	beq.n	8009962 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	e02c      	b.n	80099bc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009962:	88fb      	ldrh	r3, [r7, #6]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d105      	bne.n	8009974 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009968:	893b      	ldrh	r3, [r7, #8]
 800996a:	b2da      	uxtb	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	629a      	str	r2, [r3, #40]	@ 0x28
 8009972:	e015      	b.n	80099a0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009974:	893b      	ldrh	r3, [r7, #8]
 8009976:	0a1b      	lsrs	r3, r3, #8
 8009978:	b29b      	uxth	r3, r3
 800997a:	b2da      	uxtb	r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	69b9      	ldr	r1, [r7, #24]
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 f89b 	bl	8009ac2 <I2C_WaitOnTXISFlagUntilTimeout>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e012      	b.n	80099bc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009996:	893b      	ldrh	r3, [r7, #8]
 8009998:	b2da      	uxtb	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	2200      	movs	r2, #0
 80099a8:	2180      	movs	r1, #128	@ 0x80
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 f830 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e000      	b.n	80099bc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	80002000 	.word	0x80002000

080099c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d103      	bne.n	80099e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2200      	movs	r2, #0
 80099e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	f003 0301 	and.w	r3, r3, #1
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d007      	beq.n	8009a04 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	699a      	ldr	r2, [r3, #24]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f042 0201 	orr.w	r2, r2, #1
 8009a02:	619a      	str	r2, [r3, #24]
  }
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a20:	e03b      	b.n	8009a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f000 f8d6 	bl	8009bd8 <I2C_IsErrorOccurred>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e041      	b.n	8009aba <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a3c:	d02d      	beq.n	8009a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a3e:	f7fd fcab 	bl	8007398 <HAL_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	429a      	cmp	r2, r3
 8009a4c:	d302      	bcc.n	8009a54 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d122      	bne.n	8009a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	699a      	ldr	r2, [r3, #24]
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	bf0c      	ite	eq
 8009a64:	2301      	moveq	r3, #1
 8009a66:	2300      	movne	r3, #0
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	79fb      	ldrb	r3, [r7, #7]
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d113      	bne.n	8009a9a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a76:	f043 0220 	orr.w	r2, r3, #32
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2220      	movs	r2, #32
 8009a82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e00f      	b.n	8009aba <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	699a      	ldr	r2, [r3, #24]
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	bf0c      	ite	eq
 8009aaa:	2301      	moveq	r3, #1
 8009aac:	2300      	movne	r3, #0
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	79fb      	ldrb	r3, [r7, #7]
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d0b4      	beq.n	8009a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b084      	sub	sp, #16
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	60f8      	str	r0, [r7, #12]
 8009aca:	60b9      	str	r1, [r7, #8]
 8009acc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009ace:	e033      	b.n	8009b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	68b9      	ldr	r1, [r7, #8]
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 f87f 	bl	8009bd8 <I2C_IsErrorOccurred>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e031      	b.n	8009b48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aea:	d025      	beq.n	8009b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009aec:	f7fd fc54 	bl	8007398 <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d302      	bcc.n	8009b02 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d11a      	bne.n	8009b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	f003 0302 	and.w	r3, r3, #2
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d013      	beq.n	8009b38 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b14:	f043 0220 	orr.w	r2, r3, #32
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e007      	b.n	8009b48 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d1c4      	bne.n	8009ad0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	60f8      	str	r0, [r7, #12]
 8009b58:	60b9      	str	r1, [r7, #8]
 8009b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009b5c:	e02f      	b.n	8009bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	68b9      	ldr	r1, [r7, #8]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f000 f838 	bl	8009bd8 <I2C_IsErrorOccurred>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d001      	beq.n	8009b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e02d      	b.n	8009bce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b72:	f7fd fc11 	bl	8007398 <HAL_GetTick>
 8009b76:	4602      	mov	r2, r0
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	68ba      	ldr	r2, [r7, #8]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d302      	bcc.n	8009b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d11a      	bne.n	8009bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	699b      	ldr	r3, [r3, #24]
 8009b8e:	f003 0320 	and.w	r3, r3, #32
 8009b92:	2b20      	cmp	r3, #32
 8009b94:	d013      	beq.n	8009bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b9a:	f043 0220 	orr.w	r2, r3, #32
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2220      	movs	r2, #32
 8009ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e007      	b.n	8009bce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	f003 0320 	and.w	r3, r3, #32
 8009bc8:	2b20      	cmp	r3, #32
 8009bca:	d1c8      	bne.n	8009b5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b08a      	sub	sp, #40	@ 0x28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009be4:	2300      	movs	r3, #0
 8009be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	f003 0310 	and.w	r3, r3, #16
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d068      	beq.n	8009cd6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2210      	movs	r2, #16
 8009c0a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009c0c:	e049      	b.n	8009ca2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c14:	d045      	beq.n	8009ca2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009c16:	f7fd fbbf 	bl	8007398 <HAL_GetTick>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	429a      	cmp	r2, r3
 8009c24:	d302      	bcc.n	8009c2c <I2C_IsErrorOccurred+0x54>
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d13a      	bne.n	8009ca2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c36:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c3e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c4e:	d121      	bne.n	8009c94 <I2C_IsErrorOccurred+0xbc>
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c56:	d01d      	beq.n	8009c94 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009c58:	7cfb      	ldrb	r3, [r7, #19]
 8009c5a:	2b20      	cmp	r3, #32
 8009c5c:	d01a      	beq.n	8009c94 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	685a      	ldr	r2, [r3, #4]
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c6c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009c6e:	f7fd fb93 	bl	8007398 <HAL_GetTick>
 8009c72:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c74:	e00e      	b.n	8009c94 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009c76:	f7fd fb8f 	bl	8007398 <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	2b19      	cmp	r3, #25
 8009c82:	d907      	bls.n	8009c94 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	f043 0320 	orr.w	r3, r3, #32
 8009c8a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009c92:	e006      	b.n	8009ca2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	f003 0320 	and.w	r3, r3, #32
 8009c9e:	2b20      	cmp	r3, #32
 8009ca0:	d1e9      	bne.n	8009c76 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b20      	cmp	r3, #32
 8009cae:	d003      	beq.n	8009cb8 <I2C_IsErrorOccurred+0xe0>
 8009cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d0aa      	beq.n	8009c0e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d103      	bne.n	8009cc8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	f043 0304 	orr.w	r3, r3, #4
 8009cce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	699b      	ldr	r3, [r3, #24]
 8009cdc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00b      	beq.n	8009d00 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009ce8:	6a3b      	ldr	r3, [r7, #32]
 8009cea:	f043 0301 	orr.w	r3, r3, #1
 8009cee:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009cf8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00b      	beq.n	8009d22 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009d0a:	6a3b      	ldr	r3, [r7, #32]
 8009d0c:	f043 0308 	orr.w	r3, r3, #8
 8009d10:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009d1a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d00b      	beq.n	8009d44 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	f043 0302 	orr.w	r3, r3, #2
 8009d32:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009d3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009d44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01c      	beq.n	8009d86 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff fe3b 	bl	80099c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6859      	ldr	r1, [r3, #4]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <I2C_IsErrorOccurred+0x1bc>)
 8009d5e:	400b      	ands	r3, r1
 8009d60:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d66:	6a3b      	ldr	r3, [r7, #32]
 8009d68:	431a      	orrs	r2, r3
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2220      	movs	r2, #32
 8009d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009d86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3728      	adds	r7, #40	@ 0x28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	fe00e800 	.word	0xfe00e800

08009d98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	607b      	str	r3, [r7, #4]
 8009da2:	460b      	mov	r3, r1
 8009da4:	817b      	strh	r3, [r7, #10]
 8009da6:	4613      	mov	r3, r2
 8009da8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009daa:	897b      	ldrh	r3, [r7, #10]
 8009dac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009db0:	7a7b      	ldrb	r3, [r7, #9]
 8009db2:	041b      	lsls	r3, r3, #16
 8009db4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009db8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009dc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	685a      	ldr	r2, [r3, #4]
 8009dce:	6a3b      	ldr	r3, [r7, #32]
 8009dd0:	0d5b      	lsrs	r3, r3, #21
 8009dd2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009dd6:	4b08      	ldr	r3, [pc, #32]	@ (8009df8 <I2C_TransferConfig+0x60>)
 8009dd8:	430b      	orrs	r3, r1
 8009dda:	43db      	mvns	r3, r3
 8009ddc:	ea02 0103 	and.w	r1, r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009dea:	bf00      	nop
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	03ff63ff 	.word	0x03ff63ff

08009dfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	2b20      	cmp	r3, #32
 8009e10:	d138      	bne.n	8009e84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d101      	bne.n	8009e20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	e032      	b.n	8009e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2224      	movs	r2, #36	@ 0x24
 8009e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f022 0201 	bic.w	r2, r2, #1
 8009e3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009e4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6819      	ldr	r1, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	430a      	orrs	r2, r1
 8009e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f042 0201 	orr.w	r2, r2, #1
 8009e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2220      	movs	r2, #32
 8009e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	e000      	b.n	8009e86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009e84:	2302      	movs	r3, #2
  }
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b085      	sub	sp, #20
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
 8009e9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b20      	cmp	r3, #32
 8009ea6:	d139      	bne.n	8009f1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d101      	bne.n	8009eb6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	e033      	b.n	8009f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2224      	movs	r2, #36	@ 0x24
 8009ec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f022 0201 	bic.w	r2, r2, #1
 8009ed4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009ee4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	021b      	lsls	r3, r3, #8
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0201 	orr.w	r2, r2, #1
 8009f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	e000      	b.n	8009f1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009f1c:	2302      	movs	r3, #2
  }
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
	...

08009f2c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009f34:	4b05      	ldr	r3, [pc, #20]	@ (8009f4c <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	4904      	ldr	r1, [pc, #16]	@ (8009f4c <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	604b      	str	r3, [r1, #4]
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	40010000 	.word	0x40010000

08009f50 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d01e      	beq.n	8009fa0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009f62:	4b13      	ldr	r3, [pc, #76]	@ (8009fb0 <HAL_IPCC_Init+0x60>)
 8009f64:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d102      	bne.n	8009f78 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f7f8 fcaa 	bl	80028cc <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009f78:	68b8      	ldr	r0, [r7, #8]
 8009f7a:	f000 f85b 	bl	800a034 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f000 f82c 	bl	8009fe8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2200      	movs	r2, #0
 8009f94:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8009f9e:	e001      	b.n	8009fa4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	58000c00 	.word	0x58000c00

08009fb4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b085      	sub	sp, #20
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009fc2:	bf00      	nop
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr

08009fce <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b085      	sub	sp, #20
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009fdc:	bf00      	nop
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	60fb      	str	r3, [r7, #12]
 8009ff4:	e00f      	b.n	800a016 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4413      	add	r3, r2
 8009ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800a02c <IPCC_SetDefaultCallbacks+0x44>)
 800a000:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	3306      	adds	r3, #6
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	4a08      	ldr	r2, [pc, #32]	@ (800a030 <IPCC_SetDefaultCallbacks+0x48>)
 800a00e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3301      	adds	r3, #1
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2b05      	cmp	r3, #5
 800a01a:	d9ec      	bls.n	8009ff6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800a01c:	bf00      	nop
 800a01e:	bf00      	nop
 800a020:	3714      	adds	r7, #20
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr
 800a02a:	bf00      	nop
 800a02c:	08009fb5 	.word	0x08009fb5
 800a030:	08009fcf 	.word	0x08009fcf

0800a034 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800a034:	b480      	push	{r7}
 800a036:	b083      	sub	sp, #12
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800a048:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	223f      	movs	r2, #63	@ 0x3f
 800a04e:	609a      	str	r2, [r3, #8]
}
 800a050:	bf00      	nop
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e0c0      	b.n	800a1f0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800a074:	b2db      	uxtb	r3, r3
 800a076:	2b00      	cmp	r3, #0
 800a078:	d106      	bne.n	800a088 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f00e fece 	bl	8018e24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2203      	movs	r2, #3
 800a08c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4618      	mov	r0, r3
 800a096:	f007 f88e 	bl	80111b6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a09a:	2300      	movs	r3, #0
 800a09c:	73fb      	strb	r3, [r7, #15]
 800a09e:	e03e      	b.n	800a11e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a0a0:	7bfa      	ldrb	r2, [r7, #15]
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	4413      	add	r3, r2
 800a0aa:	00db      	lsls	r3, r3, #3
 800a0ac:	440b      	add	r3, r1
 800a0ae:	3311      	adds	r3, #17
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a0b4:	7bfa      	ldrb	r2, [r7, #15]
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	440b      	add	r3, r1
 800a0c2:	3310      	adds	r3, #16
 800a0c4:	7bfa      	ldrb	r2, [r7, #15]
 800a0c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a0c8:	7bfa      	ldrb	r2, [r7, #15]
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	440b      	add	r3, r1
 800a0d6:	3313      	adds	r3, #19
 800a0d8:	2200      	movs	r2, #0
 800a0da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a0dc:	7bfa      	ldrb	r2, [r7, #15]
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	00db      	lsls	r3, r3, #3
 800a0e8:	440b      	add	r3, r1
 800a0ea:	3320      	adds	r3, #32
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a0f0:	7bfa      	ldrb	r2, [r7, #15]
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	440b      	add	r3, r1
 800a0fe:	3324      	adds	r3, #36	@ 0x24
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	1c5a      	adds	r2, r3, #1
 800a10a:	4613      	mov	r3, r2
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	00db      	lsls	r3, r3, #3
 800a112:	440b      	add	r3, r1
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	3301      	adds	r3, #1
 800a11c:	73fb      	strb	r3, [r7, #15]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	791b      	ldrb	r3, [r3, #4]
 800a122:	7bfa      	ldrb	r2, [r7, #15]
 800a124:	429a      	cmp	r2, r3
 800a126:	d3bb      	bcc.n	800a0a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a128:	2300      	movs	r3, #0
 800a12a:	73fb      	strb	r3, [r7, #15]
 800a12c:	e044      	b.n	800a1b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a12e:	7bfa      	ldrb	r2, [r7, #15]
 800a130:	6879      	ldr	r1, [r7, #4]
 800a132:	4613      	mov	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	00db      	lsls	r3, r3, #3
 800a13a:	440b      	add	r3, r1
 800a13c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800a140:	2200      	movs	r2, #0
 800a142:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a144:	7bfa      	ldrb	r2, [r7, #15]
 800a146:	6879      	ldr	r1, [r7, #4]
 800a148:	4613      	mov	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	4413      	add	r3, r2
 800a14e:	00db      	lsls	r3, r3, #3
 800a150:	440b      	add	r3, r1
 800a152:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a156:	7bfa      	ldrb	r2, [r7, #15]
 800a158:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a15a:	7bfa      	ldrb	r2, [r7, #15]
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	4613      	mov	r3, r2
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	4413      	add	r3, r2
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	440b      	add	r3, r1
 800a168:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800a16c:	2200      	movs	r2, #0
 800a16e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a170:	7bfa      	ldrb	r2, [r7, #15]
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	4613      	mov	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	00db      	lsls	r3, r3, #3
 800a17c:	440b      	add	r3, r1
 800a17e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800a182:	2200      	movs	r2, #0
 800a184:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a186:	7bfa      	ldrb	r2, [r7, #15]
 800a188:	6879      	ldr	r1, [r7, #4]
 800a18a:	4613      	mov	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	4413      	add	r3, r2
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	440b      	add	r3, r1
 800a194:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a19c:	7bfa      	ldrb	r2, [r7, #15]
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	440b      	add	r3, r1
 800a1aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1b2:	7bfb      	ldrb	r3, [r7, #15]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	73fb      	strb	r3, [r7, #15]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	791b      	ldrb	r3, [r3, #4]
 800a1bc:	7bfa      	ldrb	r2, [r7, #15]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d3b5      	bcc.n	800a12e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6818      	ldr	r0, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	3304      	adds	r3, #4
 800a1ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a1ce:	f007 f80d 	bl	80111ec <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7a9b      	ldrb	r3, [r3, #10]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d102      	bne.n	800a1ee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f001 fc0e 	bl	800ba0a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a206:	2b01      	cmp	r3, #1
 800a208:	d101      	bne.n	800a20e <HAL_PCD_Start+0x16>
 800a20a:	2302      	movs	r3, #2
 800a20c:	e012      	b.n	800a234 <HAL_PCD_Start+0x3c>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f006 ffb4 	bl	8011188 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4618      	mov	r0, r3
 800a226:	f008 fd91 	bl	8012d4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3708      	adds	r7, #8
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4618      	mov	r0, r3
 800a24a:	f008 fd96 	bl	8012d7a <USB_ReadInterrupts>
 800a24e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a256:	2b00      	cmp	r3, #0
 800a258:	d003      	beq.n	800a262 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fb06 	bl	800a86c <PCD_EP_ISR_Handler>

    return;
 800a260:	e110      	b.n	800a484 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d013      	beq.n	800a294 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a274:	b29a      	uxth	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a27e:	b292      	uxth	r2, r2
 800a280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f00e fe5a 	bl	8018f3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800a28a:	2100      	movs	r1, #0
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f8fc 	bl	800a48a <HAL_PCD_SetAddress>

    return;
 800a292:	e0f7      	b.n	800a484 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00c      	beq.n	800a2b8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a2b0:	b292      	uxth	r2, r2
 800a2b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a2b6:	e0e5      	b.n	800a484 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00c      	beq.n	800a2dc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a2d4:	b292      	uxth	r2, r2
 800a2d6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a2da:	e0d3      	b.n	800a484 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d034      	beq.n	800a350 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f022 0204 	bic.w	r2, r2, #4
 800a2f8:	b292      	uxth	r2, r2
 800a2fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a306:	b29a      	uxth	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f022 0208 	bic.w	r2, r2, #8
 800a310:	b292      	uxth	r2, r2
 800a312:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d107      	bne.n	800a330 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a328:	2100      	movs	r1, #0
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f00e fffc 	bl	8019328 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f00e fe3d 	bl	8018fb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a33e:	b29a      	uxth	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a348:	b292      	uxth	r2, r2
 800a34a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a34e:	e099      	b.n	800a484 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a356:	2b00      	cmp	r3, #0
 800a358:	d027      	beq.n	800a3aa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a362:	b29a      	uxth	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f042 0208 	orr.w	r2, r2, #8
 800a36c:	b292      	uxth	r2, r2
 800a36e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a384:	b292      	uxth	r2, r2
 800a386:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a392:	b29a      	uxth	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f042 0204 	orr.w	r2, r2, #4
 800a39c:	b292      	uxth	r2, r2
 800a39e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f00e fdea 	bl	8018f7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a3a8:	e06c      	b.n	800a484 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d040      	beq.n	800a436 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a3c6:	b292      	uxth	r2, r2
 800a3c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d12b      	bne.n	800a42e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f042 0204 	orr.w	r2, r2, #4
 800a3e8:	b292      	uxth	r2, r2
 800a3ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f042 0208 	orr.w	r2, r2, #8
 800a400:	b292      	uxth	r2, r2
 800a402:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2201      	movs	r2, #1
 800a40a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a416:	b29b      	uxth	r3, r3
 800a418:	089b      	lsrs	r3, r3, #2
 800a41a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a424:	2101      	movs	r1, #1
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f00e ff7e 	bl	8019328 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a42c:	e02a      	b.n	800a484 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f00e fda4 	bl	8018f7c <HAL_PCD_SuspendCallback>
    return;
 800a434:	e026      	b.n	800a484 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00f      	beq.n	800a460 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a448:	b29a      	uxth	r2, r3
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a452:	b292      	uxth	r2, r2
 800a454:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f00e fd62 	bl	8018f22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a45e:	e011      	b.n	800a484 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00c      	beq.n	800a484 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a472:	b29a      	uxth	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a47c:	b292      	uxth	r2, r2
 800a47e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800a482:	bf00      	nop
  }
}
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b082      	sub	sp, #8
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d101      	bne.n	800a4a4 <HAL_PCD_SetAddress+0x1a>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e012      	b.n	800a4ca <HAL_PCD_SetAddress+0x40>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	78fa      	ldrb	r2, [r7, #3]
 800a4b0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	78fa      	ldrb	r2, [r7, #3]
 800a4b8:	4611      	mov	r1, r2
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f008 fc32 	bl	8012d24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	4608      	mov	r0, r1
 800a4dc:	4611      	mov	r1, r2
 800a4de:	461a      	mov	r2, r3
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	70fb      	strb	r3, [r7, #3]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	803b      	strh	r3, [r7, #0]
 800a4e8:	4613      	mov	r3, r2
 800a4ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a4f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	da0e      	bge.n	800a516 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4f8:	78fb      	ldrb	r3, [r7, #3]
 800a4fa:	f003 0207 	and.w	r2, r3, #7
 800a4fe:	4613      	mov	r3, r2
 800a500:	009b      	lsls	r3, r3, #2
 800a502:	4413      	add	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	3310      	adds	r3, #16
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	4413      	add	r3, r2
 800a50c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2201      	movs	r2, #1
 800a512:	705a      	strb	r2, [r3, #1]
 800a514:	e00e      	b.n	800a534 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a516:	78fb      	ldrb	r3, [r7, #3]
 800a518:	f003 0207 	and.w	r2, r3, #7
 800a51c:	4613      	mov	r3, r2
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	00db      	lsls	r3, r3, #3
 800a524:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	4413      	add	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	b2da      	uxtb	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800a540:	883b      	ldrh	r3, [r7, #0]
 800a542:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	78ba      	ldrb	r2, [r7, #2]
 800a54e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a550:	78bb      	ldrb	r3, [r7, #2]
 800a552:	2b02      	cmp	r3, #2
 800a554:	d102      	bne.n	800a55c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2200      	movs	r2, #0
 800a55a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a562:	2b01      	cmp	r3, #1
 800a564:	d101      	bne.n	800a56a <HAL_PCD_EP_Open+0x98>
 800a566:	2302      	movs	r3, #2
 800a568:	e00e      	b.n	800a588 <HAL_PCD_EP_Open+0xb6>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68f9      	ldr	r1, [r7, #12]
 800a578:	4618      	mov	r0, r3
 800a57a:	f006 fe55 	bl	8011228 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800a586:	7afb      	ldrb	r3, [r7, #11]
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	460b      	mov	r3, r1
 800a59a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a59c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	da0e      	bge.n	800a5c2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	f003 0207 	and.w	r2, r3, #7
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	00db      	lsls	r3, r3, #3
 800a5b2:	3310      	adds	r3, #16
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2201      	movs	r2, #1
 800a5be:	705a      	strb	r2, [r3, #1]
 800a5c0:	e00e      	b.n	800a5e0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	f003 0207 	and.w	r2, r3, #7
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	00db      	lsls	r3, r3, #3
 800a5d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5e0:	78fb      	ldrb	r3, [r7, #3]
 800a5e2:	f003 0307 	and.w	r3, r3, #7
 800a5e6:	b2da      	uxtb	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d101      	bne.n	800a5fa <HAL_PCD_EP_Close+0x6a>
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	e00e      	b.n	800a618 <HAL_PCD_EP_Close+0x88>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68f9      	ldr	r1, [r7, #12]
 800a608:	4618      	mov	r0, r3
 800a60a:	f007 faf5 	bl	8011bf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	607a      	str	r2, [r7, #4]
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	460b      	mov	r3, r1
 800a62e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a630:	7afb      	ldrb	r3, [r7, #11]
 800a632:	f003 0207 	and.w	r2, r3, #7
 800a636:	4613      	mov	r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	4413      	add	r3, r2
 800a63c:	00db      	lsls	r3, r3, #3
 800a63e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	4413      	add	r3, r2
 800a646:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	683a      	ldr	r2, [r7, #0]
 800a652:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	2200      	movs	r2, #0
 800a658:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2200      	movs	r2, #0
 800a65e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a660:	7afb      	ldrb	r3, [r7, #11]
 800a662:	f003 0307 	and.w	r3, r3, #7
 800a666:	b2da      	uxtb	r2, r3
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6979      	ldr	r1, [r7, #20]
 800a672:	4618      	mov	r0, r3
 800a674:	f007 fcad 	bl	8011fd2 <USB_EPStartXfer>

  return HAL_OK;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3718      	adds	r7, #24
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a682:	b480      	push	{r7}
 800a684:	b083      	sub	sp, #12
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
 800a68a:	460b      	mov	r3, r1
 800a68c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a68e:	78fb      	ldrb	r3, [r7, #3]
 800a690:	f003 0207 	and.w	r2, r3, #7
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	4613      	mov	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	00db      	lsls	r3, r3, #3
 800a69e:	440b      	add	r3, r1
 800a6a0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800a6a4:	681b      	ldr	r3, [r3, #0]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	370c      	adds	r7, #12
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b086      	sub	sp, #24
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	603b      	str	r3, [r7, #0]
 800a6be:	460b      	mov	r3, r1
 800a6c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6c2:	7afb      	ldrb	r3, [r7, #11]
 800a6c4:	f003 0207 	and.w	r2, r3, #7
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	00db      	lsls	r3, r3, #3
 800a6d0:	3310      	adds	r3, #16
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6fe:	7afb      	ldrb	r3, [r7, #11]
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	b2da      	uxtb	r2, r3
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	6979      	ldr	r1, [r7, #20]
 800a710:	4618      	mov	r0, r3
 800a712:	f007 fc5e 	bl	8011fd2 <USB_EPStartXfer>

  return HAL_OK;
 800a716:	2300      	movs	r3, #0
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3718      	adds	r7, #24
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	f003 0307 	and.w	r3, r3, #7
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	7912      	ldrb	r2, [r2, #4]
 800a736:	4293      	cmp	r3, r2
 800a738:	d901      	bls.n	800a73e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a73a:	2301      	movs	r3, #1
 800a73c:	e03e      	b.n	800a7bc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a73e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a742:	2b00      	cmp	r3, #0
 800a744:	da0e      	bge.n	800a764 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a746:	78fb      	ldrb	r3, [r7, #3]
 800a748:	f003 0207 	and.w	r2, r3, #7
 800a74c:	4613      	mov	r3, r2
 800a74e:	009b      	lsls	r3, r3, #2
 800a750:	4413      	add	r3, r2
 800a752:	00db      	lsls	r3, r3, #3
 800a754:	3310      	adds	r3, #16
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	4413      	add	r3, r2
 800a75a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2201      	movs	r2, #1
 800a760:	705a      	strb	r2, [r3, #1]
 800a762:	e00c      	b.n	800a77e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a764:	78fa      	ldrb	r2, [r7, #3]
 800a766:	4613      	mov	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4413      	add	r3, r2
 800a76c:	00db      	lsls	r3, r3, #3
 800a76e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	4413      	add	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2201      	movs	r2, #1
 800a782:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a784:	78fb      	ldrb	r3, [r7, #3]
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a796:	2b01      	cmp	r3, #1
 800a798:	d101      	bne.n	800a79e <HAL_PCD_EP_SetStall+0x7e>
 800a79a:	2302      	movs	r3, #2
 800a79c:	e00e      	b.n	800a7bc <HAL_PCD_EP_SetStall+0x9c>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	68f9      	ldr	r1, [r7, #12]
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f008 f9bf 	bl	8012b30 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	7912      	ldrb	r2, [r2, #4]
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d901      	bls.n	800a7e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e040      	b.n	800a864 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a7e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	da0e      	bge.n	800a808 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7ea:	78fb      	ldrb	r3, [r7, #3]
 800a7ec:	f003 0207 	and.w	r2, r3, #7
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	00db      	lsls	r3, r3, #3
 800a7f8:	3310      	adds	r3, #16
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2201      	movs	r2, #1
 800a804:	705a      	strb	r2, [r3, #1]
 800a806:	e00e      	b.n	800a826 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	f003 0207 	and.w	r2, r3, #7
 800a80e:	4613      	mov	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	00db      	lsls	r3, r3, #3
 800a816:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	4413      	add	r3, r2
 800a81e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a82c:	78fb      	ldrb	r3, [r7, #3]
 800a82e:	f003 0307 	and.w	r3, r3, #7
 800a832:	b2da      	uxtb	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d101      	bne.n	800a846 <HAL_PCD_EP_ClrStall+0x82>
 800a842:	2302      	movs	r3, #2
 800a844:	e00e      	b.n	800a864 <HAL_PCD_EP_ClrStall+0xa0>
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68f9      	ldr	r1, [r7, #12]
 800a854:	4618      	mov	r0, r3
 800a856:	f008 f9bc 	bl	8012bd2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b092      	sub	sp, #72	@ 0x48
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a874:	e333      	b.n	800aede <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a87e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a880:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a882:	b2db      	uxtb	r3, r3
 800a884:	f003 030f 	and.w	r3, r3, #15
 800a888:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800a88c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a890:	2b00      	cmp	r3, #0
 800a892:	f040 8108 	bne.w	800aaa6 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a896:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a898:	f003 0310 	and.w	r3, r3, #16
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d14c      	bne.n	800a93a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800a8ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8b0:	813b      	strh	r3, [r7, #8]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	893b      	ldrh	r3, [r7, #8]
 800a8b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	3310      	adds	r3, #16
 800a8c8:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d8:	781b      	ldrb	r3, [r3, #0]
 800a8da:	00db      	lsls	r3, r3, #3
 800a8dc:	4413      	add	r3, r2
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	6812      	ldr	r2, [r2, #0]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a8ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a8f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f4:	695a      	ldr	r2, [r3, #20]
 800a8f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	441a      	add	r2, r3
 800a8fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8fe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a900:	2100      	movs	r1, #0
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f00e faf3 	bl	8018eee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	7b1b      	ldrb	r3, [r3, #12]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 82e5 	beq.w	800aede <PCD_EP_ISR_Handler+0x672>
 800a914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f040 82e0 	bne.w	800aede <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	7b1b      	ldrb	r3, [r3, #12]
 800a922:	b2db      	uxtb	r3, r3
 800a924:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	731a      	strb	r2, [r3, #12]
 800a938:	e2d1      	b.n	800aede <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a940:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a94a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a94c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a950:	2b00      	cmp	r3, #0
 800a952:	d032      	beq.n	800a9ba <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	461a      	mov	r2, r3
 800a960:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	4413      	add	r3, r2
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	6812      	ldr	r2, [r2, #0]
 800a96c:	4413      	add	r3, r2
 800a96e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a978:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a97a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6818      	ldr	r0, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800a986:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a988:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a98a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a98c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a98e:	b29b      	uxth	r3, r3
 800a990:	f008 fa45 	bl	8012e1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	817b      	strh	r3, [r7, #10]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	897a      	ldrh	r2, [r7, #10]
 800a9aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a9ae:	b292      	uxth	r2, r2
 800a9b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f00e fa6e 	bl	8018e94 <HAL_PCD_SetupStageCallback>
 800a9b8:	e291      	b.n	800aede <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a9ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f280 828d 	bge.w	800aede <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	881b      	ldrh	r3, [r3, #0]
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800a9d0:	4013      	ands	r3, r2
 800a9d2:	81fb      	strh	r3, [r7, #14]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	89fa      	ldrh	r2, [r7, #14]
 800a9da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a9de:	b292      	uxth	r2, r2
 800a9e0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	4413      	add	r3, r2
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	6812      	ldr	r2, [r2, #0]
 800a9fa:	4413      	add	r3, r2
 800a9fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800aa06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa08:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800aa0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d019      	beq.n	800aa46 <PCD_EP_ISR_Handler+0x1da>
 800aa12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d015      	beq.n	800aa46 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6818      	ldr	r0, [r3, #0]
 800aa1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa20:	6959      	ldr	r1, [r3, #20]
 800aa22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa24:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800aa26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa28:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	f008 f9f7 	bl	8012e1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800aa30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa32:	695a      	ldr	r2, [r3, #20]
 800aa34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa36:	69db      	ldr	r3, [r3, #28]
 800aa38:	441a      	add	r2, r3
 800aa3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aa3c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800aa3e:	2100      	movs	r1, #0
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f00e fa39 	bl	8018eb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800aa4e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f040 8242 	bne.w	800aede <PCD_EP_ISR_Handler+0x672>
 800aa5a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa5c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800aa60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa64:	f000 823b 	beq.w	800aede <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa78:	81bb      	strh	r3, [r7, #12]
 800aa7a:	89bb      	ldrh	r3, [r7, #12]
 800aa7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa80:	81bb      	strh	r3, [r7, #12]
 800aa82:	89bb      	ldrh	r3, [r7, #12]
 800aa84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa88:	81bb      	strh	r3, [r7, #12]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681a      	ldr	r2, [r3, #0]
 800aa8e:	89bb      	ldrh	r3, [r7, #12]
 800aa90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	8013      	strh	r3, [r2, #0]
 800aaa4:	e21b      	b.n	800aede <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	881b      	ldrh	r3, [r3, #0]
 800aab6:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800aab8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f280 80f1 	bge.w	800aca4 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	461a      	mov	r2, r3
 800aac8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800aad8:	4013      	ands	r3, r2
 800aada:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	461a      	mov	r2, r3
 800aae2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800aaec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800aaf0:	b292      	uxth	r2, r2
 800aaf2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800aaf4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800aaf8:	4613      	mov	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	00db      	lsls	r3, r3, #3
 800ab00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	4413      	add	r3, r2
 800ab08:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800ab0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab0c:	7b1b      	ldrb	r3, [r3, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d123      	bne.n	800ab5a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	4413      	add	r3, r2
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	6812      	ldr	r2, [r2, #0]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab30:	881b      	ldrh	r3, [r3, #0]
 800ab32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab36:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800ab3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f000 808b 	beq.w	800ac5a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6818      	ldr	r0, [r3, #0]
 800ab48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab4a:	6959      	ldr	r1, [r3, #20]
 800ab4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab4e:	88da      	ldrh	r2, [r3, #6]
 800ab50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ab54:	f008 f963 	bl	8012e1e <USB_ReadPMA>
 800ab58:	e07f      	b.n	800ac5a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800ab5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab5c:	78db      	ldrb	r3, [r3, #3]
 800ab5e:	2b02      	cmp	r3, #2
 800ab60:	d109      	bne.n	800ab76 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800ab62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab64:	461a      	mov	r2, r3
 800ab66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f000 f9c6 	bl	800aefa <HAL_PCD_EP_DB_Receive>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ab74:	e071      	b.n	800ac5a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	461a      	mov	r2, r3
 800ab98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	441a      	add	r2, r3
 800aba0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	461a      	mov	r2, r3
 800abbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d022      	beq.n	800ac16 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abd8:	b29b      	uxth	r3, r3
 800abda:	461a      	mov	r2, r3
 800abdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	00db      	lsls	r3, r3, #3
 800abe2:	4413      	add	r3, r2
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	6812      	ldr	r2, [r2, #0]
 800abe8:	4413      	add	r3, r2
 800abea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abf4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800abf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d02c      	beq.n	800ac5a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6818      	ldr	r0, [r3, #0]
 800ac04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac06:	6959      	ldr	r1, [r3, #20]
 800ac08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac0a:	891a      	ldrh	r2, [r3, #8]
 800ac0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac10:	f008 f905 	bl	8012e1e <USB_ReadPMA>
 800ac14:	e021      	b.n	800ac5a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	461a      	mov	r2, r3
 800ac22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	00db      	lsls	r3, r3, #3
 800ac28:	4413      	add	r3, r2
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	6812      	ldr	r2, [r2, #0]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800ac3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d009      	beq.n	800ac5a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6818      	ldr	r0, [r3, #0]
 800ac4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac4c:	6959      	ldr	r1, [r3, #20]
 800ac4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac50:	895a      	ldrh	r2, [r3, #10]
 800ac52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac56:	f008 f8e2 	bl	8012e1e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800ac5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac5c:	69da      	ldr	r2, [r3, #28]
 800ac5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac62:	441a      	add	r2, r3
 800ac64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800ac68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac6a:	695a      	ldr	r2, [r3, #20]
 800ac6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac70:	441a      	add	r2, r3
 800ac72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac74:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800ac76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d005      	beq.n	800ac8a <PCD_EP_ISR_Handler+0x41e>
 800ac7e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800ac82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d206      	bcs.n	800ac98 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800ac8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f00e f911 	bl	8018eb8 <HAL_PCD_DataOutStageCallback>
 800ac96:	e005      	b.n	800aca4 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f007 f997 	bl	8011fd2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800aca4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acaa:	2b00      	cmp	r3, #0
 800acac:	f000 8117 	beq.w	800aede <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 800acb0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800acb4:	4613      	mov	r3, r2
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4413      	add	r3, r2
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	3310      	adds	r3, #16
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	4413      	add	r3, r2
 800acc2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	461a      	mov	r2, r3
 800acca:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800acda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acde:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	461a      	mov	r2, r3
 800ace6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	441a      	add	r2, r3
 800acee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800acf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800acfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acfe:	78db      	ldrb	r3, [r3, #3]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	f040 80a1 	bne.w	800ae48 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 800ad06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad08:	2200      	movs	r2, #0
 800ad0a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800ad0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad0e:	7b1b      	ldrb	r3, [r3, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 8092 	beq.w	800ae3a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ad16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d046      	beq.n	800adae <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ad20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad22:	785b      	ldrb	r3, [r3, #1]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d126      	bne.n	800ad76 <PCD_EP_ISR_Handler+0x50a>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	617b      	str	r3, [r7, #20]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	461a      	mov	r2, r3
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	00da      	lsls	r2, r3, #3
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	4413      	add	r3, r2
 800ad4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ad4e:	613b      	str	r3, [r7, #16]
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	801a      	strh	r2, [r3, #0]
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad6e:	b29a      	uxth	r2, r3
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	801a      	strh	r2, [r3, #0]
 800ad74:	e061      	b.n	800ae3a <PCD_EP_ISR_Handler+0x5ce>
 800ad76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d15d      	bne.n	800ae3a <PCD_EP_ISR_Handler+0x5ce>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	61fb      	str	r3, [r7, #28]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	461a      	mov	r2, r3
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	4413      	add	r3, r2
 800ad94:	61fb      	str	r3, [r7, #28]
 800ad96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	00da      	lsls	r2, r3, #3
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ada4:	61bb      	str	r3, [r7, #24]
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	2200      	movs	r2, #0
 800adaa:	801a      	strh	r2, [r3, #0]
 800adac:	e045      	b.n	800ae3a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800adb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adb6:	785b      	ldrb	r3, [r3, #1]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d126      	bne.n	800ae0a <PCD_EP_ISR_Handler+0x59e>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adca:	b29b      	uxth	r3, r3
 800adcc:	461a      	mov	r2, r3
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	4413      	add	r3, r2
 800add2:	627b      	str	r3, [r7, #36]	@ 0x24
 800add4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	00da      	lsls	r2, r3, #3
 800adda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800addc:	4413      	add	r3, r2
 800adde:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ade2:	623b      	str	r3, [r7, #32]
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	881b      	ldrh	r3, [r3, #0]
 800ade8:	b29b      	uxth	r3, r3
 800adea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adee:	b29a      	uxth	r2, r3
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	801a      	strh	r2, [r3, #0]
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	881b      	ldrh	r3, [r3, #0]
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	801a      	strh	r2, [r3, #0]
 800ae08:	e017      	b.n	800ae3a <PCD_EP_ISR_Handler+0x5ce>
 800ae0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae0c:	785b      	ldrb	r3, [r3, #1]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d113      	bne.n	800ae3a <PCD_EP_ISR_Handler+0x5ce>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae20:	4413      	add	r3, r2
 800ae22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	00da      	lsls	r2, r3, #3
 800ae2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae2c:	4413      	add	r3, r2
 800ae2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae32:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae36:	2200      	movs	r2, #0
 800ae38:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ae3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	4619      	mov	r1, r3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f00e f854 	bl	8018eee <HAL_PCD_DataInStageCallback>
 800ae46:	e04a      	b.n	800aede <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ae48:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ae4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d13f      	bne.n	800aed2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	00db      	lsls	r3, r3, #3
 800ae64:	4413      	add	r3, r2
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	6812      	ldr	r2, [r2, #0]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae76:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800ae78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae7a:	699a      	ldr	r2, [r3, #24]
 800ae7c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d906      	bls.n	800ae90 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800ae82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae84:	699a      	ldr	r2, [r3, #24]
 800ae86:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800ae88:	1ad2      	subs	r2, r2, r3
 800ae8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae8c:	619a      	str	r2, [r3, #24]
 800ae8e:	e002      	b.n	800ae96 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800ae90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae92:	2200      	movs	r2, #0
 800ae94:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ae96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d106      	bne.n	800aeac <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ae9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f00e f822 	bl	8018eee <HAL_PCD_DataInStageCallback>
 800aeaa:	e018      	b.n	800aede <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800aeac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeae:	695a      	ldr	r2, [r3, #20]
 800aeb0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aeb2:	441a      	add	r2, r3
 800aeb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeb6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800aeb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aeba:	69da      	ldr	r2, [r3, #28]
 800aebc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800aebe:	441a      	add	r2, r3
 800aec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aec2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeca:	4618      	mov	r0, r3
 800aecc:	f007 f881 	bl	8011fd2 <USB_EPStartXfer>
 800aed0:	e005      	b.n	800aede <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800aed2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aed4:	461a      	mov	r2, r3
 800aed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 f917 	bl	800b10c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	b21b      	sxth	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f6ff acc3 	blt.w	800a876 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3748      	adds	r7, #72	@ 0x48
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}

0800aefa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800aefa:	b580      	push	{r7, lr}
 800aefc:	b088      	sub	sp, #32
 800aefe:	af00      	add	r7, sp, #0
 800af00:	60f8      	str	r0, [r7, #12]
 800af02:	60b9      	str	r1, [r7, #8]
 800af04:	4613      	mov	r3, r2
 800af06:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800af08:	88fb      	ldrh	r3, [r7, #6]
 800af0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d07c      	beq.n	800b00c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	461a      	mov	r2, r3
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	4413      	add	r3, r2
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	6812      	ldr	r2, [r2, #0]
 800af2a:	4413      	add	r3, r2
 800af2c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af30:	881b      	ldrh	r3, [r3, #0]
 800af32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af36:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	699a      	ldr	r2, [r3, #24]
 800af3c:	8b7b      	ldrh	r3, [r7, #26]
 800af3e:	429a      	cmp	r2, r3
 800af40:	d306      	bcc.n	800af50 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	699a      	ldr	r2, [r3, #24]
 800af46:	8b7b      	ldrh	r3, [r7, #26]
 800af48:	1ad2      	subs	r2, r2, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	619a      	str	r2, [r3, #24]
 800af4e:	e002      	b.n	800af56 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2200      	movs	r2, #0
 800af54:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	699b      	ldr	r3, [r3, #24]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d123      	bne.n	800afa6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4413      	add	r3, r2
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	b29b      	uxth	r3, r3
 800af70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800af74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af78:	833b      	strh	r3, [r7, #24]
 800af7a:	8b3b      	ldrh	r3, [r7, #24]
 800af7c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800af80:	833b      	strh	r3, [r7, #24]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	441a      	add	r2, r3
 800af90:	8b3b      	ldrh	r3, [r7, #24]
 800af92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800afa6:	88fb      	ldrh	r3, [r7, #6]
 800afa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01f      	beq.n	800aff0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	461a      	mov	r2, r3
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afca:	82fb      	strh	r3, [r7, #22]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	441a      	add	r2, r3
 800afda:	8afb      	ldrh	r3, [r7, #22]
 800afdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afe0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afe8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800afec:	b29b      	uxth	r3, r3
 800afee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800aff0:	8b7b      	ldrh	r3, [r7, #26]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f000 8085 	beq.w	800b102 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	6818      	ldr	r0, [r3, #0]
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	6959      	ldr	r1, [r3, #20]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	891a      	ldrh	r2, [r3, #8]
 800b004:	8b7b      	ldrh	r3, [r7, #26]
 800b006:	f007 ff0a 	bl	8012e1e <USB_ReadPMA>
 800b00a:	e07a      	b.n	800b102 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b014:	b29b      	uxth	r3, r3
 800b016:	461a      	mov	r2, r3
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	4413      	add	r3, r2
 800b020:	68fa      	ldr	r2, [r7, #12]
 800b022:	6812      	ldr	r2, [r2, #0]
 800b024:	4413      	add	r3, r2
 800b026:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b02a:	881b      	ldrh	r3, [r3, #0]
 800b02c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b030:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	699a      	ldr	r2, [r3, #24]
 800b036:	8b7b      	ldrh	r3, [r7, #26]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d306      	bcc.n	800b04a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	699a      	ldr	r2, [r3, #24]
 800b040:	8b7b      	ldrh	r3, [r7, #26]
 800b042:	1ad2      	subs	r2, r2, r3
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	619a      	str	r2, [r3, #24]
 800b048:	e002      	b.n	800b050 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2200      	movs	r2, #0
 800b04e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	699b      	ldr	r3, [r3, #24]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d123      	bne.n	800b0a0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	461a      	mov	r2, r3
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	4413      	add	r3, r2
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	b29b      	uxth	r3, r3
 800b06a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b072:	83fb      	strh	r3, [r7, #30]
 800b074:	8bfb      	ldrh	r3, [r7, #30]
 800b076:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b07a:	83fb      	strh	r3, [r7, #30]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	461a      	mov	r2, r3
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	441a      	add	r2, r3
 800b08a:	8bfb      	ldrh	r3, [r7, #30]
 800b08c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800b0a0:	88fb      	ldrh	r3, [r7, #6]
 800b0a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d11f      	bne.n	800b0ea <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4413      	add	r3, r2
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0c4:	83bb      	strh	r3, [r7, #28]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	441a      	add	r2, r3
 800b0d4:	8bbb      	ldrh	r3, [r7, #28]
 800b0d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b0da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b0de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800b0ea:	8b7b      	ldrh	r3, [r7, #26]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d008      	beq.n	800b102 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	6818      	ldr	r0, [r3, #0]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	6959      	ldr	r1, [r3, #20]
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	895a      	ldrh	r2, [r3, #10]
 800b0fc:	8b7b      	ldrh	r3, [r7, #26]
 800b0fe:	f007 fe8e 	bl	8012e1e <USB_ReadPMA>
    }
  }

  return count;
 800b102:	8b7b      	ldrh	r3, [r7, #26]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3720      	adds	r7, #32
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b0a6      	sub	sp, #152	@ 0x98
 800b110:	af00      	add	r7, sp, #0
 800b112:	60f8      	str	r0, [r7, #12]
 800b114:	60b9      	str	r1, [r7, #8]
 800b116:	4613      	mov	r3, r2
 800b118:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800b11a:	88fb      	ldrh	r3, [r7, #6]
 800b11c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b120:	2b00      	cmp	r3, #0
 800b122:	f000 81f7 	beq.w	800b514 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b12e:	b29b      	uxth	r3, r3
 800b130:	461a      	mov	r2, r3
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	4413      	add	r3, r2
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	6812      	ldr	r2, [r2, #0]
 800b13e:	4413      	add	r3, r2
 800b140:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b14a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	699a      	ldr	r2, [r3, #24]
 800b152:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b156:	429a      	cmp	r2, r3
 800b158:	d907      	bls.n	800b16a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	699a      	ldr	r2, [r3, #24]
 800b15e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b162:	1ad2      	subs	r2, r2, r3
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	619a      	str	r2, [r3, #24]
 800b168:	e002      	b.n	800b170 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2200      	movs	r2, #0
 800b16e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	699b      	ldr	r3, [r3, #24]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f040 80e1 	bne.w	800b33c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	785b      	ldrb	r3, [r3, #1]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d126      	bne.n	800b1d0 <HAL_PCD_EP_DB_Transmit+0xc4>
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	633b      	str	r3, [r7, #48]	@ 0x30
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b190:	b29b      	uxth	r3, r3
 800b192:	461a      	mov	r2, r3
 800b194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b196:	4413      	add	r3, r2
 800b198:	633b      	str	r3, [r7, #48]	@ 0x30
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	00da      	lsls	r2, r3, #3
 800b1a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b8:	801a      	strh	r2, [r3, #0]
 800b1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1cc:	801a      	strh	r2, [r3, #0]
 800b1ce:	e01a      	b.n	800b206 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	785b      	ldrb	r3, [r3, #1]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d116      	bne.n	800b206 <HAL_PCD_EP_DB_Transmit+0xfa>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ec:	4413      	add	r3, r2
 800b1ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	00da      	lsls	r2, r3, #3
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f8:	4413      	add	r3, r2
 800b1fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b1fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800b200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b202:	2200      	movs	r2, #0
 800b204:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	785b      	ldrb	r3, [r3, #1]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d126      	bne.n	800b262 <HAL_PCD_EP_DB_Transmit+0x156>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	623b      	str	r3, [r7, #32]
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b222:	b29b      	uxth	r3, r3
 800b224:	461a      	mov	r2, r3
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	4413      	add	r3, r2
 800b22a:	623b      	str	r3, [r7, #32]
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	781b      	ldrb	r3, [r3, #0]
 800b230:	00da      	lsls	r2, r3, #3
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	4413      	add	r3, r2
 800b236:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b23a:	61fb      	str	r3, [r7, #28]
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	b29b      	uxth	r3, r3
 800b242:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b246:	b29a      	uxth	r2, r3
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	801a      	strh	r2, [r3, #0]
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	881b      	ldrh	r3, [r3, #0]
 800b250:	b29b      	uxth	r3, r3
 800b252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	69fb      	ldr	r3, [r7, #28]
 800b25e:	801a      	strh	r2, [r3, #0]
 800b260:	e017      	b.n	800b292 <HAL_PCD_EP_DB_Transmit+0x186>
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	785b      	ldrb	r3, [r3, #1]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d113      	bne.n	800b292 <HAL_PCD_EP_DB_Transmit+0x186>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b272:	b29b      	uxth	r3, r3
 800b274:	461a      	mov	r2, r3
 800b276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b278:	4413      	add	r3, r2
 800b27a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	00da      	lsls	r2, r3, #3
 800b282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b284:	4413      	add	r3, r2
 800b286:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b28a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b28c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28e:	2200      	movs	r2, #0
 800b290:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	78db      	ldrb	r3, [r3, #3]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d123      	bne.n	800b2e2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	881b      	ldrh	r3, [r3, #0]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b2b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2b4:	837b      	strh	r3, [r7, #26]
 800b2b6:	8b7b      	ldrh	r3, [r7, #26]
 800b2b8:	f083 0320 	eor.w	r3, r3, #32
 800b2bc:	837b      	strh	r3, [r7, #26]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	441a      	add	r2, r3
 800b2cc:	8b7b      	ldrh	r3, [r7, #26]
 800b2ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b2d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b2d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f00d fe00 	bl	8018eee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b2ee:	88fb      	ldrh	r3, [r7, #6]
 800b2f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d01f      	beq.n	800b338 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	881b      	ldrh	r3, [r3, #0]
 800b308:	b29b      	uxth	r3, r3
 800b30a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b30e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b312:	833b      	strh	r3, [r7, #24]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	461a      	mov	r2, r3
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	441a      	add	r2, r3
 800b322:	8b3b      	ldrh	r3, [r7, #24]
 800b324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b32c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b334:	b29b      	uxth	r3, r3
 800b336:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b338:	2300      	movs	r3, #0
 800b33a:	e31f      	b.n	800b97c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800b33c:	88fb      	ldrh	r3, [r7, #6]
 800b33e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b342:	2b00      	cmp	r3, #0
 800b344:	d021      	beq.n	800b38a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	b29b      	uxth	r3, r3
 800b358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b35c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b360:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	461a      	mov	r2, r3
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	441a      	add	r2, r3
 800b372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b376:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b37a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b37e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b382:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b386:	b29b      	uxth	r3, r3
 800b388:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b390:	2b01      	cmp	r3, #1
 800b392:	f040 82ca 	bne.w	800b92a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	695a      	ldr	r2, [r3, #20]
 800b39a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b39e:	441a      	add	r2, r3
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	69da      	ldr	r2, [r3, #28]
 800b3a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b3ac:	441a      	add	r2, r3
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	6a1a      	ldr	r2, [r3, #32]
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d309      	bcc.n	800b3d2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	6a1a      	ldr	r2, [r3, #32]
 800b3c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b3ca:	1ad2      	subs	r2, r2, r3
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	621a      	str	r2, [r3, #32]
 800b3d0:	e015      	b.n	800b3fe <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	6a1b      	ldr	r3, [r3, #32]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d107      	bne.n	800b3ea <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800b3da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b3de:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b3e8:	e009      	b.n	800b3fe <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	785b      	ldrb	r3, [r3, #1]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d15f      	bne.n	800b4c6 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b414:	b29b      	uxth	r3, r3
 800b416:	461a      	mov	r2, r3
 800b418:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b41a:	4413      	add	r3, r2
 800b41c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	00da      	lsls	r2, r3, #3
 800b424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b426:	4413      	add	r3, r2
 800b428:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	b29b      	uxth	r3, r3
 800b434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b438:	b29a      	uxth	r2, r3
 800b43a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43c:	801a      	strh	r2, [r3, #0]
 800b43e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <HAL_PCD_EP_DB_Transmit+0x34e>
 800b444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b446:	881b      	ldrh	r3, [r3, #0]
 800b448:	b29b      	uxth	r3, r3
 800b44a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b44e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b452:	b29a      	uxth	r2, r3
 800b454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b456:	801a      	strh	r2, [r3, #0]
 800b458:	e051      	b.n	800b4fe <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b45a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b45c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b45e:	d816      	bhi.n	800b48e <HAL_PCD_EP_DB_Transmit+0x382>
 800b460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b462:	085b      	lsrs	r3, r3, #1
 800b464:	653b      	str	r3, [r7, #80]	@ 0x50
 800b466:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b468:	f003 0301 	and.w	r3, r3, #1
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d002      	beq.n	800b476 <HAL_PCD_EP_DB_Transmit+0x36a>
 800b470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b472:	3301      	adds	r3, #1
 800b474:	653b      	str	r3, [r7, #80]	@ 0x50
 800b476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b47e:	b29b      	uxth	r3, r3
 800b480:	029b      	lsls	r3, r3, #10
 800b482:	b29b      	uxth	r3, r3
 800b484:	4313      	orrs	r3, r2
 800b486:	b29a      	uxth	r2, r3
 800b488:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b48a:	801a      	strh	r2, [r3, #0]
 800b48c:	e037      	b.n	800b4fe <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b48e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b490:	095b      	lsrs	r3, r3, #5
 800b492:	653b      	str	r3, [r7, #80]	@ 0x50
 800b494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b496:	f003 031f 	and.w	r3, r3, #31
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d102      	bne.n	800b4a4 <HAL_PCD_EP_DB_Transmit+0x398>
 800b49e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4ac:	b29b      	uxth	r3, r3
 800b4ae:	029b      	lsls	r3, r3, #10
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4c2:	801a      	strh	r2, [r3, #0]
 800b4c4:	e01b      	b.n	800b4fe <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	785b      	ldrb	r3, [r3, #1]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d117      	bne.n	800b4fe <HAL_PCD_EP_DB_Transmit+0x3f2>
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	461a      	mov	r2, r3
 800b4e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4e2:	4413      	add	r3, r2
 800b4e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	00da      	lsls	r2, r3, #3
 800b4ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b4f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b4f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4fc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	6959      	ldr	r1, [r3, #20]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	891a      	ldrh	r2, [r3, #8]
 800b50a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	f007 fc44 	bl	8012d9a <USB_WritePMA>
 800b512:	e20a      	b.n	800b92a <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	461a      	mov	r2, r3
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	00db      	lsls	r3, r3, #3
 800b526:	4413      	add	r3, r2
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	6812      	ldr	r2, [r2, #0]
 800b52c:	4413      	add	r3, r2
 800b52e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b532:	881b      	ldrh	r3, [r3, #0]
 800b534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b538:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	699a      	ldr	r2, [r3, #24]
 800b540:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b544:	429a      	cmp	r2, r3
 800b546:	d307      	bcc.n	800b558 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	699a      	ldr	r2, [r3, #24]
 800b54c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b550:	1ad2      	subs	r2, r2, r3
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	619a      	str	r2, [r3, #24]
 800b556:	e002      	b.n	800b55e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2200      	movs	r2, #0
 800b55c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	699b      	ldr	r3, [r3, #24]
 800b562:	2b00      	cmp	r3, #0
 800b564:	f040 80f6 	bne.w	800b754 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	785b      	ldrb	r3, [r3, #1]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d126      	bne.n	800b5be <HAL_PCD_EP_DB_Transmit+0x4b2>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	677b      	str	r3, [r7, #116]	@ 0x74
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b57e:	b29b      	uxth	r3, r3
 800b580:	461a      	mov	r2, r3
 800b582:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b584:	4413      	add	r3, r2
 800b586:	677b      	str	r3, [r7, #116]	@ 0x74
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	00da      	lsls	r2, r3, #3
 800b58e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b590:	4413      	add	r3, r2
 800b592:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b596:	673b      	str	r3, [r7, #112]	@ 0x70
 800b598:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b59a:	881b      	ldrh	r3, [r3, #0]
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5a6:	801a      	strh	r2, [r3, #0]
 800b5a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5aa:	881b      	ldrh	r3, [r3, #0]
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5b6:	b29a      	uxth	r2, r3
 800b5b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5ba:	801a      	strh	r2, [r3, #0]
 800b5bc:	e01a      	b.n	800b5f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	785b      	ldrb	r3, [r3, #1]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d116      	bne.n	800b5f4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5d4:	b29b      	uxth	r3, r3
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5da:	4413      	add	r3, r2
 800b5dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	00da      	lsls	r2, r3, #3
 800b5e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b5e6:	4413      	add	r3, r2
 800b5e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b5ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b5ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	785b      	ldrb	r3, [r3, #1]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d12f      	bne.n	800b664 <HAL_PCD_EP_DB_Transmit+0x558>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b614:	b29b      	uxth	r3, r3
 800b616:	461a      	mov	r2, r3
 800b618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b61c:	4413      	add	r3, r2
 800b61e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	00da      	lsls	r2, r3, #3
 800b628:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b62c:	4413      	add	r3, r2
 800b62e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b632:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b636:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b642:	b29a      	uxth	r2, r3
 800b644:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b648:	801a      	strh	r2, [r3, #0]
 800b64a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b64e:	881b      	ldrh	r3, [r3, #0]
 800b650:	b29b      	uxth	r3, r3
 800b652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b660:	801a      	strh	r2, [r3, #0]
 800b662:	e01c      	b.n	800b69e <HAL_PCD_EP_DB_Transmit+0x592>
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	785b      	ldrb	r3, [r3, #1]
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d118      	bne.n	800b69e <HAL_PCD_EP_DB_Transmit+0x592>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b674:	b29b      	uxth	r3, r3
 800b676:	461a      	mov	r2, r3
 800b678:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b67c:	4413      	add	r3, r2
 800b67e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	00da      	lsls	r2, r3, #3
 800b688:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b68c:	4413      	add	r3, r2
 800b68e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b692:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b696:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b69a:	2200      	movs	r2, #0
 800b69c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	78db      	ldrb	r3, [r3, #3]
 800b6a2:	2b02      	cmp	r3, #2
 800b6a4:	d127      	bne.n	800b6f6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	881b      	ldrh	r3, [r3, #0]
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b6c0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b6c4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b6c8:	f083 0320 	eor.w	r3, r3, #32
 800b6cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	441a      	add	r2, r3
 800b6de:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b6e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b6ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	68f8      	ldr	r0, [r7, #12]
 800b6fe:	f00d fbf6 	bl	8018eee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b702:	88fb      	ldrh	r3, [r7, #6]
 800b704:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d121      	bne.n	800b750 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	461a      	mov	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	881b      	ldrh	r3, [r3, #0]
 800b71c:	b29b      	uxth	r3, r3
 800b71e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b726:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	441a      	add	r2, r3
 800b738:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b73c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800b750:	2300      	movs	r3, #0
 800b752:	e113      	b.n	800b97c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d121      	bne.n	800b7a2 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	461a      	mov	r2, r3
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	4413      	add	r3, r2
 800b76c:	881b      	ldrh	r3, [r3, #0]
 800b76e:	b29b      	uxth	r3, r3
 800b770:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b778:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	461a      	mov	r2, r3
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	441a      	add	r2, r3
 800b78a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b78e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b792:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b796:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b79a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b7a2:	68bb      	ldr	r3, [r7, #8]
 800b7a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	f040 80be 	bne.w	800b92a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	695a      	ldr	r2, [r3, #20]
 800b7b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b7b6:	441a      	add	r2, r3
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	69da      	ldr	r2, [r3, #28]
 800b7c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b7c4:	441a      	add	r2, r3
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	6a1a      	ldr	r2, [r3, #32]
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	691b      	ldr	r3, [r3, #16]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d309      	bcc.n	800b7ea <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	6a1a      	ldr	r2, [r3, #32]
 800b7e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b7e2:	1ad2      	subs	r2, r2, r3
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	621a      	str	r2, [r3, #32]
 800b7e8:	e015      	b.n	800b816 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	6a1b      	ldr	r3, [r3, #32]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d107      	bne.n	800b802 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800b7f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b7f6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800b800:	e009      	b.n	800b816 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2200      	movs	r2, #0
 800b80c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b80e:	68bb      	ldr	r3, [r7, #8]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	785b      	ldrb	r3, [r3, #1]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d15f      	bne.n	800b8e4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b832:	b29b      	uxth	r3, r3
 800b834:	461a      	mov	r2, r3
 800b836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b838:	4413      	add	r3, r2
 800b83a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	781b      	ldrb	r3, [r3, #0]
 800b840:	00da      	lsls	r2, r3, #3
 800b842:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b844:	4413      	add	r3, r2
 800b846:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b84a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b84c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	b29b      	uxth	r3, r3
 800b852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b856:	b29a      	uxth	r2, r3
 800b858:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b85a:	801a      	strh	r2, [r3, #0]
 800b85c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10a      	bne.n	800b878 <HAL_PCD_EP_DB_Transmit+0x76c>
 800b862:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	b29b      	uxth	r3, r3
 800b868:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b86c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b870:	b29a      	uxth	r2, r3
 800b872:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b874:	801a      	strh	r2, [r3, #0]
 800b876:	e04e      	b.n	800b916 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b878:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b87a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b87c:	d816      	bhi.n	800b8ac <HAL_PCD_EP_DB_Transmit+0x7a0>
 800b87e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b880:	085b      	lsrs	r3, r3, #1
 800b882:	663b      	str	r3, [r7, #96]	@ 0x60
 800b884:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d002      	beq.n	800b894 <HAL_PCD_EP_DB_Transmit+0x788>
 800b88e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b890:	3301      	adds	r3, #1
 800b892:	663b      	str	r3, [r7, #96]	@ 0x60
 800b894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b896:	881b      	ldrh	r3, [r3, #0]
 800b898:	b29a      	uxth	r2, r3
 800b89a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b89c:	b29b      	uxth	r3, r3
 800b89e:	029b      	lsls	r3, r3, #10
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8a8:	801a      	strh	r2, [r3, #0]
 800b8aa:	e034      	b.n	800b916 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b8ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8ae:	095b      	lsrs	r3, r3, #5
 800b8b0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8b4:	f003 031f 	and.w	r3, r3, #31
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d102      	bne.n	800b8c2 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800b8bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b8c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	b29a      	uxth	r2, r3
 800b8c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	029b      	lsls	r3, r3, #10
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8e0:	801a      	strh	r2, [r3, #0]
 800b8e2:	e018      	b.n	800b916 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	785b      	ldrb	r3, [r3, #1]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d114      	bne.n	800b916 <HAL_PCD_EP_DB_Transmit+0x80a>
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8fa:	4413      	add	r3, r2
 800b8fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	781b      	ldrb	r3, [r3, #0]
 800b902:	00da      	lsls	r2, r3, #3
 800b904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b906:	4413      	add	r3, r2
 800b908:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b90c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b90e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b910:	b29a      	uxth	r2, r3
 800b912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b914:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	6818      	ldr	r0, [r3, #0]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	6959      	ldr	r1, [r3, #20]
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	895a      	ldrh	r2, [r3, #10]
 800b922:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b924:	b29b      	uxth	r3, r3
 800b926:	f007 fa38 	bl	8012d9a <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	461a      	mov	r2, r3
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	881b      	ldrh	r3, [r3, #0]
 800b93a:	b29b      	uxth	r3, r3
 800b93c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b944:	82fb      	strh	r3, [r7, #22]
 800b946:	8afb      	ldrh	r3, [r7, #22]
 800b948:	f083 0310 	eor.w	r3, r3, #16
 800b94c:	82fb      	strh	r3, [r7, #22]
 800b94e:	8afb      	ldrh	r3, [r7, #22]
 800b950:	f083 0320 	eor.w	r3, r3, #32
 800b954:	82fb      	strh	r3, [r7, #22]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	461a      	mov	r2, r3
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	441a      	add	r2, r3
 800b964:	8afb      	ldrh	r3, [r7, #22]
 800b966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b96a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b96e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b976:	b29b      	uxth	r3, r3
 800b978:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3798      	adds	r7, #152	@ 0x98
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	607b      	str	r3, [r7, #4]
 800b98e:	460b      	mov	r3, r1
 800b990:	817b      	strh	r3, [r7, #10]
 800b992:	4613      	mov	r3, r2
 800b994:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b996:	897b      	ldrh	r3, [r7, #10]
 800b998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b99c:	b29b      	uxth	r3, r3
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00b      	beq.n	800b9ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9a2:	897b      	ldrh	r3, [r7, #10]
 800b9a4:	f003 0207 	and.w	r2, r3, #7
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	00db      	lsls	r3, r3, #3
 800b9b0:	3310      	adds	r3, #16
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	4413      	add	r3, r2
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	e009      	b.n	800b9ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b9ba:	897a      	ldrh	r2, [r7, #10]
 800b9bc:	4613      	mov	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b9c8:	68fa      	ldr	r2, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b9ce:	893b      	ldrh	r3, [r7, #8]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d107      	bne.n	800b9e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	b29a      	uxth	r2, r3
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	80da      	strh	r2, [r3, #6]
 800b9e2:	e00b      	b.n	800b9fc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	b29a      	uxth	r2, r3
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	0c1b      	lsrs	r3, r3, #16
 800b9f6:	b29a      	uxth	r2, r3
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	371c      	adds	r7, #28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ba0a:	b480      	push	{r7}
 800ba0c:	b085      	sub	sp, #20
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	f043 0301 	orr.w	r3, r3, #1
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	f043 0302 	orr.w	r3, r3, #2
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800ba50:	2300      	movs	r3, #0
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3714      	adds	r7, #20
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
	...

0800ba60 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ba60:	b480      	push	{r7}
 800ba62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba64:	4b05      	ldr	r3, [pc, #20]	@ (800ba7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a04      	ldr	r2, [pc, #16]	@ (800ba7c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ba6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba6e:	6013      	str	r3, [r2, #0]
}
 800ba70:	bf00      	nop
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	58000400 	.word	0x58000400

0800ba80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ba80:	b480      	push	{r7}
 800ba82:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800ba84:	4b04      	ldr	r3, [pc, #16]	@ (800ba98 <HAL_PWREx_GetVoltageRange+0x18>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	58000400 	.word	0x58000400

0800ba9c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800baa0:	4b05      	ldr	r3, [pc, #20]	@ (800bab8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800baa2:	685b      	ldr	r3, [r3, #4]
 800baa4:	4a04      	ldr	r2, [pc, #16]	@ (800bab8 <HAL_PWREx_EnableVddUSB+0x1c>)
 800baa6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800baaa:	6053      	str	r3, [r2, #4]
}
 800baac:	bf00      	nop
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	58000400 	.word	0x58000400

0800babc <LL_RCC_HSE_IsEnabledDiv2>:
{
 800babc:	b480      	push	{r7}
 800babe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800bac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800baca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bace:	d101      	bne.n	800bad4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800bad0:	2301      	movs	r3, #1
 800bad2:	e000      	b.n	800bad6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800bad4:	2300      	movs	r3, #0
}
 800bad6:	4618      	mov	r0, r3
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <LL_RCC_HSE_Enable>:
{
 800bae0:	b480      	push	{r7}
 800bae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800bae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800baee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800baf2:	6013      	str	r3, [r2, #0]
}
 800baf4:	bf00      	nop
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <LL_RCC_HSE_Disable>:
{
 800bafe:	b480      	push	{r7}
 800bb00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800bb02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb10:	6013      	str	r3, [r2, #0]
}
 800bb12:	bf00      	nop
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <LL_RCC_HSE_IsReady>:
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800bb20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb2e:	d101      	bne.n	800bb34 <LL_RCC_HSE_IsReady+0x18>
 800bb30:	2301      	movs	r3, #1
 800bb32:	e000      	b.n	800bb36 <LL_RCC_HSE_IsReady+0x1a>
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <LL_RCC_HSI_Enable>:
{
 800bb40:	b480      	push	{r7}
 800bb42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800bb44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb52:	6013      	str	r3, [r2, #0]
}
 800bb54:	bf00      	nop
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <LL_RCC_HSI_Disable>:
{
 800bb5e:	b480      	push	{r7}
 800bb60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800bb62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb70:	6013      	str	r3, [r2, #0]
}
 800bb72:	bf00      	nop
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <LL_RCC_HSI_IsReady>:
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800bb80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb8e:	d101      	bne.n	800bb94 <LL_RCC_HSI_IsReady+0x18>
 800bb90:	2301      	movs	r3, #1
 800bb92:	e000      	b.n	800bb96 <LL_RCC_HSI_IsReady+0x1a>
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr

0800bba0 <LL_RCC_HSI_SetCalibTrimming>:
{
 800bba0:	b480      	push	{r7}
 800bba2:	b083      	sub	sp, #12
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800bba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	061b      	lsls	r3, r3, #24
 800bbb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	604b      	str	r3, [r1, #4]
}
 800bbbe:	bf00      	nop
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <LL_RCC_HSI48_Enable>:
{
 800bbca:	b480      	push	{r7}
 800bbcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bbce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbda:	f043 0301 	orr.w	r3, r3, #1
 800bbde:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bbe2:	bf00      	nop
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <LL_RCC_HSI48_Disable>:
{
 800bbec:	b480      	push	{r7}
 800bbee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800bbf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bbf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbfc:	f023 0301 	bic.w	r3, r3, #1
 800bc00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800bc04:	bf00      	nop
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <LL_RCC_HSI48_IsReady>:
{
 800bc0e:	b480      	push	{r7}
 800bc10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800bc12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc1a:	f003 0302 	and.w	r3, r3, #2
 800bc1e:	2b02      	cmp	r3, #2
 800bc20:	d101      	bne.n	800bc26 <LL_RCC_HSI48_IsReady+0x18>
 800bc22:	2301      	movs	r3, #1
 800bc24:	e000      	b.n	800bc28 <LL_RCC_HSI48_IsReady+0x1a>
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr

0800bc32 <LL_RCC_LSE_Enable>:
{
 800bc32:	b480      	push	{r7}
 800bc34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bc36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc42:	f043 0301 	orr.w	r3, r3, #1
 800bc46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bc4a:	bf00      	nop
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <LL_RCC_LSE_Disable>:
{
 800bc54:	b480      	push	{r7}
 800bc56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800bc58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc64:	f023 0301 	bic.w	r3, r3, #1
 800bc68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bc6c:	bf00      	nop
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <LL_RCC_LSE_EnableBypass>:
{
 800bc76:	b480      	push	{r7}
 800bc78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bc7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc86:	f043 0304 	orr.w	r3, r3, #4
 800bc8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bc8e:	bf00      	nop
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <LL_RCC_LSE_DisableBypass>:
{
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800bc9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bca4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bca8:	f023 0304 	bic.w	r3, r3, #4
 800bcac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bcb0:	bf00      	nop
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <LL_RCC_LSE_IsReady>:
{
 800bcba:	b480      	push	{r7}
 800bcbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800bcbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcc6:	f003 0302 	and.w	r3, r3, #2
 800bcca:	2b02      	cmp	r3, #2
 800bccc:	d101      	bne.n	800bcd2 <LL_RCC_LSE_IsReady+0x18>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e000      	b.n	800bcd4 <LL_RCC_LSE_IsReady+0x1a>
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <LL_RCC_LSI1_Enable>:
{
 800bcde:	b480      	push	{r7}
 800bce0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bcea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bcee:	f043 0301 	orr.w	r3, r3, #1
 800bcf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bcf6:	bf00      	nop
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <LL_RCC_LSI1_Disable>:
{
 800bd00:	b480      	push	{r7}
 800bd02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800bd04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd10:	f023 0301 	bic.w	r3, r3, #1
 800bd14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bd18:	bf00      	nop
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <LL_RCC_LSI1_IsReady>:
{
 800bd22:	b480      	push	{r7}
 800bd24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800bd26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd2e:	f003 0302 	and.w	r3, r3, #2
 800bd32:	2b02      	cmp	r3, #2
 800bd34:	d101      	bne.n	800bd3a <LL_RCC_LSI1_IsReady+0x18>
 800bd36:	2301      	movs	r3, #1
 800bd38:	e000      	b.n	800bd3c <LL_RCC_LSI1_IsReady+0x1a>
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr

0800bd46 <LL_RCC_LSI2_Enable>:
{
 800bd46:	b480      	push	{r7}
 800bd48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bd4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd56:	f043 0304 	orr.w	r3, r3, #4
 800bd5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bd5e:	bf00      	nop
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <LL_RCC_LSI2_Disable>:
{
 800bd68:	b480      	push	{r7}
 800bd6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800bd6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd78:	f023 0304 	bic.w	r3, r3, #4
 800bd7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800bd80:	bf00      	nop
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr

0800bd8a <LL_RCC_LSI2_IsReady>:
{
 800bd8a:	b480      	push	{r7}
 800bd8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800bd8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd96:	f003 0308 	and.w	r3, r3, #8
 800bd9a:	2b08      	cmp	r3, #8
 800bd9c:	d101      	bne.n	800bda2 <LL_RCC_LSI2_IsReady+0x18>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e000      	b.n	800bda4 <LL_RCC_LSI2_IsReady+0x1a>
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <LL_RCC_LSI2_SetTrimming>:
{
 800bdae:	b480      	push	{r7}
 800bdb0:	b083      	sub	sp, #12
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800bdb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bdbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	021b      	lsls	r3, r3, #8
 800bdc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdda:	4770      	bx	lr

0800bddc <LL_RCC_MSI_Enable>:
{
 800bddc:	b480      	push	{r7}
 800bdde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bde0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdea:	f043 0301 	orr.w	r3, r3, #1
 800bdee:	6013      	str	r3, [r2, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <LL_RCC_MSI_Disable>:
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800bdfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be08:	f023 0301 	bic.w	r3, r3, #1
 800be0c:	6013      	str	r3, [r2, #0]
}
 800be0e:	bf00      	nop
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <LL_RCC_MSI_IsReady>:
{
 800be18:	b480      	push	{r7}
 800be1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800be1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0302 	and.w	r3, r3, #2
 800be26:	2b02      	cmp	r3, #2
 800be28:	d101      	bne.n	800be2e <LL_RCC_MSI_IsReady+0x16>
 800be2a:	2301      	movs	r3, #1
 800be2c:	e000      	b.n	800be30 <LL_RCC_MSI_IsReady+0x18>
 800be2e:	2300      	movs	r3, #0
}
 800be30:	4618      	mov	r0, r3
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <LL_RCC_MSI_SetRange>:
{
 800be3a:	b480      	push	{r7}
 800be3c:	b083      	sub	sp, #12
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800be42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800be4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4313      	orrs	r3, r2
 800be54:	600b      	str	r3, [r1, #0]
}
 800be56:	bf00      	nop
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <LL_RCC_MSI_GetRange>:
{
 800be62:	b480      	push	{r7}
 800be64:	b083      	sub	sp, #12
 800be66:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800be68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be72:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2bb0      	cmp	r3, #176	@ 0xb0
 800be78:	d901      	bls.n	800be7e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800be7a:	23b0      	movs	r3, #176	@ 0xb0
 800be7c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800be7e:	687b      	ldr	r3, [r7, #4]
}
 800be80:	4618      	mov	r0, r3
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <LL_RCC_MSI_SetCalibTrimming>:
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800be94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	021b      	lsls	r3, r3, #8
 800bea2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bea6:	4313      	orrs	r3, r2
 800bea8:	604b      	str	r3, [r1, #4]
}
 800beaa:	bf00      	nop
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr

0800beb6 <LL_RCC_SetSysClkSource>:
{
 800beb6:	b480      	push	{r7}
 800beb8:	b083      	sub	sp, #12
 800beba:	af00      	add	r7, sp, #0
 800bebc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bec2:	689b      	ldr	r3, [r3, #8]
 800bec4:	f023 0203 	bic.w	r2, r3, #3
 800bec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4313      	orrs	r3, r2
 800bed0:	608b      	str	r3, [r1, #8]
}
 800bed2:	bf00      	nop
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <LL_RCC_GetSysClkSource>:
{
 800bede:	b480      	push	{r7}
 800bee0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f003 030c 	and.w	r3, r3, #12
}
 800beec:	4618      	mov	r0, r3
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr

0800bef6 <LL_RCC_SetAHBPrescaler>:
{
 800bef6:	b480      	push	{r7}
 800bef8:	b083      	sub	sp, #12
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800befe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	608b      	str	r3, [r1, #8]
}
 800bf12:	bf00      	nop
 800bf14:	370c      	adds	r7, #12
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <LL_C2_RCC_SetAHBPrescaler>:
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b083      	sub	sp, #12
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800bf26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bf2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bf32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bf3e:	bf00      	nop
 800bf40:	370c      	adds	r7, #12
 800bf42:	46bd      	mov	sp, r7
 800bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf48:	4770      	bx	lr

0800bf4a <LL_RCC_SetAHB4Prescaler>:
{
 800bf4a:	b480      	push	{r7}
 800bf4c:	b083      	sub	sp, #12
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bf52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bf5a:	f023 020f 	bic.w	r2, r3, #15
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	091b      	lsrs	r3, r3, #4
 800bf62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf66:	4313      	orrs	r3, r2
 800bf68:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bf6c:	bf00      	nop
 800bf6e:	370c      	adds	r7, #12
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr

0800bf78 <LL_RCC_SetAPB1Prescaler>:
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bf80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf84:	689b      	ldr	r3, [r3, #8]
 800bf86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bf8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	608b      	str	r3, [r1, #8]
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <LL_RCC_SetAPB2Prescaler>:
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bfa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfac:	689b      	ldr	r3, [r3, #8]
 800bfae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bfb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	608b      	str	r3, [r1, #8]
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <LL_RCC_GetAHBPrescaler>:
{
 800bfc8:	b480      	push	{r7}
 800bfca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bfcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <LL_RCC_GetAHB4Prescaler>:
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800bfe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfe8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bfec:	011b      	lsls	r3, r3, #4
 800bfee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <LL_RCC_GetAPB1Prescaler>:
{
 800bffc:	b480      	push	{r7}
 800bffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800c000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800c00a:	4618      	mov	r0, r3
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <LL_RCC_GetAPB2Prescaler>:
{
 800c014:	b480      	push	{r7}
 800c016:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800c018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800c022:	4618      	mov	r0, r3
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800c02c:	b480      	push	{r7}
 800c02e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800c030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c03a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c03e:	6013      	str	r3, [r2, #0]
}
 800c040:	bf00      	nop
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr

0800c04a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800c04a:	b480      	push	{r7}
 800c04c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800c04e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c058:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c05c:	6013      	str	r3, [r2, #0]
}
 800c05e:	bf00      	nop
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800c068:	b480      	push	{r7}
 800c06a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800c06c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c076:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c07a:	d101      	bne.n	800c080 <LL_RCC_PLL_IsReady+0x18>
 800c07c:	2301      	movs	r3, #1
 800c07e:	e000      	b.n	800c082 <LL_RCC_PLL_IsReady+0x1a>
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800c08c:	b480      	push	{r7}
 800c08e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800c090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c094:	68db      	ldr	r3, [r3, #12]
 800c096:	0a1b      	lsrs	r3, r3, #8
 800c098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800c0aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0bc:	4770      	bx	lr

0800c0be <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800c0be:	b480      	push	{r7}
 800c0c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800c0c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800c0d6:	b480      	push	{r7}
 800c0d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800c0da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	f003 0303 	and.w	r3, r3, #3
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800c0f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c100:	d101      	bne.n	800c106 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800c102:	2301      	movs	r3, #1
 800c104:	e000      	b.n	800c108 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800c106:	2300      	movs	r3, #0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr

0800c112 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800c112:	b480      	push	{r7}
 800c114:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800c116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c11a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c11e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c122:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c126:	d101      	bne.n	800c12c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800c128:	2301      	movs	r3, #1
 800c12a:	e000      	b.n	800c12e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800c12c:	2300      	movs	r3, #0
}
 800c12e:	4618      	mov	r0, r3
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr

0800c138 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800c138:	b480      	push	{r7}
 800c13a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800c13c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c140:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800c144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c14c:	d101      	bne.n	800c152 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800c14e:	2301      	movs	r3, #1
 800c150:	e000      	b.n	800c154 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800c152:	2300      	movs	r3, #0
}
 800c154:	4618      	mov	r0, r3
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr

0800c15e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800c15e:	b480      	push	{r7}
 800c160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800c162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c16c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c170:	d101      	bne.n	800c176 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800c172:	2301      	movs	r3, #1
 800c174:	e000      	b.n	800c178 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr

0800c182 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800c182:	b480      	push	{r7}
 800c184:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800c186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c18a:	689b      	ldr	r3, [r3, #8]
 800c18c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c190:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c194:	d101      	bne.n	800c19a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800c196:	2301      	movs	r3, #1
 800c198:	e000      	b.n	800c19c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
	...

0800c1a8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c1a8:	b590      	push	{r4, r7, lr}
 800c1aa:	b08d      	sub	sp, #52	@ 0x34
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d101      	bne.n	800c1ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	e363      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f003 0320 	and.w	r3, r3, #32
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 808d 	beq.w	800c2e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c1c8:	f7ff fe89 	bl	800bede <LL_RCC_GetSysClkSource>
 800c1cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c1ce:	f7ff ff82 	bl	800c0d6 <LL_RCC_PLL_GetMainSource>
 800c1d2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800c1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d005      	beq.n	800c1e6 <HAL_RCC_OscConfig+0x3e>
 800c1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1dc:	2b0c      	cmp	r3, #12
 800c1de:	d147      	bne.n	800c270 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800c1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d144      	bne.n	800c270 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	69db      	ldr	r3, [r3, #28]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d101      	bne.n	800c1f2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	e347      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c1f6:	f7ff fe34 	bl	800be62 <LL_RCC_MSI_GetRange>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	d914      	bls.n	800c22a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c204:	4618      	mov	r0, r3
 800c206:	f000 fd2f 	bl	800cc68 <RCC_SetFlashLatencyFromMSIRange>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d001      	beq.n	800c214 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	e336      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff fe0e 	bl	800be3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff fe32 	bl	800be8c <LL_RCC_MSI_SetCalibTrimming>
 800c228:	e013      	b.n	800c252 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff fe03 	bl	800be3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	4618      	mov	r0, r3
 800c23a:	f7ff fe27 	bl	800be8c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c242:	4618      	mov	r0, r3
 800c244:	f000 fd10 	bl	800cc68 <RCC_SetFlashLatencyFromMSIRange>
 800c248:	4603      	mov	r3, r0
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d001      	beq.n	800c252 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	e317      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c252:	f000 fcc9 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800c256:	4603      	mov	r3, r0
 800c258:	4aa4      	ldr	r2, [pc, #656]	@ (800c4ec <HAL_RCC_OscConfig+0x344>)
 800c25a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c25c:	4ba4      	ldr	r3, [pc, #656]	@ (800c4f0 <HAL_RCC_OscConfig+0x348>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4618      	mov	r0, r3
 800c262:	f7fb f84b 	bl	80072fc <HAL_InitTick>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d039      	beq.n	800c2e0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	e308      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	69db      	ldr	r3, [r3, #28]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d01e      	beq.n	800c2b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c278:	f7ff fdb0 	bl	800bddc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c27c:	f7fb f88c 	bl	8007398 <HAL_GetTick>
 800c280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800c282:	e008      	b.n	800c296 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c284:	f7fb f888 	bl	8007398 <HAL_GetTick>
 800c288:	4602      	mov	r2, r0
 800c28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	2b02      	cmp	r3, #2
 800c290:	d901      	bls.n	800c296 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c292:	2303      	movs	r3, #3
 800c294:	e2f5      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800c296:	f7ff fdbf 	bl	800be18 <LL_RCC_MSI_IsReady>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d0f1      	beq.n	800c284 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7ff fdc8 	bl	800be3a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a1b      	ldr	r3, [r3, #32]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7ff fdec 	bl	800be8c <LL_RCC_MSI_SetCalibTrimming>
 800c2b4:	e015      	b.n	800c2e2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c2b6:	f7ff fda0 	bl	800bdfa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800c2ba:	f7fb f86d 	bl	8007398 <HAL_GetTick>
 800c2be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800c2c0:	e008      	b.n	800c2d4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c2c2:	f7fb f869 	bl	8007398 <HAL_GetTick>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d901      	bls.n	800c2d4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	e2d6      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800c2d4:	f7ff fda0 	bl	800be18 <LL_RCC_MSI_IsReady>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d1f1      	bne.n	800c2c2 <HAL_RCC_OscConfig+0x11a>
 800c2de:	e000      	b.n	800c2e2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800c2e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f003 0301 	and.w	r3, r3, #1
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d047      	beq.n	800c37e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2ee:	f7ff fdf6 	bl	800bede <LL_RCC_GetSysClkSource>
 800c2f2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c2f4:	f7ff feef 	bl	800c0d6 <LL_RCC_PLL_GetMainSource>
 800c2f8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800c2fa:	6a3b      	ldr	r3, [r7, #32]
 800c2fc:	2b08      	cmp	r3, #8
 800c2fe:	d005      	beq.n	800c30c <HAL_RCC_OscConfig+0x164>
 800c300:	6a3b      	ldr	r3, [r7, #32]
 800c302:	2b0c      	cmp	r3, #12
 800c304:	d108      	bne.n	800c318 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	2b03      	cmp	r3, #3
 800c30a:	d105      	bne.n	800c318 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d134      	bne.n	800c37e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c314:	2301      	movs	r3, #1
 800c316:	e2b4      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c320:	d102      	bne.n	800c328 <HAL_RCC_OscConfig+0x180>
 800c322:	f7ff fbdd 	bl	800bae0 <LL_RCC_HSE_Enable>
 800c326:	e001      	b.n	800c32c <HAL_RCC_OscConfig+0x184>
 800c328:	f7ff fbe9 	bl	800bafe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d012      	beq.n	800c35a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c334:	f7fb f830 	bl	8007398 <HAL_GetTick>
 800c338:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c33a:	e008      	b.n	800c34e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c33c:	f7fb f82c 	bl	8007398 <HAL_GetTick>
 800c340:	4602      	mov	r2, r0
 800c342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	2b64      	cmp	r3, #100	@ 0x64
 800c348:	d901      	bls.n	800c34e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c34a:	2303      	movs	r3, #3
 800c34c:	e299      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c34e:	f7ff fbe5 	bl	800bb1c <LL_RCC_HSE_IsReady>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d0f1      	beq.n	800c33c <HAL_RCC_OscConfig+0x194>
 800c358:	e011      	b.n	800c37e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c35a:	f7fb f81d 	bl	8007398 <HAL_GetTick>
 800c35e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c360:	e008      	b.n	800c374 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c362:	f7fb f819 	bl	8007398 <HAL_GetTick>
 800c366:	4602      	mov	r2, r0
 800c368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36a:	1ad3      	subs	r3, r2, r3
 800c36c:	2b64      	cmp	r3, #100	@ 0x64
 800c36e:	d901      	bls.n	800c374 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c370:	2303      	movs	r3, #3
 800c372:	e286      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c374:	f7ff fbd2 	bl	800bb1c <LL_RCC_HSE_IsReady>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1f1      	bne.n	800c362 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f003 0302 	and.w	r3, r3, #2
 800c386:	2b00      	cmp	r3, #0
 800c388:	d04c      	beq.n	800c424 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c38a:	f7ff fda8 	bl	800bede <LL_RCC_GetSysClkSource>
 800c38e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c390:	f7ff fea1 	bl	800c0d6 <LL_RCC_PLL_GetMainSource>
 800c394:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c396:	69bb      	ldr	r3, [r7, #24]
 800c398:	2b04      	cmp	r3, #4
 800c39a:	d005      	beq.n	800c3a8 <HAL_RCC_OscConfig+0x200>
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	2b0c      	cmp	r3, #12
 800c3a0:	d10e      	bne.n	800c3c0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b02      	cmp	r3, #2
 800c3a6:	d10b      	bne.n	800c3c0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e266      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7ff fbf1 	bl	800bba0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c3be:	e031      	b.n	800c424 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d019      	beq.n	800c3fc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c3c8:	f7ff fbba 	bl	800bb40 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3cc:	f7fa ffe4 	bl	8007398 <HAL_GetTick>
 800c3d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c3d2:	e008      	b.n	800c3e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c3d4:	f7fa ffe0 	bl	8007398 <HAL_GetTick>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3dc:	1ad3      	subs	r3, r2, r3
 800c3de:	2b02      	cmp	r3, #2
 800c3e0:	d901      	bls.n	800c3e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e24d      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c3e6:	f7ff fbc9 	bl	800bb7c <LL_RCC_HSI_IsReady>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d0f1      	beq.n	800c3d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fbd3 	bl	800bba0 <LL_RCC_HSI_SetCalibTrimming>
 800c3fa:	e013      	b.n	800c424 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c3fc:	f7ff fbaf 	bl	800bb5e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c400:	f7fa ffca 	bl	8007398 <HAL_GetTick>
 800c404:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c406:	e008      	b.n	800c41a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c408:	f7fa ffc6 	bl	8007398 <HAL_GetTick>
 800c40c:	4602      	mov	r2, r0
 800c40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	2b02      	cmp	r3, #2
 800c414:	d901      	bls.n	800c41a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c416:	2303      	movs	r3, #3
 800c418:	e233      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c41a:	f7ff fbaf 	bl	800bb7c <LL_RCC_HSI_IsReady>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1f1      	bne.n	800c408 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 0308 	and.w	r3, r3, #8
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c438:	2b00      	cmp	r3, #0
 800c43a:	f000 80a3 	beq.w	800c584 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d076      	beq.n	800c534 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 0310 	and.w	r3, r3, #16
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d046      	beq.n	800c4e0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c452:	f7ff fc66 	bl	800bd22 <LL_RCC_LSI1_IsReady>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d113      	bne.n	800c484 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c45c:	f7ff fc3f 	bl	800bcde <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c460:	f7fa ff9a 	bl	8007398 <HAL_GetTick>
 800c464:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c466:	e008      	b.n	800c47a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c468:	f7fa ff96 	bl	8007398 <HAL_GetTick>
 800c46c:	4602      	mov	r2, r0
 800c46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c470:	1ad3      	subs	r3, r2, r3
 800c472:	2b02      	cmp	r3, #2
 800c474:	d901      	bls.n	800c47a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c476:	2303      	movs	r3, #3
 800c478:	e203      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c47a:	f7ff fc52 	bl	800bd22 <LL_RCC_LSI1_IsReady>
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d0f1      	beq.n	800c468 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c484:	f7ff fc5f 	bl	800bd46 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c488:	f7fa ff86 	bl	8007398 <HAL_GetTick>
 800c48c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c48e:	e008      	b.n	800c4a2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c490:	f7fa ff82 	bl	8007398 <HAL_GetTick>
 800c494:	4602      	mov	r2, r0
 800c496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	2b03      	cmp	r3, #3
 800c49c:	d901      	bls.n	800c4a2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c49e:	2303      	movs	r3, #3
 800c4a0:	e1ef      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c4a2:	f7ff fc72 	bl	800bd8a <LL_RCC_LSI2_IsReady>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d0f1      	beq.n	800c490 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f7ff fc7c 	bl	800bdae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c4b6:	f7ff fc23 	bl	800bd00 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4ba:	f7fa ff6d 	bl	8007398 <HAL_GetTick>
 800c4be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c4c0:	e008      	b.n	800c4d4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c4c2:	f7fa ff69 	bl	8007398 <HAL_GetTick>
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ca:	1ad3      	subs	r3, r2, r3
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d901      	bls.n	800c4d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	e1d6      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c4d4:	f7ff fc25 	bl	800bd22 <LL_RCC_LSI1_IsReady>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d1f1      	bne.n	800c4c2 <HAL_RCC_OscConfig+0x31a>
 800c4de:	e051      	b.n	800c584 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c4e0:	f7ff fbfd 	bl	800bcde <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4e4:	f7fa ff58 	bl	8007398 <HAL_GetTick>
 800c4e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c4ea:	e00c      	b.n	800c506 <HAL_RCC_OscConfig+0x35e>
 800c4ec:	2000002c 	.word	0x2000002c
 800c4f0:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c4f4:	f7fa ff50 	bl	8007398 <HAL_GetTick>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4fc:	1ad3      	subs	r3, r2, r3
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d901      	bls.n	800c506 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c502:	2303      	movs	r3, #3
 800c504:	e1bd      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c506:	f7ff fc0c 	bl	800bd22 <LL_RCC_LSI1_IsReady>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d0f1      	beq.n	800c4f4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c510:	f7ff fc2a 	bl	800bd68 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c514:	e008      	b.n	800c528 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c516:	f7fa ff3f 	bl	8007398 <HAL_GetTick>
 800c51a:	4602      	mov	r2, r0
 800c51c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	2b03      	cmp	r3, #3
 800c522:	d901      	bls.n	800c528 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e1ac      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c528:	f7ff fc2f 	bl	800bd8a <LL_RCC_LSI2_IsReady>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1f1      	bne.n	800c516 <HAL_RCC_OscConfig+0x36e>
 800c532:	e027      	b.n	800c584 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c534:	f7ff fc18 	bl	800bd68 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c538:	f7fa ff2e 	bl	8007398 <HAL_GetTick>
 800c53c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c53e:	e008      	b.n	800c552 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c540:	f7fa ff2a 	bl	8007398 <HAL_GetTick>
 800c544:	4602      	mov	r2, r0
 800c546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	2b03      	cmp	r3, #3
 800c54c:	d901      	bls.n	800c552 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c54e:	2303      	movs	r3, #3
 800c550:	e197      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c552:	f7ff fc1a 	bl	800bd8a <LL_RCC_LSI2_IsReady>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1f1      	bne.n	800c540 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c55c:	f7ff fbd0 	bl	800bd00 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c560:	f7fa ff1a 	bl	8007398 <HAL_GetTick>
 800c564:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c566:	e008      	b.n	800c57a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c568:	f7fa ff16 	bl	8007398 <HAL_GetTick>
 800c56c:	4602      	mov	r2, r0
 800c56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	2b02      	cmp	r3, #2
 800c574:	d901      	bls.n	800c57a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c576:	2303      	movs	r3, #3
 800c578:	e183      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c57a:	f7ff fbd2 	bl	800bd22 <LL_RCC_LSI1_IsReady>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1f1      	bne.n	800c568 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 0304 	and.w	r3, r3, #4
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d05b      	beq.n	800c648 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c590:	4ba7      	ldr	r3, [pc, #668]	@ (800c830 <HAL_RCC_OscConfig+0x688>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d114      	bne.n	800c5c6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c59c:	f7ff fa60 	bl	800ba60 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5a0:	f7fa fefa 	bl	8007398 <HAL_GetTick>
 800c5a4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5a6:	e008      	b.n	800c5ba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5a8:	f7fa fef6 	bl	8007398 <HAL_GetTick>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b0:	1ad3      	subs	r3, r2, r3
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d901      	bls.n	800c5ba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c5b6:	2303      	movs	r3, #3
 800c5b8:	e163      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5ba:	4b9d      	ldr	r3, [pc, #628]	@ (800c830 <HAL_RCC_OscConfig+0x688>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d0f0      	beq.n	800c5a8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	689b      	ldr	r3, [r3, #8]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d102      	bne.n	800c5d4 <HAL_RCC_OscConfig+0x42c>
 800c5ce:	f7ff fb30 	bl	800bc32 <LL_RCC_LSE_Enable>
 800c5d2:	e00c      	b.n	800c5ee <HAL_RCC_OscConfig+0x446>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	689b      	ldr	r3, [r3, #8]
 800c5d8:	2b05      	cmp	r3, #5
 800c5da:	d104      	bne.n	800c5e6 <HAL_RCC_OscConfig+0x43e>
 800c5dc:	f7ff fb4b 	bl	800bc76 <LL_RCC_LSE_EnableBypass>
 800c5e0:	f7ff fb27 	bl	800bc32 <LL_RCC_LSE_Enable>
 800c5e4:	e003      	b.n	800c5ee <HAL_RCC_OscConfig+0x446>
 800c5e6:	f7ff fb35 	bl	800bc54 <LL_RCC_LSE_Disable>
 800c5ea:	f7ff fb55 	bl	800bc98 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d014      	beq.n	800c620 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5f6:	f7fa fecf 	bl	8007398 <HAL_GetTick>
 800c5fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c5fc:	e00a      	b.n	800c614 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5fe:	f7fa fecb 	bl	8007398 <HAL_GetTick>
 800c602:	4602      	mov	r2, r0
 800c604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c606:	1ad3      	subs	r3, r2, r3
 800c608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d901      	bls.n	800c614 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e136      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c614:	f7ff fb51 	bl	800bcba <LL_RCC_LSE_IsReady>
 800c618:	4603      	mov	r3, r0
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d0ef      	beq.n	800c5fe <HAL_RCC_OscConfig+0x456>
 800c61e:	e013      	b.n	800c648 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c620:	f7fa feba 	bl	8007398 <HAL_GetTick>
 800c624:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c626:	e00a      	b.n	800c63e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c628:	f7fa feb6 	bl	8007398 <HAL_GetTick>
 800c62c:	4602      	mov	r2, r0
 800c62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c636:	4293      	cmp	r3, r2
 800c638:	d901      	bls.n	800c63e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c63a:	2303      	movs	r3, #3
 800c63c:	e121      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c63e:	f7ff fb3c 	bl	800bcba <LL_RCC_LSE_IsReady>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d1ef      	bne.n	800c628 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c650:	2b00      	cmp	r3, #0
 800c652:	d02c      	beq.n	800c6ae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d014      	beq.n	800c686 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c65c:	f7ff fab5 	bl	800bbca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c660:	f7fa fe9a 	bl	8007398 <HAL_GetTick>
 800c664:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c666:	e008      	b.n	800c67a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c668:	f7fa fe96 	bl	8007398 <HAL_GetTick>
 800c66c:	4602      	mov	r2, r0
 800c66e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b02      	cmp	r3, #2
 800c674:	d901      	bls.n	800c67a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e103      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c67a:	f7ff fac8 	bl	800bc0e <LL_RCC_HSI48_IsReady>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d0f1      	beq.n	800c668 <HAL_RCC_OscConfig+0x4c0>
 800c684:	e013      	b.n	800c6ae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c686:	f7ff fab1 	bl	800bbec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c68a:	f7fa fe85 	bl	8007398 <HAL_GetTick>
 800c68e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c690:	e008      	b.n	800c6a4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c692:	f7fa fe81 	bl	8007398 <HAL_GetTick>
 800c696:	4602      	mov	r2, r0
 800c698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d901      	bls.n	800c6a4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e0ee      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c6a4:	f7ff fab3 	bl	800bc0e <LL_RCC_HSI48_IsReady>
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1f1      	bne.n	800c692 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 80e4 	beq.w	800c880 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c6b8:	f7ff fc11 	bl	800bede <LL_RCC_GetSysClkSource>
 800c6bc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c6be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	f040 80b4 	bne.w	800c838 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f003 0203 	and.w	r2, r3, #3
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d123      	bne.n	800c726 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d11c      	bne.n	800c726 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	0a1b      	lsrs	r3, r3, #8
 800c6f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d114      	bne.n	800c726 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c706:	429a      	cmp	r2, r3
 800c708:	d10d      	bne.n	800c726 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c714:	429a      	cmp	r2, r3
 800c716:	d106      	bne.n	800c726 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c722:	429a      	cmp	r2, r3
 800c724:	d05d      	beq.n	800c7e2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	2b0c      	cmp	r3, #12
 800c72a:	d058      	beq.n	800c7de <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c72c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d001      	beq.n	800c73e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c73a:	2301      	movs	r3, #1
 800c73c:	e0a1      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c73e:	f7ff fc84 	bl	800c04a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c742:	f7fa fe29 	bl	8007398 <HAL_GetTick>
 800c746:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c748:	e008      	b.n	800c75c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c74a:	f7fa fe25 	bl	8007398 <HAL_GetTick>
 800c74e:	4602      	mov	r2, r0
 800c750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	2b02      	cmp	r3, #2
 800c756:	d901      	bls.n	800c75c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c758:	2303      	movs	r3, #3
 800c75a:	e092      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c75c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1ef      	bne.n	800c74a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c76a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c76e:	68da      	ldr	r2, [r3, #12]
 800c770:	4b30      	ldr	r3, [pc, #192]	@ (800c834 <HAL_RCC_OscConfig+0x68c>)
 800c772:	4013      	ands	r3, r2
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c778:	687a      	ldr	r2, [r7, #4]
 800c77a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c77c:	4311      	orrs	r1, r2
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c782:	0212      	lsls	r2, r2, #8
 800c784:	4311      	orrs	r1, r2
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c78a:	4311      	orrs	r1, r2
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c790:	4311      	orrs	r1, r2
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c796:	430a      	orrs	r2, r1
 800c798:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c79c:	4313      	orrs	r3, r2
 800c79e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c7a0:	f7ff fc44 	bl	800c02c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c7a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c7ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c7b4:	f7fa fdf0 	bl	8007398 <HAL_GetTick>
 800c7b8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7ba:	e008      	b.n	800c7ce <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7bc:	f7fa fdec 	bl	8007398 <HAL_GetTick>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c4:	1ad3      	subs	r3, r2, r3
 800c7c6:	2b02      	cmp	r3, #2
 800c7c8:	d901      	bls.n	800c7ce <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c7ca:	2303      	movs	r3, #3
 800c7cc:	e059      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d0ef      	beq.n	800c7bc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c7dc:	e050      	b.n	800c880 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e04f      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d147      	bne.n	800c880 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c7f0:	f7ff fc1c 	bl	800c02c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c7f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c7fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c802:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c804:	f7fa fdc8 	bl	8007398 <HAL_GetTick>
 800c808:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c80a:	e008      	b.n	800c81e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c80c:	f7fa fdc4 	bl	8007398 <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2b02      	cmp	r3, #2
 800c818:	d901      	bls.n	800c81e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	e031      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c81e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d0ef      	beq.n	800c80c <HAL_RCC_OscConfig+0x664>
 800c82c:	e028      	b.n	800c880 <HAL_RCC_OscConfig+0x6d8>
 800c82e:	bf00      	nop
 800c830:	58000400 	.word	0x58000400
 800c834:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	2b0c      	cmp	r3, #12
 800c83c:	d01e      	beq.n	800c87c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c83e:	f7ff fc04 	bl	800c04a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c842:	f7fa fda9 	bl	8007398 <HAL_GetTick>
 800c846:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c848:	e008      	b.n	800c85c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c84a:	f7fa fda5 	bl	8007398 <HAL_GetTick>
 800c84e:	4602      	mov	r2, r0
 800c850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c852:	1ad3      	subs	r3, r2, r3
 800c854:	2b02      	cmp	r3, #2
 800c856:	d901      	bls.n	800c85c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c858:	2303      	movs	r3, #3
 800c85a:	e012      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c85c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c866:	2b00      	cmp	r3, #0
 800c868:	d1ef      	bne.n	800c84a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c86a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c86e:	68da      	ldr	r2, [r3, #12]
 800c870:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c874:	4b05      	ldr	r3, [pc, #20]	@ (800c88c <HAL_RCC_OscConfig+0x6e4>)
 800c876:	4013      	ands	r3, r2
 800c878:	60cb      	str	r3, [r1, #12]
 800c87a:	e001      	b.n	800c880 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	e000      	b.n	800c882 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3734      	adds	r7, #52	@ 0x34
 800c886:	46bd      	mov	sp, r7
 800c888:	bd90      	pop	{r4, r7, pc}
 800c88a:	bf00      	nop
 800c88c:	eefefffc 	.word	0xeefefffc

0800c890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e12d      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8a4:	4b98      	ldr	r3, [pc, #608]	@ (800cb08 <HAL_RCC_ClockConfig+0x278>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 0307 	and.w	r3, r3, #7
 800c8ac:	683a      	ldr	r2, [r7, #0]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	d91b      	bls.n	800c8ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8b2:	4b95      	ldr	r3, [pc, #596]	@ (800cb08 <HAL_RCC_ClockConfig+0x278>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f023 0207 	bic.w	r2, r3, #7
 800c8ba:	4993      	ldr	r1, [pc, #588]	@ (800cb08 <HAL_RCC_ClockConfig+0x278>)
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8c2:	f7fa fd69 	bl	8007398 <HAL_GetTick>
 800c8c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8c8:	e008      	b.n	800c8dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c8ca:	f7fa fd65 	bl	8007398 <HAL_GetTick>
 800c8ce:	4602      	mov	r2, r0
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	1ad3      	subs	r3, r2, r3
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d901      	bls.n	800c8dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c8d8:	2303      	movs	r3, #3
 800c8da:	e111      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8dc:	4b8a      	ldr	r3, [pc, #552]	@ (800cb08 <HAL_RCC_ClockConfig+0x278>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f003 0307 	and.w	r3, r3, #7
 800c8e4:	683a      	ldr	r2, [r7, #0]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d1ef      	bne.n	800c8ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f003 0302 	and.w	r3, r3, #2
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d016      	beq.n	800c924 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7ff fafb 	bl	800bef6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c900:	f7fa fd4a 	bl	8007398 <HAL_GetTick>
 800c904:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c906:	e008      	b.n	800c91a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c908:	f7fa fd46 	bl	8007398 <HAL_GetTick>
 800c90c:	4602      	mov	r2, r0
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	2b02      	cmp	r3, #2
 800c914:	d901      	bls.n	800c91a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c916:	2303      	movs	r3, #3
 800c918:	e0f2      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c91a:	f7ff fbe8 	bl	800c0ee <LL_RCC_IsActiveFlag_HPRE>
 800c91e:	4603      	mov	r3, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d0f1      	beq.n	800c908 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f003 0320 	and.w	r3, r3, #32
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d016      	beq.n	800c95e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	695b      	ldr	r3, [r3, #20]
 800c934:	4618      	mov	r0, r3
 800c936:	f7ff faf2 	bl	800bf1e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c93a:	f7fa fd2d 	bl	8007398 <HAL_GetTick>
 800c93e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c940:	e008      	b.n	800c954 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c942:	f7fa fd29 	bl	8007398 <HAL_GetTick>
 800c946:	4602      	mov	r2, r0
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	1ad3      	subs	r3, r2, r3
 800c94c:	2b02      	cmp	r3, #2
 800c94e:	d901      	bls.n	800c954 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c950:	2303      	movs	r3, #3
 800c952:	e0d5      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c954:	f7ff fbdd 	bl	800c112 <LL_RCC_IsActiveFlag_C2HPRE>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d0f1      	beq.n	800c942 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c966:	2b00      	cmp	r3, #0
 800c968:	d016      	beq.n	800c998 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	699b      	ldr	r3, [r3, #24]
 800c96e:	4618      	mov	r0, r3
 800c970:	f7ff faeb 	bl	800bf4a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c974:	f7fa fd10 	bl	8007398 <HAL_GetTick>
 800c978:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c97a:	e008      	b.n	800c98e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c97c:	f7fa fd0c 	bl	8007398 <HAL_GetTick>
 800c980:	4602      	mov	r2, r0
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	2b02      	cmp	r3, #2
 800c988:	d901      	bls.n	800c98e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c98a:	2303      	movs	r3, #3
 800c98c:	e0b8      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c98e:	f7ff fbd3 	bl	800c138 <LL_RCC_IsActiveFlag_SHDHPRE>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0f1      	beq.n	800c97c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d016      	beq.n	800c9d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f7ff fae5 	bl	800bf78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c9ae:	f7fa fcf3 	bl	8007398 <HAL_GetTick>
 800c9b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c9b4:	e008      	b.n	800c9c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c9b6:	f7fa fcef 	bl	8007398 <HAL_GetTick>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d901      	bls.n	800c9c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c9c4:	2303      	movs	r3, #3
 800c9c6:	e09b      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c9c8:	f7ff fbc9 	bl	800c15e <LL_RCC_IsActiveFlag_PPRE1>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d0f1      	beq.n	800c9b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f003 0308 	and.w	r3, r3, #8
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d017      	beq.n	800ca0e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	00db      	lsls	r3, r3, #3
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7ff fadb 	bl	800bfa0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c9ea:	f7fa fcd5 	bl	8007398 <HAL_GetTick>
 800c9ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c9f0:	e008      	b.n	800ca04 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c9f2:	f7fa fcd1 	bl	8007398 <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d901      	bls.n	800ca04 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e07d      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ca04:	f7ff fbbd 	bl	800c182 <LL_RCC_IsActiveFlag_PPRE2>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d0f1      	beq.n	800c9f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0301 	and.w	r3, r3, #1
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d043      	beq.n	800caa2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	2b02      	cmp	r3, #2
 800ca20:	d106      	bne.n	800ca30 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800ca22:	f7ff f87b 	bl	800bb1c <LL_RCC_HSE_IsReady>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d11e      	bne.n	800ca6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e067      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	2b03      	cmp	r3, #3
 800ca36:	d106      	bne.n	800ca46 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800ca38:	f7ff fb16 	bl	800c068 <LL_RCC_PLL_IsReady>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d113      	bne.n	800ca6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ca42:	2301      	movs	r3, #1
 800ca44:	e05c      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d106      	bne.n	800ca5c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800ca4e:	f7ff f9e3 	bl	800be18 <LL_RCC_MSI_IsReady>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d108      	bne.n	800ca6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e051      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800ca5c:	f7ff f88e 	bl	800bb7c <LL_RCC_HSI_IsReady>
 800ca60:	4603      	mov	r3, r0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d101      	bne.n	800ca6a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ca66:	2301      	movs	r3, #1
 800ca68:	e04a      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7ff fa21 	bl	800beb6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca74:	f7fa fc90 	bl	8007398 <HAL_GetTick>
 800ca78:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca7a:	e00a      	b.n	800ca92 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca7c:	f7fa fc8c 	bl	8007398 <HAL_GetTick>
 800ca80:	4602      	mov	r2, r0
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d901      	bls.n	800ca92 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	e036      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca92:	f7ff fa24 	bl	800bede <LL_RCC_GetSysClkSource>
 800ca96:	4602      	mov	r2, r0
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d1ec      	bne.n	800ca7c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800caa2:	4b19      	ldr	r3, [pc, #100]	@ (800cb08 <HAL_RCC_ClockConfig+0x278>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	f003 0307 	and.w	r3, r3, #7
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	429a      	cmp	r2, r3
 800caae:	d21b      	bcs.n	800cae8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cab0:	4b15      	ldr	r3, [pc, #84]	@ (800cb08 <HAL_RCC_ClockConfig+0x278>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f023 0207 	bic.w	r2, r3, #7
 800cab8:	4913      	ldr	r1, [pc, #76]	@ (800cb08 <HAL_RCC_ClockConfig+0x278>)
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cac0:	f7fa fc6a 	bl	8007398 <HAL_GetTick>
 800cac4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cac6:	e008      	b.n	800cada <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cac8:	f7fa fc66 	bl	8007398 <HAL_GetTick>
 800cacc:	4602      	mov	r2, r0
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	1ad3      	subs	r3, r2, r3
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d901      	bls.n	800cada <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800cad6:	2303      	movs	r3, #3
 800cad8:	e012      	b.n	800cb00 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cada:	4b0b      	ldr	r3, [pc, #44]	@ (800cb08 <HAL_RCC_ClockConfig+0x278>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 0307 	and.w	r3, r3, #7
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d1ef      	bne.n	800cac8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800cae8:	f000 f87e 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800caec:	4603      	mov	r3, r0
 800caee:	4a07      	ldr	r2, [pc, #28]	@ (800cb0c <HAL_RCC_ClockConfig+0x27c>)
 800caf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800caf2:	f7fa fc5d 	bl	80073b0 <HAL_GetTickPrio>
 800caf6:	4603      	mov	r3, r0
 800caf8:	4618      	mov	r0, r3
 800cafa:	f7fa fbff 	bl	80072fc <HAL_InitTick>
 800cafe:	4603      	mov	r3, r0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	58004000 	.word	0x58004000
 800cb0c:	2000002c 	.word	0x2000002c

0800cb10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb10:	b590      	push	{r4, r7, lr}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb16:	f7ff f9e2 	bl	800bede <LL_RCC_GetSysClkSource>
 800cb1a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d10a      	bne.n	800cb38 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cb22:	f7ff f99e 	bl	800be62 <LL_RCC_MSI_GetRange>
 800cb26:	4603      	mov	r3, r0
 800cb28:	091b      	lsrs	r3, r3, #4
 800cb2a:	f003 030f 	and.w	r3, r3, #15
 800cb2e:	4a2b      	ldr	r2, [pc, #172]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xcc>)
 800cb30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb34:	60fb      	str	r3, [r7, #12]
 800cb36:	e04b      	b.n	800cbd0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2b04      	cmp	r3, #4
 800cb3c:	d102      	bne.n	800cb44 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cb3e:	4b28      	ldr	r3, [pc, #160]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cb40:	60fb      	str	r3, [r7, #12]
 800cb42:	e045      	b.n	800cbd0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b08      	cmp	r3, #8
 800cb48:	d10a      	bne.n	800cb60 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cb4a:	f7fe ffb7 	bl	800babc <LL_RCC_HSE_IsEnabledDiv2>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	d102      	bne.n	800cb5a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800cb54:	4b22      	ldr	r3, [pc, #136]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	e03a      	b.n	800cbd0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800cb5a:	4b22      	ldr	r3, [pc, #136]	@ (800cbe4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800cb5c:	60fb      	str	r3, [r7, #12]
 800cb5e:	e037      	b.n	800cbd0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800cb60:	f7ff fab9 	bl	800c0d6 <LL_RCC_PLL_GetMainSource>
 800cb64:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d003      	beq.n	800cb74 <HAL_RCC_GetSysClockFreq+0x64>
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d003      	beq.n	800cb7a <HAL_RCC_GetSysClockFreq+0x6a>
 800cb72:	e00d      	b.n	800cb90 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800cb74:	4b1a      	ldr	r3, [pc, #104]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cb76:	60bb      	str	r3, [r7, #8]
        break;
 800cb78:	e015      	b.n	800cba6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800cb7a:	f7fe ff9f 	bl	800babc <LL_RCC_HSE_IsEnabledDiv2>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b01      	cmp	r3, #1
 800cb82:	d102      	bne.n	800cb8a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800cb84:	4b16      	ldr	r3, [pc, #88]	@ (800cbe0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800cb86:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800cb88:	e00d      	b.n	800cba6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800cb8a:	4b16      	ldr	r3, [pc, #88]	@ (800cbe4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800cb8c:	60bb      	str	r3, [r7, #8]
        break;
 800cb8e:	e00a      	b.n	800cba6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800cb90:	f7ff f967 	bl	800be62 <LL_RCC_MSI_GetRange>
 800cb94:	4603      	mov	r3, r0
 800cb96:	091b      	lsrs	r3, r3, #4
 800cb98:	f003 030f 	and.w	r3, r3, #15
 800cb9c:	4a0f      	ldr	r2, [pc, #60]	@ (800cbdc <HAL_RCC_GetSysClockFreq+0xcc>)
 800cb9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba2:	60bb      	str	r3, [r7, #8]
        break;
 800cba4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800cba6:	f7ff fa71 	bl	800c08c <LL_RCC_PLL_GetN>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	fb03 f402 	mul.w	r4, r3, r2
 800cbb2:	f7ff fa84 	bl	800c0be <LL_RCC_PLL_GetDivider>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	091b      	lsrs	r3, r3, #4
 800cbba:	3301      	adds	r3, #1
 800cbbc:	fbb4 f4f3 	udiv	r4, r4, r3
 800cbc0:	f7ff fa71 	bl	800c0a6 <LL_RCC_PLL_GetR>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	0f5b      	lsrs	r3, r3, #29
 800cbc8:	3301      	adds	r3, #1
 800cbca:	fbb4 f3f3 	udiv	r3, r4, r3
 800cbce:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3714      	adds	r7, #20
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd90      	pop	{r4, r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	08021e58 	.word	0x08021e58
 800cbe0:	00f42400 	.word	0x00f42400
 800cbe4:	01e84800 	.word	0x01e84800

0800cbe8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cbe8:	b598      	push	{r3, r4, r7, lr}
 800cbea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800cbec:	f7ff ff90 	bl	800cb10 <HAL_RCC_GetSysClockFreq>
 800cbf0:	4604      	mov	r4, r0
 800cbf2:	f7ff f9e9 	bl	800bfc8 <LL_RCC_GetAHBPrescaler>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	091b      	lsrs	r3, r3, #4
 800cbfa:	f003 030f 	and.w	r3, r3, #15
 800cbfe:	4a03      	ldr	r2, [pc, #12]	@ (800cc0c <HAL_RCC_GetHCLKFreq+0x24>)
 800cc00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc04:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	bd98      	pop	{r3, r4, r7, pc}
 800cc0c:	08021df8 	.word	0x08021df8

0800cc10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cc10:	b598      	push	{r3, r4, r7, lr}
 800cc12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800cc14:	f7ff ffe8 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800cc18:	4604      	mov	r4, r0
 800cc1a:	f7ff f9ef 	bl	800bffc <LL_RCC_GetAPB1Prescaler>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	0a1b      	lsrs	r3, r3, #8
 800cc22:	f003 0307 	and.w	r3, r3, #7
 800cc26:	4a04      	ldr	r2, [pc, #16]	@ (800cc38 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cc28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc2c:	f003 031f 	and.w	r3, r3, #31
 800cc30:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	bd98      	pop	{r3, r4, r7, pc}
 800cc38:	08021e38 	.word	0x08021e38

0800cc3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc3c:	b598      	push	{r3, r4, r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800cc40:	f7ff ffd2 	bl	800cbe8 <HAL_RCC_GetHCLKFreq>
 800cc44:	4604      	mov	r4, r0
 800cc46:	f7ff f9e5 	bl	800c014 <LL_RCC_GetAPB2Prescaler>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	0adb      	lsrs	r3, r3, #11
 800cc4e:	f003 0307 	and.w	r3, r3, #7
 800cc52:	4a04      	ldr	r2, [pc, #16]	@ (800cc64 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cc54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc58:	f003 031f 	and.w	r3, r3, #31
 800cc5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	bd98      	pop	{r3, r4, r7, pc}
 800cc64:	08021e38 	.word	0x08021e38

0800cc68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800cc68:	b590      	push	{r4, r7, lr}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2bb0      	cmp	r3, #176	@ 0xb0
 800cc74:	d903      	bls.n	800cc7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800cc76:	4b15      	ldr	r3, [pc, #84]	@ (800cccc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7a:	60fb      	str	r3, [r7, #12]
 800cc7c:	e007      	b.n	800cc8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	091b      	lsrs	r3, r3, #4
 800cc82:	f003 030f 	and.w	r3, r3, #15
 800cc86:	4a11      	ldr	r2, [pc, #68]	@ (800cccc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800cc88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800cc8e:	f7ff f9a7 	bl	800bfe0 <LL_RCC_GetAHB4Prescaler>
 800cc92:	4603      	mov	r3, r0
 800cc94:	091b      	lsrs	r3, r3, #4
 800cc96:	f003 030f 	and.w	r3, r3, #15
 800cc9a:	4a0d      	ldr	r2, [pc, #52]	@ (800ccd0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800cc9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cca6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	4a0a      	ldr	r2, [pc, #40]	@ (800ccd4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800ccac:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb0:	0c9c      	lsrs	r4, r3, #18
 800ccb2:	f7fe fee5 	bl	800ba80 <HAL_PWREx_GetVoltageRange>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	4619      	mov	r1, r3
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f000 f80c 	bl	800ccd8 <RCC_SetFlashLatency>
 800ccc0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3714      	adds	r7, #20
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd90      	pop	{r4, r7, pc}
 800ccca:	bf00      	nop
 800cccc:	08021e58 	.word	0x08021e58
 800ccd0:	08021df8 	.word	0x08021df8
 800ccd4:	431bde83 	.word	0x431bde83

0800ccd8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800ccd8:	b590      	push	{r4, r7, lr}
 800ccda:	b093      	sub	sp, #76	@ 0x4c
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800cce2:	4b37      	ldr	r3, [pc, #220]	@ (800cdc0 <RCC_SetFlashLatency+0xe8>)
 800cce4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800cce8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ccea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800ccee:	4a35      	ldr	r2, [pc, #212]	@ (800cdc4 <RCC_SetFlashLatency+0xec>)
 800ccf0:	f107 031c 	add.w	r3, r7, #28
 800ccf4:	ca07      	ldmia	r2, {r0, r1, r2}
 800ccf6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800ccfa:	4b33      	ldr	r3, [pc, #204]	@ (800cdc8 <RCC_SetFlashLatency+0xf0>)
 800ccfc:	f107 040c 	add.w	r4, r7, #12
 800cd00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cd02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800cd06:	2300      	movs	r3, #0
 800cd08:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd10:	d11a      	bne.n	800cd48 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cd12:	2300      	movs	r3, #0
 800cd14:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd16:	e013      	b.n	800cd40 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800cd18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	3348      	adds	r3, #72	@ 0x48
 800cd1e:	443b      	add	r3, r7
 800cd20:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d807      	bhi.n	800cd3a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cd2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	3348      	adds	r3, #72	@ 0x48
 800cd30:	443b      	add	r3, r7
 800cd32:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cd36:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800cd38:	e020      	b.n	800cd7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800cd3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd3c:	3301      	adds	r3, #1
 800cd3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd42:	2b03      	cmp	r3, #3
 800cd44:	d9e8      	bls.n	800cd18 <RCC_SetFlashLatency+0x40>
 800cd46:	e019      	b.n	800cd7c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cd48:	2300      	movs	r3, #0
 800cd4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd4c:	e013      	b.n	800cd76 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800cd4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd50:	009b      	lsls	r3, r3, #2
 800cd52:	3348      	adds	r3, #72	@ 0x48
 800cd54:	443b      	add	r3, r7
 800cd56:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d807      	bhi.n	800cd70 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800cd60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	3348      	adds	r3, #72	@ 0x48
 800cd66:	443b      	add	r3, r7
 800cd68:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800cd6c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800cd6e:	e005      	b.n	800cd7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800cd70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd72:	3301      	adds	r3, #1
 800cd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d9e8      	bls.n	800cd4e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800cd7c:	4b13      	ldr	r3, [pc, #76]	@ (800cdcc <RCC_SetFlashLatency+0xf4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f023 0207 	bic.w	r2, r3, #7
 800cd84:	4911      	ldr	r1, [pc, #68]	@ (800cdcc <RCC_SetFlashLatency+0xf4>)
 800cd86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800cd8c:	f7fa fb04 	bl	8007398 <HAL_GetTick>
 800cd90:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cd92:	e008      	b.n	800cda6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800cd94:	f7fa fb00 	bl	8007398 <HAL_GetTick>
 800cd98:	4602      	mov	r2, r0
 800cd9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d901      	bls.n	800cda6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e007      	b.n	800cdb6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800cda6:	4b09      	ldr	r3, [pc, #36]	@ (800cdcc <RCC_SetFlashLatency+0xf4>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f003 0307 	and.w	r3, r3, #7
 800cdae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	d1ef      	bne.n	800cd94 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	374c      	adds	r7, #76	@ 0x4c
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd90      	pop	{r4, r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	0801fff0 	.word	0x0801fff0
 800cdc4:	08020000 	.word	0x08020000
 800cdc8:	0802000c 	.word	0x0802000c
 800cdcc:	58004000 	.word	0x58004000

0800cdd0 <LL_RCC_LSE_IsEnabled>:
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cdd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cddc:	f003 0301 	and.w	r3, r3, #1
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d101      	bne.n	800cde8 <LL_RCC_LSE_IsEnabled+0x18>
 800cde4:	2301      	movs	r3, #1
 800cde6:	e000      	b.n	800cdea <LL_RCC_LSE_IsEnabled+0x1a>
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <LL_RCC_LSE_IsReady>:
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cdf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce00:	f003 0302 	and.w	r3, r3, #2
 800ce04:	2b02      	cmp	r3, #2
 800ce06:	d101      	bne.n	800ce0c <LL_RCC_LSE_IsReady+0x18>
 800ce08:	2301      	movs	r3, #1
 800ce0a:	e000      	b.n	800ce0e <LL_RCC_LSE_IsReady+0x1a>
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <LL_RCC_SetRFWKPClockSource>:
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ce20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ce28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ce2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4313      	orrs	r3, r2
 800ce34:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ce38:	bf00      	nop
 800ce3a:	370c      	adds	r7, #12
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce42:	4770      	bx	lr

0800ce44 <LL_RCC_SetSMPSClockSource>:
{
 800ce44:	b480      	push	{r7}
 800ce46:	b083      	sub	sp, #12
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ce4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce52:	f023 0203 	bic.w	r2, r3, #3
 800ce56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	4313      	orrs	r3, r2
 800ce5e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ce60:	bf00      	nop
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <LL_RCC_SetSMPSPrescaler>:
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ce74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce7a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ce7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4313      	orrs	r3, r2
 800ce86:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ce88:	bf00      	nop
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <LL_RCC_SetUSARTClockSource>:
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800ce9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cea4:	f023 0203 	bic.w	r2, r3, #3
 800cea8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <LL_RCC_SetLPUARTClockSource>:
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ced0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ced4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	4313      	orrs	r3, r2
 800cedc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <LL_RCC_SetI2CClockSource>:
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cef8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	091b      	lsrs	r3, r3, #4
 800cf00:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cf04:	43db      	mvns	r3, r3
 800cf06:	401a      	ands	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	011b      	lsls	r3, r3, #4
 800cf0c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cf10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf14:	4313      	orrs	r3, r2
 800cf16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cf1a:	bf00      	nop
 800cf1c:	370c      	adds	r7, #12
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <LL_RCC_SetLPTIMClockSource>:
{
 800cf26:	b480      	push	{r7}
 800cf28:	b083      	sub	sp, #12
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cf2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	0c1b      	lsrs	r3, r3, #16
 800cf3a:	041b      	lsls	r3, r3, #16
 800cf3c:	43db      	mvns	r3, r3
 800cf3e:	401a      	ands	r2, r3
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	041b      	lsls	r3, r3, #16
 800cf44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cf4e:	bf00      	nop
 800cf50:	370c      	adds	r7, #12
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr

0800cf5a <LL_RCC_SetSAIClockSource>:
{
 800cf5a:	b480      	push	{r7}
 800cf5c:	b083      	sub	sp, #12
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cf62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cf6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cf7a:	bf00      	nop
 800cf7c:	370c      	adds	r7, #12
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr

0800cf86 <LL_RCC_SetRNGClockSource>:
{
 800cf86:	b480      	push	{r7}
 800cf88:	b083      	sub	sp, #12
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cf8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800cf9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cfa6:	bf00      	nop
 800cfa8:	370c      	adds	r7, #12
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb0:	4770      	bx	lr

0800cfb2 <LL_RCC_SetCLK48ClockSource>:
{
 800cfb2:	b480      	push	{r7}
 800cfb4:	b083      	sub	sp, #12
 800cfb6:	af00      	add	r7, sp, #0
 800cfb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800cfba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cfbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cfc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cfd2:	bf00      	nop
 800cfd4:	370c      	adds	r7, #12
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <LL_RCC_SetUSBClockSource>:
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b082      	sub	sp, #8
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f7ff ffe3 	bl	800cfb2 <LL_RCC_SetCLK48ClockSource>
}
 800cfec:	bf00      	nop
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <LL_RCC_SetADCClockSource>:
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800cffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d004:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d008:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	4313      	orrs	r3, r2
 800d010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <LL_RCC_SetRTCClockSource>:
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800d028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d030:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d034:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	4313      	orrs	r3, r2
 800d03c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <LL_RCC_GetRTCClockSource>:
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800d050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d058:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <LL_RCC_ForceBackupDomainReset>:
{
 800d066:	b480      	push	{r7}
 800d068:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d06a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d06e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d072:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d076:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d07a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d07e:	bf00      	nop
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr

0800d088 <LL_RCC_ReleaseBackupDomainReset>:
{
 800d088:	b480      	push	{r7}
 800d08a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800d08c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d090:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d094:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d09c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d0a0:	bf00      	nop
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <LL_RCC_PLLSAI1_Enable>:
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d0ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d0b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800d0bc:	6013      	str	r3, [r2, #0]
}
 800d0be:	bf00      	nop
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <LL_RCC_PLLSAI1_Disable>:
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800d0cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d0d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d0da:	6013      	str	r3, [r2, #0]
}
 800d0dc:	bf00      	nop
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr

0800d0e6 <LL_RCC_PLLSAI1_IsReady>:
{
 800d0e6:	b480      	push	{r7}
 800d0e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800d0ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0f8:	d101      	bne.n	800d0fe <LL_RCC_PLLSAI1_IsReady+0x18>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e000      	b.n	800d100 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800d0fe:	2300      	movs	r3, #0
}
 800d100:	4618      	mov	r0, r3
 800d102:	46bd      	mov	sp, r7
 800d104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d108:	4770      	bx	lr

0800d10a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d10a:	b580      	push	{r7, lr}
 800d10c:	b088      	sub	sp, #32
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800d112:	2300      	movs	r3, #0
 800d114:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800d116:	2300      	movs	r3, #0
 800d118:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d122:	2b00      	cmp	r3, #0
 800d124:	d034      	beq.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d12a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d12e:	d021      	beq.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800d130:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800d134:	d81b      	bhi.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d136:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d13a:	d01d      	beq.n	800d178 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800d13c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d140:	d815      	bhi.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d142:	2b00      	cmp	r3, #0
 800d144:	d00b      	beq.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x54>
 800d146:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d14a:	d110      	bne.n	800d16e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800d14c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d156:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d15a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800d15c:	e00d      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	3304      	adds	r3, #4
 800d162:	4618      	mov	r0, r3
 800d164:	f000 f947 	bl	800d3f6 <RCCEx_PLLSAI1_ConfigNP>
 800d168:	4603      	mov	r3, r0
 800d16a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800d16c:	e005      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800d16e:	2301      	movs	r3, #1
 800d170:	77fb      	strb	r3, [r7, #31]
        break;
 800d172:	e002      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d174:	bf00      	nop
 800d176:	e000      	b.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800d178:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d17a:	7ffb      	ldrb	r3, [r7, #31]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d105      	bne.n	800d18c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d184:	4618      	mov	r0, r3
 800d186:	f7ff fee8 	bl	800cf5a <LL_RCC_SetSAIClockSource>
 800d18a:	e001      	b.n	800d190 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d18c:	7ffb      	ldrb	r3, [r7, #31]
 800d18e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d046      	beq.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800d19c:	f7ff ff56 	bl	800d04c <LL_RCC_GetRTCClockSource>
 800d1a0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1a6:	69ba      	ldr	r2, [r7, #24]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d03c      	beq.n	800d226 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d1ac:	f7fe fc58 	bl	800ba60 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d105      	bne.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7ff ff30 	bl	800d020 <LL_RCC_SetRTCClockSource>
 800d1c0:	e02e      	b.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800d1c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d1ca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800d1cc:	f7ff ff4b 	bl	800d066 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800d1d0:	f7ff ff5a 	bl	800d088 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800d1e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800d1ec:	f7ff fdf0 	bl	800cdd0 <LL_RCC_LSE_IsEnabled>
 800d1f0:	4603      	mov	r3, r0
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d114      	bne.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d1f6:	f7fa f8cf 	bl	8007398 <HAL_GetTick>
 800d1fa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800d1fc:	e00b      	b.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1fe:	f7fa f8cb 	bl	8007398 <HAL_GetTick>
 800d202:	4602      	mov	r2, r0
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	1ad3      	subs	r3, r2, r3
 800d208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d902      	bls.n	800d216 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800d210:	2303      	movs	r3, #3
 800d212:	77fb      	strb	r3, [r7, #31]
              break;
 800d214:	e004      	b.n	800d220 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800d216:	f7ff fded 	bl	800cdf4 <LL_RCC_LSE_IsReady>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d1ee      	bne.n	800d1fe <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800d220:	7ffb      	ldrb	r3, [r7, #31]
 800d222:	77bb      	strb	r3, [r7, #30]
 800d224:	e001      	b.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d226:	7ffb      	ldrb	r3, [r7, #31]
 800d228:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f003 0301 	and.w	r3, r3, #1
 800d232:	2b00      	cmp	r3, #0
 800d234:	d004      	beq.n	800d240 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	699b      	ldr	r3, [r3, #24]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7ff fe2a 	bl	800ce94 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f003 0302 	and.w	r3, r3, #2
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d004      	beq.n	800d256 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	69db      	ldr	r3, [r3, #28]
 800d250:	4618      	mov	r0, r3
 800d252:	f7ff fe35 	bl	800cec0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	f003 0310 	and.w	r3, r3, #16
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d004      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d266:	4618      	mov	r0, r3
 800d268:	f7ff fe5d 	bl	800cf26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f003 0320 	and.w	r3, r3, #32
 800d274:	2b00      	cmp	r3, #0
 800d276:	d004      	beq.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff fe52 	bl	800cf26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0304 	and.w	r3, r3, #4
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d004      	beq.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a1b      	ldr	r3, [r3, #32]
 800d292:	4618      	mov	r0, r3
 800d294:	f7ff fe2a 	bl	800ceec <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f003 0308 	and.w	r3, r3, #8
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d004      	beq.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7ff fe1f 	bl	800ceec <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d022      	beq.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7ff fe8d 	bl	800cfde <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2cc:	d107      	bne.n	800d2de <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800d2ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d2dc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d2e6:	d10b      	bne.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f000 f8dd 	bl	800d4ac <RCCEx_PLLSAI1_ConfigNQ>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d2f6:	7ffb      	ldrb	r3, [r7, #31]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d001      	beq.n	800d300 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d2fc:	7ffb      	ldrb	r3, [r7, #31]
 800d2fe:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d02b      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d314:	d008      	beq.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d31a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d31e:	d003      	beq.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d324:	2b00      	cmp	r3, #0
 800d326:	d105      	bne.n	800d334 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d32c:	4618      	mov	r0, r3
 800d32e:	f7ff fe2a 	bl	800cf86 <LL_RCC_SetRNGClockSource>
 800d332:	e00a      	b.n	800d34a <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d33c:	60fb      	str	r3, [r7, #12]
 800d33e:	2000      	movs	r0, #0
 800d340:	f7ff fe21 	bl	800cf86 <LL_RCC_SetRNGClockSource>
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f7ff fe34 	bl	800cfb2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d34e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d352:	d107      	bne.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d358:	68db      	ldr	r3, [r3, #12]
 800d35a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d35e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d362:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d022      	beq.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d374:	4618      	mov	r0, r3
 800d376:	f7ff fe3d 	bl	800cff4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d37e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d382:	d107      	bne.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d388:	68db      	ldr	r3, [r3, #12]
 800d38a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d38e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d392:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d398:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d39c:	d10b      	bne.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f000 f8dd 	bl	800d562 <RCCEx_PLLSAI1_ConfigNR>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d3ac:	7ffb      	ldrb	r3, [r7, #31]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d001      	beq.n	800d3b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d3b2:	7ffb      	ldrb	r3, [r7, #31]
 800d3b4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d004      	beq.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff fd26 	bl	800ce18 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d009      	beq.n	800d3ec <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f7ff fd45 	bl	800ce6c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff fd2c 	bl	800ce44 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d3ec:	7fbb      	ldrb	r3, [r7, #30]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3720      	adds	r7, #32
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b084      	sub	sp, #16
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d402:	f7ff fe61 	bl	800d0c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d406:	f7f9 ffc7 	bl	8007398 <HAL_GetTick>
 800d40a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d40c:	e009      	b.n	800d422 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d40e:	f7f9 ffc3 	bl	8007398 <HAL_GetTick>
 800d412:	4602      	mov	r2, r0
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	2b02      	cmp	r3, #2
 800d41a:	d902      	bls.n	800d422 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d41c:	2303      	movs	r3, #3
 800d41e:	73fb      	strb	r3, [r7, #15]
      break;
 800d420:	e004      	b.n	800d42c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d422:	f7ff fe60 	bl	800d0e6 <LL_RCC_PLLSAI1_IsReady>
 800d426:	4603      	mov	r3, r0
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1f0      	bne.n	800d40e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d42c:	7bfb      	ldrb	r3, [r7, #15]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d137      	bne.n	800d4a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d436:	691b      	ldr	r3, [r3, #16]
 800d438:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	021b      	lsls	r3, r3, #8
 800d442:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d446:	4313      	orrs	r3, r2
 800d448:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d44a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d44e:	691b      	ldr	r3, [r3, #16]
 800d450:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d45c:	4313      	orrs	r3, r2
 800d45e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d460:	f7ff fe23 	bl	800d0aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d464:	f7f9 ff98 	bl	8007398 <HAL_GetTick>
 800d468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d46a:	e009      	b.n	800d480 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d46c:	f7f9 ff94 	bl	8007398 <HAL_GetTick>
 800d470:	4602      	mov	r2, r0
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	1ad3      	subs	r3, r2, r3
 800d476:	2b02      	cmp	r3, #2
 800d478:	d902      	bls.n	800d480 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d47a:	2303      	movs	r3, #3
 800d47c:	73fb      	strb	r3, [r7, #15]
        break;
 800d47e:	e004      	b.n	800d48a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d480:	f7ff fe31 	bl	800d0e6 <LL_RCC_PLLSAI1_IsReady>
 800d484:	4603      	mov	r3, r0
 800d486:	2b01      	cmp	r3, #1
 800d488:	d1f0      	bne.n	800d46c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d48a:	7bfb      	ldrb	r3, [r7, #15]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d108      	bne.n	800d4a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d494:	691a      	ldr	r2, [r3, #16]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	691b      	ldr	r3, [r3, #16]
 800d49a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d4b8:	f7ff fe06 	bl	800d0c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d4bc:	f7f9 ff6c 	bl	8007398 <HAL_GetTick>
 800d4c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d4c2:	e009      	b.n	800d4d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d4c4:	f7f9 ff68 	bl	8007398 <HAL_GetTick>
 800d4c8:	4602      	mov	r2, r0
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	2b02      	cmp	r3, #2
 800d4d0:	d902      	bls.n	800d4d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d4d2:	2303      	movs	r3, #3
 800d4d4:	73fb      	strb	r3, [r7, #15]
      break;
 800d4d6:	e004      	b.n	800d4e2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d4d8:	f7ff fe05 	bl	800d0e6 <LL_RCC_PLLSAI1_IsReady>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1f0      	bne.n	800d4c4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d137      	bne.n	800d558 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d4e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4ec:	691b      	ldr	r3, [r3, #16]
 800d4ee:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	021b      	lsls	r3, r3, #8
 800d4f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d500:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d504:	691b      	ldr	r3, [r3, #16]
 800d506:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	689b      	ldr	r3, [r3, #8]
 800d50e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d512:	4313      	orrs	r3, r2
 800d514:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d516:	f7ff fdc8 	bl	800d0aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d51a:	f7f9 ff3d 	bl	8007398 <HAL_GetTick>
 800d51e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d520:	e009      	b.n	800d536 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d522:	f7f9 ff39 	bl	8007398 <HAL_GetTick>
 800d526:	4602      	mov	r2, r0
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d902      	bls.n	800d536 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d530:	2303      	movs	r3, #3
 800d532:	73fb      	strb	r3, [r7, #15]
        break;
 800d534:	e004      	b.n	800d540 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d536:	f7ff fdd6 	bl	800d0e6 <LL_RCC_PLLSAI1_IsReady>
 800d53a:	4603      	mov	r3, r0
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d1f0      	bne.n	800d522 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d540:	7bfb      	ldrb	r3, [r7, #15]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d108      	bne.n	800d558 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d546:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d54a:	691a      	ldr	r2, [r3, #16]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	691b      	ldr	r3, [r3, #16]
 800d550:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d554:	4313      	orrs	r3, r2
 800d556:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d558:	7bfb      	ldrb	r3, [r7, #15]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}

0800d562 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d562:	b580      	push	{r7, lr}
 800d564:	b084      	sub	sp, #16
 800d566:	af00      	add	r7, sp, #0
 800d568:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d56a:	2300      	movs	r3, #0
 800d56c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d56e:	f7ff fdab 	bl	800d0c8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d572:	f7f9 ff11 	bl	8007398 <HAL_GetTick>
 800d576:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d578:	e009      	b.n	800d58e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d57a:	f7f9 ff0d 	bl	8007398 <HAL_GetTick>
 800d57e:	4602      	mov	r2, r0
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	1ad3      	subs	r3, r2, r3
 800d584:	2b02      	cmp	r3, #2
 800d586:	d902      	bls.n	800d58e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d588:	2303      	movs	r3, #3
 800d58a:	73fb      	strb	r3, [r7, #15]
      break;
 800d58c:	e004      	b.n	800d598 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d58e:	f7ff fdaa 	bl	800d0e6 <LL_RCC_PLLSAI1_IsReady>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d1f0      	bne.n	800d57a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d598:	7bfb      	ldrb	r3, [r7, #15]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d137      	bne.n	800d60e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d59e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5a2:	691b      	ldr	r3, [r3, #16]
 800d5a4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	021b      	lsls	r3, r3, #8
 800d5ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d5b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	68db      	ldr	r3, [r3, #12]
 800d5c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d5cc:	f7ff fd6d 	bl	800d0aa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5d0:	f7f9 fee2 	bl	8007398 <HAL_GetTick>
 800d5d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d5d6:	e009      	b.n	800d5ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d5d8:	f7f9 fede 	bl	8007398 <HAL_GetTick>
 800d5dc:	4602      	mov	r2, r0
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	1ad3      	subs	r3, r2, r3
 800d5e2:	2b02      	cmp	r3, #2
 800d5e4:	d902      	bls.n	800d5ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d5e6:	2303      	movs	r3, #3
 800d5e8:	73fb      	strb	r3, [r7, #15]
        break;
 800d5ea:	e004      	b.n	800d5f6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d5ec:	f7ff fd7b 	bl	800d0e6 <LL_RCC_PLLSAI1_IsReady>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d1f0      	bne.n	800d5d8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d108      	bne.n	800d60e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d5fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d600:	691a      	ldr	r2, [r3, #16]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d60a:	4313      	orrs	r3, r2
 800d60c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d610:	4618      	mov	r0, r3
 800d612:	3710      	adds	r7, #16
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	e09f      	b.n	800d76a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d630:	b2db      	uxtb	r3, r3
 800d632:	2b00      	cmp	r3, #0
 800d634:	d106      	bne.n	800d644 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f7f6 f892 	bl	8003768 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2202      	movs	r2, #2
 800d648:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d64c:	4b49      	ldr	r3, [pc, #292]	@ (800d774 <HAL_RTC_Init+0x15c>)
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	f003 0310 	and.w	r3, r3, #16
 800d654:	2b10      	cmp	r3, #16
 800d656:	d07e      	beq.n	800d756 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	22ca      	movs	r2, #202	@ 0xca
 800d65e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2253      	movs	r2, #83	@ 0x53
 800d666:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fa1d 	bl	800daa8 <RTC_EnterInitMode>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	d00a      	beq.n	800d68a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	22ff      	movs	r2, #255	@ 0xff
 800d67a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2204      	movs	r2, #4
 800d680:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	73fb      	strb	r3, [r7, #15]
 800d688:	e067      	b.n	800d75a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	6812      	ldr	r2, [r2, #0]
 800d694:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d69c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6899      	ldr	r1, [r3, #8]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	691b      	ldr	r3, [r3, #16]
 800d6ac:	431a      	orrs	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	699b      	ldr	r3, [r3, #24]
 800d6b2:	431a      	orrs	r2, r3
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	430a      	orrs	r2, r1
 800d6ba:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	68d2      	ldr	r2, [r2, #12]
 800d6c4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	6919      	ldr	r1, [r3, #16]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	041a      	lsls	r2, r3, #16
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	430a      	orrs	r2, r1
 800d6d8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	68da      	ldr	r2, [r3, #12]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d6e8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f022 0203 	bic.w	r2, r2, #3
 800d6f8:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	69da      	ldr	r2, [r3, #28]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	431a      	orrs	r2, r3
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	430a      	orrs	r2, r1
 800d710:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	f003 0320 	and.w	r3, r3, #32
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d113      	bne.n	800d748 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 f99b 	bl	800da5c <HAL_RTC_WaitForSynchro>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d00d      	beq.n	800d748 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	22ff      	movs	r2, #255	@ 0xff
 800d732:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2204      	movs	r2, #4
 800d738:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2200      	movs	r2, #0
 800d740:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d744:	2301      	movs	r3, #1
 800d746:	e010      	b.n	800d76a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	22ff      	movs	r2, #255	@ 0xff
 800d74e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	73fb      	strb	r3, [r7, #15]
 800d754:	e001      	b.n	800d75a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d756:	2300      	movs	r3, #0
 800d758:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d75a:	7bfb      	ldrb	r3, [r7, #15]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d103      	bne.n	800d768 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2201      	movs	r2, #1
 800d764:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d768:	7bfb      	ldrb	r3, [r7, #15]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
 800d772:	bf00      	nop
 800d774:	40002800 	.word	0x40002800

0800d778 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d778:	b590      	push	{r4, r7, lr}
 800d77a:	b087      	sub	sp, #28
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d78a:	2b01      	cmp	r3, #1
 800d78c:	d101      	bne.n	800d792 <HAL_RTC_SetTime+0x1a>
 800d78e:	2302      	movs	r3, #2
 800d790:	e0b2      	b.n	800d8f8 <HAL_RTC_SetTime+0x180>
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2201      	movs	r2, #1
 800d796:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2202      	movs	r2, #2
 800d79e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d126      	bne.n	800d7f6 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	689b      	ldr	r3, [r3, #8]
 800d7ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d102      	bne.n	800d7bc <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f000 f99b 	bl	800dafc <RTC_ByteToBcd2>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	785b      	ldrb	r3, [r3, #1]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f000 f994 	bl	800dafc <RTC_ByteToBcd2>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d7d8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800d7da:	68bb      	ldr	r3, [r7, #8]
 800d7dc:	789b      	ldrb	r3, [r3, #2]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f98c 	bl	800dafc <RTC_ByteToBcd2>
 800d7e4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800d7e6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	78db      	ldrb	r3, [r3, #3]
 800d7ee:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	e018      	b.n	800d828 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	689b      	ldr	r3, [r3, #8]
 800d7fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d800:	2b00      	cmp	r3, #0
 800d802:	d102      	bne.n	800d80a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	2200      	movs	r2, #0
 800d808:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	785b      	ldrb	r3, [r3, #1]
 800d814:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d816:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800d818:	68ba      	ldr	r2, [r7, #8]
 800d81a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800d81c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	78db      	ldrb	r3, [r3, #3]
 800d822:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800d824:	4313      	orrs	r3, r2
 800d826:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	22ca      	movs	r2, #202	@ 0xca
 800d82e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	2253      	movs	r2, #83	@ 0x53
 800d836:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d838:	68f8      	ldr	r0, [r7, #12]
 800d83a:	f000 f935 	bl	800daa8 <RTC_EnterInitMode>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00d      	beq.n	800d860 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	22ff      	movs	r2, #255	@ 0xff
 800d84a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2204      	movs	r2, #4
 800d850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d85c:	2301      	movs	r3, #1
 800d85e:	e04b      	b.n	800d8f8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800d86a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800d86e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	689a      	ldr	r2, [r3, #8]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d87e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	6899      	ldr	r1, [r3, #8]
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	68da      	ldr	r2, [r3, #12]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	691b      	ldr	r3, [r3, #16]
 800d88e:	431a      	orrs	r2, r3
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	430a      	orrs	r2, r1
 800d896:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	68da      	ldr	r2, [r3, #12]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d8a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	689b      	ldr	r3, [r3, #8]
 800d8ae:	f003 0320 	and.w	r3, r3, #32
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d113      	bne.n	800d8de <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f000 f8d0 	bl	800da5c <HAL_RTC_WaitForSynchro>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00d      	beq.n	800d8de <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	22ff      	movs	r2, #255	@ 0xff
 800d8c8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	2204      	movs	r2, #4
 800d8ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800d8da:	2301      	movs	r3, #1
 800d8dc:	e00c      	b.n	800d8f8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	22ff      	movs	r2, #255	@ 0xff
 800d8e4:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800d8f6:	2300      	movs	r3, #0
  }
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	371c      	adds	r7, #28
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	bd90      	pop	{r4, r7, pc}

0800d900 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d900:	b590      	push	{r4, r7, lr}
 800d902:	b087      	sub	sp, #28
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	60b9      	str	r1, [r7, #8]
 800d90a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d912:	2b01      	cmp	r3, #1
 800d914:	d101      	bne.n	800d91a <HAL_RTC_SetDate+0x1a>
 800d916:	2302      	movs	r3, #2
 800d918:	e09c      	b.n	800da54 <HAL_RTC_SetDate+0x154>
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2201      	movs	r2, #1
 800d91e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	2202      	movs	r2, #2
 800d926:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10e      	bne.n	800d94e <HAL_RTC_SetDate+0x4e>
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	785b      	ldrb	r3, [r3, #1]
 800d934:	f003 0310 	and.w	r3, r3, #16
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d008      	beq.n	800d94e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	785b      	ldrb	r3, [r3, #1]
 800d940:	f023 0310 	bic.w	r3, r3, #16
 800d944:	b2db      	uxtb	r3, r3
 800d946:	330a      	adds	r3, #10
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	68bb      	ldr	r3, [r7, #8]
 800d94c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d11c      	bne.n	800d98e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	78db      	ldrb	r3, [r3, #3]
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 f8cf 	bl	800dafc <RTC_ByteToBcd2>
 800d95e:	4603      	mov	r3, r0
 800d960:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	785b      	ldrb	r3, [r3, #1]
 800d966:	4618      	mov	r0, r3
 800d968:	f000 f8c8 	bl	800dafc <RTC_ByteToBcd2>
 800d96c:	4603      	mov	r3, r0
 800d96e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d970:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	789b      	ldrb	r3, [r3, #2]
 800d976:	4618      	mov	r0, r3
 800d978:	f000 f8c0 	bl	800dafc <RTC_ByteToBcd2>
 800d97c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d97e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d988:	4313      	orrs	r3, r2
 800d98a:	617b      	str	r3, [r7, #20]
 800d98c:	e00e      	b.n	800d9ac <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	78db      	ldrb	r3, [r3, #3]
 800d992:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	785b      	ldrb	r3, [r3, #1]
 800d998:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d99a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d99c:	68ba      	ldr	r2, [r7, #8]
 800d99e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d9a0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	22ca      	movs	r2, #202	@ 0xca
 800d9b2:	625a      	str	r2, [r3, #36]	@ 0x24
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2253      	movs	r2, #83	@ 0x53
 800d9ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f000 f873 	bl	800daa8 <RTC_EnterInitMode>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00d      	beq.n	800d9e4 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	22ff      	movs	r2, #255	@ 0xff
 800d9ce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	2204      	movs	r2, #4
 800d9d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	e037      	b.n	800da54 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681a      	ldr	r2, [r3, #0]
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d9ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d9f2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	68da      	ldr	r2, [r3, #12]
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800da02:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	689b      	ldr	r3, [r3, #8]
 800da0a:	f003 0320 	and.w	r3, r3, #32
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d113      	bne.n	800da3a <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	f000 f822 	bl	800da5c <HAL_RTC_WaitForSynchro>
 800da18:	4603      	mov	r3, r0
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00d      	beq.n	800da3a <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	22ff      	movs	r2, #255	@ 0xff
 800da24:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	2204      	movs	r2, #4
 800da2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	2200      	movs	r2, #0
 800da32:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800da36:	2301      	movs	r3, #1
 800da38:	e00c      	b.n	800da54 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	22ff      	movs	r2, #255	@ 0xff
 800da40:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	2200      	movs	r2, #0
 800da4e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800da52:	2300      	movs	r3, #0
  }
}
 800da54:	4618      	mov	r0, r3
 800da56:	371c      	adds	r7, #28
 800da58:	46bd      	mov	sp, r7
 800da5a:	bd90      	pop	{r4, r7, pc}

0800da5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	68da      	ldr	r2, [r3, #12]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800da72:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800da74:	f7f9 fc90 	bl	8007398 <HAL_GetTick>
 800da78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800da7a:	e009      	b.n	800da90 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800da7c:	f7f9 fc8c 	bl	8007398 <HAL_GetTick>
 800da80:	4602      	mov	r2, r0
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800da8a:	d901      	bls.n	800da90 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800da8c:	2303      	movs	r3, #3
 800da8e:	e007      	b.n	800daa0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	68db      	ldr	r3, [r3, #12]
 800da96:	f003 0320 	and.w	r3, r3, #32
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d0ee      	beq.n	800da7c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	68db      	ldr	r3, [r3, #12]
 800dab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d119      	bne.n	800daf2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	f04f 32ff 	mov.w	r2, #4294967295
 800dac6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800dac8:	f7f9 fc66 	bl	8007398 <HAL_GetTick>
 800dacc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dace:	e009      	b.n	800dae4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800dad0:	f7f9 fc62 	bl	8007398 <HAL_GetTick>
 800dad4:	4602      	mov	r2, r0
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	1ad3      	subs	r3, r2, r3
 800dada:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dade:	d901      	bls.n	800dae4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800dae0:	2303      	movs	r3, #3
 800dae2:	e007      	b.n	800daf4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d0ee      	beq.n	800dad0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3710      	adds	r7, #16
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	4603      	mov	r3, r0
 800db04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800db06:	2300      	movs	r3, #0
 800db08:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800db0a:	79fb      	ldrb	r3, [r7, #7]
 800db0c:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800db0e:	e005      	b.n	800db1c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	3301      	adds	r3, #1
 800db14:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800db16:	7afb      	ldrb	r3, [r7, #11]
 800db18:	3b0a      	subs	r3, #10
 800db1a:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800db1c:	7afb      	ldrb	r3, [r7, #11]
 800db1e:	2b09      	cmp	r3, #9
 800db20:	d8f6      	bhi.n	800db10 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	b2db      	uxtb	r3, r3
 800db26:	011b      	lsls	r3, r3, #4
 800db28:	b2da      	uxtb	r2, r3
 800db2a:	7afb      	ldrb	r3, [r7, #11]
 800db2c:	4313      	orrs	r3, r2
 800db2e:	b2db      	uxtb	r3, r3
}
 800db30:	4618      	mov	r0, r3
 800db32:	3714      	adds	r7, #20
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800db4e:	2b01      	cmp	r3, #1
 800db50:	d101      	bne.n	800db56 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800db52:	2302      	movs	r3, #2
 800db54:	e0a8      	b.n	800dca8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2201      	movs	r2, #1
 800db5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2202      	movs	r2, #2
 800db62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	22ca      	movs	r2, #202	@ 0xca
 800db6c:	625a      	str	r2, [r3, #36]	@ 0x24
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2253      	movs	r2, #83	@ 0x53
 800db74:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800db80:	2b00      	cmp	r3, #0
 800db82:	d020      	beq.n	800dbc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800db84:	f7f9 fc08 	bl	8007398 <HAL_GetTick>
 800db88:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800db8a:	e015      	b.n	800dbb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800db8c:	f7f9 fc04 	bl	8007398 <HAL_GetTick>
 800db90:	4602      	mov	r2, r0
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800db9a:	d90d      	bls.n	800dbb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	22ff      	movs	r2, #255	@ 0xff
 800dba2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2203      	movs	r2, #3
 800dba8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800dbb4:	2303      	movs	r3, #3
 800dbb6:	e077      	b.n	800dca8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68db      	ldr	r3, [r3, #12]
 800dbbe:	f003 0304 	and.w	r3, r3, #4
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d1e2      	bne.n	800db8c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	689a      	ldr	r2, [r3, #8]
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dbd4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	68db      	ldr	r3, [r3, #12]
 800dbdc:	b2da      	uxtb	r2, r3
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800dbe6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800dbe8:	f7f9 fbd6 	bl	8007398 <HAL_GetTick>
 800dbec:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dbee:	e015      	b.n	800dc1c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800dbf0:	f7f9 fbd2 	bl	8007398 <HAL_GetTick>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800dbfe:	d90d      	bls.n	800dc1c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	22ff      	movs	r2, #255	@ 0xff
 800dc06:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	2203      	movs	r2, #3
 800dc0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2200      	movs	r2, #0
 800dc14:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800dc18:	2303      	movs	r3, #3
 800dc1a:	e045      	b.n	800dca8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	f003 0304 	and.w	r3, r3, #4
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d0e2      	beq.n	800dbf0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	689a      	ldr	r2, [r3, #8]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f022 0207 	bic.w	r2, r2, #7
 800dc40:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6899      	ldr	r1, [r3, #8]
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	430a      	orrs	r2, r1
 800dc50:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800dc52:	4b17      	ldr	r3, [pc, #92]	@ (800dcb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dc54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800dc58:	4a15      	ldr	r2, [pc, #84]	@ (800dcb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dc5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dc5e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800dc62:	4b13      	ldr	r3, [pc, #76]	@ (800dcb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a12      	ldr	r2, [pc, #72]	@ (800dcb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800dc68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dc6c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	689a      	ldr	r2, [r3, #8]
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dc7c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	689a      	ldr	r2, [r3, #8]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800dc8c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	22ff      	movs	r2, #255	@ 0xff
 800dc94:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	2201      	movs	r2, #1
 800dc9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3718      	adds	r7, #24
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	58000800 	.word	0x58000800

0800dcb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b084      	sub	sp, #16
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	e095      	b.n	800ddf2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d108      	bne.n	800dce0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	685b      	ldr	r3, [r3, #4]
 800dcd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dcd6:	d009      	beq.n	800dcec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	61da      	str	r2, [r3, #28]
 800dcde:	e005      	b.n	800dcec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dcf8:	b2db      	uxtb	r3, r3
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d106      	bne.n	800dd0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f7f5 fdd6 	bl	80038b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2202      	movs	r2, #2
 800dd10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dd2c:	d902      	bls.n	800dd34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	60fb      	str	r3, [r7, #12]
 800dd32:	e002      	b.n	800dd3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800dd34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dd38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800dd42:	d007      	beq.n	800dd54 <HAL_SPI_Init+0xa0>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dd4c:	d002      	beq.n	800dd54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800dd64:	431a      	orrs	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	691b      	ldr	r3, [r3, #16]
 800dd6a:	f003 0302 	and.w	r3, r3, #2
 800dd6e:	431a      	orrs	r2, r3
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	695b      	ldr	r3, [r3, #20]
 800dd74:	f003 0301 	and.w	r3, r3, #1
 800dd78:	431a      	orrs	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	699b      	ldr	r3, [r3, #24]
 800dd7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dd82:	431a      	orrs	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	69db      	ldr	r3, [r3, #28]
 800dd88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dd8c:	431a      	orrs	r2, r3
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a1b      	ldr	r3, [r3, #32]
 800dd92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd96:	ea42 0103 	orr.w	r1, r2, r3
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	430a      	orrs	r2, r1
 800dda8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	699b      	ldr	r3, [r3, #24]
 800ddae:	0c1b      	lsrs	r3, r3, #16
 800ddb0:	f003 0204 	and.w	r2, r3, #4
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ddb8:	f003 0310 	and.w	r3, r3, #16
 800ddbc:	431a      	orrs	r2, r3
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ddc2:	f003 0308 	and.w	r3, r3, #8
 800ddc6:	431a      	orrs	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	68db      	ldr	r3, [r3, #12]
 800ddcc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ddd0:	ea42 0103 	orr.w	r1, r2, r3
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	430a      	orrs	r2, r1
 800dde0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800ddf0:	2300      	movs	r3, #0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
	...

0800ddfc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b084      	sub	sp, #16
 800de00:	af00      	add	r7, sp, #0
 800de02:	60f8      	str	r0, [r7, #12]
 800de04:	60b9      	str	r1, [r7, #8]
 800de06:	4613      	mov	r3, r2
 800de08:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b01      	cmp	r3, #1
 800de14:	d001      	beq.n	800de1a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800de16:	2302      	movs	r3, #2
 800de18:	e0d4      	b.n	800dfc4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d002      	beq.n	800de26 <HAL_SPI_Transmit_DMA+0x2a>
 800de20:	88fb      	ldrh	r3, [r7, #6]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d101      	bne.n	800de2a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	e0cc      	b.n	800dfc4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800de30:	2b01      	cmp	r3, #1
 800de32:	d101      	bne.n	800de38 <HAL_SPI_Transmit_DMA+0x3c>
 800de34:	2302      	movs	r3, #2
 800de36:	e0c5      	b.n	800dfc4 <HAL_SPI_Transmit_DMA+0x1c8>
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2203      	movs	r2, #3
 800de44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2200      	movs	r2, #0
 800de4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	68ba      	ldr	r2, [r7, #8]
 800de52:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	88fa      	ldrh	r2, [r7, #6]
 800de58:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	88fa      	ldrh	r2, [r7, #6]
 800de5e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2200      	movs	r2, #0
 800de64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2200      	movs	r2, #0
 800de6a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2200      	movs	r2, #0
 800de70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	689b      	ldr	r3, [r3, #8]
 800de86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de8a:	d10f      	bne.n	800deac <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800de9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800deaa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deb0:	4a46      	ldr	r2, [pc, #280]	@ (800dfcc <HAL_SPI_Transmit_DMA+0x1d0>)
 800deb2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deb8:	4a45      	ldr	r2, [pc, #276]	@ (800dfd0 <HAL_SPI_Transmit_DMA+0x1d4>)
 800deba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dec0:	4a44      	ldr	r2, [pc, #272]	@ (800dfd4 <HAL_SPI_Transmit_DMA+0x1d8>)
 800dec2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dec8:	2200      	movs	r2, #0
 800deca:	639a      	str	r2, [r3, #56]	@ 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800deda:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	68db      	ldr	r3, [r3, #12]
 800dee0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800dee4:	d82d      	bhi.n	800df42 <HAL_SPI_Transmit_DMA+0x146>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800deea:	699b      	ldr	r3, [r3, #24]
 800deec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800def0:	d127      	bne.n	800df42 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800def6:	b29b      	uxth	r3, r3
 800def8:	f003 0301 	and.w	r3, r3, #1
 800defc:	2b00      	cmp	r3, #0
 800defe:	d10f      	bne.n	800df20 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800df0e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df14:	b29b      	uxth	r3, r3
 800df16:	085b      	lsrs	r3, r3, #1
 800df18:	b29a      	uxth	r2, r3
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800df1e:	e010      	b.n	800df42 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	685a      	ldr	r2, [r3, #4]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800df2e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df34:	b29b      	uxth	r3, r3
 800df36:	085b      	lsrs	r3, r3, #1
 800df38:	b29b      	uxth	r3, r3
 800df3a:	3301      	adds	r3, #1
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df4a:	4619      	mov	r1, r3
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	330c      	adds	r3, #12
 800df52:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df58:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800df5a:	f7fa fd99 	bl	8008a90 <HAL_DMA_Start_IT>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00b      	beq.n	800df7c <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df68:	f043 0210 	orr.w	r2, r3, #16
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2200      	movs	r2, #0
 800df74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800df78:	2301      	movs	r3, #1
 800df7a:	e023      	b.n	800dfc4 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800df86:	2b40      	cmp	r3, #64	@ 0x40
 800df88:	d007      	beq.n	800df9a <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800df98:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	685a      	ldr	r2, [r3, #4]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f042 0220 	orr.w	r2, r2, #32
 800dfb0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	685a      	ldr	r2, [r3, #4]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	f042 0202 	orr.w	r2, r2, #2
 800dfc0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dfc2:	2300      	movs	r3, #0
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3710      	adds	r7, #16
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	0800ea13 	.word	0x0800ea13
 800dfd0:	0800e835 	.word	0x0800e835
 800dfd4:	0800ea67 	.word	0x0800ea67

0800dfd8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b084      	sub	sp, #16
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	4613      	mov	r3, r2
 800dfe4:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	2b01      	cmp	r3, #1
 800dff0:	d001      	beq.n	800dff6 <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 800dff2:	2302      	movs	r3, #2
 800dff4:	e105      	b.n	800e202 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800dff6:	68bb      	ldr	r3, [r7, #8]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <HAL_SPI_Receive_DMA+0x2a>
 800dffc:	88fb      	ldrh	r3, [r7, #6]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d101      	bne.n	800e006 <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 800e002:	2301      	movs	r3, #1
 800e004:	e0fd      	b.n	800e202 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d110      	bne.n	800e030 <HAL_SPI_Receive_DMA+0x58>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e016:	d10b      	bne.n	800e030 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2204      	movs	r2, #4
 800e01c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800e020:	88fb      	ldrh	r3, [r7, #6]
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	68b9      	ldr	r1, [r7, #8]
 800e026:	68f8      	ldr	r0, [r7, #12]
 800e028:	f000 f8f6 	bl	800e218 <HAL_SPI_TransmitReceive_DMA>
 800e02c:	4603      	mov	r3, r0
 800e02e:	e0e8      	b.n	800e202 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e036:	2b01      	cmp	r3, #1
 800e038:	d101      	bne.n	800e03e <HAL_SPI_Receive_DMA+0x66>
 800e03a:	2302      	movs	r3, #2
 800e03c:	e0e1      	b.n	800e202 <HAL_SPI_Receive_DMA+0x22a>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2201      	movs	r2, #1
 800e042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2204      	movs	r2, #4
 800e04a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2200      	movs	r2, #0
 800e052:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	68ba      	ldr	r2, [r7, #8]
 800e058:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	88fa      	ldrh	r2, [r7, #6]
 800e05e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	88fa      	ldrh	r2, [r7, #6]
 800e066:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2200      	movs	r2, #0
 800e06e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2200      	movs	r2, #0
 800e074:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e08a:	d10f      	bne.n	800e0ac <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e09a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681a      	ldr	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e0aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	685a      	ldr	r2, [r3, #4]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e0ba:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e0c4:	d908      	bls.n	800e0d8 <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	685a      	ldr	r2, [r3, #4]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e0d4:	605a      	str	r2, [r3, #4]
 800e0d6:	e042      	b.n	800e15e <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	685a      	ldr	r2, [r3, #4]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e0e6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0ec:	699b      	ldr	r3, [r3, #24]
 800e0ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0f2:	d134      	bne.n	800e15e <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	685a      	ldr	r2, [r3, #4]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e102:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	f003 0301 	and.w	r3, r3, #1
 800e110:	2b00      	cmp	r3, #0
 800e112:	d111      	bne.n	800e138 <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	685a      	ldr	r2, [r3, #4]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e122:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	085b      	lsrs	r3, r3, #1
 800e12e:	b29a      	uxth	r2, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e136:	e012      	b.n	800e15e <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	685a      	ldr	r2, [r3, #4]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e146:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e14e:	b29b      	uxth	r3, r3
 800e150:	085b      	lsrs	r3, r3, #1
 800e152:	b29b      	uxth	r3, r3
 800e154:	3301      	adds	r3, #1
 800e156:	b29a      	uxth	r2, r3
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e162:	4a2a      	ldr	r2, [pc, #168]	@ (800e20c <HAL_SPI_Receive_DMA+0x234>)
 800e164:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e16a:	4a29      	ldr	r2, [pc, #164]	@ (800e210 <HAL_SPI_Receive_DMA+0x238>)
 800e16c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e172:	4a28      	ldr	r2, [pc, #160]	@ (800e214 <HAL_SPI_Receive_DMA+0x23c>)
 800e174:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e17a:	2200      	movs	r2, #0
 800e17c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	330c      	adds	r3, #12
 800e188:	4619      	mov	r1, r3
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e18e:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e196:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e198:	f7fa fc7a 	bl	8008a90 <HAL_DMA_Start_IT>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00b      	beq.n	800e1ba <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1a6:	f043 0210 	orr.w	r2, r3, #16
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e023      	b.n	800e202 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e1c4:	2b40      	cmp	r3, #64	@ 0x40
 800e1c6:	d007      	beq.n	800e1d8 <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e1d6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	685a      	ldr	r2, [r3, #4]
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	f042 0220 	orr.w	r2, r2, #32
 800e1ee:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	685a      	ldr	r2, [r3, #4]
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f042 0201 	orr.w	r2, r2, #1
 800e1fe:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	0800ea2f 	.word	0x0800ea2f
 800e210:	0800e8db 	.word	0x0800e8db
 800e214:	0800ea67 	.word	0x0800ea67

0800e218 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b086      	sub	sp, #24
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	60f8      	str	r0, [r7, #12]
 800e220:	60b9      	str	r1, [r7, #8]
 800e222:	607a      	str	r2, [r7, #4]
 800e224:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e22c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800e234:	7dfb      	ldrb	r3, [r7, #23]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d00c      	beq.n	800e254 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e240:	d106      	bne.n	800e250 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d102      	bne.n	800e250 <HAL_SPI_TransmitReceive_DMA+0x38>
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	2b04      	cmp	r3, #4
 800e24e:	d001      	beq.n	800e254 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e250:	2302      	movs	r3, #2
 800e252:	e158      	b.n	800e506 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d005      	beq.n	800e266 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d002      	beq.n	800e266 <HAL_SPI_TransmitReceive_DMA+0x4e>
 800e260:	887b      	ldrh	r3, [r7, #2]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d101      	bne.n	800e26a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800e266:	2301      	movs	r3, #1
 800e268:	e14d      	b.n	800e506 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800e270:	2b01      	cmp	r3, #1
 800e272:	d101      	bne.n	800e278 <HAL_SPI_TransmitReceive_DMA+0x60>
 800e274:	2302      	movs	r3, #2
 800e276:	e146      	b.n	800e506 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2201      	movs	r2, #1
 800e27c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e286:	b2db      	uxtb	r3, r3
 800e288:	2b04      	cmp	r3, #4
 800e28a:	d003      	beq.n	800e294 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2205      	movs	r2, #5
 800e290:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2200      	movs	r2, #0
 800e298:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	68ba      	ldr	r2, [r7, #8]
 800e29e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	887a      	ldrh	r2, [r7, #2]
 800e2a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	887a      	ldrh	r2, [r7, #2]
 800e2aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	887a      	ldrh	r2, [r7, #2]
 800e2b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	887a      	ldrh	r2, [r7, #2]
 800e2be:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 800e2dc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800e2e6:	d908      	bls.n	800e2fa <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	685a      	ldr	r2, [r3, #4]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e2f6:	605a      	str	r2, [r3, #4]
 800e2f8:	e06f      	b.n	800e3da <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	685a      	ldr	r2, [r3, #4]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e308:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e30e:	699b      	ldr	r3, [r3, #24]
 800e310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e314:	d126      	bne.n	800e364 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800e31a:	f003 0301 	and.w	r3, r3, #1
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10f      	bne.n	800e342 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	685a      	ldr	r2, [r3, #4]
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e330:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e336:	b29b      	uxth	r3, r3
 800e338:	085b      	lsrs	r3, r3, #1
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e340:	e010      	b.n	800e364 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	685a      	ldr	r2, [r3, #4]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e350:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e356:	b29b      	uxth	r3, r3
 800e358:	085b      	lsrs	r3, r3, #1
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	3301      	adds	r3, #1
 800e35e:	b29a      	uxth	r2, r3
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e368:	699b      	ldr	r3, [r3, #24]
 800e36a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e36e:	d134      	bne.n	800e3da <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800e37e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e386:	b29b      	uxth	r3, r3
 800e388:	f003 0301 	and.w	r3, r3, #1
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d111      	bne.n	800e3b4 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	685a      	ldr	r2, [r3, #4]
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e39e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e3a6:	b29b      	uxth	r3, r3
 800e3a8:	085b      	lsrs	r3, r3, #1
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800e3b2:	e012      	b.n	800e3da <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	685a      	ldr	r2, [r3, #4]
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e3c2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e3ca:	b29b      	uxth	r3, r3
 800e3cc:	085b      	lsrs	r3, r3, #1
 800e3ce:	b29b      	uxth	r3, r3
 800e3d0:	3301      	adds	r3, #1
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b04      	cmp	r3, #4
 800e3e4:	d108      	bne.n	800e3f8 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3ea:	4a49      	ldr	r2, [pc, #292]	@ (800e510 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800e3ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3f2:	4a48      	ldr	r2, [pc, #288]	@ (800e514 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800e3f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800e3f6:	e007      	b.n	800e408 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e3fc:	4a46      	ldr	r2, [pc, #280]	@ (800e518 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800e3fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e404:	4a45      	ldr	r2, [pc, #276]	@ (800e51c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800e406:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e40c:	4a44      	ldr	r2, [pc, #272]	@ (800e520 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800e40e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e414:	2200      	movs	r2, #0
 800e416:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	330c      	adds	r3, #12
 800e422:	4619      	mov	r1, r3
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e428:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800e430:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800e432:	f7fa fb2d 	bl	8008a90 <HAL_DMA_Start_IT>
 800e436:	4603      	mov	r3, r0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00b      	beq.n	800e454 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e440:	f043 0210 	orr.w	r2, r3, #16
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	2200      	movs	r2, #0
 800e44c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	e058      	b.n	800e506 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	685a      	ldr	r2, [r3, #4]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	f042 0201 	orr.w	r2, r2, #1
 800e462:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e468:	2200      	movs	r2, #0
 800e46a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e470:	2200      	movs	r2, #0
 800e472:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e478:	2200      	movs	r2, #0
 800e47a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e480:	2200      	movs	r2, #0
 800e482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e48c:	4619      	mov	r1, r3
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	330c      	adds	r3, #12
 800e494:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e49a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800e49c:	f7fa faf8 	bl	8008a90 <HAL_DMA_Start_IT>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00b      	beq.n	800e4be <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e4aa:	f043 0210 	orr.w	r2, r3, #16
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e023      	b.n	800e506 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4c8:	2b40      	cmp	r3, #64	@ 0x40
 800e4ca:	d007      	beq.n	800e4dc <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e4da:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	685a      	ldr	r2, [r3, #4]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f042 0220 	orr.w	r2, r2, #32
 800e4f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	685a      	ldr	r2, [r3, #4]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	f042 0202 	orr.w	r2, r2, #2
 800e502:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e504:	2300      	movs	r3, #0
}
 800e506:	4618      	mov	r0, r3
 800e508:	3718      	adds	r7, #24
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	0800ea2f 	.word	0x0800ea2f
 800e514:	0800e8db 	.word	0x0800e8db
 800e518:	0800ea4b 	.word	0x0800ea4b
 800e51c:	0800e983 	.word	0x0800e983
 800e520:	0800ea67 	.word	0x0800ea67

0800e524 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e52c:	2300      	movs	r3, #0
 800e52e:	73fb      	strb	r3, [r7, #15]
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or
     HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00f      	beq.n	800e558 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e53c:	4618      	mov	r0, r3
 800e53e:	f7fa fb22 	bl	8008b86 <HAL_DMA_Abort>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d007      	beq.n	800e558 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e54c:	f043 0210 	orr.w	r2, r3, #16
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800e554:	2301      	movs	r3, #1
 800e556:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d00f      	beq.n	800e580 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e564:	4618      	mov	r0, r3
 800e566:	f7fa fb0e 	bl	8008b86 <HAL_DMA_Abort>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d007      	beq.n	800e580 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e574:	f043 0210 	orr.w	r2, r3, #16
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 800e57c:	2301      	movs	r3, #1
 800e57e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	685a      	ldr	r2, [r3, #4]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f022 0203 	bic.w	r2, r2, #3
 800e58e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 800e598:	7bfb      	ldrb	r3, [r7, #15]
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
	...

0800e5a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b088      	sub	sp, #32
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	689b      	ldr	r3, [r3, #8]
 800e5ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d10e      	bne.n	800e5e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e5c6:	69bb      	ldr	r3, [r7, #24]
 800e5c8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d009      	beq.n	800e5e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d004      	beq.n	800e5e4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	4798      	blx	r3
    return;
 800e5e2:	e0ce      	b.n	800e782 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	f003 0302 	and.w	r3, r3, #2
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d009      	beq.n	800e602 <HAL_SPI_IRQHandler+0x5e>
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d004      	beq.n	800e602 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	4798      	blx	r3
    return;
 800e600:	e0bf      	b.n	800e782 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e602:	69bb      	ldr	r3, [r7, #24]
 800e604:	f003 0320 	and.w	r3, r3, #32
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10a      	bne.n	800e622 <HAL_SPI_IRQHandler+0x7e>
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e612:	2b00      	cmp	r3, #0
 800e614:	d105      	bne.n	800e622 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f000 80b0 	beq.w	800e782 <HAL_SPI_IRQHandler+0x1de>
 800e622:	69fb      	ldr	r3, [r7, #28]
 800e624:	f003 0320 	and.w	r3, r3, #32
 800e628:	2b00      	cmp	r3, #0
 800e62a:	f000 80aa 	beq.w	800e782 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e634:	2b00      	cmp	r3, #0
 800e636:	d023      	beq.n	800e680 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b03      	cmp	r3, #3
 800e642:	d011      	beq.n	800e668 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e648:	f043 0204 	orr.w	r2, r3, #4
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e650:	2300      	movs	r3, #0
 800e652:	617b      	str	r3, [r7, #20]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	617b      	str	r3, [r7, #20]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	689b      	ldr	r3, [r3, #8]
 800e662:	617b      	str	r3, [r7, #20]
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	e00b      	b.n	800e680 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e668:	2300      	movs	r3, #0
 800e66a:	613b      	str	r3, [r7, #16]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	613b      	str	r3, [r7, #16]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	689b      	ldr	r3, [r3, #8]
 800e67a:	613b      	str	r3, [r7, #16]
 800e67c:	693b      	ldr	r3, [r7, #16]
        return;
 800e67e:	e080      	b.n	800e782 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	f003 0320 	and.w	r3, r3, #32
 800e686:	2b00      	cmp	r3, #0
 800e688:	d014      	beq.n	800e6b4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e68e:	f043 0201 	orr.w	r2, r3, #1
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e696:	2300      	movs	r3, #0
 800e698:	60fb      	str	r3, [r7, #12]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	689b      	ldr	r3, [r3, #8]
 800e6a0:	60fb      	str	r3, [r7, #12]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00c      	beq.n	800e6d8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e6c2:	f043 0208 	orr.w	r2, r3, #8
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	60bb      	str	r3, [r7, #8]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	689b      	ldr	r3, [r3, #8]
 800e6d4:	60bb      	str	r3, [r7, #8]
 800e6d6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d04f      	beq.n	800e780 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	685a      	ldr	r2, [r3, #4]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e6ee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2201      	movs	r2, #1
 800e6f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	f003 0302 	and.w	r3, r3, #2
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d104      	bne.n	800e70c <HAL_SPI_IRQHandler+0x168>
 800e702:	69fb      	ldr	r3, [r7, #28]
 800e704:	f003 0301 	and.w	r3, r3, #1
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d034      	beq.n	800e776 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	f022 0203 	bic.w	r2, r2, #3
 800e71a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e720:	2b00      	cmp	r3, #0
 800e722:	d011      	beq.n	800e748 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e728:	4a17      	ldr	r2, [pc, #92]	@ (800e788 <HAL_SPI_IRQHandler+0x1e4>)
 800e72a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e730:	4618      	mov	r0, r3
 800e732:	f7fa fa87 	bl	8008c44 <HAL_DMA_Abort_IT>
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d005      	beq.n	800e748 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e740:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d016      	beq.n	800e77e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e754:	4a0c      	ldr	r2, [pc, #48]	@ (800e788 <HAL_SPI_IRQHandler+0x1e4>)
 800e756:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fa fa71 	bl	8008c44 <HAL_DMA_Abort_IT>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d00a      	beq.n	800e77e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e76c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800e774:	e003      	b.n	800e77e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f000 f844 	bl	800e804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e77c:	e000      	b.n	800e780 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800e77e:	bf00      	nop
    return;
 800e780:	bf00      	nop
  }
}
 800e782:	3720      	adds	r7, #32
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	0800eaa7 	.word	0x0800eaa7

0800e78c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b083      	sub	sp, #12
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800e794:	bf00      	nop
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7a0:	b480      	push	{r7}
 800e7a2:	b083      	sub	sp, #12
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800e7a8:	bf00      	nop
 800e7aa:	370c      	adds	r7, #12
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b2:	4770      	bx	lr

0800e7b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7b4:	b480      	push	{r7}
 800e7b6:	b083      	sub	sp, #12
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800e7bc:	bf00      	nop
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e7d0:	bf00      	nop
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800e7e4:	bf00      	nop
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b083      	sub	sp, #12
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800e7f8:	bf00      	nop
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e80c:	bf00      	nop
 800e80e:	370c      	adds	r7, #12
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800e826:	b2db      	uxtb	r3, r3
}
 800e828:	4618      	mov	r0, r3
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr

0800e834 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b086      	sub	sp, #24
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e840:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e842:	f7f8 fda9 	bl	8007398 <HAL_GetTick>
 800e846:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f003 0320 	and.w	r3, r3, #32
 800e852:	2b20      	cmp	r3, #32
 800e854:	d03b      	beq.n	800e8ce <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	685a      	ldr	r2, [r3, #4]
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f022 0220 	bic.w	r2, r2, #32
 800e864:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e866:	697b      	ldr	r3, [r7, #20]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	685a      	ldr	r2, [r3, #4]
 800e86c:	697b      	ldr	r3, [r7, #20]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f022 0202 	bic.w	r2, r2, #2
 800e874:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e876:	693a      	ldr	r2, [r7, #16]
 800e878:	2164      	movs	r1, #100	@ 0x64
 800e87a:	6978      	ldr	r0, [r7, #20]
 800e87c:	f000 fa9e 	bl	800edbc <SPI_EndRxTxTransaction>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d005      	beq.n	800e892 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e88a:	f043 0220 	orr.w	r2, r3, #32
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	689b      	ldr	r3, [r3, #8]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d10a      	bne.n	800e8b0 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e89a:	2300      	movs	r3, #0
 800e89c:	60fb      	str	r3, [r7, #12]
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	68db      	ldr	r3, [r3, #12]
 800e8a4:	60fb      	str	r3, [r7, #12]
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	689b      	ldr	r3, [r3, #8]
 800e8ac:	60fb      	str	r3, [r7, #12]
 800e8ae:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d003      	beq.n	800e8ce <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e8c6:	6978      	ldr	r0, [r7, #20]
 800e8c8:	f7ff ff9c 	bl	800e804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e8cc:	e002      	b.n	800e8d4 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e8ce:	6978      	ldr	r0, [r7, #20]
 800e8d0:	f7ff ff5c 	bl	800e78c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e8d4:	3718      	adds	r7, #24
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b084      	sub	sp, #16
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8e6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e8e8:	f7f8 fd56 	bl	8007398 <HAL_GetTick>
 800e8ec:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f003 0320 	and.w	r3, r3, #32
 800e8f8:	2b20      	cmp	r3, #32
 800e8fa:	d03c      	beq.n	800e976 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	685a      	ldr	r2, [r3, #4]
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	f022 0220 	bic.w	r2, r2, #32
 800e90a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10d      	bne.n	800e930 <SPI_DMAReceiveCplt+0x56>
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	685b      	ldr	r3, [r3, #4]
 800e918:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e91c:	d108      	bne.n	800e930 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	685a      	ldr	r2, [r3, #4]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f022 0203 	bic.w	r2, r2, #3
 800e92c:	605a      	str	r2, [r3, #4]
 800e92e:	e007      	b.n	800e940 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	685a      	ldr	r2, [r3, #4]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f022 0201 	bic.w	r2, r2, #1
 800e93e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	2164      	movs	r1, #100	@ 0x64
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f000 f9e1 	bl	800ed0c <SPI_EndRxTransaction>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d002      	beq.n	800e956 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2220      	movs	r2, #32
 800e954:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2201      	movs	r2, #1
 800e962:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d003      	beq.n	800e976 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	f7ff ff48 	bl	800e804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e974:	e002      	b.n	800e97c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f7ff ff12 	bl	800e7a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e982:	b580      	push	{r7, lr}
 800e984:	b084      	sub	sp, #16
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e98e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e990:	f7f8 fd02 	bl	8007398 <HAL_GetTick>
 800e994:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f003 0320 	and.w	r3, r3, #32
 800e9a0:	2b20      	cmp	r3, #32
 800e9a2:	d030      	beq.n	800ea06 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	685a      	ldr	r2, [r3, #4]
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f022 0220 	bic.w	r2, r2, #32
 800e9b2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e9b4:	68ba      	ldr	r2, [r7, #8]
 800e9b6:	2164      	movs	r1, #100	@ 0x64
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f000 f9ff 	bl	800edbc <SPI_EndRxTxTransaction>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d005      	beq.n	800e9d0 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9c8:	f043 0220 	orr.w	r2, r3, #32
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	685a      	ldr	r2, [r3, #4]
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	f022 0203 	bic.w	r2, r2, #3
 800e9de:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d003      	beq.n	800ea06 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff ff00 	bl	800e804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ea04:	e002      	b.n	800ea0c <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f7ff fed4 	bl	800e7b4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea0c:	3710      	adds	r7, #16
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b084      	sub	sp, #16
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea1e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f7ff fed1 	bl	800e7c8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea26:	bf00      	nop
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b084      	sub	sp, #16
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea3a:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ea3c:	68f8      	ldr	r0, [r7, #12]
 800ea3e:	f7ff fecd 	bl	800e7dc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea42:	bf00      	nop
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b084      	sub	sp, #16
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea56:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7ff fec9 	bl	800e7f0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea5e:	bf00      	nop
 800ea60:	3710      	adds	r7, #16
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b084      	sub	sp, #16
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea72:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	685a      	ldr	r2, [r3, #4]
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f022 0203 	bic.w	r2, r2, #3
 800ea82:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ea88:	f043 0210 	orr.w	r2, r3, #16
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	2201      	movs	r2, #1
 800ea94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ea98:	68f8      	ldr	r0, [r7, #12]
 800ea9a:	f7ff feb3 	bl	800e804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ea9e:	bf00      	nop
 800eaa0:	3710      	adds	r7, #16
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}

0800eaa6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b084      	sub	sp, #16
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eab2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2200      	movs	r2, #0
 800eac0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f7ff fe9e 	bl	800e804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800eac8:	bf00      	nop
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b088      	sub	sp, #32
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	60f8      	str	r0, [r7, #12]
 800ead8:	60b9      	str	r1, [r7, #8]
 800eada:	603b      	str	r3, [r7, #0]
 800eadc:	4613      	mov	r3, r2
 800eade:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800eae0:	f7f8 fc5a 	bl	8007398 <HAL_GetTick>
 800eae4:	4602      	mov	r2, r0
 800eae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae8:	1a9b      	subs	r3, r3, r2
 800eaea:	683a      	ldr	r2, [r7, #0]
 800eaec:	4413      	add	r3, r2
 800eaee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800eaf0:	f7f8 fc52 	bl	8007398 <HAL_GetTick>
 800eaf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800eaf6:	4b39      	ldr	r3, [pc, #228]	@ (800ebdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	015b      	lsls	r3, r3, #5
 800eafc:	0d1b      	lsrs	r3, r3, #20
 800eafe:	69fa      	ldr	r2, [r7, #28]
 800eb00:	fb02 f303 	mul.w	r3, r2, r3
 800eb04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800eb06:	e054      	b.n	800ebb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb0e:	d050      	beq.n	800ebb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800eb10:	f7f8 fc42 	bl	8007398 <HAL_GetTick>
 800eb14:	4602      	mov	r2, r0
 800eb16:	69bb      	ldr	r3, [r7, #24]
 800eb18:	1ad3      	subs	r3, r2, r3
 800eb1a:	69fa      	ldr	r2, [r7, #28]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d902      	bls.n	800eb26 <SPI_WaitFlagStateUntilTimeout+0x56>
 800eb20:	69fb      	ldr	r3, [r7, #28]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d13d      	bne.n	800eba2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	685a      	ldr	r2, [r3, #4]
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800eb34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	685b      	ldr	r3, [r3, #4]
 800eb3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eb3e:	d111      	bne.n	800eb64 <SPI_WaitFlagStateUntilTimeout+0x94>
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800eb48:	d004      	beq.n	800eb54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800eb52:	d107      	bne.n	800eb64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	681a      	ldr	r2, [r3, #0]
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eb62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb6c:	d10f      	bne.n	800eb8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	681a      	ldr	r2, [r3, #0]
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800eb7c:	601a      	str	r2, [r3, #0]
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800eb8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	2201      	movs	r2, #1
 800eb92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2200      	movs	r2, #0
 800eb9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800eb9e:	2303      	movs	r3, #3
 800eba0:	e017      	b.n	800ebd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d101      	bne.n	800ebac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ebac:	697b      	ldr	r3, [r7, #20]
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	689a      	ldr	r2, [r3, #8]
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	4013      	ands	r3, r2
 800ebbc:	68ba      	ldr	r2, [r7, #8]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	bf0c      	ite	eq
 800ebc2:	2301      	moveq	r3, #1
 800ebc4:	2300      	movne	r3, #0
 800ebc6:	b2db      	uxtb	r3, r3
 800ebc8:	461a      	mov	r2, r3
 800ebca:	79fb      	ldrb	r3, [r7, #7]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d19b      	bne.n	800eb08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ebd0:	2300      	movs	r3, #0
}
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	3720      	adds	r7, #32
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}
 800ebda:	bf00      	nop
 800ebdc:	2000002c 	.word	0x2000002c

0800ebe0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b08a      	sub	sp, #40	@ 0x28
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ebf2:	f7f8 fbd1 	bl	8007398 <HAL_GetTick>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebfa:	1a9b      	subs	r3, r3, r2
 800ebfc:	683a      	ldr	r2, [r7, #0]
 800ebfe:	4413      	add	r3, r2
 800ec00:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ec02:	f7f8 fbc9 	bl	8007398 <HAL_GetTick>
 800ec06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	330c      	adds	r3, #12
 800ec0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ec10:	4b3d      	ldr	r3, [pc, #244]	@ (800ed08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	4613      	mov	r3, r2
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	4413      	add	r3, r2
 800ec1a:	00da      	lsls	r2, r3, #3
 800ec1c:	1ad3      	subs	r3, r2, r3
 800ec1e:	0d1b      	lsrs	r3, r3, #20
 800ec20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec22:	fb02 f303 	mul.w	r3, r2, r3
 800ec26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800ec28:	e060      	b.n	800ecec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ec30:	d107      	bne.n	800ec42 <SPI_WaitFifoStateUntilTimeout+0x62>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d104      	bne.n	800ec42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ec40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec48:	d050      	beq.n	800ecec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ec4a:	f7f8 fba5 	bl	8007398 <HAL_GetTick>
 800ec4e:	4602      	mov	r2, r0
 800ec50:	6a3b      	ldr	r3, [r7, #32]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d902      	bls.n	800ec60 <SPI_WaitFifoStateUntilTimeout+0x80>
 800ec5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d13d      	bne.n	800ecdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	685a      	ldr	r2, [r3, #4]
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800ec6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	685b      	ldr	r3, [r3, #4]
 800ec74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ec78:	d111      	bne.n	800ec9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	689b      	ldr	r3, [r3, #8]
 800ec7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ec82:	d004      	beq.n	800ec8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	689b      	ldr	r3, [r3, #8]
 800ec88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ec8c:	d107      	bne.n	800ec9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ec9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eca2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eca6:	d10f      	bne.n	800ecc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ecb6:	601a      	str	r2, [r3, #0]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ecc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800ecd8:	2303      	movs	r3, #3
 800ecda:	e010      	b.n	800ecfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d101      	bne.n	800ece6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800ece2:	2300      	movs	r3, #0
 800ece4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800ece6:	69bb      	ldr	r3, [r7, #24]
 800ece8:	3b01      	subs	r3, #1
 800ecea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	689a      	ldr	r2, [r3, #8]
 800ecf2:	68bb      	ldr	r3, [r7, #8]
 800ecf4:	4013      	ands	r3, r2
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	d196      	bne.n	800ec2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3728      	adds	r7, #40	@ 0x28
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	2000002c 	.word	0x2000002c

0800ed0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b086      	sub	sp, #24
 800ed10:	af02      	add	r7, sp, #8
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed20:	d111      	bne.n	800ed46 <SPI_EndRxTransaction+0x3a>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	689b      	ldr	r3, [r3, #8]
 800ed26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed2a:	d004      	beq.n	800ed36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed34:	d107      	bne.n	800ed46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ed44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2180      	movs	r1, #128	@ 0x80
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f7ff febd 	bl	800ead0 <SPI_WaitFlagStateUntilTimeout>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d007      	beq.n	800ed6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ed60:	f043 0220 	orr.w	r2, r3, #32
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ed68:	2303      	movs	r3, #3
 800ed6a:	e023      	b.n	800edb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ed74:	d11d      	bne.n	800edb2 <SPI_EndRxTransaction+0xa6>
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed7e:	d004      	beq.n	800ed8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ed88:	d113      	bne.n	800edb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	2200      	movs	r2, #0
 800ed92:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7ff ff22 	bl	800ebe0 <SPI_WaitFifoStateUntilTimeout>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d007      	beq.n	800edb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eda6:	f043 0220 	orr.w	r2, r3, #32
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800edae:	2303      	movs	r3, #3
 800edb0:	e000      	b.n	800edb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800edb2:	2300      	movs	r3, #0
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	3710      	adds	r7, #16
 800edb8:	46bd      	mov	sp, r7
 800edba:	bd80      	pop	{r7, pc}

0800edbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800edbc:	b580      	push	{r7, lr}
 800edbe:	b086      	sub	sp, #24
 800edc0:	af02      	add	r7, sp, #8
 800edc2:	60f8      	str	r0, [r7, #12]
 800edc4:	60b9      	str	r1, [r7, #8]
 800edc6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	9300      	str	r3, [sp, #0]
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	2200      	movs	r2, #0
 800edd0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f7ff ff03 	bl	800ebe0 <SPI_WaitFifoStateUntilTimeout>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d007      	beq.n	800edf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ede4:	f043 0220 	orr.w	r2, r3, #32
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800edec:	2303      	movs	r3, #3
 800edee:	e027      	b.n	800ee40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	9300      	str	r3, [sp, #0]
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	2200      	movs	r2, #0
 800edf8:	2180      	movs	r1, #128	@ 0x80
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f7ff fe68 	bl	800ead0 <SPI_WaitFlagStateUntilTimeout>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d007      	beq.n	800ee16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee0a:	f043 0220 	orr.w	r2, r3, #32
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ee12:	2303      	movs	r3, #3
 800ee14:	e014      	b.n	800ee40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	9300      	str	r3, [sp, #0]
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800ee22:	68f8      	ldr	r0, [r7, #12]
 800ee24:	f7ff fedc 	bl	800ebe0 <SPI_WaitFifoStateUntilTimeout>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d007      	beq.n	800ee3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee32:	f043 0220 	orr.w	r2, r3, #32
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ee3a:	2303      	movs	r3, #3
 800ee3c:	e000      	b.n	800ee40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ee3e:	2300      	movs	r3, #0
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d101      	bne.n	800ee5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee56:	2301      	movs	r3, #1
 800ee58:	e049      	b.n	800eeee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d106      	bne.n	800ee74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	2200      	movs	r2, #0
 800ee6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee6e:	6878      	ldr	r0, [r7, #4]
 800ee70:	f7f7 fdbc 	bl	80069ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	2202      	movs	r2, #2
 800ee78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681a      	ldr	r2, [r3, #0]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	3304      	adds	r3, #4
 800ee84:	4619      	mov	r1, r3
 800ee86:	4610      	mov	r0, r2
 800ee88:	f000 fafc 	bl	800f484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2201      	movs	r2, #1
 800ee98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	2201      	movs	r2, #1
 800eea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2201      	movs	r2, #1
 800eeb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2201      	movs	r2, #1
 800eeb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2201      	movs	r2, #1
 800eec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	2201      	movs	r2, #1
 800eec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	2201      	movs	r2, #1
 800eed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2201      	movs	r2, #1
 800eed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2201      	movs	r2, #1
 800eee0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2201      	movs	r2, #1
 800eee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
	...

0800eef8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b085      	sub	sp, #20
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d001      	beq.n	800ef10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ef0c:	2301      	movs	r3, #1
 800ef0e:	e02e      	b.n	800ef6e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2202      	movs	r2, #2
 800ef14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	4a17      	ldr	r2, [pc, #92]	@ (800ef7c <HAL_TIM_Base_Start+0x84>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d004      	beq.n	800ef2c <HAL_TIM_Base_Start+0x34>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef2a:	d115      	bne.n	800ef58 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	689a      	ldr	r2, [r3, #8]
 800ef32:	4b13      	ldr	r3, [pc, #76]	@ (800ef80 <HAL_TIM_Base_Start+0x88>)
 800ef34:	4013      	ands	r3, r2
 800ef36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2b06      	cmp	r3, #6
 800ef3c:	d015      	beq.n	800ef6a <HAL_TIM_Base_Start+0x72>
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef44:	d011      	beq.n	800ef6a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f042 0201 	orr.w	r2, r2, #1
 800ef54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef56:	e008      	b.n	800ef6a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	f042 0201 	orr.w	r2, r2, #1
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	e000      	b.n	800ef6c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef6c:	2300      	movs	r3, #0
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3714      	adds	r7, #20
 800ef72:	46bd      	mov	sp, r7
 800ef74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef78:	4770      	bx	lr
 800ef7a:	bf00      	nop
 800ef7c:	40012c00 	.word	0x40012c00
 800ef80:	00010007 	.word	0x00010007

0800ef84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ef92:	b2db      	uxtb	r3, r3
 800ef94:	2b01      	cmp	r3, #1
 800ef96:	d001      	beq.n	800ef9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ef98:	2301      	movs	r3, #1
 800ef9a:	e036      	b.n	800f00a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2202      	movs	r2, #2
 800efa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	68da      	ldr	r2, [r3, #12]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f042 0201 	orr.w	r2, r2, #1
 800efb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a17      	ldr	r2, [pc, #92]	@ (800f018 <HAL_TIM_Base_Start_IT+0x94>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d004      	beq.n	800efc8 <HAL_TIM_Base_Start_IT+0x44>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efc6:	d115      	bne.n	800eff4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	689a      	ldr	r2, [r3, #8]
 800efce:	4b13      	ldr	r3, [pc, #76]	@ (800f01c <HAL_TIM_Base_Start_IT+0x98>)
 800efd0:	4013      	ands	r3, r2
 800efd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2b06      	cmp	r3, #6
 800efd8:	d015      	beq.n	800f006 <HAL_TIM_Base_Start_IT+0x82>
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800efe0:	d011      	beq.n	800f006 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f042 0201 	orr.w	r2, r2, #1
 800eff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eff2:	e008      	b.n	800f006 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f042 0201 	orr.w	r2, r2, #1
 800f002:	601a      	str	r2, [r3, #0]
 800f004:	e000      	b.n	800f008 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f008:	2300      	movs	r3, #0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3714      	adds	r7, #20
 800f00e:	46bd      	mov	sp, r7
 800f010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f014:	4770      	bx	lr
 800f016:	bf00      	nop
 800f018:	40012c00 	.word	0x40012c00
 800f01c:	00010007 	.word	0x00010007

0800f020 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	68da      	ldr	r2, [r3, #12]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f022 0201 	bic.w	r2, r2, #1
 800f036:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	6a1a      	ldr	r2, [r3, #32]
 800f03e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f042:	4013      	ands	r3, r2
 800f044:	2b00      	cmp	r3, #0
 800f046:	d10f      	bne.n	800f068 <HAL_TIM_Base_Stop_IT+0x48>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	6a1a      	ldr	r2, [r3, #32]
 800f04e:	f240 4344 	movw	r3, #1092	@ 0x444
 800f052:	4013      	ands	r3, r2
 800f054:	2b00      	cmp	r3, #0
 800f056:	d107      	bne.n	800f068 <HAL_TIM_Base_Stop_IT+0x48>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f022 0201 	bic.w	r2, r2, #1
 800f066:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2201      	movs	r2, #1
 800f06c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800f070:	2300      	movs	r3, #0
}
 800f072:	4618      	mov	r0, r3
 800f074:	370c      	adds	r7, #12
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr

0800f07e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b084      	sub	sp, #16
 800f082:	af00      	add	r7, sp, #0
 800f084:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	f003 0302 	and.w	r3, r3, #2
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d020      	beq.n	800f0e2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f003 0302 	and.w	r3, r3, #2
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d01b      	beq.n	800f0e2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f06f 0202 	mvn.w	r2, #2
 800f0b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	699b      	ldr	r3, [r3, #24]
 800f0c0:	f003 0303 	and.w	r3, r3, #3
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d003      	beq.n	800f0d0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f000 f9bc 	bl	800f446 <HAL_TIM_IC_CaptureCallback>
 800f0ce:	e005      	b.n	800f0dc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f000 f9ae 	bl	800f432 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 f9bf 	bl	800f45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	f003 0304 	and.w	r3, r3, #4
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d020      	beq.n	800f12e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f003 0304 	and.w	r3, r3, #4
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d01b      	beq.n	800f12e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f06f 0204 	mvn.w	r2, #4
 800f0fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2202      	movs	r2, #2
 800f104:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	699b      	ldr	r3, [r3, #24]
 800f10c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f110:	2b00      	cmp	r3, #0
 800f112:	d003      	beq.n	800f11c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 f996 	bl	800f446 <HAL_TIM_IC_CaptureCallback>
 800f11a:	e005      	b.n	800f128 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 f988 	bl	800f432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 f999 	bl	800f45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	f003 0308 	and.w	r3, r3, #8
 800f134:	2b00      	cmp	r3, #0
 800f136:	d020      	beq.n	800f17a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f003 0308 	and.w	r3, r3, #8
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d01b      	beq.n	800f17a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f06f 0208 	mvn.w	r2, #8
 800f14a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2204      	movs	r2, #4
 800f150:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	69db      	ldr	r3, [r3, #28]
 800f158:	f003 0303 	and.w	r3, r3, #3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d003      	beq.n	800f168 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	f000 f970 	bl	800f446 <HAL_TIM_IC_CaptureCallback>
 800f166:	e005      	b.n	800f174 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 f962 	bl	800f432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f000 f973 	bl	800f45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2200      	movs	r2, #0
 800f178:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	f003 0310 	and.w	r3, r3, #16
 800f180:	2b00      	cmp	r3, #0
 800f182:	d020      	beq.n	800f1c6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	f003 0310 	and.w	r3, r3, #16
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d01b      	beq.n	800f1c6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f06f 0210 	mvn.w	r2, #16
 800f196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2208      	movs	r2, #8
 800f19c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	69db      	ldr	r3, [r3, #28]
 800f1a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d003      	beq.n	800f1b4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 f94a 	bl	800f446 <HAL_TIM_IC_CaptureCallback>
 800f1b2:	e005      	b.n	800f1c0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 f93c 	bl	800f432 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f000 f94d 	bl	800f45a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f1c6:	68bb      	ldr	r3, [r7, #8]
 800f1c8:	f003 0301 	and.w	r3, r3, #1
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d00c      	beq.n	800f1ea <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	f003 0301 	and.w	r3, r3, #1
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d007      	beq.n	800f1ea <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f06f 0201 	mvn.w	r2, #1
 800f1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f000 f91a 	bl	800f41e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1ea:	68bb      	ldr	r3, [r7, #8]
 800f1ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d104      	bne.n	800f1fe <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d00c      	beq.n	800f218 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f204:	2b00      	cmp	r3, #0
 800f206:	d007      	beq.n	800f218 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 faac 	bl	800f770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00c      	beq.n	800f23c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d007      	beq.n	800f23c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 faa4 	bl	800f784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00c      	beq.n	800f260 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d007      	beq.n	800f260 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f000 f907 	bl	800f46e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	f003 0320 	and.w	r3, r3, #32
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00c      	beq.n	800f284 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	f003 0320 	and.w	r3, r3, #32
 800f270:	2b00      	cmp	r3, #0
 800f272:	d007      	beq.n	800f284 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	f06f 0220 	mvn.w	r2, #32
 800f27c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fa6c 	bl	800f75c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f284:	bf00      	nop
 800f286:	3710      	adds	r7, #16
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}

0800f28c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f296:	2300      	movs	r3, #0
 800f298:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d101      	bne.n	800f2a8 <HAL_TIM_ConfigClockSource+0x1c>
 800f2a4:	2302      	movs	r3, #2
 800f2a6:	e0b6      	b.n	800f416 <HAL_TIM_ConfigClockSource+0x18a>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f2c6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f2ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f2d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	68ba      	ldr	r2, [r7, #8]
 800f2da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2e4:	d03e      	beq.n	800f364 <HAL_TIM_ConfigClockSource+0xd8>
 800f2e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f2ea:	f200 8087 	bhi.w	800f3fc <HAL_TIM_ConfigClockSource+0x170>
 800f2ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2f2:	f000 8086 	beq.w	800f402 <HAL_TIM_ConfigClockSource+0x176>
 800f2f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2fa:	d87f      	bhi.n	800f3fc <HAL_TIM_ConfigClockSource+0x170>
 800f2fc:	2b70      	cmp	r3, #112	@ 0x70
 800f2fe:	d01a      	beq.n	800f336 <HAL_TIM_ConfigClockSource+0xaa>
 800f300:	2b70      	cmp	r3, #112	@ 0x70
 800f302:	d87b      	bhi.n	800f3fc <HAL_TIM_ConfigClockSource+0x170>
 800f304:	2b60      	cmp	r3, #96	@ 0x60
 800f306:	d050      	beq.n	800f3aa <HAL_TIM_ConfigClockSource+0x11e>
 800f308:	2b60      	cmp	r3, #96	@ 0x60
 800f30a:	d877      	bhi.n	800f3fc <HAL_TIM_ConfigClockSource+0x170>
 800f30c:	2b50      	cmp	r3, #80	@ 0x50
 800f30e:	d03c      	beq.n	800f38a <HAL_TIM_ConfigClockSource+0xfe>
 800f310:	2b50      	cmp	r3, #80	@ 0x50
 800f312:	d873      	bhi.n	800f3fc <HAL_TIM_ConfigClockSource+0x170>
 800f314:	2b40      	cmp	r3, #64	@ 0x40
 800f316:	d058      	beq.n	800f3ca <HAL_TIM_ConfigClockSource+0x13e>
 800f318:	2b40      	cmp	r3, #64	@ 0x40
 800f31a:	d86f      	bhi.n	800f3fc <HAL_TIM_ConfigClockSource+0x170>
 800f31c:	2b30      	cmp	r3, #48	@ 0x30
 800f31e:	d064      	beq.n	800f3ea <HAL_TIM_ConfigClockSource+0x15e>
 800f320:	2b30      	cmp	r3, #48	@ 0x30
 800f322:	d86b      	bhi.n	800f3fc <HAL_TIM_ConfigClockSource+0x170>
 800f324:	2b20      	cmp	r3, #32
 800f326:	d060      	beq.n	800f3ea <HAL_TIM_ConfigClockSource+0x15e>
 800f328:	2b20      	cmp	r3, #32
 800f32a:	d867      	bhi.n	800f3fc <HAL_TIM_ConfigClockSource+0x170>
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d05c      	beq.n	800f3ea <HAL_TIM_ConfigClockSource+0x15e>
 800f330:	2b10      	cmp	r3, #16
 800f332:	d05a      	beq.n	800f3ea <HAL_TIM_ConfigClockSource+0x15e>
 800f334:	e062      	b.n	800f3fc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f346:	f000 f989 	bl	800f65c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f352:	68bb      	ldr	r3, [r7, #8]
 800f354:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f358:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	609a      	str	r2, [r3, #8]
      break;
 800f362:	e04f      	b.n	800f404 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f374:	f000 f972 	bl	800f65c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	689a      	ldr	r2, [r3, #8]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f386:	609a      	str	r2, [r3, #8]
      break;
 800f388:	e03c      	b.n	800f404 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f396:	461a      	mov	r2, r3
 800f398:	f000 f8e4 	bl	800f564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	2150      	movs	r1, #80	@ 0x50
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f000 f93d 	bl	800f622 <TIM_ITRx_SetConfig>
      break;
 800f3a8:	e02c      	b.n	800f404 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3ae:	683b      	ldr	r3, [r7, #0]
 800f3b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	f000 f903 	bl	800f5c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2160      	movs	r1, #96	@ 0x60
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f000 f92d 	bl	800f622 <TIM_ITRx_SetConfig>
      break;
 800f3c8:	e01c      	b.n	800f404 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	f000 f8c4 	bl	800f564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	2140      	movs	r1, #64	@ 0x40
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f000 f91d 	bl	800f622 <TIM_ITRx_SetConfig>
      break;
 800f3e8:	e00c      	b.n	800f404 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	f000 f914 	bl	800f622 <TIM_ITRx_SetConfig>
      break;
 800f3fa:	e003      	b.n	800f404 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f400:	e000      	b.n	800f404 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800f402:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2201      	movs	r2, #1
 800f408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f414:	7bfb      	ldrb	r3, [r7, #15]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f41e:	b480      	push	{r7}
 800f420:	b083      	sub	sp, #12
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f426:	bf00      	nop
 800f428:	370c      	adds	r7, #12
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr

0800f432 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f432:	b480      	push	{r7}
 800f434:	b083      	sub	sp, #12
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f43a:	bf00      	nop
 800f43c:	370c      	adds	r7, #12
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr

0800f446 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f446:	b480      	push	{r7}
 800f448:	b083      	sub	sp, #12
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f44e:	bf00      	nop
 800f450:	370c      	adds	r7, #12
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr

0800f45a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f45a:	b480      	push	{r7}
 800f45c:	b083      	sub	sp, #12
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f462:	bf00      	nop
 800f464:	370c      	adds	r7, #12
 800f466:	46bd      	mov	sp, r7
 800f468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46c:	4770      	bx	lr

0800f46e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f46e:	b480      	push	{r7}
 800f470:	b083      	sub	sp, #12
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f476:	bf00      	nop
 800f478:	370c      	adds	r7, #12
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
	...

0800f484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f484:	b480      	push	{r7}
 800f486:	b085      	sub	sp, #20
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	4a30      	ldr	r2, [pc, #192]	@ (800f558 <TIM_Base_SetConfig+0xd4>)
 800f498:	4293      	cmp	r3, r2
 800f49a:	d003      	beq.n	800f4a4 <TIM_Base_SetConfig+0x20>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4a2:	d108      	bne.n	800f4b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f4aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	4313      	orrs	r3, r2
 800f4b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	4a27      	ldr	r2, [pc, #156]	@ (800f558 <TIM_Base_SetConfig+0xd4>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d00b      	beq.n	800f4d6 <TIM_Base_SetConfig+0x52>
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4c4:	d007      	beq.n	800f4d6 <TIM_Base_SetConfig+0x52>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4a24      	ldr	r2, [pc, #144]	@ (800f55c <TIM_Base_SetConfig+0xd8>)
 800f4ca:	4293      	cmp	r3, r2
 800f4cc:	d003      	beq.n	800f4d6 <TIM_Base_SetConfig+0x52>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	4a23      	ldr	r2, [pc, #140]	@ (800f560 <TIM_Base_SetConfig+0xdc>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d108      	bne.n	800f4e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f4dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	68fa      	ldr	r2, [r7, #12]
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	695b      	ldr	r3, [r3, #20]
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	68fa      	ldr	r2, [r7, #12]
 800f4fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	689a      	ldr	r2, [r3, #8]
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4a12      	ldr	r2, [pc, #72]	@ (800f558 <TIM_Base_SetConfig+0xd4>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d007      	beq.n	800f524 <TIM_Base_SetConfig+0xa0>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4a11      	ldr	r2, [pc, #68]	@ (800f55c <TIM_Base_SetConfig+0xd8>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d003      	beq.n	800f524 <TIM_Base_SetConfig+0xa0>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4a10      	ldr	r2, [pc, #64]	@ (800f560 <TIM_Base_SetConfig+0xdc>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d103      	bne.n	800f52c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	691a      	ldr	r2, [r3, #16]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2201      	movs	r2, #1
 800f530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	691b      	ldr	r3, [r3, #16]
 800f536:	f003 0301 	and.w	r3, r3, #1
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d105      	bne.n	800f54a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	691b      	ldr	r3, [r3, #16]
 800f542:	f023 0201 	bic.w	r2, r3, #1
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	611a      	str	r2, [r3, #16]
  }
}
 800f54a:	bf00      	nop
 800f54c:	3714      	adds	r7, #20
 800f54e:	46bd      	mov	sp, r7
 800f550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f554:	4770      	bx	lr
 800f556:	bf00      	nop
 800f558:	40012c00 	.word	0x40012c00
 800f55c:	40014400 	.word	0x40014400
 800f560:	40014800 	.word	0x40014800

0800f564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f564:	b480      	push	{r7}
 800f566:	b087      	sub	sp, #28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	60b9      	str	r1, [r7, #8]
 800f56e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	6a1b      	ldr	r3, [r3, #32]
 800f574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	6a1b      	ldr	r3, [r3, #32]
 800f57a:	f023 0201 	bic.w	r2, r3, #1
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	699b      	ldr	r3, [r3, #24]
 800f586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f588:	693b      	ldr	r3, [r7, #16]
 800f58a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f58e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	011b      	lsls	r3, r3, #4
 800f594:	693a      	ldr	r2, [r7, #16]
 800f596:	4313      	orrs	r3, r2
 800f598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	f023 030a 	bic.w	r3, r3, #10
 800f5a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	68bb      	ldr	r3, [r7, #8]
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	693a      	ldr	r2, [r7, #16]
 800f5ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	697a      	ldr	r2, [r7, #20]
 800f5b4:	621a      	str	r2, [r3, #32]
}
 800f5b6:	bf00      	nop
 800f5b8:	371c      	adds	r7, #28
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c0:	4770      	bx	lr

0800f5c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f5c2:	b480      	push	{r7}
 800f5c4:	b087      	sub	sp, #28
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	60f8      	str	r0, [r7, #12]
 800f5ca:	60b9      	str	r1, [r7, #8]
 800f5cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	6a1b      	ldr	r3, [r3, #32]
 800f5d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6a1b      	ldr	r3, [r3, #32]
 800f5d8:	f023 0210 	bic.w	r2, r3, #16
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	699b      	ldr	r3, [r3, #24]
 800f5e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f5ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	031b      	lsls	r3, r3, #12
 800f5f2:	693a      	ldr	r2, [r7, #16]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f5fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f600:	68bb      	ldr	r3, [r7, #8]
 800f602:	011b      	lsls	r3, r3, #4
 800f604:	697a      	ldr	r2, [r7, #20]
 800f606:	4313      	orrs	r3, r2
 800f608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	693a      	ldr	r2, [r7, #16]
 800f60e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	697a      	ldr	r2, [r7, #20]
 800f614:	621a      	str	r2, [r3, #32]
}
 800f616:	bf00      	nop
 800f618:	371c      	adds	r7, #28
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr

0800f622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f622:	b480      	push	{r7}
 800f624:	b085      	sub	sp, #20
 800f626:	af00      	add	r7, sp, #0
 800f628:	6078      	str	r0, [r7, #4]
 800f62a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	689b      	ldr	r3, [r3, #8]
 800f630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f63c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	4313      	orrs	r3, r2
 800f644:	f043 0307 	orr.w	r3, r3, #7
 800f648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	609a      	str	r2, [r3, #8]
}
 800f650:	bf00      	nop
 800f652:	3714      	adds	r7, #20
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f65c:	b480      	push	{r7}
 800f65e:	b087      	sub	sp, #28
 800f660:	af00      	add	r7, sp, #0
 800f662:	60f8      	str	r0, [r7, #12]
 800f664:	60b9      	str	r1, [r7, #8]
 800f666:	607a      	str	r2, [r7, #4]
 800f668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	689b      	ldr	r3, [r3, #8]
 800f66e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	021a      	lsls	r2, r3, #8
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	431a      	orrs	r2, r3
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	4313      	orrs	r3, r2
 800f684:	697a      	ldr	r2, [r7, #20]
 800f686:	4313      	orrs	r3, r2
 800f688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	697a      	ldr	r2, [r7, #20]
 800f68e:	609a      	str	r2, [r3, #8]
}
 800f690:	bf00      	nop
 800f692:	371c      	adds	r7, #28
 800f694:	46bd      	mov	sp, r7
 800f696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69a:	4770      	bx	lr

0800f69c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f69c:	b480      	push	{r7}
 800f69e:	b085      	sub	sp, #20
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	6078      	str	r0, [r7, #4]
 800f6a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f6ac:	2b01      	cmp	r3, #1
 800f6ae:	d101      	bne.n	800f6b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f6b0:	2302      	movs	r3, #2
 800f6b2:	e04a      	b.n	800f74a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2202      	movs	r2, #2
 800f6c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	4a1f      	ldr	r2, [pc, #124]	@ (800f758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f6da:	4293      	cmp	r3, r2
 800f6dc:	d108      	bne.n	800f6f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f6e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	68fa      	ldr	r2, [r7, #12]
 800f6ec:	4313      	orrs	r3, r2
 800f6ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	68fa      	ldr	r2, [r7, #12]
 800f6fe:	4313      	orrs	r3, r2
 800f700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a12      	ldr	r2, [pc, #72]	@ (800f758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d004      	beq.n	800f71e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f71c:	d10c      	bne.n	800f738 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f71e:	68bb      	ldr	r3, [r7, #8]
 800f720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f726:	683b      	ldr	r3, [r7, #0]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	68ba      	ldr	r2, [r7, #8]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	68ba      	ldr	r2, [r7, #8]
 800f736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2201      	movs	r2, #1
 800f73c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2200      	movs	r2, #0
 800f744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3714      	adds	r7, #20
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	40012c00 	.word	0x40012c00

0800f75c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f764:	bf00      	nop
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f784:	b480      	push	{r7}
 800f786:	b083      	sub	sp, #12
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f78c:	bf00      	nop
 800f78e:	370c      	adds	r7, #12
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <LL_RCC_GetUSARTClockSource>:
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800f7a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4013      	ands	r3, r2
}
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <LL_RCC_GetLPUARTClockSource>:
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800f7c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f7c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4013      	ands	r3, r2
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d101      	bne.n	800f7ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e042      	b.n	800f870 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d106      	bne.n	800f802 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f7f7 fbbf 	bl	8006f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2224      	movs	r2, #36	@ 0x24
 800f806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f022 0201 	bic.w	r2, r2, #1
 800f818:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d002      	beq.n	800f828 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 ff56 	bl	80106d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 fd2b 	bl	8010284 <UART_SetConfig>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b01      	cmp	r3, #1
 800f832:	d101      	bne.n	800f838 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f834:	2301      	movs	r3, #1
 800f836:	e01b      	b.n	800f870 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	685a      	ldr	r2, [r3, #4]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f846:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	689a      	ldr	r2, [r3, #8]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f856:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f042 0201 	orr.w	r2, r2, #1
 800f866:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 ffd5 	bl	8010818 <UART_CheckIdleState>
 800f86e:	4603      	mov	r3, r0
}
 800f870:	4618      	mov	r0, r3
 800f872:	3708      	adds	r7, #8
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b082      	sub	sp, #8
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d101      	bne.n	800f88a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f886:	2301      	movs	r3, #1
 800f888:	e031      	b.n	800f8ee <HAL_UART_DeInit+0x76>
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
#else
  assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */

  huart->gState = HAL_UART_STATE_BUSY;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2224      	movs	r2, #36	@ 0x24
 800f88e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	f022 0201 	bic.w	r2, r2, #1
 800f8a0:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f8ba:	6878      	ldr	r0, [r7, #4]
 800f8bc:	f7f7 fc0a 	bl	80070d4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800f8ec:	2300      	movs	r3, #0
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3708      	adds	r7, #8
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
	...

0800f8f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b08a      	sub	sp, #40	@ 0x28
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	60b9      	str	r1, [r7, #8]
 800f902:	4613      	mov	r3, r2
 800f904:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f90c:	2b20      	cmp	r3, #32
 800f90e:	d137      	bne.n	800f980 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d002      	beq.n	800f91c <HAL_UART_Receive_DMA+0x24>
 800f916:	88fb      	ldrh	r3, [r7, #6]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d101      	bne.n	800f920 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f91c:	2301      	movs	r3, #1
 800f91e:	e030      	b.n	800f982 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4a18      	ldr	r2, [pc, #96]	@ (800f98c <HAL_UART_Receive_DMA+0x94>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d01f      	beq.n	800f970 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	685b      	ldr	r3, [r3, #4]
 800f936:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d018      	beq.n	800f970 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	e853 3f00 	ldrex	r3, [r3]
 800f94a:	613b      	str	r3, [r7, #16]
   return(result);
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f952:	627b      	str	r3, [r7, #36]	@ 0x24
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	461a      	mov	r2, r3
 800f95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f95c:	623b      	str	r3, [r7, #32]
 800f95e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f960:	69f9      	ldr	r1, [r7, #28]
 800f962:	6a3a      	ldr	r2, [r7, #32]
 800f964:	e841 2300 	strex	r3, r2, [r1]
 800f968:	61bb      	str	r3, [r7, #24]
   return(result);
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1e6      	bne.n	800f93e <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f970:	88fb      	ldrh	r3, [r7, #6]
 800f972:	461a      	mov	r2, r3
 800f974:	68b9      	ldr	r1, [r7, #8]
 800f976:	68f8      	ldr	r0, [r7, #12]
 800f978:	f001 f866 	bl	8010a48 <UART_Start_Receive_DMA>
 800f97c:	4603      	mov	r3, r0
 800f97e:	e000      	b.n	800f982 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f980:	2302      	movs	r3, #2
  }
}
 800f982:	4618      	mov	r0, r3
 800f984:	3728      	adds	r7, #40	@ 0x28
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	40008000 	.word	0x40008000

0800f990 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b0a0      	sub	sp, #128	@ 0x80
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f99e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9a0:	e853 3f00 	ldrex	r3, [r3]
 800f9a4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800f9a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f9a8:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800f9ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f9b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f9b8:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9ba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800f9bc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f9be:	e841 2300 	strex	r3, r2, [r1]
 800f9c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800f9c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1e6      	bne.n	800f998 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	3308      	adds	r3, #8
 800f9d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9d4:	e853 3f00 	ldrex	r3, [r3]
 800f9d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f9da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f9dc:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800f9e0:	f023 0301 	bic.w	r3, r3, #1
 800f9e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f9ee:	657a      	str	r2, [r7, #84]	@ 0x54
 800f9f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f9f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f9f6:	e841 2300 	strex	r3, r2, [r1]
 800f9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800f9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d1e3      	bne.n	800f9ca <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d118      	bne.n	800fa3c <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa12:	e853 3f00 	ldrex	r3, [r3]
 800fa16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fa18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa1a:	f023 0310 	bic.w	r3, r3, #16
 800fa1e:	677b      	str	r3, [r7, #116]	@ 0x74
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	461a      	mov	r2, r3
 800fa26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fa28:	643b      	str	r3, [r7, #64]	@ 0x40
 800fa2a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fa2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fa30:	e841 2300 	strex	r3, r2, [r1]
 800fa34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d1e6      	bne.n	800fa0a <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	689b      	ldr	r3, [r3, #8]
 800fa42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fa46:	2b80      	cmp	r3, #128	@ 0x80
 800fa48:	d137      	bne.n	800faba <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	3308      	adds	r3, #8
 800fa50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa52:	6a3b      	ldr	r3, [r7, #32]
 800fa54:	e853 3f00 	ldrex	r3, [r3]
 800fa58:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa5a:	69fb      	ldr	r3, [r7, #28]
 800fa5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa60:	673b      	str	r3, [r7, #112]	@ 0x70
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	3308      	adds	r3, #8
 800fa68:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800fa6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fa6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fa70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fa72:	e841 2300 	strex	r3, r2, [r1]
 800fa76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1e5      	bne.n	800fa4a <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d019      	beq.n	800faba <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7f9 f877 	bl	8008b86 <HAL_DMA_Abort>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d00d      	beq.n	800faba <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7f9 f9dc 	bl	8008e60 <HAL_DMA_GetError>
 800faa8:	4603      	mov	r3, r0
 800faaa:	2b20      	cmp	r3, #32
 800faac:	d105      	bne.n	800faba <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2210      	movs	r2, #16
 800fab2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fab6:	2303      	movs	r3, #3
 800fab8:	e073      	b.n	800fba2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fac4:	2b40      	cmp	r3, #64	@ 0x40
 800fac6:	d13b      	bne.n	800fb40 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	3308      	adds	r3, #8
 800face:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	e853 3f00 	ldrex	r3, [r3]
 800fad6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	3308      	adds	r3, #8
 800fae6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fae8:	61ba      	str	r2, [r7, #24]
 800faea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faec:	6979      	ldr	r1, [r7, #20]
 800faee:	69ba      	ldr	r2, [r7, #24]
 800faf0:	e841 2300 	strex	r3, r2, [r1]
 800faf4:	613b      	str	r3, [r7, #16]
   return(result);
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d1e5      	bne.n	800fac8 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d01c      	beq.n	800fb40 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7f9 f835 	bl	8008b86 <HAL_DMA_Abort>
 800fb1c:	4603      	mov	r3, r0
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00e      	beq.n	800fb40 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7f9 f999 	bl	8008e60 <HAL_DMA_GetError>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b20      	cmp	r3, #32
 800fb32:	d105      	bne.n	800fb40 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2210      	movs	r2, #16
 800fb38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800fb3c:	2303      	movs	r3, #3
 800fb3e:	e030      	b.n	800fba2 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	220f      	movs	r2, #15
 800fb56:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800fb5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800fb60:	d107      	bne.n	800fb72 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	699a      	ldr	r2, [r3, #24]
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f042 0210 	orr.w	r2, r2, #16
 800fb70:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	699a      	ldr	r2, [r3, #24]
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	f042 0208 	orr.w	r2, r2, #8
 800fb80:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2220      	movs	r2, #32
 800fb86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2220      	movs	r2, #32
 800fb8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	2200      	movs	r2, #0
 800fb96:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800fba0:	2300      	movs	r3, #0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3780      	adds	r7, #128	@ 0x80
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}
	...

0800fbac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b0ba      	sub	sp, #232	@ 0xe8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	69db      	ldr	r3, [r3, #28]
 800fbba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	689b      	ldr	r3, [r3, #8]
 800fbce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fbd2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fbd6:	f640 030f 	movw	r3, #2063	@ 0x80f
 800fbda:	4013      	ands	r3, r2
 800fbdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800fbe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d11b      	bne.n	800fc20 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fbe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbec:	f003 0320 	and.w	r3, r3, #32
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d015      	beq.n	800fc20 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fbf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fbf8:	f003 0320 	and.w	r3, r3, #32
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d105      	bne.n	800fc0c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fc00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d009      	beq.n	800fc20 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	f000 8300 	beq.w	8010216 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	4798      	blx	r3
      }
      return;
 800fc1e:	e2fa      	b.n	8010216 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fc20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f000 8123 	beq.w	800fe70 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800fc2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fc2e:	4b8d      	ldr	r3, [pc, #564]	@ (800fe64 <HAL_UART_IRQHandler+0x2b8>)
 800fc30:	4013      	ands	r3, r2
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d106      	bne.n	800fc44 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fc36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800fc3a:	4b8b      	ldr	r3, [pc, #556]	@ (800fe68 <HAL_UART_IRQHandler+0x2bc>)
 800fc3c:	4013      	ands	r3, r2
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f000 8116 	beq.w	800fe70 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fc44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc48:	f003 0301 	and.w	r3, r3, #1
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d011      	beq.n	800fc74 <HAL_UART_IRQHandler+0xc8>
 800fc50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d00b      	beq.n	800fc74 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	2201      	movs	r2, #1
 800fc62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc6a:	f043 0201 	orr.w	r2, r3, #1
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fc74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc78:	f003 0302 	and.w	r3, r3, #2
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d011      	beq.n	800fca4 <HAL_UART_IRQHandler+0xf8>
 800fc80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc84:	f003 0301 	and.w	r3, r3, #1
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d00b      	beq.n	800fca4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2202      	movs	r2, #2
 800fc92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc9a:	f043 0204 	orr.w	r2, r3, #4
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fca8:	f003 0304 	and.w	r3, r3, #4
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d011      	beq.n	800fcd4 <HAL_UART_IRQHandler+0x128>
 800fcb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fcb4:	f003 0301 	and.w	r3, r3, #1
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00b      	beq.n	800fcd4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	2204      	movs	r2, #4
 800fcc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fcca:	f043 0202 	orr.w	r2, r3, #2
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fcd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fcd8:	f003 0308 	and.w	r3, r3, #8
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d017      	beq.n	800fd10 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fce4:	f003 0320 	and.w	r3, r3, #32
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d105      	bne.n	800fcf8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800fcec:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800fcf0:	4b5c      	ldr	r3, [pc, #368]	@ (800fe64 <HAL_UART_IRQHandler+0x2b8>)
 800fcf2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d00b      	beq.n	800fd10 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	2208      	movs	r2, #8
 800fcfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd06:	f043 0208 	orr.w	r2, r3, #8
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fd10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d012      	beq.n	800fd42 <HAL_UART_IRQHandler+0x196>
 800fd1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00c      	beq.n	800fd42 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd38:	f043 0220 	orr.w	r2, r3, #32
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	f000 8266 	beq.w	801021a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800fd4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd52:	f003 0320 	and.w	r3, r3, #32
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d013      	beq.n	800fd82 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fd5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd5e:	f003 0320 	and.w	r3, r3, #32
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d105      	bne.n	800fd72 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800fd66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d007      	beq.n	800fd82 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d003      	beq.n	800fd82 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd7e:	6878      	ldr	r0, [r7, #4]
 800fd80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	689b      	ldr	r3, [r3, #8]
 800fd92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd96:	2b40      	cmp	r3, #64	@ 0x40
 800fd98:	d005      	beq.n	800fda6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fd9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fd9e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d054      	beq.n	800fe50 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 ff35 	bl	8010c16 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	689b      	ldr	r3, [r3, #8]
 800fdb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdb6:	2b40      	cmp	r3, #64	@ 0x40
 800fdb8:	d146      	bne.n	800fe48 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	3308      	adds	r3, #8
 800fdc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800fdc8:	e853 3f00 	ldrex	r3, [r3]
 800fdcc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800fdd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800fdd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fdd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	3308      	adds	r3, #8
 800fde2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800fde6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800fdea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fdf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fdf6:	e841 2300 	strex	r3, r2, [r1]
 800fdfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fdfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d1d9      	bne.n	800fdba <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d017      	beq.n	800fe40 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe16:	4a15      	ldr	r2, [pc, #84]	@ (800fe6c <HAL_UART_IRQHandler+0x2c0>)
 800fe18:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7f8 ff0f 	bl	8008c44 <HAL_DMA_Abort_IT>
 800fe26:	4603      	mov	r3, r0
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d019      	beq.n	800fe60 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fe32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fe3a:	4610      	mov	r0, r2
 800fe3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe3e:	e00f      	b.n	800fe60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 fa09 	bl	8010258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe46:	e00b      	b.n	800fe60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f000 fa05 	bl	8010258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe4e:	e007      	b.n	800fe60 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 fa01 	bl	8010258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fe5e:	e1dc      	b.n	801021a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe60:	bf00      	nop
    return;
 800fe62:	e1da      	b.n	801021a <HAL_UART_IRQHandler+0x66e>
 800fe64:	10000001 	.word	0x10000001
 800fe68:	04000120 	.word	0x04000120
 800fe6c:	08010ecd 	.word	0x08010ecd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	f040 8170 	bne.w	801015a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fe7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe7e:	f003 0310 	and.w	r3, r3, #16
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	f000 8169 	beq.w	801015a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fe88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe8c:	f003 0310 	and.w	r3, r3, #16
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	f000 8162 	beq.w	801015a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	2210      	movs	r2, #16
 800fe9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fea8:	2b40      	cmp	r3, #64	@ 0x40
 800feaa:	f040 80d8 	bne.w	801005e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800febc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	f000 80af 	beq.w	8010024 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fecc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fed0:	429a      	cmp	r2, r3
 800fed2:	f080 80a7 	bcs.w	8010024 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fedc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f003 0320 	and.w	r3, r3, #32
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f040 8087 	bne.w	8010002 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fefc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ff00:	e853 3f00 	ldrex	r3, [r3]
 800ff04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ff08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ff0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ff10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	461a      	mov	r2, r3
 800ff1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ff1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ff22:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ff2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ff2e:	e841 2300 	strex	r3, r2, [r1]
 800ff32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ff36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d1da      	bne.n	800fef4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	3308      	adds	r3, #8
 800ff44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ff48:	e853 3f00 	ldrex	r3, [r3]
 800ff4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ff4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ff50:	f023 0301 	bic.w	r3, r3, #1
 800ff54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	3308      	adds	r3, #8
 800ff5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ff62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ff66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ff6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ff6e:	e841 2300 	strex	r3, r2, [r1]
 800ff72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ff74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d1e1      	bne.n	800ff3e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	3308      	adds	r3, #8
 800ff80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ff84:	e853 3f00 	ldrex	r3, [r3]
 800ff88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ff8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ff90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	3308      	adds	r3, #8
 800ff9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ff9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ffa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ffa4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ffa6:	e841 2300 	strex	r3, r2, [r1]
 800ffaa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ffac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d1e3      	bne.n	800ff7a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2220      	movs	r2, #32
 800ffb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ffc8:	e853 3f00 	ldrex	r3, [r3]
 800ffcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ffce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ffd0:	f023 0310 	bic.w	r3, r3, #16
 800ffd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	461a      	mov	r2, r3
 800ffde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ffe2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ffe4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffe6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ffe8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ffea:	e841 2300 	strex	r3, r2, [r1]
 800ffee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1e4      	bne.n	800ffc0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7f8 fdc2 	bl	8008b86 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2202      	movs	r2, #2
 8010006:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010014:	b29b      	uxth	r3, r3
 8010016:	1ad3      	subs	r3, r2, r3
 8010018:	b29b      	uxth	r3, r3
 801001a:	4619      	mov	r1, r3
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 f925 	bl	801026c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010022:	e0fc      	b.n	801021e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801002a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801002e:	429a      	cmp	r2, r3
 8010030:	f040 80f5 	bne.w	801021e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f003 0320 	and.w	r3, r3, #32
 8010042:	2b20      	cmp	r3, #32
 8010044:	f040 80eb 	bne.w	801021e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2202      	movs	r2, #2
 801004c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010054:	4619      	mov	r1, r3
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 f908 	bl	801026c <HAL_UARTEx_RxEventCallback>
      return;
 801005c:	e0df      	b.n	801021e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801006a:	b29b      	uxth	r3, r3
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010078:	b29b      	uxth	r3, r3
 801007a:	2b00      	cmp	r3, #0
 801007c:	f000 80d1 	beq.w	8010222 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8010080:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010084:	2b00      	cmp	r3, #0
 8010086:	f000 80cc 	beq.w	8010222 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010092:	e853 3f00 	ldrex	r3, [r3]
 8010096:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801009a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801009e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	461a      	mov	r2, r3
 80100a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80100ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80100ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80100b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80100b4:	e841 2300 	strex	r3, r2, [r1]
 80100b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80100ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d1e4      	bne.n	801008a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	3308      	adds	r3, #8
 80100c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100ca:	e853 3f00 	ldrex	r3, [r3]
 80100ce:	623b      	str	r3, [r7, #32]
   return(result);
 80100d0:	6a3b      	ldr	r3, [r7, #32]
 80100d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80100d6:	f023 0301 	bic.w	r3, r3, #1
 80100da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	3308      	adds	r3, #8
 80100e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80100e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80100ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100f0:	e841 2300 	strex	r3, r2, [r1]
 80100f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80100f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1e1      	bne.n	80100c0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2220      	movs	r2, #32
 8010100:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	2200      	movs	r2, #0
 801010e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	e853 3f00 	ldrex	r3, [r3]
 801011c:	60fb      	str	r3, [r7, #12]
   return(result);
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f023 0310 	bic.w	r3, r3, #16
 8010124:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	461a      	mov	r2, r3
 801012e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010132:	61fb      	str	r3, [r7, #28]
 8010134:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010136:	69b9      	ldr	r1, [r7, #24]
 8010138:	69fa      	ldr	r2, [r7, #28]
 801013a:	e841 2300 	strex	r3, r2, [r1]
 801013e:	617b      	str	r3, [r7, #20]
   return(result);
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d1e4      	bne.n	8010110 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2202      	movs	r2, #2
 801014a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801014c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010150:	4619      	mov	r1, r3
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 f88a 	bl	801026c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010158:	e063      	b.n	8010222 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801015a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801015e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010162:	2b00      	cmp	r3, #0
 8010164:	d00e      	beq.n	8010184 <HAL_UART_IRQHandler+0x5d8>
 8010166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801016a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801016e:	2b00      	cmp	r3, #0
 8010170:	d008      	beq.n	8010184 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801017a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 fee2 	bl	8010f46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010182:	e051      	b.n	8010228 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801018c:	2b00      	cmp	r3, #0
 801018e:	d014      	beq.n	80101ba <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010198:	2b00      	cmp	r3, #0
 801019a:	d105      	bne.n	80101a8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801019c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d008      	beq.n	80101ba <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d03a      	beq.n	8010226 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	4798      	blx	r3
    }
    return;
 80101b8:	e035      	b.n	8010226 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80101ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d009      	beq.n	80101da <HAL_UART_IRQHandler+0x62e>
 80101c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d003      	beq.n	80101da <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f000 fe8c 	bl	8010ef0 <UART_EndTransmit_IT>
    return;
 80101d8:	e026      	b.n	8010228 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80101da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d009      	beq.n	80101fa <HAL_UART_IRQHandler+0x64e>
 80101e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80101ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d003      	beq.n	80101fa <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 febb 	bl	8010f6e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80101f8:	e016      	b.n	8010228 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80101fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010202:	2b00      	cmp	r3, #0
 8010204:	d010      	beq.n	8010228 <HAL_UART_IRQHandler+0x67c>
 8010206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801020a:	2b00      	cmp	r3, #0
 801020c:	da0c      	bge.n	8010228 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	f000 fea3 	bl	8010f5a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010214:	e008      	b.n	8010228 <HAL_UART_IRQHandler+0x67c>
      return;
 8010216:	bf00      	nop
 8010218:	e006      	b.n	8010228 <HAL_UART_IRQHandler+0x67c>
    return;
 801021a:	bf00      	nop
 801021c:	e004      	b.n	8010228 <HAL_UART_IRQHandler+0x67c>
      return;
 801021e:	bf00      	nop
 8010220:	e002      	b.n	8010228 <HAL_UART_IRQHandler+0x67c>
      return;
 8010222:	bf00      	nop
 8010224:	e000      	b.n	8010228 <HAL_UART_IRQHandler+0x67c>
    return;
 8010226:	bf00      	nop
  }
}
 8010228:	37e8      	adds	r7, #232	@ 0xe8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop

08010230 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010238:	bf00      	nop
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr

08010244 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801024c:	bf00      	nop
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr

08010258 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010260:	bf00      	nop
 8010262:	370c      	adds	r7, #12
 8010264:	46bd      	mov	sp, r7
 8010266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801026a:	4770      	bx	lr

0801026c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801026c:	b480      	push	{r7}
 801026e:	b083      	sub	sp, #12
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	460b      	mov	r3, r1
 8010276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010278:	bf00      	nop
 801027a:	370c      	adds	r7, #12
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr

08010284 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010288:	b08c      	sub	sp, #48	@ 0x30
 801028a:	af00      	add	r7, sp, #0
 801028c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801028e:	2300      	movs	r3, #0
 8010290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	689a      	ldr	r2, [r3, #8]
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	691b      	ldr	r3, [r3, #16]
 801029c:	431a      	orrs	r2, r3
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	695b      	ldr	r3, [r3, #20]
 80102a2:	431a      	orrs	r2, r3
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	69db      	ldr	r3, [r3, #28]
 80102a8:	4313      	orrs	r3, r2
 80102aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	681a      	ldr	r2, [r3, #0]
 80102b2:	4baf      	ldr	r3, [pc, #700]	@ (8010570 <UART_SetConfig+0x2ec>)
 80102b4:	4013      	ands	r3, r2
 80102b6:	697a      	ldr	r2, [r7, #20]
 80102b8:	6812      	ldr	r2, [r2, #0]
 80102ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80102bc:	430b      	orrs	r3, r1
 80102be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	68da      	ldr	r2, [r3, #12]
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	430a      	orrs	r2, r1
 80102d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	699b      	ldr	r3, [r3, #24]
 80102da:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4aa4      	ldr	r2, [pc, #656]	@ (8010574 <UART_SetConfig+0x2f0>)
 80102e2:	4293      	cmp	r3, r2
 80102e4:	d004      	beq.n	80102f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	6a1b      	ldr	r3, [r3, #32]
 80102ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80102ec:	4313      	orrs	r3, r2
 80102ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80102fa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80102fe:	697a      	ldr	r2, [r7, #20]
 8010300:	6812      	ldr	r2, [r2, #0]
 8010302:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010304:	430b      	orrs	r3, r1
 8010306:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801030e:	f023 010f 	bic.w	r1, r3, #15
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	430a      	orrs	r2, r1
 801031c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	4a95      	ldr	r2, [pc, #596]	@ (8010578 <UART_SetConfig+0x2f4>)
 8010324:	4293      	cmp	r3, r2
 8010326:	d125      	bne.n	8010374 <UART_SetConfig+0xf0>
 8010328:	2003      	movs	r0, #3
 801032a:	f7ff fa35 	bl	800f798 <LL_RCC_GetUSARTClockSource>
 801032e:	4603      	mov	r3, r0
 8010330:	2b03      	cmp	r3, #3
 8010332:	d81b      	bhi.n	801036c <UART_SetConfig+0xe8>
 8010334:	a201      	add	r2, pc, #4	@ (adr r2, 801033c <UART_SetConfig+0xb8>)
 8010336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033a:	bf00      	nop
 801033c:	0801034d 	.word	0x0801034d
 8010340:	0801035d 	.word	0x0801035d
 8010344:	08010355 	.word	0x08010355
 8010348:	08010365 	.word	0x08010365
 801034c:	2301      	movs	r3, #1
 801034e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010352:	e042      	b.n	80103da <UART_SetConfig+0x156>
 8010354:	2302      	movs	r3, #2
 8010356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801035a:	e03e      	b.n	80103da <UART_SetConfig+0x156>
 801035c:	2304      	movs	r3, #4
 801035e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010362:	e03a      	b.n	80103da <UART_SetConfig+0x156>
 8010364:	2308      	movs	r3, #8
 8010366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801036a:	e036      	b.n	80103da <UART_SetConfig+0x156>
 801036c:	2310      	movs	r3, #16
 801036e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010372:	e032      	b.n	80103da <UART_SetConfig+0x156>
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a7e      	ldr	r2, [pc, #504]	@ (8010574 <UART_SetConfig+0x2f0>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d12a      	bne.n	80103d4 <UART_SetConfig+0x150>
 801037e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8010382:	f7ff fa19 	bl	800f7b8 <LL_RCC_GetLPUARTClockSource>
 8010386:	4603      	mov	r3, r0
 8010388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801038c:	d01a      	beq.n	80103c4 <UART_SetConfig+0x140>
 801038e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010392:	d81b      	bhi.n	80103cc <UART_SetConfig+0x148>
 8010394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010398:	d00c      	beq.n	80103b4 <UART_SetConfig+0x130>
 801039a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801039e:	d815      	bhi.n	80103cc <UART_SetConfig+0x148>
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d003      	beq.n	80103ac <UART_SetConfig+0x128>
 80103a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80103a8:	d008      	beq.n	80103bc <UART_SetConfig+0x138>
 80103aa:	e00f      	b.n	80103cc <UART_SetConfig+0x148>
 80103ac:	2300      	movs	r3, #0
 80103ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103b2:	e012      	b.n	80103da <UART_SetConfig+0x156>
 80103b4:	2302      	movs	r3, #2
 80103b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103ba:	e00e      	b.n	80103da <UART_SetConfig+0x156>
 80103bc:	2304      	movs	r3, #4
 80103be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103c2:	e00a      	b.n	80103da <UART_SetConfig+0x156>
 80103c4:	2308      	movs	r3, #8
 80103c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103ca:	e006      	b.n	80103da <UART_SetConfig+0x156>
 80103cc:	2310      	movs	r3, #16
 80103ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80103d2:	e002      	b.n	80103da <UART_SetConfig+0x156>
 80103d4:	2310      	movs	r3, #16
 80103d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4a65      	ldr	r2, [pc, #404]	@ (8010574 <UART_SetConfig+0x2f0>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	f040 8097 	bne.w	8010514 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80103e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80103ea:	2b08      	cmp	r3, #8
 80103ec:	d823      	bhi.n	8010436 <UART_SetConfig+0x1b2>
 80103ee:	a201      	add	r2, pc, #4	@ (adr r2, 80103f4 <UART_SetConfig+0x170>)
 80103f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f4:	08010419 	.word	0x08010419
 80103f8:	08010437 	.word	0x08010437
 80103fc:	08010421 	.word	0x08010421
 8010400:	08010437 	.word	0x08010437
 8010404:	08010427 	.word	0x08010427
 8010408:	08010437 	.word	0x08010437
 801040c:	08010437 	.word	0x08010437
 8010410:	08010437 	.word	0x08010437
 8010414:	0801042f 	.word	0x0801042f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010418:	f7fc fbfa 	bl	800cc10 <HAL_RCC_GetPCLK1Freq>
 801041c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801041e:	e010      	b.n	8010442 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010420:	4b56      	ldr	r3, [pc, #344]	@ (801057c <UART_SetConfig+0x2f8>)
 8010422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010424:	e00d      	b.n	8010442 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010426:	f7fc fb73 	bl	800cb10 <HAL_RCC_GetSysClockFreq>
 801042a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801042c:	e009      	b.n	8010442 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801042e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010434:	e005      	b.n	8010442 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010436:	2300      	movs	r3, #0
 8010438:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801043a:	2301      	movs	r3, #1
 801043c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010440:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010444:	2b00      	cmp	r3, #0
 8010446:	f000 812b 	beq.w	80106a0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801044e:	4a4c      	ldr	r2, [pc, #304]	@ (8010580 <UART_SetConfig+0x2fc>)
 8010450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010454:	461a      	mov	r2, r3
 8010456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010458:	fbb3 f3f2 	udiv	r3, r3, r2
 801045c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	685a      	ldr	r2, [r3, #4]
 8010462:	4613      	mov	r3, r2
 8010464:	005b      	lsls	r3, r3, #1
 8010466:	4413      	add	r3, r2
 8010468:	69ba      	ldr	r2, [r7, #24]
 801046a:	429a      	cmp	r2, r3
 801046c:	d305      	bcc.n	801047a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010474:	69ba      	ldr	r2, [r7, #24]
 8010476:	429a      	cmp	r2, r3
 8010478:	d903      	bls.n	8010482 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801047a:	2301      	movs	r3, #1
 801047c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010480:	e10e      	b.n	80106a0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010484:	2200      	movs	r2, #0
 8010486:	60bb      	str	r3, [r7, #8]
 8010488:	60fa      	str	r2, [r7, #12]
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801048e:	4a3c      	ldr	r2, [pc, #240]	@ (8010580 <UART_SetConfig+0x2fc>)
 8010490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010494:	b29b      	uxth	r3, r3
 8010496:	2200      	movs	r2, #0
 8010498:	603b      	str	r3, [r7, #0]
 801049a:	607a      	str	r2, [r7, #4]
 801049c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80104a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80104a4:	f7f0 fbc8 	bl	8000c38 <__aeabi_uldivmod>
 80104a8:	4602      	mov	r2, r0
 80104aa:	460b      	mov	r3, r1
 80104ac:	4610      	mov	r0, r2
 80104ae:	4619      	mov	r1, r3
 80104b0:	f04f 0200 	mov.w	r2, #0
 80104b4:	f04f 0300 	mov.w	r3, #0
 80104b8:	020b      	lsls	r3, r1, #8
 80104ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80104be:	0202      	lsls	r2, r0, #8
 80104c0:	6979      	ldr	r1, [r7, #20]
 80104c2:	6849      	ldr	r1, [r1, #4]
 80104c4:	0849      	lsrs	r1, r1, #1
 80104c6:	2000      	movs	r0, #0
 80104c8:	460c      	mov	r4, r1
 80104ca:	4605      	mov	r5, r0
 80104cc:	eb12 0804 	adds.w	r8, r2, r4
 80104d0:	eb43 0905 	adc.w	r9, r3, r5
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	2200      	movs	r2, #0
 80104da:	469a      	mov	sl, r3
 80104dc:	4693      	mov	fp, r2
 80104de:	4652      	mov	r2, sl
 80104e0:	465b      	mov	r3, fp
 80104e2:	4640      	mov	r0, r8
 80104e4:	4649      	mov	r1, r9
 80104e6:	f7f0 fba7 	bl	8000c38 <__aeabi_uldivmod>
 80104ea:	4602      	mov	r2, r0
 80104ec:	460b      	mov	r3, r1
 80104ee:	4613      	mov	r3, r2
 80104f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80104f2:	6a3b      	ldr	r3, [r7, #32]
 80104f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80104f8:	d308      	bcc.n	801050c <UART_SetConfig+0x288>
 80104fa:	6a3b      	ldr	r3, [r7, #32]
 80104fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010500:	d204      	bcs.n	801050c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010502:	697b      	ldr	r3, [r7, #20]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	6a3a      	ldr	r2, [r7, #32]
 8010508:	60da      	str	r2, [r3, #12]
 801050a:	e0c9      	b.n	80106a0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801050c:	2301      	movs	r3, #1
 801050e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010512:	e0c5      	b.n	80106a0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	69db      	ldr	r3, [r3, #28]
 8010518:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801051c:	d16d      	bne.n	80105fa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801051e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010522:	3b01      	subs	r3, #1
 8010524:	2b07      	cmp	r3, #7
 8010526:	d82d      	bhi.n	8010584 <UART_SetConfig+0x300>
 8010528:	a201      	add	r2, pc, #4	@ (adr r2, 8010530 <UART_SetConfig+0x2ac>)
 801052a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801052e:	bf00      	nop
 8010530:	08010551 	.word	0x08010551
 8010534:	08010559 	.word	0x08010559
 8010538:	08010585 	.word	0x08010585
 801053c:	0801055f 	.word	0x0801055f
 8010540:	08010585 	.word	0x08010585
 8010544:	08010585 	.word	0x08010585
 8010548:	08010585 	.word	0x08010585
 801054c:	08010567 	.word	0x08010567
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010550:	f7fc fb74 	bl	800cc3c <HAL_RCC_GetPCLK2Freq>
 8010554:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010556:	e01b      	b.n	8010590 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010558:	4b08      	ldr	r3, [pc, #32]	@ (801057c <UART_SetConfig+0x2f8>)
 801055a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801055c:	e018      	b.n	8010590 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801055e:	f7fc fad7 	bl	800cb10 <HAL_RCC_GetSysClockFreq>
 8010562:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010564:	e014      	b.n	8010590 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801056a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801056c:	e010      	b.n	8010590 <UART_SetConfig+0x30c>
 801056e:	bf00      	nop
 8010570:	cfff69f3 	.word	0xcfff69f3
 8010574:	40008000 	.word	0x40008000
 8010578:	40013800 	.word	0x40013800
 801057c:	00f42400 	.word	0x00f42400
 8010580:	08021e98 	.word	0x08021e98
      default:
        pclk = 0U;
 8010584:	2300      	movs	r3, #0
 8010586:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010588:	2301      	movs	r3, #1
 801058a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801058e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010592:	2b00      	cmp	r3, #0
 8010594:	f000 8084 	beq.w	80106a0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801059c:	4a4b      	ldr	r2, [pc, #300]	@ (80106cc <UART_SetConfig+0x448>)
 801059e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105a2:	461a      	mov	r2, r3
 80105a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80105aa:	005a      	lsls	r2, r3, #1
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	085b      	lsrs	r3, r3, #1
 80105b2:	441a      	add	r2, r3
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80105bc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80105be:	6a3b      	ldr	r3, [r7, #32]
 80105c0:	2b0f      	cmp	r3, #15
 80105c2:	d916      	bls.n	80105f2 <UART_SetConfig+0x36e>
 80105c4:	6a3b      	ldr	r3, [r7, #32]
 80105c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105ca:	d212      	bcs.n	80105f2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80105cc:	6a3b      	ldr	r3, [r7, #32]
 80105ce:	b29b      	uxth	r3, r3
 80105d0:	f023 030f 	bic.w	r3, r3, #15
 80105d4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80105d6:	6a3b      	ldr	r3, [r7, #32]
 80105d8:	085b      	lsrs	r3, r3, #1
 80105da:	b29b      	uxth	r3, r3
 80105dc:	f003 0307 	and.w	r3, r3, #7
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	8bfb      	ldrh	r3, [r7, #30]
 80105e4:	4313      	orrs	r3, r2
 80105e6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	8bfa      	ldrh	r2, [r7, #30]
 80105ee:	60da      	str	r2, [r3, #12]
 80105f0:	e056      	b.n	80106a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80105f2:	2301      	movs	r3, #1
 80105f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80105f8:	e052      	b.n	80106a0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80105fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80105fe:	3b01      	subs	r3, #1
 8010600:	2b07      	cmp	r3, #7
 8010602:	d822      	bhi.n	801064a <UART_SetConfig+0x3c6>
 8010604:	a201      	add	r2, pc, #4	@ (adr r2, 801060c <UART_SetConfig+0x388>)
 8010606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801060a:	bf00      	nop
 801060c:	0801062d 	.word	0x0801062d
 8010610:	08010635 	.word	0x08010635
 8010614:	0801064b 	.word	0x0801064b
 8010618:	0801063b 	.word	0x0801063b
 801061c:	0801064b 	.word	0x0801064b
 8010620:	0801064b 	.word	0x0801064b
 8010624:	0801064b 	.word	0x0801064b
 8010628:	08010643 	.word	0x08010643
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801062c:	f7fc fb06 	bl	800cc3c <HAL_RCC_GetPCLK2Freq>
 8010630:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010632:	e010      	b.n	8010656 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010634:	4b26      	ldr	r3, [pc, #152]	@ (80106d0 <UART_SetConfig+0x44c>)
 8010636:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010638:	e00d      	b.n	8010656 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801063a:	f7fc fa69 	bl	800cb10 <HAL_RCC_GetSysClockFreq>
 801063e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010640:	e009      	b.n	8010656 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010646:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010648:	e005      	b.n	8010656 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801064a:	2300      	movs	r3, #0
 801064c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801064e:	2301      	movs	r3, #1
 8010650:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010654:	bf00      	nop
    }

    if (pclk != 0U)
 8010656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010658:	2b00      	cmp	r3, #0
 801065a:	d021      	beq.n	80106a0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010660:	4a1a      	ldr	r2, [pc, #104]	@ (80106cc <UART_SetConfig+0x448>)
 8010662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010666:	461a      	mov	r2, r3
 8010668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801066a:	fbb3 f2f2 	udiv	r2, r3, r2
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	085b      	lsrs	r3, r3, #1
 8010674:	441a      	add	r2, r3
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	685b      	ldr	r3, [r3, #4]
 801067a:	fbb2 f3f3 	udiv	r3, r2, r3
 801067e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010680:	6a3b      	ldr	r3, [r7, #32]
 8010682:	2b0f      	cmp	r3, #15
 8010684:	d909      	bls.n	801069a <UART_SetConfig+0x416>
 8010686:	6a3b      	ldr	r3, [r7, #32]
 8010688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801068c:	d205      	bcs.n	801069a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801068e:	6a3b      	ldr	r3, [r7, #32]
 8010690:	b29a      	uxth	r2, r3
 8010692:	697b      	ldr	r3, [r7, #20]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	60da      	str	r2, [r3, #12]
 8010698:	e002      	b.n	80106a0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801069a:	2301      	movs	r3, #1
 801069c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	2201      	movs	r2, #1
 80106a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	2201      	movs	r2, #1
 80106ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	2200      	movs	r2, #0
 80106b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2200      	movs	r2, #0
 80106ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80106bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80106c0:	4618      	mov	r0, r3
 80106c2:	3730      	adds	r7, #48	@ 0x30
 80106c4:	46bd      	mov	sp, r7
 80106c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80106ca:	bf00      	nop
 80106cc:	08021e98 	.word	0x08021e98
 80106d0:	00f42400 	.word	0x00f42400

080106d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106e0:	f003 0308 	and.w	r3, r3, #8
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d00a      	beq.n	80106fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	430a      	orrs	r2, r1
 80106fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010702:	f003 0301 	and.w	r3, r3, #1
 8010706:	2b00      	cmp	r3, #0
 8010708:	d00a      	beq.n	8010720 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	430a      	orrs	r2, r1
 801071e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010724:	f003 0302 	and.w	r3, r3, #2
 8010728:	2b00      	cmp	r3, #0
 801072a:	d00a      	beq.n	8010742 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	430a      	orrs	r2, r1
 8010740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010746:	f003 0304 	and.w	r3, r3, #4
 801074a:	2b00      	cmp	r3, #0
 801074c:	d00a      	beq.n	8010764 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	685b      	ldr	r3, [r3, #4]
 8010754:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	430a      	orrs	r2, r1
 8010762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010768:	f003 0310 	and.w	r3, r3, #16
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00a      	beq.n	8010786 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	689b      	ldr	r3, [r3, #8]
 8010776:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	430a      	orrs	r2, r1
 8010784:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801078a:	f003 0320 	and.w	r3, r3, #32
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00a      	beq.n	80107a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	430a      	orrs	r2, r1
 80107a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d01a      	beq.n	80107ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	685b      	ldr	r3, [r3, #4]
 80107ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	430a      	orrs	r2, r1
 80107c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80107ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80107d2:	d10a      	bne.n	80107ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	685b      	ldr	r3, [r3, #4]
 80107da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	430a      	orrs	r2, r1
 80107e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80107ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d00a      	beq.n	801080c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	685b      	ldr	r3, [r3, #4]
 80107fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	430a      	orrs	r2, r1
 801080a:	605a      	str	r2, [r3, #4]
  }
}
 801080c:	bf00      	nop
 801080e:	370c      	adds	r7, #12
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b098      	sub	sp, #96	@ 0x60
 801081c:	af02      	add	r7, sp, #8
 801081e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2200      	movs	r2, #0
 8010824:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010828:	f7f6 fdb6 	bl	8007398 <HAL_GetTick>
 801082c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	f003 0308 	and.w	r3, r3, #8
 8010838:	2b08      	cmp	r3, #8
 801083a:	d12f      	bne.n	801089c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801083c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010840:	9300      	str	r3, [sp, #0]
 8010842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010844:	2200      	movs	r2, #0
 8010846:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 f88e 	bl	801096c <UART_WaitOnFlagUntilTimeout>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d022      	beq.n	801089c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801085e:	e853 3f00 	ldrex	r3, [r3]
 8010862:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801086a:	653b      	str	r3, [r7, #80]	@ 0x50
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	461a      	mov	r2, r3
 8010872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010874:	647b      	str	r3, [r7, #68]	@ 0x44
 8010876:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010878:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801087a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801087c:	e841 2300 	strex	r3, r2, [r1]
 8010880:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010884:	2b00      	cmp	r3, #0
 8010886:	d1e6      	bne.n	8010856 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2220      	movs	r2, #32
 801088c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2200      	movs	r2, #0
 8010894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010898:	2303      	movs	r3, #3
 801089a:	e063      	b.n	8010964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	681b      	ldr	r3, [r3, #0]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	f003 0304 	and.w	r3, r3, #4
 80108a6:	2b04      	cmp	r3, #4
 80108a8:	d149      	bne.n	801093e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80108aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80108ae:	9300      	str	r3, [sp, #0]
 80108b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108b2:	2200      	movs	r2, #0
 80108b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f000 f857 	bl	801096c <UART_WaitOnFlagUntilTimeout>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d03c      	beq.n	801093e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108cc:	e853 3f00 	ldrex	r3, [r3]
 80108d0:	623b      	str	r3, [r7, #32]
   return(result);
 80108d2:	6a3b      	ldr	r3, [r7, #32]
 80108d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80108d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	461a      	mov	r2, r3
 80108e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80108e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80108e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108ea:	e841 2300 	strex	r3, r2, [r1]
 80108ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80108f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d1e6      	bne.n	80108c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	3308      	adds	r3, #8
 80108fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	e853 3f00 	ldrex	r3, [r3]
 8010904:	60fb      	str	r3, [r7, #12]
   return(result);
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	f023 0301 	bic.w	r3, r3, #1
 801090c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	3308      	adds	r3, #8
 8010914:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010916:	61fa      	str	r2, [r7, #28]
 8010918:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801091a:	69b9      	ldr	r1, [r7, #24]
 801091c:	69fa      	ldr	r2, [r7, #28]
 801091e:	e841 2300 	strex	r3, r2, [r1]
 8010922:	617b      	str	r3, [r7, #20]
   return(result);
 8010924:	697b      	ldr	r3, [r7, #20]
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1e5      	bne.n	80108f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	2220      	movs	r2, #32
 801092e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	2200      	movs	r2, #0
 8010936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801093a:	2303      	movs	r3, #3
 801093c:	e012      	b.n	8010964 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	2220      	movs	r2, #32
 8010942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	2220      	movs	r2, #32
 801094a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2200      	movs	r2, #0
 8010958:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2200      	movs	r2, #0
 801095e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010962:	2300      	movs	r3, #0
}
 8010964:	4618      	mov	r0, r3
 8010966:	3758      	adds	r7, #88	@ 0x58
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	603b      	str	r3, [r7, #0]
 8010978:	4613      	mov	r3, r2
 801097a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801097c:	e04f      	b.n	8010a1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010984:	d04b      	beq.n	8010a1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010986:	f7f6 fd07 	bl	8007398 <HAL_GetTick>
 801098a:	4602      	mov	r2, r0
 801098c:	683b      	ldr	r3, [r7, #0]
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	69ba      	ldr	r2, [r7, #24]
 8010992:	429a      	cmp	r2, r3
 8010994:	d302      	bcc.n	801099c <UART_WaitOnFlagUntilTimeout+0x30>
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d101      	bne.n	80109a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801099c:	2303      	movs	r3, #3
 801099e:	e04e      	b.n	8010a3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f003 0304 	and.w	r3, r3, #4
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d037      	beq.n	8010a1e <UART_WaitOnFlagUntilTimeout+0xb2>
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	2b80      	cmp	r3, #128	@ 0x80
 80109b2:	d034      	beq.n	8010a1e <UART_WaitOnFlagUntilTimeout+0xb2>
 80109b4:	68bb      	ldr	r3, [r7, #8]
 80109b6:	2b40      	cmp	r3, #64	@ 0x40
 80109b8:	d031      	beq.n	8010a1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	69db      	ldr	r3, [r3, #28]
 80109c0:	f003 0308 	and.w	r3, r3, #8
 80109c4:	2b08      	cmp	r3, #8
 80109c6:	d110      	bne.n	80109ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	2208      	movs	r2, #8
 80109ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f000 f920 	bl	8010c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2208      	movs	r2, #8
 80109da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80109e6:	2301      	movs	r3, #1
 80109e8:	e029      	b.n	8010a3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	69db      	ldr	r3, [r3, #28]
 80109f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80109f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80109f8:	d111      	bne.n	8010a1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010a02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010a04:	68f8      	ldr	r0, [r7, #12]
 8010a06:	f000 f906 	bl	8010c16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2220      	movs	r2, #32
 8010a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	2200      	movs	r2, #0
 8010a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010a1a:	2303      	movs	r3, #3
 8010a1c:	e00f      	b.n	8010a3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	69da      	ldr	r2, [r3, #28]
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	4013      	ands	r3, r2
 8010a28:	68ba      	ldr	r2, [r7, #8]
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	bf0c      	ite	eq
 8010a2e:	2301      	moveq	r3, #1
 8010a30:	2300      	movne	r3, #0
 8010a32:	b2db      	uxtb	r3, r3
 8010a34:	461a      	mov	r2, r3
 8010a36:	79fb      	ldrb	r3, [r7, #7]
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d0a0      	beq.n	801097e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010a3c:	2300      	movs	r3, #0
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
	...

08010a48 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b096      	sub	sp, #88	@ 0x58
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	4613      	mov	r3, r2
 8010a54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	68ba      	ldr	r2, [r7, #8]
 8010a5a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	88fa      	ldrh	r2, [r7, #6]
 8010a60:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	2200      	movs	r2, #0
 8010a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2222      	movs	r2, #34	@ 0x22
 8010a70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d02d      	beq.n	8010ada <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a84:	4a40      	ldr	r2, [pc, #256]	@ (8010b88 <UART_Start_Receive_DMA+0x140>)
 8010a86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a8e:	4a3f      	ldr	r2, [pc, #252]	@ (8010b8c <UART_Start_Receive_DMA+0x144>)
 8010a90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a98:	4a3d      	ldr	r2, [pc, #244]	@ (8010b90 <UART_Start_Receive_DMA+0x148>)
 8010a9a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	3324      	adds	r3, #36	@ 0x24
 8010ab2:	4619      	mov	r1, r3
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ab8:	461a      	mov	r2, r3
 8010aba:	88fb      	ldrh	r3, [r7, #6]
 8010abc:	f7f7 ffe8 	bl	8008a90 <HAL_DMA_Start_IT>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d009      	beq.n	8010ada <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2210      	movs	r2, #16
 8010aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	2220      	movs	r2, #32
 8010ad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	e051      	b.n	8010b7e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	691b      	ldr	r3, [r3, #16]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d018      	beq.n	8010b14 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aea:	e853 3f00 	ldrex	r3, [r3]
 8010aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	461a      	mov	r2, r3
 8010afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010b02:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010b08:	e841 2300 	strex	r3, r2, [r1]
 8010b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d1e6      	bne.n	8010ae2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	3308      	adds	r3, #8
 8010b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b1e:	e853 3f00 	ldrex	r3, [r3]
 8010b22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b26:	f043 0301 	orr.w	r3, r3, #1
 8010b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	3308      	adds	r3, #8
 8010b32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010b34:	637a      	str	r2, [r7, #52]	@ 0x34
 8010b36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010b3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010b3c:	e841 2300 	strex	r3, r2, [r1]
 8010b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d1e5      	bne.n	8010b14 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	3308      	adds	r3, #8
 8010b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	e853 3f00 	ldrex	r3, [r3]
 8010b56:	613b      	str	r3, [r7, #16]
   return(result);
 8010b58:	693b      	ldr	r3, [r7, #16]
 8010b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	3308      	adds	r3, #8
 8010b66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010b68:	623a      	str	r2, [r7, #32]
 8010b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b6c:	69f9      	ldr	r1, [r7, #28]
 8010b6e:	6a3a      	ldr	r2, [r7, #32]
 8010b70:	e841 2300 	strex	r3, r2, [r1]
 8010b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b76:	69bb      	ldr	r3, [r7, #24]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d1e5      	bne.n	8010b48 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3758      	adds	r7, #88	@ 0x58
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
 8010b86:	bf00      	nop
 8010b88:	08010ce3 	.word	0x08010ce3
 8010b8c:	08010e0f 	.word	0x08010e0f
 8010b90:	08010e4d 	.word	0x08010e4d

08010b94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b08f      	sub	sp, #60	@ 0x3c
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ba2:	6a3b      	ldr	r3, [r7, #32]
 8010ba4:	e853 3f00 	ldrex	r3, [r3]
 8010ba8:	61fb      	str	r3, [r7, #28]
   return(result);
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010bb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	461a      	mov	r2, r3
 8010bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010bbc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010bc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010bc2:	e841 2300 	strex	r3, r2, [r1]
 8010bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d1e6      	bne.n	8010b9c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	3308      	adds	r3, #8
 8010bd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	e853 3f00 	ldrex	r3, [r3]
 8010bdc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	3308      	adds	r3, #8
 8010bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010bee:	61ba      	str	r2, [r7, #24]
 8010bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bf2:	6979      	ldr	r1, [r7, #20]
 8010bf4:	69ba      	ldr	r2, [r7, #24]
 8010bf6:	e841 2300 	strex	r3, r2, [r1]
 8010bfa:	613b      	str	r3, [r7, #16]
   return(result);
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d1e5      	bne.n	8010bce <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2220      	movs	r2, #32
 8010c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010c0a:	bf00      	nop
 8010c0c:	373c      	adds	r7, #60	@ 0x3c
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr

08010c16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c16:	b480      	push	{r7}
 8010c18:	b095      	sub	sp, #84	@ 0x54
 8010c1a:	af00      	add	r7, sp, #0
 8010c1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c26:	e853 3f00 	ldrex	r3, [r3]
 8010c2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	461a      	mov	r2, r3
 8010c3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010c3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010c44:	e841 2300 	strex	r3, r2, [r1]
 8010c48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d1e6      	bne.n	8010c1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	3308      	adds	r3, #8
 8010c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c58:	6a3b      	ldr	r3, [r7, #32]
 8010c5a:	e853 3f00 	ldrex	r3, [r3]
 8010c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010c66:	f023 0301 	bic.w	r3, r3, #1
 8010c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	3308      	adds	r3, #8
 8010c72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010c74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010c76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c7c:	e841 2300 	strex	r3, r2, [r1]
 8010c80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d1e3      	bne.n	8010c50 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c8c:	2b01      	cmp	r3, #1
 8010c8e:	d118      	bne.n	8010cc2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	e853 3f00 	ldrex	r3, [r3]
 8010c9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010c9e:	68bb      	ldr	r3, [r7, #8]
 8010ca0:	f023 0310 	bic.w	r3, r3, #16
 8010ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	461a      	mov	r2, r3
 8010cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cae:	61bb      	str	r3, [r7, #24]
 8010cb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cb2:	6979      	ldr	r1, [r7, #20]
 8010cb4:	69ba      	ldr	r2, [r7, #24]
 8010cb6:	e841 2300 	strex	r3, r2, [r1]
 8010cba:	613b      	str	r3, [r7, #16]
   return(result);
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d1e6      	bne.n	8010c90 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2220      	movs	r2, #32
 8010cc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010cd6:	bf00      	nop
 8010cd8:	3754      	adds	r7, #84	@ 0x54
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce0:	4770      	bx	lr

08010ce2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010ce2:	b580      	push	{r7, lr}
 8010ce4:	b09c      	sub	sp, #112	@ 0x70
 8010ce6:	af00      	add	r7, sp, #0
 8010ce8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cee:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	f003 0320 	and.w	r3, r3, #32
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d171      	bne.n	8010de2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d00:	2200      	movs	r2, #0
 8010d02:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010d06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d0e:	e853 3f00 	ldrex	r3, [r3]
 8010d12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d16:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	461a      	mov	r2, r3
 8010d22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010d24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010d26:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010d2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010d2c:	e841 2300 	strex	r3, r2, [r1]
 8010d30:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010d32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d1e6      	bne.n	8010d06 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	3308      	adds	r3, #8
 8010d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d42:	e853 3f00 	ldrex	r3, [r3]
 8010d46:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d4a:	f023 0301 	bic.w	r3, r3, #1
 8010d4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8010d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	3308      	adds	r3, #8
 8010d56:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010d58:	647a      	str	r2, [r7, #68]	@ 0x44
 8010d5a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d5c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010d5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010d60:	e841 2300 	strex	r3, r2, [r1]
 8010d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d1e5      	bne.n	8010d38 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	3308      	adds	r3, #8
 8010d72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d76:	e853 3f00 	ldrex	r3, [r3]
 8010d7a:	623b      	str	r3, [r7, #32]
   return(result);
 8010d7c:	6a3b      	ldr	r3, [r7, #32]
 8010d7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d82:	663b      	str	r3, [r7, #96]	@ 0x60
 8010d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	3308      	adds	r3, #8
 8010d8a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010d8c:	633a      	str	r2, [r7, #48]	@ 0x30
 8010d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d94:	e841 2300 	strex	r3, r2, [r1]
 8010d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d1e5      	bne.n	8010d6c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010da0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010da2:	2220      	movs	r2, #32
 8010da4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d118      	bne.n	8010de2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	e853 3f00 	ldrex	r3, [r3]
 8010dbc:	60fb      	str	r3, [r7, #12]
   return(result);
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	f023 0310 	bic.w	r3, r3, #16
 8010dc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	461a      	mov	r2, r3
 8010dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010dce:	61fb      	str	r3, [r7, #28]
 8010dd0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dd2:	69b9      	ldr	r1, [r7, #24]
 8010dd4:	69fa      	ldr	r2, [r7, #28]
 8010dd6:	e841 2300 	strex	r3, r2, [r1]
 8010dda:	617b      	str	r3, [r7, #20]
   return(result);
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d1e6      	bne.n	8010db0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010de4:	2200      	movs	r2, #0
 8010de6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dec:	2b01      	cmp	r3, #1
 8010dee:	d107      	bne.n	8010e00 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010df2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010df6:	4619      	mov	r1, r3
 8010df8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010dfa:	f7ff fa37 	bl	801026c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010dfe:	e002      	b.n	8010e06 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8010e00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010e02:	f7f6 f999 	bl	8007138 <HAL_UART_RxCpltCallback>
}
 8010e06:	bf00      	nop
 8010e08:	3770      	adds	r7, #112	@ 0x70
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}

08010e0e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010e0e:	b580      	push	{r7, lr}
 8010e10:	b084      	sub	sp, #16
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e1a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	2201      	movs	r2, #1
 8010e20:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d109      	bne.n	8010e3e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e30:	085b      	lsrs	r3, r3, #1
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	4619      	mov	r1, r3
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f7ff fa18 	bl	801026c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010e3c:	e002      	b.n	8010e44 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8010e3e:	68f8      	ldr	r0, [r7, #12]
 8010e40:	f7ff fa00 	bl	8010244 <HAL_UART_RxHalfCpltCallback>
}
 8010e44:	bf00      	nop
 8010e46:	3710      	adds	r7, #16
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b086      	sub	sp, #24
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e58:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010e62:	697b      	ldr	r3, [r7, #20]
 8010e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010e68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	689b      	ldr	r3, [r3, #8]
 8010e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e74:	2b80      	cmp	r3, #128	@ 0x80
 8010e76:	d109      	bne.n	8010e8c <UART_DMAError+0x40>
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	2b21      	cmp	r3, #33	@ 0x21
 8010e7c:	d106      	bne.n	8010e8c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	2200      	movs	r2, #0
 8010e82:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010e86:	6978      	ldr	r0, [r7, #20]
 8010e88:	f7ff fe84 	bl	8010b94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010e8c:	697b      	ldr	r3, [r7, #20]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	689b      	ldr	r3, [r3, #8]
 8010e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e96:	2b40      	cmp	r3, #64	@ 0x40
 8010e98:	d109      	bne.n	8010eae <UART_DMAError+0x62>
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2b22      	cmp	r3, #34	@ 0x22
 8010e9e:	d106      	bne.n	8010eae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010ea8:	6978      	ldr	r0, [r7, #20]
 8010eaa:	f7ff feb4 	bl	8010c16 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010eb4:	f043 0210 	orr.w	r2, r3, #16
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ebe:	6978      	ldr	r0, [r7, #20]
 8010ec0:	f7ff f9ca 	bl	8010258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ec4:	bf00      	nop
 8010ec6:	3718      	adds	r7, #24
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b084      	sub	sp, #16
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ed8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	2200      	movs	r2, #0
 8010ede:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010ee2:	68f8      	ldr	r0, [r7, #12]
 8010ee4:	f7ff f9b8 	bl	8010258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010ee8:	bf00      	nop
 8010eea:	3710      	adds	r7, #16
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}

08010ef0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	b088      	sub	sp, #32
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	e853 3f00 	ldrex	r3, [r3]
 8010f04:	60bb      	str	r3, [r7, #8]
   return(result);
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f0c:	61fb      	str	r3, [r7, #28]
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	461a      	mov	r2, r3
 8010f14:	69fb      	ldr	r3, [r7, #28]
 8010f16:	61bb      	str	r3, [r7, #24]
 8010f18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f1a:	6979      	ldr	r1, [r7, #20]
 8010f1c:	69ba      	ldr	r2, [r7, #24]
 8010f1e:	e841 2300 	strex	r3, r2, [r1]
 8010f22:	613b      	str	r3, [r7, #16]
   return(result);
 8010f24:	693b      	ldr	r3, [r7, #16]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d1e6      	bne.n	8010ef8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2220      	movs	r2, #32
 8010f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2200      	movs	r2, #0
 8010f36:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7ff f979 	bl	8010230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010f3e:	bf00      	nop
 8010f40:	3720      	adds	r7, #32
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}

08010f46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010f46:	b480      	push	{r7}
 8010f48:	b083      	sub	sp, #12
 8010f4a:	af00      	add	r7, sp, #0
 8010f4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010f4e:	bf00      	nop
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr

08010f5a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010f5a:	b480      	push	{r7}
 8010f5c:	b083      	sub	sp, #12
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010f62:	bf00      	nop
 8010f64:	370c      	adds	r7, #12
 8010f66:	46bd      	mov	sp, r7
 8010f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6c:	4770      	bx	lr

08010f6e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010f6e:	b480      	push	{r7}
 8010f70:	b083      	sub	sp, #12
 8010f72:	af00      	add	r7, sp, #0
 8010f74:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010f76:	bf00      	nop
 8010f78:	370c      	adds	r7, #12
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr

08010f82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010f82:	b480      	push	{r7}
 8010f84:	b085      	sub	sp, #20
 8010f86:	af00      	add	r7, sp, #0
 8010f88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d101      	bne.n	8010f98 <HAL_UARTEx_DisableFifoMode+0x16>
 8010f94:	2302      	movs	r3, #2
 8010f96:	e027      	b.n	8010fe8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2224      	movs	r2, #36	@ 0x24
 8010fa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	681a      	ldr	r2, [r3, #0]
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f022 0201 	bic.w	r2, r2, #1
 8010fbe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010fc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	68fa      	ldr	r2, [r7, #12]
 8010fd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2220      	movs	r2, #32
 8010fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	2200      	movs	r2, #0
 8010fe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010fe6:	2300      	movs	r3, #0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3714      	adds	r7, #20
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr

08010ff4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b084      	sub	sp, #16
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011004:	2b01      	cmp	r3, #1
 8011006:	d101      	bne.n	801100c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011008:	2302      	movs	r3, #2
 801100a:	e02d      	b.n	8011068 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2201      	movs	r2, #1
 8011010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2224      	movs	r2, #36	@ 0x24
 8011018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	681a      	ldr	r2, [r3, #0]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f022 0201 	bic.w	r2, r2, #1
 8011032:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	689b      	ldr	r3, [r3, #8]
 801103a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	683a      	ldr	r2, [r7, #0]
 8011044:	430a      	orrs	r2, r1
 8011046:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 f84f 	bl	80110ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	68fa      	ldr	r2, [r7, #12]
 8011054:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2220      	movs	r2, #32
 801105a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011066:	2300      	movs	r3, #0
}
 8011068:	4618      	mov	r0, r3
 801106a:	3710      	adds	r7, #16
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011080:	2b01      	cmp	r3, #1
 8011082:	d101      	bne.n	8011088 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011084:	2302      	movs	r3, #2
 8011086:	e02d      	b.n	80110e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2201      	movs	r2, #1
 801108c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2224      	movs	r2, #36	@ 0x24
 8011094:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	681a      	ldr	r2, [r3, #0]
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f022 0201 	bic.w	r2, r2, #1
 80110ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	689b      	ldr	r3, [r3, #8]
 80110b6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	683a      	ldr	r2, [r7, #0]
 80110c0:	430a      	orrs	r2, r1
 80110c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 f811 	bl	80110ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	68fa      	ldr	r2, [r7, #12]
 80110d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2220      	movs	r2, #32
 80110d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2200      	movs	r2, #0
 80110de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80110e2:	2300      	movs	r3, #0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3710      	adds	r7, #16
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80110ec:	b480      	push	{r7}
 80110ee:	b085      	sub	sp, #20
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d108      	bne.n	801110e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2201      	movs	r2, #1
 8011100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2201      	movs	r2, #1
 8011108:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801110c:	e031      	b.n	8011172 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801110e:	2308      	movs	r3, #8
 8011110:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011112:	2308      	movs	r3, #8
 8011114:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	689b      	ldr	r3, [r3, #8]
 801111c:	0e5b      	lsrs	r3, r3, #25
 801111e:	b2db      	uxtb	r3, r3
 8011120:	f003 0307 	and.w	r3, r3, #7
 8011124:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	689b      	ldr	r3, [r3, #8]
 801112c:	0f5b      	lsrs	r3, r3, #29
 801112e:	b2db      	uxtb	r3, r3
 8011130:	f003 0307 	and.w	r3, r3, #7
 8011134:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011136:	7bbb      	ldrb	r3, [r7, #14]
 8011138:	7b3a      	ldrb	r2, [r7, #12]
 801113a:	4911      	ldr	r1, [pc, #68]	@ (8011180 <UARTEx_SetNbDataToProcess+0x94>)
 801113c:	5c8a      	ldrb	r2, [r1, r2]
 801113e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011142:	7b3a      	ldrb	r2, [r7, #12]
 8011144:	490f      	ldr	r1, [pc, #60]	@ (8011184 <UARTEx_SetNbDataToProcess+0x98>)
 8011146:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011148:	fb93 f3f2 	sdiv	r3, r3, r2
 801114c:	b29a      	uxth	r2, r3
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011154:	7bfb      	ldrb	r3, [r7, #15]
 8011156:	7b7a      	ldrb	r2, [r7, #13]
 8011158:	4909      	ldr	r1, [pc, #36]	@ (8011180 <UARTEx_SetNbDataToProcess+0x94>)
 801115a:	5c8a      	ldrb	r2, [r1, r2]
 801115c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011160:	7b7a      	ldrb	r2, [r7, #13]
 8011162:	4908      	ldr	r1, [pc, #32]	@ (8011184 <UARTEx_SetNbDataToProcess+0x98>)
 8011164:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011166:	fb93 f3f2 	sdiv	r3, r3, r2
 801116a:	b29a      	uxth	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011172:	bf00      	nop
 8011174:	3714      	adds	r7, #20
 8011176:	46bd      	mov	sp, r7
 8011178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117c:	4770      	bx	lr
 801117e:	bf00      	nop
 8011180:	08021eb0 	.word	0x08021eb0
 8011184:	08021eb8 	.word	0x08021eb8

08011188 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011188:	b480      	push	{r7}
 801118a:	b085      	sub	sp, #20
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2200      	movs	r2, #0
 8011194:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011198:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 801119c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	b29a      	uxth	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80111a8:	2300      	movs	r3, #0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3714      	adds	r7, #20
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr

080111b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80111b6:	b480      	push	{r7}
 80111b8:	b085      	sub	sp, #20
 80111ba:	af00      	add	r7, sp, #0
 80111bc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80111be:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80111c2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80111ca:	b29a      	uxth	r2, r3
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	43db      	mvns	r3, r3
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	4013      	ands	r3, r2
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80111de:	2300      	movs	r3, #0
}
 80111e0:	4618      	mov	r0, r3
 80111e2:	3714      	adds	r7, #20
 80111e4:	46bd      	mov	sp, r7
 80111e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ea:	4770      	bx	lr

080111ec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b085      	sub	sp, #20
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	1d3b      	adds	r3, r7, #4
 80111f6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2201      	movs	r2, #1
 80111fe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2200      	movs	r2, #0
 8011206:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2200      	movs	r2, #0
 801120e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2200      	movs	r2, #0
 8011216:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 801121a:	2300      	movs	r3, #0
}
 801121c:	4618      	mov	r0, r3
 801121e:	3714      	adds	r7, #20
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr

08011228 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011228:	b480      	push	{r7}
 801122a:	b0a7      	sub	sp, #156	@ 0x9c
 801122c:	af00      	add	r7, sp, #0
 801122e:	6078      	str	r0, [r7, #4]
 8011230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8011232:	2300      	movs	r3, #0
 8011234:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011238:	687a      	ldr	r2, [r7, #4]
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	009b      	lsls	r3, r3, #2
 8011240:	4413      	add	r3, r2
 8011242:	881b      	ldrh	r3, [r3, #0]
 8011244:	b29b      	uxth	r3, r3
 8011246:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 801124a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801124e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8011252:	683b      	ldr	r3, [r7, #0]
 8011254:	78db      	ldrb	r3, [r3, #3]
 8011256:	2b03      	cmp	r3, #3
 8011258:	d81f      	bhi.n	801129a <USB_ActivateEndpoint+0x72>
 801125a:	a201      	add	r2, pc, #4	@ (adr r2, 8011260 <USB_ActivateEndpoint+0x38>)
 801125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011260:	08011271 	.word	0x08011271
 8011264:	0801128d 	.word	0x0801128d
 8011268:	080112a3 	.word	0x080112a3
 801126c:	0801127f 	.word	0x0801127f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011270:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011274:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011278:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801127c:	e012      	b.n	80112a4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 801127e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011282:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8011286:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 801128a:	e00b      	b.n	80112a4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801128c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8011290:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8011294:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8011298:	e004      	b.n	80112a4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801129a:	2301      	movs	r3, #1
 801129c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80112a0:	e000      	b.n	80112a4 <USB_ActivateEndpoint+0x7c>
      break;
 80112a2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80112a4:	687a      	ldr	r2, [r7, #4]
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	441a      	add	r2, r3
 80112ae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80112b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80112b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80112ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80112be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	4413      	add	r3, r2
 80112d0:	881b      	ldrh	r3, [r3, #0]
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	b21b      	sxth	r3, r3
 80112d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80112da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80112de:	b21a      	sxth	r2, r3
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	b21b      	sxth	r3, r3
 80112e6:	4313      	orrs	r3, r2
 80112e8:	b21b      	sxth	r3, r3
 80112ea:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 80112ee:	687a      	ldr	r2, [r7, #4]
 80112f0:	683b      	ldr	r3, [r7, #0]
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	009b      	lsls	r3, r3, #2
 80112f6:	441a      	add	r2, r3
 80112f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80112fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801130c:	b29b      	uxth	r3, r3
 801130e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8011310:	683b      	ldr	r3, [r7, #0]
 8011312:	7b1b      	ldrb	r3, [r3, #12]
 8011314:	2b00      	cmp	r3, #0
 8011316:	f040 8180 	bne.w	801161a <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	785b      	ldrb	r3, [r3, #1]
 801131e:	2b00      	cmp	r3, #0
 8011320:	f000 8084 	beq.w	801142c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	61bb      	str	r3, [r7, #24]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801132e:	b29b      	uxth	r3, r3
 8011330:	461a      	mov	r2, r3
 8011332:	69bb      	ldr	r3, [r7, #24]
 8011334:	4413      	add	r3, r2
 8011336:	61bb      	str	r3, [r7, #24]
 8011338:	683b      	ldr	r3, [r7, #0]
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	00da      	lsls	r2, r3, #3
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	4413      	add	r3, r2
 8011342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011346:	617b      	str	r3, [r7, #20]
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	88db      	ldrh	r3, [r3, #6]
 801134c:	085b      	lsrs	r3, r3, #1
 801134e:	b29b      	uxth	r3, r3
 8011350:	005b      	lsls	r3, r3, #1
 8011352:	b29a      	uxth	r2, r3
 8011354:	697b      	ldr	r3, [r7, #20]
 8011356:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	683b      	ldr	r3, [r7, #0]
 801135c:	781b      	ldrb	r3, [r3, #0]
 801135e:	009b      	lsls	r3, r3, #2
 8011360:	4413      	add	r3, r2
 8011362:	881b      	ldrh	r3, [r3, #0]
 8011364:	827b      	strh	r3, [r7, #18]
 8011366:	8a7b      	ldrh	r3, [r7, #18]
 8011368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801136c:	2b00      	cmp	r3, #0
 801136e:	d01b      	beq.n	80113a8 <USB_ActivateEndpoint+0x180>
 8011370:	687a      	ldr	r2, [r7, #4]
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	781b      	ldrb	r3, [r3, #0]
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	4413      	add	r3, r2
 801137a:	881b      	ldrh	r3, [r3, #0]
 801137c:	b29b      	uxth	r3, r3
 801137e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011386:	823b      	strh	r3, [r7, #16]
 8011388:	687a      	ldr	r2, [r7, #4]
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	781b      	ldrb	r3, [r3, #0]
 801138e:	009b      	lsls	r3, r3, #2
 8011390:	441a      	add	r2, r3
 8011392:	8a3b      	ldrh	r3, [r7, #16]
 8011394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801139c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113a0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80113a4:	b29b      	uxth	r3, r3
 80113a6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	78db      	ldrb	r3, [r3, #3]
 80113ac:	2b01      	cmp	r3, #1
 80113ae:	d020      	beq.n	80113f2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80113b0:	687a      	ldr	r2, [r7, #4]
 80113b2:	683b      	ldr	r3, [r7, #0]
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	4413      	add	r3, r2
 80113ba:	881b      	ldrh	r3, [r3, #0]
 80113bc:	b29b      	uxth	r3, r3
 80113be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80113c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80113c6:	81bb      	strh	r3, [r7, #12]
 80113c8:	89bb      	ldrh	r3, [r7, #12]
 80113ca:	f083 0320 	eor.w	r3, r3, #32
 80113ce:	81bb      	strh	r3, [r7, #12]
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	009b      	lsls	r3, r3, #2
 80113d8:	441a      	add	r2, r3
 80113da:	89bb      	ldrh	r3, [r7, #12]
 80113dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80113e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80113e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80113e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	8013      	strh	r3, [r2, #0]
 80113f0:	e3f9      	b.n	8011be6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80113f2:	687a      	ldr	r2, [r7, #4]
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	009b      	lsls	r3, r3, #2
 80113fa:	4413      	add	r3, r2
 80113fc:	881b      	ldrh	r3, [r3, #0]
 80113fe:	b29b      	uxth	r3, r3
 8011400:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011404:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011408:	81fb      	strh	r3, [r7, #14]
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	441a      	add	r2, r3
 8011414:	89fb      	ldrh	r3, [r7, #14]
 8011416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801141a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801141e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011426:	b29b      	uxth	r3, r3
 8011428:	8013      	strh	r3, [r2, #0]
 801142a:	e3dc      	b.n	8011be6 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011436:	b29b      	uxth	r3, r3
 8011438:	461a      	mov	r2, r3
 801143a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801143c:	4413      	add	r3, r2
 801143e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	00da      	lsls	r2, r3, #3
 8011446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011448:	4413      	add	r3, r2
 801144a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801144e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	88db      	ldrh	r3, [r3, #6]
 8011454:	085b      	lsrs	r3, r3, #1
 8011456:	b29b      	uxth	r3, r3
 8011458:	005b      	lsls	r3, r3, #1
 801145a:	b29a      	uxth	r2, r3
 801145c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801145e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801146a:	b29b      	uxth	r3, r3
 801146c:	461a      	mov	r2, r3
 801146e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011470:	4413      	add	r3, r2
 8011472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	00da      	lsls	r2, r3, #3
 801147a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801147c:	4413      	add	r3, r2
 801147e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011482:	627b      	str	r3, [r7, #36]	@ 0x24
 8011484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011486:	881b      	ldrh	r3, [r3, #0]
 8011488:	b29b      	uxth	r3, r3
 801148a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801148e:	b29a      	uxth	r2, r3
 8011490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011492:	801a      	strh	r2, [r3, #0]
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	691b      	ldr	r3, [r3, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d10a      	bne.n	80114b2 <USB_ActivateEndpoint+0x28a>
 801149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801149e:	881b      	ldrh	r3, [r3, #0]
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ae:	801a      	strh	r2, [r3, #0]
 80114b0:	e041      	b.n	8011536 <USB_ActivateEndpoint+0x30e>
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	691b      	ldr	r3, [r3, #16]
 80114b6:	2b3e      	cmp	r3, #62	@ 0x3e
 80114b8:	d81c      	bhi.n	80114f4 <USB_ActivateEndpoint+0x2cc>
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	691b      	ldr	r3, [r3, #16]
 80114be:	085b      	lsrs	r3, r3, #1
 80114c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80114c4:	683b      	ldr	r3, [r7, #0]
 80114c6:	691b      	ldr	r3, [r3, #16]
 80114c8:	f003 0301 	and.w	r3, r3, #1
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d004      	beq.n	80114da <USB_ActivateEndpoint+0x2b2>
 80114d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80114d4:	3301      	adds	r3, #1
 80114d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80114da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114dc:	881b      	ldrh	r3, [r3, #0]
 80114de:	b29a      	uxth	r2, r3
 80114e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	029b      	lsls	r3, r3, #10
 80114e8:	b29b      	uxth	r3, r3
 80114ea:	4313      	orrs	r3, r2
 80114ec:	b29a      	uxth	r2, r3
 80114ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114f0:	801a      	strh	r2, [r3, #0]
 80114f2:	e020      	b.n	8011536 <USB_ActivateEndpoint+0x30e>
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	691b      	ldr	r3, [r3, #16]
 80114f8:	095b      	lsrs	r3, r3, #5
 80114fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	691b      	ldr	r3, [r3, #16]
 8011502:	f003 031f 	and.w	r3, r3, #31
 8011506:	2b00      	cmp	r3, #0
 8011508:	d104      	bne.n	8011514 <USB_ActivateEndpoint+0x2ec>
 801150a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801150e:	3b01      	subs	r3, #1
 8011510:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011516:	881b      	ldrh	r3, [r3, #0]
 8011518:	b29a      	uxth	r2, r3
 801151a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801151e:	b29b      	uxth	r3, r3
 8011520:	029b      	lsls	r3, r3, #10
 8011522:	b29b      	uxth	r3, r3
 8011524:	4313      	orrs	r3, r2
 8011526:	b29b      	uxth	r3, r3
 8011528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801152c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011530:	b29a      	uxth	r2, r3
 8011532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011534:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011536:	687a      	ldr	r2, [r7, #4]
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	009b      	lsls	r3, r3, #2
 801153e:	4413      	add	r3, r2
 8011540:	881b      	ldrh	r3, [r3, #0]
 8011542:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011544:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801154a:	2b00      	cmp	r3, #0
 801154c:	d01b      	beq.n	8011586 <USB_ActivateEndpoint+0x35e>
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	009b      	lsls	r3, r3, #2
 8011556:	4413      	add	r3, r2
 8011558:	881b      	ldrh	r3, [r3, #0]
 801155a:	b29b      	uxth	r3, r3
 801155c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011560:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011564:	843b      	strh	r3, [r7, #32]
 8011566:	687a      	ldr	r2, [r7, #4]
 8011568:	683b      	ldr	r3, [r7, #0]
 801156a:	781b      	ldrb	r3, [r3, #0]
 801156c:	009b      	lsls	r3, r3, #2
 801156e:	441a      	add	r2, r3
 8011570:	8c3b      	ldrh	r3, [r7, #32]
 8011572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801157a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801157e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011582:	b29b      	uxth	r3, r3
 8011584:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d124      	bne.n	80115d8 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801158e:	687a      	ldr	r2, [r7, #4]
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	009b      	lsls	r3, r3, #2
 8011596:	4413      	add	r3, r2
 8011598:	881b      	ldrh	r3, [r3, #0]
 801159a:	b29b      	uxth	r3, r3
 801159c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80115a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115a4:	83bb      	strh	r3, [r7, #28]
 80115a6:	8bbb      	ldrh	r3, [r7, #28]
 80115a8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80115ac:	83bb      	strh	r3, [r7, #28]
 80115ae:	8bbb      	ldrh	r3, [r7, #28]
 80115b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80115b4:	83bb      	strh	r3, [r7, #28]
 80115b6:	687a      	ldr	r2, [r7, #4]
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	781b      	ldrb	r3, [r3, #0]
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	441a      	add	r2, r3
 80115c0:	8bbb      	ldrh	r3, [r7, #28]
 80115c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80115c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80115ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80115d2:	b29b      	uxth	r3, r3
 80115d4:	8013      	strh	r3, [r2, #0]
 80115d6:	e306      	b.n	8011be6 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	009b      	lsls	r3, r3, #2
 80115e0:	4413      	add	r3, r2
 80115e2:	881b      	ldrh	r3, [r3, #0]
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80115ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80115ee:	83fb      	strh	r3, [r7, #30]
 80115f0:	8bfb      	ldrh	r3, [r7, #30]
 80115f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80115f6:	83fb      	strh	r3, [r7, #30]
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	441a      	add	r2, r3
 8011602:	8bfb      	ldrh	r3, [r7, #30]
 8011604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801160c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011614:	b29b      	uxth	r3, r3
 8011616:	8013      	strh	r3, [r2, #0]
 8011618:	e2e5      	b.n	8011be6 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	78db      	ldrb	r3, [r3, #3]
 801161e:	2b02      	cmp	r3, #2
 8011620:	d11e      	bne.n	8011660 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011622:	687a      	ldr	r2, [r7, #4]
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	781b      	ldrb	r3, [r3, #0]
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
 801162c:	881b      	ldrh	r3, [r3, #0]
 801162e:	b29b      	uxth	r3, r3
 8011630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011638:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 801163c:	687a      	ldr	r2, [r7, #4]
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	781b      	ldrb	r3, [r3, #0]
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	441a      	add	r2, r3
 8011646:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 801164a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801164e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011652:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801165a:	b29b      	uxth	r3, r3
 801165c:	8013      	strh	r3, [r2, #0]
 801165e:	e01d      	b.n	801169c <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	781b      	ldrb	r3, [r3, #0]
 8011666:	009b      	lsls	r3, r3, #2
 8011668:	4413      	add	r3, r2
 801166a:	881b      	ldrh	r3, [r3, #0]
 801166c:	b29b      	uxth	r3, r3
 801166e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011676:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 801167a:	687a      	ldr	r2, [r7, #4]
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	781b      	ldrb	r3, [r3, #0]
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	441a      	add	r2, r3
 8011684:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8011688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801168c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011698:	b29b      	uxth	r3, r3
 801169a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80116a6:	b29b      	uxth	r3, r3
 80116a8:	461a      	mov	r2, r3
 80116aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80116ac:	4413      	add	r3, r2
 80116ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	00da      	lsls	r2, r3, #3
 80116b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80116b8:	4413      	add	r3, r2
 80116ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80116be:	67bb      	str	r3, [r7, #120]	@ 0x78
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	891b      	ldrh	r3, [r3, #8]
 80116c4:	085b      	lsrs	r3, r3, #1
 80116c6:	b29b      	uxth	r3, r3
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	b29a      	uxth	r2, r3
 80116cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80116ce:	801a      	strh	r2, [r3, #0]
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80116da:	b29b      	uxth	r3, r3
 80116dc:	461a      	mov	r2, r3
 80116de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80116e0:	4413      	add	r3, r2
 80116e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	00da      	lsls	r2, r3, #3
 80116ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80116ec:	4413      	add	r3, r2
 80116ee:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80116f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	895b      	ldrh	r3, [r3, #10]
 80116f8:	085b      	lsrs	r3, r3, #1
 80116fa:	b29b      	uxth	r3, r3
 80116fc:	005b      	lsls	r3, r3, #1
 80116fe:	b29a      	uxth	r2, r3
 8011700:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011702:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	785b      	ldrb	r3, [r3, #1]
 8011708:	2b00      	cmp	r3, #0
 801170a:	f040 81af 	bne.w	8011a6c <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	009b      	lsls	r3, r3, #2
 8011716:	4413      	add	r3, r2
 8011718:	881b      	ldrh	r3, [r3, #0]
 801171a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801171e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8011722:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011726:	2b00      	cmp	r3, #0
 8011728:	d01d      	beq.n	8011766 <USB_ActivateEndpoint+0x53e>
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	4413      	add	r3, r2
 8011734:	881b      	ldrh	r3, [r3, #0]
 8011736:	b29b      	uxth	r3, r3
 8011738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801173c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011740:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8011744:	687a      	ldr	r2, [r7, #4]
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	009b      	lsls	r3, r3, #2
 801174c:	441a      	add	r2, r3
 801174e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 8011752:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011756:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801175a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801175e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011762:	b29b      	uxth	r3, r3
 8011764:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	009b      	lsls	r3, r3, #2
 801176e:	4413      	add	r3, r2
 8011770:	881b      	ldrh	r3, [r3, #0]
 8011772:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8011776:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801177a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801177e:	2b00      	cmp	r3, #0
 8011780:	d01d      	beq.n	80117be <USB_ActivateEndpoint+0x596>
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	781b      	ldrb	r3, [r3, #0]
 8011788:	009b      	lsls	r3, r3, #2
 801178a:	4413      	add	r3, r2
 801178c:	881b      	ldrh	r3, [r3, #0]
 801178e:	b29b      	uxth	r3, r3
 8011790:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011798:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 801179c:	687a      	ldr	r2, [r7, #4]
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	441a      	add	r2, r3
 80117a6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80117aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80117ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80117b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	785b      	ldrb	r3, [r3, #1]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d16b      	bne.n	801189e <USB_ActivateEndpoint+0x676>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	461a      	mov	r2, r3
 80117d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117d6:	4413      	add	r3, r2
 80117d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	00da      	lsls	r2, r3, #3
 80117e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117e2:	4413      	add	r3, r2
 80117e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80117e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80117ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117ec:	881b      	ldrh	r3, [r3, #0]
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80117f8:	801a      	strh	r2, [r3, #0]
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	691b      	ldr	r3, [r3, #16]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d10a      	bne.n	8011818 <USB_ActivateEndpoint+0x5f0>
 8011802:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011804:	881b      	ldrh	r3, [r3, #0]
 8011806:	b29b      	uxth	r3, r3
 8011808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801180c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011810:	b29a      	uxth	r2, r3
 8011812:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011814:	801a      	strh	r2, [r3, #0]
 8011816:	e05d      	b.n	80118d4 <USB_ActivateEndpoint+0x6ac>
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	691b      	ldr	r3, [r3, #16]
 801181c:	2b3e      	cmp	r3, #62	@ 0x3e
 801181e:	d81c      	bhi.n	801185a <USB_ActivateEndpoint+0x632>
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	691b      	ldr	r3, [r3, #16]
 8011824:	085b      	lsrs	r3, r3, #1
 8011826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	691b      	ldr	r3, [r3, #16]
 801182e:	f003 0301 	and.w	r3, r3, #1
 8011832:	2b00      	cmp	r3, #0
 8011834:	d004      	beq.n	8011840 <USB_ActivateEndpoint+0x618>
 8011836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801183a:	3301      	adds	r3, #1
 801183c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011842:	881b      	ldrh	r3, [r3, #0]
 8011844:	b29a      	uxth	r2, r3
 8011846:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801184a:	b29b      	uxth	r3, r3
 801184c:	029b      	lsls	r3, r3, #10
 801184e:	b29b      	uxth	r3, r3
 8011850:	4313      	orrs	r3, r2
 8011852:	b29a      	uxth	r2, r3
 8011854:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011856:	801a      	strh	r2, [r3, #0]
 8011858:	e03c      	b.n	80118d4 <USB_ActivateEndpoint+0x6ac>
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	691b      	ldr	r3, [r3, #16]
 801185e:	095b      	lsrs	r3, r3, #5
 8011860:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011864:	683b      	ldr	r3, [r7, #0]
 8011866:	691b      	ldr	r3, [r3, #16]
 8011868:	f003 031f 	and.w	r3, r3, #31
 801186c:	2b00      	cmp	r3, #0
 801186e:	d104      	bne.n	801187a <USB_ActivateEndpoint+0x652>
 8011870:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011874:	3b01      	subs	r3, #1
 8011876:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801187a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801187c:	881b      	ldrh	r3, [r3, #0]
 801187e:	b29a      	uxth	r2, r3
 8011880:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011884:	b29b      	uxth	r3, r3
 8011886:	029b      	lsls	r3, r3, #10
 8011888:	b29b      	uxth	r3, r3
 801188a:	4313      	orrs	r3, r2
 801188c:	b29b      	uxth	r3, r3
 801188e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011896:	b29a      	uxth	r2, r3
 8011898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801189a:	801a      	strh	r2, [r3, #0]
 801189c:	e01a      	b.n	80118d4 <USB_ActivateEndpoint+0x6ac>
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	785b      	ldrb	r3, [r3, #1]
 80118a2:	2b01      	cmp	r3, #1
 80118a4:	d116      	bne.n	80118d4 <USB_ActivateEndpoint+0x6ac>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80118b0:	b29b      	uxth	r3, r3
 80118b2:	461a      	mov	r2, r3
 80118b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118b6:	4413      	add	r3, r2
 80118b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	00da      	lsls	r2, r3, #3
 80118c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118c2:	4413      	add	r3, r2
 80118c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80118c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	691b      	ldr	r3, [r3, #16]
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80118d2:	801a      	strh	r2, [r3, #0]
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	785b      	ldrb	r3, [r3, #1]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d16b      	bne.n	80119b8 <USB_ActivateEndpoint+0x790>
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	461a      	mov	r2, r3
 80118ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118f0:	4413      	add	r3, r2
 80118f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	781b      	ldrb	r3, [r3, #0]
 80118f8:	00da      	lsls	r2, r3, #3
 80118fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118fc:	4413      	add	r3, r2
 80118fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011902:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011906:	881b      	ldrh	r3, [r3, #0]
 8011908:	b29b      	uxth	r3, r3
 801190a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801190e:	b29a      	uxth	r2, r3
 8011910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011912:	801a      	strh	r2, [r3, #0]
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	691b      	ldr	r3, [r3, #16]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10a      	bne.n	8011932 <USB_ActivateEndpoint+0x70a>
 801191c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801191e:	881b      	ldrh	r3, [r3, #0]
 8011920:	b29b      	uxth	r3, r3
 8011922:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011926:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801192a:	b29a      	uxth	r2, r3
 801192c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192e:	801a      	strh	r2, [r3, #0]
 8011930:	e05b      	b.n	80119ea <USB_ActivateEndpoint+0x7c2>
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	691b      	ldr	r3, [r3, #16]
 8011936:	2b3e      	cmp	r3, #62	@ 0x3e
 8011938:	d81c      	bhi.n	8011974 <USB_ActivateEndpoint+0x74c>
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	691b      	ldr	r3, [r3, #16]
 801193e:	085b      	lsrs	r3, r3, #1
 8011940:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	691b      	ldr	r3, [r3, #16]
 8011948:	f003 0301 	and.w	r3, r3, #1
 801194c:	2b00      	cmp	r3, #0
 801194e:	d004      	beq.n	801195a <USB_ActivateEndpoint+0x732>
 8011950:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011954:	3301      	adds	r3, #1
 8011956:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801195a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801195c:	881b      	ldrh	r3, [r3, #0]
 801195e:	b29a      	uxth	r2, r3
 8011960:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011964:	b29b      	uxth	r3, r3
 8011966:	029b      	lsls	r3, r3, #10
 8011968:	b29b      	uxth	r3, r3
 801196a:	4313      	orrs	r3, r2
 801196c:	b29a      	uxth	r2, r3
 801196e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011970:	801a      	strh	r2, [r3, #0]
 8011972:	e03a      	b.n	80119ea <USB_ActivateEndpoint+0x7c2>
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	095b      	lsrs	r3, r3, #5
 801197a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	691b      	ldr	r3, [r3, #16]
 8011982:	f003 031f 	and.w	r3, r3, #31
 8011986:	2b00      	cmp	r3, #0
 8011988:	d104      	bne.n	8011994 <USB_ActivateEndpoint+0x76c>
 801198a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801198e:	3b01      	subs	r3, #1
 8011990:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011996:	881b      	ldrh	r3, [r3, #0]
 8011998:	b29a      	uxth	r2, r3
 801199a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801199e:	b29b      	uxth	r3, r3
 80119a0:	029b      	lsls	r3, r3, #10
 80119a2:	b29b      	uxth	r3, r3
 80119a4:	4313      	orrs	r3, r2
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80119ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80119b0:	b29a      	uxth	r2, r3
 80119b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119b4:	801a      	strh	r2, [r3, #0]
 80119b6:	e018      	b.n	80119ea <USB_ActivateEndpoint+0x7c2>
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	785b      	ldrb	r3, [r3, #1]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d114      	bne.n	80119ea <USB_ActivateEndpoint+0x7c2>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80119c6:	b29b      	uxth	r3, r3
 80119c8:	461a      	mov	r2, r3
 80119ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119cc:	4413      	add	r3, r2
 80119ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	00da      	lsls	r2, r3, #3
 80119d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119d8:	4413      	add	r3, r2
 80119da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80119de:	643b      	str	r3, [r7, #64]	@ 0x40
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	691b      	ldr	r3, [r3, #16]
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119e8:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80119ea:	687a      	ldr	r2, [r7, #4]
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	009b      	lsls	r3, r3, #2
 80119f2:	4413      	add	r3, r2
 80119f4:	881b      	ldrh	r3, [r3, #0]
 80119f6:	b29b      	uxth	r3, r3
 80119f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80119fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a00:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011a02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011a04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011a08:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011a0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011a0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011a10:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	009b      	lsls	r3, r3, #2
 8011a1a:	441a      	add	r2, r3
 8011a1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011a1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a2e:	b29b      	uxth	r3, r3
 8011a30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011a32:	687a      	ldr	r2, [r7, #4]
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	009b      	lsls	r3, r3, #2
 8011a3a:	4413      	add	r3, r2
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a48:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	441a      	add	r2, r3
 8011a54:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011a56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011a5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	8013      	strh	r3, [r2, #0]
 8011a6a:	e0bc      	b.n	8011be6 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	4413      	add	r3, r2
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8011a7c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8011a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d01d      	beq.n	8011ac4 <USB_ActivateEndpoint+0x89c>
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	683b      	ldr	r3, [r7, #0]
 8011a8c:	781b      	ldrb	r3, [r3, #0]
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	881b      	ldrh	r3, [r3, #0]
 8011a94:	b29b      	uxth	r3, r3
 8011a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011a9e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	009b      	lsls	r3, r3, #2
 8011aaa:	441a      	add	r2, r3
 8011aac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8011ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ab8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011abc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011ac4:	687a      	ldr	r2, [r7, #4]
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	781b      	ldrb	r3, [r3, #0]
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	4413      	add	r3, r2
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8011ad4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8011ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d01d      	beq.n	8011b1c <USB_ActivateEndpoint+0x8f4>
 8011ae0:	687a      	ldr	r2, [r7, #4]
 8011ae2:	683b      	ldr	r3, [r7, #0]
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	009b      	lsls	r3, r3, #2
 8011ae8:	4413      	add	r3, r2
 8011aea:	881b      	ldrh	r3, [r3, #0]
 8011aec:	b29b      	uxth	r3, r3
 8011aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011af6:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	781b      	ldrb	r3, [r3, #0]
 8011b00:	009b      	lsls	r3, r3, #2
 8011b02:	441a      	add	r2, r3
 8011b04:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8011b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	78db      	ldrb	r3, [r3, #3]
 8011b20:	2b01      	cmp	r3, #1
 8011b22:	d024      	beq.n	8011b6e <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	4413      	add	r3, r2
 8011b2e:	881b      	ldrh	r3, [r3, #0]
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b3a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011b3e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011b42:	f083 0320 	eor.w	r3, r3, #32
 8011b46:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8011b4a:	687a      	ldr	r2, [r7, #4]
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	781b      	ldrb	r3, [r3, #0]
 8011b50:	009b      	lsls	r3, r3, #2
 8011b52:	441a      	add	r2, r3
 8011b54:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8011b58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	8013      	strh	r3, [r2, #0]
 8011b6c:	e01d      	b.n	8011baa <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	009b      	lsls	r3, r3, #2
 8011b76:	4413      	add	r3, r2
 8011b78:	881b      	ldrh	r3, [r3, #0]
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011b84:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8011b88:	687a      	ldr	r2, [r7, #4]
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	441a      	add	r2, r3
 8011b92:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8011b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ba6:	b29b      	uxth	r3, r3
 8011ba8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011baa:	687a      	ldr	r2, [r7, #4]
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	781b      	ldrb	r3, [r3, #0]
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	4413      	add	r3, r2
 8011bb4:	881b      	ldrh	r3, [r3, #0]
 8011bb6:	b29b      	uxth	r3, r3
 8011bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bc0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	441a      	add	r2, r3
 8011bce:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011bd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011bd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011be6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	379c      	adds	r7, #156	@ 0x9c
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop

08011bf8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b08d      	sub	sp, #52	@ 0x34
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	7b1b      	ldrb	r3, [r3, #12]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	f040 808e 	bne.w	8011d28 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	785b      	ldrb	r3, [r3, #1]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d044      	beq.n	8011c9e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011c14:	687a      	ldr	r2, [r7, #4]
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	4413      	add	r3, r2
 8011c1e:	881b      	ldrh	r3, [r3, #0]
 8011c20:	81bb      	strh	r3, [r7, #12]
 8011c22:	89bb      	ldrh	r3, [r7, #12]
 8011c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d01b      	beq.n	8011c64 <USB_DeactivateEndpoint+0x6c>
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	781b      	ldrb	r3, [r3, #0]
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	4413      	add	r3, r2
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	b29b      	uxth	r3, r3
 8011c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c42:	817b      	strh	r3, [r7, #10]
 8011c44:	687a      	ldr	r2, [r7, #4]
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	781b      	ldrb	r3, [r3, #0]
 8011c4a:	009b      	lsls	r3, r3, #2
 8011c4c:	441a      	add	r2, r3
 8011c4e:	897b      	ldrh	r3, [r7, #10]
 8011c50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c5c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011c60:	b29b      	uxth	r3, r3
 8011c62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011c64:	687a      	ldr	r2, [r7, #4]
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	781b      	ldrb	r3, [r3, #0]
 8011c6a:	009b      	lsls	r3, r3, #2
 8011c6c:	4413      	add	r3, r2
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c7a:	813b      	strh	r3, [r7, #8]
 8011c7c:	687a      	ldr	r2, [r7, #4]
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	441a      	add	r2, r3
 8011c86:	893b      	ldrh	r3, [r7, #8]
 8011c88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c98:	b29b      	uxth	r3, r3
 8011c9a:	8013      	strh	r3, [r2, #0]
 8011c9c:	e192      	b.n	8011fc4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	4413      	add	r3, r2
 8011ca8:	881b      	ldrh	r3, [r3, #0]
 8011caa:	827b      	strh	r3, [r7, #18]
 8011cac:	8a7b      	ldrh	r3, [r7, #18]
 8011cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d01b      	beq.n	8011cee <USB_DeactivateEndpoint+0xf6>
 8011cb6:	687a      	ldr	r2, [r7, #4]
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	781b      	ldrb	r3, [r3, #0]
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	4413      	add	r3, r2
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011cc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ccc:	823b      	strh	r3, [r7, #16]
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	441a      	add	r2, r3
 8011cd8:	8a3b      	ldrh	r3, [r7, #16]
 8011cda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ce2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cea:	b29b      	uxth	r3, r3
 8011cec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011cee:	687a      	ldr	r2, [r7, #4]
 8011cf0:	683b      	ldr	r3, [r7, #0]
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	4413      	add	r3, r2
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d04:	81fb      	strh	r3, [r7, #14]
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	683b      	ldr	r3, [r7, #0]
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	441a      	add	r2, r3
 8011d10:	89fb      	ldrh	r3, [r7, #14]
 8011d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d22:	b29b      	uxth	r3, r3
 8011d24:	8013      	strh	r3, [r2, #0]
 8011d26:	e14d      	b.n	8011fc4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	785b      	ldrb	r3, [r3, #1]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	f040 80a5 	bne.w	8011e7c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011d32:	687a      	ldr	r2, [r7, #4]
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	009b      	lsls	r3, r3, #2
 8011d3a:	4413      	add	r3, r2
 8011d3c:	881b      	ldrh	r3, [r3, #0]
 8011d3e:	843b      	strh	r3, [r7, #32]
 8011d40:	8c3b      	ldrh	r3, [r7, #32]
 8011d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d01b      	beq.n	8011d82 <USB_DeactivateEndpoint+0x18a>
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	781b      	ldrb	r3, [r3, #0]
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	4413      	add	r3, r2
 8011d54:	881b      	ldrh	r3, [r3, #0]
 8011d56:	b29b      	uxth	r3, r3
 8011d58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d60:	83fb      	strh	r3, [r7, #30]
 8011d62:	687a      	ldr	r2, [r7, #4]
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	441a      	add	r2, r3
 8011d6c:	8bfb      	ldrh	r3, [r7, #30]
 8011d6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011d7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	009b      	lsls	r3, r3, #2
 8011d8a:	4413      	add	r3, r2
 8011d8c:	881b      	ldrh	r3, [r3, #0]
 8011d8e:	83bb      	strh	r3, [r7, #28]
 8011d90:	8bbb      	ldrh	r3, [r7, #28]
 8011d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d01b      	beq.n	8011dd2 <USB_DeactivateEndpoint+0x1da>
 8011d9a:	687a      	ldr	r2, [r7, #4]
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	009b      	lsls	r3, r3, #2
 8011da2:	4413      	add	r3, r2
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	b29b      	uxth	r3, r3
 8011da8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011db0:	837b      	strh	r3, [r7, #26]
 8011db2:	687a      	ldr	r2, [r7, #4]
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	781b      	ldrb	r3, [r3, #0]
 8011db8:	009b      	lsls	r3, r3, #2
 8011dba:	441a      	add	r2, r3
 8011dbc:	8b7b      	ldrh	r3, [r7, #26]
 8011dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011dca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011dce:	b29b      	uxth	r3, r3
 8011dd0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	009b      	lsls	r3, r3, #2
 8011dda:	4413      	add	r3, r2
 8011ddc:	881b      	ldrh	r3, [r3, #0]
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011de8:	833b      	strh	r3, [r7, #24]
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	441a      	add	r2, r3
 8011df4:	8b3b      	ldrh	r3, [r7, #24]
 8011df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011dfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e02:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	4413      	add	r3, r2
 8011e14:	881b      	ldrh	r3, [r3, #0]
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e20:	82fb      	strh	r3, [r7, #22]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	441a      	add	r2, r3
 8011e2c:	8afb      	ldrh	r3, [r7, #22]
 8011e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e3e:	b29b      	uxth	r3, r3
 8011e40:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	683b      	ldr	r3, [r7, #0]
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	009b      	lsls	r3, r3, #2
 8011e4a:	4413      	add	r3, r2
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011e54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e58:	82bb      	strh	r3, [r7, #20]
 8011e5a:	687a      	ldr	r2, [r7, #4]
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	009b      	lsls	r3, r3, #2
 8011e62:	441a      	add	r2, r3
 8011e64:	8abb      	ldrh	r3, [r7, #20]
 8011e66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e76:	b29b      	uxth	r3, r3
 8011e78:	8013      	strh	r3, [r2, #0]
 8011e7a:	e0a3      	b.n	8011fc4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	781b      	ldrb	r3, [r3, #0]
 8011e82:	009b      	lsls	r3, r3, #2
 8011e84:	4413      	add	r3, r2
 8011e86:	881b      	ldrh	r3, [r3, #0]
 8011e88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8011e8a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d01b      	beq.n	8011ecc <USB_DeactivateEndpoint+0x2d4>
 8011e94:	687a      	ldr	r2, [r7, #4]
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	009b      	lsls	r3, r3, #2
 8011e9c:	4413      	add	r3, r2
 8011e9e:	881b      	ldrh	r3, [r3, #0]
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011eaa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8011eac:	687a      	ldr	r2, [r7, #4]
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	781b      	ldrb	r3, [r3, #0]
 8011eb2:	009b      	lsls	r3, r3, #2
 8011eb4:	441a      	add	r2, r3
 8011eb6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8011eb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011ebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011ec0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011ecc:	687a      	ldr	r2, [r7, #4]
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	781b      	ldrb	r3, [r3, #0]
 8011ed2:	009b      	lsls	r3, r3, #2
 8011ed4:	4413      	add	r3, r2
 8011ed6:	881b      	ldrh	r3, [r3, #0]
 8011ed8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011eda:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d01b      	beq.n	8011f1c <USB_DeactivateEndpoint+0x324>
 8011ee4:	687a      	ldr	r2, [r7, #4]
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	781b      	ldrb	r3, [r3, #0]
 8011eea:	009b      	lsls	r3, r3, #2
 8011eec:	4413      	add	r3, r2
 8011eee:	881b      	ldrh	r3, [r3, #0]
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ef6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011efa:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	781b      	ldrb	r3, [r3, #0]
 8011f02:	009b      	lsls	r3, r3, #2
 8011f04:	441a      	add	r2, r3
 8011f06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f14:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011f18:	b29b      	uxth	r3, r3
 8011f1a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011f1c:	687a      	ldr	r2, [r7, #4]
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	009b      	lsls	r3, r3, #2
 8011f24:	4413      	add	r3, r2
 8011f26:	881b      	ldrh	r3, [r3, #0]
 8011f28:	b29b      	uxth	r3, r3
 8011f2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011f32:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011f34:	687a      	ldr	r2, [r7, #4]
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	781b      	ldrb	r3, [r3, #0]
 8011f3a:	009b      	lsls	r3, r3, #2
 8011f3c:	441a      	add	r2, r3
 8011f3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	4413      	add	r3, r2
 8011f5e:	881b      	ldrh	r3, [r3, #0]
 8011f60:	b29b      	uxth	r3, r3
 8011f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011f6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	781b      	ldrb	r3, [r3, #0]
 8011f72:	009b      	lsls	r3, r3, #2
 8011f74:	441a      	add	r2, r3
 8011f76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011f78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011f7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011f84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	4413      	add	r3, r2
 8011f96:	881b      	ldrh	r3, [r3, #0]
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011fa2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011fa4:	687a      	ldr	r2, [r7, #4]
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	781b      	ldrb	r3, [r3, #0]
 8011faa:	009b      	lsls	r3, r3, #2
 8011fac:	441a      	add	r2, r3
 8011fae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011fc4:	2300      	movs	r3, #0
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3734      	adds	r7, #52	@ 0x34
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd0:	4770      	bx	lr

08011fd2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011fd2:	b580      	push	{r7, lr}
 8011fd4:	b0ac      	sub	sp, #176	@ 0xb0
 8011fd6:	af00      	add	r7, sp, #0
 8011fd8:	6078      	str	r0, [r7, #4]
 8011fda:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	785b      	ldrb	r3, [r3, #1]
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	f040 84ca 	bne.w	801297a <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	699a      	ldr	r2, [r3, #24]
 8011fea:	683b      	ldr	r3, [r7, #0]
 8011fec:	691b      	ldr	r3, [r3, #16]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d904      	bls.n	8011ffc <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	691b      	ldr	r3, [r3, #16]
 8011ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011ffa:	e003      	b.n	8012004 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8011ffc:	683b      	ldr	r3, [r7, #0]
 8011ffe:	699b      	ldr	r3, [r3, #24]
 8012000:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	7b1b      	ldrb	r3, [r3, #12]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d122      	bne.n	8012052 <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	6959      	ldr	r1, [r3, #20]
 8012010:	683b      	ldr	r3, [r7, #0]
 8012012:	88da      	ldrh	r2, [r3, #6]
 8012014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012018:	b29b      	uxth	r3, r3
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	f000 febd 	bl	8012d9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	613b      	str	r3, [r7, #16]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801202a:	b29b      	uxth	r3, r3
 801202c:	461a      	mov	r2, r3
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	4413      	add	r3, r2
 8012032:	613b      	str	r3, [r7, #16]
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	00da      	lsls	r2, r3, #3
 801203a:	693b      	ldr	r3, [r7, #16]
 801203c:	4413      	add	r3, r2
 801203e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012042:	60fb      	str	r3, [r7, #12]
 8012044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012048:	b29a      	uxth	r2, r3
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	801a      	strh	r2, [r3, #0]
 801204e:	f000 bc6f 	b.w	8012930 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	78db      	ldrb	r3, [r3, #3]
 8012056:	2b02      	cmp	r3, #2
 8012058:	f040 831e 	bne.w	8012698 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	6a1a      	ldr	r2, [r3, #32]
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	691b      	ldr	r3, [r3, #16]
 8012064:	429a      	cmp	r2, r3
 8012066:	f240 82cf 	bls.w	8012608 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801206a:	687a      	ldr	r2, [r7, #4]
 801206c:	683b      	ldr	r3, [r7, #0]
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	009b      	lsls	r3, r3, #2
 8012072:	4413      	add	r3, r2
 8012074:	881b      	ldrh	r3, [r3, #0]
 8012076:	b29b      	uxth	r3, r3
 8012078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801207c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012080:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8012084:	687a      	ldr	r2, [r7, #4]
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	781b      	ldrb	r3, [r3, #0]
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	441a      	add	r2, r3
 801208e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8012092:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012096:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801209a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 801209e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	6a1a      	ldr	r2, [r3, #32]
 80120aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80120ae:	1ad2      	subs	r2, r2, r3
 80120b0:	683b      	ldr	r3, [r7, #0]
 80120b2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	4413      	add	r3, r2
 80120be:	881b      	ldrh	r3, [r3, #0]
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	f000 814f 	beq.w	801236a <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	785b      	ldrb	r3, [r3, #1]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d16b      	bne.n	80121b0 <USB_EPStartXfer+0x1de>
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	461a      	mov	r2, r3
 80120e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120e8:	4413      	add	r3, r2
 80120ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	781b      	ldrb	r3, [r3, #0]
 80120f0:	00da      	lsls	r2, r3, #3
 80120f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f4:	4413      	add	r3, r2
 80120f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80120fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80120fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fe:	881b      	ldrh	r3, [r3, #0]
 8012100:	b29b      	uxth	r3, r3
 8012102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012106:	b29a      	uxth	r2, r3
 8012108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210a:	801a      	strh	r2, [r3, #0]
 801210c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012110:	2b00      	cmp	r3, #0
 8012112:	d10a      	bne.n	801212a <USB_EPStartXfer+0x158>
 8012114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012116:	881b      	ldrh	r3, [r3, #0]
 8012118:	b29b      	uxth	r3, r3
 801211a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801211e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012122:	b29a      	uxth	r2, r3
 8012124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012126:	801a      	strh	r2, [r3, #0]
 8012128:	e05b      	b.n	80121e2 <USB_EPStartXfer+0x210>
 801212a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801212e:	2b3e      	cmp	r3, #62	@ 0x3e
 8012130:	d81c      	bhi.n	801216c <USB_EPStartXfer+0x19a>
 8012132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012136:	085b      	lsrs	r3, r3, #1
 8012138:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801213c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012140:	f003 0301 	and.w	r3, r3, #1
 8012144:	2b00      	cmp	r3, #0
 8012146:	d004      	beq.n	8012152 <USB_EPStartXfer+0x180>
 8012148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801214c:	3301      	adds	r3, #1
 801214e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012154:	881b      	ldrh	r3, [r3, #0]
 8012156:	b29a      	uxth	r2, r3
 8012158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801215c:	b29b      	uxth	r3, r3
 801215e:	029b      	lsls	r3, r3, #10
 8012160:	b29b      	uxth	r3, r3
 8012162:	4313      	orrs	r3, r2
 8012164:	b29a      	uxth	r2, r3
 8012166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012168:	801a      	strh	r2, [r3, #0]
 801216a:	e03a      	b.n	80121e2 <USB_EPStartXfer+0x210>
 801216c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012170:	095b      	lsrs	r3, r3, #5
 8012172:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012176:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801217a:	f003 031f 	and.w	r3, r3, #31
 801217e:	2b00      	cmp	r3, #0
 8012180:	d104      	bne.n	801218c <USB_EPStartXfer+0x1ba>
 8012182:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012186:	3b01      	subs	r3, #1
 8012188:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801218e:	881b      	ldrh	r3, [r3, #0]
 8012190:	b29a      	uxth	r2, r3
 8012192:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8012196:	b29b      	uxth	r3, r3
 8012198:	029b      	lsls	r3, r3, #10
 801219a:	b29b      	uxth	r3, r3
 801219c:	4313      	orrs	r3, r2
 801219e:	b29b      	uxth	r3, r3
 80121a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80121a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ac:	801a      	strh	r2, [r3, #0]
 80121ae:	e018      	b.n	80121e2 <USB_EPStartXfer+0x210>
 80121b0:	683b      	ldr	r3, [r7, #0]
 80121b2:	785b      	ldrb	r3, [r3, #1]
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d114      	bne.n	80121e2 <USB_EPStartXfer+0x210>
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80121be:	b29b      	uxth	r3, r3
 80121c0:	461a      	mov	r2, r3
 80121c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121c4:	4413      	add	r3, r2
 80121c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80121c8:	683b      	ldr	r3, [r7, #0]
 80121ca:	781b      	ldrb	r3, [r3, #0]
 80121cc:	00da      	lsls	r2, r3, #3
 80121ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121d0:	4413      	add	r3, r2
 80121d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80121d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121dc:	b29a      	uxth	r2, r3
 80121de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	895b      	ldrh	r3, [r3, #10]
 80121e6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	6959      	ldr	r1, [r3, #20]
 80121ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80121f2:	b29b      	uxth	r3, r3
 80121f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f000 fdce 	bl	8012d9a <USB_WritePMA>
            ep->xfer_buff += len;
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	695a      	ldr	r2, [r3, #20]
 8012202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012206:	441a      	add	r2, r3
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	6a1a      	ldr	r2, [r3, #32]
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	691b      	ldr	r3, [r3, #16]
 8012214:	429a      	cmp	r2, r3
 8012216:	d907      	bls.n	8012228 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8012218:	683b      	ldr	r3, [r7, #0]
 801221a:	6a1a      	ldr	r2, [r3, #32]
 801221c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012220:	1ad2      	subs	r2, r2, r3
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	621a      	str	r2, [r3, #32]
 8012226:	e006      	b.n	8012236 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	6a1b      	ldr	r3, [r3, #32]
 801222c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	2200      	movs	r2, #0
 8012234:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	785b      	ldrb	r3, [r3, #1]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d16b      	bne.n	8012316 <USB_EPStartXfer+0x344>
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	61bb      	str	r3, [r7, #24]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012248:	b29b      	uxth	r3, r3
 801224a:	461a      	mov	r2, r3
 801224c:	69bb      	ldr	r3, [r7, #24]
 801224e:	4413      	add	r3, r2
 8012250:	61bb      	str	r3, [r7, #24]
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	781b      	ldrb	r3, [r3, #0]
 8012256:	00da      	lsls	r2, r3, #3
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	4413      	add	r3, r2
 801225c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012260:	617b      	str	r3, [r7, #20]
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	881b      	ldrh	r3, [r3, #0]
 8012266:	b29b      	uxth	r3, r3
 8012268:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801226c:	b29a      	uxth	r2, r3
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	801a      	strh	r2, [r3, #0]
 8012272:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012276:	2b00      	cmp	r3, #0
 8012278:	d10a      	bne.n	8012290 <USB_EPStartXfer+0x2be>
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	881b      	ldrh	r3, [r3, #0]
 801227e:	b29b      	uxth	r3, r3
 8012280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012288:	b29a      	uxth	r2, r3
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	801a      	strh	r2, [r3, #0]
 801228e:	e05d      	b.n	801234c <USB_EPStartXfer+0x37a>
 8012290:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012294:	2b3e      	cmp	r3, #62	@ 0x3e
 8012296:	d81c      	bhi.n	80122d2 <USB_EPStartXfer+0x300>
 8012298:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801229c:	085b      	lsrs	r3, r3, #1
 801229e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80122a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122a6:	f003 0301 	and.w	r3, r3, #1
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d004      	beq.n	80122b8 <USB_EPStartXfer+0x2e6>
 80122ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80122b2:	3301      	adds	r3, #1
 80122b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	881b      	ldrh	r3, [r3, #0]
 80122bc:	b29a      	uxth	r2, r3
 80122be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	029b      	lsls	r3, r3, #10
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	4313      	orrs	r3, r2
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	801a      	strh	r2, [r3, #0]
 80122d0:	e03c      	b.n	801234c <USB_EPStartXfer+0x37a>
 80122d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122d6:	095b      	lsrs	r3, r3, #5
 80122d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80122dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80122e0:	f003 031f 	and.w	r3, r3, #31
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d104      	bne.n	80122f2 <USB_EPStartXfer+0x320>
 80122e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80122ec:	3b01      	subs	r3, #1
 80122ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	881b      	ldrh	r3, [r3, #0]
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	029b      	lsls	r3, r3, #10
 8012300:	b29b      	uxth	r3, r3
 8012302:	4313      	orrs	r3, r2
 8012304:	b29b      	uxth	r3, r3
 8012306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801230a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801230e:	b29a      	uxth	r2, r3
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	801a      	strh	r2, [r3, #0]
 8012314:	e01a      	b.n	801234c <USB_EPStartXfer+0x37a>
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	785b      	ldrb	r3, [r3, #1]
 801231a:	2b01      	cmp	r3, #1
 801231c:	d116      	bne.n	801234c <USB_EPStartXfer+0x37a>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	623b      	str	r3, [r7, #32]
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012328:	b29b      	uxth	r3, r3
 801232a:	461a      	mov	r2, r3
 801232c:	6a3b      	ldr	r3, [r7, #32]
 801232e:	4413      	add	r3, r2
 8012330:	623b      	str	r3, [r7, #32]
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	00da      	lsls	r2, r3, #3
 8012338:	6a3b      	ldr	r3, [r7, #32]
 801233a:	4413      	add	r3, r2
 801233c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012340:	61fb      	str	r3, [r7, #28]
 8012342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012346:	b29a      	uxth	r2, r3
 8012348:	69fb      	ldr	r3, [r7, #28]
 801234a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	891b      	ldrh	r3, [r3, #8]
 8012350:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	6959      	ldr	r1, [r3, #20]
 8012358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801235c:	b29b      	uxth	r3, r3
 801235e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 fd19 	bl	8012d9a <USB_WritePMA>
 8012368:	e2e2      	b.n	8012930 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	785b      	ldrb	r3, [r3, #1]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d16b      	bne.n	801244a <USB_EPStartXfer+0x478>
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801237c:	b29b      	uxth	r3, r3
 801237e:	461a      	mov	r2, r3
 8012380:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012382:	4413      	add	r3, r2
 8012384:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	781b      	ldrb	r3, [r3, #0]
 801238a:	00da      	lsls	r2, r3, #3
 801238c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801238e:	4413      	add	r3, r2
 8012390:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012394:	647b      	str	r3, [r7, #68]	@ 0x44
 8012396:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	b29b      	uxth	r3, r3
 801239c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123a4:	801a      	strh	r2, [r3, #0]
 80123a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d10a      	bne.n	80123c4 <USB_EPStartXfer+0x3f2>
 80123ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123bc:	b29a      	uxth	r2, r3
 80123be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123c0:	801a      	strh	r2, [r3, #0]
 80123c2:	e05d      	b.n	8012480 <USB_EPStartXfer+0x4ae>
 80123c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80123ca:	d81c      	bhi.n	8012406 <USB_EPStartXfer+0x434>
 80123cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123d0:	085b      	lsrs	r3, r3, #1
 80123d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80123d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d004      	beq.n	80123ec <USB_EPStartXfer+0x41a>
 80123e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80123e6:	3301      	adds	r3, #1
 80123e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80123ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	b29a      	uxth	r2, r3
 80123f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80123f6:	b29b      	uxth	r3, r3
 80123f8:	029b      	lsls	r3, r3, #10
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	4313      	orrs	r3, r2
 80123fe:	b29a      	uxth	r2, r3
 8012400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012402:	801a      	strh	r2, [r3, #0]
 8012404:	e03c      	b.n	8012480 <USB_EPStartXfer+0x4ae>
 8012406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801240a:	095b      	lsrs	r3, r3, #5
 801240c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012410:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012414:	f003 031f 	and.w	r3, r3, #31
 8012418:	2b00      	cmp	r3, #0
 801241a:	d104      	bne.n	8012426 <USB_EPStartXfer+0x454>
 801241c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012420:	3b01      	subs	r3, #1
 8012422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012428:	881b      	ldrh	r3, [r3, #0]
 801242a:	b29a      	uxth	r2, r3
 801242c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8012430:	b29b      	uxth	r3, r3
 8012432:	029b      	lsls	r3, r3, #10
 8012434:	b29b      	uxth	r3, r3
 8012436:	4313      	orrs	r3, r2
 8012438:	b29b      	uxth	r3, r3
 801243a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801243e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012442:	b29a      	uxth	r2, r3
 8012444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012446:	801a      	strh	r2, [r3, #0]
 8012448:	e01a      	b.n	8012480 <USB_EPStartXfer+0x4ae>
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	785b      	ldrb	r3, [r3, #1]
 801244e:	2b01      	cmp	r3, #1
 8012450:	d116      	bne.n	8012480 <USB_EPStartXfer+0x4ae>
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	653b      	str	r3, [r7, #80]	@ 0x50
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801245c:	b29b      	uxth	r3, r3
 801245e:	461a      	mov	r2, r3
 8012460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012462:	4413      	add	r3, r2
 8012464:	653b      	str	r3, [r7, #80]	@ 0x50
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	00da      	lsls	r2, r3, #3
 801246c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801246e:	4413      	add	r3, r2
 8012470:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012474:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801247a:	b29a      	uxth	r2, r3
 801247c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801247e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	891b      	ldrh	r3, [r3, #8]
 8012484:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	6959      	ldr	r1, [r3, #20]
 801248c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012490:	b29b      	uxth	r3, r3
 8012492:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f000 fc7f 	bl	8012d9a <USB_WritePMA>
            ep->xfer_buff += len;
 801249c:	683b      	ldr	r3, [r7, #0]
 801249e:	695a      	ldr	r2, [r3, #20]
 80124a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124a4:	441a      	add	r2, r3
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	6a1a      	ldr	r2, [r3, #32]
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	691b      	ldr	r3, [r3, #16]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d907      	bls.n	80124c6 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	6a1a      	ldr	r2, [r3, #32]
 80124ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80124be:	1ad2      	subs	r2, r2, r3
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	621a      	str	r2, [r3, #32]
 80124c4:	e006      	b.n	80124d4 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	6a1b      	ldr	r3, [r3, #32]
 80124ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	2200      	movs	r2, #0
 80124d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	785b      	ldrb	r3, [r3, #1]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d16b      	bne.n	80125b8 <USB_EPStartXfer+0x5e6>
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80124ea:	b29b      	uxth	r3, r3
 80124ec:	461a      	mov	r2, r3
 80124ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124f0:	4413      	add	r3, r2
 80124f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	781b      	ldrb	r3, [r3, #0]
 80124f8:	00da      	lsls	r2, r3, #3
 80124fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124fc:	4413      	add	r3, r2
 80124fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8012502:	637b      	str	r3, [r7, #52]	@ 0x34
 8012504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012506:	881b      	ldrh	r3, [r3, #0]
 8012508:	b29b      	uxth	r3, r3
 801250a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801250e:	b29a      	uxth	r2, r3
 8012510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012512:	801a      	strh	r2, [r3, #0]
 8012514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012518:	2b00      	cmp	r3, #0
 801251a:	d10a      	bne.n	8012532 <USB_EPStartXfer+0x560>
 801251c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801251e:	881b      	ldrh	r3, [r3, #0]
 8012520:	b29b      	uxth	r3, r3
 8012522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801252a:	b29a      	uxth	r2, r3
 801252c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801252e:	801a      	strh	r2, [r3, #0]
 8012530:	e05b      	b.n	80125ea <USB_EPStartXfer+0x618>
 8012532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012536:	2b3e      	cmp	r3, #62	@ 0x3e
 8012538:	d81c      	bhi.n	8012574 <USB_EPStartXfer+0x5a2>
 801253a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801253e:	085b      	lsrs	r3, r3, #1
 8012540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012544:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012548:	f003 0301 	and.w	r3, r3, #1
 801254c:	2b00      	cmp	r3, #0
 801254e:	d004      	beq.n	801255a <USB_EPStartXfer+0x588>
 8012550:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012554:	3301      	adds	r3, #1
 8012556:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801255a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801255c:	881b      	ldrh	r3, [r3, #0]
 801255e:	b29a      	uxth	r2, r3
 8012560:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012564:	b29b      	uxth	r3, r3
 8012566:	029b      	lsls	r3, r3, #10
 8012568:	b29b      	uxth	r3, r3
 801256a:	4313      	orrs	r3, r2
 801256c:	b29a      	uxth	r2, r3
 801256e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012570:	801a      	strh	r2, [r3, #0]
 8012572:	e03a      	b.n	80125ea <USB_EPStartXfer+0x618>
 8012574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012578:	095b      	lsrs	r3, r3, #5
 801257a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801257e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012582:	f003 031f 	and.w	r3, r3, #31
 8012586:	2b00      	cmp	r3, #0
 8012588:	d104      	bne.n	8012594 <USB_EPStartXfer+0x5c2>
 801258a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801258e:	3b01      	subs	r3, #1
 8012590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012596:	881b      	ldrh	r3, [r3, #0]
 8012598:	b29a      	uxth	r2, r3
 801259a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801259e:	b29b      	uxth	r3, r3
 80125a0:	029b      	lsls	r3, r3, #10
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	4313      	orrs	r3, r2
 80125a6:	b29b      	uxth	r3, r3
 80125a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80125ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80125b0:	b29a      	uxth	r2, r3
 80125b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80125b4:	801a      	strh	r2, [r3, #0]
 80125b6:	e018      	b.n	80125ea <USB_EPStartXfer+0x618>
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	785b      	ldrb	r3, [r3, #1]
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d114      	bne.n	80125ea <USB_EPStartXfer+0x618>
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80125c6:	b29b      	uxth	r3, r3
 80125c8:	461a      	mov	r2, r3
 80125ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125cc:	4413      	add	r3, r2
 80125ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	781b      	ldrb	r3, [r3, #0]
 80125d4:	00da      	lsls	r2, r3, #3
 80125d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125d8:	4413      	add	r3, r2
 80125da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80125de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80125e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	895b      	ldrh	r3, [r3, #10]
 80125ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	6959      	ldr	r1, [r3, #20]
 80125f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80125fa:	b29b      	uxth	r3, r3
 80125fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 fbca 	bl	8012d9a <USB_WritePMA>
 8012606:	e193      	b.n	8012930 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	6a1b      	ldr	r3, [r3, #32]
 801260c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8012610:	687a      	ldr	r2, [r7, #4]
 8012612:	683b      	ldr	r3, [r7, #0]
 8012614:	781b      	ldrb	r3, [r3, #0]
 8012616:	009b      	lsls	r3, r3, #2
 8012618:	4413      	add	r3, r2
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	b29b      	uxth	r3, r3
 801261e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8012622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012626:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	781b      	ldrb	r3, [r3, #0]
 8012630:	009b      	lsls	r3, r3, #2
 8012632:	441a      	add	r2, r3
 8012634:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8012638:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801263c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012640:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012648:	b29b      	uxth	r3, r3
 801264a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012656:	b29b      	uxth	r3, r3
 8012658:	461a      	mov	r2, r3
 801265a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801265c:	4413      	add	r3, r2
 801265e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012660:	683b      	ldr	r3, [r7, #0]
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	00da      	lsls	r2, r3, #3
 8012666:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012668:	4413      	add	r3, r2
 801266a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801266e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8012670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012674:	b29a      	uxth	r2, r3
 8012676:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012678:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	891b      	ldrh	r3, [r3, #8]
 801267e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	6959      	ldr	r1, [r3, #20]
 8012686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801268a:	b29b      	uxth	r3, r3
 801268c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f000 fb82 	bl	8012d9a <USB_WritePMA>
 8012696:	e14b      	b.n	8012930 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	6a1a      	ldr	r2, [r3, #32]
 801269c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80126a0:	1ad2      	subs	r2, r2, r3
 80126a2:	683b      	ldr	r3, [r7, #0]
 80126a4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	009b      	lsls	r3, r3, #2
 80126ae:	4413      	add	r3, r2
 80126b0:	881b      	ldrh	r3, [r3, #0]
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	f000 809a 	beq.w	80127f2 <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	785b      	ldrb	r3, [r3, #1]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d16b      	bne.n	80127a2 <USB_EPStartXfer+0x7d0>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80126d4:	b29b      	uxth	r3, r3
 80126d6:	461a      	mov	r2, r3
 80126d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80126da:	4413      	add	r3, r2
 80126dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80126de:	683b      	ldr	r3, [r7, #0]
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	00da      	lsls	r2, r3, #3
 80126e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80126e6:	4413      	add	r3, r2
 80126e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80126ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80126ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80126f0:	881b      	ldrh	r3, [r3, #0]
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80126fc:	801a      	strh	r2, [r3, #0]
 80126fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012702:	2b00      	cmp	r3, #0
 8012704:	d10a      	bne.n	801271c <USB_EPStartXfer+0x74a>
 8012706:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012708:	881b      	ldrh	r3, [r3, #0]
 801270a:	b29b      	uxth	r3, r3
 801270c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012714:	b29a      	uxth	r2, r3
 8012716:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012718:	801a      	strh	r2, [r3, #0]
 801271a:	e05b      	b.n	80127d4 <USB_EPStartXfer+0x802>
 801271c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012720:	2b3e      	cmp	r3, #62	@ 0x3e
 8012722:	d81c      	bhi.n	801275e <USB_EPStartXfer+0x78c>
 8012724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012728:	085b      	lsrs	r3, r3, #1
 801272a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801272e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012732:	f003 0301 	and.w	r3, r3, #1
 8012736:	2b00      	cmp	r3, #0
 8012738:	d004      	beq.n	8012744 <USB_EPStartXfer+0x772>
 801273a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801273e:	3301      	adds	r3, #1
 8012740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012746:	881b      	ldrh	r3, [r3, #0]
 8012748:	b29a      	uxth	r2, r3
 801274a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801274e:	b29b      	uxth	r3, r3
 8012750:	029b      	lsls	r3, r3, #10
 8012752:	b29b      	uxth	r3, r3
 8012754:	4313      	orrs	r3, r2
 8012756:	b29a      	uxth	r2, r3
 8012758:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801275a:	801a      	strh	r2, [r3, #0]
 801275c:	e03a      	b.n	80127d4 <USB_EPStartXfer+0x802>
 801275e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012762:	095b      	lsrs	r3, r3, #5
 8012764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801276c:	f003 031f 	and.w	r3, r3, #31
 8012770:	2b00      	cmp	r3, #0
 8012772:	d104      	bne.n	801277e <USB_EPStartXfer+0x7ac>
 8012774:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012778:	3b01      	subs	r3, #1
 801277a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801277e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012780:	881b      	ldrh	r3, [r3, #0]
 8012782:	b29a      	uxth	r2, r3
 8012784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012788:	b29b      	uxth	r3, r3
 801278a:	029b      	lsls	r3, r3, #10
 801278c:	b29b      	uxth	r3, r3
 801278e:	4313      	orrs	r3, r2
 8012790:	b29b      	uxth	r3, r3
 8012792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801279a:	b29a      	uxth	r2, r3
 801279c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801279e:	801a      	strh	r2, [r3, #0]
 80127a0:	e018      	b.n	80127d4 <USB_EPStartXfer+0x802>
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	785b      	ldrb	r3, [r3, #1]
 80127a6:	2b01      	cmp	r3, #1
 80127a8:	d114      	bne.n	80127d4 <USB_EPStartXfer+0x802>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80127b0:	b29b      	uxth	r3, r3
 80127b2:	461a      	mov	r2, r3
 80127b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80127b6:	4413      	add	r3, r2
 80127b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	781b      	ldrb	r3, [r3, #0]
 80127be:	00da      	lsls	r2, r3, #3
 80127c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80127c2:	4413      	add	r3, r2
 80127c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80127c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80127ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127ce:	b29a      	uxth	r2, r3
 80127d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80127d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	895b      	ldrh	r3, [r3, #10]
 80127d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	6959      	ldr	r1, [r3, #20]
 80127e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80127e4:	b29b      	uxth	r3, r3
 80127e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f000 fad5 	bl	8012d9a <USB_WritePMA>
 80127f0:	e09e      	b.n	8012930 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80127f2:	683b      	ldr	r3, [r7, #0]
 80127f4:	785b      	ldrb	r3, [r3, #1]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d16b      	bne.n	80128d2 <USB_EPStartXfer+0x900>
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8012804:	b29b      	uxth	r3, r3
 8012806:	461a      	mov	r2, r3
 8012808:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801280a:	4413      	add	r3, r2
 801280c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	00da      	lsls	r2, r3, #3
 8012814:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012816:	4413      	add	r3, r2
 8012818:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801281c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801281e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012820:	881b      	ldrh	r3, [r3, #0]
 8012822:	b29b      	uxth	r3, r3
 8012824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012828:	b29a      	uxth	r2, r3
 801282a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801282c:	801a      	strh	r2, [r3, #0]
 801282e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012832:	2b00      	cmp	r3, #0
 8012834:	d10a      	bne.n	801284c <USB_EPStartXfer+0x87a>
 8012836:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012838:	881b      	ldrh	r3, [r3, #0]
 801283a:	b29b      	uxth	r3, r3
 801283c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012844:	b29a      	uxth	r2, r3
 8012846:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012848:	801a      	strh	r2, [r3, #0]
 801284a:	e063      	b.n	8012914 <USB_EPStartXfer+0x942>
 801284c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012850:	2b3e      	cmp	r3, #62	@ 0x3e
 8012852:	d81c      	bhi.n	801288e <USB_EPStartXfer+0x8bc>
 8012854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012858:	085b      	lsrs	r3, r3, #1
 801285a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801285e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012862:	f003 0301 	and.w	r3, r3, #1
 8012866:	2b00      	cmp	r3, #0
 8012868:	d004      	beq.n	8012874 <USB_EPStartXfer+0x8a2>
 801286a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801286e:	3301      	adds	r3, #1
 8012870:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	b29a      	uxth	r2, r3
 801287a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801287e:	b29b      	uxth	r3, r3
 8012880:	029b      	lsls	r3, r3, #10
 8012882:	b29b      	uxth	r3, r3
 8012884:	4313      	orrs	r3, r2
 8012886:	b29a      	uxth	r2, r3
 8012888:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801288a:	801a      	strh	r2, [r3, #0]
 801288c:	e042      	b.n	8012914 <USB_EPStartXfer+0x942>
 801288e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012892:	095b      	lsrs	r3, r3, #5
 8012894:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801289c:	f003 031f 	and.w	r3, r3, #31
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d104      	bne.n	80128ae <USB_EPStartXfer+0x8dc>
 80128a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80128a8:	3b01      	subs	r3, #1
 80128aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80128ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128b0:	881b      	ldrh	r3, [r3, #0]
 80128b2:	b29a      	uxth	r2, r3
 80128b4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80128b8:	b29b      	uxth	r3, r3
 80128ba:	029b      	lsls	r3, r3, #10
 80128bc:	b29b      	uxth	r3, r3
 80128be:	4313      	orrs	r3, r2
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80128c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80128ca:	b29a      	uxth	r2, r3
 80128cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80128ce:	801a      	strh	r2, [r3, #0]
 80128d0:	e020      	b.n	8012914 <USB_EPStartXfer+0x942>
 80128d2:	683b      	ldr	r3, [r7, #0]
 80128d4:	785b      	ldrb	r3, [r3, #1]
 80128d6:	2b01      	cmp	r3, #1
 80128d8:	d11c      	bne.n	8012914 <USB_EPStartXfer+0x942>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	461a      	mov	r2, r3
 80128ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80128ee:	4413      	add	r3, r2
 80128f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	00da      	lsls	r2, r3, #3
 80128fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80128fe:	4413      	add	r3, r2
 8012900:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8012904:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801290c:	b29a      	uxth	r2, r3
 801290e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012912:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	891b      	ldrh	r3, [r3, #8]
 8012918:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801291c:	683b      	ldr	r3, [r7, #0]
 801291e:	6959      	ldr	r1, [r3, #20]
 8012920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012924:	b29b      	uxth	r3, r3
 8012926:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f000 fa35 	bl	8012d9a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012930:	687a      	ldr	r2, [r7, #4]
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	781b      	ldrb	r3, [r3, #0]
 8012936:	009b      	lsls	r3, r3, #2
 8012938:	4413      	add	r3, r2
 801293a:	881b      	ldrh	r3, [r3, #0]
 801293c:	b29b      	uxth	r3, r3
 801293e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012946:	817b      	strh	r3, [r7, #10]
 8012948:	897b      	ldrh	r3, [r7, #10]
 801294a:	f083 0310 	eor.w	r3, r3, #16
 801294e:	817b      	strh	r3, [r7, #10]
 8012950:	897b      	ldrh	r3, [r7, #10]
 8012952:	f083 0320 	eor.w	r3, r3, #32
 8012956:	817b      	strh	r3, [r7, #10]
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	781b      	ldrb	r3, [r3, #0]
 801295e:	009b      	lsls	r3, r3, #2
 8012960:	441a      	add	r2, r3
 8012962:	897b      	ldrh	r3, [r7, #10]
 8012964:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012968:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801296c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012974:	b29b      	uxth	r3, r3
 8012976:	8013      	strh	r3, [r2, #0]
 8012978:	e0d5      	b.n	8012b26 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	7b1b      	ldrb	r3, [r3, #12]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d156      	bne.n	8012a30 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	699b      	ldr	r3, [r3, #24]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d122      	bne.n	80129d0 <USB_EPStartXfer+0x9fe>
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	78db      	ldrb	r3, [r3, #3]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d11e      	bne.n	80129d0 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	781b      	ldrb	r3, [r3, #0]
 8012998:	009b      	lsls	r3, r3, #2
 801299a:	4413      	add	r3, r2
 801299c:	881b      	ldrh	r3, [r3, #0]
 801299e:	b29b      	uxth	r3, r3
 80129a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80129a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80129a8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80129ac:	687a      	ldr	r2, [r7, #4]
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	009b      	lsls	r3, r3, #2
 80129b4:	441a      	add	r2, r3
 80129b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80129ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80129be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80129c2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80129c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	8013      	strh	r3, [r2, #0]
 80129ce:	e01d      	b.n	8012a0c <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	781b      	ldrb	r3, [r3, #0]
 80129d6:	009b      	lsls	r3, r3, #2
 80129d8:	4413      	add	r3, r2
 80129da:	881b      	ldrh	r3, [r3, #0]
 80129dc:	b29b      	uxth	r3, r3
 80129de:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80129e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80129e6:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 80129ea:	687a      	ldr	r2, [r7, #4]
 80129ec:	683b      	ldr	r3, [r7, #0]
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	009b      	lsls	r3, r3, #2
 80129f2:	441a      	add	r2, r3
 80129f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 80129f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80129fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	699a      	ldr	r2, [r3, #24]
 8012a10:	683b      	ldr	r3, [r7, #0]
 8012a12:	691b      	ldr	r3, [r3, #16]
 8012a14:	429a      	cmp	r2, r3
 8012a16:	d907      	bls.n	8012a28 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	699a      	ldr	r2, [r3, #24]
 8012a1c:	683b      	ldr	r3, [r7, #0]
 8012a1e:	691b      	ldr	r3, [r3, #16]
 8012a20:	1ad2      	subs	r2, r2, r3
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	619a      	str	r2, [r3, #24]
 8012a26:	e054      	b.n	8012ad2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	619a      	str	r2, [r3, #24]
 8012a2e:	e050      	b.n	8012ad2 <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012a30:	683b      	ldr	r3, [r7, #0]
 8012a32:	78db      	ldrb	r3, [r3, #3]
 8012a34:	2b02      	cmp	r3, #2
 8012a36:	d142      	bne.n	8012abe <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	69db      	ldr	r3, [r3, #28]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d048      	beq.n	8012ad2 <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8012a40:	687a      	ldr	r2, [r7, #4]
 8012a42:	683b      	ldr	r3, [r7, #0]
 8012a44:	781b      	ldrb	r3, [r3, #0]
 8012a46:	009b      	lsls	r3, r3, #2
 8012a48:	4413      	add	r3, r2
 8012a4a:	881b      	ldrh	r3, [r3, #0]
 8012a4c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012a50:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d005      	beq.n	8012a68 <USB_EPStartXfer+0xa96>
 8012a5c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d10b      	bne.n	8012a80 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012a68:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d12e      	bne.n	8012ad2 <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8012a74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8012a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d128      	bne.n	8012ad2 <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	781b      	ldrb	r3, [r3, #0]
 8012a86:	009b      	lsls	r3, r3, #2
 8012a88:	4413      	add	r3, r2
 8012a8a:	881b      	ldrh	r3, [r3, #0]
 8012a8c:	b29b      	uxth	r3, r3
 8012a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012a92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012a96:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8012a9a:	687a      	ldr	r2, [r7, #4]
 8012a9c:	683b      	ldr	r3, [r7, #0]
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	441a      	add	r2, r3
 8012aa4:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8012aa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012aac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012ab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012ab4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	8013      	strh	r3, [r2, #0]
 8012abc:	e009      	b.n	8012ad2 <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	78db      	ldrb	r3, [r3, #3]
 8012ac2:	2b01      	cmp	r3, #1
 8012ac4:	d103      	bne.n	8012ace <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	2200      	movs	r2, #0
 8012aca:	619a      	str	r2, [r3, #24]
 8012acc:	e001      	b.n	8012ad2 <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8012ace:	2301      	movs	r3, #1
 8012ad0:	e02a      	b.n	8012b28 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012ad2:	687a      	ldr	r2, [r7, #4]
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	781b      	ldrb	r3, [r3, #0]
 8012ad8:	009b      	lsls	r3, r3, #2
 8012ada:	4413      	add	r3, r2
 8012adc:	881b      	ldrh	r3, [r3, #0]
 8012ade:	b29b      	uxth	r3, r3
 8012ae0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012ae4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ae8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012aec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012af0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012af4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012af8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012afc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012b00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8012b04:	687a      	ldr	r2, [r7, #4]
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	009b      	lsls	r3, r3, #2
 8012b0c:	441a      	add	r2, r3
 8012b0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8012b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b22:	b29b      	uxth	r3, r3
 8012b24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012b26:	2300      	movs	r3, #0
}
 8012b28:	4618      	mov	r0, r3
 8012b2a:	37b0      	adds	r7, #176	@ 0xb0
 8012b2c:	46bd      	mov	sp, r7
 8012b2e:	bd80      	pop	{r7, pc}

08012b30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
 8012b38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	785b      	ldrb	r3, [r3, #1]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d020      	beq.n	8012b84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8012b42:	687a      	ldr	r2, [r7, #4]
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	781b      	ldrb	r3, [r3, #0]
 8012b48:	009b      	lsls	r3, r3, #2
 8012b4a:	4413      	add	r3, r2
 8012b4c:	881b      	ldrh	r3, [r3, #0]
 8012b4e:	b29b      	uxth	r3, r3
 8012b50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012b54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012b58:	81bb      	strh	r3, [r7, #12]
 8012b5a:	89bb      	ldrh	r3, [r7, #12]
 8012b5c:	f083 0310 	eor.w	r3, r3, #16
 8012b60:	81bb      	strh	r3, [r7, #12]
 8012b62:	687a      	ldr	r2, [r7, #4]
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	781b      	ldrb	r3, [r3, #0]
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	441a      	add	r2, r3
 8012b6c:	89bb      	ldrh	r3, [r7, #12]
 8012b6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012b72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012b76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	8013      	strh	r3, [r2, #0]
 8012b82:	e01f      	b.n	8012bc4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8012b84:	687a      	ldr	r2, [r7, #4]
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	009b      	lsls	r3, r3, #2
 8012b8c:	4413      	add	r3, r2
 8012b8e:	881b      	ldrh	r3, [r3, #0]
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012b9a:	81fb      	strh	r3, [r7, #14]
 8012b9c:	89fb      	ldrh	r3, [r7, #14]
 8012b9e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012ba2:	81fb      	strh	r3, [r7, #14]
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	781b      	ldrb	r3, [r3, #0]
 8012baa:	009b      	lsls	r3, r3, #2
 8012bac:	441a      	add	r2, r3
 8012bae:	89fb      	ldrh	r3, [r7, #14]
 8012bb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012bb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012bb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012bc0:	b29b      	uxth	r3, r3
 8012bc2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012bc4:	2300      	movs	r3, #0
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	3714      	adds	r7, #20
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr

08012bd2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012bd2:	b480      	push	{r7}
 8012bd4:	b087      	sub	sp, #28
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
 8012bda:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	785b      	ldrb	r3, [r3, #1]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d04c      	beq.n	8012c7e <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012be4:	687a      	ldr	r2, [r7, #4]
 8012be6:	683b      	ldr	r3, [r7, #0]
 8012be8:	781b      	ldrb	r3, [r3, #0]
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	4413      	add	r3, r2
 8012bee:	881b      	ldrh	r3, [r3, #0]
 8012bf0:	823b      	strh	r3, [r7, #16]
 8012bf2:	8a3b      	ldrh	r3, [r7, #16]
 8012bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d01b      	beq.n	8012c34 <USB_EPClearStall+0x62>
 8012bfc:	687a      	ldr	r2, [r7, #4]
 8012bfe:	683b      	ldr	r3, [r7, #0]
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	4413      	add	r3, r2
 8012c06:	881b      	ldrh	r3, [r3, #0]
 8012c08:	b29b      	uxth	r3, r3
 8012c0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012c12:	81fb      	strh	r3, [r7, #14]
 8012c14:	687a      	ldr	r2, [r7, #4]
 8012c16:	683b      	ldr	r3, [r7, #0]
 8012c18:	781b      	ldrb	r3, [r3, #0]
 8012c1a:	009b      	lsls	r3, r3, #2
 8012c1c:	441a      	add	r2, r3
 8012c1e:	89fb      	ldrh	r3, [r7, #14]
 8012c20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	78db      	ldrb	r3, [r3, #3]
 8012c38:	2b01      	cmp	r3, #1
 8012c3a:	d06c      	beq.n	8012d16 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012c3c:	687a      	ldr	r2, [r7, #4]
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	009b      	lsls	r3, r3, #2
 8012c44:	4413      	add	r3, r2
 8012c46:	881b      	ldrh	r3, [r3, #0]
 8012c48:	b29b      	uxth	r3, r3
 8012c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012c52:	81bb      	strh	r3, [r7, #12]
 8012c54:	89bb      	ldrh	r3, [r7, #12]
 8012c56:	f083 0320 	eor.w	r3, r3, #32
 8012c5a:	81bb      	strh	r3, [r7, #12]
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	683b      	ldr	r3, [r7, #0]
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	009b      	lsls	r3, r3, #2
 8012c64:	441a      	add	r2, r3
 8012c66:	89bb      	ldrh	r3, [r7, #12]
 8012c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012c70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c78:	b29b      	uxth	r3, r3
 8012c7a:	8013      	strh	r3, [r2, #0]
 8012c7c:	e04b      	b.n	8012d16 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	4413      	add	r3, r2
 8012c88:	881b      	ldrh	r3, [r3, #0]
 8012c8a:	82fb      	strh	r3, [r7, #22]
 8012c8c:	8afb      	ldrh	r3, [r7, #22]
 8012c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d01b      	beq.n	8012cce <USB_EPClearStall+0xfc>
 8012c96:	687a      	ldr	r2, [r7, #4]
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	009b      	lsls	r3, r3, #2
 8012c9e:	4413      	add	r3, r2
 8012ca0:	881b      	ldrh	r3, [r3, #0]
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8012ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012cac:	82bb      	strh	r3, [r7, #20]
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	683b      	ldr	r3, [r7, #0]
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	009b      	lsls	r3, r3, #2
 8012cb6:	441a      	add	r2, r3
 8012cb8:	8abb      	ldrh	r3, [r7, #20]
 8012cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012cc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8012cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	683b      	ldr	r3, [r7, #0]
 8012cd2:	781b      	ldrb	r3, [r3, #0]
 8012cd4:	009b      	lsls	r3, r3, #2
 8012cd6:	4413      	add	r3, r2
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8012ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012ce4:	827b      	strh	r3, [r7, #18]
 8012ce6:	8a7b      	ldrh	r3, [r7, #18]
 8012ce8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8012cec:	827b      	strh	r3, [r7, #18]
 8012cee:	8a7b      	ldrh	r3, [r7, #18]
 8012cf0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8012cf4:	827b      	strh	r3, [r7, #18]
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	441a      	add	r2, r3
 8012d00:	8a7b      	ldrh	r3, [r7, #18]
 8012d02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8012d06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8012d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d12:	b29b      	uxth	r3, r3
 8012d14:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8012d16:	2300      	movs	r3, #0
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	371c      	adds	r7, #28
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8012d24:	b480      	push	{r7}
 8012d26:	b083      	sub	sp, #12
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
 8012d2c:	460b      	mov	r3, r1
 8012d2e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8012d30:	78fb      	ldrb	r3, [r7, #3]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d103      	bne.n	8012d3e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2280      	movs	r2, #128	@ 0x80
 8012d3a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8012d3e:	2300      	movs	r3, #0
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	370c      	adds	r7, #12
 8012d44:	46bd      	mov	sp, r7
 8012d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4a:	4770      	bx	lr

08012d4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8012d4c:	b480      	push	{r7}
 8012d4e:	b083      	sub	sp, #12
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d64:	b29a      	uxth	r2, r3
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8012d6c:	2300      	movs	r3, #0
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	370c      	adds	r7, #12
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr

08012d7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8012d7a:	b480      	push	{r7}
 8012d7c:	b085      	sub	sp, #20
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8012d88:	b29b      	uxth	r3, r3
 8012d8a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8012d8c:	68fb      	ldr	r3, [r7, #12]
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3714      	adds	r7, #20
 8012d92:	46bd      	mov	sp, r7
 8012d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d98:	4770      	bx	lr

08012d9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012d9a:	b480      	push	{r7}
 8012d9c:	b08b      	sub	sp, #44	@ 0x2c
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	60f8      	str	r0, [r7, #12]
 8012da2:	60b9      	str	r1, [r7, #8]
 8012da4:	4611      	mov	r1, r2
 8012da6:	461a      	mov	r2, r3
 8012da8:	460b      	mov	r3, r1
 8012daa:	80fb      	strh	r3, [r7, #6]
 8012dac:	4613      	mov	r3, r2
 8012dae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8012db0:	88bb      	ldrh	r3, [r7, #4]
 8012db2:	3301      	adds	r3, #1
 8012db4:	085b      	lsrs	r3, r3, #1
 8012db6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012dc0:	88fa      	ldrh	r2, [r7, #6]
 8012dc2:	697b      	ldr	r3, [r7, #20]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012dca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012dcc:	69bb      	ldr	r3, [r7, #24]
 8012dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8012dd0:	e01b      	b.n	8012e0a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8012dd2:	69fb      	ldr	r3, [r7, #28]
 8012dd4:	781b      	ldrb	r3, [r3, #0]
 8012dd6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	3301      	adds	r3, #1
 8012ddc:	781b      	ldrb	r3, [r3, #0]
 8012dde:	021b      	lsls	r3, r3, #8
 8012de0:	b21a      	sxth	r2, r3
 8012de2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012de6:	4313      	orrs	r3, r2
 8012de8:	b21b      	sxth	r3, r3
 8012dea:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8012dec:	6a3b      	ldr	r3, [r7, #32]
 8012dee:	8a7a      	ldrh	r2, [r7, #18]
 8012df0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8012df2:	6a3b      	ldr	r3, [r7, #32]
 8012df4:	3302      	adds	r3, #2
 8012df6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	3301      	adds	r3, #1
 8012e02:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e06:	3b01      	subs	r3, #1
 8012e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d1e0      	bne.n	8012dd2 <USB_WritePMA+0x38>
  }
}
 8012e10:	bf00      	nop
 8012e12:	bf00      	nop
 8012e14:	372c      	adds	r7, #44	@ 0x2c
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr

08012e1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8012e1e:	b480      	push	{r7}
 8012e20:	b08b      	sub	sp, #44	@ 0x2c
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	60f8      	str	r0, [r7, #12]
 8012e26:	60b9      	str	r1, [r7, #8]
 8012e28:	4611      	mov	r1, r2
 8012e2a:	461a      	mov	r2, r3
 8012e2c:	460b      	mov	r3, r1
 8012e2e:	80fb      	strh	r3, [r7, #6]
 8012e30:	4613      	mov	r3, r2
 8012e32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8012e34:	88bb      	ldrh	r3, [r7, #4]
 8012e36:	085b      	lsrs	r3, r3, #1
 8012e38:	b29b      	uxth	r3, r3
 8012e3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8012e44:	88fa      	ldrh	r2, [r7, #6]
 8012e46:	697b      	ldr	r3, [r7, #20]
 8012e48:	4413      	add	r3, r2
 8012e4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8012e4e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e54:	e018      	b.n	8012e88 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8012e56:	6a3b      	ldr	r3, [r7, #32]
 8012e58:	881b      	ldrh	r3, [r3, #0]
 8012e5a:	b29b      	uxth	r3, r3
 8012e5c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8012e5e:	6a3b      	ldr	r3, [r7, #32]
 8012e60:	3302      	adds	r3, #2
 8012e62:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	b2da      	uxtb	r2, r3
 8012e68:	69fb      	ldr	r3, [r7, #28]
 8012e6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	0a1b      	lsrs	r3, r3, #8
 8012e76:	b2da      	uxtb	r2, r3
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8012e7c:	69fb      	ldr	r3, [r7, #28]
 8012e7e:	3301      	adds	r3, #1
 8012e80:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8012e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e84:	3b01      	subs	r3, #1
 8012e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8012e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d1e3      	bne.n	8012e56 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8012e8e:	88bb      	ldrh	r3, [r7, #4]
 8012e90:	f003 0301 	and.w	r3, r3, #1
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d007      	beq.n	8012eaa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8012e9a:	6a3b      	ldr	r3, [r7, #32]
 8012e9c:	881b      	ldrh	r3, [r3, #0]
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8012ea2:	693b      	ldr	r3, [r7, #16]
 8012ea4:	b2da      	uxtb	r2, r3
 8012ea6:	69fb      	ldr	r3, [r7, #28]
 8012ea8:	701a      	strb	r2, [r3, #0]
  }
}
 8012eaa:	bf00      	nop
 8012eac:	372c      	adds	r7, #44	@ 0x2c
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr
	...

08012eb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012ec4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012ec8:	f006 fa64 	bl	8019394 <USBD_static_malloc>
 8012ecc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d109      	bne.n	8012ee8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	32b0      	adds	r2, #176	@ 0xb0
 8012ede:	2100      	movs	r1, #0
 8012ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012ee4:	2302      	movs	r3, #2
 8012ee6:	e0d4      	b.n	8013092 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012ee8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012eec:	2100      	movs	r1, #0
 8012eee:	68f8      	ldr	r0, [r7, #12]
 8012ef0:	f008 fc6f 	bl	801b7d2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	32b0      	adds	r2, #176	@ 0xb0
 8012efe:	68f9      	ldr	r1, [r7, #12]
 8012f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	32b0      	adds	r2, #176	@ 0xb0
 8012f0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	7c1b      	ldrb	r3, [r3, #16]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d138      	bne.n	8012f92 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012f20:	4b5e      	ldr	r3, [pc, #376]	@ (801309c <USBD_CDC_Init+0x1e4>)
 8012f22:	7819      	ldrb	r1, [r3, #0]
 8012f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012f28:	2202      	movs	r2, #2
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f006 f8d9 	bl	80190e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012f30:	4b5a      	ldr	r3, [pc, #360]	@ (801309c <USBD_CDC_Init+0x1e4>)
 8012f32:	781b      	ldrb	r3, [r3, #0]
 8012f34:	f003 020f 	and.w	r2, r3, #15
 8012f38:	6879      	ldr	r1, [r7, #4]
 8012f3a:	4613      	mov	r3, r2
 8012f3c:	009b      	lsls	r3, r3, #2
 8012f3e:	4413      	add	r3, r2
 8012f40:	009b      	lsls	r3, r3, #2
 8012f42:	440b      	add	r3, r1
 8012f44:	3324      	adds	r3, #36	@ 0x24
 8012f46:	2201      	movs	r2, #1
 8012f48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012f4a:	4b55      	ldr	r3, [pc, #340]	@ (80130a0 <USBD_CDC_Init+0x1e8>)
 8012f4c:	7819      	ldrb	r1, [r3, #0]
 8012f4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012f52:	2202      	movs	r2, #2
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f006 f8c4 	bl	80190e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012f5a:	4b51      	ldr	r3, [pc, #324]	@ (80130a0 <USBD_CDC_Init+0x1e8>)
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	f003 020f 	and.w	r2, r3, #15
 8012f62:	6879      	ldr	r1, [r7, #4]
 8012f64:	4613      	mov	r3, r2
 8012f66:	009b      	lsls	r3, r3, #2
 8012f68:	4413      	add	r3, r2
 8012f6a:	009b      	lsls	r3, r3, #2
 8012f6c:	440b      	add	r3, r1
 8012f6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012f72:	2201      	movs	r2, #1
 8012f74:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012f76:	4b4b      	ldr	r3, [pc, #300]	@ (80130a4 <USBD_CDC_Init+0x1ec>)
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	f003 020f 	and.w	r2, r3, #15
 8012f7e:	6879      	ldr	r1, [r7, #4]
 8012f80:	4613      	mov	r3, r2
 8012f82:	009b      	lsls	r3, r3, #2
 8012f84:	4413      	add	r3, r2
 8012f86:	009b      	lsls	r3, r3, #2
 8012f88:	440b      	add	r3, r1
 8012f8a:	3326      	adds	r3, #38	@ 0x26
 8012f8c:	2210      	movs	r2, #16
 8012f8e:	801a      	strh	r2, [r3, #0]
 8012f90:	e035      	b.n	8012ffe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012f92:	4b42      	ldr	r3, [pc, #264]	@ (801309c <USBD_CDC_Init+0x1e4>)
 8012f94:	7819      	ldrb	r1, [r3, #0]
 8012f96:	2340      	movs	r3, #64	@ 0x40
 8012f98:	2202      	movs	r2, #2
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f006 f8a1 	bl	80190e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012fa0:	4b3e      	ldr	r3, [pc, #248]	@ (801309c <USBD_CDC_Init+0x1e4>)
 8012fa2:	781b      	ldrb	r3, [r3, #0]
 8012fa4:	f003 020f 	and.w	r2, r3, #15
 8012fa8:	6879      	ldr	r1, [r7, #4]
 8012faa:	4613      	mov	r3, r2
 8012fac:	009b      	lsls	r3, r3, #2
 8012fae:	4413      	add	r3, r2
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	440b      	add	r3, r1
 8012fb4:	3324      	adds	r3, #36	@ 0x24
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012fba:	4b39      	ldr	r3, [pc, #228]	@ (80130a0 <USBD_CDC_Init+0x1e8>)
 8012fbc:	7819      	ldrb	r1, [r3, #0]
 8012fbe:	2340      	movs	r3, #64	@ 0x40
 8012fc0:	2202      	movs	r2, #2
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f006 f88d 	bl	80190e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012fc8:	4b35      	ldr	r3, [pc, #212]	@ (80130a0 <USBD_CDC_Init+0x1e8>)
 8012fca:	781b      	ldrb	r3, [r3, #0]
 8012fcc:	f003 020f 	and.w	r2, r3, #15
 8012fd0:	6879      	ldr	r1, [r7, #4]
 8012fd2:	4613      	mov	r3, r2
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	4413      	add	r3, r2
 8012fd8:	009b      	lsls	r3, r3, #2
 8012fda:	440b      	add	r3, r1
 8012fdc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012fe0:	2201      	movs	r2, #1
 8012fe2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80130a4 <USBD_CDC_Init+0x1ec>)
 8012fe6:	781b      	ldrb	r3, [r3, #0]
 8012fe8:	f003 020f 	and.w	r2, r3, #15
 8012fec:	6879      	ldr	r1, [r7, #4]
 8012fee:	4613      	mov	r3, r2
 8012ff0:	009b      	lsls	r3, r3, #2
 8012ff2:	4413      	add	r3, r2
 8012ff4:	009b      	lsls	r3, r3, #2
 8012ff6:	440b      	add	r3, r1
 8012ff8:	3326      	adds	r3, #38	@ 0x26
 8012ffa:	2210      	movs	r2, #16
 8012ffc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012ffe:	4b29      	ldr	r3, [pc, #164]	@ (80130a4 <USBD_CDC_Init+0x1ec>)
 8013000:	7819      	ldrb	r1, [r3, #0]
 8013002:	2308      	movs	r3, #8
 8013004:	2203      	movs	r2, #3
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f006 f86b 	bl	80190e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801300c:	4b25      	ldr	r3, [pc, #148]	@ (80130a4 <USBD_CDC_Init+0x1ec>)
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	f003 020f 	and.w	r2, r3, #15
 8013014:	6879      	ldr	r1, [r7, #4]
 8013016:	4613      	mov	r3, r2
 8013018:	009b      	lsls	r3, r3, #2
 801301a:	4413      	add	r3, r2
 801301c:	009b      	lsls	r3, r3, #2
 801301e:	440b      	add	r3, r1
 8013020:	3324      	adds	r3, #36	@ 0x24
 8013022:	2201      	movs	r2, #1
 8013024:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2200      	movs	r2, #0
 801302a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013034:	687a      	ldr	r2, [r7, #4]
 8013036:	33b0      	adds	r3, #176	@ 0xb0
 8013038:	009b      	lsls	r3, r3, #2
 801303a:	4413      	add	r3, r2
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013042:	68fb      	ldr	r3, [r7, #12]
 8013044:	2200      	movs	r2, #0
 8013046:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	2200      	movs	r2, #0
 801304e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8013058:	2b00      	cmp	r3, #0
 801305a:	d101      	bne.n	8013060 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801305c:	2302      	movs	r3, #2
 801305e:	e018      	b.n	8013092 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	7c1b      	ldrb	r3, [r3, #16]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d10a      	bne.n	801307e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013068:	4b0d      	ldr	r3, [pc, #52]	@ (80130a0 <USBD_CDC_Init+0x1e8>)
 801306a:	7819      	ldrb	r1, [r3, #0]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013072:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f006 f922 	bl	80192c0 <USBD_LL_PrepareReceive>
 801307c:	e008      	b.n	8013090 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801307e:	4b08      	ldr	r3, [pc, #32]	@ (80130a0 <USBD_CDC_Init+0x1e8>)
 8013080:	7819      	ldrb	r1, [r3, #0]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013088:	2340      	movs	r3, #64	@ 0x40
 801308a:	6878      	ldr	r0, [r7, #4]
 801308c:	f006 f918 	bl	80192c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013090:	2300      	movs	r3, #0
}
 8013092:	4618      	mov	r0, r3
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}
 801309a:	bf00      	nop
 801309c:	200000bf 	.word	0x200000bf
 80130a0:	200000c0 	.word	0x200000c0
 80130a4:	200000c1 	.word	0x200000c1

080130a8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	460b      	mov	r3, r1
 80130b2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80130b4:	4b3a      	ldr	r3, [pc, #232]	@ (80131a0 <USBD_CDC_DeInit+0xf8>)
 80130b6:	781b      	ldrb	r3, [r3, #0]
 80130b8:	4619      	mov	r1, r3
 80130ba:	6878      	ldr	r0, [r7, #4]
 80130bc:	f006 f837 	bl	801912e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80130c0:	4b37      	ldr	r3, [pc, #220]	@ (80131a0 <USBD_CDC_DeInit+0xf8>)
 80130c2:	781b      	ldrb	r3, [r3, #0]
 80130c4:	f003 020f 	and.w	r2, r3, #15
 80130c8:	6879      	ldr	r1, [r7, #4]
 80130ca:	4613      	mov	r3, r2
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	4413      	add	r3, r2
 80130d0:	009b      	lsls	r3, r3, #2
 80130d2:	440b      	add	r3, r1
 80130d4:	3324      	adds	r3, #36	@ 0x24
 80130d6:	2200      	movs	r2, #0
 80130d8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80130da:	4b32      	ldr	r3, [pc, #200]	@ (80131a4 <USBD_CDC_DeInit+0xfc>)
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	4619      	mov	r1, r3
 80130e0:	6878      	ldr	r0, [r7, #4]
 80130e2:	f006 f824 	bl	801912e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80130e6:	4b2f      	ldr	r3, [pc, #188]	@ (80131a4 <USBD_CDC_DeInit+0xfc>)
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	f003 020f 	and.w	r2, r3, #15
 80130ee:	6879      	ldr	r1, [r7, #4]
 80130f0:	4613      	mov	r3, r2
 80130f2:	009b      	lsls	r3, r3, #2
 80130f4:	4413      	add	r3, r2
 80130f6:	009b      	lsls	r3, r3, #2
 80130f8:	440b      	add	r3, r1
 80130fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80130fe:	2200      	movs	r2, #0
 8013100:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8013102:	4b29      	ldr	r3, [pc, #164]	@ (80131a8 <USBD_CDC_DeInit+0x100>)
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	4619      	mov	r1, r3
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f006 f810 	bl	801912e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801310e:	4b26      	ldr	r3, [pc, #152]	@ (80131a8 <USBD_CDC_DeInit+0x100>)
 8013110:	781b      	ldrb	r3, [r3, #0]
 8013112:	f003 020f 	and.w	r2, r3, #15
 8013116:	6879      	ldr	r1, [r7, #4]
 8013118:	4613      	mov	r3, r2
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	4413      	add	r3, r2
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	440b      	add	r3, r1
 8013122:	3324      	adds	r3, #36	@ 0x24
 8013124:	2200      	movs	r2, #0
 8013126:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8013128:	4b1f      	ldr	r3, [pc, #124]	@ (80131a8 <USBD_CDC_DeInit+0x100>)
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	f003 020f 	and.w	r2, r3, #15
 8013130:	6879      	ldr	r1, [r7, #4]
 8013132:	4613      	mov	r3, r2
 8013134:	009b      	lsls	r3, r3, #2
 8013136:	4413      	add	r3, r2
 8013138:	009b      	lsls	r3, r3, #2
 801313a:	440b      	add	r3, r1
 801313c:	3326      	adds	r3, #38	@ 0x26
 801313e:	2200      	movs	r2, #0
 8013140:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	32b0      	adds	r2, #176	@ 0xb0
 801314c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d01f      	beq.n	8013194 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801315a:	687a      	ldr	r2, [r7, #4]
 801315c:	33b0      	adds	r3, #176	@ 0xb0
 801315e:	009b      	lsls	r3, r3, #2
 8013160:	4413      	add	r3, r2
 8013162:	685b      	ldr	r3, [r3, #4]
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	32b0      	adds	r2, #176	@ 0xb0
 8013172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013176:	4618      	mov	r0, r3
 8013178:	f006 f91a 	bl	80193b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	32b0      	adds	r2, #176	@ 0xb0
 8013186:	2100      	movs	r1, #0
 8013188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2200      	movs	r2, #0
 8013190:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	3708      	adds	r7, #8
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	200000bf 	.word	0x200000bf
 80131a4:	200000c0 	.word	0x200000c0
 80131a8:	200000c1 	.word	0x200000c1

080131ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80131ac:	b580      	push	{r7, lr}
 80131ae:	b086      	sub	sp, #24
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	6078      	str	r0, [r7, #4]
 80131b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	32b0      	adds	r2, #176	@ 0xb0
 80131c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131c4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80131c6:	2300      	movs	r3, #0
 80131c8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80131ca:	2300      	movs	r3, #0
 80131cc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80131ce:	2300      	movs	r3, #0
 80131d0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80131d2:	693b      	ldr	r3, [r7, #16]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d101      	bne.n	80131dc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80131d8:	2303      	movs	r3, #3
 80131da:	e0bf      	b.n	801335c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d050      	beq.n	801328a <USBD_CDC_Setup+0xde>
 80131e8:	2b20      	cmp	r3, #32
 80131ea:	f040 80af 	bne.w	801334c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	88db      	ldrh	r3, [r3, #6]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d03a      	beq.n	801326c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	781b      	ldrb	r3, [r3, #0]
 80131fa:	b25b      	sxtb	r3, r3
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	da1b      	bge.n	8013238 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	33b0      	adds	r3, #176	@ 0xb0
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	4413      	add	r3, r2
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	689b      	ldr	r3, [r3, #8]
 8013212:	683a      	ldr	r2, [r7, #0]
 8013214:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013216:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013218:	683a      	ldr	r2, [r7, #0]
 801321a:	88d2      	ldrh	r2, [r2, #6]
 801321c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	88db      	ldrh	r3, [r3, #6]
 8013222:	2b07      	cmp	r3, #7
 8013224:	bf28      	it	cs
 8013226:	2307      	movcs	r3, #7
 8013228:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	89fa      	ldrh	r2, [r7, #14]
 801322e:	4619      	mov	r1, r3
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f001 fd2b 	bl	8014c8c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013236:	e090      	b.n	801335a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	785a      	ldrb	r2, [r3, #1]
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	88db      	ldrh	r3, [r3, #6]
 8013246:	2b3f      	cmp	r3, #63	@ 0x3f
 8013248:	d803      	bhi.n	8013252 <USBD_CDC_Setup+0xa6>
 801324a:	683b      	ldr	r3, [r7, #0]
 801324c:	88db      	ldrh	r3, [r3, #6]
 801324e:	b2da      	uxtb	r2, r3
 8013250:	e000      	b.n	8013254 <USBD_CDC_Setup+0xa8>
 8013252:	2240      	movs	r2, #64	@ 0x40
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801325a:	6939      	ldr	r1, [r7, #16]
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8013262:	461a      	mov	r2, r3
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f001 fd3d 	bl	8014ce4 <USBD_CtlPrepareRx>
      break;
 801326a:	e076      	b.n	801335a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013272:	687a      	ldr	r2, [r7, #4]
 8013274:	33b0      	adds	r3, #176	@ 0xb0
 8013276:	009b      	lsls	r3, r3, #2
 8013278:	4413      	add	r3, r2
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	689b      	ldr	r3, [r3, #8]
 801327e:	683a      	ldr	r2, [r7, #0]
 8013280:	7850      	ldrb	r0, [r2, #1]
 8013282:	2200      	movs	r2, #0
 8013284:	6839      	ldr	r1, [r7, #0]
 8013286:	4798      	blx	r3
      break;
 8013288:	e067      	b.n	801335a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	785b      	ldrb	r3, [r3, #1]
 801328e:	2b0b      	cmp	r3, #11
 8013290:	d851      	bhi.n	8013336 <USBD_CDC_Setup+0x18a>
 8013292:	a201      	add	r2, pc, #4	@ (adr r2, 8013298 <USBD_CDC_Setup+0xec>)
 8013294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013298:	080132c9 	.word	0x080132c9
 801329c:	08013345 	.word	0x08013345
 80132a0:	08013337 	.word	0x08013337
 80132a4:	08013337 	.word	0x08013337
 80132a8:	08013337 	.word	0x08013337
 80132ac:	08013337 	.word	0x08013337
 80132b0:	08013337 	.word	0x08013337
 80132b4:	08013337 	.word	0x08013337
 80132b8:	08013337 	.word	0x08013337
 80132bc:	08013337 	.word	0x08013337
 80132c0:	080132f3 	.word	0x080132f3
 80132c4:	0801331d 	.word	0x0801331d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	2b03      	cmp	r3, #3
 80132d2:	d107      	bne.n	80132e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80132d4:	f107 030a 	add.w	r3, r7, #10
 80132d8:	2202      	movs	r2, #2
 80132da:	4619      	mov	r1, r3
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f001 fcd5 	bl	8014c8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80132e2:	e032      	b.n	801334a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80132e4:	6839      	ldr	r1, [r7, #0]
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f001 fc53 	bl	8014b92 <USBD_CtlError>
            ret = USBD_FAIL;
 80132ec:	2303      	movs	r3, #3
 80132ee:	75fb      	strb	r3, [r7, #23]
          break;
 80132f0:	e02b      	b.n	801334a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132f8:	b2db      	uxtb	r3, r3
 80132fa:	2b03      	cmp	r3, #3
 80132fc:	d107      	bne.n	801330e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80132fe:	f107 030d 	add.w	r3, r7, #13
 8013302:	2201      	movs	r2, #1
 8013304:	4619      	mov	r1, r3
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f001 fcc0 	bl	8014c8c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801330c:	e01d      	b.n	801334a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801330e:	6839      	ldr	r1, [r7, #0]
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f001 fc3e 	bl	8014b92 <USBD_CtlError>
            ret = USBD_FAIL;
 8013316:	2303      	movs	r3, #3
 8013318:	75fb      	strb	r3, [r7, #23]
          break;
 801331a:	e016      	b.n	801334a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013322:	b2db      	uxtb	r3, r3
 8013324:	2b03      	cmp	r3, #3
 8013326:	d00f      	beq.n	8013348 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013328:	6839      	ldr	r1, [r7, #0]
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f001 fc31 	bl	8014b92 <USBD_CtlError>
            ret = USBD_FAIL;
 8013330:	2303      	movs	r3, #3
 8013332:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013334:	e008      	b.n	8013348 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013336:	6839      	ldr	r1, [r7, #0]
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f001 fc2a 	bl	8014b92 <USBD_CtlError>
          ret = USBD_FAIL;
 801333e:	2303      	movs	r3, #3
 8013340:	75fb      	strb	r3, [r7, #23]
          break;
 8013342:	e002      	b.n	801334a <USBD_CDC_Setup+0x19e>
          break;
 8013344:	bf00      	nop
 8013346:	e008      	b.n	801335a <USBD_CDC_Setup+0x1ae>
          break;
 8013348:	bf00      	nop
      }
      break;
 801334a:	e006      	b.n	801335a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801334c:	6839      	ldr	r1, [r7, #0]
 801334e:	6878      	ldr	r0, [r7, #4]
 8013350:	f001 fc1f 	bl	8014b92 <USBD_CtlError>
      ret = USBD_FAIL;
 8013354:	2303      	movs	r3, #3
 8013356:	75fb      	strb	r3, [r7, #23]
      break;
 8013358:	bf00      	nop
  }

  return (uint8_t)ret;
 801335a:	7dfb      	ldrb	r3, [r7, #23]
}
 801335c:	4618      	mov	r0, r3
 801335e:	3718      	adds	r7, #24
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}

08013364 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013364:	b580      	push	{r7, lr}
 8013366:	b084      	sub	sp, #16
 8013368:	af00      	add	r7, sp, #0
 801336a:	6078      	str	r0, [r7, #4]
 801336c:	460b      	mov	r3, r1
 801336e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013376:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	32b0      	adds	r2, #176	@ 0xb0
 8013382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d101      	bne.n	801338e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801338a:	2303      	movs	r3, #3
 801338c:	e065      	b.n	801345a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	32b0      	adds	r2, #176	@ 0xb0
 8013398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801339c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801339e:	78fb      	ldrb	r3, [r7, #3]
 80133a0:	f003 020f 	and.w	r2, r3, #15
 80133a4:	6879      	ldr	r1, [r7, #4]
 80133a6:	4613      	mov	r3, r2
 80133a8:	009b      	lsls	r3, r3, #2
 80133aa:	4413      	add	r3, r2
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	440b      	add	r3, r1
 80133b0:	3318      	adds	r3, #24
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d02f      	beq.n	8013418 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80133b8:	78fb      	ldrb	r3, [r7, #3]
 80133ba:	f003 020f 	and.w	r2, r3, #15
 80133be:	6879      	ldr	r1, [r7, #4]
 80133c0:	4613      	mov	r3, r2
 80133c2:	009b      	lsls	r3, r3, #2
 80133c4:	4413      	add	r3, r2
 80133c6:	009b      	lsls	r3, r3, #2
 80133c8:	440b      	add	r3, r1
 80133ca:	3318      	adds	r3, #24
 80133cc:	681a      	ldr	r2, [r3, #0]
 80133ce:	78fb      	ldrb	r3, [r7, #3]
 80133d0:	f003 010f 	and.w	r1, r3, #15
 80133d4:	68f8      	ldr	r0, [r7, #12]
 80133d6:	460b      	mov	r3, r1
 80133d8:	009b      	lsls	r3, r3, #2
 80133da:	440b      	add	r3, r1
 80133dc:	00db      	lsls	r3, r3, #3
 80133de:	4403      	add	r3, r0
 80133e0:	3320      	adds	r3, #32
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80133e8:	fb01 f303 	mul.w	r3, r1, r3
 80133ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d112      	bne.n	8013418 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80133f2:	78fb      	ldrb	r3, [r7, #3]
 80133f4:	f003 020f 	and.w	r2, r3, #15
 80133f8:	6879      	ldr	r1, [r7, #4]
 80133fa:	4613      	mov	r3, r2
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	4413      	add	r3, r2
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	440b      	add	r3, r1
 8013404:	3318      	adds	r3, #24
 8013406:	2200      	movs	r2, #0
 8013408:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801340a:	78f9      	ldrb	r1, [r7, #3]
 801340c:	2300      	movs	r3, #0
 801340e:	2200      	movs	r2, #0
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f005 ff34 	bl	801927e <USBD_LL_Transmit>
 8013416:	e01f      	b.n	8013458 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	2200      	movs	r2, #0
 801341c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	33b0      	adds	r3, #176	@ 0xb0
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	4413      	add	r3, r2
 801342e:	685b      	ldr	r3, [r3, #4]
 8013430:	691b      	ldr	r3, [r3, #16]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d010      	beq.n	8013458 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801343c:	687a      	ldr	r2, [r7, #4]
 801343e:	33b0      	adds	r3, #176	@ 0xb0
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	4413      	add	r3, r2
 8013444:	685b      	ldr	r3, [r3, #4]
 8013446:	691b      	ldr	r3, [r3, #16]
 8013448:	68ba      	ldr	r2, [r7, #8]
 801344a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801344e:	68ba      	ldr	r2, [r7, #8]
 8013450:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8013454:	78fa      	ldrb	r2, [r7, #3]
 8013456:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013458:	2300      	movs	r3, #0
}
 801345a:	4618      	mov	r0, r3
 801345c:	3710      	adds	r7, #16
 801345e:	46bd      	mov	sp, r7
 8013460:	bd80      	pop	{r7, pc}

08013462 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013462:	b580      	push	{r7, lr}
 8013464:	b084      	sub	sp, #16
 8013466:	af00      	add	r7, sp, #0
 8013468:	6078      	str	r0, [r7, #4]
 801346a:	460b      	mov	r3, r1
 801346c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	32b0      	adds	r2, #176	@ 0xb0
 8013478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801347c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	32b0      	adds	r2, #176	@ 0xb0
 8013488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d101      	bne.n	8013494 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013490:	2303      	movs	r3, #3
 8013492:	e01a      	b.n	80134ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013494:	78fb      	ldrb	r3, [r7, #3]
 8013496:	4619      	mov	r1, r3
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f005 ff32 	bl	8019302 <USBD_LL_GetRxDataSize>
 801349e:	4602      	mov	r2, r0
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134ac:	687a      	ldr	r2, [r7, #4]
 80134ae:	33b0      	adds	r3, #176	@ 0xb0
 80134b0:	009b      	lsls	r3, r3, #2
 80134b2:	4413      	add	r3, r2
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	68fa      	ldr	r2, [r7, #12]
 80134ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80134be:	68fa      	ldr	r2, [r7, #12]
 80134c0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80134c4:	4611      	mov	r1, r2
 80134c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80134c8:	2300      	movs	r3, #0
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}

080134d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80134d2:	b580      	push	{r7, lr}
 80134d4:	b084      	sub	sp, #16
 80134d6:	af00      	add	r7, sp, #0
 80134d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	32b0      	adds	r2, #176	@ 0xb0
 80134e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d101      	bne.n	80134f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80134f0:	2303      	movs	r3, #3
 80134f2:	e024      	b.n	801353e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	33b0      	adds	r3, #176	@ 0xb0
 80134fe:	009b      	lsls	r3, r3, #2
 8013500:	4413      	add	r3, r2
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d019      	beq.n	801353c <USBD_CDC_EP0_RxReady+0x6a>
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801350e:	2bff      	cmp	r3, #255	@ 0xff
 8013510:	d014      	beq.n	801353c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	33b0      	adds	r3, #176	@ 0xb0
 801351c:	009b      	lsls	r3, r3, #2
 801351e:	4413      	add	r3, r2
 8013520:	685b      	ldr	r3, [r3, #4]
 8013522:	689b      	ldr	r3, [r3, #8]
 8013524:	68fa      	ldr	r2, [r7, #12]
 8013526:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801352a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801352c:	68fa      	ldr	r2, [r7, #12]
 801352e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013532:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	22ff      	movs	r2, #255	@ 0xff
 8013538:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801353c:	2300      	movs	r3, #0
}
 801353e:	4618      	mov	r0, r3
 8013540:	3710      	adds	r7, #16
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
	...

08013548 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b086      	sub	sp, #24
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013550:	2182      	movs	r1, #130	@ 0x82
 8013552:	4818      	ldr	r0, [pc, #96]	@ (80135b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013554:	f000 fcbd 	bl	8013ed2 <USBD_GetEpDesc>
 8013558:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801355a:	2101      	movs	r1, #1
 801355c:	4815      	ldr	r0, [pc, #84]	@ (80135b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801355e:	f000 fcb8 	bl	8013ed2 <USBD_GetEpDesc>
 8013562:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013564:	2181      	movs	r1, #129	@ 0x81
 8013566:	4813      	ldr	r0, [pc, #76]	@ (80135b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013568:	f000 fcb3 	bl	8013ed2 <USBD_GetEpDesc>
 801356c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d002      	beq.n	801357a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	2210      	movs	r2, #16
 8013578:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801357a:	693b      	ldr	r3, [r7, #16]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d006      	beq.n	801358e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	2200      	movs	r2, #0
 8013584:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013588:	711a      	strb	r2, [r3, #4]
 801358a:	2200      	movs	r2, #0
 801358c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d006      	beq.n	80135a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	2200      	movs	r2, #0
 8013598:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801359c:	711a      	strb	r2, [r3, #4]
 801359e:	2200      	movs	r2, #0
 80135a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2243      	movs	r2, #67	@ 0x43
 80135a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80135a8:	4b02      	ldr	r3, [pc, #8]	@ (80135b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	3718      	adds	r7, #24
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	2000007c 	.word	0x2000007c

080135b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b086      	sub	sp, #24
 80135bc:	af00      	add	r7, sp, #0
 80135be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80135c0:	2182      	movs	r1, #130	@ 0x82
 80135c2:	4818      	ldr	r0, [pc, #96]	@ (8013624 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80135c4:	f000 fc85 	bl	8013ed2 <USBD_GetEpDesc>
 80135c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80135ca:	2101      	movs	r1, #1
 80135cc:	4815      	ldr	r0, [pc, #84]	@ (8013624 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80135ce:	f000 fc80 	bl	8013ed2 <USBD_GetEpDesc>
 80135d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80135d4:	2181      	movs	r1, #129	@ 0x81
 80135d6:	4813      	ldr	r0, [pc, #76]	@ (8013624 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80135d8:	f000 fc7b 	bl	8013ed2 <USBD_GetEpDesc>
 80135dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80135de:	697b      	ldr	r3, [r7, #20]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d002      	beq.n	80135ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80135e4:	697b      	ldr	r3, [r7, #20]
 80135e6:	2210      	movs	r2, #16
 80135e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d006      	beq.n	80135fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	2200      	movs	r2, #0
 80135f4:	711a      	strb	r2, [r3, #4]
 80135f6:	2200      	movs	r2, #0
 80135f8:	f042 0202 	orr.w	r2, r2, #2
 80135fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d006      	beq.n	8013612 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2200      	movs	r2, #0
 8013608:	711a      	strb	r2, [r3, #4]
 801360a:	2200      	movs	r2, #0
 801360c:	f042 0202 	orr.w	r2, r2, #2
 8013610:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2243      	movs	r2, #67	@ 0x43
 8013616:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013618:	4b02      	ldr	r3, [pc, #8]	@ (8013624 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801361a:	4618      	mov	r0, r3
 801361c:	3718      	adds	r7, #24
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	2000007c 	.word	0x2000007c

08013628 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013628:	b580      	push	{r7, lr}
 801362a:	b086      	sub	sp, #24
 801362c:	af00      	add	r7, sp, #0
 801362e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013630:	2182      	movs	r1, #130	@ 0x82
 8013632:	4818      	ldr	r0, [pc, #96]	@ (8013694 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013634:	f000 fc4d 	bl	8013ed2 <USBD_GetEpDesc>
 8013638:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801363a:	2101      	movs	r1, #1
 801363c:	4815      	ldr	r0, [pc, #84]	@ (8013694 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801363e:	f000 fc48 	bl	8013ed2 <USBD_GetEpDesc>
 8013642:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013644:	2181      	movs	r1, #129	@ 0x81
 8013646:	4813      	ldr	r0, [pc, #76]	@ (8013694 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013648:	f000 fc43 	bl	8013ed2 <USBD_GetEpDesc>
 801364c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d002      	beq.n	801365a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013654:	697b      	ldr	r3, [r7, #20]
 8013656:	2210      	movs	r2, #16
 8013658:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d006      	beq.n	801366e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013660:	693b      	ldr	r3, [r7, #16]
 8013662:	2200      	movs	r2, #0
 8013664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013668:	711a      	strb	r2, [r3, #4]
 801366a:	2200      	movs	r2, #0
 801366c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d006      	beq.n	8013682 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2200      	movs	r2, #0
 8013678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801367c:	711a      	strb	r2, [r3, #4]
 801367e:	2200      	movs	r2, #0
 8013680:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2243      	movs	r2, #67	@ 0x43
 8013686:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013688:	4b02      	ldr	r3, [pc, #8]	@ (8013694 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801368a:	4618      	mov	r0, r3
 801368c:	3718      	adds	r7, #24
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	2000007c 	.word	0x2000007c

08013698 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013698:	b480      	push	{r7}
 801369a:	b083      	sub	sp, #12
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	220a      	movs	r2, #10
 80136a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80136a6:	4b03      	ldr	r3, [pc, #12]	@ (80136b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	370c      	adds	r7, #12
 80136ac:	46bd      	mov	sp, r7
 80136ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b2:	4770      	bx	lr
 80136b4:	20000038 	.word	0x20000038

080136b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80136b8:	b480      	push	{r7}
 80136ba:	b083      	sub	sp, #12
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
 80136c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d101      	bne.n	80136cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80136c8:	2303      	movs	r3, #3
 80136ca:	e009      	b.n	80136e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	33b0      	adds	r3, #176	@ 0xb0
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	4413      	add	r3, r2
 80136da:	683a      	ldr	r2, [r7, #0]
 80136dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80136de:	2300      	movs	r3, #0
}
 80136e0:	4618      	mov	r0, r3
 80136e2:	370c      	adds	r7, #12
 80136e4:	46bd      	mov	sp, r7
 80136e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ea:	4770      	bx	lr

080136ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80136ec:	b480      	push	{r7}
 80136ee:	b087      	sub	sp, #28
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	32b0      	adds	r2, #176	@ 0xb0
 8013702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013706:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013708:	697b      	ldr	r3, [r7, #20]
 801370a:	2b00      	cmp	r3, #0
 801370c:	d101      	bne.n	8013712 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801370e:	2303      	movs	r3, #3
 8013710:	e008      	b.n	8013724 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013712:	697b      	ldr	r3, [r7, #20]
 8013714:	68ba      	ldr	r2, [r7, #8]
 8013716:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	687a      	ldr	r2, [r7, #4]
 801371e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8013722:	2300      	movs	r3, #0
}
 8013724:	4618      	mov	r0, r3
 8013726:	371c      	adds	r7, #28
 8013728:	46bd      	mov	sp, r7
 801372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372e:	4770      	bx	lr

08013730 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013730:	b480      	push	{r7}
 8013732:	b085      	sub	sp, #20
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	32b0      	adds	r2, #176	@ 0xb0
 8013744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013748:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d101      	bne.n	8013754 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013750:	2303      	movs	r3, #3
 8013752:	e004      	b.n	801375e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	683a      	ldr	r2, [r7, #0]
 8013758:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801375c:	2300      	movs	r3, #0
}
 801375e:	4618      	mov	r0, r3
 8013760:	3714      	adds	r7, #20
 8013762:	46bd      	mov	sp, r7
 8013764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013768:	4770      	bx	lr
	...

0801376c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b084      	sub	sp, #16
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	32b0      	adds	r2, #176	@ 0xb0
 801377e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013782:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013784:	2301      	movs	r3, #1
 8013786:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013788:	68bb      	ldr	r3, [r7, #8]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d101      	bne.n	8013792 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801378e:	2303      	movs	r3, #3
 8013790:	e025      	b.n	80137de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8013798:	2b00      	cmp	r3, #0
 801379a:	d11f      	bne.n	80137dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801379c:	68bb      	ldr	r3, [r7, #8]
 801379e:	2201      	movs	r2, #1
 80137a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80137a4:	4b10      	ldr	r3, [pc, #64]	@ (80137e8 <USBD_CDC_TransmitPacket+0x7c>)
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	f003 020f 	and.w	r2, r3, #15
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	4613      	mov	r3, r2
 80137b6:	009b      	lsls	r3, r3, #2
 80137b8:	4413      	add	r3, r2
 80137ba:	009b      	lsls	r3, r3, #2
 80137bc:	4403      	add	r3, r0
 80137be:	3318      	adds	r3, #24
 80137c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80137c2:	4b09      	ldr	r3, [pc, #36]	@ (80137e8 <USBD_CDC_TransmitPacket+0x7c>)
 80137c4:	7819      	ldrb	r1, [r3, #0]
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80137cc:	68bb      	ldr	r3, [r7, #8]
 80137ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f005 fd53 	bl	801927e <USBD_LL_Transmit>

    ret = USBD_OK;
 80137d8:	2300      	movs	r3, #0
 80137da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80137dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3710      	adds	r7, #16
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}
 80137e6:	bf00      	nop
 80137e8:	200000bf 	.word	0x200000bf

080137ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b084      	sub	sp, #16
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	32b0      	adds	r2, #176	@ 0xb0
 80137fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013802:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	32b0      	adds	r2, #176	@ 0xb0
 801380e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d101      	bne.n	801381a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8013816:	2303      	movs	r3, #3
 8013818:	e018      	b.n	801384c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	7c1b      	ldrb	r3, [r3, #16]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d10a      	bne.n	8013838 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013822:	4b0c      	ldr	r3, [pc, #48]	@ (8013854 <USBD_CDC_ReceivePacket+0x68>)
 8013824:	7819      	ldrb	r1, [r3, #0]
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801382c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f005 fd45 	bl	80192c0 <USBD_LL_PrepareReceive>
 8013836:	e008      	b.n	801384a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013838:	4b06      	ldr	r3, [pc, #24]	@ (8013854 <USBD_CDC_ReceivePacket+0x68>)
 801383a:	7819      	ldrb	r1, [r3, #0]
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013842:	2340      	movs	r3, #64	@ 0x40
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f005 fd3b 	bl	80192c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801384a:	2300      	movs	r3, #0
}
 801384c:	4618      	mov	r0, r3
 801384e:	3710      	adds	r7, #16
 8013850:	46bd      	mov	sp, r7
 8013852:	bd80      	pop	{r7, pc}
 8013854:	200000c0 	.word	0x200000c0

08013858 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b086      	sub	sp, #24
 801385c:	af00      	add	r7, sp, #0
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	60b9      	str	r1, [r7, #8]
 8013862:	4613      	mov	r3, r2
 8013864:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d101      	bne.n	8013870 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801386c:	2303      	movs	r3, #3
 801386e:	e01f      	b.n	80138b0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	2200      	movs	r2, #0
 8013874:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	2200      	movs	r2, #0
 801387c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	2200      	movs	r2, #0
 8013884:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d003      	beq.n	8013896 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	68ba      	ldr	r2, [r7, #8]
 8013892:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	2201      	movs	r2, #1
 801389a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	79fa      	ldrb	r2, [r7, #7]
 80138a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80138a4:	68f8      	ldr	r0, [r7, #12]
 80138a6:	f005 fb9f 	bl	8018fe8 <USBD_LL_Init>
 80138aa:	4603      	mov	r3, r0
 80138ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80138ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80138b0:	4618      	mov	r0, r3
 80138b2:	3718      	adds	r7, #24
 80138b4:	46bd      	mov	sp, r7
 80138b6:	bd80      	pop	{r7, pc}

080138b8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80138b8:	b580      	push	{r7, lr}
 80138ba:	b084      	sub	sp, #16
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80138c2:	2300      	movs	r3, #0
 80138c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d101      	bne.n	80138d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80138cc:	2303      	movs	r3, #3
 80138ce:	e025      	b.n	801391c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	683a      	ldr	r2, [r7, #0]
 80138d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	32ae      	adds	r2, #174	@ 0xae
 80138e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d00f      	beq.n	801390c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	32ae      	adds	r2, #174	@ 0xae
 80138f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80138fc:	f107 020e 	add.w	r2, r7, #14
 8013900:	4610      	mov	r0, r2
 8013902:	4798      	blx	r3
 8013904:	4602      	mov	r2, r0
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801391a:	2300      	movs	r3, #0
}
 801391c:	4618      	mov	r0, r3
 801391e:	3710      	adds	r7, #16
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b082      	sub	sp, #8
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f005 fbbd 	bl	80190ac <USBD_LL_Start>
 8013932:	4603      	mov	r3, r0
}
 8013934:	4618      	mov	r0, r3
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801393c:	b480      	push	{r7}
 801393e:	b083      	sub	sp, #12
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013944:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013946:	4618      	mov	r0, r3
 8013948:	370c      	adds	r7, #12
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr

08013952 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013952:	b580      	push	{r7, lr}
 8013954:	b084      	sub	sp, #16
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	460b      	mov	r3, r1
 801395c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801395e:	2300      	movs	r3, #0
 8013960:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013968:	2b00      	cmp	r3, #0
 801396a:	d009      	beq.n	8013980 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	78fa      	ldrb	r2, [r7, #3]
 8013976:	4611      	mov	r1, r2
 8013978:	6878      	ldr	r0, [r7, #4]
 801397a:	4798      	blx	r3
 801397c:	4603      	mov	r3, r0
 801397e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013980:	7bfb      	ldrb	r3, [r7, #15]
}
 8013982:	4618      	mov	r0, r3
 8013984:	3710      	adds	r7, #16
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}

0801398a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801398a:	b580      	push	{r7, lr}
 801398c:	b084      	sub	sp, #16
 801398e:	af00      	add	r7, sp, #0
 8013990:	6078      	str	r0, [r7, #4]
 8013992:	460b      	mov	r3, r1
 8013994:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013996:	2300      	movs	r3, #0
 8013998:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80139a0:	685b      	ldr	r3, [r3, #4]
 80139a2:	78fa      	ldrb	r2, [r7, #3]
 80139a4:	4611      	mov	r1, r2
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	4798      	blx	r3
 80139aa:	4603      	mov	r3, r0
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d001      	beq.n	80139b4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80139b0:	2303      	movs	r3, #3
 80139b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80139b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3710      	adds	r7, #16
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}

080139be <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80139be:	b580      	push	{r7, lr}
 80139c0:	b084      	sub	sp, #16
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
 80139c6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80139ce:	6839      	ldr	r1, [r7, #0]
 80139d0:	4618      	mov	r0, r3
 80139d2:	f001 f8a4 	bl	8014b1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	2201      	movs	r2, #1
 80139da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80139e4:	461a      	mov	r2, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80139f2:	f003 031f 	and.w	r3, r3, #31
 80139f6:	2b02      	cmp	r3, #2
 80139f8:	d01a      	beq.n	8013a30 <USBD_LL_SetupStage+0x72>
 80139fa:	2b02      	cmp	r3, #2
 80139fc:	d822      	bhi.n	8013a44 <USBD_LL_SetupStage+0x86>
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d002      	beq.n	8013a08 <USBD_LL_SetupStage+0x4a>
 8013a02:	2b01      	cmp	r3, #1
 8013a04:	d00a      	beq.n	8013a1c <USBD_LL_SetupStage+0x5e>
 8013a06:	e01d      	b.n	8013a44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013a0e:	4619      	mov	r1, r3
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f000 fad1 	bl	8013fb8 <USBD_StdDevReq>
 8013a16:	4603      	mov	r3, r0
 8013a18:	73fb      	strb	r3, [r7, #15]
      break;
 8013a1a:	e020      	b.n	8013a5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013a22:	4619      	mov	r1, r3
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f000 fb39 	bl	801409c <USBD_StdItfReq>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8013a2e:	e016      	b.n	8013a5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013a36:	4619      	mov	r1, r3
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f000 fb9b 	bl	8014174 <USBD_StdEPReq>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	73fb      	strb	r3, [r7, #15]
      break;
 8013a42:	e00c      	b.n	8013a5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013a4a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013a4e:	b2db      	uxtb	r3, r3
 8013a50:	4619      	mov	r1, r3
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f005 fb8a 	bl	801916c <USBD_LL_StallEP>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8013a5c:	bf00      	nop
  }

  return ret;
 8013a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a60:	4618      	mov	r0, r3
 8013a62:	3710      	adds	r7, #16
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}

08013a68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b086      	sub	sp, #24
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	60f8      	str	r0, [r7, #12]
 8013a70:	460b      	mov	r3, r1
 8013a72:	607a      	str	r2, [r7, #4]
 8013a74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013a76:	2300      	movs	r3, #0
 8013a78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013a7a:	7afb      	ldrb	r3, [r7, #11]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d16e      	bne.n	8013b5e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8013a86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013a8e:	2b03      	cmp	r3, #3
 8013a90:	f040 8098 	bne.w	8013bc4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	689a      	ldr	r2, [r3, #8]
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	68db      	ldr	r3, [r3, #12]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d913      	bls.n	8013ac8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	689a      	ldr	r2, [r3, #8]
 8013aa4:	693b      	ldr	r3, [r7, #16]
 8013aa6:	68db      	ldr	r3, [r3, #12]
 8013aa8:	1ad2      	subs	r2, r2, r3
 8013aaa:	693b      	ldr	r3, [r7, #16]
 8013aac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013aae:	693b      	ldr	r3, [r7, #16]
 8013ab0:	68da      	ldr	r2, [r3, #12]
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	689b      	ldr	r3, [r3, #8]
 8013ab6:	4293      	cmp	r3, r2
 8013ab8:	bf28      	it	cs
 8013aba:	4613      	movcs	r3, r2
 8013abc:	461a      	mov	r2, r3
 8013abe:	6879      	ldr	r1, [r7, #4]
 8013ac0:	68f8      	ldr	r0, [r7, #12]
 8013ac2:	f001 f92c 	bl	8014d1e <USBD_CtlContinueRx>
 8013ac6:	e07d      	b.n	8013bc4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013ace:	f003 031f 	and.w	r3, r3, #31
 8013ad2:	2b02      	cmp	r3, #2
 8013ad4:	d014      	beq.n	8013b00 <USBD_LL_DataOutStage+0x98>
 8013ad6:	2b02      	cmp	r3, #2
 8013ad8:	d81d      	bhi.n	8013b16 <USBD_LL_DataOutStage+0xae>
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d002      	beq.n	8013ae4 <USBD_LL_DataOutStage+0x7c>
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d003      	beq.n	8013aea <USBD_LL_DataOutStage+0x82>
 8013ae2:	e018      	b.n	8013b16 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	75bb      	strb	r3, [r7, #22]
            break;
 8013ae8:	e018      	b.n	8013b1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013af0:	b2db      	uxtb	r3, r3
 8013af2:	4619      	mov	r1, r3
 8013af4:	68f8      	ldr	r0, [r7, #12]
 8013af6:	f000 f9d2 	bl	8013e9e <USBD_CoreFindIF>
 8013afa:	4603      	mov	r3, r0
 8013afc:	75bb      	strb	r3, [r7, #22]
            break;
 8013afe:	e00d      	b.n	8013b1c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013b06:	b2db      	uxtb	r3, r3
 8013b08:	4619      	mov	r1, r3
 8013b0a:	68f8      	ldr	r0, [r7, #12]
 8013b0c:	f000 f9d4 	bl	8013eb8 <USBD_CoreFindEP>
 8013b10:	4603      	mov	r3, r0
 8013b12:	75bb      	strb	r3, [r7, #22]
            break;
 8013b14:	e002      	b.n	8013b1c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013b16:	2300      	movs	r3, #0
 8013b18:	75bb      	strb	r3, [r7, #22]
            break;
 8013b1a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013b1c:	7dbb      	ldrb	r3, [r7, #22]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d119      	bne.n	8013b56 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b28:	b2db      	uxtb	r3, r3
 8013b2a:	2b03      	cmp	r3, #3
 8013b2c:	d113      	bne.n	8013b56 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013b2e:	7dba      	ldrb	r2, [r7, #22]
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	32ae      	adds	r2, #174	@ 0xae
 8013b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b38:	691b      	ldr	r3, [r3, #16]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d00b      	beq.n	8013b56 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013b3e:	7dba      	ldrb	r2, [r7, #22]
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013b46:	7dba      	ldrb	r2, [r7, #22]
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	32ae      	adds	r2, #174	@ 0xae
 8013b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b50:	691b      	ldr	r3, [r3, #16]
 8013b52:	68f8      	ldr	r0, [r7, #12]
 8013b54:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013b56:	68f8      	ldr	r0, [r7, #12]
 8013b58:	f001 f8f2 	bl	8014d40 <USBD_CtlSendStatus>
 8013b5c:	e032      	b.n	8013bc4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013b5e:	7afb      	ldrb	r3, [r7, #11]
 8013b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013b64:	b2db      	uxtb	r3, r3
 8013b66:	4619      	mov	r1, r3
 8013b68:	68f8      	ldr	r0, [r7, #12]
 8013b6a:	f000 f9a5 	bl	8013eb8 <USBD_CoreFindEP>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013b72:	7dbb      	ldrb	r3, [r7, #22]
 8013b74:	2bff      	cmp	r3, #255	@ 0xff
 8013b76:	d025      	beq.n	8013bc4 <USBD_LL_DataOutStage+0x15c>
 8013b78:	7dbb      	ldrb	r3, [r7, #22]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d122      	bne.n	8013bc4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b84:	b2db      	uxtb	r3, r3
 8013b86:	2b03      	cmp	r3, #3
 8013b88:	d117      	bne.n	8013bba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013b8a:	7dba      	ldrb	r2, [r7, #22]
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	32ae      	adds	r2, #174	@ 0xae
 8013b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b94:	699b      	ldr	r3, [r3, #24]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d00f      	beq.n	8013bba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013b9a:	7dba      	ldrb	r2, [r7, #22]
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013ba2:	7dba      	ldrb	r2, [r7, #22]
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	32ae      	adds	r2, #174	@ 0xae
 8013ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013bac:	699b      	ldr	r3, [r3, #24]
 8013bae:	7afa      	ldrb	r2, [r7, #11]
 8013bb0:	4611      	mov	r1, r2
 8013bb2:	68f8      	ldr	r0, [r7, #12]
 8013bb4:	4798      	blx	r3
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013bba:	7dfb      	ldrb	r3, [r7, #23]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d001      	beq.n	8013bc4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013bc0:	7dfb      	ldrb	r3, [r7, #23]
 8013bc2:	e000      	b.n	8013bc6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013bc4:	2300      	movs	r3, #0
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3718      	adds	r7, #24
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}

08013bce <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013bce:	b580      	push	{r7, lr}
 8013bd0:	b086      	sub	sp, #24
 8013bd2:	af00      	add	r7, sp, #0
 8013bd4:	60f8      	str	r0, [r7, #12]
 8013bd6:	460b      	mov	r3, r1
 8013bd8:	607a      	str	r2, [r7, #4]
 8013bda:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013bdc:	7afb      	ldrb	r3, [r7, #11]
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d16f      	bne.n	8013cc2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	3314      	adds	r3, #20
 8013be6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013bee:	2b02      	cmp	r3, #2
 8013bf0:	d15a      	bne.n	8013ca8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	689a      	ldr	r2, [r3, #8]
 8013bf6:	693b      	ldr	r3, [r7, #16]
 8013bf8:	68db      	ldr	r3, [r3, #12]
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d914      	bls.n	8013c28 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	689a      	ldr	r2, [r3, #8]
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	68db      	ldr	r3, [r3, #12]
 8013c06:	1ad2      	subs	r2, r2, r3
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	689b      	ldr	r3, [r3, #8]
 8013c10:	461a      	mov	r2, r3
 8013c12:	6879      	ldr	r1, [r7, #4]
 8013c14:	68f8      	ldr	r0, [r7, #12]
 8013c16:	f001 f854 	bl	8014cc2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	2100      	movs	r1, #0
 8013c20:	68f8      	ldr	r0, [r7, #12]
 8013c22:	f005 fb4d 	bl	80192c0 <USBD_LL_PrepareReceive>
 8013c26:	e03f      	b.n	8013ca8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013c28:	693b      	ldr	r3, [r7, #16]
 8013c2a:	68da      	ldr	r2, [r3, #12]
 8013c2c:	693b      	ldr	r3, [r7, #16]
 8013c2e:	689b      	ldr	r3, [r3, #8]
 8013c30:	429a      	cmp	r2, r3
 8013c32:	d11c      	bne.n	8013c6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	685a      	ldr	r2, [r3, #4]
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013c3c:	429a      	cmp	r2, r3
 8013c3e:	d316      	bcc.n	8013c6e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013c40:	693b      	ldr	r3, [r7, #16]
 8013c42:	685a      	ldr	r2, [r3, #4]
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013c4a:	429a      	cmp	r2, r3
 8013c4c:	d20f      	bcs.n	8013c6e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013c4e:	2200      	movs	r2, #0
 8013c50:	2100      	movs	r1, #0
 8013c52:	68f8      	ldr	r0, [r7, #12]
 8013c54:	f001 f835 	bl	8014cc2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	2200      	movs	r2, #0
 8013c5c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013c60:	2300      	movs	r3, #0
 8013c62:	2200      	movs	r2, #0
 8013c64:	2100      	movs	r1, #0
 8013c66:	68f8      	ldr	r0, [r7, #12]
 8013c68:	f005 fb2a 	bl	80192c0 <USBD_LL_PrepareReceive>
 8013c6c:	e01c      	b.n	8013ca8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c74:	b2db      	uxtb	r3, r3
 8013c76:	2b03      	cmp	r3, #3
 8013c78:	d10f      	bne.n	8013c9a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c80:	68db      	ldr	r3, [r3, #12]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d009      	beq.n	8013c9a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	2200      	movs	r2, #0
 8013c8a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013c94:	68db      	ldr	r3, [r3, #12]
 8013c96:	68f8      	ldr	r0, [r7, #12]
 8013c98:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c9a:	2180      	movs	r1, #128	@ 0x80
 8013c9c:	68f8      	ldr	r0, [r7, #12]
 8013c9e:	f005 fa65 	bl	801916c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013ca2:	68f8      	ldr	r0, [r7, #12]
 8013ca4:	f001 f85f 	bl	8014d66 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d03a      	beq.n	8013d28 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	f7ff fe42 	bl	801393c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	2200      	movs	r2, #0
 8013cbc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8013cc0:	e032      	b.n	8013d28 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013cc2:	7afb      	ldrb	r3, [r7, #11]
 8013cc4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013cc8:	b2db      	uxtb	r3, r3
 8013cca:	4619      	mov	r1, r3
 8013ccc:	68f8      	ldr	r0, [r7, #12]
 8013cce:	f000 f8f3 	bl	8013eb8 <USBD_CoreFindEP>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013cd6:	7dfb      	ldrb	r3, [r7, #23]
 8013cd8:	2bff      	cmp	r3, #255	@ 0xff
 8013cda:	d025      	beq.n	8013d28 <USBD_LL_DataInStage+0x15a>
 8013cdc:	7dfb      	ldrb	r3, [r7, #23]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d122      	bne.n	8013d28 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	2b03      	cmp	r3, #3
 8013cec:	d11c      	bne.n	8013d28 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013cee:	7dfa      	ldrb	r2, [r7, #23]
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	32ae      	adds	r2, #174	@ 0xae
 8013cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cf8:	695b      	ldr	r3, [r3, #20]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d014      	beq.n	8013d28 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013cfe:	7dfa      	ldrb	r2, [r7, #23]
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013d06:	7dfa      	ldrb	r2, [r7, #23]
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	32ae      	adds	r2, #174	@ 0xae
 8013d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d10:	695b      	ldr	r3, [r3, #20]
 8013d12:	7afa      	ldrb	r2, [r7, #11]
 8013d14:	4611      	mov	r1, r2
 8013d16:	68f8      	ldr	r0, [r7, #12]
 8013d18:	4798      	blx	r3
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013d1e:	7dbb      	ldrb	r3, [r7, #22]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d001      	beq.n	8013d28 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013d24:	7dbb      	ldrb	r3, [r7, #22]
 8013d26:	e000      	b.n	8013d2a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013d28:	2300      	movs	r3, #0
}
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	3718      	adds	r7, #24
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	bd80      	pop	{r7, pc}

08013d32 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013d32:	b580      	push	{r7, lr}
 8013d34:	b084      	sub	sp, #16
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2201      	movs	r2, #1
 8013d42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2200      	movs	r2, #0
 8013d52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2200      	movs	r2, #0
 8013d58:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d014      	beq.n	8013d98 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d74:	685b      	ldr	r3, [r3, #4]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d00e      	beq.n	8013d98 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	6852      	ldr	r2, [r2, #4]
 8013d86:	b2d2      	uxtb	r2, r2
 8013d88:	4611      	mov	r1, r2
 8013d8a:	6878      	ldr	r0, [r7, #4]
 8013d8c:	4798      	blx	r3
 8013d8e:	4603      	mov	r3, r0
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d001      	beq.n	8013d98 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013d94:	2303      	movs	r3, #3
 8013d96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d98:	2340      	movs	r3, #64	@ 0x40
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	2100      	movs	r1, #0
 8013d9e:	6878      	ldr	r0, [r7, #4]
 8013da0:	f005 f99f 	bl	80190e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	2201      	movs	r2, #1
 8013da8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2240      	movs	r2, #64	@ 0x40
 8013db0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013db4:	2340      	movs	r3, #64	@ 0x40
 8013db6:	2200      	movs	r2, #0
 8013db8:	2180      	movs	r1, #128	@ 0x80
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f005 f991 	bl	80190e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2240      	movs	r2, #64	@ 0x40
 8013dca:	621a      	str	r2, [r3, #32]

  return ret;
 8013dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3710      	adds	r7, #16
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013dd6:	b480      	push	{r7}
 8013dd8:	b083      	sub	sp, #12
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	460b      	mov	r3, r1
 8013de0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	78fa      	ldrb	r2, [r7, #3]
 8013de6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013de8:	2300      	movs	r3, #0
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	370c      	adds	r7, #12
 8013dee:	46bd      	mov	sp, r7
 8013df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df4:	4770      	bx	lr

08013df6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013df6:	b480      	push	{r7}
 8013df8:	b083      	sub	sp, #12
 8013dfa:	af00      	add	r7, sp, #0
 8013dfc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	2b04      	cmp	r3, #4
 8013e08:	d006      	beq.n	8013e18 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e10:	b2da      	uxtb	r2, r3
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	2204      	movs	r2, #4
 8013e1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013e20:	2300      	movs	r3, #0
}
 8013e22:	4618      	mov	r0, r3
 8013e24:	370c      	adds	r7, #12
 8013e26:	46bd      	mov	sp, r7
 8013e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e2c:	4770      	bx	lr

08013e2e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013e2e:	b480      	push	{r7}
 8013e30:	b083      	sub	sp, #12
 8013e32:	af00      	add	r7, sp, #0
 8013e34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	2b04      	cmp	r3, #4
 8013e40:	d106      	bne.n	8013e50 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8013e48:	b2da      	uxtb	r2, r3
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013e50:	2300      	movs	r3, #0
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	370c      	adds	r7, #12
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr

08013e5e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b082      	sub	sp, #8
 8013e62:	af00      	add	r7, sp, #0
 8013e64:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	2b03      	cmp	r3, #3
 8013e70:	d110      	bne.n	8013e94 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d00b      	beq.n	8013e94 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e82:	69db      	ldr	r3, [r3, #28]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d005      	beq.n	8013e94 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e8e:	69db      	ldr	r3, [r3, #28]
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013e94:	2300      	movs	r3, #0
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	3708      	adds	r7, #8
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}

08013e9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013e9e:	b480      	push	{r7}
 8013ea0:	b083      	sub	sp, #12
 8013ea2:	af00      	add	r7, sp, #0
 8013ea4:	6078      	str	r0, [r7, #4]
 8013ea6:	460b      	mov	r3, r1
 8013ea8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013eaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	370c      	adds	r7, #12
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb6:	4770      	bx	lr

08013eb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b083      	sub	sp, #12
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
 8013ec0:	460b      	mov	r3, r1
 8013ec2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013ec4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	370c      	adds	r7, #12
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed0:	4770      	bx	lr

08013ed2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013ed2:	b580      	push	{r7, lr}
 8013ed4:	b086      	sub	sp, #24
 8013ed6:	af00      	add	r7, sp, #0
 8013ed8:	6078      	str	r0, [r7, #4]
 8013eda:	460b      	mov	r3, r1
 8013edc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	885b      	ldrh	r3, [r3, #2]
 8013eee:	b29b      	uxth	r3, r3
 8013ef0:	68fa      	ldr	r2, [r7, #12]
 8013ef2:	7812      	ldrb	r2, [r2, #0]
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	d91f      	bls.n	8013f38 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	781b      	ldrb	r3, [r3, #0]
 8013efc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013efe:	e013      	b.n	8013f28 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013f00:	f107 030a 	add.w	r3, r7, #10
 8013f04:	4619      	mov	r1, r3
 8013f06:	6978      	ldr	r0, [r7, #20]
 8013f08:	f000 f81b 	bl	8013f42 <USBD_GetNextDesc>
 8013f0c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	785b      	ldrb	r3, [r3, #1]
 8013f12:	2b05      	cmp	r3, #5
 8013f14:	d108      	bne.n	8013f28 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013f16:	697b      	ldr	r3, [r7, #20]
 8013f18:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013f1a:	693b      	ldr	r3, [r7, #16]
 8013f1c:	789b      	ldrb	r3, [r3, #2]
 8013f1e:	78fa      	ldrb	r2, [r7, #3]
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d008      	beq.n	8013f36 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013f24:	2300      	movs	r3, #0
 8013f26:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	885b      	ldrh	r3, [r3, #2]
 8013f2c:	b29a      	uxth	r2, r3
 8013f2e:	897b      	ldrh	r3, [r7, #10]
 8013f30:	429a      	cmp	r2, r3
 8013f32:	d8e5      	bhi.n	8013f00 <USBD_GetEpDesc+0x2e>
 8013f34:	e000      	b.n	8013f38 <USBD_GetEpDesc+0x66>
          break;
 8013f36:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013f38:	693b      	ldr	r3, [r7, #16]
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	3718      	adds	r7, #24
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd80      	pop	{r7, pc}

08013f42 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013f42:	b480      	push	{r7}
 8013f44:	b085      	sub	sp, #20
 8013f46:	af00      	add	r7, sp, #0
 8013f48:	6078      	str	r0, [r7, #4]
 8013f4a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	881b      	ldrh	r3, [r3, #0]
 8013f54:	68fa      	ldr	r2, [r7, #12]
 8013f56:	7812      	ldrb	r2, [r2, #0]
 8013f58:	4413      	add	r3, r2
 8013f5a:	b29a      	uxth	r2, r3
 8013f5c:	683b      	ldr	r3, [r7, #0]
 8013f5e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	781b      	ldrb	r3, [r3, #0]
 8013f64:	461a      	mov	r2, r3
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	4413      	add	r3, r2
 8013f6a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013f6c:	68fb      	ldr	r3, [r7, #12]
}
 8013f6e:	4618      	mov	r0, r3
 8013f70:	3714      	adds	r7, #20
 8013f72:	46bd      	mov	sp, r7
 8013f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f78:	4770      	bx	lr

08013f7a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013f7a:	b480      	push	{r7}
 8013f7c:	b087      	sub	sp, #28
 8013f7e:	af00      	add	r7, sp, #0
 8013f80:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	3301      	adds	r3, #1
 8013f90:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013f98:	8a3b      	ldrh	r3, [r7, #16]
 8013f9a:	021b      	lsls	r3, r3, #8
 8013f9c:	b21a      	sxth	r2, r3
 8013f9e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013fa2:	4313      	orrs	r3, r2
 8013fa4:	b21b      	sxth	r3, r3
 8013fa6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013fa8:	89fb      	ldrh	r3, [r7, #14]
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	371c      	adds	r7, #28
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr
	...

08013fb8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fb8:	b580      	push	{r7, lr}
 8013fba:	b084      	sub	sp, #16
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	781b      	ldrb	r3, [r3, #0]
 8013fca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013fce:	2b40      	cmp	r3, #64	@ 0x40
 8013fd0:	d005      	beq.n	8013fde <USBD_StdDevReq+0x26>
 8013fd2:	2b40      	cmp	r3, #64	@ 0x40
 8013fd4:	d857      	bhi.n	8014086 <USBD_StdDevReq+0xce>
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d00f      	beq.n	8013ffa <USBD_StdDevReq+0x42>
 8013fda:	2b20      	cmp	r3, #32
 8013fdc:	d153      	bne.n	8014086 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	32ae      	adds	r2, #174	@ 0xae
 8013fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fec:	689b      	ldr	r3, [r3, #8]
 8013fee:	6839      	ldr	r1, [r7, #0]
 8013ff0:	6878      	ldr	r0, [r7, #4]
 8013ff2:	4798      	blx	r3
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8013ff8:	e04a      	b.n	8014090 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	785b      	ldrb	r3, [r3, #1]
 8013ffe:	2b09      	cmp	r3, #9
 8014000:	d83b      	bhi.n	801407a <USBD_StdDevReq+0xc2>
 8014002:	a201      	add	r2, pc, #4	@ (adr r2, 8014008 <USBD_StdDevReq+0x50>)
 8014004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014008:	0801405d 	.word	0x0801405d
 801400c:	08014071 	.word	0x08014071
 8014010:	0801407b 	.word	0x0801407b
 8014014:	08014067 	.word	0x08014067
 8014018:	0801407b 	.word	0x0801407b
 801401c:	0801403b 	.word	0x0801403b
 8014020:	08014031 	.word	0x08014031
 8014024:	0801407b 	.word	0x0801407b
 8014028:	08014053 	.word	0x08014053
 801402c:	08014045 	.word	0x08014045
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014030:	6839      	ldr	r1, [r7, #0]
 8014032:	6878      	ldr	r0, [r7, #4]
 8014034:	f000 fa3c 	bl	80144b0 <USBD_GetDescriptor>
          break;
 8014038:	e024      	b.n	8014084 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801403a:	6839      	ldr	r1, [r7, #0]
 801403c:	6878      	ldr	r0, [r7, #4]
 801403e:	f000 fbcb 	bl	80147d8 <USBD_SetAddress>
          break;
 8014042:	e01f      	b.n	8014084 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014044:	6839      	ldr	r1, [r7, #0]
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f000 fc0a 	bl	8014860 <USBD_SetConfig>
 801404c:	4603      	mov	r3, r0
 801404e:	73fb      	strb	r3, [r7, #15]
          break;
 8014050:	e018      	b.n	8014084 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014052:	6839      	ldr	r1, [r7, #0]
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f000 fcad 	bl	80149b4 <USBD_GetConfig>
          break;
 801405a:	e013      	b.n	8014084 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801405c:	6839      	ldr	r1, [r7, #0]
 801405e:	6878      	ldr	r0, [r7, #4]
 8014060:	f000 fcde 	bl	8014a20 <USBD_GetStatus>
          break;
 8014064:	e00e      	b.n	8014084 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014066:	6839      	ldr	r1, [r7, #0]
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f000 fd0d 	bl	8014a88 <USBD_SetFeature>
          break;
 801406e:	e009      	b.n	8014084 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014070:	6839      	ldr	r1, [r7, #0]
 8014072:	6878      	ldr	r0, [r7, #4]
 8014074:	f000 fd31 	bl	8014ada <USBD_ClrFeature>
          break;
 8014078:	e004      	b.n	8014084 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801407a:	6839      	ldr	r1, [r7, #0]
 801407c:	6878      	ldr	r0, [r7, #4]
 801407e:	f000 fd88 	bl	8014b92 <USBD_CtlError>
          break;
 8014082:	bf00      	nop
      }
      break;
 8014084:	e004      	b.n	8014090 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014086:	6839      	ldr	r1, [r7, #0]
 8014088:	6878      	ldr	r0, [r7, #4]
 801408a:	f000 fd82 	bl	8014b92 <USBD_CtlError>
      break;
 801408e:	bf00      	nop
  }

  return ret;
 8014090:	7bfb      	ldrb	r3, [r7, #15]
}
 8014092:	4618      	mov	r0, r3
 8014094:	3710      	adds	r7, #16
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop

0801409c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801409c:	b580      	push	{r7, lr}
 801409e:	b084      	sub	sp, #16
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
 80140a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80140a6:	2300      	movs	r3, #0
 80140a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80140b2:	2b40      	cmp	r3, #64	@ 0x40
 80140b4:	d005      	beq.n	80140c2 <USBD_StdItfReq+0x26>
 80140b6:	2b40      	cmp	r3, #64	@ 0x40
 80140b8:	d852      	bhi.n	8014160 <USBD_StdItfReq+0xc4>
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d001      	beq.n	80140c2 <USBD_StdItfReq+0x26>
 80140be:	2b20      	cmp	r3, #32
 80140c0:	d14e      	bne.n	8014160 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140c8:	b2db      	uxtb	r3, r3
 80140ca:	3b01      	subs	r3, #1
 80140cc:	2b02      	cmp	r3, #2
 80140ce:	d840      	bhi.n	8014152 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	889b      	ldrh	r3, [r3, #4]
 80140d4:	b2db      	uxtb	r3, r3
 80140d6:	2b01      	cmp	r3, #1
 80140d8:	d836      	bhi.n	8014148 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	889b      	ldrh	r3, [r3, #4]
 80140de:	b2db      	uxtb	r3, r3
 80140e0:	4619      	mov	r1, r3
 80140e2:	6878      	ldr	r0, [r7, #4]
 80140e4:	f7ff fedb 	bl	8013e9e <USBD_CoreFindIF>
 80140e8:	4603      	mov	r3, r0
 80140ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80140ec:	7bbb      	ldrb	r3, [r7, #14]
 80140ee:	2bff      	cmp	r3, #255	@ 0xff
 80140f0:	d01d      	beq.n	801412e <USBD_StdItfReq+0x92>
 80140f2:	7bbb      	ldrb	r3, [r7, #14]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d11a      	bne.n	801412e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80140f8:	7bba      	ldrb	r2, [r7, #14]
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	32ae      	adds	r2, #174	@ 0xae
 80140fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014102:	689b      	ldr	r3, [r3, #8]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d00f      	beq.n	8014128 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014108:	7bba      	ldrb	r2, [r7, #14]
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014110:	7bba      	ldrb	r2, [r7, #14]
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	32ae      	adds	r2, #174	@ 0xae
 8014116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801411a:	689b      	ldr	r3, [r3, #8]
 801411c:	6839      	ldr	r1, [r7, #0]
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	4798      	blx	r3
 8014122:	4603      	mov	r3, r0
 8014124:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014126:	e004      	b.n	8014132 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014128:	2303      	movs	r3, #3
 801412a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801412c:	e001      	b.n	8014132 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801412e:	2303      	movs	r3, #3
 8014130:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	88db      	ldrh	r3, [r3, #6]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d110      	bne.n	801415c <USBD_StdItfReq+0xc0>
 801413a:	7bfb      	ldrb	r3, [r7, #15]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d10d      	bne.n	801415c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f000 fdfd 	bl	8014d40 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014146:	e009      	b.n	801415c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014148:	6839      	ldr	r1, [r7, #0]
 801414a:	6878      	ldr	r0, [r7, #4]
 801414c:	f000 fd21 	bl	8014b92 <USBD_CtlError>
          break;
 8014150:	e004      	b.n	801415c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014152:	6839      	ldr	r1, [r7, #0]
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f000 fd1c 	bl	8014b92 <USBD_CtlError>
          break;
 801415a:	e000      	b.n	801415e <USBD_StdItfReq+0xc2>
          break;
 801415c:	bf00      	nop
      }
      break;
 801415e:	e004      	b.n	801416a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014160:	6839      	ldr	r1, [r7, #0]
 8014162:	6878      	ldr	r0, [r7, #4]
 8014164:	f000 fd15 	bl	8014b92 <USBD_CtlError>
      break;
 8014168:	bf00      	nop
  }

  return ret;
 801416a:	7bfb      	ldrb	r3, [r7, #15]
}
 801416c:	4618      	mov	r0, r3
 801416e:	3710      	adds	r7, #16
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
 801417c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801417e:	2300      	movs	r3, #0
 8014180:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014182:	683b      	ldr	r3, [r7, #0]
 8014184:	889b      	ldrh	r3, [r3, #4]
 8014186:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014188:	683b      	ldr	r3, [r7, #0]
 801418a:	781b      	ldrb	r3, [r3, #0]
 801418c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014190:	2b40      	cmp	r3, #64	@ 0x40
 8014192:	d007      	beq.n	80141a4 <USBD_StdEPReq+0x30>
 8014194:	2b40      	cmp	r3, #64	@ 0x40
 8014196:	f200 817f 	bhi.w	8014498 <USBD_StdEPReq+0x324>
 801419a:	2b00      	cmp	r3, #0
 801419c:	d02a      	beq.n	80141f4 <USBD_StdEPReq+0x80>
 801419e:	2b20      	cmp	r3, #32
 80141a0:	f040 817a 	bne.w	8014498 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80141a4:	7bbb      	ldrb	r3, [r7, #14]
 80141a6:	4619      	mov	r1, r3
 80141a8:	6878      	ldr	r0, [r7, #4]
 80141aa:	f7ff fe85 	bl	8013eb8 <USBD_CoreFindEP>
 80141ae:	4603      	mov	r3, r0
 80141b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80141b2:	7b7b      	ldrb	r3, [r7, #13]
 80141b4:	2bff      	cmp	r3, #255	@ 0xff
 80141b6:	f000 8174 	beq.w	80144a2 <USBD_StdEPReq+0x32e>
 80141ba:	7b7b      	ldrb	r3, [r7, #13]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	f040 8170 	bne.w	80144a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80141c2:	7b7a      	ldrb	r2, [r7, #13]
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80141ca:	7b7a      	ldrb	r2, [r7, #13]
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	32ae      	adds	r2, #174	@ 0xae
 80141d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141d4:	689b      	ldr	r3, [r3, #8]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	f000 8163 	beq.w	80144a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80141dc:	7b7a      	ldrb	r2, [r7, #13]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	32ae      	adds	r2, #174	@ 0xae
 80141e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	6839      	ldr	r1, [r7, #0]
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	4798      	blx	r3
 80141ee:	4603      	mov	r3, r0
 80141f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80141f2:	e156      	b.n	80144a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80141f4:	683b      	ldr	r3, [r7, #0]
 80141f6:	785b      	ldrb	r3, [r3, #1]
 80141f8:	2b03      	cmp	r3, #3
 80141fa:	d008      	beq.n	801420e <USBD_StdEPReq+0x9a>
 80141fc:	2b03      	cmp	r3, #3
 80141fe:	f300 8145 	bgt.w	801448c <USBD_StdEPReq+0x318>
 8014202:	2b00      	cmp	r3, #0
 8014204:	f000 809b 	beq.w	801433e <USBD_StdEPReq+0x1ca>
 8014208:	2b01      	cmp	r3, #1
 801420a:	d03c      	beq.n	8014286 <USBD_StdEPReq+0x112>
 801420c:	e13e      	b.n	801448c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014214:	b2db      	uxtb	r3, r3
 8014216:	2b02      	cmp	r3, #2
 8014218:	d002      	beq.n	8014220 <USBD_StdEPReq+0xac>
 801421a:	2b03      	cmp	r3, #3
 801421c:	d016      	beq.n	801424c <USBD_StdEPReq+0xd8>
 801421e:	e02c      	b.n	801427a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014220:	7bbb      	ldrb	r3, [r7, #14]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d00d      	beq.n	8014242 <USBD_StdEPReq+0xce>
 8014226:	7bbb      	ldrb	r3, [r7, #14]
 8014228:	2b80      	cmp	r3, #128	@ 0x80
 801422a:	d00a      	beq.n	8014242 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801422c:	7bbb      	ldrb	r3, [r7, #14]
 801422e:	4619      	mov	r1, r3
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f004 ff9b 	bl	801916c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014236:	2180      	movs	r1, #128	@ 0x80
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f004 ff97 	bl	801916c <USBD_LL_StallEP>
 801423e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014240:	e020      	b.n	8014284 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014242:	6839      	ldr	r1, [r7, #0]
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f000 fca4 	bl	8014b92 <USBD_CtlError>
              break;
 801424a:	e01b      	b.n	8014284 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801424c:	683b      	ldr	r3, [r7, #0]
 801424e:	885b      	ldrh	r3, [r3, #2]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d10e      	bne.n	8014272 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014254:	7bbb      	ldrb	r3, [r7, #14]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d00b      	beq.n	8014272 <USBD_StdEPReq+0xfe>
 801425a:	7bbb      	ldrb	r3, [r7, #14]
 801425c:	2b80      	cmp	r3, #128	@ 0x80
 801425e:	d008      	beq.n	8014272 <USBD_StdEPReq+0xfe>
 8014260:	683b      	ldr	r3, [r7, #0]
 8014262:	88db      	ldrh	r3, [r3, #6]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d104      	bne.n	8014272 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014268:	7bbb      	ldrb	r3, [r7, #14]
 801426a:	4619      	mov	r1, r3
 801426c:	6878      	ldr	r0, [r7, #4]
 801426e:	f004 ff7d 	bl	801916c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f000 fd64 	bl	8014d40 <USBD_CtlSendStatus>

              break;
 8014278:	e004      	b.n	8014284 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801427a:	6839      	ldr	r1, [r7, #0]
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f000 fc88 	bl	8014b92 <USBD_CtlError>
              break;
 8014282:	bf00      	nop
          }
          break;
 8014284:	e107      	b.n	8014496 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801428c:	b2db      	uxtb	r3, r3
 801428e:	2b02      	cmp	r3, #2
 8014290:	d002      	beq.n	8014298 <USBD_StdEPReq+0x124>
 8014292:	2b03      	cmp	r3, #3
 8014294:	d016      	beq.n	80142c4 <USBD_StdEPReq+0x150>
 8014296:	e04b      	b.n	8014330 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014298:	7bbb      	ldrb	r3, [r7, #14]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d00d      	beq.n	80142ba <USBD_StdEPReq+0x146>
 801429e:	7bbb      	ldrb	r3, [r7, #14]
 80142a0:	2b80      	cmp	r3, #128	@ 0x80
 80142a2:	d00a      	beq.n	80142ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80142a4:	7bbb      	ldrb	r3, [r7, #14]
 80142a6:	4619      	mov	r1, r3
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	f004 ff5f 	bl	801916c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80142ae:	2180      	movs	r1, #128	@ 0x80
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f004 ff5b 	bl	801916c <USBD_LL_StallEP>
 80142b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80142b8:	e040      	b.n	801433c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80142ba:	6839      	ldr	r1, [r7, #0]
 80142bc:	6878      	ldr	r0, [r7, #4]
 80142be:	f000 fc68 	bl	8014b92 <USBD_CtlError>
              break;
 80142c2:	e03b      	b.n	801433c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80142c4:	683b      	ldr	r3, [r7, #0]
 80142c6:	885b      	ldrh	r3, [r3, #2]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d136      	bne.n	801433a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80142cc:	7bbb      	ldrb	r3, [r7, #14]
 80142ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d004      	beq.n	80142e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80142d6:	7bbb      	ldrb	r3, [r7, #14]
 80142d8:	4619      	mov	r1, r3
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f004 ff65 	bl	80191aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f000 fd2d 	bl	8014d40 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80142e6:	7bbb      	ldrb	r3, [r7, #14]
 80142e8:	4619      	mov	r1, r3
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f7ff fde4 	bl	8013eb8 <USBD_CoreFindEP>
 80142f0:	4603      	mov	r3, r0
 80142f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80142f4:	7b7b      	ldrb	r3, [r7, #13]
 80142f6:	2bff      	cmp	r3, #255	@ 0xff
 80142f8:	d01f      	beq.n	801433a <USBD_StdEPReq+0x1c6>
 80142fa:	7b7b      	ldrb	r3, [r7, #13]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d11c      	bne.n	801433a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014300:	7b7a      	ldrb	r2, [r7, #13]
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014308:	7b7a      	ldrb	r2, [r7, #13]
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	32ae      	adds	r2, #174	@ 0xae
 801430e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014312:	689b      	ldr	r3, [r3, #8]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d010      	beq.n	801433a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014318:	7b7a      	ldrb	r2, [r7, #13]
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	32ae      	adds	r2, #174	@ 0xae
 801431e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014322:	689b      	ldr	r3, [r3, #8]
 8014324:	6839      	ldr	r1, [r7, #0]
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	4798      	blx	r3
 801432a:	4603      	mov	r3, r0
 801432c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801432e:	e004      	b.n	801433a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014330:	6839      	ldr	r1, [r7, #0]
 8014332:	6878      	ldr	r0, [r7, #4]
 8014334:	f000 fc2d 	bl	8014b92 <USBD_CtlError>
              break;
 8014338:	e000      	b.n	801433c <USBD_StdEPReq+0x1c8>
              break;
 801433a:	bf00      	nop
          }
          break;
 801433c:	e0ab      	b.n	8014496 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014344:	b2db      	uxtb	r3, r3
 8014346:	2b02      	cmp	r3, #2
 8014348:	d002      	beq.n	8014350 <USBD_StdEPReq+0x1dc>
 801434a:	2b03      	cmp	r3, #3
 801434c:	d032      	beq.n	80143b4 <USBD_StdEPReq+0x240>
 801434e:	e097      	b.n	8014480 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014350:	7bbb      	ldrb	r3, [r7, #14]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d007      	beq.n	8014366 <USBD_StdEPReq+0x1f2>
 8014356:	7bbb      	ldrb	r3, [r7, #14]
 8014358:	2b80      	cmp	r3, #128	@ 0x80
 801435a:	d004      	beq.n	8014366 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 801435c:	6839      	ldr	r1, [r7, #0]
 801435e:	6878      	ldr	r0, [r7, #4]
 8014360:	f000 fc17 	bl	8014b92 <USBD_CtlError>
                break;
 8014364:	e091      	b.n	801448a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801436a:	2b00      	cmp	r3, #0
 801436c:	da0b      	bge.n	8014386 <USBD_StdEPReq+0x212>
 801436e:	7bbb      	ldrb	r3, [r7, #14]
 8014370:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014374:	4613      	mov	r3, r2
 8014376:	009b      	lsls	r3, r3, #2
 8014378:	4413      	add	r3, r2
 801437a:	009b      	lsls	r3, r3, #2
 801437c:	3310      	adds	r3, #16
 801437e:	687a      	ldr	r2, [r7, #4]
 8014380:	4413      	add	r3, r2
 8014382:	3304      	adds	r3, #4
 8014384:	e00b      	b.n	801439e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014386:	7bbb      	ldrb	r3, [r7, #14]
 8014388:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801438c:	4613      	mov	r3, r2
 801438e:	009b      	lsls	r3, r3, #2
 8014390:	4413      	add	r3, r2
 8014392:	009b      	lsls	r3, r3, #2
 8014394:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014398:	687a      	ldr	r2, [r7, #4]
 801439a:	4413      	add	r3, r2
 801439c:	3304      	adds	r3, #4
 801439e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80143a0:	68bb      	ldr	r3, [r7, #8]
 80143a2:	2200      	movs	r2, #0
 80143a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	2202      	movs	r2, #2
 80143aa:	4619      	mov	r1, r3
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f000 fc6d 	bl	8014c8c <USBD_CtlSendData>
              break;
 80143b2:	e06a      	b.n	801448a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80143b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	da11      	bge.n	80143e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80143bc:	7bbb      	ldrb	r3, [r7, #14]
 80143be:	f003 020f 	and.w	r2, r3, #15
 80143c2:	6879      	ldr	r1, [r7, #4]
 80143c4:	4613      	mov	r3, r2
 80143c6:	009b      	lsls	r3, r3, #2
 80143c8:	4413      	add	r3, r2
 80143ca:	009b      	lsls	r3, r3, #2
 80143cc:	440b      	add	r3, r1
 80143ce:	3324      	adds	r3, #36	@ 0x24
 80143d0:	881b      	ldrh	r3, [r3, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d117      	bne.n	8014406 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80143d6:	6839      	ldr	r1, [r7, #0]
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f000 fbda 	bl	8014b92 <USBD_CtlError>
                  break;
 80143de:	e054      	b.n	801448a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80143e0:	7bbb      	ldrb	r3, [r7, #14]
 80143e2:	f003 020f 	and.w	r2, r3, #15
 80143e6:	6879      	ldr	r1, [r7, #4]
 80143e8:	4613      	mov	r3, r2
 80143ea:	009b      	lsls	r3, r3, #2
 80143ec:	4413      	add	r3, r2
 80143ee:	009b      	lsls	r3, r3, #2
 80143f0:	440b      	add	r3, r1
 80143f2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80143f6:	881b      	ldrh	r3, [r3, #0]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d104      	bne.n	8014406 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80143fc:	6839      	ldr	r1, [r7, #0]
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f000 fbc7 	bl	8014b92 <USBD_CtlError>
                  break;
 8014404:	e041      	b.n	801448a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801440a:	2b00      	cmp	r3, #0
 801440c:	da0b      	bge.n	8014426 <USBD_StdEPReq+0x2b2>
 801440e:	7bbb      	ldrb	r3, [r7, #14]
 8014410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8014414:	4613      	mov	r3, r2
 8014416:	009b      	lsls	r3, r3, #2
 8014418:	4413      	add	r3, r2
 801441a:	009b      	lsls	r3, r3, #2
 801441c:	3310      	adds	r3, #16
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	4413      	add	r3, r2
 8014422:	3304      	adds	r3, #4
 8014424:	e00b      	b.n	801443e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014426:	7bbb      	ldrb	r3, [r7, #14]
 8014428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801442c:	4613      	mov	r3, r2
 801442e:	009b      	lsls	r3, r3, #2
 8014430:	4413      	add	r3, r2
 8014432:	009b      	lsls	r3, r3, #2
 8014434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	4413      	add	r3, r2
 801443c:	3304      	adds	r3, #4
 801443e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014440:	7bbb      	ldrb	r3, [r7, #14]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d002      	beq.n	801444c <USBD_StdEPReq+0x2d8>
 8014446:	7bbb      	ldrb	r3, [r7, #14]
 8014448:	2b80      	cmp	r3, #128	@ 0x80
 801444a:	d103      	bne.n	8014454 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	2200      	movs	r2, #0
 8014450:	601a      	str	r2, [r3, #0]
 8014452:	e00e      	b.n	8014472 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014454:	7bbb      	ldrb	r3, [r7, #14]
 8014456:	4619      	mov	r1, r3
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f004 fec5 	bl	80191e8 <USBD_LL_IsStallEP>
 801445e:	4603      	mov	r3, r0
 8014460:	2b00      	cmp	r3, #0
 8014462:	d003      	beq.n	801446c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	2201      	movs	r2, #1
 8014468:	601a      	str	r2, [r3, #0]
 801446a:	e002      	b.n	8014472 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801446c:	68bb      	ldr	r3, [r7, #8]
 801446e:	2200      	movs	r2, #0
 8014470:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	2202      	movs	r2, #2
 8014476:	4619      	mov	r1, r3
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f000 fc07 	bl	8014c8c <USBD_CtlSendData>
              break;
 801447e:	e004      	b.n	801448a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014480:	6839      	ldr	r1, [r7, #0]
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f000 fb85 	bl	8014b92 <USBD_CtlError>
              break;
 8014488:	bf00      	nop
          }
          break;
 801448a:	e004      	b.n	8014496 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801448c:	6839      	ldr	r1, [r7, #0]
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f000 fb7f 	bl	8014b92 <USBD_CtlError>
          break;
 8014494:	bf00      	nop
      }
      break;
 8014496:	e005      	b.n	80144a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014498:	6839      	ldr	r1, [r7, #0]
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f000 fb79 	bl	8014b92 <USBD_CtlError>
      break;
 80144a0:	e000      	b.n	80144a4 <USBD_StdEPReq+0x330>
      break;
 80144a2:	bf00      	nop
  }

  return ret;
 80144a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3710      	adds	r7, #16
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
	...

080144b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144b0:	b580      	push	{r7, lr}
 80144b2:	b084      	sub	sp, #16
 80144b4:	af00      	add	r7, sp, #0
 80144b6:	6078      	str	r0, [r7, #4]
 80144b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80144ba:	2300      	movs	r3, #0
 80144bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80144be:	2300      	movs	r3, #0
 80144c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80144c2:	2300      	movs	r3, #0
 80144c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	885b      	ldrh	r3, [r3, #2]
 80144ca:	0a1b      	lsrs	r3, r3, #8
 80144cc:	b29b      	uxth	r3, r3
 80144ce:	3b01      	subs	r3, #1
 80144d0:	2b0e      	cmp	r3, #14
 80144d2:	f200 8152 	bhi.w	801477a <USBD_GetDescriptor+0x2ca>
 80144d6:	a201      	add	r2, pc, #4	@ (adr r2, 80144dc <USBD_GetDescriptor+0x2c>)
 80144d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144dc:	0801454d 	.word	0x0801454d
 80144e0:	08014565 	.word	0x08014565
 80144e4:	080145a5 	.word	0x080145a5
 80144e8:	0801477b 	.word	0x0801477b
 80144ec:	0801477b 	.word	0x0801477b
 80144f0:	0801471b 	.word	0x0801471b
 80144f4:	08014747 	.word	0x08014747
 80144f8:	0801477b 	.word	0x0801477b
 80144fc:	0801477b 	.word	0x0801477b
 8014500:	0801477b 	.word	0x0801477b
 8014504:	0801477b 	.word	0x0801477b
 8014508:	0801477b 	.word	0x0801477b
 801450c:	0801477b 	.word	0x0801477b
 8014510:	0801477b 	.word	0x0801477b
 8014514:	08014519 	.word	0x08014519
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801451e:	69db      	ldr	r3, [r3, #28]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d00b      	beq.n	801453c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801452a:	69db      	ldr	r3, [r3, #28]
 801452c:	687a      	ldr	r2, [r7, #4]
 801452e:	7c12      	ldrb	r2, [r2, #16]
 8014530:	f107 0108 	add.w	r1, r7, #8
 8014534:	4610      	mov	r0, r2
 8014536:	4798      	blx	r3
 8014538:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801453a:	e126      	b.n	801478a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801453c:	6839      	ldr	r1, [r7, #0]
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f000 fb27 	bl	8014b92 <USBD_CtlError>
        err++;
 8014544:	7afb      	ldrb	r3, [r7, #11]
 8014546:	3301      	adds	r3, #1
 8014548:	72fb      	strb	r3, [r7, #11]
      break;
 801454a:	e11e      	b.n	801478a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	7c12      	ldrb	r2, [r2, #16]
 8014558:	f107 0108 	add.w	r1, r7, #8
 801455c:	4610      	mov	r0, r2
 801455e:	4798      	blx	r3
 8014560:	60f8      	str	r0, [r7, #12]
      break;
 8014562:	e112      	b.n	801478a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	7c1b      	ldrb	r3, [r3, #16]
 8014568:	2b00      	cmp	r3, #0
 801456a:	d10d      	bne.n	8014588 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014574:	f107 0208 	add.w	r2, r7, #8
 8014578:	4610      	mov	r0, r2
 801457a:	4798      	blx	r3
 801457c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	3301      	adds	r3, #1
 8014582:	2202      	movs	r2, #2
 8014584:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014586:	e100      	b.n	801478a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801458e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014590:	f107 0208 	add.w	r2, r7, #8
 8014594:	4610      	mov	r0, r2
 8014596:	4798      	blx	r3
 8014598:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	3301      	adds	r3, #1
 801459e:	2202      	movs	r2, #2
 80145a0:	701a      	strb	r2, [r3, #0]
      break;
 80145a2:	e0f2      	b.n	801478a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	885b      	ldrh	r3, [r3, #2]
 80145a8:	b2db      	uxtb	r3, r3
 80145aa:	2b05      	cmp	r3, #5
 80145ac:	f200 80ac 	bhi.w	8014708 <USBD_GetDescriptor+0x258>
 80145b0:	a201      	add	r2, pc, #4	@ (adr r2, 80145b8 <USBD_GetDescriptor+0x108>)
 80145b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b6:	bf00      	nop
 80145b8:	080145d1 	.word	0x080145d1
 80145bc:	08014605 	.word	0x08014605
 80145c0:	08014639 	.word	0x08014639
 80145c4:	0801466d 	.word	0x0801466d
 80145c8:	080146a1 	.word	0x080146a1
 80145cc:	080146d5 	.word	0x080146d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145d6:	685b      	ldr	r3, [r3, #4]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d00b      	beq.n	80145f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80145e2:	685b      	ldr	r3, [r3, #4]
 80145e4:	687a      	ldr	r2, [r7, #4]
 80145e6:	7c12      	ldrb	r2, [r2, #16]
 80145e8:	f107 0108 	add.w	r1, r7, #8
 80145ec:	4610      	mov	r0, r2
 80145ee:	4798      	blx	r3
 80145f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80145f2:	e091      	b.n	8014718 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80145f4:	6839      	ldr	r1, [r7, #0]
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f000 facb 	bl	8014b92 <USBD_CtlError>
            err++;
 80145fc:	7afb      	ldrb	r3, [r7, #11]
 80145fe:	3301      	adds	r3, #1
 8014600:	72fb      	strb	r3, [r7, #11]
          break;
 8014602:	e089      	b.n	8014718 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801460a:	689b      	ldr	r3, [r3, #8]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d00b      	beq.n	8014628 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014616:	689b      	ldr	r3, [r3, #8]
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	7c12      	ldrb	r2, [r2, #16]
 801461c:	f107 0108 	add.w	r1, r7, #8
 8014620:	4610      	mov	r0, r2
 8014622:	4798      	blx	r3
 8014624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014626:	e077      	b.n	8014718 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014628:	6839      	ldr	r1, [r7, #0]
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f000 fab1 	bl	8014b92 <USBD_CtlError>
            err++;
 8014630:	7afb      	ldrb	r3, [r7, #11]
 8014632:	3301      	adds	r3, #1
 8014634:	72fb      	strb	r3, [r7, #11]
          break;
 8014636:	e06f      	b.n	8014718 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801463e:	68db      	ldr	r3, [r3, #12]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d00b      	beq.n	801465c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801464a:	68db      	ldr	r3, [r3, #12]
 801464c:	687a      	ldr	r2, [r7, #4]
 801464e:	7c12      	ldrb	r2, [r2, #16]
 8014650:	f107 0108 	add.w	r1, r7, #8
 8014654:	4610      	mov	r0, r2
 8014656:	4798      	blx	r3
 8014658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801465a:	e05d      	b.n	8014718 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801465c:	6839      	ldr	r1, [r7, #0]
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f000 fa97 	bl	8014b92 <USBD_CtlError>
            err++;
 8014664:	7afb      	ldrb	r3, [r7, #11]
 8014666:	3301      	adds	r3, #1
 8014668:	72fb      	strb	r3, [r7, #11]
          break;
 801466a:	e055      	b.n	8014718 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8014672:	691b      	ldr	r3, [r3, #16]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d00b      	beq.n	8014690 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801467e:	691b      	ldr	r3, [r3, #16]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	7c12      	ldrb	r2, [r2, #16]
 8014684:	f107 0108 	add.w	r1, r7, #8
 8014688:	4610      	mov	r0, r2
 801468a:	4798      	blx	r3
 801468c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801468e:	e043      	b.n	8014718 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014690:	6839      	ldr	r1, [r7, #0]
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f000 fa7d 	bl	8014b92 <USBD_CtlError>
            err++;
 8014698:	7afb      	ldrb	r3, [r7, #11]
 801469a:	3301      	adds	r3, #1
 801469c:	72fb      	strb	r3, [r7, #11]
          break;
 801469e:	e03b      	b.n	8014718 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146a6:	695b      	ldr	r3, [r3, #20]
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d00b      	beq.n	80146c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146b2:	695b      	ldr	r3, [r3, #20]
 80146b4:	687a      	ldr	r2, [r7, #4]
 80146b6:	7c12      	ldrb	r2, [r2, #16]
 80146b8:	f107 0108 	add.w	r1, r7, #8
 80146bc:	4610      	mov	r0, r2
 80146be:	4798      	blx	r3
 80146c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146c2:	e029      	b.n	8014718 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146c4:	6839      	ldr	r1, [r7, #0]
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f000 fa63 	bl	8014b92 <USBD_CtlError>
            err++;
 80146cc:	7afb      	ldrb	r3, [r7, #11]
 80146ce:	3301      	adds	r3, #1
 80146d0:	72fb      	strb	r3, [r7, #11]
          break;
 80146d2:	e021      	b.n	8014718 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146da:	699b      	ldr	r3, [r3, #24]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d00b      	beq.n	80146f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80146e6:	699b      	ldr	r3, [r3, #24]
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	7c12      	ldrb	r2, [r2, #16]
 80146ec:	f107 0108 	add.w	r1, r7, #8
 80146f0:	4610      	mov	r0, r2
 80146f2:	4798      	blx	r3
 80146f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146f6:	e00f      	b.n	8014718 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80146f8:	6839      	ldr	r1, [r7, #0]
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f000 fa49 	bl	8014b92 <USBD_CtlError>
            err++;
 8014700:	7afb      	ldrb	r3, [r7, #11]
 8014702:	3301      	adds	r3, #1
 8014704:	72fb      	strb	r3, [r7, #11]
          break;
 8014706:	e007      	b.n	8014718 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014708:	6839      	ldr	r1, [r7, #0]
 801470a:	6878      	ldr	r0, [r7, #4]
 801470c:	f000 fa41 	bl	8014b92 <USBD_CtlError>
          err++;
 8014710:	7afb      	ldrb	r3, [r7, #11]
 8014712:	3301      	adds	r3, #1
 8014714:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014716:	bf00      	nop
      }
      break;
 8014718:	e037      	b.n	801478a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	7c1b      	ldrb	r3, [r3, #16]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d109      	bne.n	8014736 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801472a:	f107 0208 	add.w	r2, r7, #8
 801472e:	4610      	mov	r0, r2
 8014730:	4798      	blx	r3
 8014732:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014734:	e029      	b.n	801478a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014736:	6839      	ldr	r1, [r7, #0]
 8014738:	6878      	ldr	r0, [r7, #4]
 801473a:	f000 fa2a 	bl	8014b92 <USBD_CtlError>
        err++;
 801473e:	7afb      	ldrb	r3, [r7, #11]
 8014740:	3301      	adds	r3, #1
 8014742:	72fb      	strb	r3, [r7, #11]
      break;
 8014744:	e021      	b.n	801478a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	7c1b      	ldrb	r3, [r3, #16]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d10d      	bne.n	801476a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014756:	f107 0208 	add.w	r2, r7, #8
 801475a:	4610      	mov	r0, r2
 801475c:	4798      	blx	r3
 801475e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	3301      	adds	r3, #1
 8014764:	2207      	movs	r2, #7
 8014766:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014768:	e00f      	b.n	801478a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801476a:	6839      	ldr	r1, [r7, #0]
 801476c:	6878      	ldr	r0, [r7, #4]
 801476e:	f000 fa10 	bl	8014b92 <USBD_CtlError>
        err++;
 8014772:	7afb      	ldrb	r3, [r7, #11]
 8014774:	3301      	adds	r3, #1
 8014776:	72fb      	strb	r3, [r7, #11]
      break;
 8014778:	e007      	b.n	801478a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801477a:	6839      	ldr	r1, [r7, #0]
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f000 fa08 	bl	8014b92 <USBD_CtlError>
      err++;
 8014782:	7afb      	ldrb	r3, [r7, #11]
 8014784:	3301      	adds	r3, #1
 8014786:	72fb      	strb	r3, [r7, #11]
      break;
 8014788:	bf00      	nop
  }

  if (err != 0U)
 801478a:	7afb      	ldrb	r3, [r7, #11]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d11e      	bne.n	80147ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	88db      	ldrh	r3, [r3, #6]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d016      	beq.n	80147c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014798:	893b      	ldrh	r3, [r7, #8]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d00e      	beq.n	80147bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	88da      	ldrh	r2, [r3, #6]
 80147a2:	893b      	ldrh	r3, [r7, #8]
 80147a4:	4293      	cmp	r3, r2
 80147a6:	bf28      	it	cs
 80147a8:	4613      	movcs	r3, r2
 80147aa:	b29b      	uxth	r3, r3
 80147ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80147ae:	893b      	ldrh	r3, [r7, #8]
 80147b0:	461a      	mov	r2, r3
 80147b2:	68f9      	ldr	r1, [r7, #12]
 80147b4:	6878      	ldr	r0, [r7, #4]
 80147b6:	f000 fa69 	bl	8014c8c <USBD_CtlSendData>
 80147ba:	e009      	b.n	80147d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80147bc:	6839      	ldr	r1, [r7, #0]
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 f9e7 	bl	8014b92 <USBD_CtlError>
 80147c4:	e004      	b.n	80147d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80147c6:	6878      	ldr	r0, [r7, #4]
 80147c8:	f000 faba 	bl	8014d40 <USBD_CtlSendStatus>
 80147cc:	e000      	b.n	80147d0 <USBD_GetDescriptor+0x320>
    return;
 80147ce:	bf00      	nop
  }
}
 80147d0:	3710      	adds	r7, #16
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop

080147d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b084      	sub	sp, #16
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80147e2:	683b      	ldr	r3, [r7, #0]
 80147e4:	889b      	ldrh	r3, [r3, #4]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d131      	bne.n	801484e <USBD_SetAddress+0x76>
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	88db      	ldrh	r3, [r3, #6]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d12d      	bne.n	801484e <USBD_SetAddress+0x76>
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	885b      	ldrh	r3, [r3, #2]
 80147f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80147f8:	d829      	bhi.n	801484e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	885b      	ldrh	r3, [r3, #2]
 80147fe:	b2db      	uxtb	r3, r3
 8014800:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014804:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801480c:	b2db      	uxtb	r3, r3
 801480e:	2b03      	cmp	r3, #3
 8014810:	d104      	bne.n	801481c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014812:	6839      	ldr	r1, [r7, #0]
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f000 f9bc 	bl	8014b92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801481a:	e01d      	b.n	8014858 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	7bfa      	ldrb	r2, [r7, #15]
 8014820:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014824:	7bfb      	ldrb	r3, [r7, #15]
 8014826:	4619      	mov	r1, r3
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f004 fd09 	bl	8019240 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f000 fa86 	bl	8014d40 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014834:	7bfb      	ldrb	r3, [r7, #15]
 8014836:	2b00      	cmp	r3, #0
 8014838:	d004      	beq.n	8014844 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2202      	movs	r2, #2
 801483e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014842:	e009      	b.n	8014858 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2201      	movs	r2, #1
 8014848:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801484c:	e004      	b.n	8014858 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801484e:	6839      	ldr	r1, [r7, #0]
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f000 f99e 	bl	8014b92 <USBD_CtlError>
  }
}
 8014856:	bf00      	nop
 8014858:	bf00      	nop
 801485a:	3710      	adds	r7, #16
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}

08014860 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b084      	sub	sp, #16
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801486a:	2300      	movs	r3, #0
 801486c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801486e:	683b      	ldr	r3, [r7, #0]
 8014870:	885b      	ldrh	r3, [r3, #2]
 8014872:	b2da      	uxtb	r2, r3
 8014874:	4b4e      	ldr	r3, [pc, #312]	@ (80149b0 <USBD_SetConfig+0x150>)
 8014876:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014878:	4b4d      	ldr	r3, [pc, #308]	@ (80149b0 <USBD_SetConfig+0x150>)
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	2b01      	cmp	r3, #1
 801487e:	d905      	bls.n	801488c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014880:	6839      	ldr	r1, [r7, #0]
 8014882:	6878      	ldr	r0, [r7, #4]
 8014884:	f000 f985 	bl	8014b92 <USBD_CtlError>
    return USBD_FAIL;
 8014888:	2303      	movs	r3, #3
 801488a:	e08c      	b.n	80149a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014892:	b2db      	uxtb	r3, r3
 8014894:	2b02      	cmp	r3, #2
 8014896:	d002      	beq.n	801489e <USBD_SetConfig+0x3e>
 8014898:	2b03      	cmp	r3, #3
 801489a:	d029      	beq.n	80148f0 <USBD_SetConfig+0x90>
 801489c:	e075      	b.n	801498a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801489e:	4b44      	ldr	r3, [pc, #272]	@ (80149b0 <USBD_SetConfig+0x150>)
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d020      	beq.n	80148e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80148a6:	4b42      	ldr	r3, [pc, #264]	@ (80149b0 <USBD_SetConfig+0x150>)
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	461a      	mov	r2, r3
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80148b0:	4b3f      	ldr	r3, [pc, #252]	@ (80149b0 <USBD_SetConfig+0x150>)
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	4619      	mov	r1, r3
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f7ff f84b 	bl	8013952 <USBD_SetClassConfig>
 80148bc:	4603      	mov	r3, r0
 80148be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80148c0:	7bfb      	ldrb	r3, [r7, #15]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d008      	beq.n	80148d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80148c6:	6839      	ldr	r1, [r7, #0]
 80148c8:	6878      	ldr	r0, [r7, #4]
 80148ca:	f000 f962 	bl	8014b92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2202      	movs	r2, #2
 80148d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80148d6:	e065      	b.n	80149a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80148d8:	6878      	ldr	r0, [r7, #4]
 80148da:	f000 fa31 	bl	8014d40 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2203      	movs	r2, #3
 80148e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80148e6:	e05d      	b.n	80149a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f000 fa29 	bl	8014d40 <USBD_CtlSendStatus>
      break;
 80148ee:	e059      	b.n	80149a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80148f0:	4b2f      	ldr	r3, [pc, #188]	@ (80149b0 <USBD_SetConfig+0x150>)
 80148f2:	781b      	ldrb	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d112      	bne.n	801491e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2202      	movs	r2, #2
 80148fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8014900:	4b2b      	ldr	r3, [pc, #172]	@ (80149b0 <USBD_SetConfig+0x150>)
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	461a      	mov	r2, r3
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801490a:	4b29      	ldr	r3, [pc, #164]	@ (80149b0 <USBD_SetConfig+0x150>)
 801490c:	781b      	ldrb	r3, [r3, #0]
 801490e:	4619      	mov	r1, r3
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f7ff f83a 	bl	801398a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f000 fa12 	bl	8014d40 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801491c:	e042      	b.n	80149a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801491e:	4b24      	ldr	r3, [pc, #144]	@ (80149b0 <USBD_SetConfig+0x150>)
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	461a      	mov	r2, r3
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	685b      	ldr	r3, [r3, #4]
 8014928:	429a      	cmp	r2, r3
 801492a:	d02a      	beq.n	8014982 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	b2db      	uxtb	r3, r3
 8014932:	4619      	mov	r1, r3
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f7ff f828 	bl	801398a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801493a:	4b1d      	ldr	r3, [pc, #116]	@ (80149b0 <USBD_SetConfig+0x150>)
 801493c:	781b      	ldrb	r3, [r3, #0]
 801493e:	461a      	mov	r2, r3
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014944:	4b1a      	ldr	r3, [pc, #104]	@ (80149b0 <USBD_SetConfig+0x150>)
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	4619      	mov	r1, r3
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7ff f801 	bl	8013952 <USBD_SetClassConfig>
 8014950:	4603      	mov	r3, r0
 8014952:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014954:	7bfb      	ldrb	r3, [r7, #15]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d00f      	beq.n	801497a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801495a:	6839      	ldr	r1, [r7, #0]
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f000 f918 	bl	8014b92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	685b      	ldr	r3, [r3, #4]
 8014966:	b2db      	uxtb	r3, r3
 8014968:	4619      	mov	r1, r3
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f7ff f80d 	bl	801398a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2202      	movs	r2, #2
 8014974:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8014978:	e014      	b.n	80149a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f000 f9e0 	bl	8014d40 <USBD_CtlSendStatus>
      break;
 8014980:	e010      	b.n	80149a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f000 f9dc 	bl	8014d40 <USBD_CtlSendStatus>
      break;
 8014988:	e00c      	b.n	80149a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801498a:	6839      	ldr	r1, [r7, #0]
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f000 f900 	bl	8014b92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014992:	4b07      	ldr	r3, [pc, #28]	@ (80149b0 <USBD_SetConfig+0x150>)
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	4619      	mov	r1, r3
 8014998:	6878      	ldr	r0, [r7, #4]
 801499a:	f7fe fff6 	bl	801398a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801499e:	2303      	movs	r3, #3
 80149a0:	73fb      	strb	r3, [r7, #15]
      break;
 80149a2:	bf00      	nop
  }

  return ret;
 80149a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80149a6:	4618      	mov	r0, r3
 80149a8:	3710      	adds	r7, #16
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}
 80149ae:	bf00      	nop
 80149b0:	20001520 	.word	0x20001520

080149b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80149b4:	b580      	push	{r7, lr}
 80149b6:	b082      	sub	sp, #8
 80149b8:	af00      	add	r7, sp, #0
 80149ba:	6078      	str	r0, [r7, #4]
 80149bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	88db      	ldrh	r3, [r3, #6]
 80149c2:	2b01      	cmp	r3, #1
 80149c4:	d004      	beq.n	80149d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80149c6:	6839      	ldr	r1, [r7, #0]
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f000 f8e2 	bl	8014b92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80149ce:	e023      	b.n	8014a18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80149d6:	b2db      	uxtb	r3, r3
 80149d8:	2b02      	cmp	r3, #2
 80149da:	dc02      	bgt.n	80149e2 <USBD_GetConfig+0x2e>
 80149dc:	2b00      	cmp	r3, #0
 80149de:	dc03      	bgt.n	80149e8 <USBD_GetConfig+0x34>
 80149e0:	e015      	b.n	8014a0e <USBD_GetConfig+0x5a>
 80149e2:	2b03      	cmp	r3, #3
 80149e4:	d00b      	beq.n	80149fe <USBD_GetConfig+0x4a>
 80149e6:	e012      	b.n	8014a0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2200      	movs	r2, #0
 80149ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	3308      	adds	r3, #8
 80149f2:	2201      	movs	r2, #1
 80149f4:	4619      	mov	r1, r3
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f000 f948 	bl	8014c8c <USBD_CtlSendData>
        break;
 80149fc:	e00c      	b.n	8014a18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	3304      	adds	r3, #4
 8014a02:	2201      	movs	r2, #1
 8014a04:	4619      	mov	r1, r3
 8014a06:	6878      	ldr	r0, [r7, #4]
 8014a08:	f000 f940 	bl	8014c8c <USBD_CtlSendData>
        break;
 8014a0c:	e004      	b.n	8014a18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014a0e:	6839      	ldr	r1, [r7, #0]
 8014a10:	6878      	ldr	r0, [r7, #4]
 8014a12:	f000 f8be 	bl	8014b92 <USBD_CtlError>
        break;
 8014a16:	bf00      	nop
}
 8014a18:	bf00      	nop
 8014a1a:	3708      	adds	r7, #8
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd80      	pop	{r7, pc}

08014a20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b082      	sub	sp, #8
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014a30:	b2db      	uxtb	r3, r3
 8014a32:	3b01      	subs	r3, #1
 8014a34:	2b02      	cmp	r3, #2
 8014a36:	d81e      	bhi.n	8014a76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	88db      	ldrh	r3, [r3, #6]
 8014a3c:	2b02      	cmp	r3, #2
 8014a3e:	d004      	beq.n	8014a4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014a40:	6839      	ldr	r1, [r7, #0]
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f000 f8a5 	bl	8014b92 <USBD_CtlError>
        break;
 8014a48:	e01a      	b.n	8014a80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2201      	movs	r2, #1
 8014a4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d005      	beq.n	8014a66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	68db      	ldr	r3, [r3, #12]
 8014a5e:	f043 0202 	orr.w	r2, r3, #2
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	330c      	adds	r3, #12
 8014a6a:	2202      	movs	r2, #2
 8014a6c:	4619      	mov	r1, r3
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f000 f90c 	bl	8014c8c <USBD_CtlSendData>
      break;
 8014a74:	e004      	b.n	8014a80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014a76:	6839      	ldr	r1, [r7, #0]
 8014a78:	6878      	ldr	r0, [r7, #4]
 8014a7a:	f000 f88a 	bl	8014b92 <USBD_CtlError>
      break;
 8014a7e:	bf00      	nop
  }
}
 8014a80:	bf00      	nop
 8014a82:	3708      	adds	r7, #8
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}

08014a88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b082      	sub	sp, #8
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
 8014a90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014a92:	683b      	ldr	r3, [r7, #0]
 8014a94:	885b      	ldrh	r3, [r3, #2]
 8014a96:	2b01      	cmp	r3, #1
 8014a98:	d107      	bne.n	8014aaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2201      	movs	r2, #1
 8014a9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f000 f94c 	bl	8014d40 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014aa8:	e013      	b.n	8014ad2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014aaa:	683b      	ldr	r3, [r7, #0]
 8014aac:	885b      	ldrh	r3, [r3, #2]
 8014aae:	2b02      	cmp	r3, #2
 8014ab0:	d10b      	bne.n	8014aca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	889b      	ldrh	r3, [r3, #4]
 8014ab6:	0a1b      	lsrs	r3, r3, #8
 8014ab8:	b29b      	uxth	r3, r3
 8014aba:	b2da      	uxtb	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f000 f93c 	bl	8014d40 <USBD_CtlSendStatus>
}
 8014ac8:	e003      	b.n	8014ad2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014aca:	6839      	ldr	r1, [r7, #0]
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f000 f860 	bl	8014b92 <USBD_CtlError>
}
 8014ad2:	bf00      	nop
 8014ad4:	3708      	adds	r7, #8
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}

08014ada <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ada:	b580      	push	{r7, lr}
 8014adc:	b082      	sub	sp, #8
 8014ade:	af00      	add	r7, sp, #0
 8014ae0:	6078      	str	r0, [r7, #4]
 8014ae2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014aea:	b2db      	uxtb	r3, r3
 8014aec:	3b01      	subs	r3, #1
 8014aee:	2b02      	cmp	r3, #2
 8014af0:	d80b      	bhi.n	8014b0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	885b      	ldrh	r3, [r3, #2]
 8014af6:	2b01      	cmp	r3, #1
 8014af8:	d10c      	bne.n	8014b14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	2200      	movs	r2, #0
 8014afe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014b02:	6878      	ldr	r0, [r7, #4]
 8014b04:	f000 f91c 	bl	8014d40 <USBD_CtlSendStatus>
      }
      break;
 8014b08:	e004      	b.n	8014b14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014b0a:	6839      	ldr	r1, [r7, #0]
 8014b0c:	6878      	ldr	r0, [r7, #4]
 8014b0e:	f000 f840 	bl	8014b92 <USBD_CtlError>
      break;
 8014b12:	e000      	b.n	8014b16 <USBD_ClrFeature+0x3c>
      break;
 8014b14:	bf00      	nop
  }
}
 8014b16:	bf00      	nop
 8014b18:	3708      	adds	r7, #8
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bd80      	pop	{r7, pc}

08014b1e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014b1e:	b580      	push	{r7, lr}
 8014b20:	b084      	sub	sp, #16
 8014b22:	af00      	add	r7, sp, #0
 8014b24:	6078      	str	r0, [r7, #4]
 8014b26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014b28:	683b      	ldr	r3, [r7, #0]
 8014b2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	781a      	ldrb	r2, [r3, #0]
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014b34:	68fb      	ldr	r3, [r7, #12]
 8014b36:	3301      	adds	r3, #1
 8014b38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	781a      	ldrb	r2, [r3, #0]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	3301      	adds	r3, #1
 8014b46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014b48:	68f8      	ldr	r0, [r7, #12]
 8014b4a:	f7ff fa16 	bl	8013f7a <SWAPBYTE>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	461a      	mov	r2, r3
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	3301      	adds	r3, #1
 8014b5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b5c:	68fb      	ldr	r3, [r7, #12]
 8014b5e:	3301      	adds	r3, #1
 8014b60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014b62:	68f8      	ldr	r0, [r7, #12]
 8014b64:	f7ff fa09 	bl	8013f7a <SWAPBYTE>
 8014b68:	4603      	mov	r3, r0
 8014b6a:	461a      	mov	r2, r3
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	3301      	adds	r3, #1
 8014b74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	3301      	adds	r3, #1
 8014b7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014b7c:	68f8      	ldr	r0, [r7, #12]
 8014b7e:	f7ff f9fc 	bl	8013f7a <SWAPBYTE>
 8014b82:	4603      	mov	r3, r0
 8014b84:	461a      	mov	r2, r3
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	80da      	strh	r2, [r3, #6]
}
 8014b8a:	bf00      	nop
 8014b8c:	3710      	adds	r7, #16
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	bd80      	pop	{r7, pc}

08014b92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b92:	b580      	push	{r7, lr}
 8014b94:	b082      	sub	sp, #8
 8014b96:	af00      	add	r7, sp, #0
 8014b98:	6078      	str	r0, [r7, #4]
 8014b9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b9c:	2180      	movs	r1, #128	@ 0x80
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f004 fae4 	bl	801916c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014ba4:	2100      	movs	r1, #0
 8014ba6:	6878      	ldr	r0, [r7, #4]
 8014ba8:	f004 fae0 	bl	801916c <USBD_LL_StallEP>
}
 8014bac:	bf00      	nop
 8014bae:	3708      	adds	r7, #8
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}

08014bb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b086      	sub	sp, #24
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	60f8      	str	r0, [r7, #12]
 8014bbc:	60b9      	str	r1, [r7, #8]
 8014bbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d042      	beq.n	8014c50 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8014bce:	6938      	ldr	r0, [r7, #16]
 8014bd0:	f000 f842 	bl	8014c58 <USBD_GetLen>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	005b      	lsls	r3, r3, #1
 8014bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bde:	d808      	bhi.n	8014bf2 <USBD_GetString+0x3e>
 8014be0:	6938      	ldr	r0, [r7, #16]
 8014be2:	f000 f839 	bl	8014c58 <USBD_GetLen>
 8014be6:	4603      	mov	r3, r0
 8014be8:	3301      	adds	r3, #1
 8014bea:	b29b      	uxth	r3, r3
 8014bec:	005b      	lsls	r3, r3, #1
 8014bee:	b29a      	uxth	r2, r3
 8014bf0:	e001      	b.n	8014bf6 <USBD_GetString+0x42>
 8014bf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014bfa:	7dfb      	ldrb	r3, [r7, #23]
 8014bfc:	68ba      	ldr	r2, [r7, #8]
 8014bfe:	4413      	add	r3, r2
 8014c00:	687a      	ldr	r2, [r7, #4]
 8014c02:	7812      	ldrb	r2, [r2, #0]
 8014c04:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c06:	7dfb      	ldrb	r3, [r7, #23]
 8014c08:	3301      	adds	r3, #1
 8014c0a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014c0c:	7dfb      	ldrb	r3, [r7, #23]
 8014c0e:	68ba      	ldr	r2, [r7, #8]
 8014c10:	4413      	add	r3, r2
 8014c12:	2203      	movs	r2, #3
 8014c14:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c16:	7dfb      	ldrb	r3, [r7, #23]
 8014c18:	3301      	adds	r3, #1
 8014c1a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014c1c:	e013      	b.n	8014c46 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014c1e:	7dfb      	ldrb	r3, [r7, #23]
 8014c20:	68ba      	ldr	r2, [r7, #8]
 8014c22:	4413      	add	r3, r2
 8014c24:	693a      	ldr	r2, [r7, #16]
 8014c26:	7812      	ldrb	r2, [r2, #0]
 8014c28:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014c2a:	693b      	ldr	r3, [r7, #16]
 8014c2c:	3301      	adds	r3, #1
 8014c2e:	613b      	str	r3, [r7, #16]
    idx++;
 8014c30:	7dfb      	ldrb	r3, [r7, #23]
 8014c32:	3301      	adds	r3, #1
 8014c34:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014c36:	7dfb      	ldrb	r3, [r7, #23]
 8014c38:	68ba      	ldr	r2, [r7, #8]
 8014c3a:	4413      	add	r3, r2
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014c40:	7dfb      	ldrb	r3, [r7, #23]
 8014c42:	3301      	adds	r3, #1
 8014c44:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014c46:	693b      	ldr	r3, [r7, #16]
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1e7      	bne.n	8014c1e <USBD_GetString+0x6a>
 8014c4e:	e000      	b.n	8014c52 <USBD_GetString+0x9e>
    return;
 8014c50:	bf00      	nop
  }
}
 8014c52:	3718      	adds	r7, #24
 8014c54:	46bd      	mov	sp, r7
 8014c56:	bd80      	pop	{r7, pc}

08014c58 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014c58:	b480      	push	{r7}
 8014c5a:	b085      	sub	sp, #20
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014c60:	2300      	movs	r3, #0
 8014c62:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014c68:	e005      	b.n	8014c76 <USBD_GetLen+0x1e>
  {
    len++;
 8014c6a:	7bfb      	ldrb	r3, [r7, #15]
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014c70:	68bb      	ldr	r3, [r7, #8]
 8014c72:	3301      	adds	r3, #1
 8014c74:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	781b      	ldrb	r3, [r3, #0]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d1f5      	bne.n	8014c6a <USBD_GetLen+0x12>
  }

  return len;
 8014c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3714      	adds	r7, #20
 8014c84:	46bd      	mov	sp, r7
 8014c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c8a:	4770      	bx	lr

08014c8c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b084      	sub	sp, #16
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	60f8      	str	r0, [r7, #12]
 8014c94:	60b9      	str	r1, [r7, #8]
 8014c96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2202      	movs	r2, #2
 8014c9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	687a      	ldr	r2, [r7, #4]
 8014ca4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	68ba      	ldr	r2, [r7, #8]
 8014cb0:	2100      	movs	r1, #0
 8014cb2:	68f8      	ldr	r0, [r7, #12]
 8014cb4:	f004 fae3 	bl	801927e <USBD_LL_Transmit>

  return USBD_OK;
 8014cb8:	2300      	movs	r3, #0
}
 8014cba:	4618      	mov	r0, r3
 8014cbc:	3710      	adds	r7, #16
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}

08014cc2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014cc2:	b580      	push	{r7, lr}
 8014cc4:	b084      	sub	sp, #16
 8014cc6:	af00      	add	r7, sp, #0
 8014cc8:	60f8      	str	r0, [r7, #12]
 8014cca:	60b9      	str	r1, [r7, #8]
 8014ccc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	68ba      	ldr	r2, [r7, #8]
 8014cd2:	2100      	movs	r1, #0
 8014cd4:	68f8      	ldr	r0, [r7, #12]
 8014cd6:	f004 fad2 	bl	801927e <USBD_LL_Transmit>

  return USBD_OK;
 8014cda:	2300      	movs	r3, #0
}
 8014cdc:	4618      	mov	r0, r3
 8014cde:	3710      	adds	r7, #16
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	bd80      	pop	{r7, pc}

08014ce4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b084      	sub	sp, #16
 8014ce8:	af00      	add	r7, sp, #0
 8014cea:	60f8      	str	r0, [r7, #12]
 8014cec:	60b9      	str	r1, [r7, #8]
 8014cee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2203      	movs	r2, #3
 8014cf4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	687a      	ldr	r2, [r7, #4]
 8014cfc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	687a      	ldr	r2, [r7, #4]
 8014d04:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	68ba      	ldr	r2, [r7, #8]
 8014d0c:	2100      	movs	r1, #0
 8014d0e:	68f8      	ldr	r0, [r7, #12]
 8014d10:	f004 fad6 	bl	80192c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d14:	2300      	movs	r3, #0
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	3710      	adds	r7, #16
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}

08014d1e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014d1e:	b580      	push	{r7, lr}
 8014d20:	b084      	sub	sp, #16
 8014d22:	af00      	add	r7, sp, #0
 8014d24:	60f8      	str	r0, [r7, #12]
 8014d26:	60b9      	str	r1, [r7, #8]
 8014d28:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	68ba      	ldr	r2, [r7, #8]
 8014d2e:	2100      	movs	r1, #0
 8014d30:	68f8      	ldr	r0, [r7, #12]
 8014d32:	f004 fac5 	bl	80192c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d36:	2300      	movs	r3, #0
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3710      	adds	r7, #16
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bd80      	pop	{r7, pc}

08014d40 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b082      	sub	sp, #8
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	2204      	movs	r2, #4
 8014d4c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014d50:	2300      	movs	r3, #0
 8014d52:	2200      	movs	r2, #0
 8014d54:	2100      	movs	r1, #0
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f004 fa91 	bl	801927e <USBD_LL_Transmit>

  return USBD_OK;
 8014d5c:	2300      	movs	r3, #0
}
 8014d5e:	4618      	mov	r0, r3
 8014d60:	3708      	adds	r7, #8
 8014d62:	46bd      	mov	sp, r7
 8014d64:	bd80      	pop	{r7, pc}

08014d66 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014d66:	b580      	push	{r7, lr}
 8014d68:	b082      	sub	sp, #8
 8014d6a:	af00      	add	r7, sp, #0
 8014d6c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2205      	movs	r2, #5
 8014d72:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014d76:	2300      	movs	r3, #0
 8014d78:	2200      	movs	r2, #0
 8014d7a:	2100      	movs	r1, #0
 8014d7c:	6878      	ldr	r0, [r7, #4]
 8014d7e:	f004 fa9f 	bl	80192c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d82:	2300      	movs	r3, #0
}
 8014d84:	4618      	mov	r0, r3
 8014d86:	3708      	adds	r7, #8
 8014d88:	46bd      	mov	sp, r7
 8014d8a:	bd80      	pop	{r7, pc}

08014d8c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b088      	sub	sp, #32
 8014d90:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8014d92:	2300      	movs	r3, #0
 8014d94:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014d96:	f107 0308 	add.w	r3, r7, #8
 8014d9a:	2218      	movs	r2, #24
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	4618      	mov	r0, r3
 8014da0:	f001 f92d 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014da4:	233f      	movs	r3, #63	@ 0x3f
 8014da6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014da8:	2381      	movs	r3, #129	@ 0x81
 8014daa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014dac:	1dfb      	adds	r3, r7, #7
 8014dae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8014db0:	2301      	movs	r3, #1
 8014db2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014db4:	f107 0308 	add.w	r3, r7, #8
 8014db8:	2100      	movs	r1, #0
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f001 fba8 	bl	8016510 <hci_send_req>
 8014dc0:	4603      	mov	r3, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	da01      	bge.n	8014dca <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014dc6:	23ff      	movs	r3, #255	@ 0xff
 8014dc8:	e000      	b.n	8014dcc <aci_gap_set_non_discoverable+0x40>
  return status;
 8014dca:	79fb      	ldrb	r3, [r7, #7]
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3720      	adds	r7, #32
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd80      	pop	{r7, pc}

08014dd4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8014dd4:	b5b0      	push	{r4, r5, r7, lr}
 8014dd6:	b0ce      	sub	sp, #312	@ 0x138
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	4605      	mov	r5, r0
 8014ddc:	460c      	mov	r4, r1
 8014dde:	4610      	mov	r0, r2
 8014de0:	4619      	mov	r1, r3
 8014de2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014de6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8014dea:	462a      	mov	r2, r5
 8014dec:	701a      	strb	r2, [r3, #0]
 8014dee:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014df2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8014df6:	4622      	mov	r2, r4
 8014df8:	801a      	strh	r2, [r3, #0]
 8014dfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014dfe:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8014e02:	4602      	mov	r2, r0
 8014e04:	801a      	strh	r2, [r3, #0]
 8014e06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e0a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8014e0e:	460a      	mov	r2, r1
 8014e10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8014e12:	f107 0310 	add.w	r3, r7, #16
 8014e16:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8014e1a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014e1e:	3308      	adds	r3, #8
 8014e20:	f107 0210 	add.w	r2, r7, #16
 8014e24:	4413      	add	r3, r2
 8014e26:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8014e2a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014e2e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014e32:	4413      	add	r3, r2
 8014e34:	3309      	adds	r3, #9
 8014e36:	f107 0210 	add.w	r2, r7, #16
 8014e3a:	4413      	add	r3, r2
 8014e3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014e40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014e44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014e48:	2200      	movs	r2, #0
 8014e4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 8014e52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e56:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014e5a:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8014e5e:	7812      	ldrb	r2, [r2, #0]
 8014e60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014e62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e66:	3301      	adds	r3, #1
 8014e68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014e6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014e74:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8014e78:	8812      	ldrh	r2, [r2, #0]
 8014e7a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014e7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e82:	3302      	adds	r3, #2
 8014e84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014e88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014e8c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014e90:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8014e94:	8812      	ldrh	r2, [r2, #0]
 8014e96:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014e9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e9e:	3302      	adds	r3, #2
 8014ea0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8014ea4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ea8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8014eac:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8014eb0:	7812      	ldrb	r2, [r2, #0]
 8014eb2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014eb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014eb8:	3301      	adds	r3, #1
 8014eba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014ebe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ec2:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8014ec6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014ec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ecc:	3301      	adds	r3, #1
 8014ece:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8014ed2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014ed6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014eda:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014edc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ee0:	3301      	adds	r3, #1
 8014ee2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8014ee6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8014eea:	3308      	adds	r3, #8
 8014eec:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8014ef0:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	f001 f872 	bl	8015fde <Osal_MemCpy>
    index_input += Local_Name_Length;
 8014efa:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8014efe:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014f02:	4413      	add	r3, r2
 8014f04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8014f08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014f0c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014f10:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014f12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f16:	3301      	adds	r3, #1
 8014f18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8014f1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8014f20:	3301      	adds	r3, #1
 8014f22:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8014f26:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f001 f857 	bl	8015fde <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8014f30:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8014f34:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8014f38:	4413      	add	r3, r2
 8014f3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8014f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f42:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8014f46:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f4c:	3302      	adds	r3, #2
 8014f4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8014f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014f56:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8014f5a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f60:	3302      	adds	r3, #2
 8014f62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014f6a:	2218      	movs	r2, #24
 8014f6c:	2100      	movs	r1, #0
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f001 f845 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8014f74:	233f      	movs	r3, #63	@ 0x3f
 8014f76:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8014f7a:	2383      	movs	r3, #131	@ 0x83
 8014f7c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8014f80:	f107 0310 	add.w	r3, r7, #16
 8014f84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8014f88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8014f90:	f107 030f 	add.w	r3, r7, #15
 8014f94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8014f98:	2301      	movs	r3, #1
 8014f9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014f9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f001 fab3 	bl	8016510 <hci_send_req>
 8014faa:	4603      	mov	r3, r0
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	da01      	bge.n	8014fb4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8014fb0:	23ff      	movs	r3, #255	@ 0xff
 8014fb2:	e004      	b.n	8014fbe <aci_gap_set_discoverable+0x1ea>
  return status;
 8014fb4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8014fb8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014fbc:	781b      	ldrb	r3, [r3, #0]
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bdb0      	pop	{r4, r5, r7, pc}

08014fc8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b0cc      	sub	sp, #304	@ 0x130
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	4602      	mov	r2, r0
 8014fd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fd4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8014fd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8014fda:	f107 0310 	add.w	r3, r7, #16
 8014fde:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8014fe2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014fe6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014fea:	2200      	movs	r2, #0
 8014fec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014fee:	2300      	movs	r3, #0
 8014ff0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8014ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8014ff8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014ffc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015000:	7812      	ldrb	r2, [r2, #0]
 8015002:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015004:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015008:	3301      	adds	r3, #1
 801500a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801500e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015012:	2218      	movs	r2, #24
 8015014:	2100      	movs	r1, #0
 8015016:	4618      	mov	r0, r3
 8015018:	f000 fff1 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 801501c:	233f      	movs	r3, #63	@ 0x3f
 801501e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8015022:	2385      	movs	r3, #133	@ 0x85
 8015024:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015028:	f107 0310 	add.w	r3, r7, #16
 801502c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015030:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015034:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015038:	f107 030f 	add.w	r3, r7, #15
 801503c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015040:	2301      	movs	r3, #1
 8015042:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015046:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801504a:	2100      	movs	r1, #0
 801504c:	4618      	mov	r0, r3
 801504e:	f001 fa5f 	bl	8016510 <hci_send_req>
 8015052:	4603      	mov	r3, r0
 8015054:	2b00      	cmp	r3, #0
 8015056:	da01      	bge.n	801505c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8015058:	23ff      	movs	r3, #255	@ 0xff
 801505a:	e004      	b.n	8015066 <aci_gap_set_io_capability+0x9e>
  return status;
 801505c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015060:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015064:	781b      	ldrb	r3, [r3, #0]
}
 8015066:	4618      	mov	r0, r3
 8015068:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801506c:	46bd      	mov	sp, r7
 801506e:	bd80      	pop	{r7, pc}

08015070 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8015070:	b5b0      	push	{r4, r5, r7, lr}
 8015072:	b0cc      	sub	sp, #304	@ 0x130
 8015074:	af00      	add	r7, sp, #0
 8015076:	4605      	mov	r5, r0
 8015078:	460c      	mov	r4, r1
 801507a:	4610      	mov	r0, r2
 801507c:	4619      	mov	r1, r3
 801507e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015082:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015086:	462a      	mov	r2, r5
 8015088:	701a      	strb	r2, [r3, #0]
 801508a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801508e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015092:	4622      	mov	r2, r4
 8015094:	701a      	strb	r2, [r3, #0]
 8015096:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801509a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801509e:	4602      	mov	r2, r0
 80150a0:	701a      	strb	r2, [r3, #0]
 80150a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150a6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80150aa:	460a      	mov	r2, r1
 80150ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80150ae:	f107 0310 	add.w	r3, r7, #16
 80150b2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80150b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80150ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80150be:	2200      	movs	r2, #0
 80150c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80150c2:	2300      	movs	r3, #0
 80150c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80150c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80150d0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80150d4:	7812      	ldrb	r2, [r2, #0]
 80150d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80150d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150dc:	3301      	adds	r3, #1
 80150de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80150e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80150e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80150ea:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80150ee:	7812      	ldrb	r2, [r2, #0]
 80150f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80150f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150f6:	3301      	adds	r3, #1
 80150f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80150fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015100:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015104:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015108:	7812      	ldrb	r2, [r2, #0]
 801510a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801510c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015110:	3301      	adds	r3, #1
 8015112:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8015116:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801511a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801511e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8015122:	7812      	ldrb	r2, [r2, #0]
 8015124:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8015126:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801512a:	3301      	adds	r3, #1
 801512c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8015130:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015134:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8015138:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 801513a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801513e:	3301      	adds	r3, #1
 8015140:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8015144:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015148:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 801514c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801514e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015152:	3301      	adds	r3, #1
 8015154:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8015158:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801515c:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8015160:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8015162:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015166:	3301      	adds	r3, #1
 8015168:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 801516c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015170:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8015174:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8015178:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801517c:	3304      	adds	r3, #4
 801517e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8015182:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015186:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801518a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801518c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015190:	3301      	adds	r3, #1
 8015192:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015196:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801519a:	2218      	movs	r2, #24
 801519c:	2100      	movs	r1, #0
 801519e:	4618      	mov	r0, r3
 80151a0:	f000 ff2d 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 80151a4:	233f      	movs	r3, #63	@ 0x3f
 80151a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80151aa:	2386      	movs	r3, #134	@ 0x86
 80151ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80151b0:	f107 0310 	add.w	r3, r7, #16
 80151b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80151b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80151c0:	f107 030f 	add.w	r3, r7, #15
 80151c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80151c8:	2301      	movs	r3, #1
 80151ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80151ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80151d2:	2100      	movs	r1, #0
 80151d4:	4618      	mov	r0, r3
 80151d6:	f001 f99b 	bl	8016510 <hci_send_req>
 80151da:	4603      	mov	r3, r0
 80151dc:	2b00      	cmp	r3, #0
 80151de:	da01      	bge.n	80151e4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80151e0:	23ff      	movs	r3, #255	@ 0xff
 80151e2:	e004      	b.n	80151ee <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80151e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80151e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80151ec:	781b      	ldrb	r3, [r3, #0]
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bdb0      	pop	{r4, r5, r7, pc}

080151f8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	b0cc      	sub	sp, #304	@ 0x130
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	4602      	mov	r2, r0
 8015200:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015204:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015208:	6019      	str	r1, [r3, #0]
 801520a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801520e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015212:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8015214:	f107 0310 	add.w	r3, r7, #16
 8015218:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801521c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015220:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015224:	2200      	movs	r2, #0
 8015226:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015228:	2300      	movs	r3, #0
 801522a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801522e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015232:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015236:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801523a:	8812      	ldrh	r2, [r2, #0]
 801523c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801523e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015242:	3302      	adds	r3, #2
 8015244:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8015248:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801524c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015250:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8015254:	6812      	ldr	r2, [r2, #0]
 8015256:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 801525a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801525e:	3304      	adds	r3, #4
 8015260:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015264:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015268:	2218      	movs	r2, #24
 801526a:	2100      	movs	r1, #0
 801526c:	4618      	mov	r0, r3
 801526e:	f000 fec6 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015272:	233f      	movs	r3, #63	@ 0x3f
 8015274:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8015278:	2388      	movs	r3, #136	@ 0x88
 801527a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801527e:	f107 0310 	add.w	r3, r7, #16
 8015282:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015286:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801528a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801528e:	f107 030f 	add.w	r3, r7, #15
 8015292:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015296:	2301      	movs	r3, #1
 8015298:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801529c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80152a0:	2100      	movs	r1, #0
 80152a2:	4618      	mov	r0, r3
 80152a4:	f001 f934 	bl	8016510 <hci_send_req>
 80152a8:	4603      	mov	r3, r0
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	da01      	bge.n	80152b2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80152ae:	23ff      	movs	r3, #255	@ 0xff
 80152b0:	e004      	b.n	80152bc <aci_gap_pass_key_resp+0xc4>
  return status;
 80152b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80152ba:	781b      	ldrb	r3, [r3, #0]
}
 80152bc:	4618      	mov	r0, r3
 80152be:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}

080152c6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80152c6:	b590      	push	{r4, r7, lr}
 80152c8:	b0cd      	sub	sp, #308	@ 0x134
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	4604      	mov	r4, r0
 80152ce:	4608      	mov	r0, r1
 80152d0:	4611      	mov	r1, r2
 80152d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80152d6:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80152da:	6013      	str	r3, [r2, #0]
 80152dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152e0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80152e4:	4622      	mov	r2, r4
 80152e6:	701a      	strb	r2, [r3, #0]
 80152e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152ec:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80152f0:	4602      	mov	r2, r0
 80152f2:	701a      	strb	r2, [r3, #0]
 80152f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80152f8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80152fc:	460a      	mov	r2, r1
 80152fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8015300:	f107 0310 	add.w	r3, r7, #16
 8015304:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015308:	f107 0308 	add.w	r3, r7, #8
 801530c:	2207      	movs	r2, #7
 801530e:	2100      	movs	r1, #0
 8015310:	4618      	mov	r0, r3
 8015312:	f000 fe74 	bl	8015ffe <Osal_MemSet>
  int index_input = 0;
 8015316:	2300      	movs	r3, #0
 8015318:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 801531c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015320:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015324:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015328:	7812      	ldrb	r2, [r2, #0]
 801532a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801532c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015330:	3301      	adds	r3, #1
 8015332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8015336:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801533a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801533e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015342:	7812      	ldrb	r2, [r2, #0]
 8015344:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015346:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801534a:	3301      	adds	r3, #1
 801534c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8015350:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015354:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015358:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 801535c:	7812      	ldrb	r2, [r2, #0]
 801535e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015360:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015364:	3301      	adds	r3, #1
 8015366:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801536a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801536e:	2218      	movs	r2, #24
 8015370:	2100      	movs	r1, #0
 8015372:	4618      	mov	r0, r3
 8015374:	f000 fe43 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015378:	233f      	movs	r3, #63	@ 0x3f
 801537a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 801537e:	238a      	movs	r3, #138	@ 0x8a
 8015380:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015384:	f107 0310 	add.w	r3, r7, #16
 8015388:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801538c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015390:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8015394:	f107 0308 	add.w	r3, r7, #8
 8015398:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 801539c:	2307      	movs	r3, #7
 801539e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80153a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80153a6:	2100      	movs	r1, #0
 80153a8:	4618      	mov	r0, r3
 80153aa:	f001 f8b1 	bl	8016510 <hci_send_req>
 80153ae:	4603      	mov	r3, r0
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	da01      	bge.n	80153b8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80153b4:	23ff      	movs	r3, #255	@ 0xff
 80153b6:	e02e      	b.n	8015416 <aci_gap_init+0x150>
  if ( resp.Status )
 80153b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153bc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80153c0:	781b      	ldrb	r3, [r3, #0]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d005      	beq.n	80153d2 <aci_gap_init+0x10c>
    return resp.Status;
 80153c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153ca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80153ce:	781b      	ldrb	r3, [r3, #0]
 80153d0:	e021      	b.n	8015416 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80153d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80153da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80153de:	b29a      	uxth	r2, r3
 80153e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80153ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80153f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80153f4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80153f8:	b29a      	uxth	r2, r3
 80153fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80153fe:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8015400:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015404:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8015408:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801540c:	b29a      	uxth	r2, r3
 801540e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8015412:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015414:	2300      	movs	r3, #0
}
 8015416:	4618      	mov	r0, r3
 8015418:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801541c:	46bd      	mov	sp, r7
 801541e:	bd90      	pop	{r4, r7, pc}

08015420 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8015420:	b580      	push	{r7, lr}
 8015422:	b0cc      	sub	sp, #304	@ 0x130
 8015424:	af00      	add	r7, sp, #0
 8015426:	4602      	mov	r2, r0
 8015428:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801542c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015430:	6019      	str	r1, [r3, #0]
 8015432:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015436:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801543a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 801543c:	f107 0310 	add.w	r3, r7, #16
 8015440:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015444:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015448:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801544c:	2200      	movs	r2, #0
 801544e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015450:	2300      	movs	r3, #0
 8015452:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8015456:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801545a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801545e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015462:	7812      	ldrb	r2, [r2, #0]
 8015464:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015466:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801546a:	3301      	adds	r3, #1
 801546c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8015470:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015474:	1c58      	adds	r0, r3, #1
 8015476:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801547a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801547e:	781a      	ldrb	r2, [r3, #0]
 8015480:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015484:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015488:	6819      	ldr	r1, [r3, #0]
 801548a:	f000 fda8 	bl	8015fde <Osal_MemCpy>
  index_input += AdvDataLen;
 801548e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015492:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015496:	781b      	ldrb	r3, [r3, #0]
 8015498:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801549c:	4413      	add	r3, r2
 801549e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80154a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80154a6:	2218      	movs	r2, #24
 80154a8:	2100      	movs	r1, #0
 80154aa:	4618      	mov	r0, r3
 80154ac:	f000 fda7 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 80154b0:	233f      	movs	r3, #63	@ 0x3f
 80154b2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80154b6:	238e      	movs	r3, #142	@ 0x8e
 80154b8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80154bc:	f107 0310 	add.w	r3, r7, #16
 80154c0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80154c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154c8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80154cc:	f107 030f 	add.w	r3, r7, #15
 80154d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80154d4:	2301      	movs	r3, #1
 80154d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80154da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80154de:	2100      	movs	r1, #0
 80154e0:	4618      	mov	r0, r3
 80154e2:	f001 f815 	bl	8016510 <hci_send_req>
 80154e6:	4603      	mov	r3, r0
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	da01      	bge.n	80154f0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80154ec:	23ff      	movs	r3, #255	@ 0xff
 80154ee:	e004      	b.n	80154fa <aci_gap_update_adv_data+0xda>
  return status;
 80154f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80154f4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80154f8:	781b      	ldrb	r3, [r3, #0]
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}

08015504 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b088      	sub	sp, #32
 8015508:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801550a:	2300      	movs	r3, #0
 801550c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801550e:	f107 0308 	add.w	r3, r7, #8
 8015512:	2218      	movs	r2, #24
 8015514:	2100      	movs	r1, #0
 8015516:	4618      	mov	r0, r3
 8015518:	f000 fd71 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 801551c:	233f      	movs	r3, #63	@ 0x3f
 801551e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8015520:	2392      	movs	r3, #146	@ 0x92
 8015522:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015524:	1dfb      	adds	r3, r7, #7
 8015526:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015528:	2301      	movs	r3, #1
 801552a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801552c:	f107 0308 	add.w	r3, r7, #8
 8015530:	2100      	movs	r1, #0
 8015532:	4618      	mov	r0, r3
 8015534:	f000 ffec 	bl	8016510 <hci_send_req>
 8015538:	4603      	mov	r3, r0
 801553a:	2b00      	cmp	r3, #0
 801553c:	da01      	bge.n	8015542 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 801553e:	23ff      	movs	r3, #255	@ 0xff
 8015540:	e000      	b.n	8015544 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8015542:	79fb      	ldrb	r3, [r7, #7]
}
 8015544:	4618      	mov	r0, r3
 8015546:	3720      	adds	r7, #32
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b0cc      	sub	sp, #304	@ 0x130
 8015550:	af00      	add	r7, sp, #0
 8015552:	4602      	mov	r2, r0
 8015554:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015558:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801555c:	801a      	strh	r2, [r3, #0]
 801555e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015562:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015566:	460a      	mov	r2, r1
 8015568:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801556a:	f107 0310 	add.w	r3, r7, #16
 801556e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015572:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015576:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801557a:	2200      	movs	r2, #0
 801557c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801557e:	2300      	movs	r3, #0
 8015580:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015584:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015588:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801558c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015590:	8812      	ldrh	r2, [r2, #0]
 8015592:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015594:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015598:	3302      	adds	r3, #2
 801559a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 801559e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80155a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80155a6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80155aa:	7812      	ldrb	r2, [r2, #0]
 80155ac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80155ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155b2:	3301      	adds	r3, #1
 80155b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80155b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80155bc:	2218      	movs	r2, #24
 80155be:	2100      	movs	r1, #0
 80155c0:	4618      	mov	r0, r3
 80155c2:	f000 fd1c 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 80155c6:	233f      	movs	r3, #63	@ 0x3f
 80155c8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80155cc:	23a5      	movs	r3, #165	@ 0xa5
 80155ce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80155d2:	f107 0310 	add.w	r3, r7, #16
 80155d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80155da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155de:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80155e2:	f107 030f 	add.w	r3, r7, #15
 80155e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80155ea:	2301      	movs	r3, #1
 80155ec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80155f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80155f4:	2100      	movs	r1, #0
 80155f6:	4618      	mov	r0, r3
 80155f8:	f000 ff8a 	bl	8016510 <hci_send_req>
 80155fc:	4603      	mov	r3, r0
 80155fe:	2b00      	cmp	r3, #0
 8015600:	da01      	bge.n	8015606 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8015602:	23ff      	movs	r3, #255	@ 0xff
 8015604:	e004      	b.n	8015610 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8015606:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801560a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801560e:	781b      	ldrb	r3, [r3, #0]
}
 8015610:	4618      	mov	r0, r3
 8015612:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015616:	46bd      	mov	sp, r7
 8015618:	bd80      	pop	{r7, pc}

0801561a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801561a:	b580      	push	{r7, lr}
 801561c:	b088      	sub	sp, #32
 801561e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015620:	2300      	movs	r3, #0
 8015622:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015624:	f107 0308 	add.w	r3, r7, #8
 8015628:	2218      	movs	r2, #24
 801562a:	2100      	movs	r1, #0
 801562c:	4618      	mov	r0, r3
 801562e:	f000 fce6 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015632:	233f      	movs	r3, #63	@ 0x3f
 8015634:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8015636:	f240 1301 	movw	r3, #257	@ 0x101
 801563a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801563c:	1dfb      	adds	r3, r7, #7
 801563e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015640:	2301      	movs	r3, #1
 8015642:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015644:	f107 0308 	add.w	r3, r7, #8
 8015648:	2100      	movs	r1, #0
 801564a:	4618      	mov	r0, r3
 801564c:	f000 ff60 	bl	8016510 <hci_send_req>
 8015650:	4603      	mov	r3, r0
 8015652:	2b00      	cmp	r3, #0
 8015654:	da01      	bge.n	801565a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8015656:	23ff      	movs	r3, #255	@ 0xff
 8015658:	e000      	b.n	801565c <aci_gatt_init+0x42>
  return status;
 801565a:	79fb      	ldrb	r3, [r7, #7]
}
 801565c:	4618      	mov	r0, r3
 801565e:	3720      	adds	r7, #32
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}

08015664 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8015664:	b590      	push	{r4, r7, lr}
 8015666:	b0cf      	sub	sp, #316	@ 0x13c
 8015668:	af00      	add	r7, sp, #0
 801566a:	4604      	mov	r4, r0
 801566c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8015670:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8015674:	6001      	str	r1, [r0, #0]
 8015676:	4610      	mov	r0, r2
 8015678:	4619      	mov	r1, r3
 801567a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801567e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8015682:	4622      	mov	r2, r4
 8015684:	701a      	strb	r2, [r3, #0]
 8015686:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801568a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801568e:	4602      	mov	r2, r0
 8015690:	701a      	strb	r2, [r3, #0]
 8015692:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015696:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801569a:	460a      	mov	r2, r1
 801569c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 801569e:	f107 0310 	add.w	r3, r7, #16
 80156a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80156a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156aa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80156ae:	781b      	ldrb	r3, [r3, #0]
 80156b0:	2b01      	cmp	r3, #1
 80156b2:	d00a      	beq.n	80156ca <aci_gatt_add_service+0x66>
 80156b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80156b8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	2b02      	cmp	r3, #2
 80156c0:	d101      	bne.n	80156c6 <aci_gatt_add_service+0x62>
 80156c2:	2311      	movs	r3, #17
 80156c4:	e002      	b.n	80156cc <aci_gatt_add_service+0x68>
 80156c6:	2301      	movs	r3, #1
 80156c8:	e000      	b.n	80156cc <aci_gatt_add_service+0x68>
 80156ca:	2303      	movs	r3, #3
 80156cc:	f107 0210 	add.w	r2, r7, #16
 80156d0:	4413      	add	r3, r2
 80156d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80156d6:	f107 030c 	add.w	r3, r7, #12
 80156da:	2203      	movs	r2, #3
 80156dc:	2100      	movs	r1, #0
 80156de:	4618      	mov	r0, r3
 80156e0:	f000 fc8d 	bl	8015ffe <Osal_MemSet>
  int index_input = 0;
 80156e4:	2300      	movs	r3, #0
 80156e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80156ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80156ee:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80156f2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80156f6:	7812      	ldrb	r2, [r2, #0]
 80156f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80156fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156fe:	3301      	adds	r3, #1
 8015700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8015704:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8015708:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801570c:	781b      	ldrb	r3, [r3, #0]
 801570e:	2b01      	cmp	r3, #1
 8015710:	d002      	beq.n	8015718 <aci_gatt_add_service+0xb4>
 8015712:	2b02      	cmp	r3, #2
 8015714:	d004      	beq.n	8015720 <aci_gatt_add_service+0xbc>
 8015716:	e007      	b.n	8015728 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8015718:	2302      	movs	r3, #2
 801571a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 801571e:	e005      	b.n	801572c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8015720:	2310      	movs	r3, #16
 8015722:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8015726:	e001      	b.n	801572c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8015728:	2397      	movs	r3, #151	@ 0x97
 801572a:	e06c      	b.n	8015806 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 801572c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015730:	1c58      	adds	r0, r3, #1
 8015732:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8015736:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801573a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801573e:	6819      	ldr	r1, [r3, #0]
 8015740:	f000 fc4d 	bl	8015fde <Osal_MemCpy>
    index_input += size;
 8015744:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8015748:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801574c:	4413      	add	r3, r2
 801574e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8015752:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015756:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801575a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801575e:	7812      	ldrb	r2, [r2, #0]
 8015760:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8015762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015766:	3301      	adds	r3, #1
 8015768:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 801576c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015770:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8015774:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8015778:	7812      	ldrb	r2, [r2, #0]
 801577a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 801577c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015780:	3301      	adds	r3, #1
 8015782:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015786:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801578a:	2218      	movs	r2, #24
 801578c:	2100      	movs	r1, #0
 801578e:	4618      	mov	r0, r3
 8015790:	f000 fc35 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015794:	233f      	movs	r3, #63	@ 0x3f
 8015796:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 801579a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 801579e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80157a2:	f107 0310 	add.w	r3, r7, #16
 80157a6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80157aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157ae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80157b2:	f107 030c 	add.w	r3, r7, #12
 80157b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80157ba:	2303      	movs	r3, #3
 80157bc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80157c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80157c4:	2100      	movs	r1, #0
 80157c6:	4618      	mov	r0, r3
 80157c8:	f000 fea2 	bl	8016510 <hci_send_req>
 80157cc:	4603      	mov	r3, r0
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	da01      	bge.n	80157d6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80157d2:	23ff      	movs	r3, #255	@ 0xff
 80157d4:	e017      	b.n	8015806 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80157d6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157da:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80157de:	781b      	ldrb	r3, [r3, #0]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d005      	beq.n	80157f0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80157e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157e8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	e00a      	b.n	8015806 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80157f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80157f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80157f8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80157fc:	b29a      	uxth	r2, r3
 80157fe:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8015802:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015804:	2300      	movs	r3, #0
}
 8015806:	4618      	mov	r0, r3
 8015808:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 801580c:	46bd      	mov	sp, r7
 801580e:	bd90      	pop	{r4, r7, pc}

08015810 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8015810:	b590      	push	{r4, r7, lr}
 8015812:	b0d1      	sub	sp, #324	@ 0x144
 8015814:	af00      	add	r7, sp, #0
 8015816:	4604      	mov	r4, r0
 8015818:	4608      	mov	r0, r1
 801581a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801581e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8015822:	600a      	str	r2, [r1, #0]
 8015824:	4619      	mov	r1, r3
 8015826:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801582a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801582e:	4622      	mov	r2, r4
 8015830:	801a      	strh	r2, [r3, #0]
 8015832:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015836:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801583a:	4602      	mov	r2, r0
 801583c:	701a      	strb	r2, [r3, #0]
 801583e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015842:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8015846:	460a      	mov	r2, r1
 8015848:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 801584a:	f107 0318 	add.w	r3, r7, #24
 801584e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8015852:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015856:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801585a:	781b      	ldrb	r3, [r3, #0]
 801585c:	2b01      	cmp	r3, #1
 801585e:	d00a      	beq.n	8015876 <aci_gatt_add_char+0x66>
 8015860:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015864:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	2b02      	cmp	r3, #2
 801586c:	d101      	bne.n	8015872 <aci_gatt_add_char+0x62>
 801586e:	2313      	movs	r3, #19
 8015870:	e002      	b.n	8015878 <aci_gatt_add_char+0x68>
 8015872:	2303      	movs	r3, #3
 8015874:	e000      	b.n	8015878 <aci_gatt_add_char+0x68>
 8015876:	2305      	movs	r3, #5
 8015878:	f107 0218 	add.w	r2, r7, #24
 801587c:	4413      	add	r3, r2
 801587e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015882:	f107 0314 	add.w	r3, r7, #20
 8015886:	2203      	movs	r2, #3
 8015888:	2100      	movs	r1, #0
 801588a:	4618      	mov	r0, r3
 801588c:	f000 fbb7 	bl	8015ffe <Osal_MemSet>
  int index_input = 0;
 8015890:	2300      	movs	r3, #0
 8015892:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8015896:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801589a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 801589e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80158a2:	8812      	ldrh	r2, [r2, #0]
 80158a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80158a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80158aa:	3302      	adds	r3, #2
 80158ac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80158b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80158b4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80158b8:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80158bc:	7812      	ldrb	r2, [r2, #0]
 80158be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80158c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80158c4:	3301      	adds	r3, #1
 80158c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80158ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158ce:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80158d2:	781b      	ldrb	r3, [r3, #0]
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	d002      	beq.n	80158de <aci_gatt_add_char+0xce>
 80158d8:	2b02      	cmp	r3, #2
 80158da:	d004      	beq.n	80158e6 <aci_gatt_add_char+0xd6>
 80158dc:	e007      	b.n	80158ee <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80158de:	2302      	movs	r3, #2
 80158e0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80158e4:	e005      	b.n	80158f2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80158e6:	2310      	movs	r3, #16
 80158e8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80158ec:	e001      	b.n	80158f2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80158ee:	2397      	movs	r3, #151	@ 0x97
 80158f0:	e091      	b.n	8015a16 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80158f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80158f6:	1cd8      	adds	r0, r3, #3
 80158f8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80158fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015900:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8015904:	6819      	ldr	r1, [r3, #0]
 8015906:	f000 fb6a 	bl	8015fde <Osal_MemCpy>
    index_input += size;
 801590a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801590e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8015912:	4413      	add	r3, r2
 8015914:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8015918:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801591c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015920:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8015924:	8812      	ldrh	r2, [r2, #0]
 8015926:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8015928:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801592c:	3302      	adds	r3, #2
 801592e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8015932:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015936:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801593a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 801593c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015940:	3301      	adds	r3, #1
 8015942:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8015946:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801594a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 801594e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8015950:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015954:	3301      	adds	r3, #1
 8015956:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 801595a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801595e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8015962:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8015964:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015968:	3301      	adds	r3, #1
 801596a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 801596e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015972:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8015976:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8015978:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801597c:	3301      	adds	r3, #1
 801597e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8015982:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8015986:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 801598a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 801598c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015990:	3301      	adds	r3, #1
 8015992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015996:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801599a:	2218      	movs	r2, #24
 801599c:	2100      	movs	r1, #0
 801599e:	4618      	mov	r0, r3
 80159a0:	f000 fb2d 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 80159a4:	233f      	movs	r3, #63	@ 0x3f
 80159a6:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80159aa:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80159ae:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80159b2:	f107 0318 	add.w	r3, r7, #24
 80159b6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80159ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80159c2:	f107 0314 	add.w	r3, r7, #20
 80159c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80159ca:	2303      	movs	r3, #3
 80159cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80159d0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80159d4:	2100      	movs	r1, #0
 80159d6:	4618      	mov	r0, r3
 80159d8:	f000 fd9a 	bl	8016510 <hci_send_req>
 80159dc:	4603      	mov	r3, r0
 80159de:	2b00      	cmp	r3, #0
 80159e0:	da01      	bge.n	80159e6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80159e2:	23ff      	movs	r3, #255	@ 0xff
 80159e4:	e017      	b.n	8015a16 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80159e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80159ea:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80159ee:	781b      	ldrb	r3, [r3, #0]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d005      	beq.n	8015a00 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80159f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80159f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	e00a      	b.n	8015a16 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8015a00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015a04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015a08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015a0c:	b29a      	uxth	r2, r3
 8015a0e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8015a12:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8015a14:	2300      	movs	r3, #0
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd90      	pop	{r4, r7, pc}

08015a20 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8015a20:	b5b0      	push	{r4, r5, r7, lr}
 8015a22:	b0cc      	sub	sp, #304	@ 0x130
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	4605      	mov	r5, r0
 8015a28:	460c      	mov	r4, r1
 8015a2a:	4610      	mov	r0, r2
 8015a2c:	4619      	mov	r1, r3
 8015a2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a32:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015a36:	462a      	mov	r2, r5
 8015a38:	801a      	strh	r2, [r3, #0]
 8015a3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a3e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8015a42:	4622      	mov	r2, r4
 8015a44:	801a      	strh	r2, [r3, #0]
 8015a46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a4a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8015a4e:	4602      	mov	r2, r0
 8015a50:	701a      	strb	r2, [r3, #0]
 8015a52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a56:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015a5a:	460a      	mov	r2, r1
 8015a5c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8015a5e:	f107 0310 	add.w	r3, r7, #16
 8015a62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015a66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015a6a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015a6e:	2200      	movs	r2, #0
 8015a70:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015a72:	2300      	movs	r3, #0
 8015a74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8015a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015a84:	8812      	ldrh	r2, [r2, #0]
 8015a86:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a8c:	3302      	adds	r3, #2
 8015a8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8015a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015a96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015a9a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8015a9e:	8812      	ldrh	r2, [r2, #0]
 8015aa0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8015aa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015aa6:	3302      	adds	r3, #2
 8015aa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8015aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ab0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015ab4:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8015ab8:	7812      	ldrb	r2, [r2, #0]
 8015aba:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8015abc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ac0:	3301      	adds	r3, #1
 8015ac2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8015ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015aca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015ace:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8015ad2:	7812      	ldrb	r2, [r2, #0]
 8015ad4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8015ad6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ada:	3301      	adds	r3, #1
 8015adc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8015ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ae4:	1d98      	adds	r0, r3, #6
 8015ae6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015aea:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015aee:	781b      	ldrb	r3, [r3, #0]
 8015af0:	461a      	mov	r2, r3
 8015af2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8015af6:	f000 fa72 	bl	8015fde <Osal_MemCpy>
  index_input += Char_Value_Length;
 8015afa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015afe:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8015b02:	781b      	ldrb	r3, [r3, #0]
 8015b04:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015b08:	4413      	add	r3, r2
 8015b0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015b0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b12:	2218      	movs	r2, #24
 8015b14:	2100      	movs	r1, #0
 8015b16:	4618      	mov	r0, r3
 8015b18:	f000 fa71 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015b1c:	233f      	movs	r3, #63	@ 0x3f
 8015b1e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8015b22:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8015b26:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015b2a:	f107 0310 	add.w	r3, r7, #16
 8015b2e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015b3a:	f107 030f 	add.w	r3, r7, #15
 8015b3e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015b42:	2301      	movs	r3, #1
 8015b44:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015b48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015b4c:	2100      	movs	r1, #0
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f000 fcde 	bl	8016510 <hci_send_req>
 8015b54:	4603      	mov	r3, r0
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	da01      	bge.n	8015b5e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8015b5a:	23ff      	movs	r3, #255	@ 0xff
 8015b5c:	e004      	b.n	8015b68 <aci_gatt_update_char_value+0x148>
  return status;
 8015b5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b62:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b66:	781b      	ldrb	r3, [r3, #0]
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bdb0      	pop	{r4, r5, r7, pc}

08015b72 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8015b72:	b580      	push	{r7, lr}
 8015b74:	b0cc      	sub	sp, #304	@ 0x130
 8015b76:	af00      	add	r7, sp, #0
 8015b78:	4602      	mov	r2, r0
 8015b7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b7e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015b82:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8015b84:	f107 0310 	add.w	r3, r7, #16
 8015b88:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015b8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015b90:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015b94:	2200      	movs	r2, #0
 8015b96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015b98:	2300      	movs	r3, #0
 8015b9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8015b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015ba2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015ba6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015baa:	8812      	ldrh	r2, [r2, #0]
 8015bac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bb2:	3302      	adds	r3, #2
 8015bb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015bb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015bbc:	2218      	movs	r2, #24
 8015bbe:	2100      	movs	r1, #0
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	f000 fa1c 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015bc6:	233f      	movs	r3, #63	@ 0x3f
 8015bc8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8015bcc:	f240 1325 	movw	r3, #293	@ 0x125
 8015bd0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015bd4:	f107 0310 	add.w	r3, r7, #16
 8015bd8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015bdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015be0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015be4:	f107 030f 	add.w	r3, r7, #15
 8015be8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015bec:	2301      	movs	r3, #1
 8015bee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015bf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015bf6:	2100      	movs	r1, #0
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f000 fc89 	bl	8016510 <hci_send_req>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	da01      	bge.n	8015c08 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8015c04:	23ff      	movs	r3, #255	@ 0xff
 8015c06:	e004      	b.n	8015c12 <aci_gatt_confirm_indication+0xa0>
  return status;
 8015c08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c10:	781b      	ldrb	r3, [r3, #0]
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015c18:	46bd      	mov	sp, r7
 8015c1a:	bd80      	pop	{r7, pc}

08015c1c <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b0cc      	sub	sp, #304	@ 0x130
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c26:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015c2a:	601a      	str	r2, [r3, #0]
 8015c2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c30:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015c34:	4602      	mov	r2, r0
 8015c36:	701a      	strb	r2, [r3, #0]
 8015c38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015c40:	460a      	mov	r2, r1
 8015c42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8015c44:	f107 0310 	add.w	r3, r7, #16
 8015c48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015c4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015c54:	2200      	movs	r2, #0
 8015c56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8015c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c66:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015c6a:	7812      	ldrb	r2, [r2, #0]
 8015c6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c72:	3301      	adds	r3, #1
 8015c74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8015c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015c80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015c84:	7812      	ldrb	r2, [r2, #0]
 8015c86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c8c:	3301      	adds	r3, #1
 8015c8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8015c92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015c96:	1c98      	adds	r0, r3, #2
 8015c98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015c9c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015ca0:	781a      	ldrb	r2, [r3, #0]
 8015ca2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ca6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8015caa:	6819      	ldr	r1, [r3, #0]
 8015cac:	f000 f997 	bl	8015fde <Osal_MemCpy>
  index_input += Length;
 8015cb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015cb4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015cb8:	781b      	ldrb	r3, [r3, #0]
 8015cba:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8015cbe:	4413      	add	r3, r2
 8015cc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015cc4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015cc8:	2218      	movs	r2, #24
 8015cca:	2100      	movs	r1, #0
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f000 f996 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015cd2:	233f      	movs	r3, #63	@ 0x3f
 8015cd4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8015cd8:	230c      	movs	r3, #12
 8015cda:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015cde:	f107 0310 	add.w	r3, r7, #16
 8015ce2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015cea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015cee:	f107 030f 	add.w	r3, r7, #15
 8015cf2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015cfc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015d00:	2100      	movs	r1, #0
 8015d02:	4618      	mov	r0, r3
 8015d04:	f000 fc04 	bl	8016510 <hci_send_req>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	da01      	bge.n	8015d12 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8015d0e:	23ff      	movs	r3, #255	@ 0xff
 8015d10:	e004      	b.n	8015d1c <aci_hal_write_config_data+0x100>
  return status;
 8015d12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d16:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015d1a:	781b      	ldrb	r3, [r3, #0]
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}

08015d26 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8015d26:	b580      	push	{r7, lr}
 8015d28:	b0cc      	sub	sp, #304	@ 0x130
 8015d2a:	af00      	add	r7, sp, #0
 8015d2c:	4602      	mov	r2, r0
 8015d2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d32:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015d36:	701a      	strb	r2, [r3, #0]
 8015d38:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d3c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015d40:	460a      	mov	r2, r1
 8015d42:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8015d44:	f107 0310 	add.w	r3, r7, #16
 8015d48:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015d4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015d50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015d54:	2200      	movs	r2, #0
 8015d56:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015d58:	2300      	movs	r3, #0
 8015d5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8015d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d62:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015d66:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015d6a:	7812      	ldrb	r2, [r2, #0]
 8015d6c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015d6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d72:	3301      	adds	r3, #1
 8015d74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8015d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015d7c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015d80:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015d84:	7812      	ldrb	r2, [r2, #0]
 8015d86:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015d92:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015d96:	2218      	movs	r2, #24
 8015d98:	2100      	movs	r1, #0
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f000 f92f 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015da0:	233f      	movs	r3, #63	@ 0x3f
 8015da2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8015da6:	230f      	movs	r3, #15
 8015da8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015dac:	f107 0310 	add.w	r3, r7, #16
 8015db0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015db8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015dbc:	f107 030f 	add.w	r3, r7, #15
 8015dc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015dca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015dce:	2100      	movs	r1, #0
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	f000 fb9d 	bl	8016510 <hci_send_req>
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	da01      	bge.n	8015de0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015ddc:	23ff      	movs	r3, #255	@ 0xff
 8015dde:	e004      	b.n	8015dea <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015de0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015de4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015de8:	781b      	ldrb	r3, [r3, #0]
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bd80      	pop	{r7, pc}

08015df4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b0cc      	sub	sp, #304	@ 0x130
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	4602      	mov	r2, r0
 8015dfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e00:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015e04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8015e06:	f107 0310 	add.w	r3, r7, #16
 8015e0a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015e0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e12:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015e16:	2200      	movs	r2, #0
 8015e18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8015e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015e24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015e28:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015e2c:	8812      	ldrh	r2, [r2, #0]
 8015e2e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8015e30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e34:	3302      	adds	r3, #2
 8015e36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015e3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e3e:	2218      	movs	r2, #24
 8015e40:	2100      	movs	r1, #0
 8015e42:	4618      	mov	r0, r3
 8015e44:	f000 f8db 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x3f;
 8015e48:	233f      	movs	r3, #63	@ 0x3f
 8015e4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8015e4e:	2318      	movs	r3, #24
 8015e50:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015e54:	f107 0310 	add.w	r3, r7, #16
 8015e58:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015e5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015e64:	f107 030f 	add.w	r3, r7, #15
 8015e68:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015e6c:	2301      	movs	r3, #1
 8015e6e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015e72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015e76:	2100      	movs	r1, #0
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f000 fb49 	bl	8016510 <hci_send_req>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	da01      	bge.n	8015e88 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8015e84:	23ff      	movs	r3, #255	@ 0xff
 8015e86:	e004      	b.n	8015e92 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015e88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015e8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015e90:	781b      	ldrb	r3, [r3, #0]
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8015e98:	46bd      	mov	sp, r7
 8015e9a:	bd80      	pop	{r7, pc}

08015e9c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b088      	sub	sp, #32
 8015ea0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015ea6:	f107 0308 	add.w	r3, r7, #8
 8015eaa:	2218      	movs	r2, #24
 8015eac:	2100      	movs	r1, #0
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f000 f8a5 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x03;
 8015eb4:	2303      	movs	r3, #3
 8015eb6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015eb8:	2303      	movs	r3, #3
 8015eba:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015ebc:	1dfb      	adds	r3, r7, #7
 8015ebe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015ec0:	2301      	movs	r3, #1
 8015ec2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015ec4:	f107 0308 	add.w	r3, r7, #8
 8015ec8:	2100      	movs	r1, #0
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f000 fb20 	bl	8016510 <hci_send_req>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	da01      	bge.n	8015eda <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8015ed6:	23ff      	movs	r3, #255	@ 0xff
 8015ed8:	e000      	b.n	8015edc <hci_reset+0x40>
  return status;
 8015eda:	79fb      	ldrb	r3, [r7, #7]
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3720      	adds	r7, #32
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}

08015ee4 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8015ee4:	b590      	push	{r4, r7, lr}
 8015ee6:	b0cd      	sub	sp, #308	@ 0x134
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	4604      	mov	r4, r0
 8015eec:	4608      	mov	r0, r1
 8015eee:	4611      	mov	r1, r2
 8015ef0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015ef4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8015ef8:	4622      	mov	r2, r4
 8015efa:	701a      	strb	r2, [r3, #0]
 8015efc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f00:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8015f04:	4602      	mov	r2, r0
 8015f06:	701a      	strb	r2, [r3, #0]
 8015f08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f0c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8015f10:	460a      	mov	r2, r1
 8015f12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8015f14:	f107 0310 	add.w	r3, r7, #16
 8015f18:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8015f1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015f20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015f24:	2200      	movs	r2, #0
 8015f26:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015f28:	2300      	movs	r3, #0
 8015f2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8015f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015f32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015f36:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8015f3a:	7812      	ldrb	r2, [r2, #0]
 8015f3c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015f3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f42:	3301      	adds	r3, #1
 8015f44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8015f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015f4c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015f50:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8015f54:	7812      	ldrb	r2, [r2, #0]
 8015f56:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8015f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8015f66:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8015f6a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8015f6e:	7812      	ldrb	r2, [r2, #0]
 8015f70:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8015f72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015f76:	3301      	adds	r3, #1
 8015f78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015f7c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015f80:	2218      	movs	r2, #24
 8015f82:	2100      	movs	r1, #0
 8015f84:	4618      	mov	r0, r3
 8015f86:	f000 f83a 	bl	8015ffe <Osal_MemSet>
  rq.ogf = 0x08;
 8015f8a:	2308      	movs	r3, #8
 8015f8c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8015f90:	2331      	movs	r3, #49	@ 0x31
 8015f92:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8015f96:	f107 0310 	add.w	r3, r7, #16
 8015f9a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8015f9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015fa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8015fa6:	f107 030f 	add.w	r3, r7, #15
 8015faa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8015fae:	2301      	movs	r3, #1
 8015fb0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015fb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8015fb8:	2100      	movs	r1, #0
 8015fba:	4618      	mov	r0, r3
 8015fbc:	f000 faa8 	bl	8016510 <hci_send_req>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	da01      	bge.n	8015fca <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8015fc6:	23ff      	movs	r3, #255	@ 0xff
 8015fc8:	e004      	b.n	8015fd4 <hci_le_set_default_phy+0xf0>
  return status;
 8015fca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8015fce:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8015fd2:	781b      	ldrb	r3, [r3, #0]
}
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd90      	pop	{r4, r7, pc}

08015fde <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8015fde:	b580      	push	{r7, lr}
 8015fe0:	b084      	sub	sp, #16
 8015fe2:	af00      	add	r7, sp, #0
 8015fe4:	60f8      	str	r0, [r7, #12]
 8015fe6:	60b9      	str	r1, [r7, #8]
 8015fe8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8015fea:	687a      	ldr	r2, [r7, #4]
 8015fec:	68b9      	ldr	r1, [r7, #8]
 8015fee:	68f8      	ldr	r0, [r7, #12]
 8015ff0:	f005 fd0b 	bl	801ba0a <memcpy>
 8015ff4:	4603      	mov	r3, r0
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	3710      	adds	r7, #16
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bd80      	pop	{r7, pc}

08015ffe <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8015ffe:	b580      	push	{r7, lr}
 8016000:	b084      	sub	sp, #16
 8016002:	af00      	add	r7, sp, #0
 8016004:	60f8      	str	r0, [r7, #12]
 8016006:	60b9      	str	r1, [r7, #8]
 8016008:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 801600a:	687a      	ldr	r2, [r7, #4]
 801600c:	68b9      	ldr	r1, [r7, #8]
 801600e:	68f8      	ldr	r0, [r7, #12]
 8016010:	f005 fbdf 	bl	801b7d2 <memset>
 8016014:	4603      	mov	r3, r0
}
 8016016:	4618      	mov	r0, r3
 8016018:	3710      	adds	r7, #16
 801601a:	46bd      	mov	sp, r7
 801601c:	bd80      	pop	{r7, pc}

0801601e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 801601e:	b480      	push	{r7}
 8016020:	af00      	add	r7, sp, #0
  return;
 8016022:	bf00      	nop
}
 8016024:	46bd      	mov	sp, r7
 8016026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801602a:	4770      	bx	lr

0801602c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 801602c:	b480      	push	{r7}
 801602e:	af00      	add	r7, sp, #0
  return;
 8016030:	bf00      	nop
}
 8016032:	46bd      	mov	sp, r7
 8016034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016038:	4770      	bx	lr

0801603a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 801603a:	b480      	push	{r7}
 801603c:	af00      	add	r7, sp, #0
  return;
 801603e:	bf00      	nop
}
 8016040:	46bd      	mov	sp, r7
 8016042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016046:	4770      	bx	lr

08016048 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8016048:	b480      	push	{r7}
 801604a:	af00      	add	r7, sp, #0
  return;
 801604c:	bf00      	nop
}
 801604e:	46bd      	mov	sp, r7
 8016050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016054:	4770      	bx	lr

08016056 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8016056:	b480      	push	{r7}
 8016058:	af00      	add	r7, sp, #0
  return;
 801605a:	bf00      	nop
}
 801605c:	46bd      	mov	sp, r7
 801605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016062:	4770      	bx	lr

08016064 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8016064:	b480      	push	{r7}
 8016066:	af00      	add	r7, sp, #0
  return;
 8016068:	bf00      	nop
}
 801606a:	46bd      	mov	sp, r7
 801606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016070:	4770      	bx	lr

08016072 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8016072:	b480      	push	{r7}
 8016074:	af00      	add	r7, sp, #0
  return;
 8016076:	bf00      	nop
}
 8016078:	46bd      	mov	sp, r7
 801607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607e:	4770      	bx	lr

08016080 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8016080:	b480      	push	{r7}
 8016082:	af00      	add	r7, sp, #0
  return;
 8016084:	bf00      	nop
}
 8016086:	46bd      	mov	sp, r7
 8016088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608c:	4770      	bx	lr

0801608e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 801608e:	b480      	push	{r7}
 8016090:	af00      	add	r7, sp, #0
  return;
 8016092:	bf00      	nop
}
 8016094:	46bd      	mov	sp, r7
 8016096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609a:	4770      	bx	lr

0801609c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 801609c:	b480      	push	{r7}
 801609e:	af00      	add	r7, sp, #0
  return;
 80160a0:	bf00      	nop
}
 80160a2:	46bd      	mov	sp, r7
 80160a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a8:	4770      	bx	lr

080160aa <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80160aa:	b480      	push	{r7}
 80160ac:	af00      	add	r7, sp, #0
  return;
 80160ae:	bf00      	nop
}
 80160b0:	46bd      	mov	sp, r7
 80160b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b6:	4770      	bx	lr

080160b8 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80160b8:	b480      	push	{r7}
 80160ba:	af00      	add	r7, sp, #0
  return;
 80160bc:	bf00      	nop
}
 80160be:	46bd      	mov	sp, r7
 80160c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160c4:	4770      	bx	lr

080160c6 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80160c6:	b480      	push	{r7}
 80160c8:	af00      	add	r7, sp, #0
  return;
 80160ca:	bf00      	nop
}
 80160cc:	46bd      	mov	sp, r7
 80160ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d2:	4770      	bx	lr

080160d4 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80160d4:	b480      	push	{r7}
 80160d6:	af00      	add	r7, sp, #0
  return;
 80160d8:	bf00      	nop
}
 80160da:	46bd      	mov	sp, r7
 80160dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e0:	4770      	bx	lr

080160e2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80160e2:	b480      	push	{r7}
 80160e4:	af00      	add	r7, sp, #0
  return;
 80160e6:	bf00      	nop
}
 80160e8:	46bd      	mov	sp, r7
 80160ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ee:	4770      	bx	lr

080160f0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80160f0:	b480      	push	{r7}
 80160f2:	af00      	add	r7, sp, #0
  return;
 80160f4:	bf00      	nop
}
 80160f6:	46bd      	mov	sp, r7
 80160f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160fc:	4770      	bx	lr

080160fe <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80160fe:	b480      	push	{r7}
 8016100:	af00      	add	r7, sp, #0
  return;
 8016102:	bf00      	nop
}
 8016104:	46bd      	mov	sp, r7
 8016106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801610a:	4770      	bx	lr

0801610c <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 801610c:	b580      	push	{r7, lr}
 801610e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8016110:	4b04      	ldr	r3, [pc, #16]	@ (8016124 <SVCCTL_Init+0x18>)
 8016112:	2200      	movs	r2, #0
 8016114:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8016116:	4b04      	ldr	r3, [pc, #16]	@ (8016128 <SVCCTL_Init+0x1c>)
 8016118:	2200      	movs	r2, #0
 801611a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 801611c:	f000 f806 	bl	801612c <SVCCTL_SvcInit>

  return;
 8016120:	bf00      	nop
}
 8016122:	bd80      	pop	{r7, pc}
 8016124:	20000320 	.word	0x20000320
 8016128:	20000340 	.word	0x20000340

0801612c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 801612c:	b580      	push	{r7, lr}
 801612e:	af00      	add	r7, sp, #0
  BAS_Init();
 8016130:	f7ff ff75 	bl	801601e <BAS_Init>

  BLS_Init();
 8016134:	f7ff ff7a 	bl	801602c <BLS_Init>

  CRS_STM_Init();
 8016138:	f7ff ff7f 	bl	801603a <CRS_STM_Init>

  DIS_Init();
 801613c:	f7ff ff84 	bl	8016048 <DIS_Init>

  EDS_STM_Init();
 8016140:	f7ff ff89 	bl	8016056 <EDS_STM_Init>

  HIDS_Init();
 8016144:	f7ff ff8e 	bl	8016064 <HIDS_Init>

  HRS_Init();
 8016148:	f7ff ff93 	bl	8016072 <HRS_Init>

  HTS_Init();
 801614c:	f7ff ff98 	bl	8016080 <HTS_Init>

  IAS_Init();
 8016150:	f7ff ff9d 	bl	801608e <IAS_Init>

  LLS_Init();
 8016154:	f7ff ffa2 	bl	801609c <LLS_Init>

  TPS_Init();
 8016158:	f7ff ffa7 	bl	80160aa <TPS_Init>

  MOTENV_STM_Init();
 801615c:	f7ff ffac 	bl	80160b8 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8016160:	f7ff ffb1 	bl	80160c6 <P2PS_STM_Init>

  ZDD_STM_Init();
 8016164:	f7ff ffb6 	bl	80160d4 <ZDD_STM_Init>

  OTAS_STM_Init();
 8016168:	f7ff ffbb 	bl	80160e2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 801616c:	f7ff ffc7 	bl	80160fe <BVOPUS_STM_Init>

  MESH_Init();
 8016170:	f7ff ffbe 	bl	80160f0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8016174:	f002 f8d6 	bl	8018324 <SVCCTL_InitCustomSvc>
  
  return;
 8016178:	bf00      	nop
}
 801617a:	bd80      	pop	{r7, pc}

0801617c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 801617c:	b480      	push	{r7}
 801617e:	b083      	sub	sp, #12
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8016184:	4b09      	ldr	r3, [pc, #36]	@ (80161ac <SVCCTL_RegisterSvcHandler+0x30>)
 8016186:	7f1b      	ldrb	r3, [r3, #28]
 8016188:	4619      	mov	r1, r3
 801618a:	4a08      	ldr	r2, [pc, #32]	@ (80161ac <SVCCTL_RegisterSvcHandler+0x30>)
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8016192:	4b06      	ldr	r3, [pc, #24]	@ (80161ac <SVCCTL_RegisterSvcHandler+0x30>)
 8016194:	7f1b      	ldrb	r3, [r3, #28]
 8016196:	3301      	adds	r3, #1
 8016198:	b2da      	uxtb	r2, r3
 801619a:	4b04      	ldr	r3, [pc, #16]	@ (80161ac <SVCCTL_RegisterSvcHandler+0x30>)
 801619c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801619e:	bf00      	nop
}
 80161a0:	370c      	adds	r7, #12
 80161a2:	46bd      	mov	sp, r7
 80161a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161a8:	4770      	bx	lr
 80161aa:	bf00      	nop
 80161ac:	20000320 	.word	0x20000320

080161b0 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b086      	sub	sp, #24
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	3301      	adds	r3, #1
 80161bc:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80161be:	2300      	movs	r3, #0
 80161c0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	781b      	ldrb	r3, [r3, #0]
 80161c6:	2bff      	cmp	r3, #255	@ 0xff
 80161c8:	d125      	bne.n	8016216 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80161ca:	693b      	ldr	r3, [r7, #16]
 80161cc:	3302      	adds	r3, #2
 80161ce:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	881b      	ldrh	r3, [r3, #0]
 80161d4:	b29b      	uxth	r3, r3
 80161d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80161da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80161de:	d118      	bne.n	8016212 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80161e0:	2300      	movs	r3, #0
 80161e2:	757b      	strb	r3, [r7, #21]
 80161e4:	e00d      	b.n	8016202 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80161e6:	7d7b      	ldrb	r3, [r7, #21]
 80161e8:	4a1a      	ldr	r2, [pc, #104]	@ (8016254 <SVCCTL_UserEvtRx+0xa4>)
 80161ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80161ee:	6878      	ldr	r0, [r7, #4]
 80161f0:	4798      	blx	r3
 80161f2:	4603      	mov	r3, r0
 80161f4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80161f6:	7dfb      	ldrb	r3, [r7, #23]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d108      	bne.n	801620e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80161fc:	7d7b      	ldrb	r3, [r7, #21]
 80161fe:	3301      	adds	r3, #1
 8016200:	757b      	strb	r3, [r7, #21]
 8016202:	4b14      	ldr	r3, [pc, #80]	@ (8016254 <SVCCTL_UserEvtRx+0xa4>)
 8016204:	7f1b      	ldrb	r3, [r3, #28]
 8016206:	7d7a      	ldrb	r2, [r7, #21]
 8016208:	429a      	cmp	r2, r3
 801620a:	d3ec      	bcc.n	80161e6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 801620c:	e002      	b.n	8016214 <SVCCTL_UserEvtRx+0x64>
              break;
 801620e:	bf00      	nop
          break;
 8016210:	e000      	b.n	8016214 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8016212:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8016214:	e000      	b.n	8016218 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8016216:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8016218:	7dfb      	ldrb	r3, [r7, #23]
 801621a:	2b02      	cmp	r3, #2
 801621c:	d00f      	beq.n	801623e <SVCCTL_UserEvtRx+0x8e>
 801621e:	2b02      	cmp	r3, #2
 8016220:	dc10      	bgt.n	8016244 <SVCCTL_UserEvtRx+0x94>
 8016222:	2b00      	cmp	r3, #0
 8016224:	d002      	beq.n	801622c <SVCCTL_UserEvtRx+0x7c>
 8016226:	2b01      	cmp	r3, #1
 8016228:	d006      	beq.n	8016238 <SVCCTL_UserEvtRx+0x88>
 801622a:	e00b      	b.n	8016244 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f001 fcd9 	bl	8017be4 <SVCCTL_App_Notification>
 8016232:	4603      	mov	r3, r0
 8016234:	75bb      	strb	r3, [r7, #22]
      break;
 8016236:	e008      	b.n	801624a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8016238:	2301      	movs	r3, #1
 801623a:	75bb      	strb	r3, [r7, #22]
      break;
 801623c:	e005      	b.n	801624a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 801623e:	2300      	movs	r3, #0
 8016240:	75bb      	strb	r3, [r7, #22]
      break;
 8016242:	e002      	b.n	801624a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8016244:	2301      	movs	r3, #1
 8016246:	75bb      	strb	r3, [r7, #22]
      break;
 8016248:	bf00      	nop
  }

  return (return_status);
 801624a:	7dbb      	ldrb	r3, [r7, #22]
}
 801624c:	4618      	mov	r0, r3
 801624e:	3718      	adds	r7, #24
 8016250:	46bd      	mov	sp, r7
 8016252:	bd80      	pop	{r7, pc}
 8016254:	20000320 	.word	0x20000320

08016258 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8016258:	b580      	push	{r7, lr}
 801625a:	b088      	sub	sp, #32
 801625c:	af00      	add	r7, sp, #0
 801625e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8016260:	f107 030c 	add.w	r3, r7, #12
 8016264:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 801626c:	69fb      	ldr	r3, [r7, #28]
 801626e:	212e      	movs	r1, #46	@ 0x2e
 8016270:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8016274:	f000 fae8 	bl	8016848 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8016278:	69fb      	ldr	r3, [r7, #28]
 801627a:	330b      	adds	r3, #11
 801627c:	78db      	ldrb	r3, [r3, #3]
}
 801627e:	4618      	mov	r0, r3
 8016280:	3720      	adds	r7, #32
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}

08016286 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8016286:	b580      	push	{r7, lr}
 8016288:	b088      	sub	sp, #32
 801628a:	af00      	add	r7, sp, #0
 801628c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801628e:	f107 030c 	add.w	r3, r7, #12
 8016292:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801629a:	69fb      	ldr	r3, [r7, #28]
 801629c:	210f      	movs	r1, #15
 801629e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80162a2:	f000 fad1 	bl	8016848 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80162a6:	69fb      	ldr	r3, [r7, #28]
 80162a8:	330b      	adds	r3, #11
 80162aa:	78db      	ldrb	r3, [r3, #3]
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3720      	adds	r7, #32
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}

080162b4 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b088      	sub	sp, #32
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80162bc:	f107 030c 	add.w	r3, r7, #12
 80162c0:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80162c2:	69fb      	ldr	r3, [r7, #28]
 80162c4:	687a      	ldr	r2, [r7, #4]
 80162c6:	2110      	movs	r1, #16
 80162c8:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80162cc:	f000 fabc 	bl	8016848 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80162d0:	69fb      	ldr	r3, [r7, #28]
 80162d2:	330b      	adds	r3, #11
 80162d4:	78db      	ldrb	r3, [r3, #3]
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	3720      	adds	r7, #32
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}
	...

080162e0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80162e0:	b480      	push	{r7}
 80162e2:	b08b      	sub	sp, #44	@ 0x2c
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80162e8:	2300      	movs	r3, #0
 80162ea:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80162ec:	2300      	movs	r3, #0
 80162ee:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80162f0:	2300      	movs	r3, #0
 80162f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80162f4:	2300      	movs	r3, #0
 80162f6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80162f8:	2300      	movs	r3, #0
 80162fa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80162fc:	2300      	movs	r3, #0
 80162fe:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8016300:	2300      	movs	r3, #0
 8016302:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8016304:	2300      	movs	r3, #0
 8016306:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8016308:	4b4a      	ldr	r3, [pc, #296]	@ (8016434 <SHCI_GetWirelessFwInfo+0x154>)
 801630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801630c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016310:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8016312:	693b      	ldr	r3, [r7, #16]
 8016314:	009b      	lsls	r3, r3, #2
 8016316:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 801631a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8016322:	68bb      	ldr	r3, [r7, #8]
 8016324:	681b      	ldr	r3, [r3, #0]
 8016326:	4a44      	ldr	r2, [pc, #272]	@ (8016438 <SHCI_GetWirelessFwInfo+0x158>)
 8016328:	4293      	cmp	r3, r2
 801632a:	d10f      	bne.n	801634c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	695b      	ldr	r3, [r3, #20]
 8016330:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8016332:	68bb      	ldr	r3, [r7, #8]
 8016334:	699b      	ldr	r3, [r3, #24]
 8016336:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8016338:	68bb      	ldr	r3, [r7, #8]
 801633a:	69db      	ldr	r3, [r3, #28]
 801633c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	68db      	ldr	r3, [r3, #12]
 8016342:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8016344:	68bb      	ldr	r3, [r7, #8]
 8016346:	691b      	ldr	r3, [r3, #16]
 8016348:	617b      	str	r3, [r7, #20]
 801634a:	e01a      	b.n	8016382 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801634c:	693b      	ldr	r3, [r7, #16]
 801634e:	009b      	lsls	r3, r3, #2
 8016350:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8016354:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8016358:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801635a:	68fb      	ldr	r3, [r7, #12]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	691b      	ldr	r3, [r3, #16]
 8016360:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	681b      	ldr	r3, [r3, #0]
 8016366:	695b      	ldr	r3, [r3, #20]
 8016368:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801636a:	68fb      	ldr	r3, [r7, #12]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	699b      	ldr	r3, [r3, #24]
 8016370:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	685b      	ldr	r3, [r3, #4]
 8016378:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	689b      	ldr	r3, [r3, #8]
 8016380:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8016382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016384:	0e1b      	lsrs	r3, r3, #24
 8016386:	b2da      	uxtb	r2, r3
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801638c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801638e:	0c1b      	lsrs	r3, r3, #16
 8016390:	b2da      	uxtb	r2, r3
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016398:	0a1b      	lsrs	r3, r3, #8
 801639a:	b2da      	uxtb	r2, r3
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80163a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163a2:	091b      	lsrs	r3, r3, #4
 80163a4:	b2db      	uxtb	r3, r3
 80163a6:	f003 030f 	and.w	r3, r3, #15
 80163aa:	b2da      	uxtb	r2, r3
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80163b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80163b2:	b2db      	uxtb	r3, r3
 80163b4:	f003 030f 	and.w	r3, r3, #15
 80163b8:	b2da      	uxtb	r2, r3
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80163be:	6a3b      	ldr	r3, [r7, #32]
 80163c0:	0e1b      	lsrs	r3, r3, #24
 80163c2:	b2da      	uxtb	r2, r3
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80163c8:	6a3b      	ldr	r3, [r7, #32]
 80163ca:	0c1b      	lsrs	r3, r3, #16
 80163cc:	b2da      	uxtb	r2, r3
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80163d2:	6a3b      	ldr	r3, [r7, #32]
 80163d4:	0a1b      	lsrs	r3, r3, #8
 80163d6:	b2da      	uxtb	r2, r3
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80163dc:	6a3b      	ldr	r3, [r7, #32]
 80163de:	b2da      	uxtb	r2, r3
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80163e4:	69fb      	ldr	r3, [r7, #28]
 80163e6:	b2da      	uxtb	r2, r3
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80163ec:	69bb      	ldr	r3, [r7, #24]
 80163ee:	0e1b      	lsrs	r3, r3, #24
 80163f0:	b2da      	uxtb	r2, r3
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80163f6:	69bb      	ldr	r3, [r7, #24]
 80163f8:	0c1b      	lsrs	r3, r3, #16
 80163fa:	b2da      	uxtb	r2, r3
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8016400:	69bb      	ldr	r3, [r7, #24]
 8016402:	0a1b      	lsrs	r3, r3, #8
 8016404:	b2da      	uxtb	r2, r3
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	0e1b      	lsrs	r3, r3, #24
 801640e:	b2da      	uxtb	r2, r3
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8016414:	697b      	ldr	r3, [r7, #20]
 8016416:	0c1b      	lsrs	r3, r3, #16
 8016418:	b2da      	uxtb	r2, r3
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801641e:	697b      	ldr	r3, [r7, #20]
 8016420:	b2da      	uxtb	r2, r3
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8016426:	2300      	movs	r3, #0
}
 8016428:	4618      	mov	r0, r3
 801642a:	372c      	adds	r7, #44	@ 0x2c
 801642c:	46bd      	mov	sp, r7
 801642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016432:	4770      	bx	lr
 8016434:	58004000 	.word	0x58004000
 8016438:	a94656b9 	.word	0xa94656b9

0801643c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b082      	sub	sp, #8
 8016440:	af00      	add	r7, sp, #0
 8016442:	6078      	str	r0, [r7, #4]
 8016444:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	4a08      	ldr	r2, [pc, #32]	@ (801646c <hci_init+0x30>)
 801644c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801644e:	4a08      	ldr	r2, [pc, #32]	@ (8016470 <hci_init+0x34>)
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8016454:	4806      	ldr	r0, [pc, #24]	@ (8016470 <hci_init+0x34>)
 8016456:	f000 f979 	bl	801674c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801645a:	683b      	ldr	r3, [r7, #0]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	4618      	mov	r0, r3
 8016460:	f000 f8da 	bl	8016618 <TlInit>

  return;
 8016464:	bf00      	nop
}
 8016466:	3708      	adds	r7, #8
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	2000154c 	.word	0x2000154c
 8016470:	20001524 	.word	0x20001524

08016474 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b084      	sub	sp, #16
 8016478:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801647a:	4822      	ldr	r0, [pc, #136]	@ (8016504 <hci_user_evt_proc+0x90>)
 801647c:	f000 fd32 	bl	8016ee4 <LST_is_empty>
 8016480:	4603      	mov	r3, r0
 8016482:	2b00      	cmp	r3, #0
 8016484:	d12b      	bne.n	80164de <hci_user_evt_proc+0x6a>
 8016486:	4b20      	ldr	r3, [pc, #128]	@ (8016508 <hci_user_evt_proc+0x94>)
 8016488:	781b      	ldrb	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d027      	beq.n	80164de <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801648e:	f107 030c 	add.w	r3, r7, #12
 8016492:	4619      	mov	r1, r3
 8016494:	481b      	ldr	r0, [pc, #108]	@ (8016504 <hci_user_evt_proc+0x90>)
 8016496:	f000 fdb4 	bl	8017002 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801649a:	4b1c      	ldr	r3, [pc, #112]	@ (801650c <hci_user_evt_proc+0x98>)
 801649c:	69db      	ldr	r3, [r3, #28]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d00c      	beq.n	80164bc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80164a6:	2301      	movs	r3, #1
 80164a8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80164aa:	4b18      	ldr	r3, [pc, #96]	@ (801650c <hci_user_evt_proc+0x98>)
 80164ac:	69db      	ldr	r3, [r3, #28]
 80164ae:	1d3a      	adds	r2, r7, #4
 80164b0:	4610      	mov	r0, r2
 80164b2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80164b4:	793a      	ldrb	r2, [r7, #4]
 80164b6:	4b14      	ldr	r3, [pc, #80]	@ (8016508 <hci_user_evt_proc+0x94>)
 80164b8:	701a      	strb	r2, [r3, #0]
 80164ba:	e002      	b.n	80164c2 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80164bc:	4b12      	ldr	r3, [pc, #72]	@ (8016508 <hci_user_evt_proc+0x94>)
 80164be:	2201      	movs	r2, #1
 80164c0:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80164c2:	4b11      	ldr	r3, [pc, #68]	@ (8016508 <hci_user_evt_proc+0x94>)
 80164c4:	781b      	ldrb	r3, [r3, #0]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d004      	beq.n	80164d4 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	4618      	mov	r0, r3
 80164ce:	f000 fc0d 	bl	8016cec <TL_MM_EvtDone>
 80164d2:	e004      	b.n	80164de <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	4619      	mov	r1, r3
 80164d8:	480a      	ldr	r0, [pc, #40]	@ (8016504 <hci_user_evt_proc+0x90>)
 80164da:	f000 fd25 	bl	8016f28 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80164de:	4809      	ldr	r0, [pc, #36]	@ (8016504 <hci_user_evt_proc+0x90>)
 80164e0:	f000 fd00 	bl	8016ee4 <LST_is_empty>
 80164e4:	4603      	mov	r3, r0
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d107      	bne.n	80164fa <hci_user_evt_proc+0x86>
 80164ea:	4b07      	ldr	r3, [pc, #28]	@ (8016508 <hci_user_evt_proc+0x94>)
 80164ec:	781b      	ldrb	r3, [r3, #0]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d003      	beq.n	80164fa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80164f2:	4804      	ldr	r0, [pc, #16]	@ (8016504 <hci_user_evt_proc+0x90>)
 80164f4:	f001 fdaa 	bl	801804c <hci_notify_asynch_evt>
  }


  return;
 80164f8:	bf00      	nop
 80164fa:	bf00      	nop
}
 80164fc:	3710      	adds	r7, #16
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}
 8016502:	bf00      	nop
 8016504:	20000348 	.word	0x20000348
 8016508:	20000354 	.word	0x20000354
 801650c:	20001524 	.word	0x20001524

08016510 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b088      	sub	sp, #32
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	460b      	mov	r3, r1
 801651a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 801651c:	2000      	movs	r0, #0
 801651e:	f000 f8d1 	bl	80166c4 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8016522:	2300      	movs	r3, #0
 8016524:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	885b      	ldrh	r3, [r3, #2]
 801652a:	b21b      	sxth	r3, r3
 801652c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016530:	b21a      	sxth	r2, r3
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	881b      	ldrh	r3, [r3, #0]
 8016536:	029b      	lsls	r3, r3, #10
 8016538:	b21b      	sxth	r3, r3
 801653a:	4313      	orrs	r3, r2
 801653c:	b21b      	sxth	r3, r3
 801653e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8016540:	4b33      	ldr	r3, [pc, #204]	@ (8016610 <hci_send_req+0x100>)
 8016542:	2201      	movs	r2, #1
 8016544:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	68db      	ldr	r3, [r3, #12]
 801654a:	b2d9      	uxtb	r1, r3
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	689a      	ldr	r2, [r3, #8]
 8016550:	8bbb      	ldrh	r3, [r7, #28]
 8016552:	4618      	mov	r0, r3
 8016554:	f000 f890 	bl	8016678 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8016558:	e04e      	b.n	80165f8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801655a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801655e:	f001 fd8c 	bl	801807a <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8016562:	e043      	b.n	80165ec <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8016564:	f107 030c 	add.w	r3, r7, #12
 8016568:	4619      	mov	r1, r3
 801656a:	482a      	ldr	r0, [pc, #168]	@ (8016614 <hci_send_req+0x104>)
 801656c:	f000 fd49 	bl	8017002 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8016570:	68fb      	ldr	r3, [r7, #12]
 8016572:	7a5b      	ldrb	r3, [r3, #9]
 8016574:	2b0f      	cmp	r3, #15
 8016576:	d114      	bne.n	80165a2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	330b      	adds	r3, #11
 801657c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	885b      	ldrh	r3, [r3, #2]
 8016582:	b29b      	uxth	r3, r3
 8016584:	8bba      	ldrh	r2, [r7, #28]
 8016586:	429a      	cmp	r2, r3
 8016588:	d104      	bne.n	8016594 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	691b      	ldr	r3, [r3, #16]
 801658e:	693a      	ldr	r2, [r7, #16]
 8016590:	7812      	ldrb	r2, [r2, #0]
 8016592:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8016594:	693b      	ldr	r3, [r7, #16]
 8016596:	785b      	ldrb	r3, [r3, #1]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d027      	beq.n	80165ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801659c:	2301      	movs	r3, #1
 801659e:	77fb      	strb	r3, [r7, #31]
 80165a0:	e024      	b.n	80165ec <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	330b      	adds	r3, #11
 80165a6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80165a8:	69bb      	ldr	r3, [r7, #24]
 80165aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80165ae:	b29b      	uxth	r3, r3
 80165b0:	8bba      	ldrh	r2, [r7, #28]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d114      	bne.n	80165e0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80165b6:	68fb      	ldr	r3, [r7, #12]
 80165b8:	7a9b      	ldrb	r3, [r3, #10]
 80165ba:	3b03      	subs	r3, #3
 80165bc:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	695a      	ldr	r2, [r3, #20]
 80165c2:	7dfb      	ldrb	r3, [r7, #23]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	bfa8      	it	ge
 80165c8:	461a      	movge	r2, r3
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	6918      	ldr	r0, [r3, #16]
 80165d2:	69bb      	ldr	r3, [r7, #24]
 80165d4:	1cd9      	adds	r1, r3, #3
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	695b      	ldr	r3, [r3, #20]
 80165da:	461a      	mov	r2, r3
 80165dc:	f005 fa15 	bl	801ba0a <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80165e0:	69bb      	ldr	r3, [r7, #24]
 80165e2:	781b      	ldrb	r3, [r3, #0]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d001      	beq.n	80165ec <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80165e8:	2301      	movs	r3, #1
 80165ea:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80165ec:	4809      	ldr	r0, [pc, #36]	@ (8016614 <hci_send_req+0x104>)
 80165ee:	f000 fc79 	bl	8016ee4 <LST_is_empty>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d0b5      	beq.n	8016564 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80165f8:	7ffb      	ldrb	r3, [r7, #31]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d0ad      	beq.n	801655a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80165fe:	2001      	movs	r0, #1
 8016600:	f000 f860 	bl	80166c4 <NotifyCmdStatus>

  return 0;
 8016604:	2300      	movs	r3, #0
}
 8016606:	4618      	mov	r0, r3
 8016608:	3720      	adds	r7, #32
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	20001550 	.word	0x20001550
 8016614:	20001544 	.word	0x20001544

08016618 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8016618:	b580      	push	{r7, lr}
 801661a:	b086      	sub	sp, #24
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8016620:	480f      	ldr	r0, [pc, #60]	@ (8016660 <TlInit+0x48>)
 8016622:	f000 fc4f 	bl	8016ec4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8016626:	4a0f      	ldr	r2, [pc, #60]	@ (8016664 <TlInit+0x4c>)
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 801662c:	480e      	ldr	r0, [pc, #56]	@ (8016668 <TlInit+0x50>)
 801662e:	f000 fc49 	bl	8016ec4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8016632:	4b0e      	ldr	r3, [pc, #56]	@ (801666c <TlInit+0x54>)
 8016634:	2201      	movs	r2, #1
 8016636:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8016638:	4b0d      	ldr	r3, [pc, #52]	@ (8016670 <TlInit+0x58>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d00a      	beq.n	8016656 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8016644:	4b0b      	ldr	r3, [pc, #44]	@ (8016674 <TlInit+0x5c>)
 8016646:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8016648:	4b09      	ldr	r3, [pc, #36]	@ (8016670 <TlInit+0x58>)
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	f107 0208 	add.w	r2, r7, #8
 8016650:	4610      	mov	r0, r2
 8016652:	4798      	blx	r3
  }

  return;
 8016654:	bf00      	nop
 8016656:	bf00      	nop
}
 8016658:	3718      	adds	r7, #24
 801665a:	46bd      	mov	sp, r7
 801665c:	bd80      	pop	{r7, pc}
 801665e:	bf00      	nop
 8016660:	20001544 	.word	0x20001544
 8016664:	20000350 	.word	0x20000350
 8016668:	20000348 	.word	0x20000348
 801666c:	20000354 	.word	0x20000354
 8016670:	20001524 	.word	0x20001524
 8016674:	08016705 	.word	0x08016705

08016678 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b082      	sub	sp, #8
 801667c:	af00      	add	r7, sp, #0
 801667e:	4603      	mov	r3, r0
 8016680:	603a      	str	r2, [r7, #0]
 8016682:	80fb      	strh	r3, [r7, #6]
 8016684:	460b      	mov	r3, r1
 8016686:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8016688:	4b0c      	ldr	r3, [pc, #48]	@ (80166bc <SendCmd+0x44>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	88fa      	ldrh	r2, [r7, #6]
 801668e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8016692:	4b0a      	ldr	r3, [pc, #40]	@ (80166bc <SendCmd+0x44>)
 8016694:	681b      	ldr	r3, [r3, #0]
 8016696:	797a      	ldrb	r2, [r7, #5]
 8016698:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801669a:	4b08      	ldr	r3, [pc, #32]	@ (80166bc <SendCmd+0x44>)
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	330c      	adds	r3, #12
 80166a0:	797a      	ldrb	r2, [r7, #5]
 80166a2:	6839      	ldr	r1, [r7, #0]
 80166a4:	4618      	mov	r0, r3
 80166a6:	f005 f9b0 	bl	801ba0a <memcpy>

  hciContext.io.Send(0,0);
 80166aa:	4b05      	ldr	r3, [pc, #20]	@ (80166c0 <SendCmd+0x48>)
 80166ac:	691b      	ldr	r3, [r3, #16]
 80166ae:	2100      	movs	r1, #0
 80166b0:	2000      	movs	r0, #0
 80166b2:	4798      	blx	r3

  return;
 80166b4:	bf00      	nop
}
 80166b6:	3708      	adds	r7, #8
 80166b8:	46bd      	mov	sp, r7
 80166ba:	bd80      	pop	{r7, pc}
 80166bc:	20000350 	.word	0x20000350
 80166c0:	20001524 	.word	0x20001524

080166c4 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80166c4:	b580      	push	{r7, lr}
 80166c6:	b082      	sub	sp, #8
 80166c8:	af00      	add	r7, sp, #0
 80166ca:	4603      	mov	r3, r0
 80166cc:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80166ce:	79fb      	ldrb	r3, [r7, #7]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d108      	bne.n	80166e6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80166d4:	4b0a      	ldr	r3, [pc, #40]	@ (8016700 <NotifyCmdStatus+0x3c>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d00d      	beq.n	80166f8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80166dc:	4b08      	ldr	r3, [pc, #32]	@ (8016700 <NotifyCmdStatus+0x3c>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	2000      	movs	r0, #0
 80166e2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80166e4:	e008      	b.n	80166f8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80166e6:	4b06      	ldr	r3, [pc, #24]	@ (8016700 <NotifyCmdStatus+0x3c>)
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d004      	beq.n	80166f8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80166ee:	4b04      	ldr	r3, [pc, #16]	@ (8016700 <NotifyCmdStatus+0x3c>)
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	2001      	movs	r0, #1
 80166f4:	4798      	blx	r3
  return;
 80166f6:	bf00      	nop
 80166f8:	bf00      	nop
}
 80166fa:	3708      	adds	r7, #8
 80166fc:	46bd      	mov	sp, r7
 80166fe:	bd80      	pop	{r7, pc}
 8016700:	2000154c 	.word	0x2000154c

08016704 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b082      	sub	sp, #8
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	7a5b      	ldrb	r3, [r3, #9]
 8016710:	2b0f      	cmp	r3, #15
 8016712:	d003      	beq.n	801671c <TlEvtReceived+0x18>
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	7a5b      	ldrb	r3, [r3, #9]
 8016718:	2b0e      	cmp	r3, #14
 801671a:	d107      	bne.n	801672c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 801671c:	6879      	ldr	r1, [r7, #4]
 801671e:	4809      	ldr	r0, [pc, #36]	@ (8016744 <TlEvtReceived+0x40>)
 8016720:	f000 fc28 	bl	8016f74 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8016724:	2000      	movs	r0, #0
 8016726:	f001 fc9d 	bl	8018064 <hci_cmd_resp_release>
 801672a:	e006      	b.n	801673a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 801672c:	6879      	ldr	r1, [r7, #4]
 801672e:	4806      	ldr	r0, [pc, #24]	@ (8016748 <TlEvtReceived+0x44>)
 8016730:	f000 fc20 	bl	8016f74 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016734:	4804      	ldr	r0, [pc, #16]	@ (8016748 <TlEvtReceived+0x44>)
 8016736:	f001 fc89 	bl	801804c <hci_notify_asynch_evt>
  }

  return;
 801673a:	bf00      	nop
}
 801673c:	3708      	adds	r7, #8
 801673e:	46bd      	mov	sp, r7
 8016740:	bd80      	pop	{r7, pc}
 8016742:	bf00      	nop
 8016744:	20001544 	.word	0x20001544
 8016748:	20000348 	.word	0x20000348

0801674c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 801674c:	b480      	push	{r7}
 801674e:	b083      	sub	sp, #12
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	4a05      	ldr	r2, [pc, #20]	@ (801676c <hci_register_io_bus+0x20>)
 8016758:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	4a04      	ldr	r2, [pc, #16]	@ (8016770 <hci_register_io_bus+0x24>)
 801675e:	611a      	str	r2, [r3, #16]

  return;
 8016760:	bf00      	nop
}
 8016762:	370c      	adds	r7, #12
 8016764:	46bd      	mov	sp, r7
 8016766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676a:	4770      	bx	lr
 801676c:	08016a65 	.word	0x08016a65
 8016770:	08016acd 	.word	0x08016acd

08016774 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b082      	sub	sp, #8
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
 801677c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	685b      	ldr	r3, [r3, #4]
 8016782:	4a08      	ldr	r2, [pc, #32]	@ (80167a4 <shci_init+0x30>)
 8016784:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8016786:	4a08      	ldr	r2, [pc, #32]	@ (80167a8 <shci_init+0x34>)
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801678c:	4806      	ldr	r0, [pc, #24]	@ (80167a8 <shci_init+0x34>)
 801678e:	f000 f915 	bl	80169bc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	4618      	mov	r0, r3
 8016798:	f000 f898 	bl	80168cc <TlInit>

  return;
 801679c:	bf00      	nop
}
 801679e:	3708      	adds	r7, #8
 80167a0:	46bd      	mov	sp, r7
 80167a2:	bd80      	pop	{r7, pc}
 80167a4:	20001574 	.word	0x20001574
 80167a8:	20001554 	.word	0x20001554

080167ac <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b084      	sub	sp, #16
 80167b0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80167b2:	4822      	ldr	r0, [pc, #136]	@ (801683c <shci_user_evt_proc+0x90>)
 80167b4:	f000 fb96 	bl	8016ee4 <LST_is_empty>
 80167b8:	4603      	mov	r3, r0
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	d12b      	bne.n	8016816 <shci_user_evt_proc+0x6a>
 80167be:	4b20      	ldr	r3, [pc, #128]	@ (8016840 <shci_user_evt_proc+0x94>)
 80167c0:	781b      	ldrb	r3, [r3, #0]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d027      	beq.n	8016816 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80167c6:	f107 030c 	add.w	r3, r7, #12
 80167ca:	4619      	mov	r1, r3
 80167cc:	481b      	ldr	r0, [pc, #108]	@ (801683c <shci_user_evt_proc+0x90>)
 80167ce:	f000 fc18 	bl	8017002 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80167d2:	4b1c      	ldr	r3, [pc, #112]	@ (8016844 <shci_user_evt_proc+0x98>)
 80167d4:	69db      	ldr	r3, [r3, #28]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d00c      	beq.n	80167f4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80167de:	2301      	movs	r3, #1
 80167e0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80167e2:	4b18      	ldr	r3, [pc, #96]	@ (8016844 <shci_user_evt_proc+0x98>)
 80167e4:	69db      	ldr	r3, [r3, #28]
 80167e6:	1d3a      	adds	r2, r7, #4
 80167e8:	4610      	mov	r0, r2
 80167ea:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80167ec:	793a      	ldrb	r2, [r7, #4]
 80167ee:	4b14      	ldr	r3, [pc, #80]	@ (8016840 <shci_user_evt_proc+0x94>)
 80167f0:	701a      	strb	r2, [r3, #0]
 80167f2:	e002      	b.n	80167fa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80167f4:	4b12      	ldr	r3, [pc, #72]	@ (8016840 <shci_user_evt_proc+0x94>)
 80167f6:	2201      	movs	r2, #1
 80167f8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80167fa:	4b11      	ldr	r3, [pc, #68]	@ (8016840 <shci_user_evt_proc+0x94>)
 80167fc:	781b      	ldrb	r3, [r3, #0]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d004      	beq.n	801680c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	4618      	mov	r0, r3
 8016806:	f000 fa71 	bl	8016cec <TL_MM_EvtDone>
 801680a:	e004      	b.n	8016816 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	4619      	mov	r1, r3
 8016810:	480a      	ldr	r0, [pc, #40]	@ (801683c <shci_user_evt_proc+0x90>)
 8016812:	f000 fb89 	bl	8016f28 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016816:	4809      	ldr	r0, [pc, #36]	@ (801683c <shci_user_evt_proc+0x90>)
 8016818:	f000 fb64 	bl	8016ee4 <LST_is_empty>
 801681c:	4603      	mov	r3, r0
 801681e:	2b00      	cmp	r3, #0
 8016820:	d107      	bne.n	8016832 <shci_user_evt_proc+0x86>
 8016822:	4b07      	ldr	r3, [pc, #28]	@ (8016840 <shci_user_evt_proc+0x94>)
 8016824:	781b      	ldrb	r3, [r3, #0]
 8016826:	2b00      	cmp	r3, #0
 8016828:	d003      	beq.n	8016832 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801682a:	4804      	ldr	r0, [pc, #16]	@ (801683c <shci_user_evt_proc+0x90>)
 801682c:	f7ea ffc0 	bl	80017b0 <shci_notify_asynch_evt>
  }


  return;
 8016830:	bf00      	nop
 8016832:	bf00      	nop
}
 8016834:	3710      	adds	r7, #16
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}
 801683a:	bf00      	nop
 801683c:	20000358 	.word	0x20000358
 8016840:	20000368 	.word	0x20000368
 8016844:	20001554 	.word	0x20001554

08016848 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b084      	sub	sp, #16
 801684c:	af00      	add	r7, sp, #0
 801684e:	60ba      	str	r2, [r7, #8]
 8016850:	607b      	str	r3, [r7, #4]
 8016852:	4603      	mov	r3, r0
 8016854:	81fb      	strh	r3, [r7, #14]
 8016856:	460b      	mov	r3, r1
 8016858:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801685a:	2000      	movs	r0, #0
 801685c:	f000 f868 	bl	8016930 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8016860:	4b17      	ldr	r3, [pc, #92]	@ (80168c0 <shci_send+0x78>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	89fa      	ldrh	r2, [r7, #14]
 8016866:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801686a:	4b15      	ldr	r3, [pc, #84]	@ (80168c0 <shci_send+0x78>)
 801686c:	681b      	ldr	r3, [r3, #0]
 801686e:	7b7a      	ldrb	r2, [r7, #13]
 8016870:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8016872:	4b13      	ldr	r3, [pc, #76]	@ (80168c0 <shci_send+0x78>)
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	330c      	adds	r3, #12
 8016878:	7b7a      	ldrb	r2, [r7, #13]
 801687a:	68b9      	ldr	r1, [r7, #8]
 801687c:	4618      	mov	r0, r3
 801687e:	f005 f8c4 	bl	801ba0a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8016882:	4b10      	ldr	r3, [pc, #64]	@ (80168c4 <shci_send+0x7c>)
 8016884:	2201      	movs	r2, #1
 8016886:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8016888:	4b0f      	ldr	r3, [pc, #60]	@ (80168c8 <shci_send+0x80>)
 801688a:	691b      	ldr	r3, [r3, #16]
 801688c:	2100      	movs	r1, #0
 801688e:	2000      	movs	r0, #0
 8016890:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8016892:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8016896:	f7ea ffa2 	bl	80017de <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	f103 0008 	add.w	r0, r3, #8
 80168a0:	4b07      	ldr	r3, [pc, #28]	@ (80168c0 <shci_send+0x78>)
 80168a2:	6819      	ldr	r1, [r3, #0]
 80168a4:	4b06      	ldr	r3, [pc, #24]	@ (80168c0 <shci_send+0x78>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	789b      	ldrb	r3, [r3, #2]
 80168aa:	3303      	adds	r3, #3
 80168ac:	461a      	mov	r2, r3
 80168ae:	f005 f8ac 	bl	801ba0a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80168b2:	2001      	movs	r0, #1
 80168b4:	f000 f83c 	bl	8016930 <Cmd_SetStatus>

  return;
 80168b8:	bf00      	nop
}
 80168ba:	3710      	adds	r7, #16
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}
 80168c0:	20000364 	.word	0x20000364
 80168c4:	20001578 	.word	0x20001578
 80168c8:	20001554 	.word	0x20001554

080168cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80168cc:	b580      	push	{r7, lr}
 80168ce:	b086      	sub	sp, #24
 80168d0:	af00      	add	r7, sp, #0
 80168d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80168d4:	4a10      	ldr	r2, [pc, #64]	@ (8016918 <TlInit+0x4c>)
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80168da:	4810      	ldr	r0, [pc, #64]	@ (801691c <TlInit+0x50>)
 80168dc:	f000 faf2 	bl	8016ec4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80168e0:	2001      	movs	r0, #1
 80168e2:	f000 f825 	bl	8016930 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80168e6:	4b0e      	ldr	r3, [pc, #56]	@ (8016920 <TlInit+0x54>)
 80168e8:	2201      	movs	r2, #1
 80168ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80168ec:	4b0d      	ldr	r3, [pc, #52]	@ (8016924 <TlInit+0x58>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d00c      	beq.n	801690e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80168f8:	4b0b      	ldr	r3, [pc, #44]	@ (8016928 <TlInit+0x5c>)
 80168fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80168fc:	4b0b      	ldr	r3, [pc, #44]	@ (801692c <TlInit+0x60>)
 80168fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8016900:	4b08      	ldr	r3, [pc, #32]	@ (8016924 <TlInit+0x58>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	f107 020c 	add.w	r2, r7, #12
 8016908:	4610      	mov	r0, r2
 801690a:	4798      	blx	r3
  }

  return;
 801690c:	bf00      	nop
 801690e:	bf00      	nop
}
 8016910:	3718      	adds	r7, #24
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	20000364 	.word	0x20000364
 801691c:	20000358 	.word	0x20000358
 8016920:	20000368 	.word	0x20000368
 8016924:	20001554 	.word	0x20001554
 8016928:	08016981 	.word	0x08016981
 801692c:	08016999 	.word	0x08016999

08016930 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b082      	sub	sp, #8
 8016934:	af00      	add	r7, sp, #0
 8016936:	4603      	mov	r3, r0
 8016938:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801693a:	79fb      	ldrb	r3, [r7, #7]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d10b      	bne.n	8016958 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8016940:	4b0d      	ldr	r3, [pc, #52]	@ (8016978 <Cmd_SetStatus+0x48>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d003      	beq.n	8016950 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8016948:	4b0b      	ldr	r3, [pc, #44]	@ (8016978 <Cmd_SetStatus+0x48>)
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	2000      	movs	r0, #0
 801694e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8016950:	4b0a      	ldr	r3, [pc, #40]	@ (801697c <Cmd_SetStatus+0x4c>)
 8016952:	2200      	movs	r2, #0
 8016954:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8016956:	e00b      	b.n	8016970 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8016958:	4b08      	ldr	r3, [pc, #32]	@ (801697c <Cmd_SetStatus+0x4c>)
 801695a:	2201      	movs	r2, #1
 801695c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801695e:	4b06      	ldr	r3, [pc, #24]	@ (8016978 <Cmd_SetStatus+0x48>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	2b00      	cmp	r3, #0
 8016964:	d004      	beq.n	8016970 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8016966:	4b04      	ldr	r3, [pc, #16]	@ (8016978 <Cmd_SetStatus+0x48>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	2001      	movs	r0, #1
 801696c:	4798      	blx	r3
  return;
 801696e:	bf00      	nop
 8016970:	bf00      	nop
}
 8016972:	3708      	adds	r7, #8
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}
 8016978:	20001574 	.word	0x20001574
 801697c:	20000360 	.word	0x20000360

08016980 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8016988:	2000      	movs	r0, #0
 801698a:	f7ea ff1d 	bl	80017c8 <shci_cmd_resp_release>

  return;
 801698e:	bf00      	nop
}
 8016990:	3708      	adds	r7, #8
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
	...

08016998 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016998:	b580      	push	{r7, lr}
 801699a:	b082      	sub	sp, #8
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80169a0:	6879      	ldr	r1, [r7, #4]
 80169a2:	4805      	ldr	r0, [pc, #20]	@ (80169b8 <TlUserEvtReceived+0x20>)
 80169a4:	f000 fae6 	bl	8016f74 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80169a8:	4803      	ldr	r0, [pc, #12]	@ (80169b8 <TlUserEvtReceived+0x20>)
 80169aa:	f7ea ff01 	bl	80017b0 <shci_notify_asynch_evt>

  return;
 80169ae:	bf00      	nop
}
 80169b0:	3708      	adds	r7, #8
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}
 80169b6:	bf00      	nop
 80169b8:	20000358 	.word	0x20000358

080169bc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80169bc:	b480      	push	{r7}
 80169be:	b083      	sub	sp, #12
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	4a05      	ldr	r2, [pc, #20]	@ (80169dc <shci_register_io_bus+0x20>)
 80169c8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	4a04      	ldr	r2, [pc, #16]	@ (80169e0 <shci_register_io_bus+0x24>)
 80169ce:	611a      	str	r2, [r3, #16]

  return;
 80169d0:	bf00      	nop
}
 80169d2:	370c      	adds	r7, #12
 80169d4:	46bd      	mov	sp, r7
 80169d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169da:	4770      	bx	lr
 80169dc:	08016b79 	.word	0x08016b79
 80169e0:	08016bcd 	.word	0x08016bcd

080169e4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80169e4:	b580      	push	{r7, lr}
 80169e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80169e8:	f001 fefc 	bl	80187e4 <HW_IPCC_Enable>

  return;
 80169ec:	bf00      	nop
}
 80169ee:	bd80      	pop	{r7, pc}

080169f0 <TL_Init>:


void TL_Init( void )
{
 80169f0:	b580      	push	{r7, lr}
 80169f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80169f4:	4b10      	ldr	r3, [pc, #64]	@ (8016a38 <TL_Init+0x48>)
 80169f6:	4a11      	ldr	r2, [pc, #68]	@ (8016a3c <TL_Init+0x4c>)
 80169f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80169fa:	4b0f      	ldr	r3, [pc, #60]	@ (8016a38 <TL_Init+0x48>)
 80169fc:	4a10      	ldr	r2, [pc, #64]	@ (8016a40 <TL_Init+0x50>)
 80169fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8016a00:	4b0d      	ldr	r3, [pc, #52]	@ (8016a38 <TL_Init+0x48>)
 8016a02:	4a10      	ldr	r2, [pc, #64]	@ (8016a44 <TL_Init+0x54>)
 8016a04:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8016a06:	4b0c      	ldr	r3, [pc, #48]	@ (8016a38 <TL_Init+0x48>)
 8016a08:	4a0f      	ldr	r2, [pc, #60]	@ (8016a48 <TL_Init+0x58>)
 8016a0a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8016a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8016a38 <TL_Init+0x48>)
 8016a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8016a4c <TL_Init+0x5c>)
 8016a10:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8016a12:	4b09      	ldr	r3, [pc, #36]	@ (8016a38 <TL_Init+0x48>)
 8016a14:	4a0e      	ldr	r2, [pc, #56]	@ (8016a50 <TL_Init+0x60>)
 8016a16:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8016a18:	4b07      	ldr	r3, [pc, #28]	@ (8016a38 <TL_Init+0x48>)
 8016a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8016a54 <TL_Init+0x64>)
 8016a1c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8016a1e:	4b06      	ldr	r3, [pc, #24]	@ (8016a38 <TL_Init+0x48>)
 8016a20:	4a0d      	ldr	r2, [pc, #52]	@ (8016a58 <TL_Init+0x68>)
 8016a22:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8016a24:	4b04      	ldr	r3, [pc, #16]	@ (8016a38 <TL_Init+0x48>)
 8016a26:	4a0d      	ldr	r2, [pc, #52]	@ (8016a5c <TL_Init+0x6c>)
 8016a28:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8016a2a:	4b03      	ldr	r3, [pc, #12]	@ (8016a38 <TL_Init+0x48>)
 8016a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8016a60 <TL_Init+0x70>)
 8016a2e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016a30:	f001 feec 	bl	801880c <HW_IPCC_Init>

  return;
 8016a34:	bf00      	nop
}
 8016a36:	bd80      	pop	{r7, pc}
 8016a38:	20030000 	.word	0x20030000
 8016a3c:	20030028 	.word	0x20030028
 8016a40:	20030048 	.word	0x20030048
 8016a44:	20030058 	.word	0x20030058
 8016a48:	20030068 	.word	0x20030068
 8016a4c:	20030070 	.word	0x20030070
 8016a50:	20030078 	.word	0x20030078
 8016a54:	20030080 	.word	0x20030080
 8016a58:	2003009c 	.word	0x2003009c
 8016a5c:	200300a0 	.word	0x200300a0
 8016a60:	200300ac 	.word	0x200300ac

08016a64 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	b084      	sub	sp, #16
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016a70:	4811      	ldr	r0, [pc, #68]	@ (8016ab8 <TL_BLE_Init+0x54>)
 8016a72:	f000 fa27 	bl	8016ec4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8016a76:	4b11      	ldr	r3, [pc, #68]	@ (8016abc <TL_BLE_Init+0x58>)
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	689a      	ldr	r2, [r3, #8]
 8016a80:	68bb      	ldr	r3, [r7, #8]
 8016a82:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	68da      	ldr	r2, [r3, #12]
 8016a88:	68bb      	ldr	r3, [r7, #8]
 8016a8a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8016a8c:	68bb      	ldr	r3, [r7, #8]
 8016a8e:	4a0c      	ldr	r2, [pc, #48]	@ (8016ac0 <TL_BLE_Init+0x5c>)
 8016a90:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8016a92:	68bb      	ldr	r3, [r7, #8]
 8016a94:	4a08      	ldr	r2, [pc, #32]	@ (8016ab8 <TL_BLE_Init+0x54>)
 8016a96:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8016a98:	f001 fece 	bl	8018838 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	4a08      	ldr	r2, [pc, #32]	@ (8016ac4 <TL_BLE_Init+0x60>)
 8016aa2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	4a07      	ldr	r2, [pc, #28]	@ (8016ac8 <TL_BLE_Init+0x64>)
 8016aaa:	6013      	str	r3, [r2, #0]

  return 0;
 8016aac:	2300      	movs	r3, #0
}
 8016aae:	4618      	mov	r0, r3
 8016ab0:	3710      	adds	r7, #16
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}
 8016ab6:	bf00      	nop
 8016ab8:	200300c8 	.word	0x200300c8
 8016abc:	20030000 	.word	0x20030000
 8016ac0:	20030a58 	.word	0x20030a58
 8016ac4:	20001584 	.word	0x20001584
 8016ac8:	20001588 	.word	0x20001588

08016acc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b082      	sub	sp, #8
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8016ad8:	4b09      	ldr	r3, [pc, #36]	@ (8016b00 <TL_BLE_SendCmd+0x34>)
 8016ada:	685b      	ldr	r3, [r3, #4]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	2201      	movs	r2, #1
 8016ae0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8016ae2:	4b07      	ldr	r3, [pc, #28]	@ (8016b00 <TL_BLE_SendCmd+0x34>)
 8016ae4:	685b      	ldr	r3, [r3, #4]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	4619      	mov	r1, r3
 8016aea:	2001      	movs	r0, #1
 8016aec:	f000 f96c 	bl	8016dc8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8016af0:	f001 feac 	bl	801884c <HW_IPCC_BLE_SendCmd>

  return 0;
 8016af4:	2300      	movs	r3, #0
}
 8016af6:	4618      	mov	r0, r3
 8016af8:	3708      	adds	r7, #8
 8016afa:	46bd      	mov	sp, r7
 8016afc:	bd80      	pop	{r7, pc}
 8016afe:	bf00      	nop
 8016b00:	20030000 	.word	0x20030000

08016b04 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b082      	sub	sp, #8
 8016b08:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8016b0a:	e01c      	b.n	8016b46 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8016b0c:	1d3b      	adds	r3, r7, #4
 8016b0e:	4619      	mov	r1, r3
 8016b10:	4812      	ldr	r0, [pc, #72]	@ (8016b5c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016b12:	f000 fa76 	bl	8017002 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	7a5b      	ldrb	r3, [r3, #9]
 8016b1a:	2b0f      	cmp	r3, #15
 8016b1c:	d003      	beq.n	8016b26 <HW_IPCC_BLE_RxEvtNot+0x22>
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	7a5b      	ldrb	r3, [r3, #9]
 8016b22:	2b0e      	cmp	r3, #14
 8016b24:	d105      	bne.n	8016b32 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	4619      	mov	r1, r3
 8016b2a:	2002      	movs	r0, #2
 8016b2c:	f000 f94c 	bl	8016dc8 <OutputDbgTrace>
 8016b30:	e004      	b.n	8016b3c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	4619      	mov	r1, r3
 8016b36:	2003      	movs	r0, #3
 8016b38:	f000 f946 	bl	8016dc8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8016b3c:	4b08      	ldr	r3, [pc, #32]	@ (8016b60 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	687a      	ldr	r2, [r7, #4]
 8016b42:	4610      	mov	r0, r2
 8016b44:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8016b46:	4805      	ldr	r0, [pc, #20]	@ (8016b5c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8016b48:	f000 f9cc 	bl	8016ee4 <LST_is_empty>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d0dc      	beq.n	8016b0c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016b52:	bf00      	nop
}
 8016b54:	3708      	adds	r7, #8
 8016b56:	46bd      	mov	sp, r7
 8016b58:	bd80      	pop	{r7, pc}
 8016b5a:	bf00      	nop
 8016b5c:	200300c8 	.word	0x200300c8
 8016b60:	20001584 	.word	0x20001584

08016b64 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8016b68:	4b02      	ldr	r3, [pc, #8]	@ (8016b74 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	4798      	blx	r3

  return;
 8016b6e:	bf00      	nop
}
 8016b70:	bd80      	pop	{r7, pc}
 8016b72:	bf00      	nop
 8016b74:	20001588 	.word	0x20001588

08016b78 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016b84:	480d      	ldr	r0, [pc, #52]	@ (8016bbc <TL_SYS_Init+0x44>)
 8016b86:	f000 f99d 	bl	8016ec4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8016b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8016bc0 <TL_SYS_Init+0x48>)
 8016b8c:	68db      	ldr	r3, [r3, #12]
 8016b8e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	689a      	ldr	r2, [r3, #8]
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8016b98:	68bb      	ldr	r3, [r7, #8]
 8016b9a:	4a08      	ldr	r2, [pc, #32]	@ (8016bbc <TL_SYS_Init+0x44>)
 8016b9c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016b9e:	f001 fe77 	bl	8018890 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	4a07      	ldr	r2, [pc, #28]	@ (8016bc4 <TL_SYS_Init+0x4c>)
 8016ba8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	685b      	ldr	r3, [r3, #4]
 8016bae:	4a06      	ldr	r2, [pc, #24]	@ (8016bc8 <TL_SYS_Init+0x50>)
 8016bb0:	6013      	str	r3, [r2, #0]

  return 0;
 8016bb2:	2300      	movs	r3, #0
}
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	3710      	adds	r7, #16
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	bd80      	pop	{r7, pc}
 8016bbc:	200300d0 	.word	0x200300d0
 8016bc0:	20030000 	.word	0x20030000
 8016bc4:	2000158c 	.word	0x2000158c
 8016bc8:	20001590 	.word	0x20001590

08016bcc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	460b      	mov	r3, r1
 8016bd6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8016bd8:	4b09      	ldr	r3, [pc, #36]	@ (8016c00 <TL_SYS_SendCmd+0x34>)
 8016bda:	68db      	ldr	r3, [r3, #12]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	2210      	movs	r2, #16
 8016be0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8016be2:	4b07      	ldr	r3, [pc, #28]	@ (8016c00 <TL_SYS_SendCmd+0x34>)
 8016be4:	68db      	ldr	r3, [r3, #12]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	4619      	mov	r1, r3
 8016bea:	2004      	movs	r0, #4
 8016bec:	f000 f8ec 	bl	8016dc8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8016bf0:	f001 fe58 	bl	80188a4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8016bf4:	2300      	movs	r3, #0
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3708      	adds	r7, #8
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}
 8016bfe:	bf00      	nop
 8016c00:	20030000 	.word	0x20030000

08016c04 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016c08:	4b07      	ldr	r3, [pc, #28]	@ (8016c28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016c0a:	68db      	ldr	r3, [r3, #12]
 8016c0c:	681b      	ldr	r3, [r3, #0]
 8016c0e:	4619      	mov	r1, r3
 8016c10:	2005      	movs	r0, #5
 8016c12:	f000 f8d9 	bl	8016dc8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8016c16:	4b05      	ldr	r3, [pc, #20]	@ (8016c2c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	4a03      	ldr	r2, [pc, #12]	@ (8016c28 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016c1c:	68d2      	ldr	r2, [r2, #12]
 8016c1e:	6812      	ldr	r2, [r2, #0]
 8016c20:	4610      	mov	r0, r2
 8016c22:	4798      	blx	r3

  return;
 8016c24:	bf00      	nop
}
 8016c26:	bd80      	pop	{r7, pc}
 8016c28:	20030000 	.word	0x20030000
 8016c2c:	2000158c 	.word	0x2000158c

08016c30 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b082      	sub	sp, #8
 8016c34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016c36:	e00e      	b.n	8016c56 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8016c38:	1d3b      	adds	r3, r7, #4
 8016c3a:	4619      	mov	r1, r3
 8016c3c:	480b      	ldr	r0, [pc, #44]	@ (8016c6c <HW_IPCC_SYS_EvtNot+0x3c>)
 8016c3e:	f000 f9e0 	bl	8017002 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	4619      	mov	r1, r3
 8016c46:	2006      	movs	r0, #6
 8016c48:	f000 f8be 	bl	8016dc8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016c4c:	4b08      	ldr	r3, [pc, #32]	@ (8016c70 <HW_IPCC_SYS_EvtNot+0x40>)
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	687a      	ldr	r2, [r7, #4]
 8016c52:	4610      	mov	r0, r2
 8016c54:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8016c56:	4805      	ldr	r0, [pc, #20]	@ (8016c6c <HW_IPCC_SYS_EvtNot+0x3c>)
 8016c58:	f000 f944 	bl	8016ee4 <LST_is_empty>
 8016c5c:	4603      	mov	r3, r0
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d0ea      	beq.n	8016c38 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016c62:	bf00      	nop
}
 8016c64:	3708      	adds	r7, #8
 8016c66:	46bd      	mov	sp, r7
 8016c68:	bd80      	pop	{r7, pc}
 8016c6a:	bf00      	nop
 8016c6c:	200300d0 	.word	0x200300d0
 8016c70:	20001590 	.word	0x20001590

08016c74 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b082      	sub	sp, #8
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016c7c:	4817      	ldr	r0, [pc, #92]	@ (8016cdc <TL_MM_Init+0x68>)
 8016c7e:	f000 f921 	bl	8016ec4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016c82:	4817      	ldr	r0, [pc, #92]	@ (8016ce0 <TL_MM_Init+0x6c>)
 8016c84:	f000 f91e 	bl	8016ec4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8016c88:	4b16      	ldr	r3, [pc, #88]	@ (8016ce4 <TL_MM_Init+0x70>)
 8016c8a:	691b      	ldr	r3, [r3, #16]
 8016c8c:	4a16      	ldr	r2, [pc, #88]	@ (8016ce8 <TL_MM_Init+0x74>)
 8016c8e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016c90:	4b15      	ldr	r3, [pc, #84]	@ (8016ce8 <TL_MM_Init+0x74>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	687a      	ldr	r2, [r7, #4]
 8016c96:	6892      	ldr	r2, [r2, #8]
 8016c98:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8016c9a:	4b13      	ldr	r3, [pc, #76]	@ (8016ce8 <TL_MM_Init+0x74>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	687a      	ldr	r2, [r7, #4]
 8016ca0:	68d2      	ldr	r2, [r2, #12]
 8016ca2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016ca4:	4b10      	ldr	r3, [pc, #64]	@ (8016ce8 <TL_MM_Init+0x74>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8016cdc <TL_MM_Init+0x68>)
 8016caa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016cac:	4b0e      	ldr	r3, [pc, #56]	@ (8016ce8 <TL_MM_Init+0x74>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	687a      	ldr	r2, [r7, #4]
 8016cb2:	6812      	ldr	r2, [r2, #0]
 8016cb4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8016cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8016ce8 <TL_MM_Init+0x74>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	6852      	ldr	r2, [r2, #4]
 8016cbe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8016cc0:	4b09      	ldr	r3, [pc, #36]	@ (8016ce8 <TL_MM_Init+0x74>)
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	687a      	ldr	r2, [r7, #4]
 8016cc6:	6912      	ldr	r2, [r2, #16]
 8016cc8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8016cca:	4b07      	ldr	r3, [pc, #28]	@ (8016ce8 <TL_MM_Init+0x74>)
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	687a      	ldr	r2, [r7, #4]
 8016cd0:	6952      	ldr	r2, [r2, #20]
 8016cd2:	619a      	str	r2, [r3, #24]

  return;
 8016cd4:	bf00      	nop
}
 8016cd6:	3708      	adds	r7, #8
 8016cd8:	46bd      	mov	sp, r7
 8016cda:	bd80      	pop	{r7, pc}
 8016cdc:	200300b8 	.word	0x200300b8
 8016ce0:	2000157c 	.word	0x2000157c
 8016ce4:	20030000 	.word	0x20030000
 8016ce8:	20001594 	.word	0x20001594

08016cec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b082      	sub	sp, #8
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8016cf4:	6879      	ldr	r1, [r7, #4]
 8016cf6:	4807      	ldr	r0, [pc, #28]	@ (8016d14 <TL_MM_EvtDone+0x28>)
 8016cf8:	f000 f93c 	bl	8016f74 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8016cfc:	6879      	ldr	r1, [r7, #4]
 8016cfe:	2000      	movs	r0, #0
 8016d00:	f000 f862 	bl	8016dc8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8016d04:	4804      	ldr	r0, [pc, #16]	@ (8016d18 <TL_MM_EvtDone+0x2c>)
 8016d06:	f001 fdf3 	bl	80188f0 <HW_IPCC_MM_SendFreeBuf>

  return;
 8016d0a:	bf00      	nop
}
 8016d0c:	3708      	adds	r7, #8
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}
 8016d12:	bf00      	nop
 8016d14:	2000157c 	.word	0x2000157c
 8016d18:	08016d1d 	.word	0x08016d1d

08016d1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b082      	sub	sp, #8
 8016d20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016d22:	e00c      	b.n	8016d3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016d24:	1d3b      	adds	r3, r7, #4
 8016d26:	4619      	mov	r1, r3
 8016d28:	480a      	ldr	r0, [pc, #40]	@ (8016d54 <SendFreeBuf+0x38>)
 8016d2a:	f000 f96a 	bl	8017002 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8016d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8016d58 <SendFreeBuf+0x3c>)
 8016d30:	691b      	ldr	r3, [r3, #16]
 8016d32:	691b      	ldr	r3, [r3, #16]
 8016d34:	687a      	ldr	r2, [r7, #4]
 8016d36:	4611      	mov	r1, r2
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f000 f91b 	bl	8016f74 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016d3e:	4805      	ldr	r0, [pc, #20]	@ (8016d54 <SendFreeBuf+0x38>)
 8016d40:	f000 f8d0 	bl	8016ee4 <LST_is_empty>
 8016d44:	4603      	mov	r3, r0
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d0ec      	beq.n	8016d24 <SendFreeBuf+0x8>
  }

  return;
 8016d4a:	bf00      	nop
}
 8016d4c:	3708      	adds	r7, #8
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}
 8016d52:	bf00      	nop
 8016d54:	2000157c 	.word	0x2000157c
 8016d58:	20030000 	.word	0x20030000

08016d5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016d60:	4805      	ldr	r0, [pc, #20]	@ (8016d78 <TL_TRACES_Init+0x1c>)
 8016d62:	f000 f8af 	bl	8016ec4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8016d66:	4b05      	ldr	r3, [pc, #20]	@ (8016d7c <TL_TRACES_Init+0x20>)
 8016d68:	695b      	ldr	r3, [r3, #20]
 8016d6a:	4a03      	ldr	r2, [pc, #12]	@ (8016d78 <TL_TRACES_Init+0x1c>)
 8016d6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8016d6e:	f001 fdf5 	bl	801895c <HW_IPCC_TRACES_Init>

  return;
 8016d72:	bf00      	nop
}
 8016d74:	bd80      	pop	{r7, pc}
 8016d76:	bf00      	nop
 8016d78:	200300c0 	.word	0x200300c0
 8016d7c:	20030000 	.word	0x20030000

08016d80 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b082      	sub	sp, #8
 8016d84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016d86:	e008      	b.n	8016d9a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8016d88:	1d3b      	adds	r3, r7, #4
 8016d8a:	4619      	mov	r1, r3
 8016d8c:	4808      	ldr	r0, [pc, #32]	@ (8016db0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016d8e:	f000 f938 	bl	8017002 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	4618      	mov	r0, r3
 8016d96:	f000 f80d 	bl	8016db4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8016d9a:	4805      	ldr	r0, [pc, #20]	@ (8016db0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016d9c:	f000 f8a2 	bl	8016ee4 <LST_is_empty>
 8016da0:	4603      	mov	r3, r0
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d0f0      	beq.n	8016d88 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8016da6:	bf00      	nop
}
 8016da8:	3708      	adds	r7, #8
 8016daa:	46bd      	mov	sp, r7
 8016dac:	bd80      	pop	{r7, pc}
 8016dae:	bf00      	nop
 8016db0:	200300c0 	.word	0x200300c0

08016db4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8016db4:	b480      	push	{r7}
 8016db6:	b083      	sub	sp, #12
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8016dbc:	bf00      	nop
 8016dbe:	370c      	adds	r7, #12
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc6:	4770      	bx	lr

08016dc8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8016dc8:	b480      	push	{r7}
 8016dca:	b087      	sub	sp, #28
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	4603      	mov	r3, r0
 8016dd0:	6039      	str	r1, [r7, #0]
 8016dd2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8016dd4:	79fb      	ldrb	r3, [r7, #7]
 8016dd6:	2b06      	cmp	r3, #6
 8016dd8:	d845      	bhi.n	8016e66 <OutputDbgTrace+0x9e>
 8016dda:	a201      	add	r2, pc, #4	@ (adr r2, 8016de0 <OutputDbgTrace+0x18>)
 8016ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016de0:	08016dfd 	.word	0x08016dfd
 8016de4:	08016e21 	.word	0x08016e21
 8016de8:	08016e27 	.word	0x08016e27
 8016dec:	08016e3b 	.word	0x08016e3b
 8016df0:	08016e47 	.word	0x08016e47
 8016df4:	08016e4d 	.word	0x08016e4d
 8016df8:	08016e5b 	.word	0x08016e5b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016dfc:	683b      	ldr	r3, [r7, #0]
 8016dfe:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016e00:	697b      	ldr	r3, [r7, #20]
 8016e02:	7a5b      	ldrb	r3, [r3, #9]
 8016e04:	2bff      	cmp	r3, #255	@ 0xff
 8016e06:	d005      	beq.n	8016e14 <OutputDbgTrace+0x4c>
 8016e08:	2bff      	cmp	r3, #255	@ 0xff
 8016e0a:	dc05      	bgt.n	8016e18 <OutputDbgTrace+0x50>
 8016e0c:	2b0e      	cmp	r3, #14
 8016e0e:	d005      	beq.n	8016e1c <OutputDbgTrace+0x54>
 8016e10:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8016e12:	e001      	b.n	8016e18 <OutputDbgTrace+0x50>
          break;
 8016e14:	bf00      	nop
 8016e16:	e027      	b.n	8016e68 <OutputDbgTrace+0xa0>
          break;
 8016e18:	bf00      	nop
 8016e1a:	e025      	b.n	8016e68 <OutputDbgTrace+0xa0>
          break;
 8016e1c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016e1e:	e023      	b.n	8016e68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016e24:	e020      	b.n	8016e68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016e2a:	697b      	ldr	r3, [r7, #20]
 8016e2c:	7a5b      	ldrb	r3, [r3, #9]
 8016e2e:	2b0e      	cmp	r3, #14
 8016e30:	d001      	beq.n	8016e36 <OutputDbgTrace+0x6e>
 8016e32:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016e34:	e000      	b.n	8016e38 <OutputDbgTrace+0x70>
          break;
 8016e36:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016e38:	e016      	b.n	8016e68 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016e3e:	697b      	ldr	r3, [r7, #20]
 8016e40:	7a5b      	ldrb	r3, [r3, #9]
 8016e42:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016e44:	e010      	b.n	8016e68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016e46:	683b      	ldr	r3, [r7, #0]
 8016e48:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016e4a:	e00d      	b.n	8016e68 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8016e50:	693b      	ldr	r3, [r7, #16]
 8016e52:	785b      	ldrb	r3, [r3, #1]
 8016e54:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8016e56:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016e58:	e006      	b.n	8016e68 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016e5e:	697b      	ldr	r3, [r7, #20]
 8016e60:	7a5b      	ldrb	r3, [r3, #9]
 8016e62:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016e64:	e000      	b.n	8016e68 <OutputDbgTrace+0xa0>

    default:
      break;
 8016e66:	bf00      	nop
  }

  return;
 8016e68:	bf00      	nop
}
 8016e6a:	371c      	adds	r7, #28
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e72:	4770      	bx	lr

08016e74 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8016e74:	b480      	push	{r7}
 8016e76:	b085      	sub	sp, #20
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8016e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8016ebc <OTP_Read+0x48>)
 8016e80:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016e82:	e002      	b.n	8016e8a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8016e84:	68fb      	ldr	r3, [r7, #12]
 8016e86:	3b08      	subs	r3, #8
 8016e88:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	3307      	adds	r3, #7
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	79fa      	ldrb	r2, [r7, #7]
 8016e92:	429a      	cmp	r2, r3
 8016e94:	d003      	beq.n	8016e9e <OTP_Read+0x2a>
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	4a09      	ldr	r2, [pc, #36]	@ (8016ec0 <OTP_Read+0x4c>)
 8016e9a:	4293      	cmp	r3, r2
 8016e9c:	d1f2      	bne.n	8016e84 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8016e9e:	68fb      	ldr	r3, [r7, #12]
 8016ea0:	3307      	adds	r3, #7
 8016ea2:	781b      	ldrb	r3, [r3, #0]
 8016ea4:	79fa      	ldrb	r2, [r7, #7]
 8016ea6:	429a      	cmp	r2, r3
 8016ea8:	d001      	beq.n	8016eae <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8016eaa:	2300      	movs	r3, #0
 8016eac:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8016eae:	68fb      	ldr	r3, [r7, #12]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3714      	adds	r7, #20
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eba:	4770      	bx	lr
 8016ebc:	1fff73f8 	.word	0x1fff73f8
 8016ec0:	1fff7000 	.word	0x1fff7000

08016ec4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016ec4:	b480      	push	{r7}
 8016ec6:	b083      	sub	sp, #12
 8016ec8:	af00      	add	r7, sp, #0
 8016eca:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	687a      	ldr	r2, [r7, #4]
 8016ed0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	687a      	ldr	r2, [r7, #4]
 8016ed6:	605a      	str	r2, [r3, #4]
}
 8016ed8:	bf00      	nop
 8016eda:	370c      	adds	r7, #12
 8016edc:	46bd      	mov	sp, r7
 8016ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ee2:	4770      	bx	lr

08016ee4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016ee4:	b480      	push	{r7}
 8016ee6:	b087      	sub	sp, #28
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016eec:	f3ef 8310 	mrs	r3, PRIMASK
 8016ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ef2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ef4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ef6:	b672      	cpsid	i
}
 8016ef8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	687a      	ldr	r2, [r7, #4]
 8016f00:	429a      	cmp	r2, r3
 8016f02:	d102      	bne.n	8016f0a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016f04:	2301      	movs	r3, #1
 8016f06:	75fb      	strb	r3, [r7, #23]
 8016f08:	e001      	b.n	8016f0e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	75fb      	strb	r3, [r7, #23]
 8016f0e:	693b      	ldr	r3, [r7, #16]
 8016f10:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f12:	68bb      	ldr	r3, [r7, #8]
 8016f14:	f383 8810 	msr	PRIMASK, r3
}
 8016f18:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	371c      	adds	r7, #28
 8016f20:	46bd      	mov	sp, r7
 8016f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f26:	4770      	bx	lr

08016f28 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016f28:	b480      	push	{r7}
 8016f2a:	b087      	sub	sp, #28
 8016f2c:	af00      	add	r7, sp, #0
 8016f2e:	6078      	str	r0, [r7, #4]
 8016f30:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f32:	f3ef 8310 	mrs	r3, PRIMASK
 8016f36:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f38:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f3c:	b672      	cpsid	i
}
 8016f3e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	681a      	ldr	r2, [r3, #0]
 8016f44:	683b      	ldr	r3, [r7, #0]
 8016f46:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	687a      	ldr	r2, [r7, #4]
 8016f4c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	683a      	ldr	r2, [r7, #0]
 8016f52:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	683a      	ldr	r2, [r7, #0]
 8016f5a:	605a      	str	r2, [r3, #4]
 8016f5c:	697b      	ldr	r3, [r7, #20]
 8016f5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f60:	693b      	ldr	r3, [r7, #16]
 8016f62:	f383 8810 	msr	PRIMASK, r3
}
 8016f66:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f68:	bf00      	nop
 8016f6a:	371c      	adds	r7, #28
 8016f6c:	46bd      	mov	sp, r7
 8016f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f72:	4770      	bx	lr

08016f74 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016f74:	b480      	push	{r7}
 8016f76:	b087      	sub	sp, #28
 8016f78:	af00      	add	r7, sp, #0
 8016f7a:	6078      	str	r0, [r7, #4]
 8016f7c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8016f82:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f84:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f88:	b672      	cpsid	i
}
 8016f8a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	687a      	ldr	r2, [r7, #4]
 8016f90:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	685a      	ldr	r2, [r3, #4]
 8016f96:	683b      	ldr	r3, [r7, #0]
 8016f98:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	683a      	ldr	r2, [r7, #0]
 8016f9e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016fa0:	683b      	ldr	r3, [r7, #0]
 8016fa2:	685b      	ldr	r3, [r3, #4]
 8016fa4:	683a      	ldr	r2, [r7, #0]
 8016fa6:	601a      	str	r2, [r3, #0]
 8016fa8:	697b      	ldr	r3, [r7, #20]
 8016faa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fac:	693b      	ldr	r3, [r7, #16]
 8016fae:	f383 8810 	msr	PRIMASK, r3
}
 8016fb2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016fb4:	bf00      	nop
 8016fb6:	371c      	adds	r7, #28
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fbe:	4770      	bx	lr

08016fc0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	b087      	sub	sp, #28
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fc8:	f3ef 8310 	mrs	r3, PRIMASK
 8016fcc:	60fb      	str	r3, [r7, #12]
  return(result);
 8016fce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016fd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016fd2:	b672      	cpsid	i
}
 8016fd4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	685b      	ldr	r3, [r3, #4]
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	6812      	ldr	r2, [r2, #0]
 8016fde:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	687a      	ldr	r2, [r7, #4]
 8016fe6:	6852      	ldr	r2, [r2, #4]
 8016fe8:	605a      	str	r2, [r3, #4]
 8016fea:	697b      	ldr	r3, [r7, #20]
 8016fec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fee:	693b      	ldr	r3, [r7, #16]
 8016ff0:	f383 8810 	msr	PRIMASK, r3
}
 8016ff4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016ff6:	bf00      	nop
 8016ff8:	371c      	adds	r7, #28
 8016ffa:	46bd      	mov	sp, r7
 8016ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017000:	4770      	bx	lr

08017002 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8017002:	b580      	push	{r7, lr}
 8017004:	b086      	sub	sp, #24
 8017006:	af00      	add	r7, sp, #0
 8017008:	6078      	str	r0, [r7, #4]
 801700a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801700c:	f3ef 8310 	mrs	r3, PRIMASK
 8017010:	60fb      	str	r3, [r7, #12]
  return(result);
 8017012:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8017014:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8017016:	b672      	cpsid	i
}
 8017018:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	681a      	ldr	r2, [r3, #0]
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	681b      	ldr	r3, [r3, #0]
 8017026:	4618      	mov	r0, r3
 8017028:	f7ff ffca 	bl	8016fc0 <LST_remove_node>
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	f383 8810 	msr	PRIMASK, r3
}
 8017036:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8017038:	bf00      	nop
 801703a:	3718      	adds	r7, #24
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}

08017040 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b082      	sub	sp, #8
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f7ea fb70 	bl	800172e <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 801704e:	bf00      	nop
 8017050:	3708      	adds	r7, #8
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}

08017056 <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8017056:	b580      	push	{r7, lr}
 8017058:	b082      	sub	sp, #8
 801705a:	af00      	add	r7, sp, #0
 801705c:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 801705e:	e002      	b.n	8017066 <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8017060:	2001      	movs	r0, #1
 8017062:	f7ff ffed 	bl	8017040 <SPIF_Delay>
  while (Handle->Lock)
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	7b1b      	ldrb	r3, [r3, #12]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d1f8      	bne.n	8017060 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	2201      	movs	r2, #1
 8017072:	731a      	strb	r2, [r3, #12]
}
 8017074:	bf00      	nop
 8017076:	3708      	adds	r7, #8
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}

0801707c <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 801707c:	b480      	push	{r7}
 801707e:	b083      	sub	sp, #12
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	2200      	movs	r2, #0
 8017088:	731a      	strb	r2, [r3, #12]
}
 801708a:	bf00      	nop
 801708c:	370c      	adds	r7, #12
 801708e:	46bd      	mov	sp, r7
 8017090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017094:	4770      	bx	lr

08017096 <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8017096:	b580      	push	{r7, lr}
 8017098:	b084      	sub	sp, #16
 801709a:	af00      	add	r7, sp, #0
 801709c:	6078      	str	r0, [r7, #4]
 801709e:	460b      	mov	r3, r1
 80170a0:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	6858      	ldr	r0, [r3, #4]
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	691b      	ldr	r3, [r3, #16]
 80170aa:	b29b      	uxth	r3, r3
 80170ac:	78fa      	ldrb	r2, [r7, #3]
 80170ae:	4619      	mov	r1, r3
 80170b0:	f7f2 f9ea 	bl	8009488 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 80170b4:	2300      	movs	r3, #0
 80170b6:	60fb      	str	r3, [r7, #12]
 80170b8:	e002      	b.n	80170c0 <SPIF_CsPin+0x2a>
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	3301      	adds	r3, #1
 80170be:	60fb      	str	r3, [r7, #12]
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2b09      	cmp	r3, #9
 80170c4:	ddf9      	ble.n	80170ba <SPIF_CsPin+0x24>
}
 80170c6:	bf00      	nop
 80170c8:	bf00      	nop
 80170ca:	3710      	adds	r7, #16
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}

080170d0 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b086      	sub	sp, #24
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	60f8      	str	r0, [r7, #12]
 80170d8:	60b9      	str	r1, [r7, #8]
 80170da:	607a      	str	r2, [r7, #4]
 80170dc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80170de:	2300      	movs	r3, #0
 80170e0:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80170e2:	f7f0 f959 	bl	8007398 <HAL_GetTick>
 80170e6:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_TransmitReceive_DMA(Handle->HSpi, Tx, Rx, Size) != HAL_OK)
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	6818      	ldr	r0, [r3, #0]
 80170ec:	683b      	ldr	r3, [r7, #0]
 80170ee:	b29b      	uxth	r3, r3
 80170f0:	687a      	ldr	r2, [r7, #4]
 80170f2:	68b9      	ldr	r1, [r7, #8]
 80170f4:	f7f7 f890 	bl	800e218 <HAL_SPI_TransmitReceive_DMA>
 80170f8:	4603      	mov	r3, r0
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d11a      	bne.n	8017134 <SPIF_TransmitReceive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80170fe:	2001      	movs	r0, #1
 8017100:	f7ff ff9e 	bl	8017040 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8017104:	f7f0 f948 	bl	8007398 <HAL_GetTick>
 8017108:	4602      	mov	r2, r0
 801710a:	693b      	ldr	r3, [r7, #16]
 801710c:	1ad3      	subs	r3, r2, r3
 801710e:	6a3a      	ldr	r2, [r7, #32]
 8017110:	429a      	cmp	r2, r3
 8017112:	d805      	bhi.n	8017120 <SPIF_TransmitReceive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8017114:	68fb      	ldr	r3, [r7, #12]
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	4618      	mov	r0, r3
 801711a:	f7f7 fa03 	bl	800e524 <HAL_SPI_DMAStop>
        break;
 801711e:	e009      	b.n	8017134 <SPIF_TransmitReceive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	4618      	mov	r0, r3
 8017126:	f7f7 fb77 	bl	800e818 <HAL_SPI_GetState>
 801712a:	4603      	mov	r3, r0
 801712c:	2b01      	cmp	r3, #1
 801712e:	d1e6      	bne.n	80170fe <SPIF_TransmitReceive+0x2e>
      {
        retVal = true;
 8017130:	2301      	movs	r3, #1
 8017132:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017134:	7dfb      	ldrb	r3, [r7, #23]
}
 8017136:	4618      	mov	r0, r3
 8017138:	3718      	adds	r7, #24
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}

0801713e <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 801713e:	b580      	push	{r7, lr}
 8017140:	b086      	sub	sp, #24
 8017142:	af00      	add	r7, sp, #0
 8017144:	60f8      	str	r0, [r7, #12]
 8017146:	60b9      	str	r1, [r7, #8]
 8017148:	607a      	str	r2, [r7, #4]
 801714a:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801714c:	2300      	movs	r3, #0
 801714e:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 8017150:	f7f0 f922 	bl	8007398 <HAL_GetTick>
 8017154:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Transmit_DMA(Handle->HSpi, Tx, Size) != HAL_OK)
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	687a      	ldr	r2, [r7, #4]
 801715c:	b292      	uxth	r2, r2
 801715e:	68b9      	ldr	r1, [r7, #8]
 8017160:	4618      	mov	r0, r3
 8017162:	f7f6 fe4b 	bl	800ddfc <HAL_SPI_Transmit_DMA>
 8017166:	4603      	mov	r3, r0
 8017168:	2b00      	cmp	r3, #0
 801716a:	d11a      	bne.n	80171a2 <SPIF_Transmit+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 801716c:	2001      	movs	r0, #1
 801716e:	f7ff ff67 	bl	8017040 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 8017172:	f7f0 f911 	bl	8007398 <HAL_GetTick>
 8017176:	4602      	mov	r2, r0
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	1ad3      	subs	r3, r2, r3
 801717c:	683a      	ldr	r2, [r7, #0]
 801717e:	429a      	cmp	r2, r3
 8017180:	d805      	bhi.n	801718e <SPIF_Transmit+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	4618      	mov	r0, r3
 8017188:	f7f7 f9cc 	bl	800e524 <HAL_SPI_DMAStop>
        break;
 801718c:	e009      	b.n	80171a2 <SPIF_Transmit+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	4618      	mov	r0, r3
 8017194:	f7f7 fb40 	bl	800e818 <HAL_SPI_GetState>
 8017198:	4603      	mov	r3, r0
 801719a:	2b01      	cmp	r3, #1
 801719c:	d1e6      	bne.n	801716c <SPIF_Transmit+0x2e>
      {
        retVal = true;
 801719e:	2301      	movs	r3, #1
 80171a0:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 80171a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80171a4:	4618      	mov	r0, r3
 80171a6:	3718      	adds	r7, #24
 80171a8:	46bd      	mov	sp, r7
 80171aa:	bd80      	pop	{r7, pc}

080171ac <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b086      	sub	sp, #24
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	60f8      	str	r0, [r7, #12]
 80171b4:	60b9      	str	r1, [r7, #8]
 80171b6:	607a      	str	r2, [r7, #4]
 80171b8:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80171ba:	2300      	movs	r3, #0
 80171bc:	75fb      	strb	r3, [r7, #23]
  else
  {
    dprintf("SPIF TIMEOUT\r\n");
  }
#elif (SPIF_PLATFORM == SPIF_PLATFORM_HAL_DMA)
  uint32_t startTime = HAL_GetTick();
 80171be:	f7f0 f8eb 	bl	8007398 <HAL_GetTick>
 80171c2:	6138      	str	r0, [r7, #16]
  if (HAL_SPI_Receive_DMA(Handle->HSpi, Rx, Size) != HAL_OK)
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	687a      	ldr	r2, [r7, #4]
 80171ca:	b292      	uxth	r2, r2
 80171cc:	68b9      	ldr	r1, [r7, #8]
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7f6 ff02 	bl	800dfd8 <HAL_SPI_Receive_DMA>
 80171d4:	4603      	mov	r3, r0
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d11a      	bne.n	8017210 <SPIF_Receive+0x64>
  }
  else
  {
    while (1)
    {
      SPIF_Delay(1);
 80171da:	2001      	movs	r0, #1
 80171dc:	f7ff ff30 	bl	8017040 <SPIF_Delay>
      if (HAL_GetTick() - startTime >= Timeout)
 80171e0:	f7f0 f8da 	bl	8007398 <HAL_GetTick>
 80171e4:	4602      	mov	r2, r0
 80171e6:	693b      	ldr	r3, [r7, #16]
 80171e8:	1ad3      	subs	r3, r2, r3
 80171ea:	683a      	ldr	r2, [r7, #0]
 80171ec:	429a      	cmp	r2, r3
 80171ee:	d805      	bhi.n	80171fc <SPIF_Receive+0x50>
      {
        dprintf("SPIF TIMEOUT\r\n");
        HAL_SPI_DMAStop(Handle->HSpi);
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7f7 f995 	bl	800e524 <HAL_SPI_DMAStop>
        break;
 80171fa:	e009      	b.n	8017210 <SPIF_Receive+0x64>
      }
      if (HAL_SPI_GetState(Handle->HSpi) == HAL_SPI_STATE_READY)
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	4618      	mov	r0, r3
 8017202:	f7f7 fb09 	bl	800e818 <HAL_SPI_GetState>
 8017206:	4603      	mov	r3, r0
 8017208:	2b01      	cmp	r3, #1
 801720a:	d1e6      	bne.n	80171da <SPIF_Receive+0x2e>
      {
        retVal = true;
 801720c:	2301      	movs	r3, #1
 801720e:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8017210:	7dfb      	ldrb	r3, [r7, #23]
}
 8017212:	4618      	mov	r0, r3
 8017214:	3718      	adds	r7, #24
 8017216:	46bd      	mov	sp, r7
 8017218:	bd80      	pop	{r7, pc}

0801721a <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 801721a:	b580      	push	{r7, lr}
 801721c:	b084      	sub	sp, #16
 801721e:	af00      	add	r7, sp, #0
 8017220:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8017222:	2301      	movs	r3, #1
 8017224:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 8017226:	2306      	movs	r3, #6
 8017228:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 801722a:	2100      	movs	r1, #0
 801722c:	6878      	ldr	r0, [r7, #4]
 801722e:	f7ff ff32 	bl	8017096 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8017232:	f107 010c 	add.w	r1, r7, #12
 8017236:	2364      	movs	r3, #100	@ 0x64
 8017238:	2201      	movs	r2, #1
 801723a:	6878      	ldr	r0, [r7, #4]
 801723c:	f7ff ff7f 	bl	801713e <SPIF_Transmit>
 8017240:	4603      	mov	r3, r0
 8017242:	f083 0301 	eor.w	r3, r3, #1
 8017246:	b2db      	uxtb	r3, r3
 8017248:	2b00      	cmp	r3, #0
 801724a:	d001      	beq.n	8017250 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 801724c:	2300      	movs	r3, #0
 801724e:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8017250:	2101      	movs	r1, #1
 8017252:	6878      	ldr	r0, [r7, #4]
 8017254:	f7ff ff1f 	bl	8017096 <SPIF_CsPin>
  return retVal;
 8017258:	7bfb      	ldrb	r3, [r7, #15]
}
 801725a:	4618      	mov	r0, r3
 801725c:	3710      	adds	r7, #16
 801725e:	46bd      	mov	sp, r7
 8017260:	bd80      	pop	{r7, pc}

08017262 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8017262:	b580      	push	{r7, lr}
 8017264:	b084      	sub	sp, #16
 8017266:	af00      	add	r7, sp, #0
 8017268:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 801726a:	2301      	movs	r3, #1
 801726c:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 801726e:	2304      	movs	r3, #4
 8017270:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8017272:	2100      	movs	r1, #0
 8017274:	6878      	ldr	r0, [r7, #4]
 8017276:	f7ff ff0e 	bl	8017096 <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 801727a:	f107 010c 	add.w	r1, r7, #12
 801727e:	2364      	movs	r3, #100	@ 0x64
 8017280:	2201      	movs	r2, #1
 8017282:	6878      	ldr	r0, [r7, #4]
 8017284:	f7ff ff5b 	bl	801713e <SPIF_Transmit>
 8017288:	4603      	mov	r3, r0
 801728a:	f083 0301 	eor.w	r3, r3, #1
 801728e:	b2db      	uxtb	r3, r3
 8017290:	2b00      	cmp	r3, #0
 8017292:	d001      	beq.n	8017298 <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 8017294:	2300      	movs	r3, #0
 8017296:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8017298:	2101      	movs	r1, #1
 801729a:	6878      	ldr	r0, [r7, #4]
 801729c:	f7ff fefb 	bl	8017096 <SPIF_CsPin>
  return retVal;
 80172a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80172a2:	4618      	mov	r0, r3
 80172a4:	3710      	adds	r7, #16
 80172a6:	46bd      	mov	sp, r7
 80172a8:	bd80      	pop	{r7, pc}

080172aa <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 80172aa:	b580      	push	{r7, lr}
 80172ac:	b086      	sub	sp, #24
 80172ae:	af02      	add	r7, sp, #8
 80172b0:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 80172b2:	2300      	movs	r3, #0
 80172b4:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 80172b6:	f24a 5305 	movw	r3, #42245	@ 0xa505
 80172ba:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 80172bc:	2100      	movs	r1, #0
 80172be:	6878      	ldr	r0, [r7, #4]
 80172c0:	f7ff fee9 	bl	8017096 <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 80172c4:	f107 0208 	add.w	r2, r7, #8
 80172c8:	f107 010c 	add.w	r1, r7, #12
 80172cc:	2364      	movs	r3, #100	@ 0x64
 80172ce:	9300      	str	r3, [sp, #0]
 80172d0:	2302      	movs	r3, #2
 80172d2:	6878      	ldr	r0, [r7, #4]
 80172d4:	f7ff fefc 	bl	80170d0 <SPIF_TransmitReceive>
 80172d8:	4603      	mov	r3, r0
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d001      	beq.n	80172e2 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 80172de:	7a7b      	ldrb	r3, [r7, #9]
 80172e0:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80172e2:	2101      	movs	r1, #1
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f7ff fed6 	bl	8017096 <SPIF_CsPin>
  return retVal;
 80172ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	3710      	adds	r7, #16
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}

080172f4 <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b084      	sub	sp, #16
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
 80172fc:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80172fe:	2300      	movs	r3, #0
 8017300:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 8017302:	f7f0 f849 	bl	8007398 <HAL_GetTick>
 8017306:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 8017308:	2001      	movs	r0, #1
 801730a:	f7ff fe99 	bl	8017040 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 801730e:	f7f0 f843 	bl	8007398 <HAL_GetTick>
 8017312:	4602      	mov	r2, r0
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	1ad3      	subs	r3, r2, r3
 8017318:	683a      	ldr	r2, [r7, #0]
 801731a:	429a      	cmp	r2, r3
 801731c:	d90a      	bls.n	8017334 <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 801731e:	6878      	ldr	r0, [r7, #4]
 8017320:	f7ff ffc3 	bl	80172aa <SPIF_ReadReg1>
 8017324:	4603      	mov	r3, r0
 8017326:	f003 0301 	and.w	r3, r3, #1
 801732a:	2b00      	cmp	r3, #0
 801732c:	d1ec      	bne.n	8017308 <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 801732e:	2301      	movs	r3, #1
 8017330:	73fb      	strb	r3, [r7, #15]
      break;
 8017332:	e000      	b.n	8017336 <SPIF_WaitForWriting+0x42>
      break;
 8017334:	bf00      	nop
    }
  }
  return retVal;
 8017336:	7bfb      	ldrb	r3, [r7, #15]
}
 8017338:	4618      	mov	r0, r3
 801733a:	3710      	adds	r7, #16
 801733c:	46bd      	mov	sp, r7
 801733e:	bd80      	pop	{r7, pc}

08017340 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b088      	sub	sp, #32
 8017344:	af02      	add	r7, sp, #8
 8017346:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8017348:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 801734c:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 801734e:	2300      	movs	r3, #0
 8017350:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 8017352:	2100      	movs	r1, #0
 8017354:	6878      	ldr	r0, [r7, #4]
 8017356:	f7ff fe9e 	bl	8017096 <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 801735a:	f107 020c 	add.w	r2, r7, #12
 801735e:	f107 0110 	add.w	r1, r7, #16
 8017362:	2364      	movs	r3, #100	@ 0x64
 8017364:	9300      	str	r3, [sp, #0]
 8017366:	2304      	movs	r3, #4
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f7ff feb1 	bl	80170d0 <SPIF_TransmitReceive>
 801736e:	4603      	mov	r3, r0
 8017370:	f083 0301 	eor.w	r3, r3, #1
 8017374:	b2db      	uxtb	r3, r3
 8017376:	2b00      	cmp	r3, #0
 8017378:	d004      	beq.n	8017384 <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 801737a:	2101      	movs	r1, #1
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f7ff fe8a 	bl	8017096 <SPIF_CsPin>
      break;
 8017382:	e16f      	b.n	8017664 <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 8017384:	2101      	movs	r1, #1
 8017386:	6878      	ldr	r0, [r7, #4]
 8017388:	f7ff fe85 	bl	8017096 <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 801738c:	7b7a      	ldrb	r2, [r7, #13]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 8017392:	7bba      	ldrb	r2, [r7, #14]
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8017398:	7bfa      	ldrb	r2, [r7, #15]
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	7a1b      	ldrb	r3, [r3, #8]
 80173a2:	2bef      	cmp	r3, #239	@ 0xef
 80173a4:	f000 80f0 	beq.w	8017588 <SPIF_FindChip+0x248>
 80173a8:	2bef      	cmp	r3, #239	@ 0xef
 80173aa:	f300 80e9 	bgt.w	8017580 <SPIF_FindChip+0x240>
 80173ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80173b0:	f300 80e6 	bgt.w	8017580 <SPIF_FindChip+0x240>
 80173b4:	2b85      	cmp	r3, #133	@ 0x85
 80173b6:	da0c      	bge.n	80173d2 <SPIF_FindChip+0x92>
 80173b8:	2b62      	cmp	r3, #98	@ 0x62
 80173ba:	f000 80e7 	beq.w	801758c <SPIF_FindChip+0x24c>
 80173be:	2b62      	cmp	r3, #98	@ 0x62
 80173c0:	f300 80de 	bgt.w	8017580 <SPIF_FindChip+0x240>
 80173c4:	2b20      	cmp	r3, #32
 80173c6:	f300 80d9 	bgt.w	801757c <SPIF_FindChip+0x23c>
 80173ca:	2b00      	cmp	r3, #0
 80173cc:	f300 8090 	bgt.w	80174f0 <SPIF_FindChip+0x1b0>
 80173d0:	e0d6      	b.n	8017580 <SPIF_FindChip+0x240>
 80173d2:	3b85      	subs	r3, #133	@ 0x85
 80173d4:	2b43      	cmp	r3, #67	@ 0x43
 80173d6:	f200 80d3 	bhi.w	8017580 <SPIF_FindChip+0x240>
 80173da:	a201      	add	r2, pc, #4	@ (adr r2, 80173e0 <SPIF_FindChip+0xa0>)
 80173dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173e0:	08017591 	.word	0x08017591
 80173e4:	08017581 	.word	0x08017581
 80173e8:	08017581 	.word	0x08017581
 80173ec:	08017581 	.word	0x08017581
 80173f0:	08017591 	.word	0x08017591
 80173f4:	08017581 	.word	0x08017581
 80173f8:	08017581 	.word	0x08017581
 80173fc:	08017591 	.word	0x08017591
 8017400:	08017581 	.word	0x08017581
 8017404:	08017581 	.word	0x08017581
 8017408:	08017581 	.word	0x08017581
 801740c:	08017581 	.word	0x08017581
 8017410:	08017581 	.word	0x08017581
 8017414:	08017581 	.word	0x08017581
 8017418:	08017581 	.word	0x08017581
 801741c:	08017581 	.word	0x08017581
 8017420:	08017581 	.word	0x08017581
 8017424:	08017581 	.word	0x08017581
 8017428:	08017581 	.word	0x08017581
 801742c:	08017581 	.word	0x08017581
 8017430:	08017581 	.word	0x08017581
 8017434:	08017581 	.word	0x08017581
 8017438:	08017581 	.word	0x08017581
 801743c:	08017581 	.word	0x08017581
 8017440:	08017591 	.word	0x08017591
 8017444:	08017581 	.word	0x08017581
 8017448:	08017581 	.word	0x08017581
 801744c:	08017581 	.word	0x08017581
 8017450:	08017591 	.word	0x08017591
 8017454:	08017581 	.word	0x08017581
 8017458:	08017581 	.word	0x08017581
 801745c:	08017581 	.word	0x08017581
 8017460:	08017581 	.word	0x08017581
 8017464:	08017581 	.word	0x08017581
 8017468:	08017581 	.word	0x08017581
 801746c:	08017581 	.word	0x08017581
 8017470:	08017581 	.word	0x08017581
 8017474:	08017581 	.word	0x08017581
 8017478:	08017581 	.word	0x08017581
 801747c:	08017581 	.word	0x08017581
 8017480:	08017591 	.word	0x08017591
 8017484:	08017581 	.word	0x08017581
 8017488:	08017581 	.word	0x08017581
 801748c:	08017581 	.word	0x08017581
 8017490:	08017581 	.word	0x08017581
 8017494:	08017581 	.word	0x08017581
 8017498:	08017581 	.word	0x08017581
 801749c:	08017581 	.word	0x08017581
 80174a0:	08017581 	.word	0x08017581
 80174a4:	08017581 	.word	0x08017581
 80174a8:	08017581 	.word	0x08017581
 80174ac:	08017581 	.word	0x08017581
 80174b0:	08017581 	.word	0x08017581
 80174b4:	08017581 	.word	0x08017581
 80174b8:	08017581 	.word	0x08017581
 80174bc:	08017581 	.word	0x08017581
 80174c0:	08017581 	.word	0x08017581
 80174c4:	08017581 	.word	0x08017581
 80174c8:	08017591 	.word	0x08017591
 80174cc:	08017581 	.word	0x08017581
 80174d0:	08017581 	.word	0x08017581
 80174d4:	08017591 	.word	0x08017591
 80174d8:	08017581 	.word	0x08017581
 80174dc:	08017581 	.word	0x08017581
 80174e0:	08017581 	.word	0x08017581
 80174e4:	08017581 	.word	0x08017581
 80174e8:	08017581 	.word	0x08017581
 80174ec:	08017591 	.word	0x08017591
 80174f0:	3b01      	subs	r3, #1
 80174f2:	2b1f      	cmp	r3, #31
 80174f4:	d844      	bhi.n	8017580 <SPIF_FindChip+0x240>
 80174f6:	a201      	add	r2, pc, #4	@ (adr r2, 80174fc <SPIF_FindChip+0x1bc>)
 80174f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174fc:	08017595 	.word	0x08017595
 8017500:	08017581 	.word	0x08017581
 8017504:	08017581 	.word	0x08017581
 8017508:	08017595 	.word	0x08017595
 801750c:	08017581 	.word	0x08017581
 8017510:	08017581 	.word	0x08017581
 8017514:	08017581 	.word	0x08017581
 8017518:	08017581 	.word	0x08017581
 801751c:	08017581 	.word	0x08017581
 8017520:	08017581 	.word	0x08017581
 8017524:	08017581 	.word	0x08017581
 8017528:	08017581 	.word	0x08017581
 801752c:	08017581 	.word	0x08017581
 8017530:	08017581 	.word	0x08017581
 8017534:	08017581 	.word	0x08017581
 8017538:	08017581 	.word	0x08017581
 801753c:	08017581 	.word	0x08017581
 8017540:	08017581 	.word	0x08017581
 8017544:	08017581 	.word	0x08017581
 8017548:	08017581 	.word	0x08017581
 801754c:	08017581 	.word	0x08017581
 8017550:	08017581 	.word	0x08017581
 8017554:	08017581 	.word	0x08017581
 8017558:	08017581 	.word	0x08017581
 801755c:	08017581 	.word	0x08017581
 8017560:	08017581 	.word	0x08017581
 8017564:	08017581 	.word	0x08017581
 8017568:	08017595 	.word	0x08017595
 801756c:	08017581 	.word	0x08017581
 8017570:	08017581 	.word	0x08017581
 8017574:	08017581 	.word	0x08017581
 8017578:	08017595 	.word	0x08017595
 801757c:	2b37      	cmp	r3, #55	@ 0x37
 801757e:	d00b      	beq.n	8017598 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	2200      	movs	r2, #0
 8017584:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 8017586:	e008      	b.n	801759a <SPIF_FindChip+0x25a>
      break;
 8017588:	bf00      	nop
 801758a:	e006      	b.n	801759a <SPIF_FindChip+0x25a>
      break;
 801758c:	bf00      	nop
 801758e:	e004      	b.n	801759a <SPIF_FindChip+0x25a>
      break;
 8017590:	bf00      	nop
 8017592:	e002      	b.n	801759a <SPIF_FindChip+0x25a>
      break;
 8017594:	bf00      	nop
 8017596:	e000      	b.n	801759a <SPIF_FindChip+0x25a>
      break;
 8017598:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	7a5b      	ldrb	r3, [r3, #9]
 801759e:	3b11      	subs	r3, #17
 80175a0:	2b0f      	cmp	r3, #15
 80175a2:	d84e      	bhi.n	8017642 <SPIF_FindChip+0x302>
 80175a4:	a201      	add	r2, pc, #4	@ (adr r2, 80175ac <SPIF_FindChip+0x26c>)
 80175a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175aa:	bf00      	nop
 80175ac:	080175ed 	.word	0x080175ed
 80175b0:	080175f5 	.word	0x080175f5
 80175b4:	080175fd 	.word	0x080175fd
 80175b8:	08017605 	.word	0x08017605
 80175bc:	0801760d 	.word	0x0801760d
 80175c0:	08017615 	.word	0x08017615
 80175c4:	0801761d 	.word	0x0801761d
 80175c8:	08017625 	.word	0x08017625
 80175cc:	0801762f 	.word	0x0801762f
 80175d0:	08017643 	.word	0x08017643
 80175d4:	08017643 	.word	0x08017643
 80175d8:	08017643 	.word	0x08017643
 80175dc:	08017643 	.word	0x08017643
 80175e0:	08017643 	.word	0x08017643
 80175e4:	08017643 	.word	0x08017643
 80175e8:	08017639 	.word	0x08017639
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2202      	movs	r2, #2
 80175f0:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80175f2:	e02a      	b.n	801764a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	2204      	movs	r2, #4
 80175f8:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80175fa:	e026      	b.n	801764a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	2208      	movs	r2, #8
 8017600:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 8017602:	e022      	b.n	801764a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	2210      	movs	r2, #16
 8017608:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 801760a:	e01e      	b.n	801764a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	2220      	movs	r2, #32
 8017610:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 8017612:	e01a      	b.n	801764a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	2240      	movs	r2, #64	@ 0x40
 8017618:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 801761a:	e016      	b.n	801764a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2280      	movs	r2, #128	@ 0x80
 8017620:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 8017622:	e012      	b.n	801764a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801762a:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 801762c:	e00d      	b.n	801764a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8017634:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 8017636:	e008      	b.n	801764a <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801763e:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8017640:	e003      	b.n	801764a <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	2200      	movs	r2, #0
 8017646:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8017648:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	69db      	ldr	r3, [r3, #28]
 801764e:	011a      	lsls	r2, r3, #4
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	699b      	ldr	r3, [r3, #24]
 8017658:	031b      	lsls	r3, r3, #12
 801765a:	0a1a      	lsrs	r2, r3, #8
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8017660:	2301      	movs	r3, #1
 8017662:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017664:	7dfb      	ldrb	r3, [r7, #23]
}
 8017666:	4618      	mov	r0, r3
 8017668:	3718      	adds	r7, #24
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}
 801766e:	bf00      	nop

08017670 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b08a      	sub	sp, #40	@ 0x28
 8017674:	af00      	add	r7, sp, #0
 8017676:	60f8      	str	r0, [r7, #12]
 8017678:	60b9      	str	r1, [r7, #8]
 801767a:	607a      	str	r2, [r7, #4]
 801767c:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 801767e:	2300      	movs	r3, #0
 8017680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 8017684:	2300      	movs	r3, #0
 8017686:	623b      	str	r3, [r7, #32]
 8017688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801768a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801768e:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	695b      	ldr	r3, [r3, #20]
 8017694:	68ba      	ldr	r2, [r7, #8]
 8017696:	429a      	cmp	r2, r3
 8017698:	f080 8084 	bcs.w	80177a4 <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 801769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801769e:	2bff      	cmp	r3, #255	@ 0xff
 80176a0:	f200 8082 	bhi.w	80177a8 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 80176a4:	683a      	ldr	r2, [r7, #0]
 80176a6:	69fb      	ldr	r3, [r7, #28]
 80176a8:	429a      	cmp	r2, r3
 80176aa:	d901      	bls.n	80176b0 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 80176ac:	69fb      	ldr	r3, [r7, #28]
 80176ae:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	021b      	lsls	r3, r3, #8
 80176b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80176b6:	4413      	add	r3, r2
 80176b8:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80176ba:	68f8      	ldr	r0, [r7, #12]
 80176bc:	f7ff fdad 	bl	801721a <SPIF_WriteEnable>
 80176c0:	4603      	mov	r3, r0
 80176c2:	f083 0301 	eor.w	r3, r3, #1
 80176c6:	b2db      	uxtb	r3, r3
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d16f      	bne.n	80177ac <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80176cc:	2100      	movs	r1, #0
 80176ce:	68f8      	ldr	r0, [r7, #12]
 80176d0:	f7ff fce1 	bl	8017096 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	69db      	ldr	r3, [r3, #28]
 80176d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80176dc:	d322      	bcc.n	8017724 <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80176de:	2312      	movs	r3, #18
 80176e0:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80176e2:	6a3b      	ldr	r3, [r7, #32]
 80176e4:	0e1b      	lsrs	r3, r3, #24
 80176e6:	b2db      	uxtb	r3, r3
 80176e8:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80176ea:	6a3b      	ldr	r3, [r7, #32]
 80176ec:	0c1b      	lsrs	r3, r3, #16
 80176ee:	b2db      	uxtb	r3, r3
 80176f0:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80176f2:	6a3b      	ldr	r3, [r7, #32]
 80176f4:	0a1b      	lsrs	r3, r3, #8
 80176f6:	b2db      	uxtb	r3, r3
 80176f8:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80176fa:	6a3b      	ldr	r3, [r7, #32]
 80176fc:	b2db      	uxtb	r3, r3
 80176fe:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017700:	f107 0114 	add.w	r1, r7, #20
 8017704:	2364      	movs	r3, #100	@ 0x64
 8017706:	2205      	movs	r2, #5
 8017708:	68f8      	ldr	r0, [r7, #12]
 801770a:	f7ff fd18 	bl	801713e <SPIF_Transmit>
 801770e:	4603      	mov	r3, r0
 8017710:	f083 0301 	eor.w	r3, r3, #1
 8017714:	b2db      	uxtb	r3, r3
 8017716:	2b00      	cmp	r3, #0
 8017718:	d023      	beq.n	8017762 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 801771a:	2101      	movs	r1, #1
 801771c:	68f8      	ldr	r0, [r7, #12]
 801771e:	f7ff fcba 	bl	8017096 <SPIF_CsPin>
        break;
 8017722:	e044      	b.n	80177ae <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 8017724:	2302      	movs	r3, #2
 8017726:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8017728:	6a3b      	ldr	r3, [r7, #32]
 801772a:	0c1b      	lsrs	r3, r3, #16
 801772c:	b2db      	uxtb	r3, r3
 801772e:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8017730:	6a3b      	ldr	r3, [r7, #32]
 8017732:	0a1b      	lsrs	r3, r3, #8
 8017734:	b2db      	uxtb	r3, r3
 8017736:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8017738:	6a3b      	ldr	r3, [r7, #32]
 801773a:	b2db      	uxtb	r3, r3
 801773c:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801773e:	f107 0114 	add.w	r1, r7, #20
 8017742:	2364      	movs	r3, #100	@ 0x64
 8017744:	2204      	movs	r2, #4
 8017746:	68f8      	ldr	r0, [r7, #12]
 8017748:	f7ff fcf9 	bl	801713e <SPIF_Transmit>
 801774c:	4603      	mov	r3, r0
 801774e:	f083 0301 	eor.w	r3, r3, #1
 8017752:	b2db      	uxtb	r3, r3
 8017754:	2b00      	cmp	r3, #0
 8017756:	d004      	beq.n	8017762 <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8017758:	2101      	movs	r1, #1
 801775a:	68f8      	ldr	r0, [r7, #12]
 801775c:	f7ff fc9b 	bl	8017096 <SPIF_CsPin>
        break;
 8017760:	e025      	b.n	80177ae <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 8017762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017766:	683a      	ldr	r2, [r7, #0]
 8017768:	6879      	ldr	r1, [r7, #4]
 801776a:	68f8      	ldr	r0, [r7, #12]
 801776c:	f7ff fce7 	bl	801713e <SPIF_Transmit>
 8017770:	4603      	mov	r3, r0
 8017772:	f083 0301 	eor.w	r3, r3, #1
 8017776:	b2db      	uxtb	r3, r3
 8017778:	2b00      	cmp	r3, #0
 801777a:	d004      	beq.n	8017786 <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 801777c:	2101      	movs	r1, #1
 801777e:	68f8      	ldr	r0, [r7, #12]
 8017780:	f7ff fc89 	bl	8017096 <SPIF_CsPin>
      break;
 8017784:	e013      	b.n	80177ae <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 8017786:	2101      	movs	r1, #1
 8017788:	68f8      	ldr	r0, [r7, #12]
 801778a:	f7ff fc84 	bl	8017096 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 801778e:	2164      	movs	r1, #100	@ 0x64
 8017790:	68f8      	ldr	r0, [r7, #12]
 8017792:	f7ff fdaf 	bl	80172f4 <SPIF_WaitForWriting>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d008      	beq.n	80177ae <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 801779c:	2301      	movs	r3, #1
 801779e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80177a2:	e004      	b.n	80177ae <SPIF_WriteFn+0x13e>
      break;
 80177a4:	bf00      	nop
 80177a6:	e002      	b.n	80177ae <SPIF_WriteFn+0x13e>
      break;
 80177a8:	bf00      	nop
 80177aa:	e000      	b.n	80177ae <SPIF_WriteFn+0x13e>
      break;
 80177ac:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 80177ae:	68f8      	ldr	r0, [r7, #12]
 80177b0:	f7ff fd57 	bl	8017262 <SPIF_WriteDisable>
  return retVal;
 80177b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80177b8:	4618      	mov	r0, r3
 80177ba:	3728      	adds	r7, #40	@ 0x28
 80177bc:	46bd      	mov	sp, r7
 80177be:	bd80      	pop	{r7, pc}

080177c0 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80177c0:	b580      	push	{r7, lr}
 80177c2:	b086      	sub	sp, #24
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	60f8      	str	r0, [r7, #12]
 80177c8:	60b9      	str	r1, [r7, #8]
 80177ca:	607a      	str	r2, [r7, #4]
 80177cc:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80177ce:	2300      	movs	r3, #0
 80177d0:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 80177d2:	2100      	movs	r1, #0
 80177d4:	68f8      	ldr	r0, [r7, #12]
 80177d6:	f7ff fc5e 	bl	8017096 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	69db      	ldr	r3, [r3, #28]
 80177de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80177e2:	d322      	bcc.n	801782a <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 80177e4:	2313      	movs	r3, #19
 80177e6:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	0e1b      	lsrs	r3, r3, #24
 80177ec:	b2db      	uxtb	r3, r3
 80177ee:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 80177f0:	68bb      	ldr	r3, [r7, #8]
 80177f2:	0c1b      	lsrs	r3, r3, #16
 80177f4:	b2db      	uxtb	r3, r3
 80177f6:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80177f8:	68bb      	ldr	r3, [r7, #8]
 80177fa:	0a1b      	lsrs	r3, r3, #8
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 8017800:	68bb      	ldr	r3, [r7, #8]
 8017802:	b2db      	uxtb	r3, r3
 8017804:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 8017806:	f107 0110 	add.w	r1, r7, #16
 801780a:	2364      	movs	r3, #100	@ 0x64
 801780c:	2205      	movs	r2, #5
 801780e:	68f8      	ldr	r0, [r7, #12]
 8017810:	f7ff fc95 	bl	801713e <SPIF_Transmit>
 8017814:	4603      	mov	r3, r0
 8017816:	f083 0301 	eor.w	r3, r3, #1
 801781a:	b2db      	uxtb	r3, r3
 801781c:	2b00      	cmp	r3, #0
 801781e:	d023      	beq.n	8017868 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8017820:	2101      	movs	r1, #1
 8017822:	68f8      	ldr	r0, [r7, #12]
 8017824:	f7ff fc37 	bl	8017096 <SPIF_CsPin>
        break;
 8017828:	e036      	b.n	8017898 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 801782a:	2303      	movs	r3, #3
 801782c:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 801782e:	68bb      	ldr	r3, [r7, #8]
 8017830:	0c1b      	lsrs	r3, r3, #16
 8017832:	b2db      	uxtb	r3, r3
 8017834:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 8017836:	68bb      	ldr	r3, [r7, #8]
 8017838:	0a1b      	lsrs	r3, r3, #8
 801783a:	b2db      	uxtb	r3, r3
 801783c:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	b2db      	uxtb	r3, r3
 8017842:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8017844:	f107 0110 	add.w	r1, r7, #16
 8017848:	2364      	movs	r3, #100	@ 0x64
 801784a:	2204      	movs	r2, #4
 801784c:	68f8      	ldr	r0, [r7, #12]
 801784e:	f7ff fc76 	bl	801713e <SPIF_Transmit>
 8017852:	4603      	mov	r3, r0
 8017854:	f083 0301 	eor.w	r3, r3, #1
 8017858:	b2db      	uxtb	r3, r3
 801785a:	2b00      	cmp	r3, #0
 801785c:	d004      	beq.n	8017868 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 801785e:	2101      	movs	r1, #1
 8017860:	68f8      	ldr	r0, [r7, #12]
 8017862:	f7ff fc18 	bl	8017096 <SPIF_CsPin>
        break;
 8017866:	e017      	b.n	8017898 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8017868:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 801786c:	683a      	ldr	r2, [r7, #0]
 801786e:	6879      	ldr	r1, [r7, #4]
 8017870:	68f8      	ldr	r0, [r7, #12]
 8017872:	f7ff fc9b 	bl	80171ac <SPIF_Receive>
 8017876:	4603      	mov	r3, r0
 8017878:	f083 0301 	eor.w	r3, r3, #1
 801787c:	b2db      	uxtb	r3, r3
 801787e:	2b00      	cmp	r3, #0
 8017880:	d004      	beq.n	801788c <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 8017882:	2101      	movs	r1, #1
 8017884:	68f8      	ldr	r0, [r7, #12]
 8017886:	f7ff fc06 	bl	8017096 <SPIF_CsPin>
      break;
 801788a:	e005      	b.n	8017898 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 801788c:	2101      	movs	r1, #1
 801788e:	68f8      	ldr	r0, [r7, #12]
 8017890:	f7ff fc01 	bl	8017096 <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 8017894:	2301      	movs	r3, #1
 8017896:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8017898:	7dfb      	ldrb	r3, [r7, #23]
}
 801789a:	4618      	mov	r0, r3
 801789c:	3718      	adds	r7, #24
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}

080178a2 <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 80178a2:	b580      	push	{r7, lr}
 80178a4:	b086      	sub	sp, #24
 80178a6:	af00      	add	r7, sp, #0
 80178a8:	60f8      	str	r0, [r7, #12]
 80178aa:	60b9      	str	r1, [r7, #8]
 80178ac:	607a      	str	r2, [r7, #4]
 80178ae:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 80178b0:	2300      	movs	r3, #0
 80178b2:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d03a      	beq.n	8017930 <SPIF_Init+0x8e>
 80178ba:	68bb      	ldr	r3, [r7, #8]
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d037      	beq.n	8017930 <SPIF_Init+0x8e>
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d034      	beq.n	8017930 <SPIF_Init+0x8e>
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	7a9b      	ldrb	r3, [r3, #10]
 80178ca:	2b01      	cmp	r3, #1
 80178cc:	d030      	beq.n	8017930 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 80178ce:	2220      	movs	r2, #32
 80178d0:	2100      	movs	r1, #0
 80178d2:	68f8      	ldr	r0, [r7, #12]
 80178d4:	f003 ff7d 	bl	801b7d2 <memset>
    Handle->HSpi = HSpi;
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	68ba      	ldr	r2, [r7, #8]
 80178dc:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	687a      	ldr	r2, [r7, #4]
 80178e2:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 80178e4:	887a      	ldrh	r2, [r7, #2]
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 80178ea:	2101      	movs	r1, #1
 80178ec:	68f8      	ldr	r0, [r7, #12]
 80178ee:	f7ff fbd2 	bl	8017096 <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 80178f2:	e002      	b.n	80178fa <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80178f4:	2001      	movs	r0, #1
 80178f6:	f7ff fba3 	bl	8017040 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80178fa:	f7ef fd4d 	bl	8007398 <HAL_GetTick>
 80178fe:	4603      	mov	r3, r0
 8017900:	2b13      	cmp	r3, #19
 8017902:	d9f7      	bls.n	80178f4 <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 8017904:	68f8      	ldr	r0, [r7, #12]
 8017906:	f7ff fcac 	bl	8017262 <SPIF_WriteDisable>
 801790a:	4603      	mov	r3, r0
 801790c:	f083 0301 	eor.w	r3, r3, #1
 8017910:	b2db      	uxtb	r3, r3
 8017912:	2b00      	cmp	r3, #0
 8017914:	d10b      	bne.n	801792e <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 8017916:	68f8      	ldr	r0, [r7, #12]
 8017918:	f7ff fd12 	bl	8017340 <SPIF_FindChip>
 801791c:	4603      	mov	r3, r0
 801791e:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8017920:	7dfb      	ldrb	r3, [r7, #23]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d004      	beq.n	8017930 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	2201      	movs	r2, #1
 801792a:	729a      	strb	r2, [r3, #10]
 801792c:	e000      	b.n	8017930 <SPIF_Init+0x8e>
      break;
 801792e:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8017930:	7dfb      	ldrb	r3, [r7, #23]
}
 8017932:	4618      	mov	r0, r3
 8017934:	3718      	adds	r7, #24
 8017936:	46bd      	mov	sp, r7
 8017938:	bd80      	pop	{r7, pc}

0801793a <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 801793a:	b580      	push	{r7, lr}
 801793c:	b086      	sub	sp, #24
 801793e:	af00      	add	r7, sp, #0
 8017940:	6078      	str	r0, [r7, #4]
 8017942:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 8017944:	6878      	ldr	r0, [r7, #4]
 8017946:	f7ff fb86 	bl	8017056 <SPIF_Lock>
  bool retVal = false;
 801794a:	2300      	movs	r3, #0
 801794c:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	031b      	lsls	r3, r3, #12
 8017952:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	699b      	ldr	r3, [r3, #24]
 8017958:	683a      	ldr	r2, [r7, #0]
 801795a:	429a      	cmp	r2, r3
 801795c:	d262      	bcs.n	8017a24 <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 801795e:	6878      	ldr	r0, [r7, #4]
 8017960:	f7ff fc5b 	bl	801721a <SPIF_WriteEnable>
 8017964:	4603      	mov	r3, r0
 8017966:	f083 0301 	eor.w	r3, r3, #1
 801796a:	b2db      	uxtb	r3, r3
 801796c:	2b00      	cmp	r3, #0
 801796e:	d15b      	bne.n	8017a28 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8017970:	2100      	movs	r1, #0
 8017972:	6878      	ldr	r0, [r7, #4]
 8017974:	f7ff fb8f 	bl	8017096 <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	69db      	ldr	r3, [r3, #28]
 801797c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017980:	d322      	bcc.n	80179c8 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 8017982:	2321      	movs	r3, #33	@ 0x21
 8017984:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 8017986:	693b      	ldr	r3, [r7, #16]
 8017988:	0e1b      	lsrs	r3, r3, #24
 801798a:	b2db      	uxtb	r3, r3
 801798c:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 801798e:	693b      	ldr	r3, [r7, #16]
 8017990:	0c1b      	lsrs	r3, r3, #16
 8017992:	b2db      	uxtb	r3, r3
 8017994:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 8017996:	693b      	ldr	r3, [r7, #16]
 8017998:	0a1b      	lsrs	r3, r3, #8
 801799a:	b2db      	uxtb	r3, r3
 801799c:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 801799e:	693b      	ldr	r3, [r7, #16]
 80179a0:	b2db      	uxtb	r3, r3
 80179a2:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80179a4:	f107 0108 	add.w	r1, r7, #8
 80179a8:	2364      	movs	r3, #100	@ 0x64
 80179aa:	2205      	movs	r2, #5
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7ff fbc6 	bl	801713e <SPIF_Transmit>
 80179b2:	4603      	mov	r3, r0
 80179b4:	f083 0301 	eor.w	r3, r3, #1
 80179b8:	b2db      	uxtb	r3, r3
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d023      	beq.n	8017a06 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80179be:	2101      	movs	r1, #1
 80179c0:	6878      	ldr	r0, [r7, #4]
 80179c2:	f7ff fb68 	bl	8017096 <SPIF_CsPin>
        break;
 80179c6:	e030      	b.n	8017a2a <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80179c8:	2320      	movs	r3, #32
 80179ca:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	0c1b      	lsrs	r3, r3, #16
 80179d0:	b2db      	uxtb	r3, r3
 80179d2:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 80179d4:	693b      	ldr	r3, [r7, #16]
 80179d6:	0a1b      	lsrs	r3, r3, #8
 80179d8:	b2db      	uxtb	r3, r3
 80179da:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 80179dc:	693b      	ldr	r3, [r7, #16]
 80179de:	b2db      	uxtb	r3, r3
 80179e0:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80179e2:	f107 0108 	add.w	r1, r7, #8
 80179e6:	2364      	movs	r3, #100	@ 0x64
 80179e8:	2204      	movs	r2, #4
 80179ea:	6878      	ldr	r0, [r7, #4]
 80179ec:	f7ff fba7 	bl	801713e <SPIF_Transmit>
 80179f0:	4603      	mov	r3, r0
 80179f2:	f083 0301 	eor.w	r3, r3, #1
 80179f6:	b2db      	uxtb	r3, r3
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d004      	beq.n	8017a06 <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80179fc:	2101      	movs	r1, #1
 80179fe:	6878      	ldr	r0, [r7, #4]
 8017a00:	f7ff fb49 	bl	8017096 <SPIF_CsPin>
        break;
 8017a04:	e011      	b.n	8017a2a <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 8017a06:	2101      	movs	r1, #1
 8017a08:	6878      	ldr	r0, [r7, #4]
 8017a0a:	f7ff fb44 	bl	8017096 <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 8017a0e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8017a12:	6878      	ldr	r0, [r7, #4]
 8017a14:	f7ff fc6e 	bl	80172f4 <SPIF_WaitForWriting>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d005      	beq.n	8017a2a <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8017a1e:	2301      	movs	r3, #1
 8017a20:	75fb      	strb	r3, [r7, #23]
 8017a22:	e002      	b.n	8017a2a <SPIF_EraseSector+0xf0>
      break;
 8017a24:	bf00      	nop
 8017a26:	e000      	b.n	8017a2a <SPIF_EraseSector+0xf0>
      break;
 8017a28:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8017a2a:	6878      	ldr	r0, [r7, #4]
 8017a2c:	f7ff fc19 	bl	8017262 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8017a30:	6878      	ldr	r0, [r7, #4]
 8017a32:	f7ff fb23 	bl	801707c <SPIF_UnLock>
  return retVal;
 8017a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a38:	4618      	mov	r0, r3
 8017a3a:	3718      	adds	r7, #24
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}

08017a40 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b088      	sub	sp, #32
 8017a44:	af02      	add	r7, sp, #8
 8017a46:	60f8      	str	r0, [r7, #12]
 8017a48:	60b9      	str	r1, [r7, #8]
 8017a4a:	607a      	str	r2, [r7, #4]
 8017a4c:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017a4e:	68f8      	ldr	r0, [r7, #12]
 8017a50:	f7ff fb01 	bl	8017056 <SPIF_Lock>
  bool retVal = false;
 8017a54:	2300      	movs	r3, #0
 8017a56:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8017a58:	6a3b      	ldr	r3, [r7, #32]
 8017a5a:	9300      	str	r3, [sp, #0]
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	687a      	ldr	r2, [r7, #4]
 8017a60:	68b9      	ldr	r1, [r7, #8]
 8017a62:	68f8      	ldr	r0, [r7, #12]
 8017a64:	f7ff fe04 	bl	8017670 <SPIF_WriteFn>
 8017a68:	4603      	mov	r3, r0
 8017a6a:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8017a6c:	68f8      	ldr	r0, [r7, #12]
 8017a6e:	f7ff fb05 	bl	801707c <SPIF_UnLock>
  return retVal;
 8017a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a74:	4618      	mov	r0, r3
 8017a76:	3718      	adds	r7, #24
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	bd80      	pop	{r7, pc}

08017a7c <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b088      	sub	sp, #32
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	60f8      	str	r0, [r7, #12]
 8017a84:	60b9      	str	r1, [r7, #8]
 8017a86:	607a      	str	r2, [r7, #4]
 8017a88:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8017a8a:	68f8      	ldr	r0, [r7, #12]
 8017a8c:	f7ff fae3 	bl	8017056 <SPIF_Lock>
  bool retVal = false;
 8017a90:	2300      	movs	r3, #0
 8017a92:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	021b      	lsls	r3, r3, #8
 8017a98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017a9a:	4413      	add	r3, r2
 8017a9c:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8017a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017aa0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8017aa4:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 8017aa6:	683a      	ldr	r2, [r7, #0]
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	429a      	cmp	r2, r3
 8017aac:	d901      	bls.n	8017ab2 <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8017aae:	697b      	ldr	r3, [r7, #20]
 8017ab0:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 8017ab2:	683b      	ldr	r3, [r7, #0]
 8017ab4:	687a      	ldr	r2, [r7, #4]
 8017ab6:	69b9      	ldr	r1, [r7, #24]
 8017ab8:	68f8      	ldr	r0, [r7, #12]
 8017aba:	f7ff fe81 	bl	80177c0 <SPIF_ReadFn>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 8017ac2:	68f8      	ldr	r0, [r7, #12]
 8017ac4:	f7ff fada 	bl	801707c <SPIF_UnLock>
  return retVal;
 8017ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8017aca:	4618      	mov	r0, r3
 8017acc:	3720      	adds	r7, #32
 8017ace:	46bd      	mov	sp, r7
 8017ad0:	bd80      	pop	{r7, pc}
	...

08017ad4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8017ad4:	b480      	push	{r7}
 8017ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8017ad8:	4b03      	ldr	r3, [pc, #12]	@ (8017ae8 <LL_FLASH_GetUDN+0x14>)
 8017ada:	681b      	ldr	r3, [r3, #0]
}
 8017adc:	4618      	mov	r0, r3
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae4:	4770      	bx	lr
 8017ae6:	bf00      	nop
 8017ae8:	1fff7580 	.word	0x1fff7580

08017aec <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8017aec:	b480      	push	{r7}
 8017aee:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8017af0:	4b03      	ldr	r3, [pc, #12]	@ (8017b00 <LL_FLASH_GetDeviceID+0x14>)
 8017af2:	681b      	ldr	r3, [r3, #0]
 8017af4:	b2db      	uxtb	r3, r3
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	46bd      	mov	sp, r7
 8017afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afe:	4770      	bx	lr
 8017b00:	1fff7584 	.word	0x1fff7584

08017b04 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8017b04:	b480      	push	{r7}
 8017b06:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8017b08:	4b03      	ldr	r3, [pc, #12]	@ (8017b18 <LL_FLASH_GetSTCompanyID+0x14>)
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	0a1b      	lsrs	r3, r3, #8
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	46bd      	mov	sp, r7
 8017b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b16:	4770      	bx	lr
 8017b18:	1fff7584 	.word	0x1fff7584

08017b1c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8017b1c:	b5b0      	push	{r4, r5, r7, lr}
 8017b1e:	b090      	sub	sp, #64	@ 0x40
 8017b20:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017b22:	2392      	movs	r3, #146	@ 0x92
 8017b24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask(1<<CFG_TASK_MY_TASK,UTIL_SEQ_RFU,myTask);
 8017b28:	4a29      	ldr	r2, [pc, #164]	@ (8017bd0 <APP_BLE_Init+0xb4>)
 8017b2a:	2100      	movs	r1, #0
 8017b2c:	2004      	movs	r0, #4
 8017b2e:	f001 fdb9 	bl	80196a4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK,CFG_SCH_PRIO_0);
 8017b32:	2100      	movs	r1, #0
 8017b34:	2004      	movs	r0, #4
 8017b36:	f001 fdd7 	bl	80196e8 <UTIL_SEQ_SetTask>
  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8017b3a:	4b26      	ldr	r3, [pc, #152]	@ (8017bd4 <APP_BLE_Init+0xb8>)
 8017b3c:	1d3c      	adds	r4, r7, #4
 8017b3e:	461d      	mov	r5, r3
 8017b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017b4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017b50:	c403      	stmia	r4!, {r0, r1}
 8017b52:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8017b54:	f000 f922 	bl	8017d9c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8017b58:	2101      	movs	r1, #1
 8017b5a:	2002      	movs	r0, #2
 8017b5c:	f001 fc76 	bl	801944c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8017b60:	4a1d      	ldr	r2, [pc, #116]	@ (8017bd8 <APP_BLE_Init+0xbc>)
 8017b62:	2100      	movs	r1, #0
 8017b64:	2002      	movs	r0, #2
 8017b66:	f001 fd9d 	bl	80196a4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8017b6a:	1d3b      	adds	r3, r7, #4
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	f7fe fb73 	bl	8016258 <SHCI_C2_BLE_Init>
 8017b72:	4603      	mov	r3, r0
 8017b74:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8017b78:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d001      	beq.n	8017b84 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8017b80:	f7eb f8bc 	bl	8002cfc <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8017b84:	f000 f920 	bl	8017dc8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8017b88:	f7fe fac0 	bl	801610c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017b8c:	4b13      	ldr	r3, [pc, #76]	@ (8017bdc <APP_BLE_Init+0xc0>)
 8017b8e:	2200      	movs	r2, #0
 8017b90:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8017b94:	4b11      	ldr	r3, [pc, #68]	@ (8017bdc <APP_BLE_Init+0xc0>)
 8017b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017b9a:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8017b9c:	4a10      	ldr	r2, [pc, #64]	@ (8017be0 <APP_BLE_Init+0xc4>)
 8017b9e:	2100      	movs	r1, #0
 8017ba0:	2001      	movs	r0, #1
 8017ba2:	f001 fd7f 	bl	80196a4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8017ba6:	2006      	movs	r0, #6
 8017ba8:	f7fe f924 	bl	8015df4 <aci_hal_set_radio_activity_mask>
 8017bac:	4603      	mov	r3, r0
 8017bae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8017bb2:	f000 faed 	bl	8018190 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8017bb6:	4b09      	ldr	r3, [pc, #36]	@ (8017bdc <APP_BLE_Init+0xc0>)
 8017bb8:	2200      	movs	r2, #0
 8017bba:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8017bbc:	4b07      	ldr	r3, [pc, #28]	@ (8017bdc <APP_BLE_Init+0xc0>)
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8017bc2:	2001      	movs	r0, #1
 8017bc4:	f000 f9b4 	bl	8017f30 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8017bc8:	bf00      	nop
}
 8017bca:	3740      	adds	r7, #64	@ 0x40
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bdb0      	pop	{r4, r5, r7, pc}
 8017bd0:	08018101 	.word	0x08018101
 8017bd4:	0802001c 	.word	0x0802001c
 8017bd8:	08016475 	.word	0x08016475
 8017bdc:	200015a0 	.word	0x200015a0
 8017be0:	08018019 	.word	0x08018019

08017be4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	b08c      	sub	sp, #48	@ 0x30
 8017be8:	af00      	add	r7, sp, #0
 8017bea:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8017bec:	2392      	movs	r3, #146	@ 0x92
 8017bee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8017bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017bfa:	781b      	ldrb	r3, [r3, #0]
 8017bfc:	2bff      	cmp	r3, #255	@ 0xff
 8017bfe:	d05c      	beq.n	8017cba <SVCCTL_App_Notification+0xd6>
 8017c00:	2bff      	cmp	r3, #255	@ 0xff
 8017c02:	f300 80bd 	bgt.w	8017d80 <SVCCTL_App_Notification+0x19c>
 8017c06:	2b3e      	cmp	r3, #62	@ 0x3e
 8017c08:	d02b      	beq.n	8017c62 <SVCCTL_App_Notification+0x7e>
 8017c0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8017c0c:	f300 80b8 	bgt.w	8017d80 <SVCCTL_App_Notification+0x19c>
 8017c10:	2b05      	cmp	r3, #5
 8017c12:	d002      	beq.n	8017c1a <SVCCTL_App_Notification+0x36>
 8017c14:	2b10      	cmp	r3, #16
 8017c16:	d020      	beq.n	8017c5a <SVCCTL_App_Notification+0x76>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8017c18:	e0b2      	b.n	8017d80 <SVCCTL_App_Notification+0x19c>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8017c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c1c:	3302      	adds	r3, #2
 8017c1e:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017c26:	b29a      	uxth	r2, r3
 8017c28:	4b59      	ldr	r3, [pc, #356]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017c2a:	8adb      	ldrh	r3, [r3, #22]
 8017c2c:	429a      	cmp	r2, r3
 8017c2e:	d106      	bne.n	8017c3e <SVCCTL_App_Notification+0x5a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8017c30:	4b57      	ldr	r3, [pc, #348]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017c32:	2200      	movs	r2, #0
 8017c34:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8017c36:	4b56      	ldr	r3, [pc, #344]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017c38:	2200      	movs	r2, #0
 8017c3a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8017c3e:	2001      	movs	r0, #1
 8017c40:	f000 f976 	bl	8017f30 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8017c44:	4b53      	ldr	r3, [pc, #332]	@ (8017d94 <SVCCTL_App_Notification+0x1b0>)
 8017c46:	2201      	movs	r2, #1
 8017c48:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017c4a:	4b51      	ldr	r3, [pc, #324]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017c4c:	8ada      	ldrh	r2, [r3, #22]
 8017c4e:	4b51      	ldr	r3, [pc, #324]	@ (8017d94 <SVCCTL_App_Notification+0x1b0>)
 8017c50:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8017c52:	4850      	ldr	r0, [pc, #320]	@ (8017d94 <SVCCTL_App_Notification+0x1b0>)
 8017c54:	f000 fa88 	bl	8018168 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8017c58:	e095      	b.n	8017d86 <SVCCTL_App_Notification+0x1a2>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8017c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c5c:	3302      	adds	r3, #2
 8017c5e:	613b      	str	r3, [r7, #16]
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8017c60:	e091      	b.n	8017d86 <SVCCTL_App_Notification+0x1a2>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8017c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c64:	3302      	adds	r3, #2
 8017c66:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8017c68:	69bb      	ldr	r3, [r7, #24]
 8017c6a:	781b      	ldrb	r3, [r3, #0]
 8017c6c:	2b01      	cmp	r3, #1
 8017c6e:	d001      	beq.n	8017c74 <SVCCTL_App_Notification+0x90>
 8017c70:	2b03      	cmp	r3, #3
          break;
 8017c72:	e021      	b.n	8017cb8 <SVCCTL_App_Notification+0xd4>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8017c74:	69bb      	ldr	r3, [r7, #24]
 8017c76:	3301      	adds	r3, #1
 8017c78:	617b      	str	r3, [r7, #20]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8017c7a:	4b45      	ldr	r3, [pc, #276]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017c7c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8017c80:	2b04      	cmp	r3, #4
 8017c82:	d104      	bne.n	8017c8e <SVCCTL_App_Notification+0xaa>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8017c84:	4b42      	ldr	r3, [pc, #264]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017c86:	2206      	movs	r2, #6
 8017c88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8017c8c:	e003      	b.n	8017c96 <SVCCTL_App_Notification+0xb2>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8017c8e:	4b40      	ldr	r3, [pc, #256]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017c90:	2205      	movs	r2, #5
 8017c92:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8017c96:	697b      	ldr	r3, [r7, #20]
 8017c98:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8017c9c:	b29a      	uxth	r2, r3
 8017c9e:	4b3c      	ldr	r3, [pc, #240]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017ca0:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8017ca2:	4b3c      	ldr	r3, [pc, #240]	@ (8017d94 <SVCCTL_App_Notification+0x1b0>)
 8017ca4:	2200      	movs	r2, #0
 8017ca6:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8017ca8:	4b39      	ldr	r3, [pc, #228]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017caa:	8ada      	ldrh	r2, [r3, #22]
 8017cac:	4b39      	ldr	r3, [pc, #228]	@ (8017d94 <SVCCTL_App_Notification+0x1b0>)
 8017cae:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8017cb0:	4838      	ldr	r0, [pc, #224]	@ (8017d94 <SVCCTL_App_Notification+0x1b0>)
 8017cb2:	f000 fa59 	bl	8018168 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8017cb6:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8017cb8:	e065      	b.n	8017d86 <SVCCTL_App_Notification+0x1a2>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8017cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cbc:	3302      	adds	r3, #2
 8017cbe:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8017cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cc2:	881b      	ldrh	r3, [r3, #0]
 8017cc4:	b29b      	uxth	r3, r3
 8017cc6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017cca:	4293      	cmp	r3, r2
 8017ccc:	d048      	beq.n	8017d60 <SVCCTL_App_Notification+0x17c>
 8017cce:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8017cd2:	4293      	cmp	r3, r2
 8017cd4:	dc56      	bgt.n	8017d84 <SVCCTL_App_Notification+0x1a0>
 8017cd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017cda:	d04b      	beq.n	8017d74 <SVCCTL_App_Notification+0x190>
 8017cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017ce0:	dc50      	bgt.n	8017d84 <SVCCTL_App_Notification+0x1a0>
 8017ce2:	f240 420a 	movw	r2, #1034	@ 0x40a
 8017ce6:	4293      	cmp	r3, r2
 8017ce8:	dc4c      	bgt.n	8017d84 <SVCCTL_App_Notification+0x1a0>
 8017cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017cee:	dc04      	bgt.n	8017cfa <SVCCTL_App_Notification+0x116>
 8017cf0:	2b04      	cmp	r3, #4
 8017cf2:	d041      	beq.n	8017d78 <SVCCTL_App_Notification+0x194>
 8017cf4:	2b06      	cmp	r3, #6
 8017cf6:	d039      	beq.n	8017d6c <SVCCTL_App_Notification+0x188>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017cf8:	e044      	b.n	8017d84 <SVCCTL_App_Notification+0x1a0>
 8017cfa:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8017cfe:	2b09      	cmp	r3, #9
 8017d00:	d840      	bhi.n	8017d84 <SVCCTL_App_Notification+0x1a0>
 8017d02:	a201      	add	r2, pc, #4	@ (adr r2, 8017d08 <SVCCTL_App_Notification+0x124>)
 8017d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d08:	08017d59 	.word	0x08017d59
 8017d0c:	08017d31 	.word	0x08017d31
 8017d10:	08017d85 	.word	0x08017d85
 8017d14:	08017d85 	.word	0x08017d85
 8017d18:	08017d85 	.word	0x08017d85
 8017d1c:	08017d85 	.word	0x08017d85
 8017d20:	08017d7d 	.word	0x08017d7d
 8017d24:	08017d85 	.word	0x08017d85
 8017d28:	08017d45 	.word	0x08017d45
 8017d2c:	08017d7d 	.word	0x08017d7d
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8017d30:	4b17      	ldr	r3, [pc, #92]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017d32:	8adb      	ldrh	r3, [r3, #22]
 8017d34:	4918      	ldr	r1, [pc, #96]	@ (8017d98 <SVCCTL_App_Notification+0x1b4>)
 8017d36:	4618      	mov	r0, r3
 8017d38:	f7fd fa5e 	bl	80151f8 <aci_gap_pass_key_resp>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017d42:	e01c      	b.n	8017d7e <SVCCTL_App_Notification+0x19a>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8017d44:	4b12      	ldr	r3, [pc, #72]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017d46:	8adb      	ldrh	r3, [r3, #22]
 8017d48:	2101      	movs	r1, #1
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	f7fd fbfe 	bl	801554c <aci_gap_numeric_comparison_value_confirm_yesno>
 8017d50:	4603      	mov	r3, r0
 8017d52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          break;
 8017d56:	e012      	b.n	8017d7e <SVCCTL_App_Notification+0x19a>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8017d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d5a:	3302      	adds	r3, #2
 8017d5c:	623b      	str	r3, [r7, #32]
          break;
 8017d5e:	e00e      	b.n	8017d7e <SVCCTL_App_Notification+0x19a>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8017d60:	4b0b      	ldr	r3, [pc, #44]	@ (8017d90 <SVCCTL_App_Notification+0x1ac>)
 8017d62:	8adb      	ldrh	r3, [r3, #22]
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7fd ff04 	bl	8015b72 <aci_gatt_confirm_indication>
        break;
 8017d6a:	e008      	b.n	8017d7e <SVCCTL_App_Notification+0x19a>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 8017d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017d6e:	3302      	adds	r3, #2
 8017d70:	61fb      	str	r3, [r7, #28]
          break;
 8017d72:	e004      	b.n	8017d7e <SVCCTL_App_Notification+0x19a>
          break;
 8017d74:	bf00      	nop
 8017d76:	e005      	b.n	8017d84 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8017d78:	bf00      	nop
 8017d7a:	e003      	b.n	8017d84 <SVCCTL_App_Notification+0x1a0>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8017d7c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017d7e:	e001      	b.n	8017d84 <SVCCTL_App_Notification+0x1a0>
      break;
 8017d80:	bf00      	nop
 8017d82:	e000      	b.n	8017d86 <SVCCTL_App_Notification+0x1a2>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8017d84:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8017d86:	2301      	movs	r3, #1
}
 8017d88:	4618      	mov	r0, r3
 8017d8a:	3730      	adds	r7, #48	@ 0x30
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bd80      	pop	{r7, pc}
 8017d90:	200015a0 	.word	0x200015a0
 8017d94:	20001624 	.word	0x20001624
 8017d98:	0001b207 	.word	0x0001b207

08017d9c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8017da2:	4b06      	ldr	r3, [pc, #24]	@ (8017dbc <Ble_Tl_Init+0x20>)
 8017da4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8017da6:	4b06      	ldr	r3, [pc, #24]	@ (8017dc0 <Ble_Tl_Init+0x24>)
 8017da8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8017daa:	463b      	mov	r3, r7
 8017dac:	4619      	mov	r1, r3
 8017dae:	4805      	ldr	r0, [pc, #20]	@ (8017dc4 <Ble_Tl_Init+0x28>)
 8017db0:	f7fe fb44 	bl	801643c <hci_init>

  return;
 8017db4:	bf00      	nop
}
 8017db6:	3708      	adds	r7, #8
 8017db8:	46bd      	mov	sp, r7
 8017dba:	bd80      	pop	{r7, pc}
 8017dbc:	200300d8 	.word	0x200300d8
 8017dc0:	080180c9 	.word	0x080180c9
 8017dc4:	08018091 	.word	0x08018091

08017dc8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8017dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017dca:	b08d      	sub	sp, #52	@ 0x34
 8017dcc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8017dce:	2300      	movs	r3, #0
 8017dd0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017dd2:	2392      	movs	r3, #146	@ 0x92
 8017dd4:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8017dd6:	f7fe f861 	bl	8015e9c <hci_reset>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8017dde:	f000 f8d7 	bl	8017f90 <BleGetBdAddress>
 8017de2:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8017de4:	693a      	ldr	r2, [r7, #16]
 8017de6:	2106      	movs	r1, #6
 8017de8:	2000      	movs	r0, #0
 8017dea:	f7fd ff17 	bl	8015c1c <aci_hal_write_config_data>
 8017dee:	4603      	mov	r3, r0
 8017df0:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8017df2:	4a4a      	ldr	r2, [pc, #296]	@ (8017f1c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8017df4:	2110      	movs	r1, #16
 8017df6:	2018      	movs	r0, #24
 8017df8:	f7fd ff10 	bl	8015c1c <aci_hal_write_config_data>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8017e00:	4a47      	ldr	r2, [pc, #284]	@ (8017f20 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8017e02:	2110      	movs	r1, #16
 8017e04:	2008      	movs	r0, #8
 8017e06:	f7fd ff09 	bl	8015c1c <aci_hal_write_config_data>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8017e0e:	2118      	movs	r1, #24
 8017e10:	2001      	movs	r0, #1
 8017e12:	f7fd ff88 	bl	8015d26 <aci_hal_set_tx_power_level>
 8017e16:	4603      	mov	r3, r0
 8017e18:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8017e1a:	f7fd fbfe 	bl	801561a <aci_gatt_init>
 8017e1e:	4603      	mov	r3, r0
 8017e20:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8017e22:	2300      	movs	r3, #0
 8017e24:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8017e26:	7bfb      	ldrb	r3, [r7, #15]
 8017e28:	f043 0301 	orr.w	r3, r3, #1
 8017e2c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8017e2e:	7bfb      	ldrb	r3, [r7, #15]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d01f      	beq.n	8017e74 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8017e34:	4b3b      	ldr	r3, [pc, #236]	@ (8017f24 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8017e36:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8017e38:	1dba      	adds	r2, r7, #6
 8017e3a:	7bf8      	ldrb	r0, [r7, #15]
 8017e3c:	1cbb      	adds	r3, r7, #2
 8017e3e:	9301      	str	r3, [sp, #4]
 8017e40:	1d3b      	adds	r3, r7, #4
 8017e42:	9300      	str	r3, [sp, #0]
 8017e44:	4613      	mov	r3, r2
 8017e46:	2206      	movs	r2, #6
 8017e48:	2100      	movs	r1, #0
 8017e4a:	f7fd fa3c 	bl	80152c6 <aci_gap_init>
 8017e4e:	4603      	mov	r3, r0
 8017e50:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8017e52:	88fc      	ldrh	r4, [r7, #6]
 8017e54:	88bd      	ldrh	r5, [r7, #4]
 8017e56:	68b8      	ldr	r0, [r7, #8]
 8017e58:	f7e8 f9e2 	bl	8000220 <strlen>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	b2da      	uxtb	r2, r3
 8017e60:	68bb      	ldr	r3, [r7, #8]
 8017e62:	9300      	str	r3, [sp, #0]
 8017e64:	4613      	mov	r3, r2
 8017e66:	2200      	movs	r2, #0
 8017e68:	4629      	mov	r1, r5
 8017e6a:	4620      	mov	r0, r4
 8017e6c:	f7fd fdd8 	bl	8015a20 <aci_gatt_update_char_value>
 8017e70:	4603      	mov	r3, r0
 8017e72:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8017e74:	88f8      	ldrh	r0, [r7, #6]
 8017e76:	8879      	ldrh	r1, [r7, #2]
 8017e78:	463b      	mov	r3, r7
 8017e7a:	9300      	str	r3, [sp, #0]
 8017e7c:	2302      	movs	r3, #2
 8017e7e:	2200      	movs	r2, #0
 8017e80:	f7fd fdce 	bl	8015a20 <aci_gatt_update_char_value>
 8017e84:	4603      	mov	r3, r0
 8017e86:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8017e88:	2202      	movs	r2, #2
 8017e8a:	2102      	movs	r1, #2
 8017e8c:	2000      	movs	r0, #0
 8017e8e:	f7fe f829 	bl	8015ee4 <hci_le_set_default_phy>
 8017e92:	4603      	mov	r3, r0
 8017e94:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8017e96:	4b24      	ldr	r3, [pc, #144]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017e98:	2201      	movs	r2, #1
 8017e9a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8017e9c:	4b22      	ldr	r3, [pc, #136]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017e9e:	781b      	ldrb	r3, [r3, #0]
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f7fd f891 	bl	8014fc8 <aci_gap_set_io_capability>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8017eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017eac:	2201      	movs	r2, #1
 8017eae:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8017eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017eb2:	2208      	movs	r2, #8
 8017eb4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8017eb6:	4b1c      	ldr	r3, [pc, #112]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017eb8:	2210      	movs	r2, #16
 8017eba:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8017ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ebe:	2200      	movs	r2, #0
 8017ec0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8017ec2:	4b19      	ldr	r3, [pc, #100]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ec4:	4a19      	ldr	r2, [pc, #100]	@ (8017f2c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8017ec6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8017ec8:	4b17      	ldr	r3, [pc, #92]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017eca:	2200      	movs	r2, #0
 8017ecc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8017ece:	4b16      	ldr	r3, [pc, #88]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ed0:	789c      	ldrb	r4, [r3, #2]
 8017ed2:	4b15      	ldr	r3, [pc, #84]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ed4:	785d      	ldrb	r5, [r3, #1]
 8017ed6:	4b14      	ldr	r3, [pc, #80]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ed8:	791b      	ldrb	r3, [r3, #4]
 8017eda:	4a13      	ldr	r2, [pc, #76]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017edc:	7952      	ldrb	r2, [r2, #5]
 8017ede:	4912      	ldr	r1, [pc, #72]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ee0:	78c9      	ldrb	r1, [r1, #3]
 8017ee2:	4811      	ldr	r0, [pc, #68]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017ee4:	6880      	ldr	r0, [r0, #8]
 8017ee6:	2600      	movs	r6, #0
 8017ee8:	9604      	str	r6, [sp, #16]
 8017eea:	9003      	str	r0, [sp, #12]
 8017eec:	9102      	str	r1, [sp, #8]
 8017eee:	9201      	str	r2, [sp, #4]
 8017ef0:	9300      	str	r3, [sp, #0]
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	2201      	movs	r2, #1
 8017ef6:	4629      	mov	r1, r5
 8017ef8:	4620      	mov	r0, r4
 8017efa:	f7fd f8b9 	bl	8015070 <aci_gap_set_authentication_requirement>
 8017efe:	4603      	mov	r3, r0
 8017f00:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8017f02:	4b09      	ldr	r3, [pc, #36]	@ (8017f28 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8017f04:	789b      	ldrb	r3, [r3, #2]
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d003      	beq.n	8017f12 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8017f0a:	f7fd fafb 	bl	8015504 <aci_gap_configure_filter_accept_list>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8017f12:	bf00      	nop
 8017f14:	371c      	adds	r7, #28
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f1a:	bf00      	nop
 8017f1c:	08021ec8 	.word	0x08021ec8
 8017f20:	08021ed8 	.word	0x08021ed8
 8017f24:	08020058 	.word	0x08020058
 8017f28:	200015a0 	.word	0x200015a0
 8017f2c:	0001b207 	.word	0x0001b207

08017f30 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b08c      	sub	sp, #48	@ 0x30
 8017f34:	af08      	add	r7, sp, #32
 8017f36:	4603      	mov	r3, r0
 8017f38:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8017f3a:	2392      	movs	r3, #146	@ 0x92
 8017f3c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8017f3e:	4a12      	ldr	r2, [pc, #72]	@ (8017f88 <Adv_Request+0x58>)
 8017f40:	79fb      	ldrb	r3, [r7, #7]
 8017f42:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8017f46:	2300      	movs	r3, #0
 8017f48:	9306      	str	r3, [sp, #24]
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	9305      	str	r3, [sp, #20]
 8017f4e:	2300      	movs	r3, #0
 8017f50:	9304      	str	r3, [sp, #16]
 8017f52:	2300      	movs	r3, #0
 8017f54:	9303      	str	r3, [sp, #12]
 8017f56:	2300      	movs	r3, #0
 8017f58:	9302      	str	r3, [sp, #8]
 8017f5a:	2300      	movs	r3, #0
 8017f5c:	9301      	str	r3, [sp, #4]
 8017f5e:	2300      	movs	r3, #0
 8017f60:	9300      	str	r3, [sp, #0]
 8017f62:	2300      	movs	r3, #0
 8017f64:	22a0      	movs	r2, #160	@ 0xa0
 8017f66:	2180      	movs	r1, #128	@ 0x80
 8017f68:	2000      	movs	r0, #0
 8017f6a:	f7fc ff33 	bl	8014dd4 <aci_gap_set_discoverable>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8017f72:	4906      	ldr	r1, [pc, #24]	@ (8017f8c <Adv_Request+0x5c>)
 8017f74:	200e      	movs	r0, #14
 8017f76:	f7fd fa53 	bl	8015420 <aci_gap_update_adv_data>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8017f7e:	bf00      	nop
}
 8017f80:	3710      	adds	r7, #16
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}
 8017f86:	bf00      	nop
 8017f88:	200015a0 	.word	0x200015a0
 8017f8c:	200000c4 	.word	0x200000c4

08017f90 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b086      	sub	sp, #24
 8017f94:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8017f96:	f7ff fd9d 	bl	8017ad4 <LL_FLASH_GetUDN>
 8017f9a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8017f9c:	693b      	ldr	r3, [r7, #16]
 8017f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fa2:	d023      	beq.n	8017fec <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8017fa4:	f7ff fdae 	bl	8017b04 <LL_FLASH_GetSTCompanyID>
 8017fa8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8017faa:	f7ff fd9f 	bl	8017aec <LL_FLASH_GetDeviceID>
 8017fae:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8017fb0:	693b      	ldr	r3, [r7, #16]
 8017fb2:	b2da      	uxtb	r2, r3
 8017fb4:	4b16      	ldr	r3, [pc, #88]	@ (8018010 <BleGetBdAddress+0x80>)
 8017fb6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8017fb8:	693b      	ldr	r3, [r7, #16]
 8017fba:	0a1b      	lsrs	r3, r3, #8
 8017fbc:	b2da      	uxtb	r2, r3
 8017fbe:	4b14      	ldr	r3, [pc, #80]	@ (8018010 <BleGetBdAddress+0x80>)
 8017fc0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	b2da      	uxtb	r2, r3
 8017fc6:	4b12      	ldr	r3, [pc, #72]	@ (8018010 <BleGetBdAddress+0x80>)
 8017fc8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8017fca:	68bb      	ldr	r3, [r7, #8]
 8017fcc:	b2da      	uxtb	r2, r3
 8017fce:	4b10      	ldr	r3, [pc, #64]	@ (8018010 <BleGetBdAddress+0x80>)
 8017fd0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	0a1b      	lsrs	r3, r3, #8
 8017fd6:	b2da      	uxtb	r2, r3
 8017fd8:	4b0d      	ldr	r3, [pc, #52]	@ (8018010 <BleGetBdAddress+0x80>)
 8017fda:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8017fdc:	68bb      	ldr	r3, [r7, #8]
 8017fde:	0c1b      	lsrs	r3, r3, #16
 8017fe0:	b2da      	uxtb	r2, r3
 8017fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8018010 <BleGetBdAddress+0x80>)
 8017fe4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8017fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8018010 <BleGetBdAddress+0x80>)
 8017fe8:	617b      	str	r3, [r7, #20]
 8017fea:	e00b      	b.n	8018004 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8017fec:	2000      	movs	r0, #0
 8017fee:	f7fe ff41 	bl	8016e74 <OTP_Read>
 8017ff2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d002      	beq.n	8018000 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8017ffa:	68fb      	ldr	r3, [r7, #12]
 8017ffc:	617b      	str	r3, [r7, #20]
 8017ffe:	e001      	b.n	8018004 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8018000:	4b04      	ldr	r3, [pc, #16]	@ (8018014 <BleGetBdAddress+0x84>)
 8018002:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8018004:	697b      	ldr	r3, [r7, #20]
}
 8018006:	4618      	mov	r0, r3
 8018008:	3718      	adds	r7, #24
 801800a:	46bd      	mov	sp, r7
 801800c:	bd80      	pop	{r7, pc}
 801800e:	bf00      	nop
 8018010:	20001598 	.word	0x20001598
 8018014:	08021ec0 	.word	0x08021ec0

08018018 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b082      	sub	sp, #8
 801801c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 801801e:	4b0a      	ldr	r3, [pc, #40]	@ (8018048 <Adv_Cancel+0x30>)
 8018020:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8018024:	2b05      	cmp	r3, #5
 8018026:	d00a      	beq.n	801803e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8018028:	2392      	movs	r3, #146	@ 0x92
 801802a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 801802c:	f7fc feae 	bl	8014d8c <aci_gap_set_non_discoverable>
 8018030:	4603      	mov	r3, r0
 8018032:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8018034:	4b04      	ldr	r3, [pc, #16]	@ (8018048 <Adv_Cancel+0x30>)
 8018036:	2200      	movs	r2, #0
 8018038:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 801803c:	bf00      	nop
 801803e:	bf00      	nop
}
 8018040:	3708      	adds	r7, #8
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}
 8018046:	bf00      	nop
 8018048:	200015a0 	.word	0x200015a0

0801804c <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8018054:	2100      	movs	r1, #0
 8018056:	2002      	movs	r0, #2
 8018058:	f001 fb46 	bl	80196e8 <UTIL_SEQ_SetTask>

  return;
 801805c:	bf00      	nop
}
 801805e:	3708      	adds	r7, #8
 8018060:	46bd      	mov	sp, r7
 8018062:	bd80      	pop	{r7, pc}

08018064 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8018064:	b580      	push	{r7, lr}
 8018066:	b082      	sub	sp, #8
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801806c:	2001      	movs	r0, #1
 801806e:	f001 fba7 	bl	80197c0 <UTIL_SEQ_SetEvt>

  return;
 8018072:	bf00      	nop
}
 8018074:	3708      	adds	r7, #8
 8018076:	46bd      	mov	sp, r7
 8018078:	bd80      	pop	{r7, pc}

0801807a <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801807a:	b580      	push	{r7, lr}
 801807c:	b082      	sub	sp, #8
 801807e:	af00      	add	r7, sp, #0
 8018080:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8018082:	2001      	movs	r0, #1
 8018084:	f001 fbbc 	bl	8019800 <UTIL_SEQ_WaitEvt>

  return;
 8018088:	bf00      	nop
}
 801808a:	3708      	adds	r7, #8
 801808c:	46bd      	mov	sp, r7
 801808e:	bd80      	pop	{r7, pc}

08018090 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b084      	sub	sp, #16
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 801809c:	68fb      	ldr	r3, [r7, #12]
 801809e:	685b      	ldr	r3, [r3, #4]
 80180a0:	3308      	adds	r3, #8
 80180a2:	4618      	mov	r0, r3
 80180a4:	f7fe f884 	bl	80161b0 <SVCCTL_UserEvtRx>
 80180a8:	4603      	mov	r3, r0
 80180aa:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80180ac:	7afb      	ldrb	r3, [r7, #11]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d003      	beq.n	80180ba <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	2201      	movs	r2, #1
 80180b6:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80180b8:	e003      	b.n	80180c2 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	2200      	movs	r2, #0
 80180be:	701a      	strb	r2, [r3, #0]
  return;
 80180c0:	bf00      	nop
}
 80180c2:	3710      	adds	r7, #16
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd80      	pop	{r7, pc}

080180c8 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b084      	sub	sp, #16
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	4603      	mov	r3, r0
 80180d0:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80180d2:	79fb      	ldrb	r3, [r7, #7]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d002      	beq.n	80180de <BLE_StatusNot+0x16>
 80180d8:	2b01      	cmp	r3, #1
 80180da:	d006      	beq.n	80180ea <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80180dc:	e00b      	b.n	80180f6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80180de:	2307      	movs	r3, #7
 80180e0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80180e2:	68f8      	ldr	r0, [r7, #12]
 80180e4:	f001 fb2c 	bl	8019740 <UTIL_SEQ_PauseTask>
      break;
 80180e8:	e005      	b.n	80180f6 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80180ea:	2307      	movs	r3, #7
 80180ec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80180ee:	68f8      	ldr	r0, [r7, #12]
 80180f0:	f001 fb46 	bl	8019780 <UTIL_SEQ_ResumeTask>
      break;
 80180f4:	bf00      	nop
  }

  return;
 80180f6:	bf00      	nop
}
 80180f8:	3710      	adds	r7, #16
 80180fa:	46bd      	mov	sp, r7
 80180fc:	bd80      	pop	{r7, pc}
	...

08018100 <myTask>:
static void Custom_Sendnum_Update_Char(void);
static void Custom_Sendnum_Send_Notification(void);

/* USER CODE BEGIN PFP */

void myTask(void){
 8018100:	b580      	push	{r7, lr}
 8018102:	af00      	add	r7, sp, #0

	if(bluetoothsend>=1){
 8018104:	4b08      	ldr	r3, [pc, #32]	@ (8018128 <myTask+0x28>)
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	2b00      	cmp	r3, #0
 801810a:	dd0b      	ble.n	8018124 <myTask+0x24>
		UpdateCharData[0]=123;
 801810c:	4b07      	ldr	r3, [pc, #28]	@ (801812c <myTask+0x2c>)
 801810e:	227b      	movs	r2, #123	@ 0x7b
 8018110:	701a      	strb	r2, [r3, #0]
			 Custom_Sendnum_Update_Char();
 8018112:	f000 f845 	bl	80181a0 <Custom_Sendnum_Update_Char>
		bluetoothsend=0;
 8018116:	4b04      	ldr	r3, [pc, #16]	@ (8018128 <myTask+0x28>)
 8018118:	2200      	movs	r2, #0
 801811a:	601a      	str	r2, [r3, #0]
		UTIL_SEQ_SetTask(1<<CFG_TASK_MY_TASK,CFG_SCH_PRIO_0);
 801811c:	2100      	movs	r1, #0
 801811e:	2004      	movs	r0, #4
 8018120:	f001 fae2 	bl	80196e8 <UTIL_SEQ_SetTask>





}
 8018124:	bf00      	nop
 8018126:	bd80      	pop	{r7, pc}
 8018128:	20000ba4 	.word	0x20000ba4
 801812c:	20001628 	.word	0x20001628

08018130 <Custom_STM_App_Notification>:
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8018130:	b480      	push	{r7}
 8018132:	b083      	sub	sp, #12
 8018134:	af00      	add	r7, sp, #0
 8018136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	781b      	ldrb	r3, [r3, #0]
 801813c:	2b03      	cmp	r3, #3
 801813e:	d80b      	bhi.n	8018158 <Custom_STM_App_Notification+0x28>
 8018140:	a201      	add	r2, pc, #4	@ (adr r2, 8018148 <Custom_STM_App_Notification+0x18>)
 8018142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018146:	bf00      	nop
 8018148:	08018159 	.word	0x08018159
 801814c:	08018159 	.word	0x08018159
 8018150:	08018159 	.word	0x08018159
 8018154:	08018159 	.word	0x08018159

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8018158:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 801815a:	bf00      	nop
}
 801815c:	370c      	adds	r7, #12
 801815e:	46bd      	mov	sp, r7
 8018160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018164:	4770      	bx	lr
 8018166:	bf00      	nop

08018168 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8018168:	b480      	push	{r7}
 801816a:	b083      	sub	sp, #12
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	781b      	ldrb	r3, [r3, #0]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d002      	beq.n	801817e <Custom_APP_Notification+0x16>
 8018178:	2b01      	cmp	r3, #1
 801817a:	d002      	beq.n	8018182 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 801817c:	e002      	b.n	8018184 <Custom_APP_Notification+0x1c>
      break;
 801817e:	bf00      	nop
 8018180:	e000      	b.n	8018184 <Custom_APP_Notification+0x1c>
      break;
 8018182:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8018184:	bf00      	nop
}
 8018186:	370c      	adds	r7, #12
 8018188:	46bd      	mov	sp, r7
 801818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818e:	4770      	bx	lr

08018190 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8018190:	b480      	push	{r7}
 8018192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8018194:	bf00      	nop
}
 8018196:	46bd      	mov	sp, r7
 8018198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819c:	4770      	bx	lr
	...

080181a0 <Custom_Sendnum_Update_Char>:
 *
 *************************************************************/

/* bpservice */
__USED void Custom_Sendnum_Update_Char(void) /* Property Read */
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b082      	sub	sp, #8
 80181a4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80181a6:	2300      	movs	r3, #0
 80181a8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Sendnum_UC_1*/

  /* USER CODE END Sendnum_UC_1*/

  if (updateflag != 0)
 80181aa:	79fb      	ldrb	r3, [r7, #7]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d004      	beq.n	80181ba <Custom_Sendnum_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SENDNUM, (uint8_t *)UpdateCharData);
 80181b0:	4904      	ldr	r1, [pc, #16]	@ (80181c4 <Custom_Sendnum_Update_Char+0x24>)
 80181b2:	2001      	movs	r0, #1
 80181b4:	f000 f966 	bl	8018484 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Sendnum_UC_Last*/

  /* USER CODE END Sendnum_UC_Last*/
  return;
 80181b8:	bf00      	nop
 80181ba:	bf00      	nop
}
 80181bc:	3708      	adds	r7, #8
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd80      	pop	{r7, pc}
 80181c2:	bf00      	nop
 80181c4:	20001628 	.word	0x20001628

080181c8 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80181c8:	b580      	push	{r7, lr}
 80181ca:	b08c      	sub	sp, #48	@ 0x30
 80181cc:	af00      	add	r7, sp, #0
 80181ce:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80181d0:	2300      	movs	r3, #0
 80181d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	3301      	adds	r3, #1
 80181da:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80181dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181de:	781b      	ldrb	r3, [r3, #0]
 80181e0:	2bff      	cmp	r3, #255	@ 0xff
 80181e2:	f040 8093 	bne.w	801830c <Custom_STM_Event_Handler+0x144>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80181e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80181e8:	3302      	adds	r3, #2
 80181ea:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80181ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181ee:	881b      	ldrh	r3, [r3, #0]
 80181f0:	b29b      	uxth	r3, r3
 80181f2:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80181f6:	2b1a      	cmp	r3, #26
 80181f8:	f200 8084 	bhi.w	8018304 <Custom_STM_Event_Handler+0x13c>
 80181fc:	a201      	add	r2, pc, #4	@ (adr r2, 8018204 <Custom_STM_Event_Handler+0x3c>)
 80181fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018202:	bf00      	nop
 8018204:	08018271 	.word	0x08018271
 8018208:	08018305 	.word	0x08018305
 801820c:	08018305 	.word	0x08018305
 8018210:	08018305 	.word	0x08018305
 8018214:	08018305 	.word	0x08018305
 8018218:	08018305 	.word	0x08018305
 801821c:	08018305 	.word	0x08018305
 8018220:	08018305 	.word	0x08018305
 8018224:	08018305 	.word	0x08018305
 8018228:	08018305 	.word	0x08018305
 801822c:	08018305 	.word	0x08018305
 8018230:	08018305 	.word	0x08018305
 8018234:	08018305 	.word	0x08018305
 8018238:	08018305 	.word	0x08018305
 801823c:	08018305 	.word	0x08018305
 8018240:	08018305 	.word	0x08018305
 8018244:	08018305 	.word	0x08018305
 8018248:	08018305 	.word	0x08018305
 801824c:	08018305 	.word	0x08018305
 8018250:	08018305 	.word	0x08018305
 8018254:	08018305 	.word	0x08018305
 8018258:	08018305 	.word	0x08018305
 801825c:	08018305 	.word	0x08018305
 8018260:	08018305 	.word	0x08018305
 8018264:	08018305 	.word	0x08018305
 8018268:	08018305 	.word	0x08018305
 801826c:	080182e7 	.word	0x080182e7
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8018270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018272:	3302      	adds	r3, #2
 8018274:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8018276:	69fb      	ldr	r3, [r7, #28]
 8018278:	885b      	ldrh	r3, [r3, #2]
 801827a:	b29b      	uxth	r3, r3
 801827c:	461a      	mov	r2, r3
 801827e:	4b27      	ldr	r3, [pc, #156]	@ (801831c <Custom_STM_Event_Handler+0x154>)
 8018280:	889b      	ldrh	r3, [r3, #4]
 8018282:	3302      	adds	r3, #2
 8018284:	429a      	cmp	r2, r3
 8018286:	d119      	bne.n	80182bc <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8018288:	2301      	movs	r3, #1
 801828a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 801828e:	69fb      	ldr	r3, [r7, #28]
 8018290:	7a1b      	ldrb	r3, [r3, #8]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d002      	beq.n	801829c <Custom_STM_Event_Handler+0xd4>
 8018296:	2b01      	cmp	r3, #1
 8018298:	d008      	beq.n	80182ac <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 801829a:	e023      	b.n	80182e4 <Custom_STM_Event_Handler+0x11c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SENDNUM_NOTIFY_DISABLED_EVT;
 801829c:	2302      	movs	r3, #2
 801829e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80182a0:	f107 0308 	add.w	r3, r7, #8
 80182a4:	4618      	mov	r0, r3
 80182a6:	f7ff ff43 	bl	8018130 <Custom_STM_App_Notification>
                break;
 80182aa:	e01b      	b.n	80182e4 <Custom_STM_Event_Handler+0x11c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SENDNUM_NOTIFY_ENABLED_EVT;
 80182ac:	2301      	movs	r3, #1
 80182ae:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80182b0:	f107 0308 	add.w	r3, r7, #8
 80182b4:	4618      	mov	r0, r3
 80182b6:	f7ff ff3b 	bl	8018130 <Custom_STM_App_Notification>
                break;
 80182ba:	e013      	b.n	80182e4 <Custom_STM_Event_Handler+0x11c>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSendnumHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80182bc:	69fb      	ldr	r3, [r7, #28]
 80182be:	885b      	ldrh	r3, [r3, #2]
 80182c0:	b29b      	uxth	r3, r3
 80182c2:	461a      	mov	r2, r3
 80182c4:	4b15      	ldr	r3, [pc, #84]	@ (801831c <Custom_STM_Event_Handler+0x154>)
 80182c6:	885b      	ldrh	r3, [r3, #2]
 80182c8:	3301      	adds	r3, #1
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d11c      	bne.n	8018308 <Custom_STM_Event_Handler+0x140>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80182ce:	2301      	movs	r3, #1
 80182d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */

            memcpy((char *) blereceivebuf,(char *) attribute_modified->Attr_Data,64);
 80182d4:	69fb      	ldr	r3, [r7, #28]
 80182d6:	3308      	adds	r3, #8
 80182d8:	2240      	movs	r2, #64	@ 0x40
 80182da:	4619      	mov	r1, r3
 80182dc:	4810      	ldr	r0, [pc, #64]	@ (8018320 <Custom_STM_Event_Handler+0x158>)
 80182de:	f003 fb94 	bl	801ba0a <memcpy>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCharwriteHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80182e2:	e011      	b.n	8018308 <Custom_STM_Event_Handler+0x140>
 80182e4:	e010      	b.n	8018308 <Custom_STM_Event_Handler+0x140>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80182e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80182e8:	3302      	adds	r3, #2
 80182ea:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80182ec:	2303      	movs	r3, #3
 80182ee:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80182f0:	6a3b      	ldr	r3, [r7, #32]
 80182f2:	881b      	ldrh	r3, [r3, #0]
 80182f4:	b29b      	uxth	r3, r3
 80182f6:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 80182f8:	f107 0308 	add.w	r3, r7, #8
 80182fc:	4618      	mov	r0, r3
 80182fe:	f7ff ff17 	bl	8018130 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8018302:	e002      	b.n	801830a <Custom_STM_Event_Handler+0x142>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8018304:	bf00      	nop
 8018306:	e002      	b.n	801830e <Custom_STM_Event_Handler+0x146>
          break;
 8018308:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801830a:	e000      	b.n	801830e <Custom_STM_Event_Handler+0x146>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 801830c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 801830e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8018312:	4618      	mov	r0, r3
 8018314:	3730      	adds	r7, #48	@ 0x30
 8018316:	46bd      	mov	sp, r7
 8018318:	bd80      	pop	{r7, pc}
 801831a:	bf00      	nop
 801831c:	20001828 	.word	0x20001828
 8018320:	20000ba8 	.word	0x20000ba8

08018324 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b08c      	sub	sp, #48	@ 0x30
 8018328:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801832a:	2392      	movs	r3, #146	@ 0x92
 801832c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 801832e:	484f      	ldr	r0, [pc, #316]	@ (801846c <SVCCTL_InitCustomSvc+0x148>)
 8018330:	f7fd ff24 	bl	801617c <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8018334:	2306      	movs	r3, #6
 8018336:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_BPSERVICE_UUID(uuid.Char_UUID_128);
 8018338:	238f      	movs	r3, #143	@ 0x8f
 801833a:	713b      	strb	r3, [r7, #4]
 801833c:	23e5      	movs	r3, #229	@ 0xe5
 801833e:	717b      	strb	r3, [r7, #5]
 8018340:	23b3      	movs	r3, #179	@ 0xb3
 8018342:	71bb      	strb	r3, [r7, #6]
 8018344:	23d5      	movs	r3, #213	@ 0xd5
 8018346:	71fb      	strb	r3, [r7, #7]
 8018348:	232e      	movs	r3, #46	@ 0x2e
 801834a:	723b      	strb	r3, [r7, #8]
 801834c:	237f      	movs	r3, #127	@ 0x7f
 801834e:	727b      	strb	r3, [r7, #9]
 8018350:	234a      	movs	r3, #74	@ 0x4a
 8018352:	72bb      	strb	r3, [r7, #10]
 8018354:	2398      	movs	r3, #152	@ 0x98
 8018356:	72fb      	strb	r3, [r7, #11]
 8018358:	232a      	movs	r3, #42	@ 0x2a
 801835a:	733b      	strb	r3, [r7, #12]
 801835c:	2348      	movs	r3, #72	@ 0x48
 801835e:	737b      	strb	r3, [r7, #13]
 8018360:	237a      	movs	r3, #122	@ 0x7a
 8018362:	73bb      	strb	r3, [r7, #14]
 8018364:	23cc      	movs	r3, #204	@ 0xcc
 8018366:	73fb      	strb	r3, [r7, #15]
 8018368:	2300      	movs	r3, #0
 801836a:	743b      	strb	r3, [r7, #16]
 801836c:	2300      	movs	r3, #0
 801836e:	747b      	strb	r3, [r7, #17]
 8018370:	2300      	movs	r3, #0
 8018372:	74bb      	strb	r3, [r7, #18]
 8018374:	2300      	movs	r3, #0
 8018376:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8018378:	7dbb      	ldrb	r3, [r7, #22]
 801837a:	1d39      	adds	r1, r7, #4
 801837c:	4a3c      	ldr	r2, [pc, #240]	@ (8018470 <SVCCTL_InitCustomSvc+0x14c>)
 801837e:	9200      	str	r2, [sp, #0]
 8018380:	2201      	movs	r2, #1
 8018382:	2002      	movs	r0, #2
 8018384:	f7fd f96e 	bl	8015664 <aci_gatt_add_service>
 8018388:	4603      	mov	r3, r0
 801838a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  charWrite
   */
  COPY_CHARWRITE_UUID(uuid.Char_UUID_128);
 801838c:	2319      	movs	r3, #25
 801838e:	713b      	strb	r3, [r7, #4]
 8018390:	23ed      	movs	r3, #237	@ 0xed
 8018392:	717b      	strb	r3, [r7, #5]
 8018394:	2382      	movs	r3, #130	@ 0x82
 8018396:	71bb      	strb	r3, [r7, #6]
 8018398:	23ae      	movs	r3, #174	@ 0xae
 801839a:	71fb      	strb	r3, [r7, #7]
 801839c:	23ed      	movs	r3, #237	@ 0xed
 801839e:	723b      	strb	r3, [r7, #8]
 80183a0:	2321      	movs	r3, #33	@ 0x21
 80183a2:	727b      	strb	r3, [r7, #9]
 80183a4:	234c      	movs	r3, #76	@ 0x4c
 80183a6:	72bb      	strb	r3, [r7, #10]
 80183a8:	239d      	movs	r3, #157	@ 0x9d
 80183aa:	72fb      	strb	r3, [r7, #11]
 80183ac:	2341      	movs	r3, #65	@ 0x41
 80183ae:	733b      	strb	r3, [r7, #12]
 80183b0:	2345      	movs	r3, #69	@ 0x45
 80183b2:	737b      	strb	r3, [r7, #13]
 80183b4:	2322      	movs	r3, #34	@ 0x22
 80183b6:	73bb      	strb	r3, [r7, #14]
 80183b8:	238e      	movs	r3, #142	@ 0x8e
 80183ba:	73fb      	strb	r3, [r7, #15]
 80183bc:	2300      	movs	r3, #0
 80183be:	743b      	strb	r3, [r7, #16]
 80183c0:	2300      	movs	r3, #0
 80183c2:	747b      	strb	r3, [r7, #17]
 80183c4:	2300      	movs	r3, #0
 80183c6:	74bb      	strb	r3, [r7, #18]
 80183c8:	2300      	movs	r3, #0
 80183ca:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 80183cc:	4b28      	ldr	r3, [pc, #160]	@ (8018470 <SVCCTL_InitCustomSvc+0x14c>)
 80183ce:	8818      	ldrh	r0, [r3, #0]
 80183d0:	4b28      	ldr	r3, [pc, #160]	@ (8018474 <SVCCTL_InitCustomSvc+0x150>)
 80183d2:	881b      	ldrh	r3, [r3, #0]
 80183d4:	1d3a      	adds	r2, r7, #4
 80183d6:	4928      	ldr	r1, [pc, #160]	@ (8018478 <SVCCTL_InitCustomSvc+0x154>)
 80183d8:	9105      	str	r1, [sp, #20]
 80183da:	2100      	movs	r1, #0
 80183dc:	9104      	str	r1, [sp, #16]
 80183de:	2110      	movs	r1, #16
 80183e0:	9103      	str	r1, [sp, #12]
 80183e2:	2101      	movs	r1, #1
 80183e4:	9102      	str	r1, [sp, #8]
 80183e6:	2100      	movs	r1, #0
 80183e8:	9101      	str	r1, [sp, #4]
 80183ea:	2108      	movs	r1, #8
 80183ec:	9100      	str	r1, [sp, #0]
 80183ee:	2102      	movs	r1, #2
 80183f0:	f7fd fa0e 	bl	8015810 <aci_gatt_add_char>
 80183f4:	4603      	mov	r3, r0
 80183f6:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  sendnum
   */
  COPY_SENDNUM_UUID(uuid.Char_UUID_128);
 80183f8:	2319      	movs	r3, #25
 80183fa:	713b      	strb	r3, [r7, #4]
 80183fc:	23ed      	movs	r3, #237	@ 0xed
 80183fe:	717b      	strb	r3, [r7, #5]
 8018400:	2382      	movs	r3, #130	@ 0x82
 8018402:	71bb      	strb	r3, [r7, #6]
 8018404:	23ae      	movs	r3, #174	@ 0xae
 8018406:	71fb      	strb	r3, [r7, #7]
 8018408:	23ed      	movs	r3, #237	@ 0xed
 801840a:	723b      	strb	r3, [r7, #8]
 801840c:	2321      	movs	r3, #33	@ 0x21
 801840e:	727b      	strb	r3, [r7, #9]
 8018410:	234c      	movs	r3, #76	@ 0x4c
 8018412:	72bb      	strb	r3, [r7, #10]
 8018414:	239d      	movs	r3, #157	@ 0x9d
 8018416:	72fb      	strb	r3, [r7, #11]
 8018418:	2341      	movs	r3, #65	@ 0x41
 801841a:	733b      	strb	r3, [r7, #12]
 801841c:	2345      	movs	r3, #69	@ 0x45
 801841e:	737b      	strb	r3, [r7, #13]
 8018420:	2322      	movs	r3, #34	@ 0x22
 8018422:	73bb      	strb	r3, [r7, #14]
 8018424:	238e      	movs	r3, #142	@ 0x8e
 8018426:	73fb      	strb	r3, [r7, #15]
 8018428:	2301      	movs	r3, #1
 801842a:	743b      	strb	r3, [r7, #16]
 801842c:	2300      	movs	r3, #0
 801842e:	747b      	strb	r3, [r7, #17]
 8018430:	2300      	movs	r3, #0
 8018432:	74bb      	strb	r3, [r7, #18]
 8018434:	2300      	movs	r3, #0
 8018436:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomBpserviceHdle,
 8018438:	4b0d      	ldr	r3, [pc, #52]	@ (8018470 <SVCCTL_InitCustomSvc+0x14c>)
 801843a:	8818      	ldrh	r0, [r3, #0]
 801843c:	4b0f      	ldr	r3, [pc, #60]	@ (801847c <SVCCTL_InitCustomSvc+0x158>)
 801843e:	881b      	ldrh	r3, [r3, #0]
 8018440:	1d3a      	adds	r2, r7, #4
 8018442:	490f      	ldr	r1, [pc, #60]	@ (8018480 <SVCCTL_InitCustomSvc+0x15c>)
 8018444:	9105      	str	r1, [sp, #20]
 8018446:	2100      	movs	r1, #0
 8018448:	9104      	str	r1, [sp, #16]
 801844a:	2110      	movs	r1, #16
 801844c:	9103      	str	r1, [sp, #12]
 801844e:	2107      	movs	r1, #7
 8018450:	9102      	str	r1, [sp, #8]
 8018452:	2100      	movs	r1, #0
 8018454:	9101      	str	r1, [sp, #4]
 8018456:	2110      	movs	r1, #16
 8018458:	9100      	str	r1, [sp, #0]
 801845a:	2102      	movs	r1, #2
 801845c:	f7fd f9d8 	bl	8015810 <aci_gatt_add_char>
 8018460:	4603      	mov	r3, r0
 8018462:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8018464:	bf00      	nop
}
 8018466:	3718      	adds	r7, #24
 8018468:	46bd      	mov	sp, r7
 801846a:	bd80      	pop	{r7, pc}
 801846c:	080181c9 	.word	0x080181c9
 8018470:	20001828 	.word	0x20001828
 8018474:	200000d2 	.word	0x200000d2
 8018478:	2000182a 	.word	0x2000182a
 801847c:	200000d4 	.word	0x200000d4
 8018480:	2000182c 	.word	0x2000182c

08018484 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b086      	sub	sp, #24
 8018488:	af02      	add	r7, sp, #8
 801848a:	4603      	mov	r3, r0
 801848c:	6039      	str	r1, [r7, #0]
 801848e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8018490:	2392      	movs	r3, #146	@ 0x92
 8018492:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8018494:	79fb      	ldrb	r3, [r7, #7]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d002      	beq.n	80184a0 <Custom_STM_App_Update_Char+0x1c>
 801849a:	2b01      	cmp	r3, #1
 801849c:	d010      	beq.n	80184c0 <Custom_STM_App_Update_Char+0x3c>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 801849e:	e01f      	b.n	80184e0 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomBpserviceHdle,
 80184a0:	4b12      	ldr	r3, [pc, #72]	@ (80184ec <Custom_STM_App_Update_Char+0x68>)
 80184a2:	8818      	ldrh	r0, [r3, #0]
 80184a4:	4b11      	ldr	r3, [pc, #68]	@ (80184ec <Custom_STM_App_Update_Char+0x68>)
 80184a6:	8859      	ldrh	r1, [r3, #2]
 80184a8:	4b11      	ldr	r3, [pc, #68]	@ (80184f0 <Custom_STM_App_Update_Char+0x6c>)
 80184aa:	881b      	ldrh	r3, [r3, #0]
 80184ac:	b2da      	uxtb	r2, r3
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	9300      	str	r3, [sp, #0]
 80184b2:	4613      	mov	r3, r2
 80184b4:	2200      	movs	r2, #0
 80184b6:	f7fd fab3 	bl	8015a20 <aci_gatt_update_char_value>
 80184ba:	4603      	mov	r3, r0
 80184bc:	73fb      	strb	r3, [r7, #15]
      break;
 80184be:	e00f      	b.n	80184e0 <Custom_STM_App_Update_Char+0x5c>
      ret = aci_gatt_update_char_value(CustomContext.CustomBpserviceHdle,
 80184c0:	4b0a      	ldr	r3, [pc, #40]	@ (80184ec <Custom_STM_App_Update_Char+0x68>)
 80184c2:	8818      	ldrh	r0, [r3, #0]
 80184c4:	4b09      	ldr	r3, [pc, #36]	@ (80184ec <Custom_STM_App_Update_Char+0x68>)
 80184c6:	8899      	ldrh	r1, [r3, #4]
 80184c8:	4b0a      	ldr	r3, [pc, #40]	@ (80184f4 <Custom_STM_App_Update_Char+0x70>)
 80184ca:	881b      	ldrh	r3, [r3, #0]
 80184cc:	b2da      	uxtb	r2, r3
 80184ce:	683b      	ldr	r3, [r7, #0]
 80184d0:	9300      	str	r3, [sp, #0]
 80184d2:	4613      	mov	r3, r2
 80184d4:	2200      	movs	r2, #0
 80184d6:	f7fd faa3 	bl	8015a20 <aci_gatt_update_char_value>
 80184da:	4603      	mov	r3, r0
 80184dc:	73fb      	strb	r3, [r7, #15]
      break;
 80184de:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80184e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80184e2:	4618      	mov	r0, r3
 80184e4:	3710      	adds	r7, #16
 80184e6:	46bd      	mov	sp, r7
 80184e8:	bd80      	pop	{r7, pc}
 80184ea:	bf00      	nop
 80184ec:	20001828 	.word	0x20001828
 80184f0:	200000d2 	.word	0x200000d2
 80184f4:	200000d4 	.word	0x200000d4

080184f8 <LL_PWR_EnableBootC2>:
{
 80184f8:	b480      	push	{r7}
 80184fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80184fc:	4b05      	ldr	r3, [pc, #20]	@ (8018514 <LL_PWR_EnableBootC2+0x1c>)
 80184fe:	68db      	ldr	r3, [r3, #12]
 8018500:	4a04      	ldr	r2, [pc, #16]	@ (8018514 <LL_PWR_EnableBootC2+0x1c>)
 8018502:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8018506:	60d3      	str	r3, [r2, #12]
}
 8018508:	bf00      	nop
 801850a:	46bd      	mov	sp, r7
 801850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018510:	4770      	bx	lr
 8018512:	bf00      	nop
 8018514:	58000400 	.word	0x58000400

08018518 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8018518:	b480      	push	{r7}
 801851a:	b083      	sub	sp, #12
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8018520:	4b06      	ldr	r3, [pc, #24]	@ (801853c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018522:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8018526:	4905      	ldr	r1, [pc, #20]	@ (801853c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	4313      	orrs	r3, r2
 801852c:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8018530:	bf00      	nop
 8018532:	370c      	adds	r7, #12
 8018534:	46bd      	mov	sp, r7
 8018536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853a:	4770      	bx	lr
 801853c:	58000800 	.word	0x58000800

08018540 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8018540:	b480      	push	{r7}
 8018542:	b083      	sub	sp, #12
 8018544:	af00      	add	r7, sp, #0
 8018546:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8018548:	4b05      	ldr	r3, [pc, #20]	@ (8018560 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801854a:	6a1a      	ldr	r2, [r3, #32]
 801854c:	4904      	ldr	r1, [pc, #16]	@ (8018560 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	4313      	orrs	r3, r2
 8018552:	620b      	str	r3, [r1, #32]
}
 8018554:	bf00      	nop
 8018556:	370c      	adds	r7, #12
 8018558:	46bd      	mov	sp, r7
 801855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801855e:	4770      	bx	lr
 8018560:	58000800 	.word	0x58000800

08018564 <LL_AHB3_GRP1_EnableClock>:
{
 8018564:	b480      	push	{r7}
 8018566:	b085      	sub	sp, #20
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 801856c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018570:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	4313      	orrs	r3, r2
 801857a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 801857c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018580:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	4013      	ands	r3, r2
 8018586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018588:	68fb      	ldr	r3, [r7, #12]
}
 801858a:	bf00      	nop
 801858c:	3714      	adds	r7, #20
 801858e:	46bd      	mov	sp, r7
 8018590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018594:	4770      	bx	lr

08018596 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8018596:	b480      	push	{r7}
 8018598:	b085      	sub	sp, #20
 801859a:	af00      	add	r7, sp, #0
 801859c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801859e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80185a2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80185a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	4313      	orrs	r3, r2
 80185ae:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80185b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80185b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	4013      	ands	r3, r2
 80185be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80185c0:	68fb      	ldr	r3, [r7, #12]
}
 80185c2:	bf00      	nop
 80185c4:	3714      	adds	r7, #20
 80185c6:	46bd      	mov	sp, r7
 80185c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185cc:	4770      	bx	lr

080185ce <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80185ce:	b480      	push	{r7}
 80185d0:	b083      	sub	sp, #12
 80185d2:	af00      	add	r7, sp, #0
 80185d4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	601a      	str	r2, [r3, #0]
}
 80185e2:	bf00      	nop
 80185e4:	370c      	adds	r7, #12
 80185e6:	46bd      	mov	sp, r7
 80185e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185ec:	4770      	bx	lr

080185ee <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80185ee:	b480      	push	{r7}
 80185f0:	b083      	sub	sp, #12
 80185f2:	af00      	add	r7, sp, #0
 80185f4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	f043 0201 	orr.w	r2, r3, #1
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	601a      	str	r2, [r3, #0]
}
 8018602:	bf00      	nop
 8018604:	370c      	adds	r7, #12
 8018606:	46bd      	mov	sp, r7
 8018608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860c:	4770      	bx	lr

0801860e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801860e:	b480      	push	{r7}
 8018610:	b083      	sub	sp, #12
 8018612:	af00      	add	r7, sp, #0
 8018614:	6078      	str	r0, [r7, #4]
 8018616:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	685a      	ldr	r2, [r3, #4]
 801861c:	683b      	ldr	r3, [r7, #0]
 801861e:	041b      	lsls	r3, r3, #16
 8018620:	43db      	mvns	r3, r3
 8018622:	401a      	ands	r2, r3
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	605a      	str	r2, [r3, #4]
}
 8018628:	bf00      	nop
 801862a:	370c      	adds	r7, #12
 801862c:	46bd      	mov	sp, r7
 801862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018632:	4770      	bx	lr

08018634 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018634:	b480      	push	{r7}
 8018636:	b083      	sub	sp, #12
 8018638:	af00      	add	r7, sp, #0
 801863a:	6078      	str	r0, [r7, #4]
 801863c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	685a      	ldr	r2, [r3, #4]
 8018642:	683b      	ldr	r3, [r7, #0]
 8018644:	041b      	lsls	r3, r3, #16
 8018646:	431a      	orrs	r2, r3
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	605a      	str	r2, [r3, #4]
}
 801864c:	bf00      	nop
 801864e:	370c      	adds	r7, #12
 8018650:	46bd      	mov	sp, r7
 8018652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018656:	4770      	bx	lr

08018658 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018658:	b480      	push	{r7}
 801865a:	b083      	sub	sp, #12
 801865c:	af00      	add	r7, sp, #0
 801865e:	6078      	str	r0, [r7, #4]
 8018660:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	685a      	ldr	r2, [r3, #4]
 8018666:	683b      	ldr	r3, [r7, #0]
 8018668:	43db      	mvns	r3, r3
 801866a:	401a      	ands	r2, r3
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	605a      	str	r2, [r3, #4]
}
 8018670:	bf00      	nop
 8018672:	370c      	adds	r7, #12
 8018674:	46bd      	mov	sp, r7
 8018676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867a:	4770      	bx	lr

0801867c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801867c:	b480      	push	{r7}
 801867e:	b083      	sub	sp, #12
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
 8018684:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	683a      	ldr	r2, [r7, #0]
 801868a:	609a      	str	r2, [r3, #8]
}
 801868c:	bf00      	nop
 801868e:	370c      	adds	r7, #12
 8018690:	46bd      	mov	sp, r7
 8018692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018696:	4770      	bx	lr

08018698 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8018698:	b480      	push	{r7}
 801869a:	b083      	sub	sp, #12
 801869c:	af00      	add	r7, sp, #0
 801869e:	6078      	str	r0, [r7, #4]
 80186a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	041a      	lsls	r2, r3, #16
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	609a      	str	r2, [r3, #8]
}
 80186aa:	bf00      	nop
 80186ac:	370c      	adds	r7, #12
 80186ae:	46bd      	mov	sp, r7
 80186b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b4:	4770      	bx	lr

080186b6 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80186b6:	b480      	push	{r7}
 80186b8:	b083      	sub	sp, #12
 80186ba:	af00      	add	r7, sp, #0
 80186bc:	6078      	str	r0, [r7, #4]
 80186be:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	68da      	ldr	r2, [r3, #12]
 80186c4:	683b      	ldr	r3, [r7, #0]
 80186c6:	4013      	ands	r3, r2
 80186c8:	683a      	ldr	r2, [r7, #0]
 80186ca:	429a      	cmp	r2, r3
 80186cc:	d101      	bne.n	80186d2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80186ce:	2301      	movs	r3, #1
 80186d0:	e000      	b.n	80186d4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80186d2:	2300      	movs	r3, #0
}
 80186d4:	4618      	mov	r0, r3
 80186d6:	370c      	adds	r7, #12
 80186d8:	46bd      	mov	sp, r7
 80186da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186de:	4770      	bx	lr

080186e0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80186e0:	b480      	push	{r7}
 80186e2:	b083      	sub	sp, #12
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
 80186e8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	69da      	ldr	r2, [r3, #28]
 80186ee:	683b      	ldr	r3, [r7, #0]
 80186f0:	4013      	ands	r3, r2
 80186f2:	683a      	ldr	r2, [r7, #0]
 80186f4:	429a      	cmp	r2, r3
 80186f6:	d101      	bne.n	80186fc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80186f8:	2301      	movs	r3, #1
 80186fa:	e000      	b.n	80186fe <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80186fc:	2300      	movs	r3, #0
}
 80186fe:	4618      	mov	r0, r3
 8018700:	370c      	adds	r7, #12
 8018702:	46bd      	mov	sp, r7
 8018704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018708:	4770      	bx	lr
	...

0801870c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801870c:	b580      	push	{r7, lr}
 801870e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8018710:	2102      	movs	r1, #2
 8018712:	4818      	ldr	r0, [pc, #96]	@ (8018774 <HW_IPCC_Rx_Handler+0x68>)
 8018714:	f7ff ffe4 	bl	80186e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018718:	4603      	mov	r3, r0
 801871a:	2b00      	cmp	r3, #0
 801871c:	d008      	beq.n	8018730 <HW_IPCC_Rx_Handler+0x24>
 801871e:	4b15      	ldr	r3, [pc, #84]	@ (8018774 <HW_IPCC_Rx_Handler+0x68>)
 8018720:	685b      	ldr	r3, [r3, #4]
 8018722:	f003 0302 	and.w	r3, r3, #2
 8018726:	2b00      	cmp	r3, #0
 8018728:	d102      	bne.n	8018730 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801872a:	f000 f8d5 	bl	80188d8 <HW_IPCC_SYS_EvtHandler>
 801872e:	e01e      	b.n	801876e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8018730:	2101      	movs	r1, #1
 8018732:	4810      	ldr	r0, [pc, #64]	@ (8018774 <HW_IPCC_Rx_Handler+0x68>)
 8018734:	f7ff ffd4 	bl	80186e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018738:	4603      	mov	r3, r0
 801873a:	2b00      	cmp	r3, #0
 801873c:	d008      	beq.n	8018750 <HW_IPCC_Rx_Handler+0x44>
 801873e:	4b0d      	ldr	r3, [pc, #52]	@ (8018774 <HW_IPCC_Rx_Handler+0x68>)
 8018740:	685b      	ldr	r3, [r3, #4]
 8018742:	f003 0301 	and.w	r3, r3, #1
 8018746:	2b00      	cmp	r3, #0
 8018748:	d102      	bne.n	8018750 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801874a:	f000 f889 	bl	8018860 <HW_IPCC_BLE_EvtHandler>
 801874e:	e00e      	b.n	801876e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8018750:	2108      	movs	r1, #8
 8018752:	4808      	ldr	r0, [pc, #32]	@ (8018774 <HW_IPCC_Rx_Handler+0x68>)
 8018754:	f7ff ffc4 	bl	80186e0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8018758:	4603      	mov	r3, r0
 801875a:	2b00      	cmp	r3, #0
 801875c:	d008      	beq.n	8018770 <HW_IPCC_Rx_Handler+0x64>
 801875e:	4b05      	ldr	r3, [pc, #20]	@ (8018774 <HW_IPCC_Rx_Handler+0x68>)
 8018760:	685b      	ldr	r3, [r3, #4]
 8018762:	f003 0308 	and.w	r3, r3, #8
 8018766:	2b00      	cmp	r3, #0
 8018768:	d102      	bne.n	8018770 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801876a:	f000 f901 	bl	8018970 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801876e:	bf00      	nop
 8018770:	bf00      	nop
}
 8018772:	bd80      	pop	{r7, pc}
 8018774:	58000c00 	.word	0x58000c00

08018778 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8018778:	b580      	push	{r7, lr}
 801877a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801877c:	2102      	movs	r1, #2
 801877e:	4818      	ldr	r0, [pc, #96]	@ (80187e0 <HW_IPCC_Tx_Handler+0x68>)
 8018780:	f7ff ff99 	bl	80186b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018784:	4603      	mov	r3, r0
 8018786:	2b00      	cmp	r3, #0
 8018788:	d108      	bne.n	801879c <HW_IPCC_Tx_Handler+0x24>
 801878a:	4b15      	ldr	r3, [pc, #84]	@ (80187e0 <HW_IPCC_Tx_Handler+0x68>)
 801878c:	685b      	ldr	r3, [r3, #4]
 801878e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8018792:	2b00      	cmp	r3, #0
 8018794:	d102      	bne.n	801879c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8018796:	f000 f893 	bl	80188c0 <HW_IPCC_SYS_CmdEvtHandler>
 801879a:	e01e      	b.n	80187da <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801879c:	2108      	movs	r1, #8
 801879e:	4810      	ldr	r0, [pc, #64]	@ (80187e0 <HW_IPCC_Tx_Handler+0x68>)
 80187a0:	f7ff ff89 	bl	80186b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80187a4:	4603      	mov	r3, r0
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d108      	bne.n	80187bc <HW_IPCC_Tx_Handler+0x44>
 80187aa:	4b0d      	ldr	r3, [pc, #52]	@ (80187e0 <HW_IPCC_Tx_Handler+0x68>)
 80187ac:	685b      	ldr	r3, [r3, #4]
 80187ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d102      	bne.n	80187bc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80187b6:	f000 f8bd 	bl	8018934 <HW_IPCC_MM_FreeBufHandler>
 80187ba:	e00e      	b.n	80187da <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80187bc:	2120      	movs	r1, #32
 80187be:	4808      	ldr	r0, [pc, #32]	@ (80187e0 <HW_IPCC_Tx_Handler+0x68>)
 80187c0:	f7ff ff79 	bl	80186b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 80187c4:	4603      	mov	r3, r0
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d108      	bne.n	80187dc <HW_IPCC_Tx_Handler+0x64>
 80187ca:	4b05      	ldr	r3, [pc, #20]	@ (80187e0 <HW_IPCC_Tx_Handler+0x68>)
 80187cc:	685b      	ldr	r3, [r3, #4]
 80187ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d102      	bne.n	80187dc <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80187d6:	f000 f84f 	bl	8018878 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80187da:	bf00      	nop
 80187dc:	bf00      	nop
}
 80187de:	bd80      	pop	{r7, pc}
 80187e0:	58000c00 	.word	0x58000c00

080187e4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80187e8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80187ec:	f7ff fed3 	bl	8018596 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80187f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80187f4:	f7ff fea4 	bl	8018540 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80187f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80187fc:	f7ff fe8c 	bl	8018518 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8018800:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8018802:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8018804:	f7ff fe78 	bl	80184f8 <LL_PWR_EnableBootC2>

  return;
 8018808:	bf00      	nop
}
 801880a:	bd80      	pop	{r7, pc}

0801880c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801880c:	b580      	push	{r7, lr}
 801880e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8018810:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8018814:	f7ff fea6 	bl	8018564 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8018818:	4806      	ldr	r0, [pc, #24]	@ (8018834 <HW_IPCC_Init+0x28>)
 801881a:	f7ff fee8 	bl	80185ee <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801881e:	4805      	ldr	r0, [pc, #20]	@ (8018834 <HW_IPCC_Init+0x28>)
 8018820:	f7ff fed5 	bl	80185ce <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8018824:	202c      	movs	r0, #44	@ 0x2c
 8018826:	f7ef ffb0 	bl	800878a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801882a:	202d      	movs	r0, #45	@ 0x2d
 801882c:	f7ef ffad 	bl	800878a <HAL_NVIC_EnableIRQ>

  return;
 8018830:	bf00      	nop
}
 8018832:	bd80      	pop	{r7, pc}
 8018834:	58000c00 	.word	0x58000c00

08018838 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801883c:	2101      	movs	r1, #1
 801883e:	4802      	ldr	r0, [pc, #8]	@ (8018848 <HW_IPCC_BLE_Init+0x10>)
 8018840:	f7ff ff0a 	bl	8018658 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018844:	bf00      	nop
}
 8018846:	bd80      	pop	{r7, pc}
 8018848:	58000c00 	.word	0x58000c00

0801884c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801884c:	b580      	push	{r7, lr}
 801884e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8018850:	2101      	movs	r1, #1
 8018852:	4802      	ldr	r0, [pc, #8]	@ (801885c <HW_IPCC_BLE_SendCmd+0x10>)
 8018854:	f7ff ff20 	bl	8018698 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8018858:	bf00      	nop
}
 801885a:	bd80      	pop	{r7, pc}
 801885c:	58000c00 	.word	0x58000c00

08018860 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8018860:	b580      	push	{r7, lr}
 8018862:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8018864:	f7fe f94e 	bl	8016b04 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8018868:	2101      	movs	r1, #1
 801886a:	4802      	ldr	r0, [pc, #8]	@ (8018874 <HW_IPCC_BLE_EvtHandler+0x14>)
 801886c:	f7ff ff06 	bl	801867c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018870:	bf00      	nop
}
 8018872:	bd80      	pop	{r7, pc}
 8018874:	58000c00 	.word	0x58000c00

08018878 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8018878:	b580      	push	{r7, lr}
 801887a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801887c:	2120      	movs	r1, #32
 801887e:	4803      	ldr	r0, [pc, #12]	@ (801888c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8018880:	f7ff fed8 	bl	8018634 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8018884:	f7fe f96e 	bl	8016b64 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8018888:	bf00      	nop
}
 801888a:	bd80      	pop	{r7, pc}
 801888c:	58000c00 	.word	0x58000c00

08018890 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8018890:	b580      	push	{r7, lr}
 8018892:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8018894:	2102      	movs	r1, #2
 8018896:	4802      	ldr	r0, [pc, #8]	@ (80188a0 <HW_IPCC_SYS_Init+0x10>)
 8018898:	f7ff fede 	bl	8018658 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801889c:	bf00      	nop
}
 801889e:	bd80      	pop	{r7, pc}
 80188a0:	58000c00 	.word	0x58000c00

080188a4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80188a4:	b580      	push	{r7, lr}
 80188a6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80188a8:	2102      	movs	r1, #2
 80188aa:	4804      	ldr	r0, [pc, #16]	@ (80188bc <HW_IPCC_SYS_SendCmd+0x18>)
 80188ac:	f7ff fef4 	bl	8018698 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80188b0:	2102      	movs	r1, #2
 80188b2:	4802      	ldr	r0, [pc, #8]	@ (80188bc <HW_IPCC_SYS_SendCmd+0x18>)
 80188b4:	f7ff feab 	bl	801860e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80188b8:	bf00      	nop
}
 80188ba:	bd80      	pop	{r7, pc}
 80188bc:	58000c00 	.word	0x58000c00

080188c0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80188c4:	2102      	movs	r1, #2
 80188c6:	4803      	ldr	r0, [pc, #12]	@ (80188d4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80188c8:	f7ff feb4 	bl	8018634 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80188cc:	f7fe f99a 	bl	8016c04 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80188d0:	bf00      	nop
}
 80188d2:	bd80      	pop	{r7, pc}
 80188d4:	58000c00 	.word	0x58000c00

080188d8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80188dc:	f7fe f9a8 	bl	8016c30 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80188e0:	2102      	movs	r1, #2
 80188e2:	4802      	ldr	r0, [pc, #8]	@ (80188ec <HW_IPCC_SYS_EvtHandler+0x14>)
 80188e4:	f7ff feca 	bl	801867c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80188e8:	bf00      	nop
}
 80188ea:	bd80      	pop	{r7, pc}
 80188ec:	58000c00 	.word	0x58000c00

080188f0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b082      	sub	sp, #8
 80188f4:	af00      	add	r7, sp, #0
 80188f6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80188f8:	2108      	movs	r1, #8
 80188fa:	480c      	ldr	r0, [pc, #48]	@ (801892c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80188fc:	f7ff fedb 	bl	80186b6 <LL_C1_IPCC_IsActiveFlag_CHx>
 8018900:	4603      	mov	r3, r0
 8018902:	2b00      	cmp	r3, #0
 8018904:	d007      	beq.n	8018916 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8018906:	4a0a      	ldr	r2, [pc, #40]	@ (8018930 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801890c:	2108      	movs	r1, #8
 801890e:	4807      	ldr	r0, [pc, #28]	@ (801892c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8018910:	f7ff fe7d 	bl	801860e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8018914:	e006      	b.n	8018924 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801891a:	2108      	movs	r1, #8
 801891c:	4803      	ldr	r0, [pc, #12]	@ (801892c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801891e:	f7ff febb 	bl	8018698 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8018922:	bf00      	nop
}
 8018924:	3708      	adds	r7, #8
 8018926:	46bd      	mov	sp, r7
 8018928:	bd80      	pop	{r7, pc}
 801892a:	bf00      	nop
 801892c:	58000c00 	.word	0x58000c00
 8018930:	20001830 	.word	0x20001830

08018934 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8018934:	b580      	push	{r7, lr}
 8018936:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018938:	2108      	movs	r1, #8
 801893a:	4806      	ldr	r0, [pc, #24]	@ (8018954 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801893c:	f7ff fe7a 	bl	8018634 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8018940:	4b05      	ldr	r3, [pc, #20]	@ (8018958 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8018946:	2108      	movs	r1, #8
 8018948:	4802      	ldr	r0, [pc, #8]	@ (8018954 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801894a:	f7ff fea5 	bl	8018698 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801894e:	bf00      	nop
}
 8018950:	bd80      	pop	{r7, pc}
 8018952:	bf00      	nop
 8018954:	58000c00 	.word	0x58000c00
 8018958:	20001830 	.word	0x20001830

0801895c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 801895c:	b580      	push	{r7, lr}
 801895e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8018960:	2108      	movs	r1, #8
 8018962:	4802      	ldr	r0, [pc, #8]	@ (801896c <HW_IPCC_TRACES_Init+0x10>)
 8018964:	f7ff fe78 	bl	8018658 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8018968:	bf00      	nop
}
 801896a:	bd80      	pop	{r7, pc}
 801896c:	58000c00 	.word	0x58000c00

08018970 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8018970:	b580      	push	{r7, lr}
 8018972:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8018974:	f7fe fa04 	bl	8016d80 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8018978:	2108      	movs	r1, #8
 801897a:	4802      	ldr	r0, [pc, #8]	@ (8018984 <HW_IPCC_TRACES_EvtHandler+0x14>)
 801897c:	f7ff fe7e 	bl	801867c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8018980:	bf00      	nop
}
 8018982:	bd80      	pop	{r7, pc}
 8018984:	58000c00 	.word	0x58000c00

08018988 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801898c:	2200      	movs	r2, #0
 801898e:	4912      	ldr	r1, [pc, #72]	@ (80189d8 <MX_USB_Device_Init+0x50>)
 8018990:	4812      	ldr	r0, [pc, #72]	@ (80189dc <MX_USB_Device_Init+0x54>)
 8018992:	f7fa ff61 	bl	8013858 <USBD_Init>
 8018996:	4603      	mov	r3, r0
 8018998:	2b00      	cmp	r3, #0
 801899a:	d001      	beq.n	80189a0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801899c:	f7ea f9ae 	bl	8002cfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80189a0:	490f      	ldr	r1, [pc, #60]	@ (80189e0 <MX_USB_Device_Init+0x58>)
 80189a2:	480e      	ldr	r0, [pc, #56]	@ (80189dc <MX_USB_Device_Init+0x54>)
 80189a4:	f7fa ff88 	bl	80138b8 <USBD_RegisterClass>
 80189a8:	4603      	mov	r3, r0
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d001      	beq.n	80189b2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80189ae:	f7ea f9a5 	bl	8002cfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80189b2:	490c      	ldr	r1, [pc, #48]	@ (80189e4 <MX_USB_Device_Init+0x5c>)
 80189b4:	4809      	ldr	r0, [pc, #36]	@ (80189dc <MX_USB_Device_Init+0x54>)
 80189b6:	f7fa fe7f 	bl	80136b8 <USBD_CDC_RegisterInterface>
 80189ba:	4603      	mov	r3, r0
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d001      	beq.n	80189c4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80189c0:	f7ea f99c 	bl	8002cfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80189c4:	4805      	ldr	r0, [pc, #20]	@ (80189dc <MX_USB_Device_Init+0x54>)
 80189c6:	f7fa ffad 	bl	8013924 <USBD_Start>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d001      	beq.n	80189d4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80189d0:	f7ea f994 	bl	8002cfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80189d4:	bf00      	nop
 80189d6:	bd80      	pop	{r7, pc}
 80189d8:	200000ec 	.word	0x200000ec
 80189dc:	20001834 	.word	0x20001834
 80189e0:	20000044 	.word	0x20000044
 80189e4:	200000d8 	.word	0x200000d8

080189e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80189e8:	b580      	push	{r7, lr}
 80189ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80189ec:	2200      	movs	r2, #0
 80189ee:	4905      	ldr	r1, [pc, #20]	@ (8018a04 <CDC_Init_FS+0x1c>)
 80189f0:	4805      	ldr	r0, [pc, #20]	@ (8018a08 <CDC_Init_FS+0x20>)
 80189f2:	f7fa fe7b 	bl	80136ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80189f6:	4905      	ldr	r1, [pc, #20]	@ (8018a0c <CDC_Init_FS+0x24>)
 80189f8:	4803      	ldr	r0, [pc, #12]	@ (8018a08 <CDC_Init_FS+0x20>)
 80189fa:	f7fa fe99 	bl	8013730 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80189fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018a00:	4618      	mov	r0, r3
 8018a02:	bd80      	pop	{r7, pc}
 8018a04:	20002310 	.word	0x20002310
 8018a08:	20001834 	.word	0x20001834
 8018a0c:	20001b10 	.word	0x20001b10

08018a10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8018a10:	b480      	push	{r7}
 8018a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018a14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018a16:	4618      	mov	r0, r3
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1e:	4770      	bx	lr

08018a20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018a20:	b480      	push	{r7}
 8018a22:	b083      	sub	sp, #12
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	4603      	mov	r3, r0
 8018a28:	6039      	str	r1, [r7, #0]
 8018a2a:	71fb      	strb	r3, [r7, #7]
 8018a2c:	4613      	mov	r3, r2
 8018a2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8018a30:	79fb      	ldrb	r3, [r7, #7]
 8018a32:	2b23      	cmp	r3, #35	@ 0x23
 8018a34:	d84a      	bhi.n	8018acc <CDC_Control_FS+0xac>
 8018a36:	a201      	add	r2, pc, #4	@ (adr r2, 8018a3c <CDC_Control_FS+0x1c>)
 8018a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a3c:	08018acd 	.word	0x08018acd
 8018a40:	08018acd 	.word	0x08018acd
 8018a44:	08018acd 	.word	0x08018acd
 8018a48:	08018acd 	.word	0x08018acd
 8018a4c:	08018acd 	.word	0x08018acd
 8018a50:	08018acd 	.word	0x08018acd
 8018a54:	08018acd 	.word	0x08018acd
 8018a58:	08018acd 	.word	0x08018acd
 8018a5c:	08018acd 	.word	0x08018acd
 8018a60:	08018acd 	.word	0x08018acd
 8018a64:	08018acd 	.word	0x08018acd
 8018a68:	08018acd 	.word	0x08018acd
 8018a6c:	08018acd 	.word	0x08018acd
 8018a70:	08018acd 	.word	0x08018acd
 8018a74:	08018acd 	.word	0x08018acd
 8018a78:	08018acd 	.word	0x08018acd
 8018a7c:	08018acd 	.word	0x08018acd
 8018a80:	08018acd 	.word	0x08018acd
 8018a84:	08018acd 	.word	0x08018acd
 8018a88:	08018acd 	.word	0x08018acd
 8018a8c:	08018acd 	.word	0x08018acd
 8018a90:	08018acd 	.word	0x08018acd
 8018a94:	08018acd 	.word	0x08018acd
 8018a98:	08018acd 	.word	0x08018acd
 8018a9c:	08018acd 	.word	0x08018acd
 8018aa0:	08018acd 	.word	0x08018acd
 8018aa4:	08018acd 	.word	0x08018acd
 8018aa8:	08018acd 	.word	0x08018acd
 8018aac:	08018acd 	.word	0x08018acd
 8018ab0:	08018acd 	.word	0x08018acd
 8018ab4:	08018acd 	.word	0x08018acd
 8018ab8:	08018acd 	.word	0x08018acd
 8018abc:	08018acd 	.word	0x08018acd
 8018ac0:	08018acd 	.word	0x08018acd
 8018ac4:	08018acd 	.word	0x08018acd
 8018ac8:	08018acd 	.word	0x08018acd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018acc:	bf00      	nop
  }

  return (USBD_OK);
 8018ace:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	370c      	adds	r7, #12
 8018ad4:	46bd      	mov	sp, r7
 8018ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ada:	4770      	bx	lr

08018adc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018adc:	b580      	push	{r7, lr}
 8018ade:	b084      	sub	sp, #16
 8018ae0:	af00      	add	r7, sp, #0
 8018ae2:	6078      	str	r0, [r7, #4]
 8018ae4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018ae6:	6879      	ldr	r1, [r7, #4]
 8018ae8:	480f      	ldr	r0, [pc, #60]	@ (8018b28 <CDC_Receive_FS+0x4c>)
 8018aea:	f7fa fe21 	bl	8013730 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8018aee:	480e      	ldr	r0, [pc, #56]	@ (8018b28 <CDC_Receive_FS+0x4c>)
 8018af0:	f7fa fe7c 	bl	80137ec <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8018af4:	2240      	movs	r2, #64	@ 0x40
 8018af6:	2100      	movs	r1, #0
 8018af8:	480c      	ldr	r0, [pc, #48]	@ (8018b2c <CDC_Receive_FS+0x50>)
 8018afa:	f002 fe6a 	bl	801b7d2 <memset>
  uint8_t len = (uint8_t)*Len;
 8018afe:	683b      	ldr	r3, [r7, #0]
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8018b04:	7bfb      	ldrb	r3, [r7, #15]
 8018b06:	461a      	mov	r2, r3
 8018b08:	6879      	ldr	r1, [r7, #4]
 8018b0a:	4808      	ldr	r0, [pc, #32]	@ (8018b2c <CDC_Receive_FS+0x50>)
 8018b0c:	f002 ff7d 	bl	801ba0a <memcpy>
  memset(Buf, '\0', len);
 8018b10:	7bfb      	ldrb	r3, [r7, #15]
 8018b12:	461a      	mov	r2, r3
 8018b14:	2100      	movs	r1, #0
 8018b16:	6878      	ldr	r0, [r7, #4]
 8018b18:	f002 fe5b 	bl	801b7d2 <memset>
  return (USBD_OK);
 8018b1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018b1e:	4618      	mov	r0, r3
 8018b20:	3710      	adds	r7, #16
 8018b22:	46bd      	mov	sp, r7
 8018b24:	bd80      	pop	{r7, pc}
 8018b26:	bf00      	nop
 8018b28:	20001834 	.word	0x20001834
 8018b2c:	20000af4 	.word	0x20000af4

08018b30 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b084      	sub	sp, #16
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	460b      	mov	r3, r1
 8018b3a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018b40:	4b0d      	ldr	r3, [pc, #52]	@ (8018b78 <CDC_Transmit_FS+0x48>)
 8018b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8018b46:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018b48:	68bb      	ldr	r3, [r7, #8]
 8018b4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d001      	beq.n	8018b56 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8018b52:	2301      	movs	r3, #1
 8018b54:	e00b      	b.n	8018b6e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018b56:	887b      	ldrh	r3, [r7, #2]
 8018b58:	461a      	mov	r2, r3
 8018b5a:	6879      	ldr	r1, [r7, #4]
 8018b5c:	4806      	ldr	r0, [pc, #24]	@ (8018b78 <CDC_Transmit_FS+0x48>)
 8018b5e:	f7fa fdc5 	bl	80136ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018b62:	4805      	ldr	r0, [pc, #20]	@ (8018b78 <CDC_Transmit_FS+0x48>)
 8018b64:	f7fa fe02 	bl	801376c <USBD_CDC_TransmitPacket>
 8018b68:	4603      	mov	r3, r0
 8018b6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8018b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b6e:	4618      	mov	r0, r3
 8018b70:	3710      	adds	r7, #16
 8018b72:	46bd      	mov	sp, r7
 8018b74:	bd80      	pop	{r7, pc}
 8018b76:	bf00      	nop
 8018b78:	20001834 	.word	0x20001834

08018b7c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018b7c:	b480      	push	{r7}
 8018b7e:	b087      	sub	sp, #28
 8018b80:	af00      	add	r7, sp, #0
 8018b82:	60f8      	str	r0, [r7, #12]
 8018b84:	60b9      	str	r1, [r7, #8]
 8018b86:	4613      	mov	r3, r2
 8018b88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8018b8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018b92:	4618      	mov	r0, r3
 8018b94:	371c      	adds	r7, #28
 8018b96:	46bd      	mov	sp, r7
 8018b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b9c:	4770      	bx	lr
	...

08018ba0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ba0:	b480      	push	{r7}
 8018ba2:	b083      	sub	sp, #12
 8018ba4:	af00      	add	r7, sp, #0
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	6039      	str	r1, [r7, #0]
 8018baa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8018bac:	683b      	ldr	r3, [r7, #0]
 8018bae:	2212      	movs	r2, #18
 8018bb0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8018bb2:	4b03      	ldr	r3, [pc, #12]	@ (8018bc0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	370c      	adds	r7, #12
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bbe:	4770      	bx	lr
 8018bc0:	2000010c 	.word	0x2000010c

08018bc4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018bc4:	b480      	push	{r7}
 8018bc6:	b083      	sub	sp, #12
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	4603      	mov	r3, r0
 8018bcc:	6039      	str	r1, [r7, #0]
 8018bce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018bd0:	683b      	ldr	r3, [r7, #0]
 8018bd2:	2204      	movs	r2, #4
 8018bd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018bd6:	4b03      	ldr	r3, [pc, #12]	@ (8018be4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8018bd8:	4618      	mov	r0, r3
 8018bda:	370c      	adds	r7, #12
 8018bdc:	46bd      	mov	sp, r7
 8018bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018be2:	4770      	bx	lr
 8018be4:	20000120 	.word	0x20000120

08018be8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b082      	sub	sp, #8
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	4603      	mov	r3, r0
 8018bf0:	6039      	str	r1, [r7, #0]
 8018bf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018bf4:	79fb      	ldrb	r3, [r7, #7]
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d105      	bne.n	8018c06 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018bfa:	683a      	ldr	r2, [r7, #0]
 8018bfc:	4907      	ldr	r1, [pc, #28]	@ (8018c1c <USBD_CDC_ProductStrDescriptor+0x34>)
 8018bfe:	4808      	ldr	r0, [pc, #32]	@ (8018c20 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018c00:	f7fb ffd8 	bl	8014bb4 <USBD_GetString>
 8018c04:	e004      	b.n	8018c10 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8018c06:	683a      	ldr	r2, [r7, #0]
 8018c08:	4904      	ldr	r1, [pc, #16]	@ (8018c1c <USBD_CDC_ProductStrDescriptor+0x34>)
 8018c0a:	4805      	ldr	r0, [pc, #20]	@ (8018c20 <USBD_CDC_ProductStrDescriptor+0x38>)
 8018c0c:	f7fb ffd2 	bl	8014bb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c10:	4b02      	ldr	r3, [pc, #8]	@ (8018c1c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8018c12:	4618      	mov	r0, r3
 8018c14:	3708      	adds	r7, #8
 8018c16:	46bd      	mov	sp, r7
 8018c18:	bd80      	pop	{r7, pc}
 8018c1a:	bf00      	nop
 8018c1c:	20002b10 	.word	0x20002b10
 8018c20:	08020060 	.word	0x08020060

08018c24 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b082      	sub	sp, #8
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	6039      	str	r1, [r7, #0]
 8018c2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018c30:	683a      	ldr	r2, [r7, #0]
 8018c32:	4904      	ldr	r1, [pc, #16]	@ (8018c44 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8018c34:	4804      	ldr	r0, [pc, #16]	@ (8018c48 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8018c36:	f7fb ffbd 	bl	8014bb4 <USBD_GetString>
  return USBD_StrDesc;
 8018c3a:	4b02      	ldr	r3, [pc, #8]	@ (8018c44 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	3708      	adds	r7, #8
 8018c40:	46bd      	mov	sp, r7
 8018c42:	bd80      	pop	{r7, pc}
 8018c44:	20002b10 	.word	0x20002b10
 8018c48:	08020078 	.word	0x08020078

08018c4c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c4c:	b580      	push	{r7, lr}
 8018c4e:	b082      	sub	sp, #8
 8018c50:	af00      	add	r7, sp, #0
 8018c52:	4603      	mov	r3, r0
 8018c54:	6039      	str	r1, [r7, #0]
 8018c56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018c58:	683b      	ldr	r3, [r7, #0]
 8018c5a:	221a      	movs	r2, #26
 8018c5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018c5e:	f000 f843 	bl	8018ce8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8018c62:	4b02      	ldr	r3, [pc, #8]	@ (8018c6c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8018c64:	4618      	mov	r0, r3
 8018c66:	3708      	adds	r7, #8
 8018c68:	46bd      	mov	sp, r7
 8018c6a:	bd80      	pop	{r7, pc}
 8018c6c:	20000124 	.word	0x20000124

08018c70 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018c70:	b580      	push	{r7, lr}
 8018c72:	b082      	sub	sp, #8
 8018c74:	af00      	add	r7, sp, #0
 8018c76:	4603      	mov	r3, r0
 8018c78:	6039      	str	r1, [r7, #0]
 8018c7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018c7c:	79fb      	ldrb	r3, [r7, #7]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d105      	bne.n	8018c8e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018c82:	683a      	ldr	r2, [r7, #0]
 8018c84:	4907      	ldr	r1, [pc, #28]	@ (8018ca4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018c86:	4808      	ldr	r0, [pc, #32]	@ (8018ca8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018c88:	f7fb ff94 	bl	8014bb4 <USBD_GetString>
 8018c8c:	e004      	b.n	8018c98 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8018c8e:	683a      	ldr	r2, [r7, #0]
 8018c90:	4904      	ldr	r1, [pc, #16]	@ (8018ca4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8018c92:	4805      	ldr	r0, [pc, #20]	@ (8018ca8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8018c94:	f7fb ff8e 	bl	8014bb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018c98:	4b02      	ldr	r3, [pc, #8]	@ (8018ca4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	3708      	adds	r7, #8
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	bd80      	pop	{r7, pc}
 8018ca2:	bf00      	nop
 8018ca4:	20002b10 	.word	0x20002b10
 8018ca8:	0802008c 	.word	0x0802008c

08018cac <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018cac:	b580      	push	{r7, lr}
 8018cae:	b082      	sub	sp, #8
 8018cb0:	af00      	add	r7, sp, #0
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	6039      	str	r1, [r7, #0]
 8018cb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018cb8:	79fb      	ldrb	r3, [r7, #7]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d105      	bne.n	8018cca <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018cbe:	683a      	ldr	r2, [r7, #0]
 8018cc0:	4907      	ldr	r1, [pc, #28]	@ (8018ce0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018cc2:	4808      	ldr	r0, [pc, #32]	@ (8018ce4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018cc4:	f7fb ff76 	bl	8014bb4 <USBD_GetString>
 8018cc8:	e004      	b.n	8018cd4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8018cca:	683a      	ldr	r2, [r7, #0]
 8018ccc:	4904      	ldr	r1, [pc, #16]	@ (8018ce0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8018cce:	4805      	ldr	r0, [pc, #20]	@ (8018ce4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8018cd0:	f7fb ff70 	bl	8014bb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018cd4:	4b02      	ldr	r3, [pc, #8]	@ (8018ce0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	3708      	adds	r7, #8
 8018cda:	46bd      	mov	sp, r7
 8018cdc:	bd80      	pop	{r7, pc}
 8018cde:	bf00      	nop
 8018ce0:	20002b10 	.word	0x20002b10
 8018ce4:	08020098 	.word	0x08020098

08018ce8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018ce8:	b580      	push	{r7, lr}
 8018cea:	b084      	sub	sp, #16
 8018cec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018cee:	4b0f      	ldr	r3, [pc, #60]	@ (8018d2c <Get_SerialNum+0x44>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8018d30 <Get_SerialNum+0x48>)
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8018d34 <Get_SerialNum+0x4c>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018d00:	68fa      	ldr	r2, [r7, #12]
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	4413      	add	r3, r2
 8018d06:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d009      	beq.n	8018d22 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018d0e:	2208      	movs	r2, #8
 8018d10:	4909      	ldr	r1, [pc, #36]	@ (8018d38 <Get_SerialNum+0x50>)
 8018d12:	68f8      	ldr	r0, [r7, #12]
 8018d14:	f000 f814 	bl	8018d40 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018d18:	2204      	movs	r2, #4
 8018d1a:	4908      	ldr	r1, [pc, #32]	@ (8018d3c <Get_SerialNum+0x54>)
 8018d1c:	68b8      	ldr	r0, [r7, #8]
 8018d1e:	f000 f80f 	bl	8018d40 <IntToUnicode>
  }
}
 8018d22:	bf00      	nop
 8018d24:	3710      	adds	r7, #16
 8018d26:	46bd      	mov	sp, r7
 8018d28:	bd80      	pop	{r7, pc}
 8018d2a:	bf00      	nop
 8018d2c:	1fff7590 	.word	0x1fff7590
 8018d30:	1fff7594 	.word	0x1fff7594
 8018d34:	1fff7598 	.word	0x1fff7598
 8018d38:	20000126 	.word	0x20000126
 8018d3c:	20000136 	.word	0x20000136

08018d40 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018d40:	b480      	push	{r7}
 8018d42:	b087      	sub	sp, #28
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	60f8      	str	r0, [r7, #12]
 8018d48:	60b9      	str	r1, [r7, #8]
 8018d4a:	4613      	mov	r3, r2
 8018d4c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018d52:	2300      	movs	r3, #0
 8018d54:	75fb      	strb	r3, [r7, #23]
 8018d56:	e027      	b.n	8018da8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	0f1b      	lsrs	r3, r3, #28
 8018d5c:	2b09      	cmp	r3, #9
 8018d5e:	d80b      	bhi.n	8018d78 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	0f1b      	lsrs	r3, r3, #28
 8018d64:	b2da      	uxtb	r2, r3
 8018d66:	7dfb      	ldrb	r3, [r7, #23]
 8018d68:	005b      	lsls	r3, r3, #1
 8018d6a:	4619      	mov	r1, r3
 8018d6c:	68bb      	ldr	r3, [r7, #8]
 8018d6e:	440b      	add	r3, r1
 8018d70:	3230      	adds	r2, #48	@ 0x30
 8018d72:	b2d2      	uxtb	r2, r2
 8018d74:	701a      	strb	r2, [r3, #0]
 8018d76:	e00a      	b.n	8018d8e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	0f1b      	lsrs	r3, r3, #28
 8018d7c:	b2da      	uxtb	r2, r3
 8018d7e:	7dfb      	ldrb	r3, [r7, #23]
 8018d80:	005b      	lsls	r3, r3, #1
 8018d82:	4619      	mov	r1, r3
 8018d84:	68bb      	ldr	r3, [r7, #8]
 8018d86:	440b      	add	r3, r1
 8018d88:	3237      	adds	r2, #55	@ 0x37
 8018d8a:	b2d2      	uxtb	r2, r2
 8018d8c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	011b      	lsls	r3, r3, #4
 8018d92:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018d94:	7dfb      	ldrb	r3, [r7, #23]
 8018d96:	005b      	lsls	r3, r3, #1
 8018d98:	3301      	adds	r3, #1
 8018d9a:	68ba      	ldr	r2, [r7, #8]
 8018d9c:	4413      	add	r3, r2
 8018d9e:	2200      	movs	r2, #0
 8018da0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018da2:	7dfb      	ldrb	r3, [r7, #23]
 8018da4:	3301      	adds	r3, #1
 8018da6:	75fb      	strb	r3, [r7, #23]
 8018da8:	7dfa      	ldrb	r2, [r7, #23]
 8018daa:	79fb      	ldrb	r3, [r7, #7]
 8018dac:	429a      	cmp	r2, r3
 8018dae:	d3d3      	bcc.n	8018d58 <IntToUnicode+0x18>
  }
}
 8018db0:	bf00      	nop
 8018db2:	bf00      	nop
 8018db4:	371c      	adds	r7, #28
 8018db6:	46bd      	mov	sp, r7
 8018db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dbc:	4770      	bx	lr

08018dbe <LL_AHB2_GRP1_EnableClock>:
{
 8018dbe:	b480      	push	{r7}
 8018dc0:	b085      	sub	sp, #20
 8018dc2:	af00      	add	r7, sp, #0
 8018dc4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8018dc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018dca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018dcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	4313      	orrs	r3, r2
 8018dd4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8018dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018dda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	4013      	ands	r3, r2
 8018de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018de2:	68fb      	ldr	r3, [r7, #12]
}
 8018de4:	bf00      	nop
 8018de6:	3714      	adds	r7, #20
 8018de8:	46bd      	mov	sp, r7
 8018dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dee:	4770      	bx	lr

08018df0 <LL_APB1_GRP1_EnableClock>:
{
 8018df0:	b480      	push	{r7}
 8018df2:	b085      	sub	sp, #20
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8018df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018dfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	4313      	orrs	r3, r2
 8018e06:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8018e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8018e0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	4013      	ands	r3, r2
 8018e12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8018e14:	68fb      	ldr	r3, [r7, #12]
}
 8018e16:	bf00      	nop
 8018e18:	3714      	adds	r7, #20
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e20:	4770      	bx	lr
	...

08018e24 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b088      	sub	sp, #32
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018e2c:	f107 030c 	add.w	r3, r7, #12
 8018e30:	2200      	movs	r2, #0
 8018e32:	601a      	str	r2, [r3, #0]
 8018e34:	605a      	str	r2, [r3, #4]
 8018e36:	609a      	str	r2, [r3, #8]
 8018e38:	60da      	str	r2, [r3, #12]
 8018e3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	4a13      	ldr	r2, [pc, #76]	@ (8018e90 <HAL_PCD_MspInit+0x6c>)
 8018e42:	4293      	cmp	r3, r2
 8018e44:	d120      	bne.n	8018e88 <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018e46:	2001      	movs	r0, #1
 8018e48:	f7ff ffb9 	bl	8018dbe <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018e4c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8018e50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018e52:	2302      	movs	r3, #2
 8018e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018e56:	2300      	movs	r3, #0
 8018e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8018e5e:	230a      	movs	r3, #10
 8018e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018e62:	f107 030c 	add.w	r3, r7, #12
 8018e66:	4619      	mov	r1, r3
 8018e68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8018e6c:	f7f0 f8a6 	bl	8008fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8018e70:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8018e74:	f7ff ffbc 	bl	8018df0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8018e78:	2200      	movs	r2, #0
 8018e7a:	2100      	movs	r1, #0
 8018e7c:	2014      	movs	r0, #20
 8018e7e:	f7ef fc6a 	bl	8008756 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8018e82:	2014      	movs	r0, #20
 8018e84:	f7ef fc81 	bl	800878a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8018e88:	bf00      	nop
 8018e8a:	3720      	adds	r7, #32
 8018e8c:	46bd      	mov	sp, r7
 8018e8e:	bd80      	pop	{r7, pc}
 8018e90:	40006800 	.word	0x40006800

08018e94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e94:	b580      	push	{r7, lr}
 8018e96:	b082      	sub	sp, #8
 8018e98:	af00      	add	r7, sp, #0
 8018e9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8018ea8:	4619      	mov	r1, r3
 8018eaa:	4610      	mov	r0, r2
 8018eac:	f7fa fd87 	bl	80139be <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8018eb0:	bf00      	nop
 8018eb2:	3708      	adds	r7, #8
 8018eb4:	46bd      	mov	sp, r7
 8018eb6:	bd80      	pop	{r7, pc}

08018eb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b082      	sub	sp, #8
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
 8018ec0:	460b      	mov	r3, r1
 8018ec2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018eca:	78fa      	ldrb	r2, [r7, #3]
 8018ecc:	6879      	ldr	r1, [r7, #4]
 8018ece:	4613      	mov	r3, r2
 8018ed0:	009b      	lsls	r3, r3, #2
 8018ed2:	4413      	add	r3, r2
 8018ed4:	00db      	lsls	r3, r3, #3
 8018ed6:	440b      	add	r3, r1
 8018ed8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8018edc:	681a      	ldr	r2, [r3, #0]
 8018ede:	78fb      	ldrb	r3, [r7, #3]
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	f7fa fdc1 	bl	8013a68 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8018ee6:	bf00      	nop
 8018ee8:	3708      	adds	r7, #8
 8018eea:	46bd      	mov	sp, r7
 8018eec:	bd80      	pop	{r7, pc}

08018eee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018eee:	b580      	push	{r7, lr}
 8018ef0:	b082      	sub	sp, #8
 8018ef2:	af00      	add	r7, sp, #0
 8018ef4:	6078      	str	r0, [r7, #4]
 8018ef6:	460b      	mov	r3, r1
 8018ef8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8018f00:	78fa      	ldrb	r2, [r7, #3]
 8018f02:	6879      	ldr	r1, [r7, #4]
 8018f04:	4613      	mov	r3, r2
 8018f06:	009b      	lsls	r3, r3, #2
 8018f08:	4413      	add	r3, r2
 8018f0a:	00db      	lsls	r3, r3, #3
 8018f0c:	440b      	add	r3, r1
 8018f0e:	3324      	adds	r3, #36	@ 0x24
 8018f10:	681a      	ldr	r2, [r3, #0]
 8018f12:	78fb      	ldrb	r3, [r7, #3]
 8018f14:	4619      	mov	r1, r3
 8018f16:	f7fa fe5a 	bl	8013bce <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8018f1a:	bf00      	nop
 8018f1c:	3708      	adds	r7, #8
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}

08018f22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f22:	b580      	push	{r7, lr}
 8018f24:	b082      	sub	sp, #8
 8018f26:	af00      	add	r7, sp, #0
 8018f28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018f30:	4618      	mov	r0, r3
 8018f32:	f7fa ff94 	bl	8013e5e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8018f36:	bf00      	nop
 8018f38:	3708      	adds	r7, #8
 8018f3a:	46bd      	mov	sp, r7
 8018f3c:	bd80      	pop	{r7, pc}

08018f3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f3e:	b580      	push	{r7, lr}
 8018f40:	b084      	sub	sp, #16
 8018f42:	af00      	add	r7, sp, #0
 8018f44:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018f46:	2301      	movs	r3, #1
 8018f48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	795b      	ldrb	r3, [r3, #5]
 8018f4e:	2b02      	cmp	r3, #2
 8018f50:	d001      	beq.n	8018f56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8018f52:	f7e9 fed3 	bl	8002cfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018f5c:	7bfa      	ldrb	r2, [r7, #15]
 8018f5e:	4611      	mov	r1, r2
 8018f60:	4618      	mov	r0, r3
 8018f62:	f7fa ff38 	bl	8013dd6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018f6c:	4618      	mov	r0, r3
 8018f6e:	f7fa fee0 	bl	8013d32 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8018f72:	bf00      	nop
 8018f74:	3710      	adds	r7, #16
 8018f76:	46bd      	mov	sp, r7
 8018f78:	bd80      	pop	{r7, pc}
	...

08018f7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b082      	sub	sp, #8
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	f7fa ff33 	bl	8013df6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	7a5b      	ldrb	r3, [r3, #9]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d005      	beq.n	8018fa4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018f98:	4b04      	ldr	r3, [pc, #16]	@ (8018fac <HAL_PCD_SuspendCallback+0x30>)
 8018f9a:	691b      	ldr	r3, [r3, #16]
 8018f9c:	4a03      	ldr	r2, [pc, #12]	@ (8018fac <HAL_PCD_SuspendCallback+0x30>)
 8018f9e:	f043 0306 	orr.w	r3, r3, #6
 8018fa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8018fa4:	bf00      	nop
 8018fa6:	3708      	adds	r7, #8
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	bd80      	pop	{r7, pc}
 8018fac:	e000ed00 	.word	0xe000ed00

08018fb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b082      	sub	sp, #8
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	7a5b      	ldrb	r3, [r3, #9]
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d007      	beq.n	8018fd0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018fc0:	4b08      	ldr	r3, [pc, #32]	@ (8018fe4 <HAL_PCD_ResumeCallback+0x34>)
 8018fc2:	691b      	ldr	r3, [r3, #16]
 8018fc4:	4a07      	ldr	r2, [pc, #28]	@ (8018fe4 <HAL_PCD_ResumeCallback+0x34>)
 8018fc6:	f023 0306 	bic.w	r3, r3, #6
 8018fca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8018fcc:	f000 f9fa 	bl	80193c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	f7fa ff29 	bl	8013e2e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8018fdc:	bf00      	nop
 8018fde:	3708      	adds	r7, #8
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}
 8018fe4:	e000ed00 	.word	0xe000ed00

08018fe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8018ff0:	4a2c      	ldr	r2, [pc, #176]	@ (80190a4 <USBD_LL_Init+0xbc>)
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8018ff8:	687b      	ldr	r3, [r7, #4]
 8018ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80190a4 <USBD_LL_Init+0xbc>)
 8018ffc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8019000:	f7f2 fd4c 	bl	800ba9c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8019004:	4b27      	ldr	r3, [pc, #156]	@ (80190a4 <USBD_LL_Init+0xbc>)
 8019006:	4a28      	ldr	r2, [pc, #160]	@ (80190a8 <USBD_LL_Init+0xc0>)
 8019008:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801900a:	4b26      	ldr	r3, [pc, #152]	@ (80190a4 <USBD_LL_Init+0xbc>)
 801900c:	2208      	movs	r2, #8
 801900e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019010:	4b24      	ldr	r3, [pc, #144]	@ (80190a4 <USBD_LL_Init+0xbc>)
 8019012:	2202      	movs	r2, #2
 8019014:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019016:	4b23      	ldr	r3, [pc, #140]	@ (80190a4 <USBD_LL_Init+0xbc>)
 8019018:	2202      	movs	r2, #2
 801901a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801901c:	4b21      	ldr	r3, [pc, #132]	@ (80190a4 <USBD_LL_Init+0xbc>)
 801901e:	2200      	movs	r2, #0
 8019020:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019022:	4b20      	ldr	r3, [pc, #128]	@ (80190a4 <USBD_LL_Init+0xbc>)
 8019024:	2200      	movs	r2, #0
 8019026:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8019028:	4b1e      	ldr	r3, [pc, #120]	@ (80190a4 <USBD_LL_Init+0xbc>)
 801902a:	2200      	movs	r2, #0
 801902c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801902e:	4b1d      	ldr	r3, [pc, #116]	@ (80190a4 <USBD_LL_Init+0xbc>)
 8019030:	2200      	movs	r2, #0
 8019032:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019034:	481b      	ldr	r0, [pc, #108]	@ (80190a4 <USBD_LL_Init+0xbc>)
 8019036:	f7f1 f811 	bl	800a05c <HAL_PCD_Init>
 801903a:	4603      	mov	r3, r0
 801903c:	2b00      	cmp	r3, #0
 801903e:	d001      	beq.n	8019044 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8019040:	f7e9 fe5c 	bl	8002cfc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801904a:	2318      	movs	r3, #24
 801904c:	2200      	movs	r2, #0
 801904e:	2100      	movs	r1, #0
 8019050:	f7f2 fc98 	bl	800b984 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801905a:	2358      	movs	r3, #88	@ 0x58
 801905c:	2200      	movs	r2, #0
 801905e:	2180      	movs	r1, #128	@ 0x80
 8019060:	f7f2 fc90 	bl	800b984 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801906a:	23c0      	movs	r3, #192	@ 0xc0
 801906c:	2200      	movs	r2, #0
 801906e:	2181      	movs	r1, #129	@ 0x81
 8019070:	f7f2 fc88 	bl	800b984 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801907a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801907e:	2200      	movs	r2, #0
 8019080:	2101      	movs	r1, #1
 8019082:	f7f2 fc7f 	bl	800b984 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801908c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8019090:	2200      	movs	r2, #0
 8019092:	2182      	movs	r1, #130	@ 0x82
 8019094:	f7f2 fc76 	bl	800b984 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8019098:	2300      	movs	r3, #0
}
 801909a:	4618      	mov	r0, r3
 801909c:	3708      	adds	r7, #8
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}
 80190a2:	bf00      	nop
 80190a4:	20002d10 	.word	0x20002d10
 80190a8:	40006800 	.word	0x40006800

080190ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b084      	sub	sp, #16
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190b4:	2300      	movs	r3, #0
 80190b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190b8:	2300      	movs	r3, #0
 80190ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80190c2:	4618      	mov	r0, r3
 80190c4:	f7f1 f898 	bl	800a1f8 <HAL_PCD_Start>
 80190c8:	4603      	mov	r3, r0
 80190ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190cc:	7bfb      	ldrb	r3, [r7, #15]
 80190ce:	4618      	mov	r0, r3
 80190d0:	f000 f97e 	bl	80193d0 <USBD_Get_USB_Status>
 80190d4:	4603      	mov	r3, r0
 80190d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80190da:	4618      	mov	r0, r3
 80190dc:	3710      	adds	r7, #16
 80190de:	46bd      	mov	sp, r7
 80190e0:	bd80      	pop	{r7, pc}

080190e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80190e2:	b580      	push	{r7, lr}
 80190e4:	b084      	sub	sp, #16
 80190e6:	af00      	add	r7, sp, #0
 80190e8:	6078      	str	r0, [r7, #4]
 80190ea:	4608      	mov	r0, r1
 80190ec:	4611      	mov	r1, r2
 80190ee:	461a      	mov	r2, r3
 80190f0:	4603      	mov	r3, r0
 80190f2:	70fb      	strb	r3, [r7, #3]
 80190f4:	460b      	mov	r3, r1
 80190f6:	70bb      	strb	r3, [r7, #2]
 80190f8:	4613      	mov	r3, r2
 80190fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190fc:	2300      	movs	r3, #0
 80190fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019100:	2300      	movs	r3, #0
 8019102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801910a:	78bb      	ldrb	r3, [r7, #2]
 801910c:	883a      	ldrh	r2, [r7, #0]
 801910e:	78f9      	ldrb	r1, [r7, #3]
 8019110:	f7f1 f9df 	bl	800a4d2 <HAL_PCD_EP_Open>
 8019114:	4603      	mov	r3, r0
 8019116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019118:	7bfb      	ldrb	r3, [r7, #15]
 801911a:	4618      	mov	r0, r3
 801911c:	f000 f958 	bl	80193d0 <USBD_Get_USB_Status>
 8019120:	4603      	mov	r3, r0
 8019122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019124:	7bbb      	ldrb	r3, [r7, #14]
}
 8019126:	4618      	mov	r0, r3
 8019128:	3710      	adds	r7, #16
 801912a:	46bd      	mov	sp, r7
 801912c:	bd80      	pop	{r7, pc}

0801912e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801912e:	b580      	push	{r7, lr}
 8019130:	b084      	sub	sp, #16
 8019132:	af00      	add	r7, sp, #0
 8019134:	6078      	str	r0, [r7, #4]
 8019136:	460b      	mov	r3, r1
 8019138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801913a:	2300      	movs	r3, #0
 801913c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801913e:	2300      	movs	r3, #0
 8019140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019148:	78fa      	ldrb	r2, [r7, #3]
 801914a:	4611      	mov	r1, r2
 801914c:	4618      	mov	r0, r3
 801914e:	f7f1 fa1f 	bl	800a590 <HAL_PCD_EP_Close>
 8019152:	4603      	mov	r3, r0
 8019154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019156:	7bfb      	ldrb	r3, [r7, #15]
 8019158:	4618      	mov	r0, r3
 801915a:	f000 f939 	bl	80193d0 <USBD_Get_USB_Status>
 801915e:	4603      	mov	r3, r0
 8019160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019162:	7bbb      	ldrb	r3, [r7, #14]
}
 8019164:	4618      	mov	r0, r3
 8019166:	3710      	adds	r7, #16
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}

0801916c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801916c:	b580      	push	{r7, lr}
 801916e:	b084      	sub	sp, #16
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
 8019174:	460b      	mov	r3, r1
 8019176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019178:	2300      	movs	r3, #0
 801917a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801917c:	2300      	movs	r3, #0
 801917e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019186:	78fa      	ldrb	r2, [r7, #3]
 8019188:	4611      	mov	r1, r2
 801918a:	4618      	mov	r0, r3
 801918c:	f7f1 fac8 	bl	800a720 <HAL_PCD_EP_SetStall>
 8019190:	4603      	mov	r3, r0
 8019192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019194:	7bfb      	ldrb	r3, [r7, #15]
 8019196:	4618      	mov	r0, r3
 8019198:	f000 f91a 	bl	80193d0 <USBD_Get_USB_Status>
 801919c:	4603      	mov	r3, r0
 801919e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80191a2:	4618      	mov	r0, r3
 80191a4:	3710      	adds	r7, #16
 80191a6:	46bd      	mov	sp, r7
 80191a8:	bd80      	pop	{r7, pc}

080191aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191aa:	b580      	push	{r7, lr}
 80191ac:	b084      	sub	sp, #16
 80191ae:	af00      	add	r7, sp, #0
 80191b0:	6078      	str	r0, [r7, #4]
 80191b2:	460b      	mov	r3, r1
 80191b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191b6:	2300      	movs	r3, #0
 80191b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191ba:	2300      	movs	r3, #0
 80191bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80191c4:	78fa      	ldrb	r2, [r7, #3]
 80191c6:	4611      	mov	r1, r2
 80191c8:	4618      	mov	r0, r3
 80191ca:	f7f1 fafb 	bl	800a7c4 <HAL_PCD_EP_ClrStall>
 80191ce:	4603      	mov	r3, r0
 80191d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191d2:	7bfb      	ldrb	r3, [r7, #15]
 80191d4:	4618      	mov	r0, r3
 80191d6:	f000 f8fb 	bl	80193d0 <USBD_Get_USB_Status>
 80191da:	4603      	mov	r3, r0
 80191dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191de:	7bbb      	ldrb	r3, [r7, #14]
}
 80191e0:	4618      	mov	r0, r3
 80191e2:	3710      	adds	r7, #16
 80191e4:	46bd      	mov	sp, r7
 80191e6:	bd80      	pop	{r7, pc}

080191e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191e8:	b480      	push	{r7}
 80191ea:	b085      	sub	sp, #20
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	6078      	str	r0, [r7, #4]
 80191f0:	460b      	mov	r3, r1
 80191f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80191fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80191fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019200:	2b00      	cmp	r3, #0
 8019202:	da0b      	bge.n	801921c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019204:	78fb      	ldrb	r3, [r7, #3]
 8019206:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801920a:	68f9      	ldr	r1, [r7, #12]
 801920c:	4613      	mov	r3, r2
 801920e:	009b      	lsls	r3, r3, #2
 8019210:	4413      	add	r3, r2
 8019212:	00db      	lsls	r3, r3, #3
 8019214:	440b      	add	r3, r1
 8019216:	3312      	adds	r3, #18
 8019218:	781b      	ldrb	r3, [r3, #0]
 801921a:	e00b      	b.n	8019234 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801921c:	78fb      	ldrb	r3, [r7, #3]
 801921e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8019222:	68f9      	ldr	r1, [r7, #12]
 8019224:	4613      	mov	r3, r2
 8019226:	009b      	lsls	r3, r3, #2
 8019228:	4413      	add	r3, r2
 801922a:	00db      	lsls	r3, r3, #3
 801922c:	440b      	add	r3, r1
 801922e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8019232:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019234:	4618      	mov	r0, r3
 8019236:	3714      	adds	r7, #20
 8019238:	46bd      	mov	sp, r7
 801923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923e:	4770      	bx	lr

08019240 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b084      	sub	sp, #16
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
 8019248:	460b      	mov	r3, r1
 801924a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801924c:	2300      	movs	r3, #0
 801924e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019250:	2300      	movs	r3, #0
 8019252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801925a:	78fa      	ldrb	r2, [r7, #3]
 801925c:	4611      	mov	r1, r2
 801925e:	4618      	mov	r0, r3
 8019260:	f7f1 f913 	bl	800a48a <HAL_PCD_SetAddress>
 8019264:	4603      	mov	r3, r0
 8019266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019268:	7bfb      	ldrb	r3, [r7, #15]
 801926a:	4618      	mov	r0, r3
 801926c:	f000 f8b0 	bl	80193d0 <USBD_Get_USB_Status>
 8019270:	4603      	mov	r3, r0
 8019272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019274:	7bbb      	ldrb	r3, [r7, #14]
}
 8019276:	4618      	mov	r0, r3
 8019278:	3710      	adds	r7, #16
 801927a:	46bd      	mov	sp, r7
 801927c:	bd80      	pop	{r7, pc}

0801927e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801927e:	b580      	push	{r7, lr}
 8019280:	b086      	sub	sp, #24
 8019282:	af00      	add	r7, sp, #0
 8019284:	60f8      	str	r0, [r7, #12]
 8019286:	607a      	str	r2, [r7, #4]
 8019288:	603b      	str	r3, [r7, #0]
 801928a:	460b      	mov	r3, r1
 801928c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801928e:	2300      	movs	r3, #0
 8019290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019292:	2300      	movs	r3, #0
 8019294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801929c:	7af9      	ldrb	r1, [r7, #11]
 801929e:	683b      	ldr	r3, [r7, #0]
 80192a0:	687a      	ldr	r2, [r7, #4]
 80192a2:	f7f1 fa06 	bl	800a6b2 <HAL_PCD_EP_Transmit>
 80192a6:	4603      	mov	r3, r0
 80192a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192aa:	7dfb      	ldrb	r3, [r7, #23]
 80192ac:	4618      	mov	r0, r3
 80192ae:	f000 f88f 	bl	80193d0 <USBD_Get_USB_Status>
 80192b2:	4603      	mov	r3, r0
 80192b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80192b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80192b8:	4618      	mov	r0, r3
 80192ba:	3718      	adds	r7, #24
 80192bc:	46bd      	mov	sp, r7
 80192be:	bd80      	pop	{r7, pc}

080192c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80192c0:	b580      	push	{r7, lr}
 80192c2:	b086      	sub	sp, #24
 80192c4:	af00      	add	r7, sp, #0
 80192c6:	60f8      	str	r0, [r7, #12]
 80192c8:	607a      	str	r2, [r7, #4]
 80192ca:	603b      	str	r3, [r7, #0]
 80192cc:	460b      	mov	r3, r1
 80192ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192d0:	2300      	movs	r3, #0
 80192d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192d4:	2300      	movs	r3, #0
 80192d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80192d8:	68fb      	ldr	r3, [r7, #12]
 80192da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80192de:	7af9      	ldrb	r1, [r7, #11]
 80192e0:	683b      	ldr	r3, [r7, #0]
 80192e2:	687a      	ldr	r2, [r7, #4]
 80192e4:	f7f1 f99c 	bl	800a620 <HAL_PCD_EP_Receive>
 80192e8:	4603      	mov	r3, r0
 80192ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192ec:	7dfb      	ldrb	r3, [r7, #23]
 80192ee:	4618      	mov	r0, r3
 80192f0:	f000 f86e 	bl	80193d0 <USBD_Get_USB_Status>
 80192f4:	4603      	mov	r3, r0
 80192f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80192f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80192fa:	4618      	mov	r0, r3
 80192fc:	3718      	adds	r7, #24
 80192fe:	46bd      	mov	sp, r7
 8019300:	bd80      	pop	{r7, pc}

08019302 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019302:	b580      	push	{r7, lr}
 8019304:	b082      	sub	sp, #8
 8019306:	af00      	add	r7, sp, #0
 8019308:	6078      	str	r0, [r7, #4]
 801930a:	460b      	mov	r3, r1
 801930c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8019314:	78fa      	ldrb	r2, [r7, #3]
 8019316:	4611      	mov	r1, r2
 8019318:	4618      	mov	r0, r3
 801931a:	f7f1 f9b2 	bl	800a682 <HAL_PCD_EP_GetRxCount>
 801931e:	4603      	mov	r3, r0
}
 8019320:	4618      	mov	r0, r3
 8019322:	3708      	adds	r7, #8
 8019324:	46bd      	mov	sp, r7
 8019326:	bd80      	pop	{r7, pc}

08019328 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019328:	b580      	push	{r7, lr}
 801932a:	b082      	sub	sp, #8
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
 8019330:	460b      	mov	r3, r1
 8019332:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8019334:	78fb      	ldrb	r3, [r7, #3]
 8019336:	2b00      	cmp	r3, #0
 8019338:	d002      	beq.n	8019340 <HAL_PCDEx_LPM_Callback+0x18>
 801933a:	2b01      	cmp	r3, #1
 801933c:	d013      	beq.n	8019366 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801933e:	e023      	b.n	8019388 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	7a5b      	ldrb	r3, [r3, #9]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d007      	beq.n	8019358 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8019348:	f000 f83c 	bl	80193c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801934c:	4b10      	ldr	r3, [pc, #64]	@ (8019390 <HAL_PCDEx_LPM_Callback+0x68>)
 801934e:	691b      	ldr	r3, [r3, #16]
 8019350:	4a0f      	ldr	r2, [pc, #60]	@ (8019390 <HAL_PCDEx_LPM_Callback+0x68>)
 8019352:	f023 0306 	bic.w	r3, r3, #6
 8019356:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801935e:	4618      	mov	r0, r3
 8019360:	f7fa fd65 	bl	8013e2e <USBD_LL_Resume>
    break;
 8019364:	e010      	b.n	8019388 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801936c:	4618      	mov	r0, r3
 801936e:	f7fa fd42 	bl	8013df6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	7a5b      	ldrb	r3, [r3, #9]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d005      	beq.n	8019386 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801937a:	4b05      	ldr	r3, [pc, #20]	@ (8019390 <HAL_PCDEx_LPM_Callback+0x68>)
 801937c:	691b      	ldr	r3, [r3, #16]
 801937e:	4a04      	ldr	r2, [pc, #16]	@ (8019390 <HAL_PCDEx_LPM_Callback+0x68>)
 8019380:	f043 0306 	orr.w	r3, r3, #6
 8019384:	6113      	str	r3, [r2, #16]
    break;
 8019386:	bf00      	nop
}
 8019388:	bf00      	nop
 801938a:	3708      	adds	r7, #8
 801938c:	46bd      	mov	sp, r7
 801938e:	bd80      	pop	{r7, pc}
 8019390:	e000ed00 	.word	0xe000ed00

08019394 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019394:	b480      	push	{r7}
 8019396:	b083      	sub	sp, #12
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801939c:	4b03      	ldr	r3, [pc, #12]	@ (80193ac <USBD_static_malloc+0x18>)
}
 801939e:	4618      	mov	r0, r3
 80193a0:	370c      	adds	r7, #12
 80193a2:	46bd      	mov	sp, r7
 80193a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a8:	4770      	bx	lr
 80193aa:	bf00      	nop
 80193ac:	20002fec 	.word	0x20002fec

080193b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80193b0:	b480      	push	{r7}
 80193b2:	b083      	sub	sp, #12
 80193b4:	af00      	add	r7, sp, #0
 80193b6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80193b8:	bf00      	nop
 80193ba:	370c      	adds	r7, #12
 80193bc:	46bd      	mov	sp, r7
 80193be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c2:	4770      	bx	lr

080193c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80193c8:	f7e9 fbfa 	bl	8002bc0 <SystemClock_Config>
}
 80193cc:	bf00      	nop
 80193ce:	bd80      	pop	{r7, pc}

080193d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80193d0:	b480      	push	{r7}
 80193d2:	b085      	sub	sp, #20
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	4603      	mov	r3, r0
 80193d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80193da:	2300      	movs	r3, #0
 80193dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80193de:	79fb      	ldrb	r3, [r7, #7]
 80193e0:	2b03      	cmp	r3, #3
 80193e2:	d817      	bhi.n	8019414 <USBD_Get_USB_Status+0x44>
 80193e4:	a201      	add	r2, pc, #4	@ (adr r2, 80193ec <USBD_Get_USB_Status+0x1c>)
 80193e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193ea:	bf00      	nop
 80193ec:	080193fd 	.word	0x080193fd
 80193f0:	08019403 	.word	0x08019403
 80193f4:	08019409 	.word	0x08019409
 80193f8:	0801940f 	.word	0x0801940f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80193fc:	2300      	movs	r3, #0
 80193fe:	73fb      	strb	r3, [r7, #15]
    break;
 8019400:	e00b      	b.n	801941a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019402:	2303      	movs	r3, #3
 8019404:	73fb      	strb	r3, [r7, #15]
    break;
 8019406:	e008      	b.n	801941a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019408:	2301      	movs	r3, #1
 801940a:	73fb      	strb	r3, [r7, #15]
    break;
 801940c:	e005      	b.n	801941a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801940e:	2303      	movs	r3, #3
 8019410:	73fb      	strb	r3, [r7, #15]
    break;
 8019412:	e002      	b.n	801941a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019414:	2303      	movs	r3, #3
 8019416:	73fb      	strb	r3, [r7, #15]
    break;
 8019418:	bf00      	nop
  }
  return usb_status;
 801941a:	7bfb      	ldrb	r3, [r7, #15]
}
 801941c:	4618      	mov	r0, r3
 801941e:	3714      	adds	r7, #20
 8019420:	46bd      	mov	sp, r7
 8019422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019426:	4770      	bx	lr

08019428 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019428:	b480      	push	{r7}
 801942a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801942c:	4b05      	ldr	r3, [pc, #20]	@ (8019444 <UTIL_LPM_Init+0x1c>)
 801942e:	2200      	movs	r2, #0
 8019430:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019432:	4b05      	ldr	r3, [pc, #20]	@ (8019448 <UTIL_LPM_Init+0x20>)
 8019434:	2200      	movs	r2, #0
 8019436:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019438:	bf00      	nop
 801943a:	46bd      	mov	sp, r7
 801943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019440:	4770      	bx	lr
 8019442:	bf00      	nop
 8019444:	2000320c 	.word	0x2000320c
 8019448:	20003210 	.word	0x20003210

0801944c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801944c:	b480      	push	{r7}
 801944e:	b087      	sub	sp, #28
 8019450:	af00      	add	r7, sp, #0
 8019452:	6078      	str	r0, [r7, #4]
 8019454:	460b      	mov	r3, r1
 8019456:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019458:	f3ef 8310 	mrs	r3, PRIMASK
 801945c:	613b      	str	r3, [r7, #16]
  return(result);
 801945e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019460:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019462:	b672      	cpsid	i
}
 8019464:	bf00      	nop
  
  switch(state)
 8019466:	78fb      	ldrb	r3, [r7, #3]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d008      	beq.n	801947e <UTIL_LPM_SetOffMode+0x32>
 801946c:	2b01      	cmp	r3, #1
 801946e:	d10e      	bne.n	801948e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019470:	4b0d      	ldr	r3, [pc, #52]	@ (80194a8 <UTIL_LPM_SetOffMode+0x5c>)
 8019472:	681a      	ldr	r2, [r3, #0]
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	4313      	orrs	r3, r2
 8019478:	4a0b      	ldr	r2, [pc, #44]	@ (80194a8 <UTIL_LPM_SetOffMode+0x5c>)
 801947a:	6013      	str	r3, [r2, #0]
      break;
 801947c:	e008      	b.n	8019490 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	43da      	mvns	r2, r3
 8019482:	4b09      	ldr	r3, [pc, #36]	@ (80194a8 <UTIL_LPM_SetOffMode+0x5c>)
 8019484:	681b      	ldr	r3, [r3, #0]
 8019486:	4013      	ands	r3, r2
 8019488:	4a07      	ldr	r2, [pc, #28]	@ (80194a8 <UTIL_LPM_SetOffMode+0x5c>)
 801948a:	6013      	str	r3, [r2, #0]
      break;
 801948c:	e000      	b.n	8019490 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801948e:	bf00      	nop
 8019490:	697b      	ldr	r3, [r7, #20]
 8019492:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	f383 8810 	msr	PRIMASK, r3
}
 801949a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801949c:	bf00      	nop
 801949e:	371c      	adds	r7, #28
 80194a0:	46bd      	mov	sp, r7
 80194a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194a6:	4770      	bx	lr
 80194a8:	20003210 	.word	0x20003210

080194ac <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80194ac:	b580      	push	{r7, lr}
 80194ae:	b090      	sub	sp, #64	@ 0x40
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80194b4:	4b73      	ldr	r3, [pc, #460]	@ (8019684 <UTIL_SEQ_Run+0x1d8>)
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80194ba:	4b72      	ldr	r3, [pc, #456]	@ (8019684 <UTIL_SEQ_Run+0x1d8>)
 80194bc:	681a      	ldr	r2, [r3, #0]
 80194be:	687b      	ldr	r3, [r7, #4]
 80194c0:	4013      	ands	r3, r2
 80194c2:	4a70      	ldr	r2, [pc, #448]	@ (8019684 <UTIL_SEQ_Run+0x1d8>)
 80194c4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80194c6:	4b70      	ldr	r3, [pc, #448]	@ (8019688 <UTIL_SEQ_Run+0x1dc>)
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80194cc:	4b6f      	ldr	r3, [pc, #444]	@ (801968c <UTIL_SEQ_Run+0x1e0>)
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80194d2:	4b6f      	ldr	r3, [pc, #444]	@ (8019690 <UTIL_SEQ_Run+0x1e4>)
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80194d8:	4b6e      	ldr	r3, [pc, #440]	@ (8019694 <UTIL_SEQ_Run+0x1e8>)
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80194de:	e08d      	b.n	80195fc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80194e0:	2300      	movs	r3, #0
 80194e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80194e4:	e002      	b.n	80194ec <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80194e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194e8:	3301      	adds	r3, #1
 80194ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80194ec:	4a6a      	ldr	r2, [pc, #424]	@ (8019698 <UTIL_SEQ_Run+0x1ec>)
 80194ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80194f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80194f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80194f6:	401a      	ands	r2, r3
 80194f8:	4b62      	ldr	r3, [pc, #392]	@ (8019684 <UTIL_SEQ_Run+0x1d8>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	4013      	ands	r3, r2
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d0f1      	beq.n	80194e6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8019502:	4a65      	ldr	r2, [pc, #404]	@ (8019698 <UTIL_SEQ_Run+0x1ec>)
 8019504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019506:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801950c:	401a      	ands	r2, r3
 801950e:	4b5d      	ldr	r3, [pc, #372]	@ (8019684 <UTIL_SEQ_Run+0x1d8>)
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	4013      	ands	r3, r2
 8019514:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8019516:	4a60      	ldr	r2, [pc, #384]	@ (8019698 <UTIL_SEQ_Run+0x1ec>)
 8019518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801951a:	00db      	lsls	r3, r3, #3
 801951c:	4413      	add	r3, r2
 801951e:	685a      	ldr	r2, [r3, #4]
 8019520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019522:	4013      	ands	r3, r2
 8019524:	2b00      	cmp	r3, #0
 8019526:	d106      	bne.n	8019536 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8019528:	4a5b      	ldr	r2, [pc, #364]	@ (8019698 <UTIL_SEQ_Run+0x1ec>)
 801952a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801952c:	00db      	lsls	r3, r3, #3
 801952e:	4413      	add	r3, r2
 8019530:	f04f 32ff 	mov.w	r2, #4294967295
 8019534:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8019536:	4a58      	ldr	r2, [pc, #352]	@ (8019698 <UTIL_SEQ_Run+0x1ec>)
 8019538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801953a:	00db      	lsls	r3, r3, #3
 801953c:	4413      	add	r3, r2
 801953e:	685a      	ldr	r2, [r3, #4]
 8019540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019542:	4013      	ands	r3, r2
 8019544:	4618      	mov	r0, r3
 8019546:	f000 f9b3 	bl	80198b0 <SEQ_BitPosition>
 801954a:	4603      	mov	r3, r0
 801954c:	461a      	mov	r2, r3
 801954e:	4b53      	ldr	r3, [pc, #332]	@ (801969c <UTIL_SEQ_Run+0x1f0>)
 8019550:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019552:	4a51      	ldr	r2, [pc, #324]	@ (8019698 <UTIL_SEQ_Run+0x1ec>)
 8019554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019556:	00db      	lsls	r3, r3, #3
 8019558:	4413      	add	r3, r2
 801955a:	685a      	ldr	r2, [r3, #4]
 801955c:	4b4f      	ldr	r3, [pc, #316]	@ (801969c <UTIL_SEQ_Run+0x1f0>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	2101      	movs	r1, #1
 8019562:	fa01 f303 	lsl.w	r3, r1, r3
 8019566:	43db      	mvns	r3, r3
 8019568:	401a      	ands	r2, r3
 801956a:	494b      	ldr	r1, [pc, #300]	@ (8019698 <UTIL_SEQ_Run+0x1ec>)
 801956c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801956e:	00db      	lsls	r3, r3, #3
 8019570:	440b      	add	r3, r1
 8019572:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019574:	f3ef 8310 	mrs	r3, PRIMASK
 8019578:	61bb      	str	r3, [r7, #24]
  return(result);
 801957a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801957c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801957e:	b672      	cpsid	i
}
 8019580:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8019582:	4b46      	ldr	r3, [pc, #280]	@ (801969c <UTIL_SEQ_Run+0x1f0>)
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	2201      	movs	r2, #1
 8019588:	fa02 f303 	lsl.w	r3, r2, r3
 801958c:	43da      	mvns	r2, r3
 801958e:	4b3e      	ldr	r3, [pc, #248]	@ (8019688 <UTIL_SEQ_Run+0x1dc>)
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	4013      	ands	r3, r2
 8019594:	4a3c      	ldr	r2, [pc, #240]	@ (8019688 <UTIL_SEQ_Run+0x1dc>)
 8019596:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019598:	2301      	movs	r3, #1
 801959a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801959c:	e013      	b.n	80195c6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801959e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195a0:	3b01      	subs	r3, #1
 80195a2:	4a3d      	ldr	r2, [pc, #244]	@ (8019698 <UTIL_SEQ_Run+0x1ec>)
 80195a4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80195a8:	4b3c      	ldr	r3, [pc, #240]	@ (801969c <UTIL_SEQ_Run+0x1f0>)
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	2201      	movs	r2, #1
 80195ae:	fa02 f303 	lsl.w	r3, r2, r3
 80195b2:	43da      	mvns	r2, r3
 80195b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195b6:	3b01      	subs	r3, #1
 80195b8:	400a      	ands	r2, r1
 80195ba:	4937      	ldr	r1, [pc, #220]	@ (8019698 <UTIL_SEQ_Run+0x1ec>)
 80195bc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80195c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195c2:	3b01      	subs	r3, #1
 80195c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80195c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d1e8      	bne.n	801959e <UTIL_SEQ_Run+0xf2>
 80195cc:	6a3b      	ldr	r3, [r7, #32]
 80195ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	f383 8810 	msr	PRIMASK, r3
}
 80195d6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80195d8:	4b30      	ldr	r3, [pc, #192]	@ (801969c <UTIL_SEQ_Run+0x1f0>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	4a30      	ldr	r2, [pc, #192]	@ (80196a0 <UTIL_SEQ_Run+0x1f4>)
 80195de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80195e2:	4798      	blx	r3

    local_taskset = TaskSet;
 80195e4:	4b28      	ldr	r3, [pc, #160]	@ (8019688 <UTIL_SEQ_Run+0x1dc>)
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80195ea:	4b28      	ldr	r3, [pc, #160]	@ (801968c <UTIL_SEQ_Run+0x1e0>)
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80195f0:	4b27      	ldr	r3, [pc, #156]	@ (8019690 <UTIL_SEQ_Run+0x1e4>)
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80195f6:	4b27      	ldr	r3, [pc, #156]	@ (8019694 <UTIL_SEQ_Run+0x1e8>)
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80195fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80195fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019600:	401a      	ands	r2, r3
 8019602:	4b20      	ldr	r3, [pc, #128]	@ (8019684 <UTIL_SEQ_Run+0x1d8>)
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	4013      	ands	r3, r2
 8019608:	2b00      	cmp	r3, #0
 801960a:	d005      	beq.n	8019618 <UTIL_SEQ_Run+0x16c>
 801960c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801960e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019610:	4013      	ands	r3, r2
 8019612:	2b00      	cmp	r3, #0
 8019614:	f43f af64 	beq.w	80194e0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019618:	4b20      	ldr	r3, [pc, #128]	@ (801969c <UTIL_SEQ_Run+0x1f0>)
 801961a:	f04f 32ff 	mov.w	r2, #4294967295
 801961e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019620:	f000 f938 	bl	8019894 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019624:	f3ef 8310 	mrs	r3, PRIMASK
 8019628:	613b      	str	r3, [r7, #16]
  return(result);
 801962a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801962c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801962e:	b672      	cpsid	i
}
 8019630:	bf00      	nop
  local_taskset = TaskSet;
 8019632:	4b15      	ldr	r3, [pc, #84]	@ (8019688 <UTIL_SEQ_Run+0x1dc>)
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019638:	4b14      	ldr	r3, [pc, #80]	@ (801968c <UTIL_SEQ_Run+0x1e0>)
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801963e:	4b14      	ldr	r3, [pc, #80]	@ (8019690 <UTIL_SEQ_Run+0x1e4>)
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8019644:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019648:	401a      	ands	r2, r3
 801964a:	4b0e      	ldr	r3, [pc, #56]	@ (8019684 <UTIL_SEQ_Run+0x1d8>)
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	4013      	ands	r3, r2
 8019650:	2b00      	cmp	r3, #0
 8019652:	d107      	bne.n	8019664 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8019654:	4b0f      	ldr	r3, [pc, #60]	@ (8019694 <UTIL_SEQ_Run+0x1e8>)
 8019656:	681a      	ldr	r2, [r3, #0]
 8019658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801965a:	4013      	ands	r3, r2
 801965c:	2b00      	cmp	r3, #0
 801965e:	d101      	bne.n	8019664 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8019660:	f7e8 f892 	bl	8001788 <UTIL_SEQ_Idle>
 8019664:	69fb      	ldr	r3, [r7, #28]
 8019666:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	f383 8810 	msr	PRIMASK, r3
}
 801966e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8019670:	f000 f917 	bl	80198a2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8019674:	4a03      	ldr	r2, [pc, #12]	@ (8019684 <UTIL_SEQ_Run+0x1d8>)
 8019676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019678:	6013      	str	r3, [r2, #0]

  return;
 801967a:	bf00      	nop
}
 801967c:	3740      	adds	r7, #64	@ 0x40
 801967e:	46bd      	mov	sp, r7
 8019680:	bd80      	pop	{r7, pc}
 8019682:	bf00      	nop
 8019684:	20000144 	.word	0x20000144
 8019688:	20003214 	.word	0x20003214
 801968c:	20003218 	.word	0x20003218
 8019690:	20000140 	.word	0x20000140
 8019694:	2000321c 	.word	0x2000321c
 8019698:	200032a4 	.word	0x200032a4
 801969c:	20003220 	.word	0x20003220
 80196a0:	20003224 	.word	0x20003224

080196a4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80196a4:	b580      	push	{r7, lr}
 80196a6:	b088      	sub	sp, #32
 80196a8:	af00      	add	r7, sp, #0
 80196aa:	60f8      	str	r0, [r7, #12]
 80196ac:	60b9      	str	r1, [r7, #8]
 80196ae:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196b0:	f3ef 8310 	mrs	r3, PRIMASK
 80196b4:	617b      	str	r3, [r7, #20]
  return(result);
 80196b6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80196b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80196ba:	b672      	cpsid	i
}
 80196bc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80196be:	68f8      	ldr	r0, [r7, #12]
 80196c0:	f000 f8f6 	bl	80198b0 <SEQ_BitPosition>
 80196c4:	4603      	mov	r3, r0
 80196c6:	4619      	mov	r1, r3
 80196c8:	4a06      	ldr	r2, [pc, #24]	@ (80196e4 <UTIL_SEQ_RegTask+0x40>)
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80196d0:	69fb      	ldr	r3, [r7, #28]
 80196d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196d4:	69bb      	ldr	r3, [r7, #24]
 80196d6:	f383 8810 	msr	PRIMASK, r3
}
 80196da:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80196dc:	bf00      	nop
}
 80196de:	3720      	adds	r7, #32
 80196e0:	46bd      	mov	sp, r7
 80196e2:	bd80      	pop	{r7, pc}
 80196e4:	20003224 	.word	0x20003224

080196e8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80196e8:	b480      	push	{r7}
 80196ea:	b087      	sub	sp, #28
 80196ec:	af00      	add	r7, sp, #0
 80196ee:	6078      	str	r0, [r7, #4]
 80196f0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80196f2:	f3ef 8310 	mrs	r3, PRIMASK
 80196f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80196f8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80196fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80196fc:	b672      	cpsid	i
}
 80196fe:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019700:	4b0d      	ldr	r3, [pc, #52]	@ (8019738 <UTIL_SEQ_SetTask+0x50>)
 8019702:	681a      	ldr	r2, [r3, #0]
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	4313      	orrs	r3, r2
 8019708:	4a0b      	ldr	r2, [pc, #44]	@ (8019738 <UTIL_SEQ_SetTask+0x50>)
 801970a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801970c:	4a0b      	ldr	r2, [pc, #44]	@ (801973c <UTIL_SEQ_SetTask+0x54>)
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	431a      	orrs	r2, r3
 8019718:	4908      	ldr	r1, [pc, #32]	@ (801973c <UTIL_SEQ_SetTask+0x54>)
 801971a:	683b      	ldr	r3, [r7, #0]
 801971c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019720:	697b      	ldr	r3, [r7, #20]
 8019722:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019724:	693b      	ldr	r3, [r7, #16]
 8019726:	f383 8810 	msr	PRIMASK, r3
}
 801972a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801972c:	bf00      	nop
}
 801972e:	371c      	adds	r7, #28
 8019730:	46bd      	mov	sp, r7
 8019732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019736:	4770      	bx	lr
 8019738:	20003214 	.word	0x20003214
 801973c:	200032a4 	.word	0x200032a4

08019740 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8019740:	b480      	push	{r7}
 8019742:	b087      	sub	sp, #28
 8019744:	af00      	add	r7, sp, #0
 8019746:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019748:	f3ef 8310 	mrs	r3, PRIMASK
 801974c:	60fb      	str	r3, [r7, #12]
  return(result);
 801974e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019750:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019752:	b672      	cpsid	i
}
 8019754:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	43da      	mvns	r2, r3
 801975a:	4b08      	ldr	r3, [pc, #32]	@ (801977c <UTIL_SEQ_PauseTask+0x3c>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	4013      	ands	r3, r2
 8019760:	4a06      	ldr	r2, [pc, #24]	@ (801977c <UTIL_SEQ_PauseTask+0x3c>)
 8019762:	6013      	str	r3, [r2, #0]
 8019764:	697b      	ldr	r3, [r7, #20]
 8019766:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019768:	693b      	ldr	r3, [r7, #16]
 801976a:	f383 8810 	msr	PRIMASK, r3
}
 801976e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019770:	bf00      	nop
}
 8019772:	371c      	adds	r7, #28
 8019774:	46bd      	mov	sp, r7
 8019776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801977a:	4770      	bx	lr
 801977c:	20000140 	.word	0x20000140

08019780 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8019780:	b480      	push	{r7}
 8019782:	b087      	sub	sp, #28
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019788:	f3ef 8310 	mrs	r3, PRIMASK
 801978c:	60fb      	str	r3, [r7, #12]
  return(result);
 801978e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019792:	b672      	cpsid	i
}
 8019794:	bf00      	nop

  TaskMask |= TaskId_bm;
 8019796:	4b09      	ldr	r3, [pc, #36]	@ (80197bc <UTIL_SEQ_ResumeTask+0x3c>)
 8019798:	681a      	ldr	r2, [r3, #0]
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	4313      	orrs	r3, r2
 801979e:	4a07      	ldr	r2, [pc, #28]	@ (80197bc <UTIL_SEQ_ResumeTask+0x3c>)
 80197a0:	6013      	str	r3, [r2, #0]
 80197a2:	697b      	ldr	r3, [r7, #20]
 80197a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	f383 8810 	msr	PRIMASK, r3
}
 80197ac:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80197ae:	bf00      	nop
}
 80197b0:	371c      	adds	r7, #28
 80197b2:	46bd      	mov	sp, r7
 80197b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b8:	4770      	bx	lr
 80197ba:	bf00      	nop
 80197bc:	20000140 	.word	0x20000140

080197c0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80197c0:	b480      	push	{r7}
 80197c2:	b087      	sub	sp, #28
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80197c8:	f3ef 8310 	mrs	r3, PRIMASK
 80197cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80197ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80197d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80197d2:	b672      	cpsid	i
}
 80197d4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80197d6:	4b09      	ldr	r3, [pc, #36]	@ (80197fc <UTIL_SEQ_SetEvt+0x3c>)
 80197d8:	681a      	ldr	r2, [r3, #0]
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	4313      	orrs	r3, r2
 80197de:	4a07      	ldr	r2, [pc, #28]	@ (80197fc <UTIL_SEQ_SetEvt+0x3c>)
 80197e0:	6013      	str	r3, [r2, #0]
 80197e2:	697b      	ldr	r3, [r7, #20]
 80197e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80197e6:	693b      	ldr	r3, [r7, #16]
 80197e8:	f383 8810 	msr	PRIMASK, r3
}
 80197ec:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80197ee:	bf00      	nop
}
 80197f0:	371c      	adds	r7, #28
 80197f2:	46bd      	mov	sp, r7
 80197f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197f8:	4770      	bx	lr
 80197fa:	bf00      	nop
 80197fc:	20003218 	.word	0x20003218

08019800 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b088      	sub	sp, #32
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8019808:	4b1f      	ldr	r3, [pc, #124]	@ (8019888 <UTIL_SEQ_WaitEvt+0x88>)
 801980a:	681b      	ldr	r3, [r3, #0]
 801980c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801980e:	4b1e      	ldr	r3, [pc, #120]	@ (8019888 <UTIL_SEQ_WaitEvt+0x88>)
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019816:	d102      	bne.n	801981e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8019818:	2300      	movs	r3, #0
 801981a:	61fb      	str	r3, [r7, #28]
 801981c:	e005      	b.n	801982a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801981e:	4b1a      	ldr	r3, [pc, #104]	@ (8019888 <UTIL_SEQ_WaitEvt+0x88>)
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	2201      	movs	r2, #1
 8019824:	fa02 f303 	lsl.w	r3, r2, r3
 8019828:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801982a:	4b18      	ldr	r3, [pc, #96]	@ (801988c <UTIL_SEQ_WaitEvt+0x8c>)
 801982c:	681b      	ldr	r3, [r3, #0]
 801982e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8019830:	4a16      	ldr	r2, [pc, #88]	@ (801988c <UTIL_SEQ_WaitEvt+0x8c>)
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8019836:	e003      	b.n	8019840 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8019838:	6879      	ldr	r1, [r7, #4]
 801983a:	69f8      	ldr	r0, [r7, #28]
 801983c:	f7e7 ffab 	bl	8001796 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8019840:	4b13      	ldr	r3, [pc, #76]	@ (8019890 <UTIL_SEQ_WaitEvt+0x90>)
 8019842:	681a      	ldr	r2, [r3, #0]
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	4013      	ands	r3, r2
 8019848:	2b00      	cmp	r3, #0
 801984a:	d0f5      	beq.n	8019838 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801984c:	4a0e      	ldr	r2, [pc, #56]	@ (8019888 <UTIL_SEQ_WaitEvt+0x88>)
 801984e:	69bb      	ldr	r3, [r7, #24]
 8019850:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019852:	f3ef 8310 	mrs	r3, PRIMASK
 8019856:	60bb      	str	r3, [r7, #8]
  return(result);
 8019858:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801985a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801985c:	b672      	cpsid	i
}
 801985e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	43da      	mvns	r2, r3
 8019864:	4b0a      	ldr	r3, [pc, #40]	@ (8019890 <UTIL_SEQ_WaitEvt+0x90>)
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	4013      	ands	r3, r2
 801986a:	4a09      	ldr	r2, [pc, #36]	@ (8019890 <UTIL_SEQ_WaitEvt+0x90>)
 801986c:	6013      	str	r3, [r2, #0]
 801986e:	693b      	ldr	r3, [r7, #16]
 8019870:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019872:	68fb      	ldr	r3, [r7, #12]
 8019874:	f383 8810 	msr	PRIMASK, r3
}
 8019878:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801987a:	4a04      	ldr	r2, [pc, #16]	@ (801988c <UTIL_SEQ_WaitEvt+0x8c>)
 801987c:	697b      	ldr	r3, [r7, #20]
 801987e:	6013      	str	r3, [r2, #0]
  return;
 8019880:	bf00      	nop
}
 8019882:	3720      	adds	r7, #32
 8019884:	46bd      	mov	sp, r7
 8019886:	bd80      	pop	{r7, pc}
 8019888:	20003220 	.word	0x20003220
 801988c:	2000321c 	.word	0x2000321c
 8019890:	20003218 	.word	0x20003218

08019894 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019894:	b480      	push	{r7}
 8019896:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019898:	bf00      	nop
}
 801989a:	46bd      	mov	sp, r7
 801989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a0:	4770      	bx	lr

080198a2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80198a2:	b480      	push	{r7}
 80198a4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80198a6:	bf00      	nop
}
 80198a8:	46bd      	mov	sp, r7
 80198aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ae:	4770      	bx	lr

080198b0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80198b0:	b480      	push	{r7}
 80198b2:	b085      	sub	sp, #20
 80198b4:	af00      	add	r7, sp, #0
 80198b6:	6078      	str	r0, [r7, #4]
 80198b8:	687b      	ldr	r3, [r7, #4]
 80198ba:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	2b00      	cmp	r3, #0
 80198c0:	d101      	bne.n	80198c6 <SEQ_BitPosition+0x16>
    return 32U;
 80198c2:	2320      	movs	r3, #32
 80198c4:	e003      	b.n	80198ce <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	fab3 f383 	clz	r3, r3
 80198cc:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 80198ce:	f1c3 031f 	rsb	r3, r3, #31
 80198d2:	b2db      	uxtb	r3, r3
}
 80198d4:	4618      	mov	r0, r3
 80198d6:	3714      	adds	r7, #20
 80198d8:	46bd      	mov	sp, r7
 80198da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198de:	4770      	bx	lr

080198e0 <atoi>:
 80198e0:	220a      	movs	r2, #10
 80198e2:	2100      	movs	r1, #0
 80198e4:	f000 bfa6 	b.w	801a834 <strtol>

080198e8 <malloc>:
 80198e8:	4b02      	ldr	r3, [pc, #8]	@ (80198f4 <malloc+0xc>)
 80198ea:	4601      	mov	r1, r0
 80198ec:	6818      	ldr	r0, [r3, #0]
 80198ee:	f000 b82d 	b.w	801994c <_malloc_r>
 80198f2:	bf00      	nop
 80198f4:	200002c0 	.word	0x200002c0

080198f8 <free>:
 80198f8:	4b02      	ldr	r3, [pc, #8]	@ (8019904 <free+0xc>)
 80198fa:	4601      	mov	r1, r0
 80198fc:	6818      	ldr	r0, [r3, #0]
 80198fe:	f002 bf0b 	b.w	801c718 <_free_r>
 8019902:	bf00      	nop
 8019904:	200002c0 	.word	0x200002c0

08019908 <sbrk_aligned>:
 8019908:	b570      	push	{r4, r5, r6, lr}
 801990a:	4e0f      	ldr	r6, [pc, #60]	@ (8019948 <sbrk_aligned+0x40>)
 801990c:	460c      	mov	r4, r1
 801990e:	6831      	ldr	r1, [r6, #0]
 8019910:	4605      	mov	r5, r0
 8019912:	b911      	cbnz	r1, 801991a <sbrk_aligned+0x12>
 8019914:	f002 f822 	bl	801b95c <_sbrk_r>
 8019918:	6030      	str	r0, [r6, #0]
 801991a:	4621      	mov	r1, r4
 801991c:	4628      	mov	r0, r5
 801991e:	f002 f81d 	bl	801b95c <_sbrk_r>
 8019922:	1c43      	adds	r3, r0, #1
 8019924:	d103      	bne.n	801992e <sbrk_aligned+0x26>
 8019926:	f04f 34ff 	mov.w	r4, #4294967295
 801992a:	4620      	mov	r0, r4
 801992c:	bd70      	pop	{r4, r5, r6, pc}
 801992e:	1cc4      	adds	r4, r0, #3
 8019930:	f024 0403 	bic.w	r4, r4, #3
 8019934:	42a0      	cmp	r0, r4
 8019936:	d0f8      	beq.n	801992a <sbrk_aligned+0x22>
 8019938:	1a21      	subs	r1, r4, r0
 801993a:	4628      	mov	r0, r5
 801993c:	f002 f80e 	bl	801b95c <_sbrk_r>
 8019940:	3001      	adds	r0, #1
 8019942:	d1f2      	bne.n	801992a <sbrk_aligned+0x22>
 8019944:	e7ef      	b.n	8019926 <sbrk_aligned+0x1e>
 8019946:	bf00      	nop
 8019948:	200032ac 	.word	0x200032ac

0801994c <_malloc_r>:
 801994c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019950:	1ccd      	adds	r5, r1, #3
 8019952:	f025 0503 	bic.w	r5, r5, #3
 8019956:	3508      	adds	r5, #8
 8019958:	2d0c      	cmp	r5, #12
 801995a:	bf38      	it	cc
 801995c:	250c      	movcc	r5, #12
 801995e:	2d00      	cmp	r5, #0
 8019960:	4606      	mov	r6, r0
 8019962:	db01      	blt.n	8019968 <_malloc_r+0x1c>
 8019964:	42a9      	cmp	r1, r5
 8019966:	d904      	bls.n	8019972 <_malloc_r+0x26>
 8019968:	230c      	movs	r3, #12
 801996a:	6033      	str	r3, [r6, #0]
 801996c:	2000      	movs	r0, #0
 801996e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019a48 <_malloc_r+0xfc>
 8019976:	f000 f869 	bl	8019a4c <__malloc_lock>
 801997a:	f8d8 3000 	ldr.w	r3, [r8]
 801997e:	461c      	mov	r4, r3
 8019980:	bb44      	cbnz	r4, 80199d4 <_malloc_r+0x88>
 8019982:	4629      	mov	r1, r5
 8019984:	4630      	mov	r0, r6
 8019986:	f7ff ffbf 	bl	8019908 <sbrk_aligned>
 801998a:	1c43      	adds	r3, r0, #1
 801998c:	4604      	mov	r4, r0
 801998e:	d158      	bne.n	8019a42 <_malloc_r+0xf6>
 8019990:	f8d8 4000 	ldr.w	r4, [r8]
 8019994:	4627      	mov	r7, r4
 8019996:	2f00      	cmp	r7, #0
 8019998:	d143      	bne.n	8019a22 <_malloc_r+0xd6>
 801999a:	2c00      	cmp	r4, #0
 801999c:	d04b      	beq.n	8019a36 <_malloc_r+0xea>
 801999e:	6823      	ldr	r3, [r4, #0]
 80199a0:	4639      	mov	r1, r7
 80199a2:	4630      	mov	r0, r6
 80199a4:	eb04 0903 	add.w	r9, r4, r3
 80199a8:	f001 ffd8 	bl	801b95c <_sbrk_r>
 80199ac:	4581      	cmp	r9, r0
 80199ae:	d142      	bne.n	8019a36 <_malloc_r+0xea>
 80199b0:	6821      	ldr	r1, [r4, #0]
 80199b2:	1a6d      	subs	r5, r5, r1
 80199b4:	4629      	mov	r1, r5
 80199b6:	4630      	mov	r0, r6
 80199b8:	f7ff ffa6 	bl	8019908 <sbrk_aligned>
 80199bc:	3001      	adds	r0, #1
 80199be:	d03a      	beq.n	8019a36 <_malloc_r+0xea>
 80199c0:	6823      	ldr	r3, [r4, #0]
 80199c2:	442b      	add	r3, r5
 80199c4:	6023      	str	r3, [r4, #0]
 80199c6:	f8d8 3000 	ldr.w	r3, [r8]
 80199ca:	685a      	ldr	r2, [r3, #4]
 80199cc:	bb62      	cbnz	r2, 8019a28 <_malloc_r+0xdc>
 80199ce:	f8c8 7000 	str.w	r7, [r8]
 80199d2:	e00f      	b.n	80199f4 <_malloc_r+0xa8>
 80199d4:	6822      	ldr	r2, [r4, #0]
 80199d6:	1b52      	subs	r2, r2, r5
 80199d8:	d420      	bmi.n	8019a1c <_malloc_r+0xd0>
 80199da:	2a0b      	cmp	r2, #11
 80199dc:	d917      	bls.n	8019a0e <_malloc_r+0xc2>
 80199de:	1961      	adds	r1, r4, r5
 80199e0:	42a3      	cmp	r3, r4
 80199e2:	6025      	str	r5, [r4, #0]
 80199e4:	bf18      	it	ne
 80199e6:	6059      	strne	r1, [r3, #4]
 80199e8:	6863      	ldr	r3, [r4, #4]
 80199ea:	bf08      	it	eq
 80199ec:	f8c8 1000 	streq.w	r1, [r8]
 80199f0:	5162      	str	r2, [r4, r5]
 80199f2:	604b      	str	r3, [r1, #4]
 80199f4:	4630      	mov	r0, r6
 80199f6:	f000 f82f 	bl	8019a58 <__malloc_unlock>
 80199fa:	f104 000b 	add.w	r0, r4, #11
 80199fe:	1d23      	adds	r3, r4, #4
 8019a00:	f020 0007 	bic.w	r0, r0, #7
 8019a04:	1ac2      	subs	r2, r0, r3
 8019a06:	bf1c      	itt	ne
 8019a08:	1a1b      	subne	r3, r3, r0
 8019a0a:	50a3      	strne	r3, [r4, r2]
 8019a0c:	e7af      	b.n	801996e <_malloc_r+0x22>
 8019a0e:	6862      	ldr	r2, [r4, #4]
 8019a10:	42a3      	cmp	r3, r4
 8019a12:	bf0c      	ite	eq
 8019a14:	f8c8 2000 	streq.w	r2, [r8]
 8019a18:	605a      	strne	r2, [r3, #4]
 8019a1a:	e7eb      	b.n	80199f4 <_malloc_r+0xa8>
 8019a1c:	4623      	mov	r3, r4
 8019a1e:	6864      	ldr	r4, [r4, #4]
 8019a20:	e7ae      	b.n	8019980 <_malloc_r+0x34>
 8019a22:	463c      	mov	r4, r7
 8019a24:	687f      	ldr	r7, [r7, #4]
 8019a26:	e7b6      	b.n	8019996 <_malloc_r+0x4a>
 8019a28:	461a      	mov	r2, r3
 8019a2a:	685b      	ldr	r3, [r3, #4]
 8019a2c:	42a3      	cmp	r3, r4
 8019a2e:	d1fb      	bne.n	8019a28 <_malloc_r+0xdc>
 8019a30:	2300      	movs	r3, #0
 8019a32:	6053      	str	r3, [r2, #4]
 8019a34:	e7de      	b.n	80199f4 <_malloc_r+0xa8>
 8019a36:	230c      	movs	r3, #12
 8019a38:	6033      	str	r3, [r6, #0]
 8019a3a:	4630      	mov	r0, r6
 8019a3c:	f000 f80c 	bl	8019a58 <__malloc_unlock>
 8019a40:	e794      	b.n	801996c <_malloc_r+0x20>
 8019a42:	6005      	str	r5, [r0, #0]
 8019a44:	e7d6      	b.n	80199f4 <_malloc_r+0xa8>
 8019a46:	bf00      	nop
 8019a48:	200032b0 	.word	0x200032b0

08019a4c <__malloc_lock>:
 8019a4c:	4801      	ldr	r0, [pc, #4]	@ (8019a54 <__malloc_lock+0x8>)
 8019a4e:	f001 bfd2 	b.w	801b9f6 <__retarget_lock_acquire_recursive>
 8019a52:	bf00      	nop
 8019a54:	200033f4 	.word	0x200033f4

08019a58 <__malloc_unlock>:
 8019a58:	4801      	ldr	r0, [pc, #4]	@ (8019a60 <__malloc_unlock+0x8>)
 8019a5a:	f001 bfcd 	b.w	801b9f8 <__retarget_lock_release_recursive>
 8019a5e:	bf00      	nop
 8019a60:	200033f4 	.word	0x200033f4

08019a64 <sulp>:
 8019a64:	b570      	push	{r4, r5, r6, lr}
 8019a66:	4604      	mov	r4, r0
 8019a68:	460d      	mov	r5, r1
 8019a6a:	ec45 4b10 	vmov	d0, r4, r5
 8019a6e:	4616      	mov	r6, r2
 8019a70:	f003 fd5c 	bl	801d52c <__ulp>
 8019a74:	ec51 0b10 	vmov	r0, r1, d0
 8019a78:	b17e      	cbz	r6, 8019a9a <sulp+0x36>
 8019a7a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019a7e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	dd09      	ble.n	8019a9a <sulp+0x36>
 8019a86:	051b      	lsls	r3, r3, #20
 8019a88:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8019a8c:	2400      	movs	r4, #0
 8019a8e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8019a92:	4622      	mov	r2, r4
 8019a94:	462b      	mov	r3, r5
 8019a96:	f7e6 fd87 	bl	80005a8 <__aeabi_dmul>
 8019a9a:	ec41 0b10 	vmov	d0, r0, r1
 8019a9e:	bd70      	pop	{r4, r5, r6, pc}

08019aa0 <_strtod_l>:
 8019aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aa4:	b09f      	sub	sp, #124	@ 0x7c
 8019aa6:	460c      	mov	r4, r1
 8019aa8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8019aaa:	2200      	movs	r2, #0
 8019aac:	921a      	str	r2, [sp, #104]	@ 0x68
 8019aae:	9005      	str	r0, [sp, #20]
 8019ab0:	f04f 0a00 	mov.w	sl, #0
 8019ab4:	f04f 0b00 	mov.w	fp, #0
 8019ab8:	460a      	mov	r2, r1
 8019aba:	9219      	str	r2, [sp, #100]	@ 0x64
 8019abc:	7811      	ldrb	r1, [r2, #0]
 8019abe:	292b      	cmp	r1, #43	@ 0x2b
 8019ac0:	d04a      	beq.n	8019b58 <_strtod_l+0xb8>
 8019ac2:	d838      	bhi.n	8019b36 <_strtod_l+0x96>
 8019ac4:	290d      	cmp	r1, #13
 8019ac6:	d832      	bhi.n	8019b2e <_strtod_l+0x8e>
 8019ac8:	2908      	cmp	r1, #8
 8019aca:	d832      	bhi.n	8019b32 <_strtod_l+0x92>
 8019acc:	2900      	cmp	r1, #0
 8019ace:	d03b      	beq.n	8019b48 <_strtod_l+0xa8>
 8019ad0:	2200      	movs	r2, #0
 8019ad2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019ad4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8019ad6:	782a      	ldrb	r2, [r5, #0]
 8019ad8:	2a30      	cmp	r2, #48	@ 0x30
 8019ada:	f040 80b3 	bne.w	8019c44 <_strtod_l+0x1a4>
 8019ade:	786a      	ldrb	r2, [r5, #1]
 8019ae0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8019ae4:	2a58      	cmp	r2, #88	@ 0x58
 8019ae6:	d16e      	bne.n	8019bc6 <_strtod_l+0x126>
 8019ae8:	9302      	str	r3, [sp, #8]
 8019aea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019aec:	9301      	str	r3, [sp, #4]
 8019aee:	ab1a      	add	r3, sp, #104	@ 0x68
 8019af0:	9300      	str	r3, [sp, #0]
 8019af2:	4a8e      	ldr	r2, [pc, #568]	@ (8019d2c <_strtod_l+0x28c>)
 8019af4:	9805      	ldr	r0, [sp, #20]
 8019af6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8019af8:	a919      	add	r1, sp, #100	@ 0x64
 8019afa:	f002 febf 	bl	801c87c <__gethex>
 8019afe:	f010 060f 	ands.w	r6, r0, #15
 8019b02:	4604      	mov	r4, r0
 8019b04:	d005      	beq.n	8019b12 <_strtod_l+0x72>
 8019b06:	2e06      	cmp	r6, #6
 8019b08:	d128      	bne.n	8019b5c <_strtod_l+0xbc>
 8019b0a:	3501      	adds	r5, #1
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8019b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019b12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	f040 858e 	bne.w	801a636 <_strtod_l+0xb96>
 8019b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019b1c:	b1cb      	cbz	r3, 8019b52 <_strtod_l+0xb2>
 8019b1e:	4652      	mov	r2, sl
 8019b20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8019b24:	ec43 2b10 	vmov	d0, r2, r3
 8019b28:	b01f      	add	sp, #124	@ 0x7c
 8019b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019b2e:	2920      	cmp	r1, #32
 8019b30:	d1ce      	bne.n	8019ad0 <_strtod_l+0x30>
 8019b32:	3201      	adds	r2, #1
 8019b34:	e7c1      	b.n	8019aba <_strtod_l+0x1a>
 8019b36:	292d      	cmp	r1, #45	@ 0x2d
 8019b38:	d1ca      	bne.n	8019ad0 <_strtod_l+0x30>
 8019b3a:	2101      	movs	r1, #1
 8019b3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019b3e:	1c51      	adds	r1, r2, #1
 8019b40:	9119      	str	r1, [sp, #100]	@ 0x64
 8019b42:	7852      	ldrb	r2, [r2, #1]
 8019b44:	2a00      	cmp	r2, #0
 8019b46:	d1c5      	bne.n	8019ad4 <_strtod_l+0x34>
 8019b48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8019b4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	f040 8570 	bne.w	801a632 <_strtod_l+0xb92>
 8019b52:	4652      	mov	r2, sl
 8019b54:	465b      	mov	r3, fp
 8019b56:	e7e5      	b.n	8019b24 <_strtod_l+0x84>
 8019b58:	2100      	movs	r1, #0
 8019b5a:	e7ef      	b.n	8019b3c <_strtod_l+0x9c>
 8019b5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019b5e:	b13a      	cbz	r2, 8019b70 <_strtod_l+0xd0>
 8019b60:	2135      	movs	r1, #53	@ 0x35
 8019b62:	a81c      	add	r0, sp, #112	@ 0x70
 8019b64:	f003 fddc 	bl	801d720 <__copybits>
 8019b68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019b6a:	9805      	ldr	r0, [sp, #20]
 8019b6c:	f003 f9aa 	bl	801cec4 <_Bfree>
 8019b70:	3e01      	subs	r6, #1
 8019b72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8019b74:	2e04      	cmp	r6, #4
 8019b76:	d806      	bhi.n	8019b86 <_strtod_l+0xe6>
 8019b78:	e8df f006 	tbb	[pc, r6]
 8019b7c:	201d0314 	.word	0x201d0314
 8019b80:	14          	.byte	0x14
 8019b81:	00          	.byte	0x00
 8019b82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8019b86:	05e1      	lsls	r1, r4, #23
 8019b88:	bf48      	it	mi
 8019b8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8019b8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8019b92:	0d1b      	lsrs	r3, r3, #20
 8019b94:	051b      	lsls	r3, r3, #20
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d1bb      	bne.n	8019b12 <_strtod_l+0x72>
 8019b9a:	f001 ff01 	bl	801b9a0 <__errno>
 8019b9e:	2322      	movs	r3, #34	@ 0x22
 8019ba0:	6003      	str	r3, [r0, #0]
 8019ba2:	e7b6      	b.n	8019b12 <_strtod_l+0x72>
 8019ba4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8019ba8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8019bac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8019bb0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019bb4:	e7e7      	b.n	8019b86 <_strtod_l+0xe6>
 8019bb6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8019d34 <_strtod_l+0x294>
 8019bba:	e7e4      	b.n	8019b86 <_strtod_l+0xe6>
 8019bbc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8019bc0:	f04f 3aff 	mov.w	sl, #4294967295
 8019bc4:	e7df      	b.n	8019b86 <_strtod_l+0xe6>
 8019bc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019bc8:	1c5a      	adds	r2, r3, #1
 8019bca:	9219      	str	r2, [sp, #100]	@ 0x64
 8019bcc:	785b      	ldrb	r3, [r3, #1]
 8019bce:	2b30      	cmp	r3, #48	@ 0x30
 8019bd0:	d0f9      	beq.n	8019bc6 <_strtod_l+0x126>
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d09d      	beq.n	8019b12 <_strtod_l+0x72>
 8019bd6:	2301      	movs	r3, #1
 8019bd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8019bda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019bdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8019bde:	2300      	movs	r3, #0
 8019be0:	9308      	str	r3, [sp, #32]
 8019be2:	930a      	str	r3, [sp, #40]	@ 0x28
 8019be4:	461f      	mov	r7, r3
 8019be6:	220a      	movs	r2, #10
 8019be8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8019bea:	7805      	ldrb	r5, [r0, #0]
 8019bec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8019bf0:	b2d9      	uxtb	r1, r3
 8019bf2:	2909      	cmp	r1, #9
 8019bf4:	d928      	bls.n	8019c48 <_strtod_l+0x1a8>
 8019bf6:	494e      	ldr	r1, [pc, #312]	@ (8019d30 <_strtod_l+0x290>)
 8019bf8:	2201      	movs	r2, #1
 8019bfa:	f001 fdf2 	bl	801b7e2 <strncmp>
 8019bfe:	2800      	cmp	r0, #0
 8019c00:	d032      	beq.n	8019c68 <_strtod_l+0x1c8>
 8019c02:	2000      	movs	r0, #0
 8019c04:	462a      	mov	r2, r5
 8019c06:	4681      	mov	r9, r0
 8019c08:	463d      	mov	r5, r7
 8019c0a:	4603      	mov	r3, r0
 8019c0c:	2a65      	cmp	r2, #101	@ 0x65
 8019c0e:	d001      	beq.n	8019c14 <_strtod_l+0x174>
 8019c10:	2a45      	cmp	r2, #69	@ 0x45
 8019c12:	d114      	bne.n	8019c3e <_strtod_l+0x19e>
 8019c14:	b91d      	cbnz	r5, 8019c1e <_strtod_l+0x17e>
 8019c16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c18:	4302      	orrs	r2, r0
 8019c1a:	d095      	beq.n	8019b48 <_strtod_l+0xa8>
 8019c1c:	2500      	movs	r5, #0
 8019c1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8019c20:	1c62      	adds	r2, r4, #1
 8019c22:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c24:	7862      	ldrb	r2, [r4, #1]
 8019c26:	2a2b      	cmp	r2, #43	@ 0x2b
 8019c28:	d077      	beq.n	8019d1a <_strtod_l+0x27a>
 8019c2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8019c2c:	d07b      	beq.n	8019d26 <_strtod_l+0x286>
 8019c2e:	f04f 0c00 	mov.w	ip, #0
 8019c32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8019c36:	2909      	cmp	r1, #9
 8019c38:	f240 8082 	bls.w	8019d40 <_strtod_l+0x2a0>
 8019c3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8019c3e:	f04f 0800 	mov.w	r8, #0
 8019c42:	e0a2      	b.n	8019d8a <_strtod_l+0x2ea>
 8019c44:	2300      	movs	r3, #0
 8019c46:	e7c7      	b.n	8019bd8 <_strtod_l+0x138>
 8019c48:	2f08      	cmp	r7, #8
 8019c4a:	bfd5      	itete	le
 8019c4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8019c4e:	9908      	ldrgt	r1, [sp, #32]
 8019c50:	fb02 3301 	mlale	r3, r2, r1, r3
 8019c54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8019c58:	f100 0001 	add.w	r0, r0, #1
 8019c5c:	bfd4      	ite	le
 8019c5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8019c60:	9308      	strgt	r3, [sp, #32]
 8019c62:	3701      	adds	r7, #1
 8019c64:	9019      	str	r0, [sp, #100]	@ 0x64
 8019c66:	e7bf      	b.n	8019be8 <_strtod_l+0x148>
 8019c68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c6a:	1c5a      	adds	r2, r3, #1
 8019c6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c6e:	785a      	ldrb	r2, [r3, #1]
 8019c70:	b37f      	cbz	r7, 8019cd2 <_strtod_l+0x232>
 8019c72:	4681      	mov	r9, r0
 8019c74:	463d      	mov	r5, r7
 8019c76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8019c7a:	2b09      	cmp	r3, #9
 8019c7c:	d912      	bls.n	8019ca4 <_strtod_l+0x204>
 8019c7e:	2301      	movs	r3, #1
 8019c80:	e7c4      	b.n	8019c0c <_strtod_l+0x16c>
 8019c82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c84:	1c5a      	adds	r2, r3, #1
 8019c86:	9219      	str	r2, [sp, #100]	@ 0x64
 8019c88:	785a      	ldrb	r2, [r3, #1]
 8019c8a:	3001      	adds	r0, #1
 8019c8c:	2a30      	cmp	r2, #48	@ 0x30
 8019c8e:	d0f8      	beq.n	8019c82 <_strtod_l+0x1e2>
 8019c90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8019c94:	2b08      	cmp	r3, #8
 8019c96:	f200 84d3 	bhi.w	801a640 <_strtod_l+0xba0>
 8019c9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019c9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8019c9e:	4681      	mov	r9, r0
 8019ca0:	2000      	movs	r0, #0
 8019ca2:	4605      	mov	r5, r0
 8019ca4:	3a30      	subs	r2, #48	@ 0x30
 8019ca6:	f100 0301 	add.w	r3, r0, #1
 8019caa:	d02a      	beq.n	8019d02 <_strtod_l+0x262>
 8019cac:	4499      	add	r9, r3
 8019cae:	eb00 0c05 	add.w	ip, r0, r5
 8019cb2:	462b      	mov	r3, r5
 8019cb4:	210a      	movs	r1, #10
 8019cb6:	4563      	cmp	r3, ip
 8019cb8:	d10d      	bne.n	8019cd6 <_strtod_l+0x236>
 8019cba:	1c69      	adds	r1, r5, #1
 8019cbc:	4401      	add	r1, r0
 8019cbe:	4428      	add	r0, r5
 8019cc0:	2808      	cmp	r0, #8
 8019cc2:	dc16      	bgt.n	8019cf2 <_strtod_l+0x252>
 8019cc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019cc6:	230a      	movs	r3, #10
 8019cc8:	fb03 2300 	mla	r3, r3, r0, r2
 8019ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8019cce:	2300      	movs	r3, #0
 8019cd0:	e018      	b.n	8019d04 <_strtod_l+0x264>
 8019cd2:	4638      	mov	r0, r7
 8019cd4:	e7da      	b.n	8019c8c <_strtod_l+0x1ec>
 8019cd6:	2b08      	cmp	r3, #8
 8019cd8:	f103 0301 	add.w	r3, r3, #1
 8019cdc:	dc03      	bgt.n	8019ce6 <_strtod_l+0x246>
 8019cde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019ce0:	434e      	muls	r6, r1
 8019ce2:	960a      	str	r6, [sp, #40]	@ 0x28
 8019ce4:	e7e7      	b.n	8019cb6 <_strtod_l+0x216>
 8019ce6:	2b10      	cmp	r3, #16
 8019ce8:	bfde      	ittt	le
 8019cea:	9e08      	ldrle	r6, [sp, #32]
 8019cec:	434e      	mulle	r6, r1
 8019cee:	9608      	strle	r6, [sp, #32]
 8019cf0:	e7e1      	b.n	8019cb6 <_strtod_l+0x216>
 8019cf2:	280f      	cmp	r0, #15
 8019cf4:	dceb      	bgt.n	8019cce <_strtod_l+0x22e>
 8019cf6:	9808      	ldr	r0, [sp, #32]
 8019cf8:	230a      	movs	r3, #10
 8019cfa:	fb03 2300 	mla	r3, r3, r0, r2
 8019cfe:	9308      	str	r3, [sp, #32]
 8019d00:	e7e5      	b.n	8019cce <_strtod_l+0x22e>
 8019d02:	4629      	mov	r1, r5
 8019d04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d06:	1c50      	adds	r0, r2, #1
 8019d08:	9019      	str	r0, [sp, #100]	@ 0x64
 8019d0a:	7852      	ldrb	r2, [r2, #1]
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	460d      	mov	r5, r1
 8019d10:	e7b1      	b.n	8019c76 <_strtod_l+0x1d6>
 8019d12:	f04f 0900 	mov.w	r9, #0
 8019d16:	2301      	movs	r3, #1
 8019d18:	e77d      	b.n	8019c16 <_strtod_l+0x176>
 8019d1a:	f04f 0c00 	mov.w	ip, #0
 8019d1e:	1ca2      	adds	r2, r4, #2
 8019d20:	9219      	str	r2, [sp, #100]	@ 0x64
 8019d22:	78a2      	ldrb	r2, [r4, #2]
 8019d24:	e785      	b.n	8019c32 <_strtod_l+0x192>
 8019d26:	f04f 0c01 	mov.w	ip, #1
 8019d2a:	e7f8      	b.n	8019d1e <_strtod_l+0x27e>
 8019d2c:	08021f00 	.word	0x08021f00
 8019d30:	08021ee8 	.word	0x08021ee8
 8019d34:	7ff00000 	.word	0x7ff00000
 8019d38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d3a:	1c51      	adds	r1, r2, #1
 8019d3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8019d3e:	7852      	ldrb	r2, [r2, #1]
 8019d40:	2a30      	cmp	r2, #48	@ 0x30
 8019d42:	d0f9      	beq.n	8019d38 <_strtod_l+0x298>
 8019d44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8019d48:	2908      	cmp	r1, #8
 8019d4a:	f63f af78 	bhi.w	8019c3e <_strtod_l+0x19e>
 8019d4e:	3a30      	subs	r2, #48	@ 0x30
 8019d50:	920e      	str	r2, [sp, #56]	@ 0x38
 8019d52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8019d56:	f04f 080a 	mov.w	r8, #10
 8019d5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019d5c:	1c56      	adds	r6, r2, #1
 8019d5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8019d60:	7852      	ldrb	r2, [r2, #1]
 8019d62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019d66:	f1be 0f09 	cmp.w	lr, #9
 8019d6a:	d939      	bls.n	8019de0 <_strtod_l+0x340>
 8019d6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8019d6e:	1a76      	subs	r6, r6, r1
 8019d70:	2e08      	cmp	r6, #8
 8019d72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8019d76:	dc03      	bgt.n	8019d80 <_strtod_l+0x2e0>
 8019d78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019d7a:	4588      	cmp	r8, r1
 8019d7c:	bfa8      	it	ge
 8019d7e:	4688      	movge	r8, r1
 8019d80:	f1bc 0f00 	cmp.w	ip, #0
 8019d84:	d001      	beq.n	8019d8a <_strtod_l+0x2ea>
 8019d86:	f1c8 0800 	rsb	r8, r8, #0
 8019d8a:	2d00      	cmp	r5, #0
 8019d8c:	d14e      	bne.n	8019e2c <_strtod_l+0x38c>
 8019d8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019d90:	4308      	orrs	r0, r1
 8019d92:	f47f aebe 	bne.w	8019b12 <_strtod_l+0x72>
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	f47f aed6 	bne.w	8019b48 <_strtod_l+0xa8>
 8019d9c:	2a69      	cmp	r2, #105	@ 0x69
 8019d9e:	d028      	beq.n	8019df2 <_strtod_l+0x352>
 8019da0:	dc25      	bgt.n	8019dee <_strtod_l+0x34e>
 8019da2:	2a49      	cmp	r2, #73	@ 0x49
 8019da4:	d025      	beq.n	8019df2 <_strtod_l+0x352>
 8019da6:	2a4e      	cmp	r2, #78	@ 0x4e
 8019da8:	f47f aece 	bne.w	8019b48 <_strtod_l+0xa8>
 8019dac:	499b      	ldr	r1, [pc, #620]	@ (801a01c <_strtod_l+0x57c>)
 8019dae:	a819      	add	r0, sp, #100	@ 0x64
 8019db0:	f002 ff86 	bl	801ccc0 <__match>
 8019db4:	2800      	cmp	r0, #0
 8019db6:	f43f aec7 	beq.w	8019b48 <_strtod_l+0xa8>
 8019dba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019dbc:	781b      	ldrb	r3, [r3, #0]
 8019dbe:	2b28      	cmp	r3, #40	@ 0x28
 8019dc0:	d12e      	bne.n	8019e20 <_strtod_l+0x380>
 8019dc2:	4997      	ldr	r1, [pc, #604]	@ (801a020 <_strtod_l+0x580>)
 8019dc4:	aa1c      	add	r2, sp, #112	@ 0x70
 8019dc6:	a819      	add	r0, sp, #100	@ 0x64
 8019dc8:	f002 ff8e 	bl	801cce8 <__hexnan>
 8019dcc:	2805      	cmp	r0, #5
 8019dce:	d127      	bne.n	8019e20 <_strtod_l+0x380>
 8019dd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8019dd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8019dd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8019dda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8019dde:	e698      	b.n	8019b12 <_strtod_l+0x72>
 8019de0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019de2:	fb08 2101 	mla	r1, r8, r1, r2
 8019de6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8019dea:	920e      	str	r2, [sp, #56]	@ 0x38
 8019dec:	e7b5      	b.n	8019d5a <_strtod_l+0x2ba>
 8019dee:	2a6e      	cmp	r2, #110	@ 0x6e
 8019df0:	e7da      	b.n	8019da8 <_strtod_l+0x308>
 8019df2:	498c      	ldr	r1, [pc, #560]	@ (801a024 <_strtod_l+0x584>)
 8019df4:	a819      	add	r0, sp, #100	@ 0x64
 8019df6:	f002 ff63 	bl	801ccc0 <__match>
 8019dfa:	2800      	cmp	r0, #0
 8019dfc:	f43f aea4 	beq.w	8019b48 <_strtod_l+0xa8>
 8019e00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019e02:	4989      	ldr	r1, [pc, #548]	@ (801a028 <_strtod_l+0x588>)
 8019e04:	3b01      	subs	r3, #1
 8019e06:	a819      	add	r0, sp, #100	@ 0x64
 8019e08:	9319      	str	r3, [sp, #100]	@ 0x64
 8019e0a:	f002 ff59 	bl	801ccc0 <__match>
 8019e0e:	b910      	cbnz	r0, 8019e16 <_strtod_l+0x376>
 8019e10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019e12:	3301      	adds	r3, #1
 8019e14:	9319      	str	r3, [sp, #100]	@ 0x64
 8019e16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801a038 <_strtod_l+0x598>
 8019e1a:	f04f 0a00 	mov.w	sl, #0
 8019e1e:	e678      	b.n	8019b12 <_strtod_l+0x72>
 8019e20:	4882      	ldr	r0, [pc, #520]	@ (801a02c <_strtod_l+0x58c>)
 8019e22:	f001 fe01 	bl	801ba28 <nan>
 8019e26:	ec5b ab10 	vmov	sl, fp, d0
 8019e2a:	e672      	b.n	8019b12 <_strtod_l+0x72>
 8019e2c:	eba8 0309 	sub.w	r3, r8, r9
 8019e30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e34:	2f00      	cmp	r7, #0
 8019e36:	bf08      	it	eq
 8019e38:	462f      	moveq	r7, r5
 8019e3a:	2d10      	cmp	r5, #16
 8019e3c:	462c      	mov	r4, r5
 8019e3e:	bfa8      	it	ge
 8019e40:	2410      	movge	r4, #16
 8019e42:	f7e6 fb37 	bl	80004b4 <__aeabi_ui2d>
 8019e46:	2d09      	cmp	r5, #9
 8019e48:	4682      	mov	sl, r0
 8019e4a:	468b      	mov	fp, r1
 8019e4c:	dc13      	bgt.n	8019e76 <_strtod_l+0x3d6>
 8019e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	f43f ae5e 	beq.w	8019b12 <_strtod_l+0x72>
 8019e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e58:	dd78      	ble.n	8019f4c <_strtod_l+0x4ac>
 8019e5a:	2b16      	cmp	r3, #22
 8019e5c:	dc5f      	bgt.n	8019f1e <_strtod_l+0x47e>
 8019e5e:	4974      	ldr	r1, [pc, #464]	@ (801a030 <_strtod_l+0x590>)
 8019e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019e68:	4652      	mov	r2, sl
 8019e6a:	465b      	mov	r3, fp
 8019e6c:	f7e6 fb9c 	bl	80005a8 <__aeabi_dmul>
 8019e70:	4682      	mov	sl, r0
 8019e72:	468b      	mov	fp, r1
 8019e74:	e64d      	b.n	8019b12 <_strtod_l+0x72>
 8019e76:	4b6e      	ldr	r3, [pc, #440]	@ (801a030 <_strtod_l+0x590>)
 8019e78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019e7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8019e80:	f7e6 fb92 	bl	80005a8 <__aeabi_dmul>
 8019e84:	4682      	mov	sl, r0
 8019e86:	9808      	ldr	r0, [sp, #32]
 8019e88:	468b      	mov	fp, r1
 8019e8a:	f7e6 fb13 	bl	80004b4 <__aeabi_ui2d>
 8019e8e:	4602      	mov	r2, r0
 8019e90:	460b      	mov	r3, r1
 8019e92:	4650      	mov	r0, sl
 8019e94:	4659      	mov	r1, fp
 8019e96:	f7e6 f9d1 	bl	800023c <__adddf3>
 8019e9a:	2d0f      	cmp	r5, #15
 8019e9c:	4682      	mov	sl, r0
 8019e9e:	468b      	mov	fp, r1
 8019ea0:	ddd5      	ble.n	8019e4e <_strtod_l+0x3ae>
 8019ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ea4:	1b2c      	subs	r4, r5, r4
 8019ea6:	441c      	add	r4, r3
 8019ea8:	2c00      	cmp	r4, #0
 8019eaa:	f340 8096 	ble.w	8019fda <_strtod_l+0x53a>
 8019eae:	f014 030f 	ands.w	r3, r4, #15
 8019eb2:	d00a      	beq.n	8019eca <_strtod_l+0x42a>
 8019eb4:	495e      	ldr	r1, [pc, #376]	@ (801a030 <_strtod_l+0x590>)
 8019eb6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019eba:	4652      	mov	r2, sl
 8019ebc:	465b      	mov	r3, fp
 8019ebe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ec2:	f7e6 fb71 	bl	80005a8 <__aeabi_dmul>
 8019ec6:	4682      	mov	sl, r0
 8019ec8:	468b      	mov	fp, r1
 8019eca:	f034 040f 	bics.w	r4, r4, #15
 8019ece:	d073      	beq.n	8019fb8 <_strtod_l+0x518>
 8019ed0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8019ed4:	dd48      	ble.n	8019f68 <_strtod_l+0x4c8>
 8019ed6:	2400      	movs	r4, #0
 8019ed8:	46a0      	mov	r8, r4
 8019eda:	940a      	str	r4, [sp, #40]	@ 0x28
 8019edc:	46a1      	mov	r9, r4
 8019ede:	9a05      	ldr	r2, [sp, #20]
 8019ee0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801a038 <_strtod_l+0x598>
 8019ee4:	2322      	movs	r3, #34	@ 0x22
 8019ee6:	6013      	str	r3, [r2, #0]
 8019ee8:	f04f 0a00 	mov.w	sl, #0
 8019eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019eee:	2b00      	cmp	r3, #0
 8019ef0:	f43f ae0f 	beq.w	8019b12 <_strtod_l+0x72>
 8019ef4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8019ef6:	9805      	ldr	r0, [sp, #20]
 8019ef8:	f002 ffe4 	bl	801cec4 <_Bfree>
 8019efc:	9805      	ldr	r0, [sp, #20]
 8019efe:	4649      	mov	r1, r9
 8019f00:	f002 ffe0 	bl	801cec4 <_Bfree>
 8019f04:	9805      	ldr	r0, [sp, #20]
 8019f06:	4641      	mov	r1, r8
 8019f08:	f002 ffdc 	bl	801cec4 <_Bfree>
 8019f0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019f0e:	9805      	ldr	r0, [sp, #20]
 8019f10:	f002 ffd8 	bl	801cec4 <_Bfree>
 8019f14:	9805      	ldr	r0, [sp, #20]
 8019f16:	4621      	mov	r1, r4
 8019f18:	f002 ffd4 	bl	801cec4 <_Bfree>
 8019f1c:	e5f9      	b.n	8019b12 <_strtod_l+0x72>
 8019f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8019f24:	4293      	cmp	r3, r2
 8019f26:	dbbc      	blt.n	8019ea2 <_strtod_l+0x402>
 8019f28:	4c41      	ldr	r4, [pc, #260]	@ (801a030 <_strtod_l+0x590>)
 8019f2a:	f1c5 050f 	rsb	r5, r5, #15
 8019f2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8019f32:	4652      	mov	r2, sl
 8019f34:	465b      	mov	r3, fp
 8019f36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f3a:	f7e6 fb35 	bl	80005a8 <__aeabi_dmul>
 8019f3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f40:	1b5d      	subs	r5, r3, r5
 8019f42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8019f46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019f4a:	e78f      	b.n	8019e6c <_strtod_l+0x3cc>
 8019f4c:	3316      	adds	r3, #22
 8019f4e:	dba8      	blt.n	8019ea2 <_strtod_l+0x402>
 8019f50:	4b37      	ldr	r3, [pc, #220]	@ (801a030 <_strtod_l+0x590>)
 8019f52:	eba9 0808 	sub.w	r8, r9, r8
 8019f56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8019f5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8019f5e:	4650      	mov	r0, sl
 8019f60:	4659      	mov	r1, fp
 8019f62:	f7e6 fc4b 	bl	80007fc <__aeabi_ddiv>
 8019f66:	e783      	b.n	8019e70 <_strtod_l+0x3d0>
 8019f68:	4b32      	ldr	r3, [pc, #200]	@ (801a034 <_strtod_l+0x594>)
 8019f6a:	9308      	str	r3, [sp, #32]
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	1124      	asrs	r4, r4, #4
 8019f70:	4650      	mov	r0, sl
 8019f72:	4659      	mov	r1, fp
 8019f74:	461e      	mov	r6, r3
 8019f76:	2c01      	cmp	r4, #1
 8019f78:	dc21      	bgt.n	8019fbe <_strtod_l+0x51e>
 8019f7a:	b10b      	cbz	r3, 8019f80 <_strtod_l+0x4e0>
 8019f7c:	4682      	mov	sl, r0
 8019f7e:	468b      	mov	fp, r1
 8019f80:	492c      	ldr	r1, [pc, #176]	@ (801a034 <_strtod_l+0x594>)
 8019f82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8019f86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8019f8a:	4652      	mov	r2, sl
 8019f8c:	465b      	mov	r3, fp
 8019f8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f92:	f7e6 fb09 	bl	80005a8 <__aeabi_dmul>
 8019f96:	4b28      	ldr	r3, [pc, #160]	@ (801a038 <_strtod_l+0x598>)
 8019f98:	460a      	mov	r2, r1
 8019f9a:	400b      	ands	r3, r1
 8019f9c:	4927      	ldr	r1, [pc, #156]	@ (801a03c <_strtod_l+0x59c>)
 8019f9e:	428b      	cmp	r3, r1
 8019fa0:	4682      	mov	sl, r0
 8019fa2:	d898      	bhi.n	8019ed6 <_strtod_l+0x436>
 8019fa4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8019fa8:	428b      	cmp	r3, r1
 8019faa:	bf86      	itte	hi
 8019fac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801a040 <_strtod_l+0x5a0>
 8019fb0:	f04f 3aff 	movhi.w	sl, #4294967295
 8019fb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8019fb8:	2300      	movs	r3, #0
 8019fba:	9308      	str	r3, [sp, #32]
 8019fbc:	e07a      	b.n	801a0b4 <_strtod_l+0x614>
 8019fbe:	07e2      	lsls	r2, r4, #31
 8019fc0:	d505      	bpl.n	8019fce <_strtod_l+0x52e>
 8019fc2:	9b08      	ldr	r3, [sp, #32]
 8019fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fc8:	f7e6 faee 	bl	80005a8 <__aeabi_dmul>
 8019fcc:	2301      	movs	r3, #1
 8019fce:	9a08      	ldr	r2, [sp, #32]
 8019fd0:	3208      	adds	r2, #8
 8019fd2:	3601      	adds	r6, #1
 8019fd4:	1064      	asrs	r4, r4, #1
 8019fd6:	9208      	str	r2, [sp, #32]
 8019fd8:	e7cd      	b.n	8019f76 <_strtod_l+0x4d6>
 8019fda:	d0ed      	beq.n	8019fb8 <_strtod_l+0x518>
 8019fdc:	4264      	negs	r4, r4
 8019fde:	f014 020f 	ands.w	r2, r4, #15
 8019fe2:	d00a      	beq.n	8019ffa <_strtod_l+0x55a>
 8019fe4:	4b12      	ldr	r3, [pc, #72]	@ (801a030 <_strtod_l+0x590>)
 8019fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019fea:	4650      	mov	r0, sl
 8019fec:	4659      	mov	r1, fp
 8019fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ff2:	f7e6 fc03 	bl	80007fc <__aeabi_ddiv>
 8019ff6:	4682      	mov	sl, r0
 8019ff8:	468b      	mov	fp, r1
 8019ffa:	1124      	asrs	r4, r4, #4
 8019ffc:	d0dc      	beq.n	8019fb8 <_strtod_l+0x518>
 8019ffe:	2c1f      	cmp	r4, #31
 801a000:	dd20      	ble.n	801a044 <_strtod_l+0x5a4>
 801a002:	2400      	movs	r4, #0
 801a004:	46a0      	mov	r8, r4
 801a006:	940a      	str	r4, [sp, #40]	@ 0x28
 801a008:	46a1      	mov	r9, r4
 801a00a:	9a05      	ldr	r2, [sp, #20]
 801a00c:	2322      	movs	r3, #34	@ 0x22
 801a00e:	f04f 0a00 	mov.w	sl, #0
 801a012:	f04f 0b00 	mov.w	fp, #0
 801a016:	6013      	str	r3, [r2, #0]
 801a018:	e768      	b.n	8019eec <_strtod_l+0x44c>
 801a01a:	bf00      	nop
 801a01c:	0802204e 	.word	0x0802204e
 801a020:	08021eec 	.word	0x08021eec
 801a024:	08022046 	.word	0x08022046
 801a028:	08022132 	.word	0x08022132
 801a02c:	0802212e 	.word	0x0802212e
 801a030:	08022298 	.word	0x08022298
 801a034:	08022270 	.word	0x08022270
 801a038:	7ff00000 	.word	0x7ff00000
 801a03c:	7ca00000 	.word	0x7ca00000
 801a040:	7fefffff 	.word	0x7fefffff
 801a044:	f014 0310 	ands.w	r3, r4, #16
 801a048:	bf18      	it	ne
 801a04a:	236a      	movne	r3, #106	@ 0x6a
 801a04c:	4ea9      	ldr	r6, [pc, #676]	@ (801a2f4 <_strtod_l+0x854>)
 801a04e:	9308      	str	r3, [sp, #32]
 801a050:	4650      	mov	r0, sl
 801a052:	4659      	mov	r1, fp
 801a054:	2300      	movs	r3, #0
 801a056:	07e2      	lsls	r2, r4, #31
 801a058:	d504      	bpl.n	801a064 <_strtod_l+0x5c4>
 801a05a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801a05e:	f7e6 faa3 	bl	80005a8 <__aeabi_dmul>
 801a062:	2301      	movs	r3, #1
 801a064:	1064      	asrs	r4, r4, #1
 801a066:	f106 0608 	add.w	r6, r6, #8
 801a06a:	d1f4      	bne.n	801a056 <_strtod_l+0x5b6>
 801a06c:	b10b      	cbz	r3, 801a072 <_strtod_l+0x5d2>
 801a06e:	4682      	mov	sl, r0
 801a070:	468b      	mov	fp, r1
 801a072:	9b08      	ldr	r3, [sp, #32]
 801a074:	b1b3      	cbz	r3, 801a0a4 <_strtod_l+0x604>
 801a076:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801a07a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801a07e:	2b00      	cmp	r3, #0
 801a080:	4659      	mov	r1, fp
 801a082:	dd0f      	ble.n	801a0a4 <_strtod_l+0x604>
 801a084:	2b1f      	cmp	r3, #31
 801a086:	dd55      	ble.n	801a134 <_strtod_l+0x694>
 801a088:	2b34      	cmp	r3, #52	@ 0x34
 801a08a:	bfde      	ittt	le
 801a08c:	f04f 33ff 	movle.w	r3, #4294967295
 801a090:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801a094:	4093      	lslle	r3, r2
 801a096:	f04f 0a00 	mov.w	sl, #0
 801a09a:	bfcc      	ite	gt
 801a09c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801a0a0:	ea03 0b01 	andle.w	fp, r3, r1
 801a0a4:	2200      	movs	r2, #0
 801a0a6:	2300      	movs	r3, #0
 801a0a8:	4650      	mov	r0, sl
 801a0aa:	4659      	mov	r1, fp
 801a0ac:	f7e6 fce4 	bl	8000a78 <__aeabi_dcmpeq>
 801a0b0:	2800      	cmp	r0, #0
 801a0b2:	d1a6      	bne.n	801a002 <_strtod_l+0x562>
 801a0b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a0b6:	9300      	str	r3, [sp, #0]
 801a0b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801a0ba:	9805      	ldr	r0, [sp, #20]
 801a0bc:	462b      	mov	r3, r5
 801a0be:	463a      	mov	r2, r7
 801a0c0:	f002 ff68 	bl	801cf94 <__s2b>
 801a0c4:	900a      	str	r0, [sp, #40]	@ 0x28
 801a0c6:	2800      	cmp	r0, #0
 801a0c8:	f43f af05 	beq.w	8019ed6 <_strtod_l+0x436>
 801a0cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a0ce:	2a00      	cmp	r2, #0
 801a0d0:	eba9 0308 	sub.w	r3, r9, r8
 801a0d4:	bfa8      	it	ge
 801a0d6:	2300      	movge	r3, #0
 801a0d8:	9312      	str	r3, [sp, #72]	@ 0x48
 801a0da:	2400      	movs	r4, #0
 801a0dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a0e0:	9316      	str	r3, [sp, #88]	@ 0x58
 801a0e2:	46a0      	mov	r8, r4
 801a0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a0e6:	9805      	ldr	r0, [sp, #20]
 801a0e8:	6859      	ldr	r1, [r3, #4]
 801a0ea:	f002 feab 	bl	801ce44 <_Balloc>
 801a0ee:	4681      	mov	r9, r0
 801a0f0:	2800      	cmp	r0, #0
 801a0f2:	f43f aef4 	beq.w	8019ede <_strtod_l+0x43e>
 801a0f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a0f8:	691a      	ldr	r2, [r3, #16]
 801a0fa:	3202      	adds	r2, #2
 801a0fc:	f103 010c 	add.w	r1, r3, #12
 801a100:	0092      	lsls	r2, r2, #2
 801a102:	300c      	adds	r0, #12
 801a104:	f001 fc81 	bl	801ba0a <memcpy>
 801a108:	ec4b ab10 	vmov	d0, sl, fp
 801a10c:	9805      	ldr	r0, [sp, #20]
 801a10e:	aa1c      	add	r2, sp, #112	@ 0x70
 801a110:	a91b      	add	r1, sp, #108	@ 0x6c
 801a112:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801a116:	f003 fa79 	bl	801d60c <__d2b>
 801a11a:	901a      	str	r0, [sp, #104]	@ 0x68
 801a11c:	2800      	cmp	r0, #0
 801a11e:	f43f aede 	beq.w	8019ede <_strtod_l+0x43e>
 801a122:	9805      	ldr	r0, [sp, #20]
 801a124:	2101      	movs	r1, #1
 801a126:	f002 ffcb 	bl	801d0c0 <__i2b>
 801a12a:	4680      	mov	r8, r0
 801a12c:	b948      	cbnz	r0, 801a142 <_strtod_l+0x6a2>
 801a12e:	f04f 0800 	mov.w	r8, #0
 801a132:	e6d4      	b.n	8019ede <_strtod_l+0x43e>
 801a134:	f04f 32ff 	mov.w	r2, #4294967295
 801a138:	fa02 f303 	lsl.w	r3, r2, r3
 801a13c:	ea03 0a0a 	and.w	sl, r3, sl
 801a140:	e7b0      	b.n	801a0a4 <_strtod_l+0x604>
 801a142:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801a144:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801a146:	2d00      	cmp	r5, #0
 801a148:	bfab      	itete	ge
 801a14a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801a14c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801a14e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801a150:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801a152:	bfac      	ite	ge
 801a154:	18ef      	addge	r7, r5, r3
 801a156:	1b5e      	sublt	r6, r3, r5
 801a158:	9b08      	ldr	r3, [sp, #32]
 801a15a:	1aed      	subs	r5, r5, r3
 801a15c:	4415      	add	r5, r2
 801a15e:	4b66      	ldr	r3, [pc, #408]	@ (801a2f8 <_strtod_l+0x858>)
 801a160:	3d01      	subs	r5, #1
 801a162:	429d      	cmp	r5, r3
 801a164:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801a168:	da50      	bge.n	801a20c <_strtod_l+0x76c>
 801a16a:	1b5b      	subs	r3, r3, r5
 801a16c:	2b1f      	cmp	r3, #31
 801a16e:	eba2 0203 	sub.w	r2, r2, r3
 801a172:	f04f 0101 	mov.w	r1, #1
 801a176:	dc3d      	bgt.n	801a1f4 <_strtod_l+0x754>
 801a178:	fa01 f303 	lsl.w	r3, r1, r3
 801a17c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a17e:	2300      	movs	r3, #0
 801a180:	9310      	str	r3, [sp, #64]	@ 0x40
 801a182:	18bd      	adds	r5, r7, r2
 801a184:	9b08      	ldr	r3, [sp, #32]
 801a186:	42af      	cmp	r7, r5
 801a188:	4416      	add	r6, r2
 801a18a:	441e      	add	r6, r3
 801a18c:	463b      	mov	r3, r7
 801a18e:	bfa8      	it	ge
 801a190:	462b      	movge	r3, r5
 801a192:	42b3      	cmp	r3, r6
 801a194:	bfa8      	it	ge
 801a196:	4633      	movge	r3, r6
 801a198:	2b00      	cmp	r3, #0
 801a19a:	bfc2      	ittt	gt
 801a19c:	1aed      	subgt	r5, r5, r3
 801a19e:	1af6      	subgt	r6, r6, r3
 801a1a0:	1aff      	subgt	r7, r7, r3
 801a1a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	dd16      	ble.n	801a1d6 <_strtod_l+0x736>
 801a1a8:	4641      	mov	r1, r8
 801a1aa:	9805      	ldr	r0, [sp, #20]
 801a1ac:	461a      	mov	r2, r3
 801a1ae:	f003 f847 	bl	801d240 <__pow5mult>
 801a1b2:	4680      	mov	r8, r0
 801a1b4:	2800      	cmp	r0, #0
 801a1b6:	d0ba      	beq.n	801a12e <_strtod_l+0x68e>
 801a1b8:	4601      	mov	r1, r0
 801a1ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a1bc:	9805      	ldr	r0, [sp, #20]
 801a1be:	f002 ff95 	bl	801d0ec <__multiply>
 801a1c2:	900e      	str	r0, [sp, #56]	@ 0x38
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	f43f ae8a 	beq.w	8019ede <_strtod_l+0x43e>
 801a1ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a1cc:	9805      	ldr	r0, [sp, #20]
 801a1ce:	f002 fe79 	bl	801cec4 <_Bfree>
 801a1d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a1d4:	931a      	str	r3, [sp, #104]	@ 0x68
 801a1d6:	2d00      	cmp	r5, #0
 801a1d8:	dc1d      	bgt.n	801a216 <_strtod_l+0x776>
 801a1da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	dd23      	ble.n	801a228 <_strtod_l+0x788>
 801a1e0:	4649      	mov	r1, r9
 801a1e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a1e4:	9805      	ldr	r0, [sp, #20]
 801a1e6:	f003 f82b 	bl	801d240 <__pow5mult>
 801a1ea:	4681      	mov	r9, r0
 801a1ec:	b9e0      	cbnz	r0, 801a228 <_strtod_l+0x788>
 801a1ee:	f04f 0900 	mov.w	r9, #0
 801a1f2:	e674      	b.n	8019ede <_strtod_l+0x43e>
 801a1f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801a1f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801a1fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801a200:	35e2      	adds	r5, #226	@ 0xe2
 801a202:	fa01 f305 	lsl.w	r3, r1, r5
 801a206:	9310      	str	r3, [sp, #64]	@ 0x40
 801a208:	9113      	str	r1, [sp, #76]	@ 0x4c
 801a20a:	e7ba      	b.n	801a182 <_strtod_l+0x6e2>
 801a20c:	2300      	movs	r3, #0
 801a20e:	9310      	str	r3, [sp, #64]	@ 0x40
 801a210:	2301      	movs	r3, #1
 801a212:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a214:	e7b5      	b.n	801a182 <_strtod_l+0x6e2>
 801a216:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a218:	9805      	ldr	r0, [sp, #20]
 801a21a:	462a      	mov	r2, r5
 801a21c:	f003 f86a 	bl	801d2f4 <__lshift>
 801a220:	901a      	str	r0, [sp, #104]	@ 0x68
 801a222:	2800      	cmp	r0, #0
 801a224:	d1d9      	bne.n	801a1da <_strtod_l+0x73a>
 801a226:	e65a      	b.n	8019ede <_strtod_l+0x43e>
 801a228:	2e00      	cmp	r6, #0
 801a22a:	dd07      	ble.n	801a23c <_strtod_l+0x79c>
 801a22c:	4649      	mov	r1, r9
 801a22e:	9805      	ldr	r0, [sp, #20]
 801a230:	4632      	mov	r2, r6
 801a232:	f003 f85f 	bl	801d2f4 <__lshift>
 801a236:	4681      	mov	r9, r0
 801a238:	2800      	cmp	r0, #0
 801a23a:	d0d8      	beq.n	801a1ee <_strtod_l+0x74e>
 801a23c:	2f00      	cmp	r7, #0
 801a23e:	dd08      	ble.n	801a252 <_strtod_l+0x7b2>
 801a240:	4641      	mov	r1, r8
 801a242:	9805      	ldr	r0, [sp, #20]
 801a244:	463a      	mov	r2, r7
 801a246:	f003 f855 	bl	801d2f4 <__lshift>
 801a24a:	4680      	mov	r8, r0
 801a24c:	2800      	cmp	r0, #0
 801a24e:	f43f ae46 	beq.w	8019ede <_strtod_l+0x43e>
 801a252:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a254:	9805      	ldr	r0, [sp, #20]
 801a256:	464a      	mov	r2, r9
 801a258:	f003 f8d4 	bl	801d404 <__mdiff>
 801a25c:	4604      	mov	r4, r0
 801a25e:	2800      	cmp	r0, #0
 801a260:	f43f ae3d 	beq.w	8019ede <_strtod_l+0x43e>
 801a264:	68c3      	ldr	r3, [r0, #12]
 801a266:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a268:	2300      	movs	r3, #0
 801a26a:	60c3      	str	r3, [r0, #12]
 801a26c:	4641      	mov	r1, r8
 801a26e:	f003 f8ad 	bl	801d3cc <__mcmp>
 801a272:	2800      	cmp	r0, #0
 801a274:	da46      	bge.n	801a304 <_strtod_l+0x864>
 801a276:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a278:	ea53 030a 	orrs.w	r3, r3, sl
 801a27c:	d16c      	bne.n	801a358 <_strtod_l+0x8b8>
 801a27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a282:	2b00      	cmp	r3, #0
 801a284:	d168      	bne.n	801a358 <_strtod_l+0x8b8>
 801a286:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a28a:	0d1b      	lsrs	r3, r3, #20
 801a28c:	051b      	lsls	r3, r3, #20
 801a28e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a292:	d961      	bls.n	801a358 <_strtod_l+0x8b8>
 801a294:	6963      	ldr	r3, [r4, #20]
 801a296:	b913      	cbnz	r3, 801a29e <_strtod_l+0x7fe>
 801a298:	6923      	ldr	r3, [r4, #16]
 801a29a:	2b01      	cmp	r3, #1
 801a29c:	dd5c      	ble.n	801a358 <_strtod_l+0x8b8>
 801a29e:	4621      	mov	r1, r4
 801a2a0:	2201      	movs	r2, #1
 801a2a2:	9805      	ldr	r0, [sp, #20]
 801a2a4:	f003 f826 	bl	801d2f4 <__lshift>
 801a2a8:	4641      	mov	r1, r8
 801a2aa:	4604      	mov	r4, r0
 801a2ac:	f003 f88e 	bl	801d3cc <__mcmp>
 801a2b0:	2800      	cmp	r0, #0
 801a2b2:	dd51      	ble.n	801a358 <_strtod_l+0x8b8>
 801a2b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a2b8:	9a08      	ldr	r2, [sp, #32]
 801a2ba:	0d1b      	lsrs	r3, r3, #20
 801a2bc:	051b      	lsls	r3, r3, #20
 801a2be:	2a00      	cmp	r2, #0
 801a2c0:	d06b      	beq.n	801a39a <_strtod_l+0x8fa>
 801a2c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801a2c6:	d868      	bhi.n	801a39a <_strtod_l+0x8fa>
 801a2c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801a2cc:	f67f ae9d 	bls.w	801a00a <_strtod_l+0x56a>
 801a2d0:	4b0a      	ldr	r3, [pc, #40]	@ (801a2fc <_strtod_l+0x85c>)
 801a2d2:	4650      	mov	r0, sl
 801a2d4:	4659      	mov	r1, fp
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	f7e6 f966 	bl	80005a8 <__aeabi_dmul>
 801a2dc:	4b08      	ldr	r3, [pc, #32]	@ (801a300 <_strtod_l+0x860>)
 801a2de:	400b      	ands	r3, r1
 801a2e0:	4682      	mov	sl, r0
 801a2e2:	468b      	mov	fp, r1
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	f47f ae05 	bne.w	8019ef4 <_strtod_l+0x454>
 801a2ea:	9a05      	ldr	r2, [sp, #20]
 801a2ec:	2322      	movs	r3, #34	@ 0x22
 801a2ee:	6013      	str	r3, [r2, #0]
 801a2f0:	e600      	b.n	8019ef4 <_strtod_l+0x454>
 801a2f2:	bf00      	nop
 801a2f4:	08021f18 	.word	0x08021f18
 801a2f8:	fffffc02 	.word	0xfffffc02
 801a2fc:	39500000 	.word	0x39500000
 801a300:	7ff00000 	.word	0x7ff00000
 801a304:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a308:	d165      	bne.n	801a3d6 <_strtod_l+0x936>
 801a30a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801a30c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a310:	b35a      	cbz	r2, 801a36a <_strtod_l+0x8ca>
 801a312:	4a9f      	ldr	r2, [pc, #636]	@ (801a590 <_strtod_l+0xaf0>)
 801a314:	4293      	cmp	r3, r2
 801a316:	d12b      	bne.n	801a370 <_strtod_l+0x8d0>
 801a318:	9b08      	ldr	r3, [sp, #32]
 801a31a:	4651      	mov	r1, sl
 801a31c:	b303      	cbz	r3, 801a360 <_strtod_l+0x8c0>
 801a31e:	4b9d      	ldr	r3, [pc, #628]	@ (801a594 <_strtod_l+0xaf4>)
 801a320:	465a      	mov	r2, fp
 801a322:	4013      	ands	r3, r2
 801a324:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801a328:	f04f 32ff 	mov.w	r2, #4294967295
 801a32c:	d81b      	bhi.n	801a366 <_strtod_l+0x8c6>
 801a32e:	0d1b      	lsrs	r3, r3, #20
 801a330:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801a334:	fa02 f303 	lsl.w	r3, r2, r3
 801a338:	4299      	cmp	r1, r3
 801a33a:	d119      	bne.n	801a370 <_strtod_l+0x8d0>
 801a33c:	4b96      	ldr	r3, [pc, #600]	@ (801a598 <_strtod_l+0xaf8>)
 801a33e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a340:	429a      	cmp	r2, r3
 801a342:	d102      	bne.n	801a34a <_strtod_l+0x8aa>
 801a344:	3101      	adds	r1, #1
 801a346:	f43f adca 	beq.w	8019ede <_strtod_l+0x43e>
 801a34a:	4b92      	ldr	r3, [pc, #584]	@ (801a594 <_strtod_l+0xaf4>)
 801a34c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a34e:	401a      	ands	r2, r3
 801a350:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801a354:	f04f 0a00 	mov.w	sl, #0
 801a358:	9b08      	ldr	r3, [sp, #32]
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	d1b8      	bne.n	801a2d0 <_strtod_l+0x830>
 801a35e:	e5c9      	b.n	8019ef4 <_strtod_l+0x454>
 801a360:	f04f 33ff 	mov.w	r3, #4294967295
 801a364:	e7e8      	b.n	801a338 <_strtod_l+0x898>
 801a366:	4613      	mov	r3, r2
 801a368:	e7e6      	b.n	801a338 <_strtod_l+0x898>
 801a36a:	ea53 030a 	orrs.w	r3, r3, sl
 801a36e:	d0a1      	beq.n	801a2b4 <_strtod_l+0x814>
 801a370:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a372:	b1db      	cbz	r3, 801a3ac <_strtod_l+0x90c>
 801a374:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a376:	4213      	tst	r3, r2
 801a378:	d0ee      	beq.n	801a358 <_strtod_l+0x8b8>
 801a37a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a37c:	9a08      	ldr	r2, [sp, #32]
 801a37e:	4650      	mov	r0, sl
 801a380:	4659      	mov	r1, fp
 801a382:	b1bb      	cbz	r3, 801a3b4 <_strtod_l+0x914>
 801a384:	f7ff fb6e 	bl	8019a64 <sulp>
 801a388:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a38c:	ec53 2b10 	vmov	r2, r3, d0
 801a390:	f7e5 ff54 	bl	800023c <__adddf3>
 801a394:	4682      	mov	sl, r0
 801a396:	468b      	mov	fp, r1
 801a398:	e7de      	b.n	801a358 <_strtod_l+0x8b8>
 801a39a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801a39e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a3a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a3a6:	f04f 3aff 	mov.w	sl, #4294967295
 801a3aa:	e7d5      	b.n	801a358 <_strtod_l+0x8b8>
 801a3ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a3ae:	ea13 0f0a 	tst.w	r3, sl
 801a3b2:	e7e1      	b.n	801a378 <_strtod_l+0x8d8>
 801a3b4:	f7ff fb56 	bl	8019a64 <sulp>
 801a3b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a3bc:	ec53 2b10 	vmov	r2, r3, d0
 801a3c0:	f7e5 ff3a 	bl	8000238 <__aeabi_dsub>
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	4682      	mov	sl, r0
 801a3ca:	468b      	mov	fp, r1
 801a3cc:	f7e6 fb54 	bl	8000a78 <__aeabi_dcmpeq>
 801a3d0:	2800      	cmp	r0, #0
 801a3d2:	d0c1      	beq.n	801a358 <_strtod_l+0x8b8>
 801a3d4:	e619      	b.n	801a00a <_strtod_l+0x56a>
 801a3d6:	4641      	mov	r1, r8
 801a3d8:	4620      	mov	r0, r4
 801a3da:	f003 f96f 	bl	801d6bc <__ratio>
 801a3de:	ec57 6b10 	vmov	r6, r7, d0
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a3e8:	4630      	mov	r0, r6
 801a3ea:	4639      	mov	r1, r7
 801a3ec:	f7e6 fb58 	bl	8000aa0 <__aeabi_dcmple>
 801a3f0:	2800      	cmp	r0, #0
 801a3f2:	d06f      	beq.n	801a4d4 <_strtod_l+0xa34>
 801a3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d17a      	bne.n	801a4f0 <_strtod_l+0xa50>
 801a3fa:	f1ba 0f00 	cmp.w	sl, #0
 801a3fe:	d158      	bne.n	801a4b2 <_strtod_l+0xa12>
 801a400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a402:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a406:	2b00      	cmp	r3, #0
 801a408:	d15a      	bne.n	801a4c0 <_strtod_l+0xa20>
 801a40a:	4b64      	ldr	r3, [pc, #400]	@ (801a59c <_strtod_l+0xafc>)
 801a40c:	2200      	movs	r2, #0
 801a40e:	4630      	mov	r0, r6
 801a410:	4639      	mov	r1, r7
 801a412:	f7e6 fb3b 	bl	8000a8c <__aeabi_dcmplt>
 801a416:	2800      	cmp	r0, #0
 801a418:	d159      	bne.n	801a4ce <_strtod_l+0xa2e>
 801a41a:	4630      	mov	r0, r6
 801a41c:	4639      	mov	r1, r7
 801a41e:	4b60      	ldr	r3, [pc, #384]	@ (801a5a0 <_strtod_l+0xb00>)
 801a420:	2200      	movs	r2, #0
 801a422:	f7e6 f8c1 	bl	80005a8 <__aeabi_dmul>
 801a426:	4606      	mov	r6, r0
 801a428:	460f      	mov	r7, r1
 801a42a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801a42e:	9606      	str	r6, [sp, #24]
 801a430:	9307      	str	r3, [sp, #28]
 801a432:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a436:	4d57      	ldr	r5, [pc, #348]	@ (801a594 <_strtod_l+0xaf4>)
 801a438:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a43c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a43e:	401d      	ands	r5, r3
 801a440:	4b58      	ldr	r3, [pc, #352]	@ (801a5a4 <_strtod_l+0xb04>)
 801a442:	429d      	cmp	r5, r3
 801a444:	f040 80b2 	bne.w	801a5ac <_strtod_l+0xb0c>
 801a448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a44a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801a44e:	ec4b ab10 	vmov	d0, sl, fp
 801a452:	f003 f86b 	bl	801d52c <__ulp>
 801a456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a45a:	ec51 0b10 	vmov	r0, r1, d0
 801a45e:	f7e6 f8a3 	bl	80005a8 <__aeabi_dmul>
 801a462:	4652      	mov	r2, sl
 801a464:	465b      	mov	r3, fp
 801a466:	f7e5 fee9 	bl	800023c <__adddf3>
 801a46a:	460b      	mov	r3, r1
 801a46c:	4949      	ldr	r1, [pc, #292]	@ (801a594 <_strtod_l+0xaf4>)
 801a46e:	4a4e      	ldr	r2, [pc, #312]	@ (801a5a8 <_strtod_l+0xb08>)
 801a470:	4019      	ands	r1, r3
 801a472:	4291      	cmp	r1, r2
 801a474:	4682      	mov	sl, r0
 801a476:	d942      	bls.n	801a4fe <_strtod_l+0xa5e>
 801a478:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a47a:	4b47      	ldr	r3, [pc, #284]	@ (801a598 <_strtod_l+0xaf8>)
 801a47c:	429a      	cmp	r2, r3
 801a47e:	d103      	bne.n	801a488 <_strtod_l+0x9e8>
 801a480:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a482:	3301      	adds	r3, #1
 801a484:	f43f ad2b 	beq.w	8019ede <_strtod_l+0x43e>
 801a488:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801a598 <_strtod_l+0xaf8>
 801a48c:	f04f 3aff 	mov.w	sl, #4294967295
 801a490:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801a492:	9805      	ldr	r0, [sp, #20]
 801a494:	f002 fd16 	bl	801cec4 <_Bfree>
 801a498:	9805      	ldr	r0, [sp, #20]
 801a49a:	4649      	mov	r1, r9
 801a49c:	f002 fd12 	bl	801cec4 <_Bfree>
 801a4a0:	9805      	ldr	r0, [sp, #20]
 801a4a2:	4641      	mov	r1, r8
 801a4a4:	f002 fd0e 	bl	801cec4 <_Bfree>
 801a4a8:	9805      	ldr	r0, [sp, #20]
 801a4aa:	4621      	mov	r1, r4
 801a4ac:	f002 fd0a 	bl	801cec4 <_Bfree>
 801a4b0:	e618      	b.n	801a0e4 <_strtod_l+0x644>
 801a4b2:	f1ba 0f01 	cmp.w	sl, #1
 801a4b6:	d103      	bne.n	801a4c0 <_strtod_l+0xa20>
 801a4b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	f43f ada5 	beq.w	801a00a <_strtod_l+0x56a>
 801a4c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801a570 <_strtod_l+0xad0>
 801a4c4:	4f35      	ldr	r7, [pc, #212]	@ (801a59c <_strtod_l+0xafc>)
 801a4c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a4ca:	2600      	movs	r6, #0
 801a4cc:	e7b1      	b.n	801a432 <_strtod_l+0x992>
 801a4ce:	4f34      	ldr	r7, [pc, #208]	@ (801a5a0 <_strtod_l+0xb00>)
 801a4d0:	2600      	movs	r6, #0
 801a4d2:	e7aa      	b.n	801a42a <_strtod_l+0x98a>
 801a4d4:	4b32      	ldr	r3, [pc, #200]	@ (801a5a0 <_strtod_l+0xb00>)
 801a4d6:	4630      	mov	r0, r6
 801a4d8:	4639      	mov	r1, r7
 801a4da:	2200      	movs	r2, #0
 801a4dc:	f7e6 f864 	bl	80005a8 <__aeabi_dmul>
 801a4e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a4e2:	4606      	mov	r6, r0
 801a4e4:	460f      	mov	r7, r1
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d09f      	beq.n	801a42a <_strtod_l+0x98a>
 801a4ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801a4ee:	e7a0      	b.n	801a432 <_strtod_l+0x992>
 801a4f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801a578 <_strtod_l+0xad8>
 801a4f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 801a4f8:	ec57 6b17 	vmov	r6, r7, d7
 801a4fc:	e799      	b.n	801a432 <_strtod_l+0x992>
 801a4fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801a502:	9b08      	ldr	r3, [sp, #32]
 801a504:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d1c1      	bne.n	801a490 <_strtod_l+0x9f0>
 801a50c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801a510:	0d1b      	lsrs	r3, r3, #20
 801a512:	051b      	lsls	r3, r3, #20
 801a514:	429d      	cmp	r5, r3
 801a516:	d1bb      	bne.n	801a490 <_strtod_l+0x9f0>
 801a518:	4630      	mov	r0, r6
 801a51a:	4639      	mov	r1, r7
 801a51c:	f7e6 fba4 	bl	8000c68 <__aeabi_d2lz>
 801a520:	f7e6 f814 	bl	800054c <__aeabi_l2d>
 801a524:	4602      	mov	r2, r0
 801a526:	460b      	mov	r3, r1
 801a528:	4630      	mov	r0, r6
 801a52a:	4639      	mov	r1, r7
 801a52c:	f7e5 fe84 	bl	8000238 <__aeabi_dsub>
 801a530:	460b      	mov	r3, r1
 801a532:	4602      	mov	r2, r0
 801a534:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801a538:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801a53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a53e:	ea46 060a 	orr.w	r6, r6, sl
 801a542:	431e      	orrs	r6, r3
 801a544:	d06f      	beq.n	801a626 <_strtod_l+0xb86>
 801a546:	a30e      	add	r3, pc, #56	@ (adr r3, 801a580 <_strtod_l+0xae0>)
 801a548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a54c:	f7e6 fa9e 	bl	8000a8c <__aeabi_dcmplt>
 801a550:	2800      	cmp	r0, #0
 801a552:	f47f accf 	bne.w	8019ef4 <_strtod_l+0x454>
 801a556:	a30c      	add	r3, pc, #48	@ (adr r3, 801a588 <_strtod_l+0xae8>)
 801a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801a560:	f7e6 fab2 	bl	8000ac8 <__aeabi_dcmpgt>
 801a564:	2800      	cmp	r0, #0
 801a566:	d093      	beq.n	801a490 <_strtod_l+0x9f0>
 801a568:	e4c4      	b.n	8019ef4 <_strtod_l+0x454>
 801a56a:	bf00      	nop
 801a56c:	f3af 8000 	nop.w
 801a570:	00000000 	.word	0x00000000
 801a574:	bff00000 	.word	0xbff00000
 801a578:	00000000 	.word	0x00000000
 801a57c:	3ff00000 	.word	0x3ff00000
 801a580:	94a03595 	.word	0x94a03595
 801a584:	3fdfffff 	.word	0x3fdfffff
 801a588:	35afe535 	.word	0x35afe535
 801a58c:	3fe00000 	.word	0x3fe00000
 801a590:	000fffff 	.word	0x000fffff
 801a594:	7ff00000 	.word	0x7ff00000
 801a598:	7fefffff 	.word	0x7fefffff
 801a59c:	3ff00000 	.word	0x3ff00000
 801a5a0:	3fe00000 	.word	0x3fe00000
 801a5a4:	7fe00000 	.word	0x7fe00000
 801a5a8:	7c9fffff 	.word	0x7c9fffff
 801a5ac:	9b08      	ldr	r3, [sp, #32]
 801a5ae:	b323      	cbz	r3, 801a5fa <_strtod_l+0xb5a>
 801a5b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801a5b4:	d821      	bhi.n	801a5fa <_strtod_l+0xb5a>
 801a5b6:	a328      	add	r3, pc, #160	@ (adr r3, 801a658 <_strtod_l+0xbb8>)
 801a5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5bc:	4630      	mov	r0, r6
 801a5be:	4639      	mov	r1, r7
 801a5c0:	f7e6 fa6e 	bl	8000aa0 <__aeabi_dcmple>
 801a5c4:	b1a0      	cbz	r0, 801a5f0 <_strtod_l+0xb50>
 801a5c6:	4639      	mov	r1, r7
 801a5c8:	4630      	mov	r0, r6
 801a5ca:	f7e6 fac5 	bl	8000b58 <__aeabi_d2uiz>
 801a5ce:	2801      	cmp	r0, #1
 801a5d0:	bf38      	it	cc
 801a5d2:	2001      	movcc	r0, #1
 801a5d4:	f7e5 ff6e 	bl	80004b4 <__aeabi_ui2d>
 801a5d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a5da:	4606      	mov	r6, r0
 801a5dc:	460f      	mov	r7, r1
 801a5de:	b9fb      	cbnz	r3, 801a620 <_strtod_l+0xb80>
 801a5e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a5e4:	9014      	str	r0, [sp, #80]	@ 0x50
 801a5e6:	9315      	str	r3, [sp, #84]	@ 0x54
 801a5e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801a5ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801a5f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a5f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801a5f6:	1b5b      	subs	r3, r3, r5
 801a5f8:	9311      	str	r3, [sp, #68]	@ 0x44
 801a5fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801a5fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801a602:	f002 ff93 	bl	801d52c <__ulp>
 801a606:	4650      	mov	r0, sl
 801a608:	ec53 2b10 	vmov	r2, r3, d0
 801a60c:	4659      	mov	r1, fp
 801a60e:	f7e5 ffcb 	bl	80005a8 <__aeabi_dmul>
 801a612:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801a616:	f7e5 fe11 	bl	800023c <__adddf3>
 801a61a:	4682      	mov	sl, r0
 801a61c:	468b      	mov	fp, r1
 801a61e:	e770      	b.n	801a502 <_strtod_l+0xa62>
 801a620:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801a624:	e7e0      	b.n	801a5e8 <_strtod_l+0xb48>
 801a626:	a30e      	add	r3, pc, #56	@ (adr r3, 801a660 <_strtod_l+0xbc0>)
 801a628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a62c:	f7e6 fa2e 	bl	8000a8c <__aeabi_dcmplt>
 801a630:	e798      	b.n	801a564 <_strtod_l+0xac4>
 801a632:	2300      	movs	r3, #0
 801a634:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a636:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a638:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a63a:	6013      	str	r3, [r2, #0]
 801a63c:	f7ff ba6d 	b.w	8019b1a <_strtod_l+0x7a>
 801a640:	2a65      	cmp	r2, #101	@ 0x65
 801a642:	f43f ab66 	beq.w	8019d12 <_strtod_l+0x272>
 801a646:	2a45      	cmp	r2, #69	@ 0x45
 801a648:	f43f ab63 	beq.w	8019d12 <_strtod_l+0x272>
 801a64c:	2301      	movs	r3, #1
 801a64e:	f7ff bb9e 	b.w	8019d8e <_strtod_l+0x2ee>
 801a652:	bf00      	nop
 801a654:	f3af 8000 	nop.w
 801a658:	ffc00000 	.word	0xffc00000
 801a65c:	41dfffff 	.word	0x41dfffff
 801a660:	94a03595 	.word	0x94a03595
 801a664:	3fcfffff 	.word	0x3fcfffff

0801a668 <_strtod_r>:
 801a668:	4b01      	ldr	r3, [pc, #4]	@ (801a670 <_strtod_r+0x8>)
 801a66a:	f7ff ba19 	b.w	8019aa0 <_strtod_l>
 801a66e:	bf00      	nop
 801a670:	20000154 	.word	0x20000154

0801a674 <strtof>:
 801a674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a678:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 801a738 <strtof+0xc4>
 801a67c:	4b29      	ldr	r3, [pc, #164]	@ (801a724 <strtof+0xb0>)
 801a67e:	460a      	mov	r2, r1
 801a680:	ed2d 8b02 	vpush	{d8}
 801a684:	4601      	mov	r1, r0
 801a686:	f8d8 0000 	ldr.w	r0, [r8]
 801a68a:	f7ff fa09 	bl	8019aa0 <_strtod_l>
 801a68e:	ec55 4b10 	vmov	r4, r5, d0
 801a692:	4622      	mov	r2, r4
 801a694:	462b      	mov	r3, r5
 801a696:	4620      	mov	r0, r4
 801a698:	4629      	mov	r1, r5
 801a69a:	f7e6 fa1f 	bl	8000adc <__aeabi_dcmpun>
 801a69e:	b190      	cbz	r0, 801a6c6 <strtof+0x52>
 801a6a0:	2d00      	cmp	r5, #0
 801a6a2:	4821      	ldr	r0, [pc, #132]	@ (801a728 <strtof+0xb4>)
 801a6a4:	da09      	bge.n	801a6ba <strtof+0x46>
 801a6a6:	f001 f9c7 	bl	801ba38 <nanf>
 801a6aa:	eeb1 8a40 	vneg.f32	s16, s0
 801a6ae:	eeb0 0a48 	vmov.f32	s0, s16
 801a6b2:	ecbd 8b02 	vpop	{d8}
 801a6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6ba:	ecbd 8b02 	vpop	{d8}
 801a6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a6c2:	f001 b9b9 	b.w	801ba38 <nanf>
 801a6c6:	4620      	mov	r0, r4
 801a6c8:	4629      	mov	r1, r5
 801a6ca:	f7e6 fa65 	bl	8000b98 <__aeabi_d2f>
 801a6ce:	ee08 0a10 	vmov	s16, r0
 801a6d2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 801a72c <strtof+0xb8>
 801a6d6:	eeb0 7ac8 	vabs.f32	s14, s16
 801a6da:	eeb4 7a67 	vcmp.f32	s14, s15
 801a6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6e2:	dd11      	ble.n	801a708 <strtof+0x94>
 801a6e4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 801a6e8:	4b11      	ldr	r3, [pc, #68]	@ (801a730 <strtof+0xbc>)
 801a6ea:	f04f 32ff 	mov.w	r2, #4294967295
 801a6ee:	4620      	mov	r0, r4
 801a6f0:	4639      	mov	r1, r7
 801a6f2:	f7e6 f9f3 	bl	8000adc <__aeabi_dcmpun>
 801a6f6:	b980      	cbnz	r0, 801a71a <strtof+0xa6>
 801a6f8:	4b0d      	ldr	r3, [pc, #52]	@ (801a730 <strtof+0xbc>)
 801a6fa:	f04f 32ff 	mov.w	r2, #4294967295
 801a6fe:	4620      	mov	r0, r4
 801a700:	4639      	mov	r1, r7
 801a702:	f7e6 f9cd 	bl	8000aa0 <__aeabi_dcmple>
 801a706:	b940      	cbnz	r0, 801a71a <strtof+0xa6>
 801a708:	ee18 3a10 	vmov	r3, s16
 801a70c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a710:	d1cd      	bne.n	801a6ae <strtof+0x3a>
 801a712:	4b08      	ldr	r3, [pc, #32]	@ (801a734 <strtof+0xc0>)
 801a714:	402b      	ands	r3, r5
 801a716:	2b00      	cmp	r3, #0
 801a718:	d0c9      	beq.n	801a6ae <strtof+0x3a>
 801a71a:	f8d8 3000 	ldr.w	r3, [r8]
 801a71e:	2222      	movs	r2, #34	@ 0x22
 801a720:	601a      	str	r2, [r3, #0]
 801a722:	e7c4      	b.n	801a6ae <strtof+0x3a>
 801a724:	20000154 	.word	0x20000154
 801a728:	0802212e 	.word	0x0802212e
 801a72c:	7f7fffff 	.word	0x7f7fffff
 801a730:	7fefffff 	.word	0x7fefffff
 801a734:	7ff00000 	.word	0x7ff00000
 801a738:	200002c0 	.word	0x200002c0

0801a73c <_strtol_l.constprop.0>:
 801a73c:	2b24      	cmp	r3, #36	@ 0x24
 801a73e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a742:	4686      	mov	lr, r0
 801a744:	4690      	mov	r8, r2
 801a746:	d801      	bhi.n	801a74c <_strtol_l.constprop.0+0x10>
 801a748:	2b01      	cmp	r3, #1
 801a74a:	d106      	bne.n	801a75a <_strtol_l.constprop.0+0x1e>
 801a74c:	f001 f928 	bl	801b9a0 <__errno>
 801a750:	2316      	movs	r3, #22
 801a752:	6003      	str	r3, [r0, #0]
 801a754:	2000      	movs	r0, #0
 801a756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a75a:	4834      	ldr	r0, [pc, #208]	@ (801a82c <_strtol_l.constprop.0+0xf0>)
 801a75c:	460d      	mov	r5, r1
 801a75e:	462a      	mov	r2, r5
 801a760:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a764:	5d06      	ldrb	r6, [r0, r4]
 801a766:	f016 0608 	ands.w	r6, r6, #8
 801a76a:	d1f8      	bne.n	801a75e <_strtol_l.constprop.0+0x22>
 801a76c:	2c2d      	cmp	r4, #45	@ 0x2d
 801a76e:	d12d      	bne.n	801a7cc <_strtol_l.constprop.0+0x90>
 801a770:	782c      	ldrb	r4, [r5, #0]
 801a772:	2601      	movs	r6, #1
 801a774:	1c95      	adds	r5, r2, #2
 801a776:	f033 0210 	bics.w	r2, r3, #16
 801a77a:	d109      	bne.n	801a790 <_strtol_l.constprop.0+0x54>
 801a77c:	2c30      	cmp	r4, #48	@ 0x30
 801a77e:	d12a      	bne.n	801a7d6 <_strtol_l.constprop.0+0x9a>
 801a780:	782a      	ldrb	r2, [r5, #0]
 801a782:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801a786:	2a58      	cmp	r2, #88	@ 0x58
 801a788:	d125      	bne.n	801a7d6 <_strtol_l.constprop.0+0x9a>
 801a78a:	786c      	ldrb	r4, [r5, #1]
 801a78c:	2310      	movs	r3, #16
 801a78e:	3502      	adds	r5, #2
 801a790:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801a794:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a798:	2200      	movs	r2, #0
 801a79a:	fbbc f9f3 	udiv	r9, ip, r3
 801a79e:	4610      	mov	r0, r2
 801a7a0:	fb03 ca19 	mls	sl, r3, r9, ip
 801a7a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801a7a8:	2f09      	cmp	r7, #9
 801a7aa:	d81b      	bhi.n	801a7e4 <_strtol_l.constprop.0+0xa8>
 801a7ac:	463c      	mov	r4, r7
 801a7ae:	42a3      	cmp	r3, r4
 801a7b0:	dd27      	ble.n	801a802 <_strtol_l.constprop.0+0xc6>
 801a7b2:	1c57      	adds	r7, r2, #1
 801a7b4:	d007      	beq.n	801a7c6 <_strtol_l.constprop.0+0x8a>
 801a7b6:	4581      	cmp	r9, r0
 801a7b8:	d320      	bcc.n	801a7fc <_strtol_l.constprop.0+0xc0>
 801a7ba:	d101      	bne.n	801a7c0 <_strtol_l.constprop.0+0x84>
 801a7bc:	45a2      	cmp	sl, r4
 801a7be:	db1d      	blt.n	801a7fc <_strtol_l.constprop.0+0xc0>
 801a7c0:	fb00 4003 	mla	r0, r0, r3, r4
 801a7c4:	2201      	movs	r2, #1
 801a7c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a7ca:	e7eb      	b.n	801a7a4 <_strtol_l.constprop.0+0x68>
 801a7cc:	2c2b      	cmp	r4, #43	@ 0x2b
 801a7ce:	bf04      	itt	eq
 801a7d0:	782c      	ldrbeq	r4, [r5, #0]
 801a7d2:	1c95      	addeq	r5, r2, #2
 801a7d4:	e7cf      	b.n	801a776 <_strtol_l.constprop.0+0x3a>
 801a7d6:	2b00      	cmp	r3, #0
 801a7d8:	d1da      	bne.n	801a790 <_strtol_l.constprop.0+0x54>
 801a7da:	2c30      	cmp	r4, #48	@ 0x30
 801a7dc:	bf0c      	ite	eq
 801a7de:	2308      	moveq	r3, #8
 801a7e0:	230a      	movne	r3, #10
 801a7e2:	e7d5      	b.n	801a790 <_strtol_l.constprop.0+0x54>
 801a7e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801a7e8:	2f19      	cmp	r7, #25
 801a7ea:	d801      	bhi.n	801a7f0 <_strtol_l.constprop.0+0xb4>
 801a7ec:	3c37      	subs	r4, #55	@ 0x37
 801a7ee:	e7de      	b.n	801a7ae <_strtol_l.constprop.0+0x72>
 801a7f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801a7f4:	2f19      	cmp	r7, #25
 801a7f6:	d804      	bhi.n	801a802 <_strtol_l.constprop.0+0xc6>
 801a7f8:	3c57      	subs	r4, #87	@ 0x57
 801a7fa:	e7d8      	b.n	801a7ae <_strtol_l.constprop.0+0x72>
 801a7fc:	f04f 32ff 	mov.w	r2, #4294967295
 801a800:	e7e1      	b.n	801a7c6 <_strtol_l.constprop.0+0x8a>
 801a802:	1c53      	adds	r3, r2, #1
 801a804:	d108      	bne.n	801a818 <_strtol_l.constprop.0+0xdc>
 801a806:	2322      	movs	r3, #34	@ 0x22
 801a808:	f8ce 3000 	str.w	r3, [lr]
 801a80c:	4660      	mov	r0, ip
 801a80e:	f1b8 0f00 	cmp.w	r8, #0
 801a812:	d0a0      	beq.n	801a756 <_strtol_l.constprop.0+0x1a>
 801a814:	1e69      	subs	r1, r5, #1
 801a816:	e006      	b.n	801a826 <_strtol_l.constprop.0+0xea>
 801a818:	b106      	cbz	r6, 801a81c <_strtol_l.constprop.0+0xe0>
 801a81a:	4240      	negs	r0, r0
 801a81c:	f1b8 0f00 	cmp.w	r8, #0
 801a820:	d099      	beq.n	801a756 <_strtol_l.constprop.0+0x1a>
 801a822:	2a00      	cmp	r2, #0
 801a824:	d1f6      	bne.n	801a814 <_strtol_l.constprop.0+0xd8>
 801a826:	f8c8 1000 	str.w	r1, [r8]
 801a82a:	e794      	b.n	801a756 <_strtol_l.constprop.0+0x1a>
 801a82c:	08021f41 	.word	0x08021f41

0801a830 <_strtol_r>:
 801a830:	f7ff bf84 	b.w	801a73c <_strtol_l.constprop.0>

0801a834 <strtol>:
 801a834:	4613      	mov	r3, r2
 801a836:	460a      	mov	r2, r1
 801a838:	4601      	mov	r1, r0
 801a83a:	4802      	ldr	r0, [pc, #8]	@ (801a844 <strtol+0x10>)
 801a83c:	6800      	ldr	r0, [r0, #0]
 801a83e:	f7ff bf7d 	b.w	801a73c <_strtol_l.constprop.0>
 801a842:	bf00      	nop
 801a844:	200002c0 	.word	0x200002c0

0801a848 <__cvt>:
 801a848:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a84c:	ec57 6b10 	vmov	r6, r7, d0
 801a850:	2f00      	cmp	r7, #0
 801a852:	460c      	mov	r4, r1
 801a854:	4619      	mov	r1, r3
 801a856:	463b      	mov	r3, r7
 801a858:	bfbb      	ittet	lt
 801a85a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a85e:	461f      	movlt	r7, r3
 801a860:	2300      	movge	r3, #0
 801a862:	232d      	movlt	r3, #45	@ 0x2d
 801a864:	700b      	strb	r3, [r1, #0]
 801a866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a868:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a86c:	4691      	mov	r9, r2
 801a86e:	f023 0820 	bic.w	r8, r3, #32
 801a872:	bfbc      	itt	lt
 801a874:	4632      	movlt	r2, r6
 801a876:	4616      	movlt	r6, r2
 801a878:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a87c:	d005      	beq.n	801a88a <__cvt+0x42>
 801a87e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a882:	d100      	bne.n	801a886 <__cvt+0x3e>
 801a884:	3401      	adds	r4, #1
 801a886:	2102      	movs	r1, #2
 801a888:	e000      	b.n	801a88c <__cvt+0x44>
 801a88a:	2103      	movs	r1, #3
 801a88c:	ab03      	add	r3, sp, #12
 801a88e:	9301      	str	r3, [sp, #4]
 801a890:	ab02      	add	r3, sp, #8
 801a892:	9300      	str	r3, [sp, #0]
 801a894:	ec47 6b10 	vmov	d0, r6, r7
 801a898:	4653      	mov	r3, sl
 801a89a:	4622      	mov	r2, r4
 801a89c:	f001 f978 	bl	801bb90 <_dtoa_r>
 801a8a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a8a4:	4605      	mov	r5, r0
 801a8a6:	d119      	bne.n	801a8dc <__cvt+0x94>
 801a8a8:	f019 0f01 	tst.w	r9, #1
 801a8ac:	d00e      	beq.n	801a8cc <__cvt+0x84>
 801a8ae:	eb00 0904 	add.w	r9, r0, r4
 801a8b2:	2200      	movs	r2, #0
 801a8b4:	2300      	movs	r3, #0
 801a8b6:	4630      	mov	r0, r6
 801a8b8:	4639      	mov	r1, r7
 801a8ba:	f7e6 f8dd 	bl	8000a78 <__aeabi_dcmpeq>
 801a8be:	b108      	cbz	r0, 801a8c4 <__cvt+0x7c>
 801a8c0:	f8cd 900c 	str.w	r9, [sp, #12]
 801a8c4:	2230      	movs	r2, #48	@ 0x30
 801a8c6:	9b03      	ldr	r3, [sp, #12]
 801a8c8:	454b      	cmp	r3, r9
 801a8ca:	d31e      	bcc.n	801a90a <__cvt+0xc2>
 801a8cc:	9b03      	ldr	r3, [sp, #12]
 801a8ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a8d0:	1b5b      	subs	r3, r3, r5
 801a8d2:	4628      	mov	r0, r5
 801a8d4:	6013      	str	r3, [r2, #0]
 801a8d6:	b004      	add	sp, #16
 801a8d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a8e0:	eb00 0904 	add.w	r9, r0, r4
 801a8e4:	d1e5      	bne.n	801a8b2 <__cvt+0x6a>
 801a8e6:	7803      	ldrb	r3, [r0, #0]
 801a8e8:	2b30      	cmp	r3, #48	@ 0x30
 801a8ea:	d10a      	bne.n	801a902 <__cvt+0xba>
 801a8ec:	2200      	movs	r2, #0
 801a8ee:	2300      	movs	r3, #0
 801a8f0:	4630      	mov	r0, r6
 801a8f2:	4639      	mov	r1, r7
 801a8f4:	f7e6 f8c0 	bl	8000a78 <__aeabi_dcmpeq>
 801a8f8:	b918      	cbnz	r0, 801a902 <__cvt+0xba>
 801a8fa:	f1c4 0401 	rsb	r4, r4, #1
 801a8fe:	f8ca 4000 	str.w	r4, [sl]
 801a902:	f8da 3000 	ldr.w	r3, [sl]
 801a906:	4499      	add	r9, r3
 801a908:	e7d3      	b.n	801a8b2 <__cvt+0x6a>
 801a90a:	1c59      	adds	r1, r3, #1
 801a90c:	9103      	str	r1, [sp, #12]
 801a90e:	701a      	strb	r2, [r3, #0]
 801a910:	e7d9      	b.n	801a8c6 <__cvt+0x7e>

0801a912 <__exponent>:
 801a912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a914:	2900      	cmp	r1, #0
 801a916:	bfba      	itte	lt
 801a918:	4249      	neglt	r1, r1
 801a91a:	232d      	movlt	r3, #45	@ 0x2d
 801a91c:	232b      	movge	r3, #43	@ 0x2b
 801a91e:	2909      	cmp	r1, #9
 801a920:	7002      	strb	r2, [r0, #0]
 801a922:	7043      	strb	r3, [r0, #1]
 801a924:	dd29      	ble.n	801a97a <__exponent+0x68>
 801a926:	f10d 0307 	add.w	r3, sp, #7
 801a92a:	461d      	mov	r5, r3
 801a92c:	270a      	movs	r7, #10
 801a92e:	461a      	mov	r2, r3
 801a930:	fbb1 f6f7 	udiv	r6, r1, r7
 801a934:	fb07 1416 	mls	r4, r7, r6, r1
 801a938:	3430      	adds	r4, #48	@ 0x30
 801a93a:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a93e:	460c      	mov	r4, r1
 801a940:	2c63      	cmp	r4, #99	@ 0x63
 801a942:	f103 33ff 	add.w	r3, r3, #4294967295
 801a946:	4631      	mov	r1, r6
 801a948:	dcf1      	bgt.n	801a92e <__exponent+0x1c>
 801a94a:	3130      	adds	r1, #48	@ 0x30
 801a94c:	1e94      	subs	r4, r2, #2
 801a94e:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a952:	1c41      	adds	r1, r0, #1
 801a954:	4623      	mov	r3, r4
 801a956:	42ab      	cmp	r3, r5
 801a958:	d30a      	bcc.n	801a970 <__exponent+0x5e>
 801a95a:	f10d 0309 	add.w	r3, sp, #9
 801a95e:	1a9b      	subs	r3, r3, r2
 801a960:	42ac      	cmp	r4, r5
 801a962:	bf88      	it	hi
 801a964:	2300      	movhi	r3, #0
 801a966:	3302      	adds	r3, #2
 801a968:	4403      	add	r3, r0
 801a96a:	1a18      	subs	r0, r3, r0
 801a96c:	b003      	add	sp, #12
 801a96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a970:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a974:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a978:	e7ed      	b.n	801a956 <__exponent+0x44>
 801a97a:	2330      	movs	r3, #48	@ 0x30
 801a97c:	3130      	adds	r1, #48	@ 0x30
 801a97e:	7083      	strb	r3, [r0, #2]
 801a980:	70c1      	strb	r1, [r0, #3]
 801a982:	1d03      	adds	r3, r0, #4
 801a984:	e7f1      	b.n	801a96a <__exponent+0x58>
	...

0801a988 <_printf_float>:
 801a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a98c:	b08d      	sub	sp, #52	@ 0x34
 801a98e:	460c      	mov	r4, r1
 801a990:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a994:	4616      	mov	r6, r2
 801a996:	461f      	mov	r7, r3
 801a998:	4605      	mov	r5, r0
 801a99a:	f000 ffa7 	bl	801b8ec <_localeconv_r>
 801a99e:	6803      	ldr	r3, [r0, #0]
 801a9a0:	9304      	str	r3, [sp, #16]
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	f7e5 fc3c 	bl	8000220 <strlen>
 801a9a8:	2300      	movs	r3, #0
 801a9aa:	930a      	str	r3, [sp, #40]	@ 0x28
 801a9ac:	f8d8 3000 	ldr.w	r3, [r8]
 801a9b0:	9005      	str	r0, [sp, #20]
 801a9b2:	3307      	adds	r3, #7
 801a9b4:	f023 0307 	bic.w	r3, r3, #7
 801a9b8:	f103 0208 	add.w	r2, r3, #8
 801a9bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a9c0:	f8d4 b000 	ldr.w	fp, [r4]
 801a9c4:	f8c8 2000 	str.w	r2, [r8]
 801a9c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a9cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a9d0:	9307      	str	r3, [sp, #28]
 801a9d2:	f8cd 8018 	str.w	r8, [sp, #24]
 801a9d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a9da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a9de:	4b9c      	ldr	r3, [pc, #624]	@ (801ac50 <_printf_float+0x2c8>)
 801a9e0:	f04f 32ff 	mov.w	r2, #4294967295
 801a9e4:	f7e6 f87a 	bl	8000adc <__aeabi_dcmpun>
 801a9e8:	bb70      	cbnz	r0, 801aa48 <_printf_float+0xc0>
 801a9ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a9ee:	4b98      	ldr	r3, [pc, #608]	@ (801ac50 <_printf_float+0x2c8>)
 801a9f0:	f04f 32ff 	mov.w	r2, #4294967295
 801a9f4:	f7e6 f854 	bl	8000aa0 <__aeabi_dcmple>
 801a9f8:	bb30      	cbnz	r0, 801aa48 <_printf_float+0xc0>
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	2300      	movs	r3, #0
 801a9fe:	4640      	mov	r0, r8
 801aa00:	4649      	mov	r1, r9
 801aa02:	f7e6 f843 	bl	8000a8c <__aeabi_dcmplt>
 801aa06:	b110      	cbz	r0, 801aa0e <_printf_float+0x86>
 801aa08:	232d      	movs	r3, #45	@ 0x2d
 801aa0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aa0e:	4a91      	ldr	r2, [pc, #580]	@ (801ac54 <_printf_float+0x2cc>)
 801aa10:	4b91      	ldr	r3, [pc, #580]	@ (801ac58 <_printf_float+0x2d0>)
 801aa12:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801aa16:	bf94      	ite	ls
 801aa18:	4690      	movls	r8, r2
 801aa1a:	4698      	movhi	r8, r3
 801aa1c:	2303      	movs	r3, #3
 801aa1e:	6123      	str	r3, [r4, #16]
 801aa20:	f02b 0304 	bic.w	r3, fp, #4
 801aa24:	6023      	str	r3, [r4, #0]
 801aa26:	f04f 0900 	mov.w	r9, #0
 801aa2a:	9700      	str	r7, [sp, #0]
 801aa2c:	4633      	mov	r3, r6
 801aa2e:	aa0b      	add	r2, sp, #44	@ 0x2c
 801aa30:	4621      	mov	r1, r4
 801aa32:	4628      	mov	r0, r5
 801aa34:	f000 f9d2 	bl	801addc <_printf_common>
 801aa38:	3001      	adds	r0, #1
 801aa3a:	f040 808d 	bne.w	801ab58 <_printf_float+0x1d0>
 801aa3e:	f04f 30ff 	mov.w	r0, #4294967295
 801aa42:	b00d      	add	sp, #52	@ 0x34
 801aa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa48:	4642      	mov	r2, r8
 801aa4a:	464b      	mov	r3, r9
 801aa4c:	4640      	mov	r0, r8
 801aa4e:	4649      	mov	r1, r9
 801aa50:	f7e6 f844 	bl	8000adc <__aeabi_dcmpun>
 801aa54:	b140      	cbz	r0, 801aa68 <_printf_float+0xe0>
 801aa56:	464b      	mov	r3, r9
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	bfbc      	itt	lt
 801aa5c:	232d      	movlt	r3, #45	@ 0x2d
 801aa5e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801aa62:	4a7e      	ldr	r2, [pc, #504]	@ (801ac5c <_printf_float+0x2d4>)
 801aa64:	4b7e      	ldr	r3, [pc, #504]	@ (801ac60 <_printf_float+0x2d8>)
 801aa66:	e7d4      	b.n	801aa12 <_printf_float+0x8a>
 801aa68:	6863      	ldr	r3, [r4, #4]
 801aa6a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801aa6e:	9206      	str	r2, [sp, #24]
 801aa70:	1c5a      	adds	r2, r3, #1
 801aa72:	d13b      	bne.n	801aaec <_printf_float+0x164>
 801aa74:	2306      	movs	r3, #6
 801aa76:	6063      	str	r3, [r4, #4]
 801aa78:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801aa7c:	2300      	movs	r3, #0
 801aa7e:	6022      	str	r2, [r4, #0]
 801aa80:	9303      	str	r3, [sp, #12]
 801aa82:	ab0a      	add	r3, sp, #40	@ 0x28
 801aa84:	e9cd a301 	strd	sl, r3, [sp, #4]
 801aa88:	ab09      	add	r3, sp, #36	@ 0x24
 801aa8a:	9300      	str	r3, [sp, #0]
 801aa8c:	6861      	ldr	r1, [r4, #4]
 801aa8e:	ec49 8b10 	vmov	d0, r8, r9
 801aa92:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801aa96:	4628      	mov	r0, r5
 801aa98:	f7ff fed6 	bl	801a848 <__cvt>
 801aa9c:	9b06      	ldr	r3, [sp, #24]
 801aa9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801aaa0:	2b47      	cmp	r3, #71	@ 0x47
 801aaa2:	4680      	mov	r8, r0
 801aaa4:	d129      	bne.n	801aafa <_printf_float+0x172>
 801aaa6:	1cc8      	adds	r0, r1, #3
 801aaa8:	db02      	blt.n	801aab0 <_printf_float+0x128>
 801aaaa:	6863      	ldr	r3, [r4, #4]
 801aaac:	4299      	cmp	r1, r3
 801aaae:	dd41      	ble.n	801ab34 <_printf_float+0x1ac>
 801aab0:	f1aa 0a02 	sub.w	sl, sl, #2
 801aab4:	fa5f fa8a 	uxtb.w	sl, sl
 801aab8:	3901      	subs	r1, #1
 801aaba:	4652      	mov	r2, sl
 801aabc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801aac0:	9109      	str	r1, [sp, #36]	@ 0x24
 801aac2:	f7ff ff26 	bl	801a912 <__exponent>
 801aac6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aac8:	1813      	adds	r3, r2, r0
 801aaca:	2a01      	cmp	r2, #1
 801aacc:	4681      	mov	r9, r0
 801aace:	6123      	str	r3, [r4, #16]
 801aad0:	dc02      	bgt.n	801aad8 <_printf_float+0x150>
 801aad2:	6822      	ldr	r2, [r4, #0]
 801aad4:	07d2      	lsls	r2, r2, #31
 801aad6:	d501      	bpl.n	801aadc <_printf_float+0x154>
 801aad8:	3301      	adds	r3, #1
 801aada:	6123      	str	r3, [r4, #16]
 801aadc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801aae0:	2b00      	cmp	r3, #0
 801aae2:	d0a2      	beq.n	801aa2a <_printf_float+0xa2>
 801aae4:	232d      	movs	r3, #45	@ 0x2d
 801aae6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aaea:	e79e      	b.n	801aa2a <_printf_float+0xa2>
 801aaec:	9a06      	ldr	r2, [sp, #24]
 801aaee:	2a47      	cmp	r2, #71	@ 0x47
 801aaf0:	d1c2      	bne.n	801aa78 <_printf_float+0xf0>
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d1c0      	bne.n	801aa78 <_printf_float+0xf0>
 801aaf6:	2301      	movs	r3, #1
 801aaf8:	e7bd      	b.n	801aa76 <_printf_float+0xee>
 801aafa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801aafe:	d9db      	bls.n	801aab8 <_printf_float+0x130>
 801ab00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801ab04:	d118      	bne.n	801ab38 <_printf_float+0x1b0>
 801ab06:	2900      	cmp	r1, #0
 801ab08:	6863      	ldr	r3, [r4, #4]
 801ab0a:	dd0b      	ble.n	801ab24 <_printf_float+0x19c>
 801ab0c:	6121      	str	r1, [r4, #16]
 801ab0e:	b913      	cbnz	r3, 801ab16 <_printf_float+0x18e>
 801ab10:	6822      	ldr	r2, [r4, #0]
 801ab12:	07d0      	lsls	r0, r2, #31
 801ab14:	d502      	bpl.n	801ab1c <_printf_float+0x194>
 801ab16:	3301      	adds	r3, #1
 801ab18:	440b      	add	r3, r1
 801ab1a:	6123      	str	r3, [r4, #16]
 801ab1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801ab1e:	f04f 0900 	mov.w	r9, #0
 801ab22:	e7db      	b.n	801aadc <_printf_float+0x154>
 801ab24:	b913      	cbnz	r3, 801ab2c <_printf_float+0x1a4>
 801ab26:	6822      	ldr	r2, [r4, #0]
 801ab28:	07d2      	lsls	r2, r2, #31
 801ab2a:	d501      	bpl.n	801ab30 <_printf_float+0x1a8>
 801ab2c:	3302      	adds	r3, #2
 801ab2e:	e7f4      	b.n	801ab1a <_printf_float+0x192>
 801ab30:	2301      	movs	r3, #1
 801ab32:	e7f2      	b.n	801ab1a <_printf_float+0x192>
 801ab34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801ab38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ab3a:	4299      	cmp	r1, r3
 801ab3c:	db05      	blt.n	801ab4a <_printf_float+0x1c2>
 801ab3e:	6823      	ldr	r3, [r4, #0]
 801ab40:	6121      	str	r1, [r4, #16]
 801ab42:	07d8      	lsls	r0, r3, #31
 801ab44:	d5ea      	bpl.n	801ab1c <_printf_float+0x194>
 801ab46:	1c4b      	adds	r3, r1, #1
 801ab48:	e7e7      	b.n	801ab1a <_printf_float+0x192>
 801ab4a:	2900      	cmp	r1, #0
 801ab4c:	bfd4      	ite	le
 801ab4e:	f1c1 0202 	rsble	r2, r1, #2
 801ab52:	2201      	movgt	r2, #1
 801ab54:	4413      	add	r3, r2
 801ab56:	e7e0      	b.n	801ab1a <_printf_float+0x192>
 801ab58:	6823      	ldr	r3, [r4, #0]
 801ab5a:	055a      	lsls	r2, r3, #21
 801ab5c:	d407      	bmi.n	801ab6e <_printf_float+0x1e6>
 801ab5e:	6923      	ldr	r3, [r4, #16]
 801ab60:	4642      	mov	r2, r8
 801ab62:	4631      	mov	r1, r6
 801ab64:	4628      	mov	r0, r5
 801ab66:	47b8      	blx	r7
 801ab68:	3001      	adds	r0, #1
 801ab6a:	d12b      	bne.n	801abc4 <_printf_float+0x23c>
 801ab6c:	e767      	b.n	801aa3e <_printf_float+0xb6>
 801ab6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801ab72:	f240 80dd 	bls.w	801ad30 <_printf_float+0x3a8>
 801ab76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ab7a:	2200      	movs	r2, #0
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	f7e5 ff7b 	bl	8000a78 <__aeabi_dcmpeq>
 801ab82:	2800      	cmp	r0, #0
 801ab84:	d033      	beq.n	801abee <_printf_float+0x266>
 801ab86:	4a37      	ldr	r2, [pc, #220]	@ (801ac64 <_printf_float+0x2dc>)
 801ab88:	2301      	movs	r3, #1
 801ab8a:	4631      	mov	r1, r6
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	47b8      	blx	r7
 801ab90:	3001      	adds	r0, #1
 801ab92:	f43f af54 	beq.w	801aa3e <_printf_float+0xb6>
 801ab96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801ab9a:	4543      	cmp	r3, r8
 801ab9c:	db02      	blt.n	801aba4 <_printf_float+0x21c>
 801ab9e:	6823      	ldr	r3, [r4, #0]
 801aba0:	07d8      	lsls	r0, r3, #31
 801aba2:	d50f      	bpl.n	801abc4 <_printf_float+0x23c>
 801aba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801aba8:	4631      	mov	r1, r6
 801abaa:	4628      	mov	r0, r5
 801abac:	47b8      	blx	r7
 801abae:	3001      	adds	r0, #1
 801abb0:	f43f af45 	beq.w	801aa3e <_printf_float+0xb6>
 801abb4:	f04f 0900 	mov.w	r9, #0
 801abb8:	f108 38ff 	add.w	r8, r8, #4294967295
 801abbc:	f104 0a1a 	add.w	sl, r4, #26
 801abc0:	45c8      	cmp	r8, r9
 801abc2:	dc09      	bgt.n	801abd8 <_printf_float+0x250>
 801abc4:	6823      	ldr	r3, [r4, #0]
 801abc6:	079b      	lsls	r3, r3, #30
 801abc8:	f100 8103 	bmi.w	801add2 <_printf_float+0x44a>
 801abcc:	68e0      	ldr	r0, [r4, #12]
 801abce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801abd0:	4298      	cmp	r0, r3
 801abd2:	bfb8      	it	lt
 801abd4:	4618      	movlt	r0, r3
 801abd6:	e734      	b.n	801aa42 <_printf_float+0xba>
 801abd8:	2301      	movs	r3, #1
 801abda:	4652      	mov	r2, sl
 801abdc:	4631      	mov	r1, r6
 801abde:	4628      	mov	r0, r5
 801abe0:	47b8      	blx	r7
 801abe2:	3001      	adds	r0, #1
 801abe4:	f43f af2b 	beq.w	801aa3e <_printf_float+0xb6>
 801abe8:	f109 0901 	add.w	r9, r9, #1
 801abec:	e7e8      	b.n	801abc0 <_printf_float+0x238>
 801abee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	dc39      	bgt.n	801ac68 <_printf_float+0x2e0>
 801abf4:	4a1b      	ldr	r2, [pc, #108]	@ (801ac64 <_printf_float+0x2dc>)
 801abf6:	2301      	movs	r3, #1
 801abf8:	4631      	mov	r1, r6
 801abfa:	4628      	mov	r0, r5
 801abfc:	47b8      	blx	r7
 801abfe:	3001      	adds	r0, #1
 801ac00:	f43f af1d 	beq.w	801aa3e <_printf_float+0xb6>
 801ac04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801ac08:	ea59 0303 	orrs.w	r3, r9, r3
 801ac0c:	d102      	bne.n	801ac14 <_printf_float+0x28c>
 801ac0e:	6823      	ldr	r3, [r4, #0]
 801ac10:	07d9      	lsls	r1, r3, #31
 801ac12:	d5d7      	bpl.n	801abc4 <_printf_float+0x23c>
 801ac14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac18:	4631      	mov	r1, r6
 801ac1a:	4628      	mov	r0, r5
 801ac1c:	47b8      	blx	r7
 801ac1e:	3001      	adds	r0, #1
 801ac20:	f43f af0d 	beq.w	801aa3e <_printf_float+0xb6>
 801ac24:	f04f 0a00 	mov.w	sl, #0
 801ac28:	f104 0b1a 	add.w	fp, r4, #26
 801ac2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac2e:	425b      	negs	r3, r3
 801ac30:	4553      	cmp	r3, sl
 801ac32:	dc01      	bgt.n	801ac38 <_printf_float+0x2b0>
 801ac34:	464b      	mov	r3, r9
 801ac36:	e793      	b.n	801ab60 <_printf_float+0x1d8>
 801ac38:	2301      	movs	r3, #1
 801ac3a:	465a      	mov	r2, fp
 801ac3c:	4631      	mov	r1, r6
 801ac3e:	4628      	mov	r0, r5
 801ac40:	47b8      	blx	r7
 801ac42:	3001      	adds	r0, #1
 801ac44:	f43f aefb 	beq.w	801aa3e <_printf_float+0xb6>
 801ac48:	f10a 0a01 	add.w	sl, sl, #1
 801ac4c:	e7ee      	b.n	801ac2c <_printf_float+0x2a4>
 801ac4e:	bf00      	nop
 801ac50:	7fefffff 	.word	0x7fefffff
 801ac54:	08022041 	.word	0x08022041
 801ac58:	08022045 	.word	0x08022045
 801ac5c:	08022049 	.word	0x08022049
 801ac60:	0802204d 	.word	0x0802204d
 801ac64:	08022051 	.word	0x08022051
 801ac68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ac6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ac6e:	4553      	cmp	r3, sl
 801ac70:	bfa8      	it	ge
 801ac72:	4653      	movge	r3, sl
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	4699      	mov	r9, r3
 801ac78:	dc36      	bgt.n	801ace8 <_printf_float+0x360>
 801ac7a:	f04f 0b00 	mov.w	fp, #0
 801ac7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801ac82:	f104 021a 	add.w	r2, r4, #26
 801ac86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801ac88:	9306      	str	r3, [sp, #24]
 801ac8a:	eba3 0309 	sub.w	r3, r3, r9
 801ac8e:	455b      	cmp	r3, fp
 801ac90:	dc31      	bgt.n	801acf6 <_printf_float+0x36e>
 801ac92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac94:	459a      	cmp	sl, r3
 801ac96:	dc3a      	bgt.n	801ad0e <_printf_float+0x386>
 801ac98:	6823      	ldr	r3, [r4, #0]
 801ac9a:	07da      	lsls	r2, r3, #31
 801ac9c:	d437      	bmi.n	801ad0e <_printf_float+0x386>
 801ac9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aca0:	ebaa 0903 	sub.w	r9, sl, r3
 801aca4:	9b06      	ldr	r3, [sp, #24]
 801aca6:	ebaa 0303 	sub.w	r3, sl, r3
 801acaa:	4599      	cmp	r9, r3
 801acac:	bfa8      	it	ge
 801acae:	4699      	movge	r9, r3
 801acb0:	f1b9 0f00 	cmp.w	r9, #0
 801acb4:	dc33      	bgt.n	801ad1e <_printf_float+0x396>
 801acb6:	f04f 0800 	mov.w	r8, #0
 801acba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801acbe:	f104 0b1a 	add.w	fp, r4, #26
 801acc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acc4:	ebaa 0303 	sub.w	r3, sl, r3
 801acc8:	eba3 0309 	sub.w	r3, r3, r9
 801accc:	4543      	cmp	r3, r8
 801acce:	f77f af79 	ble.w	801abc4 <_printf_float+0x23c>
 801acd2:	2301      	movs	r3, #1
 801acd4:	465a      	mov	r2, fp
 801acd6:	4631      	mov	r1, r6
 801acd8:	4628      	mov	r0, r5
 801acda:	47b8      	blx	r7
 801acdc:	3001      	adds	r0, #1
 801acde:	f43f aeae 	beq.w	801aa3e <_printf_float+0xb6>
 801ace2:	f108 0801 	add.w	r8, r8, #1
 801ace6:	e7ec      	b.n	801acc2 <_printf_float+0x33a>
 801ace8:	4642      	mov	r2, r8
 801acea:	4631      	mov	r1, r6
 801acec:	4628      	mov	r0, r5
 801acee:	47b8      	blx	r7
 801acf0:	3001      	adds	r0, #1
 801acf2:	d1c2      	bne.n	801ac7a <_printf_float+0x2f2>
 801acf4:	e6a3      	b.n	801aa3e <_printf_float+0xb6>
 801acf6:	2301      	movs	r3, #1
 801acf8:	4631      	mov	r1, r6
 801acfa:	4628      	mov	r0, r5
 801acfc:	9206      	str	r2, [sp, #24]
 801acfe:	47b8      	blx	r7
 801ad00:	3001      	adds	r0, #1
 801ad02:	f43f ae9c 	beq.w	801aa3e <_printf_float+0xb6>
 801ad06:	9a06      	ldr	r2, [sp, #24]
 801ad08:	f10b 0b01 	add.w	fp, fp, #1
 801ad0c:	e7bb      	b.n	801ac86 <_printf_float+0x2fe>
 801ad0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad12:	4631      	mov	r1, r6
 801ad14:	4628      	mov	r0, r5
 801ad16:	47b8      	blx	r7
 801ad18:	3001      	adds	r0, #1
 801ad1a:	d1c0      	bne.n	801ac9e <_printf_float+0x316>
 801ad1c:	e68f      	b.n	801aa3e <_printf_float+0xb6>
 801ad1e:	9a06      	ldr	r2, [sp, #24]
 801ad20:	464b      	mov	r3, r9
 801ad22:	4442      	add	r2, r8
 801ad24:	4631      	mov	r1, r6
 801ad26:	4628      	mov	r0, r5
 801ad28:	47b8      	blx	r7
 801ad2a:	3001      	adds	r0, #1
 801ad2c:	d1c3      	bne.n	801acb6 <_printf_float+0x32e>
 801ad2e:	e686      	b.n	801aa3e <_printf_float+0xb6>
 801ad30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801ad34:	f1ba 0f01 	cmp.w	sl, #1
 801ad38:	dc01      	bgt.n	801ad3e <_printf_float+0x3b6>
 801ad3a:	07db      	lsls	r3, r3, #31
 801ad3c:	d536      	bpl.n	801adac <_printf_float+0x424>
 801ad3e:	2301      	movs	r3, #1
 801ad40:	4642      	mov	r2, r8
 801ad42:	4631      	mov	r1, r6
 801ad44:	4628      	mov	r0, r5
 801ad46:	47b8      	blx	r7
 801ad48:	3001      	adds	r0, #1
 801ad4a:	f43f ae78 	beq.w	801aa3e <_printf_float+0xb6>
 801ad4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad52:	4631      	mov	r1, r6
 801ad54:	4628      	mov	r0, r5
 801ad56:	47b8      	blx	r7
 801ad58:	3001      	adds	r0, #1
 801ad5a:	f43f ae70 	beq.w	801aa3e <_printf_float+0xb6>
 801ad5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801ad62:	2200      	movs	r2, #0
 801ad64:	2300      	movs	r3, #0
 801ad66:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ad6a:	f7e5 fe85 	bl	8000a78 <__aeabi_dcmpeq>
 801ad6e:	b9c0      	cbnz	r0, 801ada2 <_printf_float+0x41a>
 801ad70:	4653      	mov	r3, sl
 801ad72:	f108 0201 	add.w	r2, r8, #1
 801ad76:	4631      	mov	r1, r6
 801ad78:	4628      	mov	r0, r5
 801ad7a:	47b8      	blx	r7
 801ad7c:	3001      	adds	r0, #1
 801ad7e:	d10c      	bne.n	801ad9a <_printf_float+0x412>
 801ad80:	e65d      	b.n	801aa3e <_printf_float+0xb6>
 801ad82:	2301      	movs	r3, #1
 801ad84:	465a      	mov	r2, fp
 801ad86:	4631      	mov	r1, r6
 801ad88:	4628      	mov	r0, r5
 801ad8a:	47b8      	blx	r7
 801ad8c:	3001      	adds	r0, #1
 801ad8e:	f43f ae56 	beq.w	801aa3e <_printf_float+0xb6>
 801ad92:	f108 0801 	add.w	r8, r8, #1
 801ad96:	45d0      	cmp	r8, sl
 801ad98:	dbf3      	blt.n	801ad82 <_printf_float+0x3fa>
 801ad9a:	464b      	mov	r3, r9
 801ad9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801ada0:	e6df      	b.n	801ab62 <_printf_float+0x1da>
 801ada2:	f04f 0800 	mov.w	r8, #0
 801ada6:	f104 0b1a 	add.w	fp, r4, #26
 801adaa:	e7f4      	b.n	801ad96 <_printf_float+0x40e>
 801adac:	2301      	movs	r3, #1
 801adae:	4642      	mov	r2, r8
 801adb0:	e7e1      	b.n	801ad76 <_printf_float+0x3ee>
 801adb2:	2301      	movs	r3, #1
 801adb4:	464a      	mov	r2, r9
 801adb6:	4631      	mov	r1, r6
 801adb8:	4628      	mov	r0, r5
 801adba:	47b8      	blx	r7
 801adbc:	3001      	adds	r0, #1
 801adbe:	f43f ae3e 	beq.w	801aa3e <_printf_float+0xb6>
 801adc2:	f108 0801 	add.w	r8, r8, #1
 801adc6:	68e3      	ldr	r3, [r4, #12]
 801adc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801adca:	1a5b      	subs	r3, r3, r1
 801adcc:	4543      	cmp	r3, r8
 801adce:	dcf0      	bgt.n	801adb2 <_printf_float+0x42a>
 801add0:	e6fc      	b.n	801abcc <_printf_float+0x244>
 801add2:	f04f 0800 	mov.w	r8, #0
 801add6:	f104 0919 	add.w	r9, r4, #25
 801adda:	e7f4      	b.n	801adc6 <_printf_float+0x43e>

0801addc <_printf_common>:
 801addc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ade0:	4616      	mov	r6, r2
 801ade2:	4698      	mov	r8, r3
 801ade4:	688a      	ldr	r2, [r1, #8]
 801ade6:	690b      	ldr	r3, [r1, #16]
 801ade8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801adec:	4293      	cmp	r3, r2
 801adee:	bfb8      	it	lt
 801adf0:	4613      	movlt	r3, r2
 801adf2:	6033      	str	r3, [r6, #0]
 801adf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801adf8:	4607      	mov	r7, r0
 801adfa:	460c      	mov	r4, r1
 801adfc:	b10a      	cbz	r2, 801ae02 <_printf_common+0x26>
 801adfe:	3301      	adds	r3, #1
 801ae00:	6033      	str	r3, [r6, #0]
 801ae02:	6823      	ldr	r3, [r4, #0]
 801ae04:	0699      	lsls	r1, r3, #26
 801ae06:	bf42      	ittt	mi
 801ae08:	6833      	ldrmi	r3, [r6, #0]
 801ae0a:	3302      	addmi	r3, #2
 801ae0c:	6033      	strmi	r3, [r6, #0]
 801ae0e:	6825      	ldr	r5, [r4, #0]
 801ae10:	f015 0506 	ands.w	r5, r5, #6
 801ae14:	d106      	bne.n	801ae24 <_printf_common+0x48>
 801ae16:	f104 0a19 	add.w	sl, r4, #25
 801ae1a:	68e3      	ldr	r3, [r4, #12]
 801ae1c:	6832      	ldr	r2, [r6, #0]
 801ae1e:	1a9b      	subs	r3, r3, r2
 801ae20:	42ab      	cmp	r3, r5
 801ae22:	dc26      	bgt.n	801ae72 <_printf_common+0x96>
 801ae24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ae28:	6822      	ldr	r2, [r4, #0]
 801ae2a:	3b00      	subs	r3, #0
 801ae2c:	bf18      	it	ne
 801ae2e:	2301      	movne	r3, #1
 801ae30:	0692      	lsls	r2, r2, #26
 801ae32:	d42b      	bmi.n	801ae8c <_printf_common+0xb0>
 801ae34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801ae38:	4641      	mov	r1, r8
 801ae3a:	4638      	mov	r0, r7
 801ae3c:	47c8      	blx	r9
 801ae3e:	3001      	adds	r0, #1
 801ae40:	d01e      	beq.n	801ae80 <_printf_common+0xa4>
 801ae42:	6823      	ldr	r3, [r4, #0]
 801ae44:	6922      	ldr	r2, [r4, #16]
 801ae46:	f003 0306 	and.w	r3, r3, #6
 801ae4a:	2b04      	cmp	r3, #4
 801ae4c:	bf02      	ittt	eq
 801ae4e:	68e5      	ldreq	r5, [r4, #12]
 801ae50:	6833      	ldreq	r3, [r6, #0]
 801ae52:	1aed      	subeq	r5, r5, r3
 801ae54:	68a3      	ldr	r3, [r4, #8]
 801ae56:	bf0c      	ite	eq
 801ae58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae5c:	2500      	movne	r5, #0
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	bfc4      	itt	gt
 801ae62:	1a9b      	subgt	r3, r3, r2
 801ae64:	18ed      	addgt	r5, r5, r3
 801ae66:	2600      	movs	r6, #0
 801ae68:	341a      	adds	r4, #26
 801ae6a:	42b5      	cmp	r5, r6
 801ae6c:	d11a      	bne.n	801aea4 <_printf_common+0xc8>
 801ae6e:	2000      	movs	r0, #0
 801ae70:	e008      	b.n	801ae84 <_printf_common+0xa8>
 801ae72:	2301      	movs	r3, #1
 801ae74:	4652      	mov	r2, sl
 801ae76:	4641      	mov	r1, r8
 801ae78:	4638      	mov	r0, r7
 801ae7a:	47c8      	blx	r9
 801ae7c:	3001      	adds	r0, #1
 801ae7e:	d103      	bne.n	801ae88 <_printf_common+0xac>
 801ae80:	f04f 30ff 	mov.w	r0, #4294967295
 801ae84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae88:	3501      	adds	r5, #1
 801ae8a:	e7c6      	b.n	801ae1a <_printf_common+0x3e>
 801ae8c:	18e1      	adds	r1, r4, r3
 801ae8e:	1c5a      	adds	r2, r3, #1
 801ae90:	2030      	movs	r0, #48	@ 0x30
 801ae92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ae96:	4422      	add	r2, r4
 801ae98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ae9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801aea0:	3302      	adds	r3, #2
 801aea2:	e7c7      	b.n	801ae34 <_printf_common+0x58>
 801aea4:	2301      	movs	r3, #1
 801aea6:	4622      	mov	r2, r4
 801aea8:	4641      	mov	r1, r8
 801aeaa:	4638      	mov	r0, r7
 801aeac:	47c8      	blx	r9
 801aeae:	3001      	adds	r0, #1
 801aeb0:	d0e6      	beq.n	801ae80 <_printf_common+0xa4>
 801aeb2:	3601      	adds	r6, #1
 801aeb4:	e7d9      	b.n	801ae6a <_printf_common+0x8e>
	...

0801aeb8 <_printf_i>:
 801aeb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aebc:	7e0f      	ldrb	r7, [r1, #24]
 801aebe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aec0:	2f78      	cmp	r7, #120	@ 0x78
 801aec2:	4691      	mov	r9, r2
 801aec4:	4680      	mov	r8, r0
 801aec6:	460c      	mov	r4, r1
 801aec8:	469a      	mov	sl, r3
 801aeca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aece:	d807      	bhi.n	801aee0 <_printf_i+0x28>
 801aed0:	2f62      	cmp	r7, #98	@ 0x62
 801aed2:	d80a      	bhi.n	801aeea <_printf_i+0x32>
 801aed4:	2f00      	cmp	r7, #0
 801aed6:	f000 80d2 	beq.w	801b07e <_printf_i+0x1c6>
 801aeda:	2f58      	cmp	r7, #88	@ 0x58
 801aedc:	f000 80b9 	beq.w	801b052 <_printf_i+0x19a>
 801aee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aee4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801aee8:	e03a      	b.n	801af60 <_printf_i+0xa8>
 801aeea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801aeee:	2b15      	cmp	r3, #21
 801aef0:	d8f6      	bhi.n	801aee0 <_printf_i+0x28>
 801aef2:	a101      	add	r1, pc, #4	@ (adr r1, 801aef8 <_printf_i+0x40>)
 801aef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801aef8:	0801af51 	.word	0x0801af51
 801aefc:	0801af65 	.word	0x0801af65
 801af00:	0801aee1 	.word	0x0801aee1
 801af04:	0801aee1 	.word	0x0801aee1
 801af08:	0801aee1 	.word	0x0801aee1
 801af0c:	0801aee1 	.word	0x0801aee1
 801af10:	0801af65 	.word	0x0801af65
 801af14:	0801aee1 	.word	0x0801aee1
 801af18:	0801aee1 	.word	0x0801aee1
 801af1c:	0801aee1 	.word	0x0801aee1
 801af20:	0801aee1 	.word	0x0801aee1
 801af24:	0801b065 	.word	0x0801b065
 801af28:	0801af8f 	.word	0x0801af8f
 801af2c:	0801b01f 	.word	0x0801b01f
 801af30:	0801aee1 	.word	0x0801aee1
 801af34:	0801aee1 	.word	0x0801aee1
 801af38:	0801b087 	.word	0x0801b087
 801af3c:	0801aee1 	.word	0x0801aee1
 801af40:	0801af8f 	.word	0x0801af8f
 801af44:	0801aee1 	.word	0x0801aee1
 801af48:	0801aee1 	.word	0x0801aee1
 801af4c:	0801b027 	.word	0x0801b027
 801af50:	6833      	ldr	r3, [r6, #0]
 801af52:	1d1a      	adds	r2, r3, #4
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	6032      	str	r2, [r6, #0]
 801af58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801af5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801af60:	2301      	movs	r3, #1
 801af62:	e09d      	b.n	801b0a0 <_printf_i+0x1e8>
 801af64:	6833      	ldr	r3, [r6, #0]
 801af66:	6820      	ldr	r0, [r4, #0]
 801af68:	1d19      	adds	r1, r3, #4
 801af6a:	6031      	str	r1, [r6, #0]
 801af6c:	0606      	lsls	r6, r0, #24
 801af6e:	d501      	bpl.n	801af74 <_printf_i+0xbc>
 801af70:	681d      	ldr	r5, [r3, #0]
 801af72:	e003      	b.n	801af7c <_printf_i+0xc4>
 801af74:	0645      	lsls	r5, r0, #25
 801af76:	d5fb      	bpl.n	801af70 <_printf_i+0xb8>
 801af78:	f9b3 5000 	ldrsh.w	r5, [r3]
 801af7c:	2d00      	cmp	r5, #0
 801af7e:	da03      	bge.n	801af88 <_printf_i+0xd0>
 801af80:	232d      	movs	r3, #45	@ 0x2d
 801af82:	426d      	negs	r5, r5
 801af84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801af88:	4859      	ldr	r0, [pc, #356]	@ (801b0f0 <_printf_i+0x238>)
 801af8a:	230a      	movs	r3, #10
 801af8c:	e011      	b.n	801afb2 <_printf_i+0xfa>
 801af8e:	6821      	ldr	r1, [r4, #0]
 801af90:	6833      	ldr	r3, [r6, #0]
 801af92:	0608      	lsls	r0, r1, #24
 801af94:	f853 5b04 	ldr.w	r5, [r3], #4
 801af98:	d402      	bmi.n	801afa0 <_printf_i+0xe8>
 801af9a:	0649      	lsls	r1, r1, #25
 801af9c:	bf48      	it	mi
 801af9e:	b2ad      	uxthmi	r5, r5
 801afa0:	2f6f      	cmp	r7, #111	@ 0x6f
 801afa2:	4853      	ldr	r0, [pc, #332]	@ (801b0f0 <_printf_i+0x238>)
 801afa4:	6033      	str	r3, [r6, #0]
 801afa6:	bf14      	ite	ne
 801afa8:	230a      	movne	r3, #10
 801afaa:	2308      	moveq	r3, #8
 801afac:	2100      	movs	r1, #0
 801afae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801afb2:	6866      	ldr	r6, [r4, #4]
 801afb4:	60a6      	str	r6, [r4, #8]
 801afb6:	2e00      	cmp	r6, #0
 801afb8:	bfa2      	ittt	ge
 801afba:	6821      	ldrge	r1, [r4, #0]
 801afbc:	f021 0104 	bicge.w	r1, r1, #4
 801afc0:	6021      	strge	r1, [r4, #0]
 801afc2:	b90d      	cbnz	r5, 801afc8 <_printf_i+0x110>
 801afc4:	2e00      	cmp	r6, #0
 801afc6:	d04b      	beq.n	801b060 <_printf_i+0x1a8>
 801afc8:	4616      	mov	r6, r2
 801afca:	fbb5 f1f3 	udiv	r1, r5, r3
 801afce:	fb03 5711 	mls	r7, r3, r1, r5
 801afd2:	5dc7      	ldrb	r7, [r0, r7]
 801afd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801afd8:	462f      	mov	r7, r5
 801afda:	42bb      	cmp	r3, r7
 801afdc:	460d      	mov	r5, r1
 801afde:	d9f4      	bls.n	801afca <_printf_i+0x112>
 801afe0:	2b08      	cmp	r3, #8
 801afe2:	d10b      	bne.n	801affc <_printf_i+0x144>
 801afe4:	6823      	ldr	r3, [r4, #0]
 801afe6:	07df      	lsls	r7, r3, #31
 801afe8:	d508      	bpl.n	801affc <_printf_i+0x144>
 801afea:	6923      	ldr	r3, [r4, #16]
 801afec:	6861      	ldr	r1, [r4, #4]
 801afee:	4299      	cmp	r1, r3
 801aff0:	bfde      	ittt	le
 801aff2:	2330      	movle	r3, #48	@ 0x30
 801aff4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801aff8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801affc:	1b92      	subs	r2, r2, r6
 801affe:	6122      	str	r2, [r4, #16]
 801b000:	f8cd a000 	str.w	sl, [sp]
 801b004:	464b      	mov	r3, r9
 801b006:	aa03      	add	r2, sp, #12
 801b008:	4621      	mov	r1, r4
 801b00a:	4640      	mov	r0, r8
 801b00c:	f7ff fee6 	bl	801addc <_printf_common>
 801b010:	3001      	adds	r0, #1
 801b012:	d14a      	bne.n	801b0aa <_printf_i+0x1f2>
 801b014:	f04f 30ff 	mov.w	r0, #4294967295
 801b018:	b004      	add	sp, #16
 801b01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b01e:	6823      	ldr	r3, [r4, #0]
 801b020:	f043 0320 	orr.w	r3, r3, #32
 801b024:	6023      	str	r3, [r4, #0]
 801b026:	4833      	ldr	r0, [pc, #204]	@ (801b0f4 <_printf_i+0x23c>)
 801b028:	2778      	movs	r7, #120	@ 0x78
 801b02a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801b02e:	6823      	ldr	r3, [r4, #0]
 801b030:	6831      	ldr	r1, [r6, #0]
 801b032:	061f      	lsls	r7, r3, #24
 801b034:	f851 5b04 	ldr.w	r5, [r1], #4
 801b038:	d402      	bmi.n	801b040 <_printf_i+0x188>
 801b03a:	065f      	lsls	r7, r3, #25
 801b03c:	bf48      	it	mi
 801b03e:	b2ad      	uxthmi	r5, r5
 801b040:	6031      	str	r1, [r6, #0]
 801b042:	07d9      	lsls	r1, r3, #31
 801b044:	bf44      	itt	mi
 801b046:	f043 0320 	orrmi.w	r3, r3, #32
 801b04a:	6023      	strmi	r3, [r4, #0]
 801b04c:	b11d      	cbz	r5, 801b056 <_printf_i+0x19e>
 801b04e:	2310      	movs	r3, #16
 801b050:	e7ac      	b.n	801afac <_printf_i+0xf4>
 801b052:	4827      	ldr	r0, [pc, #156]	@ (801b0f0 <_printf_i+0x238>)
 801b054:	e7e9      	b.n	801b02a <_printf_i+0x172>
 801b056:	6823      	ldr	r3, [r4, #0]
 801b058:	f023 0320 	bic.w	r3, r3, #32
 801b05c:	6023      	str	r3, [r4, #0]
 801b05e:	e7f6      	b.n	801b04e <_printf_i+0x196>
 801b060:	4616      	mov	r6, r2
 801b062:	e7bd      	b.n	801afe0 <_printf_i+0x128>
 801b064:	6833      	ldr	r3, [r6, #0]
 801b066:	6825      	ldr	r5, [r4, #0]
 801b068:	6961      	ldr	r1, [r4, #20]
 801b06a:	1d18      	adds	r0, r3, #4
 801b06c:	6030      	str	r0, [r6, #0]
 801b06e:	062e      	lsls	r6, r5, #24
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	d501      	bpl.n	801b078 <_printf_i+0x1c0>
 801b074:	6019      	str	r1, [r3, #0]
 801b076:	e002      	b.n	801b07e <_printf_i+0x1c6>
 801b078:	0668      	lsls	r0, r5, #25
 801b07a:	d5fb      	bpl.n	801b074 <_printf_i+0x1bc>
 801b07c:	8019      	strh	r1, [r3, #0]
 801b07e:	2300      	movs	r3, #0
 801b080:	6123      	str	r3, [r4, #16]
 801b082:	4616      	mov	r6, r2
 801b084:	e7bc      	b.n	801b000 <_printf_i+0x148>
 801b086:	6833      	ldr	r3, [r6, #0]
 801b088:	1d1a      	adds	r2, r3, #4
 801b08a:	6032      	str	r2, [r6, #0]
 801b08c:	681e      	ldr	r6, [r3, #0]
 801b08e:	6862      	ldr	r2, [r4, #4]
 801b090:	2100      	movs	r1, #0
 801b092:	4630      	mov	r0, r6
 801b094:	f7e5 f874 	bl	8000180 <memchr>
 801b098:	b108      	cbz	r0, 801b09e <_printf_i+0x1e6>
 801b09a:	1b80      	subs	r0, r0, r6
 801b09c:	6060      	str	r0, [r4, #4]
 801b09e:	6863      	ldr	r3, [r4, #4]
 801b0a0:	6123      	str	r3, [r4, #16]
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b0a8:	e7aa      	b.n	801b000 <_printf_i+0x148>
 801b0aa:	6923      	ldr	r3, [r4, #16]
 801b0ac:	4632      	mov	r2, r6
 801b0ae:	4649      	mov	r1, r9
 801b0b0:	4640      	mov	r0, r8
 801b0b2:	47d0      	blx	sl
 801b0b4:	3001      	adds	r0, #1
 801b0b6:	d0ad      	beq.n	801b014 <_printf_i+0x15c>
 801b0b8:	6823      	ldr	r3, [r4, #0]
 801b0ba:	079b      	lsls	r3, r3, #30
 801b0bc:	d413      	bmi.n	801b0e6 <_printf_i+0x22e>
 801b0be:	68e0      	ldr	r0, [r4, #12]
 801b0c0:	9b03      	ldr	r3, [sp, #12]
 801b0c2:	4298      	cmp	r0, r3
 801b0c4:	bfb8      	it	lt
 801b0c6:	4618      	movlt	r0, r3
 801b0c8:	e7a6      	b.n	801b018 <_printf_i+0x160>
 801b0ca:	2301      	movs	r3, #1
 801b0cc:	4632      	mov	r2, r6
 801b0ce:	4649      	mov	r1, r9
 801b0d0:	4640      	mov	r0, r8
 801b0d2:	47d0      	blx	sl
 801b0d4:	3001      	adds	r0, #1
 801b0d6:	d09d      	beq.n	801b014 <_printf_i+0x15c>
 801b0d8:	3501      	adds	r5, #1
 801b0da:	68e3      	ldr	r3, [r4, #12]
 801b0dc:	9903      	ldr	r1, [sp, #12]
 801b0de:	1a5b      	subs	r3, r3, r1
 801b0e0:	42ab      	cmp	r3, r5
 801b0e2:	dcf2      	bgt.n	801b0ca <_printf_i+0x212>
 801b0e4:	e7eb      	b.n	801b0be <_printf_i+0x206>
 801b0e6:	2500      	movs	r5, #0
 801b0e8:	f104 0619 	add.w	r6, r4, #25
 801b0ec:	e7f5      	b.n	801b0da <_printf_i+0x222>
 801b0ee:	bf00      	nop
 801b0f0:	08022053 	.word	0x08022053
 801b0f4:	08022064 	.word	0x08022064

0801b0f8 <_scanf_float>:
 801b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0fc:	b087      	sub	sp, #28
 801b0fe:	4617      	mov	r7, r2
 801b100:	9303      	str	r3, [sp, #12]
 801b102:	688b      	ldr	r3, [r1, #8]
 801b104:	1e5a      	subs	r2, r3, #1
 801b106:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801b10a:	bf81      	itttt	hi
 801b10c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801b110:	eb03 0b05 	addhi.w	fp, r3, r5
 801b114:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801b118:	608b      	strhi	r3, [r1, #8]
 801b11a:	680b      	ldr	r3, [r1, #0]
 801b11c:	460a      	mov	r2, r1
 801b11e:	f04f 0500 	mov.w	r5, #0
 801b122:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801b126:	f842 3b1c 	str.w	r3, [r2], #28
 801b12a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b12e:	4680      	mov	r8, r0
 801b130:	460c      	mov	r4, r1
 801b132:	bf98      	it	ls
 801b134:	f04f 0b00 	movls.w	fp, #0
 801b138:	9201      	str	r2, [sp, #4]
 801b13a:	4616      	mov	r6, r2
 801b13c:	46aa      	mov	sl, r5
 801b13e:	46a9      	mov	r9, r5
 801b140:	9502      	str	r5, [sp, #8]
 801b142:	68a2      	ldr	r2, [r4, #8]
 801b144:	b152      	cbz	r2, 801b15c <_scanf_float+0x64>
 801b146:	683b      	ldr	r3, [r7, #0]
 801b148:	781b      	ldrb	r3, [r3, #0]
 801b14a:	2b4e      	cmp	r3, #78	@ 0x4e
 801b14c:	d864      	bhi.n	801b218 <_scanf_float+0x120>
 801b14e:	2b40      	cmp	r3, #64	@ 0x40
 801b150:	d83c      	bhi.n	801b1cc <_scanf_float+0xd4>
 801b152:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801b156:	b2c8      	uxtb	r0, r1
 801b158:	280e      	cmp	r0, #14
 801b15a:	d93a      	bls.n	801b1d2 <_scanf_float+0xda>
 801b15c:	f1b9 0f00 	cmp.w	r9, #0
 801b160:	d003      	beq.n	801b16a <_scanf_float+0x72>
 801b162:	6823      	ldr	r3, [r4, #0]
 801b164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801b168:	6023      	str	r3, [r4, #0]
 801b16a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b16e:	f1ba 0f01 	cmp.w	sl, #1
 801b172:	f200 8117 	bhi.w	801b3a4 <_scanf_float+0x2ac>
 801b176:	9b01      	ldr	r3, [sp, #4]
 801b178:	429e      	cmp	r6, r3
 801b17a:	f200 8108 	bhi.w	801b38e <_scanf_float+0x296>
 801b17e:	2001      	movs	r0, #1
 801b180:	b007      	add	sp, #28
 801b182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b186:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801b18a:	2a0d      	cmp	r2, #13
 801b18c:	d8e6      	bhi.n	801b15c <_scanf_float+0x64>
 801b18e:	a101      	add	r1, pc, #4	@ (adr r1, 801b194 <_scanf_float+0x9c>)
 801b190:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b194:	0801b2db 	.word	0x0801b2db
 801b198:	0801b15d 	.word	0x0801b15d
 801b19c:	0801b15d 	.word	0x0801b15d
 801b1a0:	0801b15d 	.word	0x0801b15d
 801b1a4:	0801b33b 	.word	0x0801b33b
 801b1a8:	0801b313 	.word	0x0801b313
 801b1ac:	0801b15d 	.word	0x0801b15d
 801b1b0:	0801b15d 	.word	0x0801b15d
 801b1b4:	0801b2e9 	.word	0x0801b2e9
 801b1b8:	0801b15d 	.word	0x0801b15d
 801b1bc:	0801b15d 	.word	0x0801b15d
 801b1c0:	0801b15d 	.word	0x0801b15d
 801b1c4:	0801b15d 	.word	0x0801b15d
 801b1c8:	0801b2a1 	.word	0x0801b2a1
 801b1cc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801b1d0:	e7db      	b.n	801b18a <_scanf_float+0x92>
 801b1d2:	290e      	cmp	r1, #14
 801b1d4:	d8c2      	bhi.n	801b15c <_scanf_float+0x64>
 801b1d6:	a001      	add	r0, pc, #4	@ (adr r0, 801b1dc <_scanf_float+0xe4>)
 801b1d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b1dc:	0801b291 	.word	0x0801b291
 801b1e0:	0801b15d 	.word	0x0801b15d
 801b1e4:	0801b291 	.word	0x0801b291
 801b1e8:	0801b327 	.word	0x0801b327
 801b1ec:	0801b15d 	.word	0x0801b15d
 801b1f0:	0801b239 	.word	0x0801b239
 801b1f4:	0801b277 	.word	0x0801b277
 801b1f8:	0801b277 	.word	0x0801b277
 801b1fc:	0801b277 	.word	0x0801b277
 801b200:	0801b277 	.word	0x0801b277
 801b204:	0801b277 	.word	0x0801b277
 801b208:	0801b277 	.word	0x0801b277
 801b20c:	0801b277 	.word	0x0801b277
 801b210:	0801b277 	.word	0x0801b277
 801b214:	0801b277 	.word	0x0801b277
 801b218:	2b6e      	cmp	r3, #110	@ 0x6e
 801b21a:	d809      	bhi.n	801b230 <_scanf_float+0x138>
 801b21c:	2b60      	cmp	r3, #96	@ 0x60
 801b21e:	d8b2      	bhi.n	801b186 <_scanf_float+0x8e>
 801b220:	2b54      	cmp	r3, #84	@ 0x54
 801b222:	d07b      	beq.n	801b31c <_scanf_float+0x224>
 801b224:	2b59      	cmp	r3, #89	@ 0x59
 801b226:	d199      	bne.n	801b15c <_scanf_float+0x64>
 801b228:	2d07      	cmp	r5, #7
 801b22a:	d197      	bne.n	801b15c <_scanf_float+0x64>
 801b22c:	2508      	movs	r5, #8
 801b22e:	e02c      	b.n	801b28a <_scanf_float+0x192>
 801b230:	2b74      	cmp	r3, #116	@ 0x74
 801b232:	d073      	beq.n	801b31c <_scanf_float+0x224>
 801b234:	2b79      	cmp	r3, #121	@ 0x79
 801b236:	e7f6      	b.n	801b226 <_scanf_float+0x12e>
 801b238:	6821      	ldr	r1, [r4, #0]
 801b23a:	05c8      	lsls	r0, r1, #23
 801b23c:	d51b      	bpl.n	801b276 <_scanf_float+0x17e>
 801b23e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801b242:	6021      	str	r1, [r4, #0]
 801b244:	f109 0901 	add.w	r9, r9, #1
 801b248:	f1bb 0f00 	cmp.w	fp, #0
 801b24c:	d003      	beq.n	801b256 <_scanf_float+0x15e>
 801b24e:	3201      	adds	r2, #1
 801b250:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b254:	60a2      	str	r2, [r4, #8]
 801b256:	68a3      	ldr	r3, [r4, #8]
 801b258:	3b01      	subs	r3, #1
 801b25a:	60a3      	str	r3, [r4, #8]
 801b25c:	6923      	ldr	r3, [r4, #16]
 801b25e:	3301      	adds	r3, #1
 801b260:	6123      	str	r3, [r4, #16]
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	3b01      	subs	r3, #1
 801b266:	2b00      	cmp	r3, #0
 801b268:	607b      	str	r3, [r7, #4]
 801b26a:	f340 8087 	ble.w	801b37c <_scanf_float+0x284>
 801b26e:	683b      	ldr	r3, [r7, #0]
 801b270:	3301      	adds	r3, #1
 801b272:	603b      	str	r3, [r7, #0]
 801b274:	e765      	b.n	801b142 <_scanf_float+0x4a>
 801b276:	eb1a 0105 	adds.w	r1, sl, r5
 801b27a:	f47f af6f 	bne.w	801b15c <_scanf_float+0x64>
 801b27e:	6822      	ldr	r2, [r4, #0]
 801b280:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801b284:	6022      	str	r2, [r4, #0]
 801b286:	460d      	mov	r5, r1
 801b288:	468a      	mov	sl, r1
 801b28a:	f806 3b01 	strb.w	r3, [r6], #1
 801b28e:	e7e2      	b.n	801b256 <_scanf_float+0x15e>
 801b290:	6822      	ldr	r2, [r4, #0]
 801b292:	0610      	lsls	r0, r2, #24
 801b294:	f57f af62 	bpl.w	801b15c <_scanf_float+0x64>
 801b298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b29c:	6022      	str	r2, [r4, #0]
 801b29e:	e7f4      	b.n	801b28a <_scanf_float+0x192>
 801b2a0:	f1ba 0f00 	cmp.w	sl, #0
 801b2a4:	d10e      	bne.n	801b2c4 <_scanf_float+0x1cc>
 801b2a6:	f1b9 0f00 	cmp.w	r9, #0
 801b2aa:	d10e      	bne.n	801b2ca <_scanf_float+0x1d2>
 801b2ac:	6822      	ldr	r2, [r4, #0]
 801b2ae:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b2b2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b2b6:	d108      	bne.n	801b2ca <_scanf_float+0x1d2>
 801b2b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b2bc:	6022      	str	r2, [r4, #0]
 801b2be:	f04f 0a01 	mov.w	sl, #1
 801b2c2:	e7e2      	b.n	801b28a <_scanf_float+0x192>
 801b2c4:	f1ba 0f02 	cmp.w	sl, #2
 801b2c8:	d055      	beq.n	801b376 <_scanf_float+0x27e>
 801b2ca:	2d01      	cmp	r5, #1
 801b2cc:	d002      	beq.n	801b2d4 <_scanf_float+0x1dc>
 801b2ce:	2d04      	cmp	r5, #4
 801b2d0:	f47f af44 	bne.w	801b15c <_scanf_float+0x64>
 801b2d4:	3501      	adds	r5, #1
 801b2d6:	b2ed      	uxtb	r5, r5
 801b2d8:	e7d7      	b.n	801b28a <_scanf_float+0x192>
 801b2da:	f1ba 0f01 	cmp.w	sl, #1
 801b2de:	f47f af3d 	bne.w	801b15c <_scanf_float+0x64>
 801b2e2:	f04f 0a02 	mov.w	sl, #2
 801b2e6:	e7d0      	b.n	801b28a <_scanf_float+0x192>
 801b2e8:	b97d      	cbnz	r5, 801b30a <_scanf_float+0x212>
 801b2ea:	f1b9 0f00 	cmp.w	r9, #0
 801b2ee:	f47f af38 	bne.w	801b162 <_scanf_float+0x6a>
 801b2f2:	6822      	ldr	r2, [r4, #0]
 801b2f4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801b2f8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801b2fc:	f040 8108 	bne.w	801b510 <_scanf_float+0x418>
 801b300:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b304:	6022      	str	r2, [r4, #0]
 801b306:	2501      	movs	r5, #1
 801b308:	e7bf      	b.n	801b28a <_scanf_float+0x192>
 801b30a:	2d03      	cmp	r5, #3
 801b30c:	d0e2      	beq.n	801b2d4 <_scanf_float+0x1dc>
 801b30e:	2d05      	cmp	r5, #5
 801b310:	e7de      	b.n	801b2d0 <_scanf_float+0x1d8>
 801b312:	2d02      	cmp	r5, #2
 801b314:	f47f af22 	bne.w	801b15c <_scanf_float+0x64>
 801b318:	2503      	movs	r5, #3
 801b31a:	e7b6      	b.n	801b28a <_scanf_float+0x192>
 801b31c:	2d06      	cmp	r5, #6
 801b31e:	f47f af1d 	bne.w	801b15c <_scanf_float+0x64>
 801b322:	2507      	movs	r5, #7
 801b324:	e7b1      	b.n	801b28a <_scanf_float+0x192>
 801b326:	6822      	ldr	r2, [r4, #0]
 801b328:	0591      	lsls	r1, r2, #22
 801b32a:	f57f af17 	bpl.w	801b15c <_scanf_float+0x64>
 801b32e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801b332:	6022      	str	r2, [r4, #0]
 801b334:	f8cd 9008 	str.w	r9, [sp, #8]
 801b338:	e7a7      	b.n	801b28a <_scanf_float+0x192>
 801b33a:	6822      	ldr	r2, [r4, #0]
 801b33c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801b340:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801b344:	d006      	beq.n	801b354 <_scanf_float+0x25c>
 801b346:	0550      	lsls	r0, r2, #21
 801b348:	f57f af08 	bpl.w	801b15c <_scanf_float+0x64>
 801b34c:	f1b9 0f00 	cmp.w	r9, #0
 801b350:	f000 80de 	beq.w	801b510 <_scanf_float+0x418>
 801b354:	0591      	lsls	r1, r2, #22
 801b356:	bf58      	it	pl
 801b358:	9902      	ldrpl	r1, [sp, #8]
 801b35a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801b35e:	bf58      	it	pl
 801b360:	eba9 0101 	subpl.w	r1, r9, r1
 801b364:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801b368:	bf58      	it	pl
 801b36a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b36e:	6022      	str	r2, [r4, #0]
 801b370:	f04f 0900 	mov.w	r9, #0
 801b374:	e789      	b.n	801b28a <_scanf_float+0x192>
 801b376:	f04f 0a03 	mov.w	sl, #3
 801b37a:	e786      	b.n	801b28a <_scanf_float+0x192>
 801b37c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801b380:	4639      	mov	r1, r7
 801b382:	4640      	mov	r0, r8
 801b384:	4798      	blx	r3
 801b386:	2800      	cmp	r0, #0
 801b388:	f43f aedb 	beq.w	801b142 <_scanf_float+0x4a>
 801b38c:	e6e6      	b.n	801b15c <_scanf_float+0x64>
 801b38e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b392:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b396:	463a      	mov	r2, r7
 801b398:	4640      	mov	r0, r8
 801b39a:	4798      	blx	r3
 801b39c:	6923      	ldr	r3, [r4, #16]
 801b39e:	3b01      	subs	r3, #1
 801b3a0:	6123      	str	r3, [r4, #16]
 801b3a2:	e6e8      	b.n	801b176 <_scanf_float+0x7e>
 801b3a4:	1e6b      	subs	r3, r5, #1
 801b3a6:	2b06      	cmp	r3, #6
 801b3a8:	d824      	bhi.n	801b3f4 <_scanf_float+0x2fc>
 801b3aa:	2d02      	cmp	r5, #2
 801b3ac:	d836      	bhi.n	801b41c <_scanf_float+0x324>
 801b3ae:	9b01      	ldr	r3, [sp, #4]
 801b3b0:	429e      	cmp	r6, r3
 801b3b2:	f67f aee4 	bls.w	801b17e <_scanf_float+0x86>
 801b3b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b3ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b3be:	463a      	mov	r2, r7
 801b3c0:	4640      	mov	r0, r8
 801b3c2:	4798      	blx	r3
 801b3c4:	6923      	ldr	r3, [r4, #16]
 801b3c6:	3b01      	subs	r3, #1
 801b3c8:	6123      	str	r3, [r4, #16]
 801b3ca:	e7f0      	b.n	801b3ae <_scanf_float+0x2b6>
 801b3cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b3d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801b3d4:	463a      	mov	r2, r7
 801b3d6:	4640      	mov	r0, r8
 801b3d8:	4798      	blx	r3
 801b3da:	6923      	ldr	r3, [r4, #16]
 801b3dc:	3b01      	subs	r3, #1
 801b3de:	6123      	str	r3, [r4, #16]
 801b3e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b3e4:	fa5f fa8a 	uxtb.w	sl, sl
 801b3e8:	f1ba 0f02 	cmp.w	sl, #2
 801b3ec:	d1ee      	bne.n	801b3cc <_scanf_float+0x2d4>
 801b3ee:	3d03      	subs	r5, #3
 801b3f0:	b2ed      	uxtb	r5, r5
 801b3f2:	1b76      	subs	r6, r6, r5
 801b3f4:	6823      	ldr	r3, [r4, #0]
 801b3f6:	05da      	lsls	r2, r3, #23
 801b3f8:	d530      	bpl.n	801b45c <_scanf_float+0x364>
 801b3fa:	055b      	lsls	r3, r3, #21
 801b3fc:	d511      	bpl.n	801b422 <_scanf_float+0x32a>
 801b3fe:	9b01      	ldr	r3, [sp, #4]
 801b400:	429e      	cmp	r6, r3
 801b402:	f67f aebc 	bls.w	801b17e <_scanf_float+0x86>
 801b406:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b40a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b40e:	463a      	mov	r2, r7
 801b410:	4640      	mov	r0, r8
 801b412:	4798      	blx	r3
 801b414:	6923      	ldr	r3, [r4, #16]
 801b416:	3b01      	subs	r3, #1
 801b418:	6123      	str	r3, [r4, #16]
 801b41a:	e7f0      	b.n	801b3fe <_scanf_float+0x306>
 801b41c:	46aa      	mov	sl, r5
 801b41e:	46b3      	mov	fp, r6
 801b420:	e7de      	b.n	801b3e0 <_scanf_float+0x2e8>
 801b422:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b426:	6923      	ldr	r3, [r4, #16]
 801b428:	2965      	cmp	r1, #101	@ 0x65
 801b42a:	f103 33ff 	add.w	r3, r3, #4294967295
 801b42e:	f106 35ff 	add.w	r5, r6, #4294967295
 801b432:	6123      	str	r3, [r4, #16]
 801b434:	d00c      	beq.n	801b450 <_scanf_float+0x358>
 801b436:	2945      	cmp	r1, #69	@ 0x45
 801b438:	d00a      	beq.n	801b450 <_scanf_float+0x358>
 801b43a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b43e:	463a      	mov	r2, r7
 801b440:	4640      	mov	r0, r8
 801b442:	4798      	blx	r3
 801b444:	6923      	ldr	r3, [r4, #16]
 801b446:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b44a:	3b01      	subs	r3, #1
 801b44c:	1eb5      	subs	r5, r6, #2
 801b44e:	6123      	str	r3, [r4, #16]
 801b450:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801b454:	463a      	mov	r2, r7
 801b456:	4640      	mov	r0, r8
 801b458:	4798      	blx	r3
 801b45a:	462e      	mov	r6, r5
 801b45c:	6822      	ldr	r2, [r4, #0]
 801b45e:	f012 0210 	ands.w	r2, r2, #16
 801b462:	d001      	beq.n	801b468 <_scanf_float+0x370>
 801b464:	2000      	movs	r0, #0
 801b466:	e68b      	b.n	801b180 <_scanf_float+0x88>
 801b468:	7032      	strb	r2, [r6, #0]
 801b46a:	6823      	ldr	r3, [r4, #0]
 801b46c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801b470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801b474:	d11c      	bne.n	801b4b0 <_scanf_float+0x3b8>
 801b476:	9b02      	ldr	r3, [sp, #8]
 801b478:	454b      	cmp	r3, r9
 801b47a:	eba3 0209 	sub.w	r2, r3, r9
 801b47e:	d123      	bne.n	801b4c8 <_scanf_float+0x3d0>
 801b480:	9901      	ldr	r1, [sp, #4]
 801b482:	2200      	movs	r2, #0
 801b484:	4640      	mov	r0, r8
 801b486:	f7ff f8ef 	bl	801a668 <_strtod_r>
 801b48a:	9b03      	ldr	r3, [sp, #12]
 801b48c:	6821      	ldr	r1, [r4, #0]
 801b48e:	681b      	ldr	r3, [r3, #0]
 801b490:	f011 0f02 	tst.w	r1, #2
 801b494:	ec57 6b10 	vmov	r6, r7, d0
 801b498:	f103 0204 	add.w	r2, r3, #4
 801b49c:	d01f      	beq.n	801b4de <_scanf_float+0x3e6>
 801b49e:	9903      	ldr	r1, [sp, #12]
 801b4a0:	600a      	str	r2, [r1, #0]
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	e9c3 6700 	strd	r6, r7, [r3]
 801b4a8:	68e3      	ldr	r3, [r4, #12]
 801b4aa:	3301      	adds	r3, #1
 801b4ac:	60e3      	str	r3, [r4, #12]
 801b4ae:	e7d9      	b.n	801b464 <_scanf_float+0x36c>
 801b4b0:	9b04      	ldr	r3, [sp, #16]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d0e4      	beq.n	801b480 <_scanf_float+0x388>
 801b4b6:	9905      	ldr	r1, [sp, #20]
 801b4b8:	230a      	movs	r3, #10
 801b4ba:	3101      	adds	r1, #1
 801b4bc:	4640      	mov	r0, r8
 801b4be:	f7ff f9b7 	bl	801a830 <_strtol_r>
 801b4c2:	9b04      	ldr	r3, [sp, #16]
 801b4c4:	9e05      	ldr	r6, [sp, #20]
 801b4c6:	1ac2      	subs	r2, r0, r3
 801b4c8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801b4cc:	429e      	cmp	r6, r3
 801b4ce:	bf28      	it	cs
 801b4d0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801b4d4:	4910      	ldr	r1, [pc, #64]	@ (801b518 <_scanf_float+0x420>)
 801b4d6:	4630      	mov	r0, r6
 801b4d8:	f000 f918 	bl	801b70c <siprintf>
 801b4dc:	e7d0      	b.n	801b480 <_scanf_float+0x388>
 801b4de:	f011 0f04 	tst.w	r1, #4
 801b4e2:	9903      	ldr	r1, [sp, #12]
 801b4e4:	600a      	str	r2, [r1, #0]
 801b4e6:	d1dc      	bne.n	801b4a2 <_scanf_float+0x3aa>
 801b4e8:	681d      	ldr	r5, [r3, #0]
 801b4ea:	4632      	mov	r2, r6
 801b4ec:	463b      	mov	r3, r7
 801b4ee:	4630      	mov	r0, r6
 801b4f0:	4639      	mov	r1, r7
 801b4f2:	f7e5 faf3 	bl	8000adc <__aeabi_dcmpun>
 801b4f6:	b128      	cbz	r0, 801b504 <_scanf_float+0x40c>
 801b4f8:	4808      	ldr	r0, [pc, #32]	@ (801b51c <_scanf_float+0x424>)
 801b4fa:	f000 fa9d 	bl	801ba38 <nanf>
 801b4fe:	ed85 0a00 	vstr	s0, [r5]
 801b502:	e7d1      	b.n	801b4a8 <_scanf_float+0x3b0>
 801b504:	4630      	mov	r0, r6
 801b506:	4639      	mov	r1, r7
 801b508:	f7e5 fb46 	bl	8000b98 <__aeabi_d2f>
 801b50c:	6028      	str	r0, [r5, #0]
 801b50e:	e7cb      	b.n	801b4a8 <_scanf_float+0x3b0>
 801b510:	f04f 0900 	mov.w	r9, #0
 801b514:	e629      	b.n	801b16a <_scanf_float+0x72>
 801b516:	bf00      	nop
 801b518:	08022075 	.word	0x08022075
 801b51c:	0802212e 	.word	0x0802212e

0801b520 <std>:
 801b520:	2300      	movs	r3, #0
 801b522:	b510      	push	{r4, lr}
 801b524:	4604      	mov	r4, r0
 801b526:	e9c0 3300 	strd	r3, r3, [r0]
 801b52a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b52e:	6083      	str	r3, [r0, #8]
 801b530:	8181      	strh	r1, [r0, #12]
 801b532:	6643      	str	r3, [r0, #100]	@ 0x64
 801b534:	81c2      	strh	r2, [r0, #14]
 801b536:	6183      	str	r3, [r0, #24]
 801b538:	4619      	mov	r1, r3
 801b53a:	2208      	movs	r2, #8
 801b53c:	305c      	adds	r0, #92	@ 0x5c
 801b53e:	f000 f948 	bl	801b7d2 <memset>
 801b542:	4b0d      	ldr	r3, [pc, #52]	@ (801b578 <std+0x58>)
 801b544:	6263      	str	r3, [r4, #36]	@ 0x24
 801b546:	4b0d      	ldr	r3, [pc, #52]	@ (801b57c <std+0x5c>)
 801b548:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b54a:	4b0d      	ldr	r3, [pc, #52]	@ (801b580 <std+0x60>)
 801b54c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b54e:	4b0d      	ldr	r3, [pc, #52]	@ (801b584 <std+0x64>)
 801b550:	6323      	str	r3, [r4, #48]	@ 0x30
 801b552:	4b0d      	ldr	r3, [pc, #52]	@ (801b588 <std+0x68>)
 801b554:	6224      	str	r4, [r4, #32]
 801b556:	429c      	cmp	r4, r3
 801b558:	d006      	beq.n	801b568 <std+0x48>
 801b55a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b55e:	4294      	cmp	r4, r2
 801b560:	d002      	beq.n	801b568 <std+0x48>
 801b562:	33d0      	adds	r3, #208	@ 0xd0
 801b564:	429c      	cmp	r4, r3
 801b566:	d105      	bne.n	801b574 <std+0x54>
 801b568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b570:	f000 ba40 	b.w	801b9f4 <__retarget_lock_init_recursive>
 801b574:	bd10      	pop	{r4, pc}
 801b576:	bf00      	nop
 801b578:	0801b74d 	.word	0x0801b74d
 801b57c:	0801b76f 	.word	0x0801b76f
 801b580:	0801b7a7 	.word	0x0801b7a7
 801b584:	0801b7cb 	.word	0x0801b7cb
 801b588:	200032b4 	.word	0x200032b4

0801b58c <stdio_exit_handler>:
 801b58c:	4a02      	ldr	r2, [pc, #8]	@ (801b598 <stdio_exit_handler+0xc>)
 801b58e:	4903      	ldr	r1, [pc, #12]	@ (801b59c <stdio_exit_handler+0x10>)
 801b590:	4803      	ldr	r0, [pc, #12]	@ (801b5a0 <stdio_exit_handler+0x14>)
 801b592:	f000 b869 	b.w	801b668 <_fwalk_sglue>
 801b596:	bf00      	nop
 801b598:	20000148 	.word	0x20000148
 801b59c:	0801ddfd 	.word	0x0801ddfd
 801b5a0:	200002c4 	.word	0x200002c4

0801b5a4 <cleanup_stdio>:
 801b5a4:	6841      	ldr	r1, [r0, #4]
 801b5a6:	4b0c      	ldr	r3, [pc, #48]	@ (801b5d8 <cleanup_stdio+0x34>)
 801b5a8:	4299      	cmp	r1, r3
 801b5aa:	b510      	push	{r4, lr}
 801b5ac:	4604      	mov	r4, r0
 801b5ae:	d001      	beq.n	801b5b4 <cleanup_stdio+0x10>
 801b5b0:	f002 fc24 	bl	801ddfc <_fflush_r>
 801b5b4:	68a1      	ldr	r1, [r4, #8]
 801b5b6:	4b09      	ldr	r3, [pc, #36]	@ (801b5dc <cleanup_stdio+0x38>)
 801b5b8:	4299      	cmp	r1, r3
 801b5ba:	d002      	beq.n	801b5c2 <cleanup_stdio+0x1e>
 801b5bc:	4620      	mov	r0, r4
 801b5be:	f002 fc1d 	bl	801ddfc <_fflush_r>
 801b5c2:	68e1      	ldr	r1, [r4, #12]
 801b5c4:	4b06      	ldr	r3, [pc, #24]	@ (801b5e0 <cleanup_stdio+0x3c>)
 801b5c6:	4299      	cmp	r1, r3
 801b5c8:	d004      	beq.n	801b5d4 <cleanup_stdio+0x30>
 801b5ca:	4620      	mov	r0, r4
 801b5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5d0:	f002 bc14 	b.w	801ddfc <_fflush_r>
 801b5d4:	bd10      	pop	{r4, pc}
 801b5d6:	bf00      	nop
 801b5d8:	200032b4 	.word	0x200032b4
 801b5dc:	2000331c 	.word	0x2000331c
 801b5e0:	20003384 	.word	0x20003384

0801b5e4 <global_stdio_init.part.0>:
 801b5e4:	b510      	push	{r4, lr}
 801b5e6:	4b0b      	ldr	r3, [pc, #44]	@ (801b614 <global_stdio_init.part.0+0x30>)
 801b5e8:	4c0b      	ldr	r4, [pc, #44]	@ (801b618 <global_stdio_init.part.0+0x34>)
 801b5ea:	4a0c      	ldr	r2, [pc, #48]	@ (801b61c <global_stdio_init.part.0+0x38>)
 801b5ec:	601a      	str	r2, [r3, #0]
 801b5ee:	4620      	mov	r0, r4
 801b5f0:	2200      	movs	r2, #0
 801b5f2:	2104      	movs	r1, #4
 801b5f4:	f7ff ff94 	bl	801b520 <std>
 801b5f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b5fc:	2201      	movs	r2, #1
 801b5fe:	2109      	movs	r1, #9
 801b600:	f7ff ff8e 	bl	801b520 <std>
 801b604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b608:	2202      	movs	r2, #2
 801b60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b60e:	2112      	movs	r1, #18
 801b610:	f7ff bf86 	b.w	801b520 <std>
 801b614:	200033ec 	.word	0x200033ec
 801b618:	200032b4 	.word	0x200032b4
 801b61c:	0801b58d 	.word	0x0801b58d

0801b620 <__sfp_lock_acquire>:
 801b620:	4801      	ldr	r0, [pc, #4]	@ (801b628 <__sfp_lock_acquire+0x8>)
 801b622:	f000 b9e8 	b.w	801b9f6 <__retarget_lock_acquire_recursive>
 801b626:	bf00      	nop
 801b628:	200033f5 	.word	0x200033f5

0801b62c <__sfp_lock_release>:
 801b62c:	4801      	ldr	r0, [pc, #4]	@ (801b634 <__sfp_lock_release+0x8>)
 801b62e:	f000 b9e3 	b.w	801b9f8 <__retarget_lock_release_recursive>
 801b632:	bf00      	nop
 801b634:	200033f5 	.word	0x200033f5

0801b638 <__sinit>:
 801b638:	b510      	push	{r4, lr}
 801b63a:	4604      	mov	r4, r0
 801b63c:	f7ff fff0 	bl	801b620 <__sfp_lock_acquire>
 801b640:	6a23      	ldr	r3, [r4, #32]
 801b642:	b11b      	cbz	r3, 801b64c <__sinit+0x14>
 801b644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b648:	f7ff bff0 	b.w	801b62c <__sfp_lock_release>
 801b64c:	4b04      	ldr	r3, [pc, #16]	@ (801b660 <__sinit+0x28>)
 801b64e:	6223      	str	r3, [r4, #32]
 801b650:	4b04      	ldr	r3, [pc, #16]	@ (801b664 <__sinit+0x2c>)
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	2b00      	cmp	r3, #0
 801b656:	d1f5      	bne.n	801b644 <__sinit+0xc>
 801b658:	f7ff ffc4 	bl	801b5e4 <global_stdio_init.part.0>
 801b65c:	e7f2      	b.n	801b644 <__sinit+0xc>
 801b65e:	bf00      	nop
 801b660:	0801b5a5 	.word	0x0801b5a5
 801b664:	200033ec 	.word	0x200033ec

0801b668 <_fwalk_sglue>:
 801b668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b66c:	4607      	mov	r7, r0
 801b66e:	4688      	mov	r8, r1
 801b670:	4614      	mov	r4, r2
 801b672:	2600      	movs	r6, #0
 801b674:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b678:	f1b9 0901 	subs.w	r9, r9, #1
 801b67c:	d505      	bpl.n	801b68a <_fwalk_sglue+0x22>
 801b67e:	6824      	ldr	r4, [r4, #0]
 801b680:	2c00      	cmp	r4, #0
 801b682:	d1f7      	bne.n	801b674 <_fwalk_sglue+0xc>
 801b684:	4630      	mov	r0, r6
 801b686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b68a:	89ab      	ldrh	r3, [r5, #12]
 801b68c:	2b01      	cmp	r3, #1
 801b68e:	d907      	bls.n	801b6a0 <_fwalk_sglue+0x38>
 801b690:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b694:	3301      	adds	r3, #1
 801b696:	d003      	beq.n	801b6a0 <_fwalk_sglue+0x38>
 801b698:	4629      	mov	r1, r5
 801b69a:	4638      	mov	r0, r7
 801b69c:	47c0      	blx	r8
 801b69e:	4306      	orrs	r6, r0
 801b6a0:	3568      	adds	r5, #104	@ 0x68
 801b6a2:	e7e9      	b.n	801b678 <_fwalk_sglue+0x10>

0801b6a4 <sniprintf>:
 801b6a4:	b40c      	push	{r2, r3}
 801b6a6:	b530      	push	{r4, r5, lr}
 801b6a8:	4b17      	ldr	r3, [pc, #92]	@ (801b708 <sniprintf+0x64>)
 801b6aa:	1e0c      	subs	r4, r1, #0
 801b6ac:	681d      	ldr	r5, [r3, #0]
 801b6ae:	b09d      	sub	sp, #116	@ 0x74
 801b6b0:	da08      	bge.n	801b6c4 <sniprintf+0x20>
 801b6b2:	238b      	movs	r3, #139	@ 0x8b
 801b6b4:	602b      	str	r3, [r5, #0]
 801b6b6:	f04f 30ff 	mov.w	r0, #4294967295
 801b6ba:	b01d      	add	sp, #116	@ 0x74
 801b6bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b6c0:	b002      	add	sp, #8
 801b6c2:	4770      	bx	lr
 801b6c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b6c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b6cc:	bf14      	ite	ne
 801b6ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b6d2:	4623      	moveq	r3, r4
 801b6d4:	9304      	str	r3, [sp, #16]
 801b6d6:	9307      	str	r3, [sp, #28]
 801b6d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b6dc:	9002      	str	r0, [sp, #8]
 801b6de:	9006      	str	r0, [sp, #24]
 801b6e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b6e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b6e6:	ab21      	add	r3, sp, #132	@ 0x84
 801b6e8:	a902      	add	r1, sp, #8
 801b6ea:	4628      	mov	r0, r5
 801b6ec:	9301      	str	r3, [sp, #4]
 801b6ee:	f002 f8c3 	bl	801d878 <_svfiprintf_r>
 801b6f2:	1c43      	adds	r3, r0, #1
 801b6f4:	bfbc      	itt	lt
 801b6f6:	238b      	movlt	r3, #139	@ 0x8b
 801b6f8:	602b      	strlt	r3, [r5, #0]
 801b6fa:	2c00      	cmp	r4, #0
 801b6fc:	d0dd      	beq.n	801b6ba <sniprintf+0x16>
 801b6fe:	9b02      	ldr	r3, [sp, #8]
 801b700:	2200      	movs	r2, #0
 801b702:	701a      	strb	r2, [r3, #0]
 801b704:	e7d9      	b.n	801b6ba <sniprintf+0x16>
 801b706:	bf00      	nop
 801b708:	200002c0 	.word	0x200002c0

0801b70c <siprintf>:
 801b70c:	b40e      	push	{r1, r2, r3}
 801b70e:	b500      	push	{lr}
 801b710:	b09c      	sub	sp, #112	@ 0x70
 801b712:	ab1d      	add	r3, sp, #116	@ 0x74
 801b714:	9002      	str	r0, [sp, #8]
 801b716:	9006      	str	r0, [sp, #24]
 801b718:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b71c:	4809      	ldr	r0, [pc, #36]	@ (801b744 <siprintf+0x38>)
 801b71e:	9107      	str	r1, [sp, #28]
 801b720:	9104      	str	r1, [sp, #16]
 801b722:	4909      	ldr	r1, [pc, #36]	@ (801b748 <siprintf+0x3c>)
 801b724:	f853 2b04 	ldr.w	r2, [r3], #4
 801b728:	9105      	str	r1, [sp, #20]
 801b72a:	6800      	ldr	r0, [r0, #0]
 801b72c:	9301      	str	r3, [sp, #4]
 801b72e:	a902      	add	r1, sp, #8
 801b730:	f002 f8a2 	bl	801d878 <_svfiprintf_r>
 801b734:	9b02      	ldr	r3, [sp, #8]
 801b736:	2200      	movs	r2, #0
 801b738:	701a      	strb	r2, [r3, #0]
 801b73a:	b01c      	add	sp, #112	@ 0x70
 801b73c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b740:	b003      	add	sp, #12
 801b742:	4770      	bx	lr
 801b744:	200002c0 	.word	0x200002c0
 801b748:	ffff0208 	.word	0xffff0208

0801b74c <__sread>:
 801b74c:	b510      	push	{r4, lr}
 801b74e:	460c      	mov	r4, r1
 801b750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b754:	f000 f8f0 	bl	801b938 <_read_r>
 801b758:	2800      	cmp	r0, #0
 801b75a:	bfab      	itete	ge
 801b75c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b75e:	89a3      	ldrhlt	r3, [r4, #12]
 801b760:	181b      	addge	r3, r3, r0
 801b762:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b766:	bfac      	ite	ge
 801b768:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b76a:	81a3      	strhlt	r3, [r4, #12]
 801b76c:	bd10      	pop	{r4, pc}

0801b76e <__swrite>:
 801b76e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b772:	461f      	mov	r7, r3
 801b774:	898b      	ldrh	r3, [r1, #12]
 801b776:	05db      	lsls	r3, r3, #23
 801b778:	4605      	mov	r5, r0
 801b77a:	460c      	mov	r4, r1
 801b77c:	4616      	mov	r6, r2
 801b77e:	d505      	bpl.n	801b78c <__swrite+0x1e>
 801b780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b784:	2302      	movs	r3, #2
 801b786:	2200      	movs	r2, #0
 801b788:	f000 f8c4 	bl	801b914 <_lseek_r>
 801b78c:	89a3      	ldrh	r3, [r4, #12]
 801b78e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b792:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b796:	81a3      	strh	r3, [r4, #12]
 801b798:	4632      	mov	r2, r6
 801b79a:	463b      	mov	r3, r7
 801b79c:	4628      	mov	r0, r5
 801b79e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b7a2:	f000 b8eb 	b.w	801b97c <_write_r>

0801b7a6 <__sseek>:
 801b7a6:	b510      	push	{r4, lr}
 801b7a8:	460c      	mov	r4, r1
 801b7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7ae:	f000 f8b1 	bl	801b914 <_lseek_r>
 801b7b2:	1c43      	adds	r3, r0, #1
 801b7b4:	89a3      	ldrh	r3, [r4, #12]
 801b7b6:	bf15      	itete	ne
 801b7b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b7ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b7be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b7c2:	81a3      	strheq	r3, [r4, #12]
 801b7c4:	bf18      	it	ne
 801b7c6:	81a3      	strhne	r3, [r4, #12]
 801b7c8:	bd10      	pop	{r4, pc}

0801b7ca <__sclose>:
 801b7ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b7ce:	f000 b891 	b.w	801b8f4 <_close_r>

0801b7d2 <memset>:
 801b7d2:	4402      	add	r2, r0
 801b7d4:	4603      	mov	r3, r0
 801b7d6:	4293      	cmp	r3, r2
 801b7d8:	d100      	bne.n	801b7dc <memset+0xa>
 801b7da:	4770      	bx	lr
 801b7dc:	f803 1b01 	strb.w	r1, [r3], #1
 801b7e0:	e7f9      	b.n	801b7d6 <memset+0x4>

0801b7e2 <strncmp>:
 801b7e2:	b510      	push	{r4, lr}
 801b7e4:	b16a      	cbz	r2, 801b802 <strncmp+0x20>
 801b7e6:	3901      	subs	r1, #1
 801b7e8:	1884      	adds	r4, r0, r2
 801b7ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b7f2:	429a      	cmp	r2, r3
 801b7f4:	d103      	bne.n	801b7fe <strncmp+0x1c>
 801b7f6:	42a0      	cmp	r0, r4
 801b7f8:	d001      	beq.n	801b7fe <strncmp+0x1c>
 801b7fa:	2a00      	cmp	r2, #0
 801b7fc:	d1f5      	bne.n	801b7ea <strncmp+0x8>
 801b7fe:	1ad0      	subs	r0, r2, r3
 801b800:	bd10      	pop	{r4, pc}
 801b802:	4610      	mov	r0, r2
 801b804:	e7fc      	b.n	801b800 <strncmp+0x1e>
	...

0801b808 <strtok>:
 801b808:	4b16      	ldr	r3, [pc, #88]	@ (801b864 <strtok+0x5c>)
 801b80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b80e:	681f      	ldr	r7, [r3, #0]
 801b810:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801b812:	4605      	mov	r5, r0
 801b814:	460e      	mov	r6, r1
 801b816:	b9ec      	cbnz	r4, 801b854 <strtok+0x4c>
 801b818:	2050      	movs	r0, #80	@ 0x50
 801b81a:	f7fe f865 	bl	80198e8 <malloc>
 801b81e:	4602      	mov	r2, r0
 801b820:	6478      	str	r0, [r7, #68]	@ 0x44
 801b822:	b920      	cbnz	r0, 801b82e <strtok+0x26>
 801b824:	4b10      	ldr	r3, [pc, #64]	@ (801b868 <strtok+0x60>)
 801b826:	4811      	ldr	r0, [pc, #68]	@ (801b86c <strtok+0x64>)
 801b828:	215b      	movs	r1, #91	@ 0x5b
 801b82a:	f000 f90b 	bl	801ba44 <__assert_func>
 801b82e:	e9c0 4400 	strd	r4, r4, [r0]
 801b832:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801b836:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801b83a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801b83e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801b842:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801b846:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801b84a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801b84e:	6184      	str	r4, [r0, #24]
 801b850:	7704      	strb	r4, [r0, #28]
 801b852:	6244      	str	r4, [r0, #36]	@ 0x24
 801b854:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b856:	4631      	mov	r1, r6
 801b858:	4628      	mov	r0, r5
 801b85a:	2301      	movs	r3, #1
 801b85c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b860:	f000 b806 	b.w	801b870 <__strtok_r>
 801b864:	200002c0 	.word	0x200002c0
 801b868:	0802207a 	.word	0x0802207a
 801b86c:	08022091 	.word	0x08022091

0801b870 <__strtok_r>:
 801b870:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b872:	4604      	mov	r4, r0
 801b874:	b908      	cbnz	r0, 801b87a <__strtok_r+0xa>
 801b876:	6814      	ldr	r4, [r2, #0]
 801b878:	b144      	cbz	r4, 801b88c <__strtok_r+0x1c>
 801b87a:	4620      	mov	r0, r4
 801b87c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801b880:	460f      	mov	r7, r1
 801b882:	f817 6b01 	ldrb.w	r6, [r7], #1
 801b886:	b91e      	cbnz	r6, 801b890 <__strtok_r+0x20>
 801b888:	b965      	cbnz	r5, 801b8a4 <__strtok_r+0x34>
 801b88a:	6015      	str	r5, [r2, #0]
 801b88c:	2000      	movs	r0, #0
 801b88e:	e005      	b.n	801b89c <__strtok_r+0x2c>
 801b890:	42b5      	cmp	r5, r6
 801b892:	d1f6      	bne.n	801b882 <__strtok_r+0x12>
 801b894:	2b00      	cmp	r3, #0
 801b896:	d1f0      	bne.n	801b87a <__strtok_r+0xa>
 801b898:	6014      	str	r4, [r2, #0]
 801b89a:	7003      	strb	r3, [r0, #0]
 801b89c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b89e:	461c      	mov	r4, r3
 801b8a0:	e00c      	b.n	801b8bc <__strtok_r+0x4c>
 801b8a2:	b915      	cbnz	r5, 801b8aa <__strtok_r+0x3a>
 801b8a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b8a8:	460e      	mov	r6, r1
 801b8aa:	f816 5b01 	ldrb.w	r5, [r6], #1
 801b8ae:	42ab      	cmp	r3, r5
 801b8b0:	d1f7      	bne.n	801b8a2 <__strtok_r+0x32>
 801b8b2:	2b00      	cmp	r3, #0
 801b8b4:	d0f3      	beq.n	801b89e <__strtok_r+0x2e>
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	f804 3c01 	strb.w	r3, [r4, #-1]
 801b8bc:	6014      	str	r4, [r2, #0]
 801b8be:	e7ed      	b.n	801b89c <__strtok_r+0x2c>

0801b8c0 <strstr>:
 801b8c0:	780a      	ldrb	r2, [r1, #0]
 801b8c2:	b570      	push	{r4, r5, r6, lr}
 801b8c4:	b96a      	cbnz	r2, 801b8e2 <strstr+0x22>
 801b8c6:	bd70      	pop	{r4, r5, r6, pc}
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	d109      	bne.n	801b8e0 <strstr+0x20>
 801b8cc:	460c      	mov	r4, r1
 801b8ce:	4605      	mov	r5, r0
 801b8d0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b8d4:	2b00      	cmp	r3, #0
 801b8d6:	d0f6      	beq.n	801b8c6 <strstr+0x6>
 801b8d8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b8dc:	429e      	cmp	r6, r3
 801b8de:	d0f7      	beq.n	801b8d0 <strstr+0x10>
 801b8e0:	3001      	adds	r0, #1
 801b8e2:	7803      	ldrb	r3, [r0, #0]
 801b8e4:	2b00      	cmp	r3, #0
 801b8e6:	d1ef      	bne.n	801b8c8 <strstr+0x8>
 801b8e8:	4618      	mov	r0, r3
 801b8ea:	e7ec      	b.n	801b8c6 <strstr+0x6>

0801b8ec <_localeconv_r>:
 801b8ec:	4800      	ldr	r0, [pc, #0]	@ (801b8f0 <_localeconv_r+0x4>)
 801b8ee:	4770      	bx	lr
 801b8f0:	20000244 	.word	0x20000244

0801b8f4 <_close_r>:
 801b8f4:	b538      	push	{r3, r4, r5, lr}
 801b8f6:	4d06      	ldr	r5, [pc, #24]	@ (801b910 <_close_r+0x1c>)
 801b8f8:	2300      	movs	r3, #0
 801b8fa:	4604      	mov	r4, r0
 801b8fc:	4608      	mov	r0, r1
 801b8fe:	602b      	str	r3, [r5, #0]
 801b900:	f7ea fee8 	bl	80066d4 <_close>
 801b904:	1c43      	adds	r3, r0, #1
 801b906:	d102      	bne.n	801b90e <_close_r+0x1a>
 801b908:	682b      	ldr	r3, [r5, #0]
 801b90a:	b103      	cbz	r3, 801b90e <_close_r+0x1a>
 801b90c:	6023      	str	r3, [r4, #0]
 801b90e:	bd38      	pop	{r3, r4, r5, pc}
 801b910:	200033f0 	.word	0x200033f0

0801b914 <_lseek_r>:
 801b914:	b538      	push	{r3, r4, r5, lr}
 801b916:	4d07      	ldr	r5, [pc, #28]	@ (801b934 <_lseek_r+0x20>)
 801b918:	4604      	mov	r4, r0
 801b91a:	4608      	mov	r0, r1
 801b91c:	4611      	mov	r1, r2
 801b91e:	2200      	movs	r2, #0
 801b920:	602a      	str	r2, [r5, #0]
 801b922:	461a      	mov	r2, r3
 801b924:	f7ea fefd 	bl	8006722 <_lseek>
 801b928:	1c43      	adds	r3, r0, #1
 801b92a:	d102      	bne.n	801b932 <_lseek_r+0x1e>
 801b92c:	682b      	ldr	r3, [r5, #0]
 801b92e:	b103      	cbz	r3, 801b932 <_lseek_r+0x1e>
 801b930:	6023      	str	r3, [r4, #0]
 801b932:	bd38      	pop	{r3, r4, r5, pc}
 801b934:	200033f0 	.word	0x200033f0

0801b938 <_read_r>:
 801b938:	b538      	push	{r3, r4, r5, lr}
 801b93a:	4d07      	ldr	r5, [pc, #28]	@ (801b958 <_read_r+0x20>)
 801b93c:	4604      	mov	r4, r0
 801b93e:	4608      	mov	r0, r1
 801b940:	4611      	mov	r1, r2
 801b942:	2200      	movs	r2, #0
 801b944:	602a      	str	r2, [r5, #0]
 801b946:	461a      	mov	r2, r3
 801b948:	f7ea fe8b 	bl	8006662 <_read>
 801b94c:	1c43      	adds	r3, r0, #1
 801b94e:	d102      	bne.n	801b956 <_read_r+0x1e>
 801b950:	682b      	ldr	r3, [r5, #0]
 801b952:	b103      	cbz	r3, 801b956 <_read_r+0x1e>
 801b954:	6023      	str	r3, [r4, #0]
 801b956:	bd38      	pop	{r3, r4, r5, pc}
 801b958:	200033f0 	.word	0x200033f0

0801b95c <_sbrk_r>:
 801b95c:	b538      	push	{r3, r4, r5, lr}
 801b95e:	4d06      	ldr	r5, [pc, #24]	@ (801b978 <_sbrk_r+0x1c>)
 801b960:	2300      	movs	r3, #0
 801b962:	4604      	mov	r4, r0
 801b964:	4608      	mov	r0, r1
 801b966:	602b      	str	r3, [r5, #0]
 801b968:	f7ea fee8 	bl	800673c <_sbrk>
 801b96c:	1c43      	adds	r3, r0, #1
 801b96e:	d102      	bne.n	801b976 <_sbrk_r+0x1a>
 801b970:	682b      	ldr	r3, [r5, #0]
 801b972:	b103      	cbz	r3, 801b976 <_sbrk_r+0x1a>
 801b974:	6023      	str	r3, [r4, #0]
 801b976:	bd38      	pop	{r3, r4, r5, pc}
 801b978:	200033f0 	.word	0x200033f0

0801b97c <_write_r>:
 801b97c:	b538      	push	{r3, r4, r5, lr}
 801b97e:	4d07      	ldr	r5, [pc, #28]	@ (801b99c <_write_r+0x20>)
 801b980:	4604      	mov	r4, r0
 801b982:	4608      	mov	r0, r1
 801b984:	4611      	mov	r1, r2
 801b986:	2200      	movs	r2, #0
 801b988:	602a      	str	r2, [r5, #0]
 801b98a:	461a      	mov	r2, r3
 801b98c:	f7ea fe86 	bl	800669c <_write>
 801b990:	1c43      	adds	r3, r0, #1
 801b992:	d102      	bne.n	801b99a <_write_r+0x1e>
 801b994:	682b      	ldr	r3, [r5, #0]
 801b996:	b103      	cbz	r3, 801b99a <_write_r+0x1e>
 801b998:	6023      	str	r3, [r4, #0]
 801b99a:	bd38      	pop	{r3, r4, r5, pc}
 801b99c:	200033f0 	.word	0x200033f0

0801b9a0 <__errno>:
 801b9a0:	4b01      	ldr	r3, [pc, #4]	@ (801b9a8 <__errno+0x8>)
 801b9a2:	6818      	ldr	r0, [r3, #0]
 801b9a4:	4770      	bx	lr
 801b9a6:	bf00      	nop
 801b9a8:	200002c0 	.word	0x200002c0

0801b9ac <__libc_init_array>:
 801b9ac:	b570      	push	{r4, r5, r6, lr}
 801b9ae:	4d0d      	ldr	r5, [pc, #52]	@ (801b9e4 <__libc_init_array+0x38>)
 801b9b0:	4c0d      	ldr	r4, [pc, #52]	@ (801b9e8 <__libc_init_array+0x3c>)
 801b9b2:	1b64      	subs	r4, r4, r5
 801b9b4:	10a4      	asrs	r4, r4, #2
 801b9b6:	2600      	movs	r6, #0
 801b9b8:	42a6      	cmp	r6, r4
 801b9ba:	d109      	bne.n	801b9d0 <__libc_init_array+0x24>
 801b9bc:	4d0b      	ldr	r5, [pc, #44]	@ (801b9ec <__libc_init_array+0x40>)
 801b9be:	4c0c      	ldr	r4, [pc, #48]	@ (801b9f0 <__libc_init_array+0x44>)
 801b9c0:	f004 f99a 	bl	801fcf8 <_init>
 801b9c4:	1b64      	subs	r4, r4, r5
 801b9c6:	10a4      	asrs	r4, r4, #2
 801b9c8:	2600      	movs	r6, #0
 801b9ca:	42a6      	cmp	r6, r4
 801b9cc:	d105      	bne.n	801b9da <__libc_init_array+0x2e>
 801b9ce:	bd70      	pop	{r4, r5, r6, pc}
 801b9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 801b9d4:	4798      	blx	r3
 801b9d6:	3601      	adds	r6, #1
 801b9d8:	e7ee      	b.n	801b9b8 <__libc_init_array+0xc>
 801b9da:	f855 3b04 	ldr.w	r3, [r5], #4
 801b9de:	4798      	blx	r3
 801b9e0:	3601      	adds	r6, #1
 801b9e2:	e7f2      	b.n	801b9ca <__libc_init_array+0x1e>
 801b9e4:	08022570 	.word	0x08022570
 801b9e8:	08022570 	.word	0x08022570
 801b9ec:	08022570 	.word	0x08022570
 801b9f0:	08022574 	.word	0x08022574

0801b9f4 <__retarget_lock_init_recursive>:
 801b9f4:	4770      	bx	lr

0801b9f6 <__retarget_lock_acquire_recursive>:
 801b9f6:	4770      	bx	lr

0801b9f8 <__retarget_lock_release_recursive>:
 801b9f8:	4770      	bx	lr

0801b9fa <strcpy>:
 801b9fa:	4603      	mov	r3, r0
 801b9fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba00:	f803 2b01 	strb.w	r2, [r3], #1
 801ba04:	2a00      	cmp	r2, #0
 801ba06:	d1f9      	bne.n	801b9fc <strcpy+0x2>
 801ba08:	4770      	bx	lr

0801ba0a <memcpy>:
 801ba0a:	440a      	add	r2, r1
 801ba0c:	4291      	cmp	r1, r2
 801ba0e:	f100 33ff 	add.w	r3, r0, #4294967295
 801ba12:	d100      	bne.n	801ba16 <memcpy+0xc>
 801ba14:	4770      	bx	lr
 801ba16:	b510      	push	{r4, lr}
 801ba18:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba20:	4291      	cmp	r1, r2
 801ba22:	d1f9      	bne.n	801ba18 <memcpy+0xe>
 801ba24:	bd10      	pop	{r4, pc}
	...

0801ba28 <nan>:
 801ba28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801ba30 <nan+0x8>
 801ba2c:	4770      	bx	lr
 801ba2e:	bf00      	nop
 801ba30:	00000000 	.word	0x00000000
 801ba34:	7ff80000 	.word	0x7ff80000

0801ba38 <nanf>:
 801ba38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ba40 <nanf+0x8>
 801ba3c:	4770      	bx	lr
 801ba3e:	bf00      	nop
 801ba40:	7fc00000 	.word	0x7fc00000

0801ba44 <__assert_func>:
 801ba44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ba46:	4614      	mov	r4, r2
 801ba48:	461a      	mov	r2, r3
 801ba4a:	4b09      	ldr	r3, [pc, #36]	@ (801ba70 <__assert_func+0x2c>)
 801ba4c:	681b      	ldr	r3, [r3, #0]
 801ba4e:	4605      	mov	r5, r0
 801ba50:	68d8      	ldr	r0, [r3, #12]
 801ba52:	b954      	cbnz	r4, 801ba6a <__assert_func+0x26>
 801ba54:	4b07      	ldr	r3, [pc, #28]	@ (801ba74 <__assert_func+0x30>)
 801ba56:	461c      	mov	r4, r3
 801ba58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ba5c:	9100      	str	r1, [sp, #0]
 801ba5e:	462b      	mov	r3, r5
 801ba60:	4905      	ldr	r1, [pc, #20]	@ (801ba78 <__assert_func+0x34>)
 801ba62:	f002 f9f3 	bl	801de4c <fiprintf>
 801ba66:	f002 fab1 	bl	801dfcc <abort>
 801ba6a:	4b04      	ldr	r3, [pc, #16]	@ (801ba7c <__assert_func+0x38>)
 801ba6c:	e7f4      	b.n	801ba58 <__assert_func+0x14>
 801ba6e:	bf00      	nop
 801ba70:	200002c0 	.word	0x200002c0
 801ba74:	0802212e 	.word	0x0802212e
 801ba78:	08022100 	.word	0x08022100
 801ba7c:	080220f3 	.word	0x080220f3

0801ba80 <quorem>:
 801ba80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba84:	6903      	ldr	r3, [r0, #16]
 801ba86:	690c      	ldr	r4, [r1, #16]
 801ba88:	42a3      	cmp	r3, r4
 801ba8a:	4607      	mov	r7, r0
 801ba8c:	db7e      	blt.n	801bb8c <quorem+0x10c>
 801ba8e:	3c01      	subs	r4, #1
 801ba90:	f101 0814 	add.w	r8, r1, #20
 801ba94:	00a3      	lsls	r3, r4, #2
 801ba96:	f100 0514 	add.w	r5, r0, #20
 801ba9a:	9300      	str	r3, [sp, #0]
 801ba9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801baa0:	9301      	str	r3, [sp, #4]
 801baa2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801baa6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801baaa:	3301      	adds	r3, #1
 801baac:	429a      	cmp	r2, r3
 801baae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801bab2:	fbb2 f6f3 	udiv	r6, r2, r3
 801bab6:	d32e      	bcc.n	801bb16 <quorem+0x96>
 801bab8:	f04f 0a00 	mov.w	sl, #0
 801babc:	46c4      	mov	ip, r8
 801babe:	46ae      	mov	lr, r5
 801bac0:	46d3      	mov	fp, sl
 801bac2:	f85c 3b04 	ldr.w	r3, [ip], #4
 801bac6:	b298      	uxth	r0, r3
 801bac8:	fb06 a000 	mla	r0, r6, r0, sl
 801bacc:	0c02      	lsrs	r2, r0, #16
 801bace:	0c1b      	lsrs	r3, r3, #16
 801bad0:	fb06 2303 	mla	r3, r6, r3, r2
 801bad4:	f8de 2000 	ldr.w	r2, [lr]
 801bad8:	b280      	uxth	r0, r0
 801bada:	b292      	uxth	r2, r2
 801badc:	1a12      	subs	r2, r2, r0
 801bade:	445a      	add	r2, fp
 801bae0:	f8de 0000 	ldr.w	r0, [lr]
 801bae4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bae8:	b29b      	uxth	r3, r3
 801baea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801baee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801baf2:	b292      	uxth	r2, r2
 801baf4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801baf8:	45e1      	cmp	r9, ip
 801bafa:	f84e 2b04 	str.w	r2, [lr], #4
 801bafe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801bb02:	d2de      	bcs.n	801bac2 <quorem+0x42>
 801bb04:	9b00      	ldr	r3, [sp, #0]
 801bb06:	58eb      	ldr	r3, [r5, r3]
 801bb08:	b92b      	cbnz	r3, 801bb16 <quorem+0x96>
 801bb0a:	9b01      	ldr	r3, [sp, #4]
 801bb0c:	3b04      	subs	r3, #4
 801bb0e:	429d      	cmp	r5, r3
 801bb10:	461a      	mov	r2, r3
 801bb12:	d32f      	bcc.n	801bb74 <quorem+0xf4>
 801bb14:	613c      	str	r4, [r7, #16]
 801bb16:	4638      	mov	r0, r7
 801bb18:	f001 fc58 	bl	801d3cc <__mcmp>
 801bb1c:	2800      	cmp	r0, #0
 801bb1e:	db25      	blt.n	801bb6c <quorem+0xec>
 801bb20:	4629      	mov	r1, r5
 801bb22:	2000      	movs	r0, #0
 801bb24:	f858 2b04 	ldr.w	r2, [r8], #4
 801bb28:	f8d1 c000 	ldr.w	ip, [r1]
 801bb2c:	fa1f fe82 	uxth.w	lr, r2
 801bb30:	fa1f f38c 	uxth.w	r3, ip
 801bb34:	eba3 030e 	sub.w	r3, r3, lr
 801bb38:	4403      	add	r3, r0
 801bb3a:	0c12      	lsrs	r2, r2, #16
 801bb3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801bb40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801bb44:	b29b      	uxth	r3, r3
 801bb46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bb4a:	45c1      	cmp	r9, r8
 801bb4c:	f841 3b04 	str.w	r3, [r1], #4
 801bb50:	ea4f 4022 	mov.w	r0, r2, asr #16
 801bb54:	d2e6      	bcs.n	801bb24 <quorem+0xa4>
 801bb56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bb5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bb5e:	b922      	cbnz	r2, 801bb6a <quorem+0xea>
 801bb60:	3b04      	subs	r3, #4
 801bb62:	429d      	cmp	r5, r3
 801bb64:	461a      	mov	r2, r3
 801bb66:	d30b      	bcc.n	801bb80 <quorem+0x100>
 801bb68:	613c      	str	r4, [r7, #16]
 801bb6a:	3601      	adds	r6, #1
 801bb6c:	4630      	mov	r0, r6
 801bb6e:	b003      	add	sp, #12
 801bb70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb74:	6812      	ldr	r2, [r2, #0]
 801bb76:	3b04      	subs	r3, #4
 801bb78:	2a00      	cmp	r2, #0
 801bb7a:	d1cb      	bne.n	801bb14 <quorem+0x94>
 801bb7c:	3c01      	subs	r4, #1
 801bb7e:	e7c6      	b.n	801bb0e <quorem+0x8e>
 801bb80:	6812      	ldr	r2, [r2, #0]
 801bb82:	3b04      	subs	r3, #4
 801bb84:	2a00      	cmp	r2, #0
 801bb86:	d1ef      	bne.n	801bb68 <quorem+0xe8>
 801bb88:	3c01      	subs	r4, #1
 801bb8a:	e7ea      	b.n	801bb62 <quorem+0xe2>
 801bb8c:	2000      	movs	r0, #0
 801bb8e:	e7ee      	b.n	801bb6e <quorem+0xee>

0801bb90 <_dtoa_r>:
 801bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb94:	69c7      	ldr	r7, [r0, #28]
 801bb96:	b099      	sub	sp, #100	@ 0x64
 801bb98:	ed8d 0b02 	vstr	d0, [sp, #8]
 801bb9c:	ec55 4b10 	vmov	r4, r5, d0
 801bba0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801bba2:	9109      	str	r1, [sp, #36]	@ 0x24
 801bba4:	4683      	mov	fp, r0
 801bba6:	920e      	str	r2, [sp, #56]	@ 0x38
 801bba8:	9313      	str	r3, [sp, #76]	@ 0x4c
 801bbaa:	b97f      	cbnz	r7, 801bbcc <_dtoa_r+0x3c>
 801bbac:	2010      	movs	r0, #16
 801bbae:	f7fd fe9b 	bl	80198e8 <malloc>
 801bbb2:	4602      	mov	r2, r0
 801bbb4:	f8cb 001c 	str.w	r0, [fp, #28]
 801bbb8:	b920      	cbnz	r0, 801bbc4 <_dtoa_r+0x34>
 801bbba:	4ba7      	ldr	r3, [pc, #668]	@ (801be58 <_dtoa_r+0x2c8>)
 801bbbc:	21ef      	movs	r1, #239	@ 0xef
 801bbbe:	48a7      	ldr	r0, [pc, #668]	@ (801be5c <_dtoa_r+0x2cc>)
 801bbc0:	f7ff ff40 	bl	801ba44 <__assert_func>
 801bbc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801bbc8:	6007      	str	r7, [r0, #0]
 801bbca:	60c7      	str	r7, [r0, #12]
 801bbcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bbd0:	6819      	ldr	r1, [r3, #0]
 801bbd2:	b159      	cbz	r1, 801bbec <_dtoa_r+0x5c>
 801bbd4:	685a      	ldr	r2, [r3, #4]
 801bbd6:	604a      	str	r2, [r1, #4]
 801bbd8:	2301      	movs	r3, #1
 801bbda:	4093      	lsls	r3, r2
 801bbdc:	608b      	str	r3, [r1, #8]
 801bbde:	4658      	mov	r0, fp
 801bbe0:	f001 f970 	bl	801cec4 <_Bfree>
 801bbe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801bbe8:	2200      	movs	r2, #0
 801bbea:	601a      	str	r2, [r3, #0]
 801bbec:	1e2b      	subs	r3, r5, #0
 801bbee:	bfb9      	ittee	lt
 801bbf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801bbf4:	9303      	strlt	r3, [sp, #12]
 801bbf6:	2300      	movge	r3, #0
 801bbf8:	6033      	strge	r3, [r6, #0]
 801bbfa:	9f03      	ldr	r7, [sp, #12]
 801bbfc:	4b98      	ldr	r3, [pc, #608]	@ (801be60 <_dtoa_r+0x2d0>)
 801bbfe:	bfbc      	itt	lt
 801bc00:	2201      	movlt	r2, #1
 801bc02:	6032      	strlt	r2, [r6, #0]
 801bc04:	43bb      	bics	r3, r7
 801bc06:	d112      	bne.n	801bc2e <_dtoa_r+0x9e>
 801bc08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bc0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801bc0e:	6013      	str	r3, [r2, #0]
 801bc10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bc14:	4323      	orrs	r3, r4
 801bc16:	f000 854d 	beq.w	801c6b4 <_dtoa_r+0xb24>
 801bc1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bc1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801be74 <_dtoa_r+0x2e4>
 801bc20:	2b00      	cmp	r3, #0
 801bc22:	f000 854f 	beq.w	801c6c4 <_dtoa_r+0xb34>
 801bc26:	f10a 0303 	add.w	r3, sl, #3
 801bc2a:	f000 bd49 	b.w	801c6c0 <_dtoa_r+0xb30>
 801bc2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bc32:	2200      	movs	r2, #0
 801bc34:	ec51 0b17 	vmov	r0, r1, d7
 801bc38:	2300      	movs	r3, #0
 801bc3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801bc3e:	f7e4 ff1b 	bl	8000a78 <__aeabi_dcmpeq>
 801bc42:	4680      	mov	r8, r0
 801bc44:	b158      	cbz	r0, 801bc5e <_dtoa_r+0xce>
 801bc46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bc48:	2301      	movs	r3, #1
 801bc4a:	6013      	str	r3, [r2, #0]
 801bc4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801bc4e:	b113      	cbz	r3, 801bc56 <_dtoa_r+0xc6>
 801bc50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801bc52:	4b84      	ldr	r3, [pc, #528]	@ (801be64 <_dtoa_r+0x2d4>)
 801bc54:	6013      	str	r3, [r2, #0]
 801bc56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801be78 <_dtoa_r+0x2e8>
 801bc5a:	f000 bd33 	b.w	801c6c4 <_dtoa_r+0xb34>
 801bc5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801bc62:	aa16      	add	r2, sp, #88	@ 0x58
 801bc64:	a917      	add	r1, sp, #92	@ 0x5c
 801bc66:	4658      	mov	r0, fp
 801bc68:	f001 fcd0 	bl	801d60c <__d2b>
 801bc6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801bc70:	4681      	mov	r9, r0
 801bc72:	2e00      	cmp	r6, #0
 801bc74:	d077      	beq.n	801bd66 <_dtoa_r+0x1d6>
 801bc76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bc78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801bc7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bc80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bc84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801bc88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801bc8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801bc90:	4619      	mov	r1, r3
 801bc92:	2200      	movs	r2, #0
 801bc94:	4b74      	ldr	r3, [pc, #464]	@ (801be68 <_dtoa_r+0x2d8>)
 801bc96:	f7e4 facf 	bl	8000238 <__aeabi_dsub>
 801bc9a:	a369      	add	r3, pc, #420	@ (adr r3, 801be40 <_dtoa_r+0x2b0>)
 801bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bca0:	f7e4 fc82 	bl	80005a8 <__aeabi_dmul>
 801bca4:	a368      	add	r3, pc, #416	@ (adr r3, 801be48 <_dtoa_r+0x2b8>)
 801bca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcaa:	f7e4 fac7 	bl	800023c <__adddf3>
 801bcae:	4604      	mov	r4, r0
 801bcb0:	4630      	mov	r0, r6
 801bcb2:	460d      	mov	r5, r1
 801bcb4:	f7e4 fc0e 	bl	80004d4 <__aeabi_i2d>
 801bcb8:	a365      	add	r3, pc, #404	@ (adr r3, 801be50 <_dtoa_r+0x2c0>)
 801bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcbe:	f7e4 fc73 	bl	80005a8 <__aeabi_dmul>
 801bcc2:	4602      	mov	r2, r0
 801bcc4:	460b      	mov	r3, r1
 801bcc6:	4620      	mov	r0, r4
 801bcc8:	4629      	mov	r1, r5
 801bcca:	f7e4 fab7 	bl	800023c <__adddf3>
 801bcce:	4604      	mov	r4, r0
 801bcd0:	460d      	mov	r5, r1
 801bcd2:	f7e4 ff19 	bl	8000b08 <__aeabi_d2iz>
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	4607      	mov	r7, r0
 801bcda:	2300      	movs	r3, #0
 801bcdc:	4620      	mov	r0, r4
 801bcde:	4629      	mov	r1, r5
 801bce0:	f7e4 fed4 	bl	8000a8c <__aeabi_dcmplt>
 801bce4:	b140      	cbz	r0, 801bcf8 <_dtoa_r+0x168>
 801bce6:	4638      	mov	r0, r7
 801bce8:	f7e4 fbf4 	bl	80004d4 <__aeabi_i2d>
 801bcec:	4622      	mov	r2, r4
 801bcee:	462b      	mov	r3, r5
 801bcf0:	f7e4 fec2 	bl	8000a78 <__aeabi_dcmpeq>
 801bcf4:	b900      	cbnz	r0, 801bcf8 <_dtoa_r+0x168>
 801bcf6:	3f01      	subs	r7, #1
 801bcf8:	2f16      	cmp	r7, #22
 801bcfa:	d851      	bhi.n	801bda0 <_dtoa_r+0x210>
 801bcfc:	4b5b      	ldr	r3, [pc, #364]	@ (801be6c <_dtoa_r+0x2dc>)
 801bcfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bd0a:	f7e4 febf 	bl	8000a8c <__aeabi_dcmplt>
 801bd0e:	2800      	cmp	r0, #0
 801bd10:	d048      	beq.n	801bda4 <_dtoa_r+0x214>
 801bd12:	3f01      	subs	r7, #1
 801bd14:	2300      	movs	r3, #0
 801bd16:	9312      	str	r3, [sp, #72]	@ 0x48
 801bd18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bd1a:	1b9b      	subs	r3, r3, r6
 801bd1c:	1e5a      	subs	r2, r3, #1
 801bd1e:	bf44      	itt	mi
 801bd20:	f1c3 0801 	rsbmi	r8, r3, #1
 801bd24:	2300      	movmi	r3, #0
 801bd26:	9208      	str	r2, [sp, #32]
 801bd28:	bf54      	ite	pl
 801bd2a:	f04f 0800 	movpl.w	r8, #0
 801bd2e:	9308      	strmi	r3, [sp, #32]
 801bd30:	2f00      	cmp	r7, #0
 801bd32:	db39      	blt.n	801bda8 <_dtoa_r+0x218>
 801bd34:	9b08      	ldr	r3, [sp, #32]
 801bd36:	970f      	str	r7, [sp, #60]	@ 0x3c
 801bd38:	443b      	add	r3, r7
 801bd3a:	9308      	str	r3, [sp, #32]
 801bd3c:	2300      	movs	r3, #0
 801bd3e:	930a      	str	r3, [sp, #40]	@ 0x28
 801bd40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd42:	2b09      	cmp	r3, #9
 801bd44:	d864      	bhi.n	801be10 <_dtoa_r+0x280>
 801bd46:	2b05      	cmp	r3, #5
 801bd48:	bfc4      	itt	gt
 801bd4a:	3b04      	subgt	r3, #4
 801bd4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801bd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bd50:	f1a3 0302 	sub.w	r3, r3, #2
 801bd54:	bfcc      	ite	gt
 801bd56:	2400      	movgt	r4, #0
 801bd58:	2401      	movle	r4, #1
 801bd5a:	2b03      	cmp	r3, #3
 801bd5c:	d863      	bhi.n	801be26 <_dtoa_r+0x296>
 801bd5e:	e8df f003 	tbb	[pc, r3]
 801bd62:	372a      	.short	0x372a
 801bd64:	5535      	.short	0x5535
 801bd66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801bd6a:	441e      	add	r6, r3
 801bd6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801bd70:	2b20      	cmp	r3, #32
 801bd72:	bfc1      	itttt	gt
 801bd74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801bd78:	409f      	lslgt	r7, r3
 801bd7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801bd7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 801bd82:	bfd6      	itet	le
 801bd84:	f1c3 0320 	rsble	r3, r3, #32
 801bd88:	ea47 0003 	orrgt.w	r0, r7, r3
 801bd8c:	fa04 f003 	lslle.w	r0, r4, r3
 801bd90:	f7e4 fb90 	bl	80004b4 <__aeabi_ui2d>
 801bd94:	2201      	movs	r2, #1
 801bd96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801bd9a:	3e01      	subs	r6, #1
 801bd9c:	9214      	str	r2, [sp, #80]	@ 0x50
 801bd9e:	e777      	b.n	801bc90 <_dtoa_r+0x100>
 801bda0:	2301      	movs	r3, #1
 801bda2:	e7b8      	b.n	801bd16 <_dtoa_r+0x186>
 801bda4:	9012      	str	r0, [sp, #72]	@ 0x48
 801bda6:	e7b7      	b.n	801bd18 <_dtoa_r+0x188>
 801bda8:	427b      	negs	r3, r7
 801bdaa:	930a      	str	r3, [sp, #40]	@ 0x28
 801bdac:	2300      	movs	r3, #0
 801bdae:	eba8 0807 	sub.w	r8, r8, r7
 801bdb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bdb4:	e7c4      	b.n	801bd40 <_dtoa_r+0x1b0>
 801bdb6:	2300      	movs	r3, #0
 801bdb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bdba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	dc35      	bgt.n	801be2c <_dtoa_r+0x29c>
 801bdc0:	2301      	movs	r3, #1
 801bdc2:	9300      	str	r3, [sp, #0]
 801bdc4:	9307      	str	r3, [sp, #28]
 801bdc6:	461a      	mov	r2, r3
 801bdc8:	920e      	str	r2, [sp, #56]	@ 0x38
 801bdca:	e00b      	b.n	801bde4 <_dtoa_r+0x254>
 801bdcc:	2301      	movs	r3, #1
 801bdce:	e7f3      	b.n	801bdb8 <_dtoa_r+0x228>
 801bdd0:	2300      	movs	r3, #0
 801bdd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801bdd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bdd6:	18fb      	adds	r3, r7, r3
 801bdd8:	9300      	str	r3, [sp, #0]
 801bdda:	3301      	adds	r3, #1
 801bddc:	2b01      	cmp	r3, #1
 801bdde:	9307      	str	r3, [sp, #28]
 801bde0:	bfb8      	it	lt
 801bde2:	2301      	movlt	r3, #1
 801bde4:	f8db 001c 	ldr.w	r0, [fp, #28]
 801bde8:	2100      	movs	r1, #0
 801bdea:	2204      	movs	r2, #4
 801bdec:	f102 0514 	add.w	r5, r2, #20
 801bdf0:	429d      	cmp	r5, r3
 801bdf2:	d91f      	bls.n	801be34 <_dtoa_r+0x2a4>
 801bdf4:	6041      	str	r1, [r0, #4]
 801bdf6:	4658      	mov	r0, fp
 801bdf8:	f001 f824 	bl	801ce44 <_Balloc>
 801bdfc:	4682      	mov	sl, r0
 801bdfe:	2800      	cmp	r0, #0
 801be00:	d13c      	bne.n	801be7c <_dtoa_r+0x2ec>
 801be02:	4b1b      	ldr	r3, [pc, #108]	@ (801be70 <_dtoa_r+0x2e0>)
 801be04:	4602      	mov	r2, r0
 801be06:	f240 11af 	movw	r1, #431	@ 0x1af
 801be0a:	e6d8      	b.n	801bbbe <_dtoa_r+0x2e>
 801be0c:	2301      	movs	r3, #1
 801be0e:	e7e0      	b.n	801bdd2 <_dtoa_r+0x242>
 801be10:	2401      	movs	r4, #1
 801be12:	2300      	movs	r3, #0
 801be14:	9309      	str	r3, [sp, #36]	@ 0x24
 801be16:	940b      	str	r4, [sp, #44]	@ 0x2c
 801be18:	f04f 33ff 	mov.w	r3, #4294967295
 801be1c:	9300      	str	r3, [sp, #0]
 801be1e:	9307      	str	r3, [sp, #28]
 801be20:	2200      	movs	r2, #0
 801be22:	2312      	movs	r3, #18
 801be24:	e7d0      	b.n	801bdc8 <_dtoa_r+0x238>
 801be26:	2301      	movs	r3, #1
 801be28:	930b      	str	r3, [sp, #44]	@ 0x2c
 801be2a:	e7f5      	b.n	801be18 <_dtoa_r+0x288>
 801be2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801be2e:	9300      	str	r3, [sp, #0]
 801be30:	9307      	str	r3, [sp, #28]
 801be32:	e7d7      	b.n	801bde4 <_dtoa_r+0x254>
 801be34:	3101      	adds	r1, #1
 801be36:	0052      	lsls	r2, r2, #1
 801be38:	e7d8      	b.n	801bdec <_dtoa_r+0x25c>
 801be3a:	bf00      	nop
 801be3c:	f3af 8000 	nop.w
 801be40:	636f4361 	.word	0x636f4361
 801be44:	3fd287a7 	.word	0x3fd287a7
 801be48:	8b60c8b3 	.word	0x8b60c8b3
 801be4c:	3fc68a28 	.word	0x3fc68a28
 801be50:	509f79fb 	.word	0x509f79fb
 801be54:	3fd34413 	.word	0x3fd34413
 801be58:	0802207a 	.word	0x0802207a
 801be5c:	0802213c 	.word	0x0802213c
 801be60:	7ff00000 	.word	0x7ff00000
 801be64:	08022052 	.word	0x08022052
 801be68:	3ff80000 	.word	0x3ff80000
 801be6c:	08022298 	.word	0x08022298
 801be70:	08022194 	.word	0x08022194
 801be74:	08022138 	.word	0x08022138
 801be78:	08022051 	.word	0x08022051
 801be7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801be80:	6018      	str	r0, [r3, #0]
 801be82:	9b07      	ldr	r3, [sp, #28]
 801be84:	2b0e      	cmp	r3, #14
 801be86:	f200 80a4 	bhi.w	801bfd2 <_dtoa_r+0x442>
 801be8a:	2c00      	cmp	r4, #0
 801be8c:	f000 80a1 	beq.w	801bfd2 <_dtoa_r+0x442>
 801be90:	2f00      	cmp	r7, #0
 801be92:	dd33      	ble.n	801befc <_dtoa_r+0x36c>
 801be94:	4bad      	ldr	r3, [pc, #692]	@ (801c14c <_dtoa_r+0x5bc>)
 801be96:	f007 020f 	and.w	r2, r7, #15
 801be9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801be9e:	ed93 7b00 	vldr	d7, [r3]
 801bea2:	05f8      	lsls	r0, r7, #23
 801bea4:	ed8d 7b04 	vstr	d7, [sp, #16]
 801bea8:	ea4f 1427 	mov.w	r4, r7, asr #4
 801beac:	d516      	bpl.n	801bedc <_dtoa_r+0x34c>
 801beae:	4ba8      	ldr	r3, [pc, #672]	@ (801c150 <_dtoa_r+0x5c0>)
 801beb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801beb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801beb8:	f7e4 fca0 	bl	80007fc <__aeabi_ddiv>
 801bebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bec0:	f004 040f 	and.w	r4, r4, #15
 801bec4:	2603      	movs	r6, #3
 801bec6:	4da2      	ldr	r5, [pc, #648]	@ (801c150 <_dtoa_r+0x5c0>)
 801bec8:	b954      	cbnz	r4, 801bee0 <_dtoa_r+0x350>
 801beca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bed2:	f7e4 fc93 	bl	80007fc <__aeabi_ddiv>
 801bed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801beda:	e028      	b.n	801bf2e <_dtoa_r+0x39e>
 801bedc:	2602      	movs	r6, #2
 801bede:	e7f2      	b.n	801bec6 <_dtoa_r+0x336>
 801bee0:	07e1      	lsls	r1, r4, #31
 801bee2:	d508      	bpl.n	801bef6 <_dtoa_r+0x366>
 801bee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 801beec:	f7e4 fb5c 	bl	80005a8 <__aeabi_dmul>
 801bef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bef4:	3601      	adds	r6, #1
 801bef6:	1064      	asrs	r4, r4, #1
 801bef8:	3508      	adds	r5, #8
 801befa:	e7e5      	b.n	801bec8 <_dtoa_r+0x338>
 801befc:	f000 80d2 	beq.w	801c0a4 <_dtoa_r+0x514>
 801bf00:	427c      	negs	r4, r7
 801bf02:	4b92      	ldr	r3, [pc, #584]	@ (801c14c <_dtoa_r+0x5bc>)
 801bf04:	4d92      	ldr	r5, [pc, #584]	@ (801c150 <_dtoa_r+0x5c0>)
 801bf06:	f004 020f 	and.w	r2, r4, #15
 801bf0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801bf16:	f7e4 fb47 	bl	80005a8 <__aeabi_dmul>
 801bf1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf1e:	1124      	asrs	r4, r4, #4
 801bf20:	2300      	movs	r3, #0
 801bf22:	2602      	movs	r6, #2
 801bf24:	2c00      	cmp	r4, #0
 801bf26:	f040 80b2 	bne.w	801c08e <_dtoa_r+0x4fe>
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d1d3      	bne.n	801bed6 <_dtoa_r+0x346>
 801bf2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801bf30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	f000 80b7 	beq.w	801c0a8 <_dtoa_r+0x518>
 801bf3a:	4b86      	ldr	r3, [pc, #536]	@ (801c154 <_dtoa_r+0x5c4>)
 801bf3c:	2200      	movs	r2, #0
 801bf3e:	4620      	mov	r0, r4
 801bf40:	4629      	mov	r1, r5
 801bf42:	f7e4 fda3 	bl	8000a8c <__aeabi_dcmplt>
 801bf46:	2800      	cmp	r0, #0
 801bf48:	f000 80ae 	beq.w	801c0a8 <_dtoa_r+0x518>
 801bf4c:	9b07      	ldr	r3, [sp, #28]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	f000 80aa 	beq.w	801c0a8 <_dtoa_r+0x518>
 801bf54:	9b00      	ldr	r3, [sp, #0]
 801bf56:	2b00      	cmp	r3, #0
 801bf58:	dd37      	ble.n	801bfca <_dtoa_r+0x43a>
 801bf5a:	1e7b      	subs	r3, r7, #1
 801bf5c:	9304      	str	r3, [sp, #16]
 801bf5e:	4620      	mov	r0, r4
 801bf60:	4b7d      	ldr	r3, [pc, #500]	@ (801c158 <_dtoa_r+0x5c8>)
 801bf62:	2200      	movs	r2, #0
 801bf64:	4629      	mov	r1, r5
 801bf66:	f7e4 fb1f 	bl	80005a8 <__aeabi_dmul>
 801bf6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf6e:	9c00      	ldr	r4, [sp, #0]
 801bf70:	3601      	adds	r6, #1
 801bf72:	4630      	mov	r0, r6
 801bf74:	f7e4 faae 	bl	80004d4 <__aeabi_i2d>
 801bf78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf7c:	f7e4 fb14 	bl	80005a8 <__aeabi_dmul>
 801bf80:	4b76      	ldr	r3, [pc, #472]	@ (801c15c <_dtoa_r+0x5cc>)
 801bf82:	2200      	movs	r2, #0
 801bf84:	f7e4 f95a 	bl	800023c <__adddf3>
 801bf88:	4605      	mov	r5, r0
 801bf8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bf8e:	2c00      	cmp	r4, #0
 801bf90:	f040 808d 	bne.w	801c0ae <_dtoa_r+0x51e>
 801bf94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf98:	4b71      	ldr	r3, [pc, #452]	@ (801c160 <_dtoa_r+0x5d0>)
 801bf9a:	2200      	movs	r2, #0
 801bf9c:	f7e4 f94c 	bl	8000238 <__aeabi_dsub>
 801bfa0:	4602      	mov	r2, r0
 801bfa2:	460b      	mov	r3, r1
 801bfa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bfa8:	462a      	mov	r2, r5
 801bfaa:	4633      	mov	r3, r6
 801bfac:	f7e4 fd8c 	bl	8000ac8 <__aeabi_dcmpgt>
 801bfb0:	2800      	cmp	r0, #0
 801bfb2:	f040 828b 	bne.w	801c4cc <_dtoa_r+0x93c>
 801bfb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bfba:	462a      	mov	r2, r5
 801bfbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801bfc0:	f7e4 fd64 	bl	8000a8c <__aeabi_dcmplt>
 801bfc4:	2800      	cmp	r0, #0
 801bfc6:	f040 8128 	bne.w	801c21a <_dtoa_r+0x68a>
 801bfca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801bfce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bfd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bfd4:	2b00      	cmp	r3, #0
 801bfd6:	f2c0 815a 	blt.w	801c28e <_dtoa_r+0x6fe>
 801bfda:	2f0e      	cmp	r7, #14
 801bfdc:	f300 8157 	bgt.w	801c28e <_dtoa_r+0x6fe>
 801bfe0:	4b5a      	ldr	r3, [pc, #360]	@ (801c14c <_dtoa_r+0x5bc>)
 801bfe2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bfe6:	ed93 7b00 	vldr	d7, [r3]
 801bfea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	ed8d 7b00 	vstr	d7, [sp]
 801bff2:	da03      	bge.n	801bffc <_dtoa_r+0x46c>
 801bff4:	9b07      	ldr	r3, [sp, #28]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	f340 8101 	ble.w	801c1fe <_dtoa_r+0x66e>
 801bffc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801c000:	4656      	mov	r6, sl
 801c002:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c006:	4620      	mov	r0, r4
 801c008:	4629      	mov	r1, r5
 801c00a:	f7e4 fbf7 	bl	80007fc <__aeabi_ddiv>
 801c00e:	f7e4 fd7b 	bl	8000b08 <__aeabi_d2iz>
 801c012:	4680      	mov	r8, r0
 801c014:	f7e4 fa5e 	bl	80004d4 <__aeabi_i2d>
 801c018:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c01c:	f7e4 fac4 	bl	80005a8 <__aeabi_dmul>
 801c020:	4602      	mov	r2, r0
 801c022:	460b      	mov	r3, r1
 801c024:	4620      	mov	r0, r4
 801c026:	4629      	mov	r1, r5
 801c028:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801c02c:	f7e4 f904 	bl	8000238 <__aeabi_dsub>
 801c030:	f806 4b01 	strb.w	r4, [r6], #1
 801c034:	9d07      	ldr	r5, [sp, #28]
 801c036:	eba6 040a 	sub.w	r4, r6, sl
 801c03a:	42a5      	cmp	r5, r4
 801c03c:	4602      	mov	r2, r0
 801c03e:	460b      	mov	r3, r1
 801c040:	f040 8117 	bne.w	801c272 <_dtoa_r+0x6e2>
 801c044:	f7e4 f8fa 	bl	800023c <__adddf3>
 801c048:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c04c:	4604      	mov	r4, r0
 801c04e:	460d      	mov	r5, r1
 801c050:	f7e4 fd3a 	bl	8000ac8 <__aeabi_dcmpgt>
 801c054:	2800      	cmp	r0, #0
 801c056:	f040 80f9 	bne.w	801c24c <_dtoa_r+0x6bc>
 801c05a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c05e:	4620      	mov	r0, r4
 801c060:	4629      	mov	r1, r5
 801c062:	f7e4 fd09 	bl	8000a78 <__aeabi_dcmpeq>
 801c066:	b118      	cbz	r0, 801c070 <_dtoa_r+0x4e0>
 801c068:	f018 0f01 	tst.w	r8, #1
 801c06c:	f040 80ee 	bne.w	801c24c <_dtoa_r+0x6bc>
 801c070:	4649      	mov	r1, r9
 801c072:	4658      	mov	r0, fp
 801c074:	f000 ff26 	bl	801cec4 <_Bfree>
 801c078:	2300      	movs	r3, #0
 801c07a:	7033      	strb	r3, [r6, #0]
 801c07c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c07e:	3701      	adds	r7, #1
 801c080:	601f      	str	r7, [r3, #0]
 801c082:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c084:	2b00      	cmp	r3, #0
 801c086:	f000 831d 	beq.w	801c6c4 <_dtoa_r+0xb34>
 801c08a:	601e      	str	r6, [r3, #0]
 801c08c:	e31a      	b.n	801c6c4 <_dtoa_r+0xb34>
 801c08e:	07e2      	lsls	r2, r4, #31
 801c090:	d505      	bpl.n	801c09e <_dtoa_r+0x50e>
 801c092:	e9d5 2300 	ldrd	r2, r3, [r5]
 801c096:	f7e4 fa87 	bl	80005a8 <__aeabi_dmul>
 801c09a:	3601      	adds	r6, #1
 801c09c:	2301      	movs	r3, #1
 801c09e:	1064      	asrs	r4, r4, #1
 801c0a0:	3508      	adds	r5, #8
 801c0a2:	e73f      	b.n	801bf24 <_dtoa_r+0x394>
 801c0a4:	2602      	movs	r6, #2
 801c0a6:	e742      	b.n	801bf2e <_dtoa_r+0x39e>
 801c0a8:	9c07      	ldr	r4, [sp, #28]
 801c0aa:	9704      	str	r7, [sp, #16]
 801c0ac:	e761      	b.n	801bf72 <_dtoa_r+0x3e2>
 801c0ae:	4b27      	ldr	r3, [pc, #156]	@ (801c14c <_dtoa_r+0x5bc>)
 801c0b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c0b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c0b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c0ba:	4454      	add	r4, sl
 801c0bc:	2900      	cmp	r1, #0
 801c0be:	d053      	beq.n	801c168 <_dtoa_r+0x5d8>
 801c0c0:	4928      	ldr	r1, [pc, #160]	@ (801c164 <_dtoa_r+0x5d4>)
 801c0c2:	2000      	movs	r0, #0
 801c0c4:	f7e4 fb9a 	bl	80007fc <__aeabi_ddiv>
 801c0c8:	4633      	mov	r3, r6
 801c0ca:	462a      	mov	r2, r5
 801c0cc:	f7e4 f8b4 	bl	8000238 <__aeabi_dsub>
 801c0d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c0d4:	4656      	mov	r6, sl
 801c0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0da:	f7e4 fd15 	bl	8000b08 <__aeabi_d2iz>
 801c0de:	4605      	mov	r5, r0
 801c0e0:	f7e4 f9f8 	bl	80004d4 <__aeabi_i2d>
 801c0e4:	4602      	mov	r2, r0
 801c0e6:	460b      	mov	r3, r1
 801c0e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c0ec:	f7e4 f8a4 	bl	8000238 <__aeabi_dsub>
 801c0f0:	3530      	adds	r5, #48	@ 0x30
 801c0f2:	4602      	mov	r2, r0
 801c0f4:	460b      	mov	r3, r1
 801c0f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c0fa:	f806 5b01 	strb.w	r5, [r6], #1
 801c0fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c102:	f7e4 fcc3 	bl	8000a8c <__aeabi_dcmplt>
 801c106:	2800      	cmp	r0, #0
 801c108:	d171      	bne.n	801c1ee <_dtoa_r+0x65e>
 801c10a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c10e:	4911      	ldr	r1, [pc, #68]	@ (801c154 <_dtoa_r+0x5c4>)
 801c110:	2000      	movs	r0, #0
 801c112:	f7e4 f891 	bl	8000238 <__aeabi_dsub>
 801c116:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c11a:	f7e4 fcb7 	bl	8000a8c <__aeabi_dcmplt>
 801c11e:	2800      	cmp	r0, #0
 801c120:	f040 8095 	bne.w	801c24e <_dtoa_r+0x6be>
 801c124:	42a6      	cmp	r6, r4
 801c126:	f43f af50 	beq.w	801bfca <_dtoa_r+0x43a>
 801c12a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c12e:	4b0a      	ldr	r3, [pc, #40]	@ (801c158 <_dtoa_r+0x5c8>)
 801c130:	2200      	movs	r2, #0
 801c132:	f7e4 fa39 	bl	80005a8 <__aeabi_dmul>
 801c136:	4b08      	ldr	r3, [pc, #32]	@ (801c158 <_dtoa_r+0x5c8>)
 801c138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c13c:	2200      	movs	r2, #0
 801c13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c142:	f7e4 fa31 	bl	80005a8 <__aeabi_dmul>
 801c146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c14a:	e7c4      	b.n	801c0d6 <_dtoa_r+0x546>
 801c14c:	08022298 	.word	0x08022298
 801c150:	08022270 	.word	0x08022270
 801c154:	3ff00000 	.word	0x3ff00000
 801c158:	40240000 	.word	0x40240000
 801c15c:	401c0000 	.word	0x401c0000
 801c160:	40140000 	.word	0x40140000
 801c164:	3fe00000 	.word	0x3fe00000
 801c168:	4631      	mov	r1, r6
 801c16a:	4628      	mov	r0, r5
 801c16c:	f7e4 fa1c 	bl	80005a8 <__aeabi_dmul>
 801c170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801c174:	9415      	str	r4, [sp, #84]	@ 0x54
 801c176:	4656      	mov	r6, sl
 801c178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c17c:	f7e4 fcc4 	bl	8000b08 <__aeabi_d2iz>
 801c180:	4605      	mov	r5, r0
 801c182:	f7e4 f9a7 	bl	80004d4 <__aeabi_i2d>
 801c186:	4602      	mov	r2, r0
 801c188:	460b      	mov	r3, r1
 801c18a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c18e:	f7e4 f853 	bl	8000238 <__aeabi_dsub>
 801c192:	3530      	adds	r5, #48	@ 0x30
 801c194:	f806 5b01 	strb.w	r5, [r6], #1
 801c198:	4602      	mov	r2, r0
 801c19a:	460b      	mov	r3, r1
 801c19c:	42a6      	cmp	r6, r4
 801c19e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801c1a2:	f04f 0200 	mov.w	r2, #0
 801c1a6:	d124      	bne.n	801c1f2 <_dtoa_r+0x662>
 801c1a8:	4bac      	ldr	r3, [pc, #688]	@ (801c45c <_dtoa_r+0x8cc>)
 801c1aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801c1ae:	f7e4 f845 	bl	800023c <__adddf3>
 801c1b2:	4602      	mov	r2, r0
 801c1b4:	460b      	mov	r3, r1
 801c1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1ba:	f7e4 fc85 	bl	8000ac8 <__aeabi_dcmpgt>
 801c1be:	2800      	cmp	r0, #0
 801c1c0:	d145      	bne.n	801c24e <_dtoa_r+0x6be>
 801c1c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801c1c6:	49a5      	ldr	r1, [pc, #660]	@ (801c45c <_dtoa_r+0x8cc>)
 801c1c8:	2000      	movs	r0, #0
 801c1ca:	f7e4 f835 	bl	8000238 <__aeabi_dsub>
 801c1ce:	4602      	mov	r2, r0
 801c1d0:	460b      	mov	r3, r1
 801c1d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c1d6:	f7e4 fc59 	bl	8000a8c <__aeabi_dcmplt>
 801c1da:	2800      	cmp	r0, #0
 801c1dc:	f43f aef5 	beq.w	801bfca <_dtoa_r+0x43a>
 801c1e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801c1e2:	1e73      	subs	r3, r6, #1
 801c1e4:	9315      	str	r3, [sp, #84]	@ 0x54
 801c1e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c1ea:	2b30      	cmp	r3, #48	@ 0x30
 801c1ec:	d0f8      	beq.n	801c1e0 <_dtoa_r+0x650>
 801c1ee:	9f04      	ldr	r7, [sp, #16]
 801c1f0:	e73e      	b.n	801c070 <_dtoa_r+0x4e0>
 801c1f2:	4b9b      	ldr	r3, [pc, #620]	@ (801c460 <_dtoa_r+0x8d0>)
 801c1f4:	f7e4 f9d8 	bl	80005a8 <__aeabi_dmul>
 801c1f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c1fc:	e7bc      	b.n	801c178 <_dtoa_r+0x5e8>
 801c1fe:	d10c      	bne.n	801c21a <_dtoa_r+0x68a>
 801c200:	4b98      	ldr	r3, [pc, #608]	@ (801c464 <_dtoa_r+0x8d4>)
 801c202:	2200      	movs	r2, #0
 801c204:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c208:	f7e4 f9ce 	bl	80005a8 <__aeabi_dmul>
 801c20c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c210:	f7e4 fc50 	bl	8000ab4 <__aeabi_dcmpge>
 801c214:	2800      	cmp	r0, #0
 801c216:	f000 8157 	beq.w	801c4c8 <_dtoa_r+0x938>
 801c21a:	2400      	movs	r4, #0
 801c21c:	4625      	mov	r5, r4
 801c21e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c220:	43db      	mvns	r3, r3
 801c222:	9304      	str	r3, [sp, #16]
 801c224:	4656      	mov	r6, sl
 801c226:	2700      	movs	r7, #0
 801c228:	4621      	mov	r1, r4
 801c22a:	4658      	mov	r0, fp
 801c22c:	f000 fe4a 	bl	801cec4 <_Bfree>
 801c230:	2d00      	cmp	r5, #0
 801c232:	d0dc      	beq.n	801c1ee <_dtoa_r+0x65e>
 801c234:	b12f      	cbz	r7, 801c242 <_dtoa_r+0x6b2>
 801c236:	42af      	cmp	r7, r5
 801c238:	d003      	beq.n	801c242 <_dtoa_r+0x6b2>
 801c23a:	4639      	mov	r1, r7
 801c23c:	4658      	mov	r0, fp
 801c23e:	f000 fe41 	bl	801cec4 <_Bfree>
 801c242:	4629      	mov	r1, r5
 801c244:	4658      	mov	r0, fp
 801c246:	f000 fe3d 	bl	801cec4 <_Bfree>
 801c24a:	e7d0      	b.n	801c1ee <_dtoa_r+0x65e>
 801c24c:	9704      	str	r7, [sp, #16]
 801c24e:	4633      	mov	r3, r6
 801c250:	461e      	mov	r6, r3
 801c252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c256:	2a39      	cmp	r2, #57	@ 0x39
 801c258:	d107      	bne.n	801c26a <_dtoa_r+0x6da>
 801c25a:	459a      	cmp	sl, r3
 801c25c:	d1f8      	bne.n	801c250 <_dtoa_r+0x6c0>
 801c25e:	9a04      	ldr	r2, [sp, #16]
 801c260:	3201      	adds	r2, #1
 801c262:	9204      	str	r2, [sp, #16]
 801c264:	2230      	movs	r2, #48	@ 0x30
 801c266:	f88a 2000 	strb.w	r2, [sl]
 801c26a:	781a      	ldrb	r2, [r3, #0]
 801c26c:	3201      	adds	r2, #1
 801c26e:	701a      	strb	r2, [r3, #0]
 801c270:	e7bd      	b.n	801c1ee <_dtoa_r+0x65e>
 801c272:	4b7b      	ldr	r3, [pc, #492]	@ (801c460 <_dtoa_r+0x8d0>)
 801c274:	2200      	movs	r2, #0
 801c276:	f7e4 f997 	bl	80005a8 <__aeabi_dmul>
 801c27a:	2200      	movs	r2, #0
 801c27c:	2300      	movs	r3, #0
 801c27e:	4604      	mov	r4, r0
 801c280:	460d      	mov	r5, r1
 801c282:	f7e4 fbf9 	bl	8000a78 <__aeabi_dcmpeq>
 801c286:	2800      	cmp	r0, #0
 801c288:	f43f aebb 	beq.w	801c002 <_dtoa_r+0x472>
 801c28c:	e6f0      	b.n	801c070 <_dtoa_r+0x4e0>
 801c28e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c290:	2a00      	cmp	r2, #0
 801c292:	f000 80db 	beq.w	801c44c <_dtoa_r+0x8bc>
 801c296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c298:	2a01      	cmp	r2, #1
 801c29a:	f300 80bf 	bgt.w	801c41c <_dtoa_r+0x88c>
 801c29e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c2a0:	2a00      	cmp	r2, #0
 801c2a2:	f000 80b7 	beq.w	801c414 <_dtoa_r+0x884>
 801c2a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801c2aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c2ac:	4646      	mov	r6, r8
 801c2ae:	9a08      	ldr	r2, [sp, #32]
 801c2b0:	2101      	movs	r1, #1
 801c2b2:	441a      	add	r2, r3
 801c2b4:	4658      	mov	r0, fp
 801c2b6:	4498      	add	r8, r3
 801c2b8:	9208      	str	r2, [sp, #32]
 801c2ba:	f000 ff01 	bl	801d0c0 <__i2b>
 801c2be:	4605      	mov	r5, r0
 801c2c0:	b15e      	cbz	r6, 801c2da <_dtoa_r+0x74a>
 801c2c2:	9b08      	ldr	r3, [sp, #32]
 801c2c4:	2b00      	cmp	r3, #0
 801c2c6:	dd08      	ble.n	801c2da <_dtoa_r+0x74a>
 801c2c8:	42b3      	cmp	r3, r6
 801c2ca:	9a08      	ldr	r2, [sp, #32]
 801c2cc:	bfa8      	it	ge
 801c2ce:	4633      	movge	r3, r6
 801c2d0:	eba8 0803 	sub.w	r8, r8, r3
 801c2d4:	1af6      	subs	r6, r6, r3
 801c2d6:	1ad3      	subs	r3, r2, r3
 801c2d8:	9308      	str	r3, [sp, #32]
 801c2da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c2dc:	b1f3      	cbz	r3, 801c31c <_dtoa_r+0x78c>
 801c2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	f000 80b7 	beq.w	801c454 <_dtoa_r+0x8c4>
 801c2e6:	b18c      	cbz	r4, 801c30c <_dtoa_r+0x77c>
 801c2e8:	4629      	mov	r1, r5
 801c2ea:	4622      	mov	r2, r4
 801c2ec:	4658      	mov	r0, fp
 801c2ee:	f000 ffa7 	bl	801d240 <__pow5mult>
 801c2f2:	464a      	mov	r2, r9
 801c2f4:	4601      	mov	r1, r0
 801c2f6:	4605      	mov	r5, r0
 801c2f8:	4658      	mov	r0, fp
 801c2fa:	f000 fef7 	bl	801d0ec <__multiply>
 801c2fe:	4649      	mov	r1, r9
 801c300:	9004      	str	r0, [sp, #16]
 801c302:	4658      	mov	r0, fp
 801c304:	f000 fdde 	bl	801cec4 <_Bfree>
 801c308:	9b04      	ldr	r3, [sp, #16]
 801c30a:	4699      	mov	r9, r3
 801c30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c30e:	1b1a      	subs	r2, r3, r4
 801c310:	d004      	beq.n	801c31c <_dtoa_r+0x78c>
 801c312:	4649      	mov	r1, r9
 801c314:	4658      	mov	r0, fp
 801c316:	f000 ff93 	bl	801d240 <__pow5mult>
 801c31a:	4681      	mov	r9, r0
 801c31c:	2101      	movs	r1, #1
 801c31e:	4658      	mov	r0, fp
 801c320:	f000 fece 	bl	801d0c0 <__i2b>
 801c324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c326:	4604      	mov	r4, r0
 801c328:	2b00      	cmp	r3, #0
 801c32a:	f000 81cf 	beq.w	801c6cc <_dtoa_r+0xb3c>
 801c32e:	461a      	mov	r2, r3
 801c330:	4601      	mov	r1, r0
 801c332:	4658      	mov	r0, fp
 801c334:	f000 ff84 	bl	801d240 <__pow5mult>
 801c338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c33a:	2b01      	cmp	r3, #1
 801c33c:	4604      	mov	r4, r0
 801c33e:	f300 8095 	bgt.w	801c46c <_dtoa_r+0x8dc>
 801c342:	9b02      	ldr	r3, [sp, #8]
 801c344:	2b00      	cmp	r3, #0
 801c346:	f040 8087 	bne.w	801c458 <_dtoa_r+0x8c8>
 801c34a:	9b03      	ldr	r3, [sp, #12]
 801c34c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c350:	2b00      	cmp	r3, #0
 801c352:	f040 8089 	bne.w	801c468 <_dtoa_r+0x8d8>
 801c356:	9b03      	ldr	r3, [sp, #12]
 801c358:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c35c:	0d1b      	lsrs	r3, r3, #20
 801c35e:	051b      	lsls	r3, r3, #20
 801c360:	b12b      	cbz	r3, 801c36e <_dtoa_r+0x7de>
 801c362:	9b08      	ldr	r3, [sp, #32]
 801c364:	3301      	adds	r3, #1
 801c366:	9308      	str	r3, [sp, #32]
 801c368:	f108 0801 	add.w	r8, r8, #1
 801c36c:	2301      	movs	r3, #1
 801c36e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c372:	2b00      	cmp	r3, #0
 801c374:	f000 81b0 	beq.w	801c6d8 <_dtoa_r+0xb48>
 801c378:	6923      	ldr	r3, [r4, #16]
 801c37a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c37e:	6918      	ldr	r0, [r3, #16]
 801c380:	f000 fe52 	bl	801d028 <__hi0bits>
 801c384:	f1c0 0020 	rsb	r0, r0, #32
 801c388:	9b08      	ldr	r3, [sp, #32]
 801c38a:	4418      	add	r0, r3
 801c38c:	f010 001f 	ands.w	r0, r0, #31
 801c390:	d077      	beq.n	801c482 <_dtoa_r+0x8f2>
 801c392:	f1c0 0320 	rsb	r3, r0, #32
 801c396:	2b04      	cmp	r3, #4
 801c398:	dd6b      	ble.n	801c472 <_dtoa_r+0x8e2>
 801c39a:	9b08      	ldr	r3, [sp, #32]
 801c39c:	f1c0 001c 	rsb	r0, r0, #28
 801c3a0:	4403      	add	r3, r0
 801c3a2:	4480      	add	r8, r0
 801c3a4:	4406      	add	r6, r0
 801c3a6:	9308      	str	r3, [sp, #32]
 801c3a8:	f1b8 0f00 	cmp.w	r8, #0
 801c3ac:	dd05      	ble.n	801c3ba <_dtoa_r+0x82a>
 801c3ae:	4649      	mov	r1, r9
 801c3b0:	4642      	mov	r2, r8
 801c3b2:	4658      	mov	r0, fp
 801c3b4:	f000 ff9e 	bl	801d2f4 <__lshift>
 801c3b8:	4681      	mov	r9, r0
 801c3ba:	9b08      	ldr	r3, [sp, #32]
 801c3bc:	2b00      	cmp	r3, #0
 801c3be:	dd05      	ble.n	801c3cc <_dtoa_r+0x83c>
 801c3c0:	4621      	mov	r1, r4
 801c3c2:	461a      	mov	r2, r3
 801c3c4:	4658      	mov	r0, fp
 801c3c6:	f000 ff95 	bl	801d2f4 <__lshift>
 801c3ca:	4604      	mov	r4, r0
 801c3cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d059      	beq.n	801c486 <_dtoa_r+0x8f6>
 801c3d2:	4621      	mov	r1, r4
 801c3d4:	4648      	mov	r0, r9
 801c3d6:	f000 fff9 	bl	801d3cc <__mcmp>
 801c3da:	2800      	cmp	r0, #0
 801c3dc:	da53      	bge.n	801c486 <_dtoa_r+0x8f6>
 801c3de:	1e7b      	subs	r3, r7, #1
 801c3e0:	9304      	str	r3, [sp, #16]
 801c3e2:	4649      	mov	r1, r9
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	220a      	movs	r2, #10
 801c3e8:	4658      	mov	r0, fp
 801c3ea:	f000 fd8d 	bl	801cf08 <__multadd>
 801c3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c3f0:	4681      	mov	r9, r0
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	f000 8172 	beq.w	801c6dc <_dtoa_r+0xb4c>
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	4629      	mov	r1, r5
 801c3fc:	220a      	movs	r2, #10
 801c3fe:	4658      	mov	r0, fp
 801c400:	f000 fd82 	bl	801cf08 <__multadd>
 801c404:	9b00      	ldr	r3, [sp, #0]
 801c406:	2b00      	cmp	r3, #0
 801c408:	4605      	mov	r5, r0
 801c40a:	dc67      	bgt.n	801c4dc <_dtoa_r+0x94c>
 801c40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c40e:	2b02      	cmp	r3, #2
 801c410:	dc41      	bgt.n	801c496 <_dtoa_r+0x906>
 801c412:	e063      	b.n	801c4dc <_dtoa_r+0x94c>
 801c414:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c416:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c41a:	e746      	b.n	801c2aa <_dtoa_r+0x71a>
 801c41c:	9b07      	ldr	r3, [sp, #28]
 801c41e:	1e5c      	subs	r4, r3, #1
 801c420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c422:	42a3      	cmp	r3, r4
 801c424:	bfbf      	itttt	lt
 801c426:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801c428:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801c42a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801c42c:	1ae3      	sublt	r3, r4, r3
 801c42e:	bfb4      	ite	lt
 801c430:	18d2      	addlt	r2, r2, r3
 801c432:	1b1c      	subge	r4, r3, r4
 801c434:	9b07      	ldr	r3, [sp, #28]
 801c436:	bfbc      	itt	lt
 801c438:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801c43a:	2400      	movlt	r4, #0
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	bfb5      	itete	lt
 801c440:	eba8 0603 	sublt.w	r6, r8, r3
 801c444:	9b07      	ldrge	r3, [sp, #28]
 801c446:	2300      	movlt	r3, #0
 801c448:	4646      	movge	r6, r8
 801c44a:	e730      	b.n	801c2ae <_dtoa_r+0x71e>
 801c44c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c44e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801c450:	4646      	mov	r6, r8
 801c452:	e735      	b.n	801c2c0 <_dtoa_r+0x730>
 801c454:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c456:	e75c      	b.n	801c312 <_dtoa_r+0x782>
 801c458:	2300      	movs	r3, #0
 801c45a:	e788      	b.n	801c36e <_dtoa_r+0x7de>
 801c45c:	3fe00000 	.word	0x3fe00000
 801c460:	40240000 	.word	0x40240000
 801c464:	40140000 	.word	0x40140000
 801c468:	9b02      	ldr	r3, [sp, #8]
 801c46a:	e780      	b.n	801c36e <_dtoa_r+0x7de>
 801c46c:	2300      	movs	r3, #0
 801c46e:	930a      	str	r3, [sp, #40]	@ 0x28
 801c470:	e782      	b.n	801c378 <_dtoa_r+0x7e8>
 801c472:	d099      	beq.n	801c3a8 <_dtoa_r+0x818>
 801c474:	9a08      	ldr	r2, [sp, #32]
 801c476:	331c      	adds	r3, #28
 801c478:	441a      	add	r2, r3
 801c47a:	4498      	add	r8, r3
 801c47c:	441e      	add	r6, r3
 801c47e:	9208      	str	r2, [sp, #32]
 801c480:	e792      	b.n	801c3a8 <_dtoa_r+0x818>
 801c482:	4603      	mov	r3, r0
 801c484:	e7f6      	b.n	801c474 <_dtoa_r+0x8e4>
 801c486:	9b07      	ldr	r3, [sp, #28]
 801c488:	9704      	str	r7, [sp, #16]
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	dc20      	bgt.n	801c4d0 <_dtoa_r+0x940>
 801c48e:	9300      	str	r3, [sp, #0]
 801c490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c492:	2b02      	cmp	r3, #2
 801c494:	dd1e      	ble.n	801c4d4 <_dtoa_r+0x944>
 801c496:	9b00      	ldr	r3, [sp, #0]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	f47f aec0 	bne.w	801c21e <_dtoa_r+0x68e>
 801c49e:	4621      	mov	r1, r4
 801c4a0:	2205      	movs	r2, #5
 801c4a2:	4658      	mov	r0, fp
 801c4a4:	f000 fd30 	bl	801cf08 <__multadd>
 801c4a8:	4601      	mov	r1, r0
 801c4aa:	4604      	mov	r4, r0
 801c4ac:	4648      	mov	r0, r9
 801c4ae:	f000 ff8d 	bl	801d3cc <__mcmp>
 801c4b2:	2800      	cmp	r0, #0
 801c4b4:	f77f aeb3 	ble.w	801c21e <_dtoa_r+0x68e>
 801c4b8:	4656      	mov	r6, sl
 801c4ba:	2331      	movs	r3, #49	@ 0x31
 801c4bc:	f806 3b01 	strb.w	r3, [r6], #1
 801c4c0:	9b04      	ldr	r3, [sp, #16]
 801c4c2:	3301      	adds	r3, #1
 801c4c4:	9304      	str	r3, [sp, #16]
 801c4c6:	e6ae      	b.n	801c226 <_dtoa_r+0x696>
 801c4c8:	9c07      	ldr	r4, [sp, #28]
 801c4ca:	9704      	str	r7, [sp, #16]
 801c4cc:	4625      	mov	r5, r4
 801c4ce:	e7f3      	b.n	801c4b8 <_dtoa_r+0x928>
 801c4d0:	9b07      	ldr	r3, [sp, #28]
 801c4d2:	9300      	str	r3, [sp, #0]
 801c4d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c4d6:	2b00      	cmp	r3, #0
 801c4d8:	f000 8104 	beq.w	801c6e4 <_dtoa_r+0xb54>
 801c4dc:	2e00      	cmp	r6, #0
 801c4de:	dd05      	ble.n	801c4ec <_dtoa_r+0x95c>
 801c4e0:	4629      	mov	r1, r5
 801c4e2:	4632      	mov	r2, r6
 801c4e4:	4658      	mov	r0, fp
 801c4e6:	f000 ff05 	bl	801d2f4 <__lshift>
 801c4ea:	4605      	mov	r5, r0
 801c4ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c4ee:	2b00      	cmp	r3, #0
 801c4f0:	d05a      	beq.n	801c5a8 <_dtoa_r+0xa18>
 801c4f2:	6869      	ldr	r1, [r5, #4]
 801c4f4:	4658      	mov	r0, fp
 801c4f6:	f000 fca5 	bl	801ce44 <_Balloc>
 801c4fa:	4606      	mov	r6, r0
 801c4fc:	b928      	cbnz	r0, 801c50a <_dtoa_r+0x97a>
 801c4fe:	4b84      	ldr	r3, [pc, #528]	@ (801c710 <_dtoa_r+0xb80>)
 801c500:	4602      	mov	r2, r0
 801c502:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c506:	f7ff bb5a 	b.w	801bbbe <_dtoa_r+0x2e>
 801c50a:	692a      	ldr	r2, [r5, #16]
 801c50c:	3202      	adds	r2, #2
 801c50e:	0092      	lsls	r2, r2, #2
 801c510:	f105 010c 	add.w	r1, r5, #12
 801c514:	300c      	adds	r0, #12
 801c516:	f7ff fa78 	bl	801ba0a <memcpy>
 801c51a:	2201      	movs	r2, #1
 801c51c:	4631      	mov	r1, r6
 801c51e:	4658      	mov	r0, fp
 801c520:	f000 fee8 	bl	801d2f4 <__lshift>
 801c524:	f10a 0301 	add.w	r3, sl, #1
 801c528:	9307      	str	r3, [sp, #28]
 801c52a:	9b00      	ldr	r3, [sp, #0]
 801c52c:	4453      	add	r3, sl
 801c52e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c530:	9b02      	ldr	r3, [sp, #8]
 801c532:	f003 0301 	and.w	r3, r3, #1
 801c536:	462f      	mov	r7, r5
 801c538:	930a      	str	r3, [sp, #40]	@ 0x28
 801c53a:	4605      	mov	r5, r0
 801c53c:	9b07      	ldr	r3, [sp, #28]
 801c53e:	4621      	mov	r1, r4
 801c540:	3b01      	subs	r3, #1
 801c542:	4648      	mov	r0, r9
 801c544:	9300      	str	r3, [sp, #0]
 801c546:	f7ff fa9b 	bl	801ba80 <quorem>
 801c54a:	4639      	mov	r1, r7
 801c54c:	9002      	str	r0, [sp, #8]
 801c54e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c552:	4648      	mov	r0, r9
 801c554:	f000 ff3a 	bl	801d3cc <__mcmp>
 801c558:	462a      	mov	r2, r5
 801c55a:	9008      	str	r0, [sp, #32]
 801c55c:	4621      	mov	r1, r4
 801c55e:	4658      	mov	r0, fp
 801c560:	f000 ff50 	bl	801d404 <__mdiff>
 801c564:	68c2      	ldr	r2, [r0, #12]
 801c566:	4606      	mov	r6, r0
 801c568:	bb02      	cbnz	r2, 801c5ac <_dtoa_r+0xa1c>
 801c56a:	4601      	mov	r1, r0
 801c56c:	4648      	mov	r0, r9
 801c56e:	f000 ff2d 	bl	801d3cc <__mcmp>
 801c572:	4602      	mov	r2, r0
 801c574:	4631      	mov	r1, r6
 801c576:	4658      	mov	r0, fp
 801c578:	920e      	str	r2, [sp, #56]	@ 0x38
 801c57a:	f000 fca3 	bl	801cec4 <_Bfree>
 801c57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c580:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c582:	9e07      	ldr	r6, [sp, #28]
 801c584:	ea43 0102 	orr.w	r1, r3, r2
 801c588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c58a:	4319      	orrs	r1, r3
 801c58c:	d110      	bne.n	801c5b0 <_dtoa_r+0xa20>
 801c58e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c592:	d029      	beq.n	801c5e8 <_dtoa_r+0xa58>
 801c594:	9b08      	ldr	r3, [sp, #32]
 801c596:	2b00      	cmp	r3, #0
 801c598:	dd02      	ble.n	801c5a0 <_dtoa_r+0xa10>
 801c59a:	9b02      	ldr	r3, [sp, #8]
 801c59c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801c5a0:	9b00      	ldr	r3, [sp, #0]
 801c5a2:	f883 8000 	strb.w	r8, [r3]
 801c5a6:	e63f      	b.n	801c228 <_dtoa_r+0x698>
 801c5a8:	4628      	mov	r0, r5
 801c5aa:	e7bb      	b.n	801c524 <_dtoa_r+0x994>
 801c5ac:	2201      	movs	r2, #1
 801c5ae:	e7e1      	b.n	801c574 <_dtoa_r+0x9e4>
 801c5b0:	9b08      	ldr	r3, [sp, #32]
 801c5b2:	2b00      	cmp	r3, #0
 801c5b4:	db04      	blt.n	801c5c0 <_dtoa_r+0xa30>
 801c5b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c5b8:	430b      	orrs	r3, r1
 801c5ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c5bc:	430b      	orrs	r3, r1
 801c5be:	d120      	bne.n	801c602 <_dtoa_r+0xa72>
 801c5c0:	2a00      	cmp	r2, #0
 801c5c2:	dded      	ble.n	801c5a0 <_dtoa_r+0xa10>
 801c5c4:	4649      	mov	r1, r9
 801c5c6:	2201      	movs	r2, #1
 801c5c8:	4658      	mov	r0, fp
 801c5ca:	f000 fe93 	bl	801d2f4 <__lshift>
 801c5ce:	4621      	mov	r1, r4
 801c5d0:	4681      	mov	r9, r0
 801c5d2:	f000 fefb 	bl	801d3cc <__mcmp>
 801c5d6:	2800      	cmp	r0, #0
 801c5d8:	dc03      	bgt.n	801c5e2 <_dtoa_r+0xa52>
 801c5da:	d1e1      	bne.n	801c5a0 <_dtoa_r+0xa10>
 801c5dc:	f018 0f01 	tst.w	r8, #1
 801c5e0:	d0de      	beq.n	801c5a0 <_dtoa_r+0xa10>
 801c5e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c5e6:	d1d8      	bne.n	801c59a <_dtoa_r+0xa0a>
 801c5e8:	9a00      	ldr	r2, [sp, #0]
 801c5ea:	2339      	movs	r3, #57	@ 0x39
 801c5ec:	7013      	strb	r3, [r2, #0]
 801c5ee:	4633      	mov	r3, r6
 801c5f0:	461e      	mov	r6, r3
 801c5f2:	3b01      	subs	r3, #1
 801c5f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c5f8:	2a39      	cmp	r2, #57	@ 0x39
 801c5fa:	d052      	beq.n	801c6a2 <_dtoa_r+0xb12>
 801c5fc:	3201      	adds	r2, #1
 801c5fe:	701a      	strb	r2, [r3, #0]
 801c600:	e612      	b.n	801c228 <_dtoa_r+0x698>
 801c602:	2a00      	cmp	r2, #0
 801c604:	dd07      	ble.n	801c616 <_dtoa_r+0xa86>
 801c606:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801c60a:	d0ed      	beq.n	801c5e8 <_dtoa_r+0xa58>
 801c60c:	9a00      	ldr	r2, [sp, #0]
 801c60e:	f108 0301 	add.w	r3, r8, #1
 801c612:	7013      	strb	r3, [r2, #0]
 801c614:	e608      	b.n	801c228 <_dtoa_r+0x698>
 801c616:	9b07      	ldr	r3, [sp, #28]
 801c618:	9a07      	ldr	r2, [sp, #28]
 801c61a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801c61e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c620:	4293      	cmp	r3, r2
 801c622:	d028      	beq.n	801c676 <_dtoa_r+0xae6>
 801c624:	4649      	mov	r1, r9
 801c626:	2300      	movs	r3, #0
 801c628:	220a      	movs	r2, #10
 801c62a:	4658      	mov	r0, fp
 801c62c:	f000 fc6c 	bl	801cf08 <__multadd>
 801c630:	42af      	cmp	r7, r5
 801c632:	4681      	mov	r9, r0
 801c634:	f04f 0300 	mov.w	r3, #0
 801c638:	f04f 020a 	mov.w	r2, #10
 801c63c:	4639      	mov	r1, r7
 801c63e:	4658      	mov	r0, fp
 801c640:	d107      	bne.n	801c652 <_dtoa_r+0xac2>
 801c642:	f000 fc61 	bl	801cf08 <__multadd>
 801c646:	4607      	mov	r7, r0
 801c648:	4605      	mov	r5, r0
 801c64a:	9b07      	ldr	r3, [sp, #28]
 801c64c:	3301      	adds	r3, #1
 801c64e:	9307      	str	r3, [sp, #28]
 801c650:	e774      	b.n	801c53c <_dtoa_r+0x9ac>
 801c652:	f000 fc59 	bl	801cf08 <__multadd>
 801c656:	4629      	mov	r1, r5
 801c658:	4607      	mov	r7, r0
 801c65a:	2300      	movs	r3, #0
 801c65c:	220a      	movs	r2, #10
 801c65e:	4658      	mov	r0, fp
 801c660:	f000 fc52 	bl	801cf08 <__multadd>
 801c664:	4605      	mov	r5, r0
 801c666:	e7f0      	b.n	801c64a <_dtoa_r+0xaba>
 801c668:	9b00      	ldr	r3, [sp, #0]
 801c66a:	2b00      	cmp	r3, #0
 801c66c:	bfcc      	ite	gt
 801c66e:	461e      	movgt	r6, r3
 801c670:	2601      	movle	r6, #1
 801c672:	4456      	add	r6, sl
 801c674:	2700      	movs	r7, #0
 801c676:	4649      	mov	r1, r9
 801c678:	2201      	movs	r2, #1
 801c67a:	4658      	mov	r0, fp
 801c67c:	f000 fe3a 	bl	801d2f4 <__lshift>
 801c680:	4621      	mov	r1, r4
 801c682:	4681      	mov	r9, r0
 801c684:	f000 fea2 	bl	801d3cc <__mcmp>
 801c688:	2800      	cmp	r0, #0
 801c68a:	dcb0      	bgt.n	801c5ee <_dtoa_r+0xa5e>
 801c68c:	d102      	bne.n	801c694 <_dtoa_r+0xb04>
 801c68e:	f018 0f01 	tst.w	r8, #1
 801c692:	d1ac      	bne.n	801c5ee <_dtoa_r+0xa5e>
 801c694:	4633      	mov	r3, r6
 801c696:	461e      	mov	r6, r3
 801c698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c69c:	2a30      	cmp	r2, #48	@ 0x30
 801c69e:	d0fa      	beq.n	801c696 <_dtoa_r+0xb06>
 801c6a0:	e5c2      	b.n	801c228 <_dtoa_r+0x698>
 801c6a2:	459a      	cmp	sl, r3
 801c6a4:	d1a4      	bne.n	801c5f0 <_dtoa_r+0xa60>
 801c6a6:	9b04      	ldr	r3, [sp, #16]
 801c6a8:	3301      	adds	r3, #1
 801c6aa:	9304      	str	r3, [sp, #16]
 801c6ac:	2331      	movs	r3, #49	@ 0x31
 801c6ae:	f88a 3000 	strb.w	r3, [sl]
 801c6b2:	e5b9      	b.n	801c228 <_dtoa_r+0x698>
 801c6b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c6b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801c714 <_dtoa_r+0xb84>
 801c6ba:	b11b      	cbz	r3, 801c6c4 <_dtoa_r+0xb34>
 801c6bc:	f10a 0308 	add.w	r3, sl, #8
 801c6c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801c6c2:	6013      	str	r3, [r2, #0]
 801c6c4:	4650      	mov	r0, sl
 801c6c6:	b019      	add	sp, #100	@ 0x64
 801c6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6ce:	2b01      	cmp	r3, #1
 801c6d0:	f77f ae37 	ble.w	801c342 <_dtoa_r+0x7b2>
 801c6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c6d6:	930a      	str	r3, [sp, #40]	@ 0x28
 801c6d8:	2001      	movs	r0, #1
 801c6da:	e655      	b.n	801c388 <_dtoa_r+0x7f8>
 801c6dc:	9b00      	ldr	r3, [sp, #0]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	f77f aed6 	ble.w	801c490 <_dtoa_r+0x900>
 801c6e4:	4656      	mov	r6, sl
 801c6e6:	4621      	mov	r1, r4
 801c6e8:	4648      	mov	r0, r9
 801c6ea:	f7ff f9c9 	bl	801ba80 <quorem>
 801c6ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801c6f2:	f806 8b01 	strb.w	r8, [r6], #1
 801c6f6:	9b00      	ldr	r3, [sp, #0]
 801c6f8:	eba6 020a 	sub.w	r2, r6, sl
 801c6fc:	4293      	cmp	r3, r2
 801c6fe:	ddb3      	ble.n	801c668 <_dtoa_r+0xad8>
 801c700:	4649      	mov	r1, r9
 801c702:	2300      	movs	r3, #0
 801c704:	220a      	movs	r2, #10
 801c706:	4658      	mov	r0, fp
 801c708:	f000 fbfe 	bl	801cf08 <__multadd>
 801c70c:	4681      	mov	r9, r0
 801c70e:	e7ea      	b.n	801c6e6 <_dtoa_r+0xb56>
 801c710:	08022194 	.word	0x08022194
 801c714:	0802212f 	.word	0x0802212f

0801c718 <_free_r>:
 801c718:	b538      	push	{r3, r4, r5, lr}
 801c71a:	4605      	mov	r5, r0
 801c71c:	2900      	cmp	r1, #0
 801c71e:	d041      	beq.n	801c7a4 <_free_r+0x8c>
 801c720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c724:	1f0c      	subs	r4, r1, #4
 801c726:	2b00      	cmp	r3, #0
 801c728:	bfb8      	it	lt
 801c72a:	18e4      	addlt	r4, r4, r3
 801c72c:	f7fd f98e 	bl	8019a4c <__malloc_lock>
 801c730:	4a1d      	ldr	r2, [pc, #116]	@ (801c7a8 <_free_r+0x90>)
 801c732:	6813      	ldr	r3, [r2, #0]
 801c734:	b933      	cbnz	r3, 801c744 <_free_r+0x2c>
 801c736:	6063      	str	r3, [r4, #4]
 801c738:	6014      	str	r4, [r2, #0]
 801c73a:	4628      	mov	r0, r5
 801c73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c740:	f7fd b98a 	b.w	8019a58 <__malloc_unlock>
 801c744:	42a3      	cmp	r3, r4
 801c746:	d908      	bls.n	801c75a <_free_r+0x42>
 801c748:	6820      	ldr	r0, [r4, #0]
 801c74a:	1821      	adds	r1, r4, r0
 801c74c:	428b      	cmp	r3, r1
 801c74e:	bf01      	itttt	eq
 801c750:	6819      	ldreq	r1, [r3, #0]
 801c752:	685b      	ldreq	r3, [r3, #4]
 801c754:	1809      	addeq	r1, r1, r0
 801c756:	6021      	streq	r1, [r4, #0]
 801c758:	e7ed      	b.n	801c736 <_free_r+0x1e>
 801c75a:	461a      	mov	r2, r3
 801c75c:	685b      	ldr	r3, [r3, #4]
 801c75e:	b10b      	cbz	r3, 801c764 <_free_r+0x4c>
 801c760:	42a3      	cmp	r3, r4
 801c762:	d9fa      	bls.n	801c75a <_free_r+0x42>
 801c764:	6811      	ldr	r1, [r2, #0]
 801c766:	1850      	adds	r0, r2, r1
 801c768:	42a0      	cmp	r0, r4
 801c76a:	d10b      	bne.n	801c784 <_free_r+0x6c>
 801c76c:	6820      	ldr	r0, [r4, #0]
 801c76e:	4401      	add	r1, r0
 801c770:	1850      	adds	r0, r2, r1
 801c772:	4283      	cmp	r3, r0
 801c774:	6011      	str	r1, [r2, #0]
 801c776:	d1e0      	bne.n	801c73a <_free_r+0x22>
 801c778:	6818      	ldr	r0, [r3, #0]
 801c77a:	685b      	ldr	r3, [r3, #4]
 801c77c:	6053      	str	r3, [r2, #4]
 801c77e:	4408      	add	r0, r1
 801c780:	6010      	str	r0, [r2, #0]
 801c782:	e7da      	b.n	801c73a <_free_r+0x22>
 801c784:	d902      	bls.n	801c78c <_free_r+0x74>
 801c786:	230c      	movs	r3, #12
 801c788:	602b      	str	r3, [r5, #0]
 801c78a:	e7d6      	b.n	801c73a <_free_r+0x22>
 801c78c:	6820      	ldr	r0, [r4, #0]
 801c78e:	1821      	adds	r1, r4, r0
 801c790:	428b      	cmp	r3, r1
 801c792:	bf04      	itt	eq
 801c794:	6819      	ldreq	r1, [r3, #0]
 801c796:	685b      	ldreq	r3, [r3, #4]
 801c798:	6063      	str	r3, [r4, #4]
 801c79a:	bf04      	itt	eq
 801c79c:	1809      	addeq	r1, r1, r0
 801c79e:	6021      	streq	r1, [r4, #0]
 801c7a0:	6054      	str	r4, [r2, #4]
 801c7a2:	e7ca      	b.n	801c73a <_free_r+0x22>
 801c7a4:	bd38      	pop	{r3, r4, r5, pc}
 801c7a6:	bf00      	nop
 801c7a8:	200032b0 	.word	0x200032b0

0801c7ac <rshift>:
 801c7ac:	6903      	ldr	r3, [r0, #16]
 801c7ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801c7b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c7b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 801c7ba:	f100 0414 	add.w	r4, r0, #20
 801c7be:	dd45      	ble.n	801c84c <rshift+0xa0>
 801c7c0:	f011 011f 	ands.w	r1, r1, #31
 801c7c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801c7c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801c7cc:	d10c      	bne.n	801c7e8 <rshift+0x3c>
 801c7ce:	f100 0710 	add.w	r7, r0, #16
 801c7d2:	4629      	mov	r1, r5
 801c7d4:	42b1      	cmp	r1, r6
 801c7d6:	d334      	bcc.n	801c842 <rshift+0x96>
 801c7d8:	1a9b      	subs	r3, r3, r2
 801c7da:	009b      	lsls	r3, r3, #2
 801c7dc:	1eea      	subs	r2, r5, #3
 801c7de:	4296      	cmp	r6, r2
 801c7e0:	bf38      	it	cc
 801c7e2:	2300      	movcc	r3, #0
 801c7e4:	4423      	add	r3, r4
 801c7e6:	e015      	b.n	801c814 <rshift+0x68>
 801c7e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801c7ec:	f1c1 0820 	rsb	r8, r1, #32
 801c7f0:	40cf      	lsrs	r7, r1
 801c7f2:	f105 0e04 	add.w	lr, r5, #4
 801c7f6:	46a1      	mov	r9, r4
 801c7f8:	4576      	cmp	r6, lr
 801c7fa:	46f4      	mov	ip, lr
 801c7fc:	d815      	bhi.n	801c82a <rshift+0x7e>
 801c7fe:	1a9a      	subs	r2, r3, r2
 801c800:	0092      	lsls	r2, r2, #2
 801c802:	3a04      	subs	r2, #4
 801c804:	3501      	adds	r5, #1
 801c806:	42ae      	cmp	r6, r5
 801c808:	bf38      	it	cc
 801c80a:	2200      	movcc	r2, #0
 801c80c:	18a3      	adds	r3, r4, r2
 801c80e:	50a7      	str	r7, [r4, r2]
 801c810:	b107      	cbz	r7, 801c814 <rshift+0x68>
 801c812:	3304      	adds	r3, #4
 801c814:	1b1a      	subs	r2, r3, r4
 801c816:	42a3      	cmp	r3, r4
 801c818:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c81c:	bf08      	it	eq
 801c81e:	2300      	moveq	r3, #0
 801c820:	6102      	str	r2, [r0, #16]
 801c822:	bf08      	it	eq
 801c824:	6143      	streq	r3, [r0, #20]
 801c826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c82a:	f8dc c000 	ldr.w	ip, [ip]
 801c82e:	fa0c fc08 	lsl.w	ip, ip, r8
 801c832:	ea4c 0707 	orr.w	r7, ip, r7
 801c836:	f849 7b04 	str.w	r7, [r9], #4
 801c83a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801c83e:	40cf      	lsrs	r7, r1
 801c840:	e7da      	b.n	801c7f8 <rshift+0x4c>
 801c842:	f851 cb04 	ldr.w	ip, [r1], #4
 801c846:	f847 cf04 	str.w	ip, [r7, #4]!
 801c84a:	e7c3      	b.n	801c7d4 <rshift+0x28>
 801c84c:	4623      	mov	r3, r4
 801c84e:	e7e1      	b.n	801c814 <rshift+0x68>

0801c850 <__hexdig_fun>:
 801c850:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801c854:	2b09      	cmp	r3, #9
 801c856:	d802      	bhi.n	801c85e <__hexdig_fun+0xe>
 801c858:	3820      	subs	r0, #32
 801c85a:	b2c0      	uxtb	r0, r0
 801c85c:	4770      	bx	lr
 801c85e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801c862:	2b05      	cmp	r3, #5
 801c864:	d801      	bhi.n	801c86a <__hexdig_fun+0x1a>
 801c866:	3847      	subs	r0, #71	@ 0x47
 801c868:	e7f7      	b.n	801c85a <__hexdig_fun+0xa>
 801c86a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801c86e:	2b05      	cmp	r3, #5
 801c870:	d801      	bhi.n	801c876 <__hexdig_fun+0x26>
 801c872:	3827      	subs	r0, #39	@ 0x27
 801c874:	e7f1      	b.n	801c85a <__hexdig_fun+0xa>
 801c876:	2000      	movs	r0, #0
 801c878:	4770      	bx	lr
	...

0801c87c <__gethex>:
 801c87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c880:	b085      	sub	sp, #20
 801c882:	468a      	mov	sl, r1
 801c884:	9302      	str	r3, [sp, #8]
 801c886:	680b      	ldr	r3, [r1, #0]
 801c888:	9001      	str	r0, [sp, #4]
 801c88a:	4690      	mov	r8, r2
 801c88c:	1c9c      	adds	r4, r3, #2
 801c88e:	46a1      	mov	r9, r4
 801c890:	f814 0b01 	ldrb.w	r0, [r4], #1
 801c894:	2830      	cmp	r0, #48	@ 0x30
 801c896:	d0fa      	beq.n	801c88e <__gethex+0x12>
 801c898:	eba9 0303 	sub.w	r3, r9, r3
 801c89c:	f1a3 0b02 	sub.w	fp, r3, #2
 801c8a0:	f7ff ffd6 	bl	801c850 <__hexdig_fun>
 801c8a4:	4605      	mov	r5, r0
 801c8a6:	2800      	cmp	r0, #0
 801c8a8:	d168      	bne.n	801c97c <__gethex+0x100>
 801c8aa:	49a0      	ldr	r1, [pc, #640]	@ (801cb2c <__gethex+0x2b0>)
 801c8ac:	2201      	movs	r2, #1
 801c8ae:	4648      	mov	r0, r9
 801c8b0:	f7fe ff97 	bl	801b7e2 <strncmp>
 801c8b4:	4607      	mov	r7, r0
 801c8b6:	2800      	cmp	r0, #0
 801c8b8:	d167      	bne.n	801c98a <__gethex+0x10e>
 801c8ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 801c8be:	4626      	mov	r6, r4
 801c8c0:	f7ff ffc6 	bl	801c850 <__hexdig_fun>
 801c8c4:	2800      	cmp	r0, #0
 801c8c6:	d062      	beq.n	801c98e <__gethex+0x112>
 801c8c8:	4623      	mov	r3, r4
 801c8ca:	7818      	ldrb	r0, [r3, #0]
 801c8cc:	2830      	cmp	r0, #48	@ 0x30
 801c8ce:	4699      	mov	r9, r3
 801c8d0:	f103 0301 	add.w	r3, r3, #1
 801c8d4:	d0f9      	beq.n	801c8ca <__gethex+0x4e>
 801c8d6:	f7ff ffbb 	bl	801c850 <__hexdig_fun>
 801c8da:	fab0 f580 	clz	r5, r0
 801c8de:	096d      	lsrs	r5, r5, #5
 801c8e0:	f04f 0b01 	mov.w	fp, #1
 801c8e4:	464a      	mov	r2, r9
 801c8e6:	4616      	mov	r6, r2
 801c8e8:	3201      	adds	r2, #1
 801c8ea:	7830      	ldrb	r0, [r6, #0]
 801c8ec:	f7ff ffb0 	bl	801c850 <__hexdig_fun>
 801c8f0:	2800      	cmp	r0, #0
 801c8f2:	d1f8      	bne.n	801c8e6 <__gethex+0x6a>
 801c8f4:	498d      	ldr	r1, [pc, #564]	@ (801cb2c <__gethex+0x2b0>)
 801c8f6:	2201      	movs	r2, #1
 801c8f8:	4630      	mov	r0, r6
 801c8fa:	f7fe ff72 	bl	801b7e2 <strncmp>
 801c8fe:	2800      	cmp	r0, #0
 801c900:	d13f      	bne.n	801c982 <__gethex+0x106>
 801c902:	b944      	cbnz	r4, 801c916 <__gethex+0x9a>
 801c904:	1c74      	adds	r4, r6, #1
 801c906:	4622      	mov	r2, r4
 801c908:	4616      	mov	r6, r2
 801c90a:	3201      	adds	r2, #1
 801c90c:	7830      	ldrb	r0, [r6, #0]
 801c90e:	f7ff ff9f 	bl	801c850 <__hexdig_fun>
 801c912:	2800      	cmp	r0, #0
 801c914:	d1f8      	bne.n	801c908 <__gethex+0x8c>
 801c916:	1ba4      	subs	r4, r4, r6
 801c918:	00a7      	lsls	r7, r4, #2
 801c91a:	7833      	ldrb	r3, [r6, #0]
 801c91c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801c920:	2b50      	cmp	r3, #80	@ 0x50
 801c922:	d13e      	bne.n	801c9a2 <__gethex+0x126>
 801c924:	7873      	ldrb	r3, [r6, #1]
 801c926:	2b2b      	cmp	r3, #43	@ 0x2b
 801c928:	d033      	beq.n	801c992 <__gethex+0x116>
 801c92a:	2b2d      	cmp	r3, #45	@ 0x2d
 801c92c:	d034      	beq.n	801c998 <__gethex+0x11c>
 801c92e:	1c71      	adds	r1, r6, #1
 801c930:	2400      	movs	r4, #0
 801c932:	7808      	ldrb	r0, [r1, #0]
 801c934:	f7ff ff8c 	bl	801c850 <__hexdig_fun>
 801c938:	1e43      	subs	r3, r0, #1
 801c93a:	b2db      	uxtb	r3, r3
 801c93c:	2b18      	cmp	r3, #24
 801c93e:	d830      	bhi.n	801c9a2 <__gethex+0x126>
 801c940:	f1a0 0210 	sub.w	r2, r0, #16
 801c944:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c948:	f7ff ff82 	bl	801c850 <__hexdig_fun>
 801c94c:	f100 3cff 	add.w	ip, r0, #4294967295
 801c950:	fa5f fc8c 	uxtb.w	ip, ip
 801c954:	f1bc 0f18 	cmp.w	ip, #24
 801c958:	f04f 030a 	mov.w	r3, #10
 801c95c:	d91e      	bls.n	801c99c <__gethex+0x120>
 801c95e:	b104      	cbz	r4, 801c962 <__gethex+0xe6>
 801c960:	4252      	negs	r2, r2
 801c962:	4417      	add	r7, r2
 801c964:	f8ca 1000 	str.w	r1, [sl]
 801c968:	b1ed      	cbz	r5, 801c9a6 <__gethex+0x12a>
 801c96a:	f1bb 0f00 	cmp.w	fp, #0
 801c96e:	bf0c      	ite	eq
 801c970:	2506      	moveq	r5, #6
 801c972:	2500      	movne	r5, #0
 801c974:	4628      	mov	r0, r5
 801c976:	b005      	add	sp, #20
 801c978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c97c:	2500      	movs	r5, #0
 801c97e:	462c      	mov	r4, r5
 801c980:	e7b0      	b.n	801c8e4 <__gethex+0x68>
 801c982:	2c00      	cmp	r4, #0
 801c984:	d1c7      	bne.n	801c916 <__gethex+0x9a>
 801c986:	4627      	mov	r7, r4
 801c988:	e7c7      	b.n	801c91a <__gethex+0x9e>
 801c98a:	464e      	mov	r6, r9
 801c98c:	462f      	mov	r7, r5
 801c98e:	2501      	movs	r5, #1
 801c990:	e7c3      	b.n	801c91a <__gethex+0x9e>
 801c992:	2400      	movs	r4, #0
 801c994:	1cb1      	adds	r1, r6, #2
 801c996:	e7cc      	b.n	801c932 <__gethex+0xb6>
 801c998:	2401      	movs	r4, #1
 801c99a:	e7fb      	b.n	801c994 <__gethex+0x118>
 801c99c:	fb03 0002 	mla	r0, r3, r2, r0
 801c9a0:	e7ce      	b.n	801c940 <__gethex+0xc4>
 801c9a2:	4631      	mov	r1, r6
 801c9a4:	e7de      	b.n	801c964 <__gethex+0xe8>
 801c9a6:	eba6 0309 	sub.w	r3, r6, r9
 801c9aa:	3b01      	subs	r3, #1
 801c9ac:	4629      	mov	r1, r5
 801c9ae:	2b07      	cmp	r3, #7
 801c9b0:	dc0a      	bgt.n	801c9c8 <__gethex+0x14c>
 801c9b2:	9801      	ldr	r0, [sp, #4]
 801c9b4:	f000 fa46 	bl	801ce44 <_Balloc>
 801c9b8:	4604      	mov	r4, r0
 801c9ba:	b940      	cbnz	r0, 801c9ce <__gethex+0x152>
 801c9bc:	4b5c      	ldr	r3, [pc, #368]	@ (801cb30 <__gethex+0x2b4>)
 801c9be:	4602      	mov	r2, r0
 801c9c0:	21e4      	movs	r1, #228	@ 0xe4
 801c9c2:	485c      	ldr	r0, [pc, #368]	@ (801cb34 <__gethex+0x2b8>)
 801c9c4:	f7ff f83e 	bl	801ba44 <__assert_func>
 801c9c8:	3101      	adds	r1, #1
 801c9ca:	105b      	asrs	r3, r3, #1
 801c9cc:	e7ef      	b.n	801c9ae <__gethex+0x132>
 801c9ce:	f100 0a14 	add.w	sl, r0, #20
 801c9d2:	2300      	movs	r3, #0
 801c9d4:	4655      	mov	r5, sl
 801c9d6:	469b      	mov	fp, r3
 801c9d8:	45b1      	cmp	r9, r6
 801c9da:	d337      	bcc.n	801ca4c <__gethex+0x1d0>
 801c9dc:	f845 bb04 	str.w	fp, [r5], #4
 801c9e0:	eba5 050a 	sub.w	r5, r5, sl
 801c9e4:	10ad      	asrs	r5, r5, #2
 801c9e6:	6125      	str	r5, [r4, #16]
 801c9e8:	4658      	mov	r0, fp
 801c9ea:	f000 fb1d 	bl	801d028 <__hi0bits>
 801c9ee:	016d      	lsls	r5, r5, #5
 801c9f0:	f8d8 6000 	ldr.w	r6, [r8]
 801c9f4:	1a2d      	subs	r5, r5, r0
 801c9f6:	42b5      	cmp	r5, r6
 801c9f8:	dd54      	ble.n	801caa4 <__gethex+0x228>
 801c9fa:	1bad      	subs	r5, r5, r6
 801c9fc:	4629      	mov	r1, r5
 801c9fe:	4620      	mov	r0, r4
 801ca00:	f000 feb1 	bl	801d766 <__any_on>
 801ca04:	4681      	mov	r9, r0
 801ca06:	b178      	cbz	r0, 801ca28 <__gethex+0x1ac>
 801ca08:	1e6b      	subs	r3, r5, #1
 801ca0a:	1159      	asrs	r1, r3, #5
 801ca0c:	f003 021f 	and.w	r2, r3, #31
 801ca10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ca14:	f04f 0901 	mov.w	r9, #1
 801ca18:	fa09 f202 	lsl.w	r2, r9, r2
 801ca1c:	420a      	tst	r2, r1
 801ca1e:	d003      	beq.n	801ca28 <__gethex+0x1ac>
 801ca20:	454b      	cmp	r3, r9
 801ca22:	dc36      	bgt.n	801ca92 <__gethex+0x216>
 801ca24:	f04f 0902 	mov.w	r9, #2
 801ca28:	4629      	mov	r1, r5
 801ca2a:	4620      	mov	r0, r4
 801ca2c:	f7ff febe 	bl	801c7ac <rshift>
 801ca30:	442f      	add	r7, r5
 801ca32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ca36:	42bb      	cmp	r3, r7
 801ca38:	da42      	bge.n	801cac0 <__gethex+0x244>
 801ca3a:	9801      	ldr	r0, [sp, #4]
 801ca3c:	4621      	mov	r1, r4
 801ca3e:	f000 fa41 	bl	801cec4 <_Bfree>
 801ca42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca44:	2300      	movs	r3, #0
 801ca46:	6013      	str	r3, [r2, #0]
 801ca48:	25a3      	movs	r5, #163	@ 0xa3
 801ca4a:	e793      	b.n	801c974 <__gethex+0xf8>
 801ca4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801ca50:	2a2e      	cmp	r2, #46	@ 0x2e
 801ca52:	d012      	beq.n	801ca7a <__gethex+0x1fe>
 801ca54:	2b20      	cmp	r3, #32
 801ca56:	d104      	bne.n	801ca62 <__gethex+0x1e6>
 801ca58:	f845 bb04 	str.w	fp, [r5], #4
 801ca5c:	f04f 0b00 	mov.w	fp, #0
 801ca60:	465b      	mov	r3, fp
 801ca62:	7830      	ldrb	r0, [r6, #0]
 801ca64:	9303      	str	r3, [sp, #12]
 801ca66:	f7ff fef3 	bl	801c850 <__hexdig_fun>
 801ca6a:	9b03      	ldr	r3, [sp, #12]
 801ca6c:	f000 000f 	and.w	r0, r0, #15
 801ca70:	4098      	lsls	r0, r3
 801ca72:	ea4b 0b00 	orr.w	fp, fp, r0
 801ca76:	3304      	adds	r3, #4
 801ca78:	e7ae      	b.n	801c9d8 <__gethex+0x15c>
 801ca7a:	45b1      	cmp	r9, r6
 801ca7c:	d8ea      	bhi.n	801ca54 <__gethex+0x1d8>
 801ca7e:	492b      	ldr	r1, [pc, #172]	@ (801cb2c <__gethex+0x2b0>)
 801ca80:	9303      	str	r3, [sp, #12]
 801ca82:	2201      	movs	r2, #1
 801ca84:	4630      	mov	r0, r6
 801ca86:	f7fe feac 	bl	801b7e2 <strncmp>
 801ca8a:	9b03      	ldr	r3, [sp, #12]
 801ca8c:	2800      	cmp	r0, #0
 801ca8e:	d1e1      	bne.n	801ca54 <__gethex+0x1d8>
 801ca90:	e7a2      	b.n	801c9d8 <__gethex+0x15c>
 801ca92:	1ea9      	subs	r1, r5, #2
 801ca94:	4620      	mov	r0, r4
 801ca96:	f000 fe66 	bl	801d766 <__any_on>
 801ca9a:	2800      	cmp	r0, #0
 801ca9c:	d0c2      	beq.n	801ca24 <__gethex+0x1a8>
 801ca9e:	f04f 0903 	mov.w	r9, #3
 801caa2:	e7c1      	b.n	801ca28 <__gethex+0x1ac>
 801caa4:	da09      	bge.n	801caba <__gethex+0x23e>
 801caa6:	1b75      	subs	r5, r6, r5
 801caa8:	4621      	mov	r1, r4
 801caaa:	9801      	ldr	r0, [sp, #4]
 801caac:	462a      	mov	r2, r5
 801caae:	f000 fc21 	bl	801d2f4 <__lshift>
 801cab2:	1b7f      	subs	r7, r7, r5
 801cab4:	4604      	mov	r4, r0
 801cab6:	f100 0a14 	add.w	sl, r0, #20
 801caba:	f04f 0900 	mov.w	r9, #0
 801cabe:	e7b8      	b.n	801ca32 <__gethex+0x1b6>
 801cac0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801cac4:	42bd      	cmp	r5, r7
 801cac6:	dd6f      	ble.n	801cba8 <__gethex+0x32c>
 801cac8:	1bed      	subs	r5, r5, r7
 801caca:	42ae      	cmp	r6, r5
 801cacc:	dc34      	bgt.n	801cb38 <__gethex+0x2bc>
 801cace:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cad2:	2b02      	cmp	r3, #2
 801cad4:	d022      	beq.n	801cb1c <__gethex+0x2a0>
 801cad6:	2b03      	cmp	r3, #3
 801cad8:	d024      	beq.n	801cb24 <__gethex+0x2a8>
 801cada:	2b01      	cmp	r3, #1
 801cadc:	d115      	bne.n	801cb0a <__gethex+0x28e>
 801cade:	42ae      	cmp	r6, r5
 801cae0:	d113      	bne.n	801cb0a <__gethex+0x28e>
 801cae2:	2e01      	cmp	r6, #1
 801cae4:	d10b      	bne.n	801cafe <__gethex+0x282>
 801cae6:	9a02      	ldr	r2, [sp, #8]
 801cae8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801caec:	6013      	str	r3, [r2, #0]
 801caee:	2301      	movs	r3, #1
 801caf0:	6123      	str	r3, [r4, #16]
 801caf2:	f8ca 3000 	str.w	r3, [sl]
 801caf6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801caf8:	2562      	movs	r5, #98	@ 0x62
 801cafa:	601c      	str	r4, [r3, #0]
 801cafc:	e73a      	b.n	801c974 <__gethex+0xf8>
 801cafe:	1e71      	subs	r1, r6, #1
 801cb00:	4620      	mov	r0, r4
 801cb02:	f000 fe30 	bl	801d766 <__any_on>
 801cb06:	2800      	cmp	r0, #0
 801cb08:	d1ed      	bne.n	801cae6 <__gethex+0x26a>
 801cb0a:	9801      	ldr	r0, [sp, #4]
 801cb0c:	4621      	mov	r1, r4
 801cb0e:	f000 f9d9 	bl	801cec4 <_Bfree>
 801cb12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cb14:	2300      	movs	r3, #0
 801cb16:	6013      	str	r3, [r2, #0]
 801cb18:	2550      	movs	r5, #80	@ 0x50
 801cb1a:	e72b      	b.n	801c974 <__gethex+0xf8>
 801cb1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb1e:	2b00      	cmp	r3, #0
 801cb20:	d1f3      	bne.n	801cb0a <__gethex+0x28e>
 801cb22:	e7e0      	b.n	801cae6 <__gethex+0x26a>
 801cb24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb26:	2b00      	cmp	r3, #0
 801cb28:	d1dd      	bne.n	801cae6 <__gethex+0x26a>
 801cb2a:	e7ee      	b.n	801cb0a <__gethex+0x28e>
 801cb2c:	08021ee8 	.word	0x08021ee8
 801cb30:	08022194 	.word	0x08022194
 801cb34:	080221a5 	.word	0x080221a5
 801cb38:	1e6f      	subs	r7, r5, #1
 801cb3a:	f1b9 0f00 	cmp.w	r9, #0
 801cb3e:	d130      	bne.n	801cba2 <__gethex+0x326>
 801cb40:	b127      	cbz	r7, 801cb4c <__gethex+0x2d0>
 801cb42:	4639      	mov	r1, r7
 801cb44:	4620      	mov	r0, r4
 801cb46:	f000 fe0e 	bl	801d766 <__any_on>
 801cb4a:	4681      	mov	r9, r0
 801cb4c:	117a      	asrs	r2, r7, #5
 801cb4e:	2301      	movs	r3, #1
 801cb50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801cb54:	f007 071f 	and.w	r7, r7, #31
 801cb58:	40bb      	lsls	r3, r7
 801cb5a:	4213      	tst	r3, r2
 801cb5c:	4629      	mov	r1, r5
 801cb5e:	4620      	mov	r0, r4
 801cb60:	bf18      	it	ne
 801cb62:	f049 0902 	orrne.w	r9, r9, #2
 801cb66:	f7ff fe21 	bl	801c7ac <rshift>
 801cb6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801cb6e:	1b76      	subs	r6, r6, r5
 801cb70:	2502      	movs	r5, #2
 801cb72:	f1b9 0f00 	cmp.w	r9, #0
 801cb76:	d047      	beq.n	801cc08 <__gethex+0x38c>
 801cb78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cb7c:	2b02      	cmp	r3, #2
 801cb7e:	d015      	beq.n	801cbac <__gethex+0x330>
 801cb80:	2b03      	cmp	r3, #3
 801cb82:	d017      	beq.n	801cbb4 <__gethex+0x338>
 801cb84:	2b01      	cmp	r3, #1
 801cb86:	d109      	bne.n	801cb9c <__gethex+0x320>
 801cb88:	f019 0f02 	tst.w	r9, #2
 801cb8c:	d006      	beq.n	801cb9c <__gethex+0x320>
 801cb8e:	f8da 3000 	ldr.w	r3, [sl]
 801cb92:	ea49 0903 	orr.w	r9, r9, r3
 801cb96:	f019 0f01 	tst.w	r9, #1
 801cb9a:	d10e      	bne.n	801cbba <__gethex+0x33e>
 801cb9c:	f045 0510 	orr.w	r5, r5, #16
 801cba0:	e032      	b.n	801cc08 <__gethex+0x38c>
 801cba2:	f04f 0901 	mov.w	r9, #1
 801cba6:	e7d1      	b.n	801cb4c <__gethex+0x2d0>
 801cba8:	2501      	movs	r5, #1
 801cbaa:	e7e2      	b.n	801cb72 <__gethex+0x2f6>
 801cbac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbae:	f1c3 0301 	rsb	r3, r3, #1
 801cbb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cbb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d0f0      	beq.n	801cb9c <__gethex+0x320>
 801cbba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801cbbe:	f104 0314 	add.w	r3, r4, #20
 801cbc2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801cbc6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801cbca:	f04f 0c00 	mov.w	ip, #0
 801cbce:	4618      	mov	r0, r3
 801cbd0:	f853 2b04 	ldr.w	r2, [r3], #4
 801cbd4:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cbd8:	d01b      	beq.n	801cc12 <__gethex+0x396>
 801cbda:	3201      	adds	r2, #1
 801cbdc:	6002      	str	r2, [r0, #0]
 801cbde:	2d02      	cmp	r5, #2
 801cbe0:	f104 0314 	add.w	r3, r4, #20
 801cbe4:	d13c      	bne.n	801cc60 <__gethex+0x3e4>
 801cbe6:	f8d8 2000 	ldr.w	r2, [r8]
 801cbea:	3a01      	subs	r2, #1
 801cbec:	42b2      	cmp	r2, r6
 801cbee:	d109      	bne.n	801cc04 <__gethex+0x388>
 801cbf0:	1171      	asrs	r1, r6, #5
 801cbf2:	2201      	movs	r2, #1
 801cbf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cbf8:	f006 061f 	and.w	r6, r6, #31
 801cbfc:	fa02 f606 	lsl.w	r6, r2, r6
 801cc00:	421e      	tst	r6, r3
 801cc02:	d13a      	bne.n	801cc7a <__gethex+0x3fe>
 801cc04:	f045 0520 	orr.w	r5, r5, #32
 801cc08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cc0a:	601c      	str	r4, [r3, #0]
 801cc0c:	9b02      	ldr	r3, [sp, #8]
 801cc0e:	601f      	str	r7, [r3, #0]
 801cc10:	e6b0      	b.n	801c974 <__gethex+0xf8>
 801cc12:	4299      	cmp	r1, r3
 801cc14:	f843 cc04 	str.w	ip, [r3, #-4]
 801cc18:	d8d9      	bhi.n	801cbce <__gethex+0x352>
 801cc1a:	68a3      	ldr	r3, [r4, #8]
 801cc1c:	459b      	cmp	fp, r3
 801cc1e:	db17      	blt.n	801cc50 <__gethex+0x3d4>
 801cc20:	6861      	ldr	r1, [r4, #4]
 801cc22:	9801      	ldr	r0, [sp, #4]
 801cc24:	3101      	adds	r1, #1
 801cc26:	f000 f90d 	bl	801ce44 <_Balloc>
 801cc2a:	4681      	mov	r9, r0
 801cc2c:	b918      	cbnz	r0, 801cc36 <__gethex+0x3ba>
 801cc2e:	4b1a      	ldr	r3, [pc, #104]	@ (801cc98 <__gethex+0x41c>)
 801cc30:	4602      	mov	r2, r0
 801cc32:	2184      	movs	r1, #132	@ 0x84
 801cc34:	e6c5      	b.n	801c9c2 <__gethex+0x146>
 801cc36:	6922      	ldr	r2, [r4, #16]
 801cc38:	3202      	adds	r2, #2
 801cc3a:	f104 010c 	add.w	r1, r4, #12
 801cc3e:	0092      	lsls	r2, r2, #2
 801cc40:	300c      	adds	r0, #12
 801cc42:	f7fe fee2 	bl	801ba0a <memcpy>
 801cc46:	4621      	mov	r1, r4
 801cc48:	9801      	ldr	r0, [sp, #4]
 801cc4a:	f000 f93b 	bl	801cec4 <_Bfree>
 801cc4e:	464c      	mov	r4, r9
 801cc50:	6923      	ldr	r3, [r4, #16]
 801cc52:	1c5a      	adds	r2, r3, #1
 801cc54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801cc58:	6122      	str	r2, [r4, #16]
 801cc5a:	2201      	movs	r2, #1
 801cc5c:	615a      	str	r2, [r3, #20]
 801cc5e:	e7be      	b.n	801cbde <__gethex+0x362>
 801cc60:	6922      	ldr	r2, [r4, #16]
 801cc62:	455a      	cmp	r2, fp
 801cc64:	dd0b      	ble.n	801cc7e <__gethex+0x402>
 801cc66:	2101      	movs	r1, #1
 801cc68:	4620      	mov	r0, r4
 801cc6a:	f7ff fd9f 	bl	801c7ac <rshift>
 801cc6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cc72:	3701      	adds	r7, #1
 801cc74:	42bb      	cmp	r3, r7
 801cc76:	f6ff aee0 	blt.w	801ca3a <__gethex+0x1be>
 801cc7a:	2501      	movs	r5, #1
 801cc7c:	e7c2      	b.n	801cc04 <__gethex+0x388>
 801cc7e:	f016 061f 	ands.w	r6, r6, #31
 801cc82:	d0fa      	beq.n	801cc7a <__gethex+0x3fe>
 801cc84:	4453      	add	r3, sl
 801cc86:	f1c6 0620 	rsb	r6, r6, #32
 801cc8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801cc8e:	f000 f9cb 	bl	801d028 <__hi0bits>
 801cc92:	42b0      	cmp	r0, r6
 801cc94:	dbe7      	blt.n	801cc66 <__gethex+0x3ea>
 801cc96:	e7f0      	b.n	801cc7a <__gethex+0x3fe>
 801cc98:	08022194 	.word	0x08022194

0801cc9c <L_shift>:
 801cc9c:	f1c2 0208 	rsb	r2, r2, #8
 801cca0:	0092      	lsls	r2, r2, #2
 801cca2:	b570      	push	{r4, r5, r6, lr}
 801cca4:	f1c2 0620 	rsb	r6, r2, #32
 801cca8:	6843      	ldr	r3, [r0, #4]
 801ccaa:	6804      	ldr	r4, [r0, #0]
 801ccac:	fa03 f506 	lsl.w	r5, r3, r6
 801ccb0:	432c      	orrs	r4, r5
 801ccb2:	40d3      	lsrs	r3, r2
 801ccb4:	6004      	str	r4, [r0, #0]
 801ccb6:	f840 3f04 	str.w	r3, [r0, #4]!
 801ccba:	4288      	cmp	r0, r1
 801ccbc:	d3f4      	bcc.n	801cca8 <L_shift+0xc>
 801ccbe:	bd70      	pop	{r4, r5, r6, pc}

0801ccc0 <__match>:
 801ccc0:	b530      	push	{r4, r5, lr}
 801ccc2:	6803      	ldr	r3, [r0, #0]
 801ccc4:	3301      	adds	r3, #1
 801ccc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ccca:	b914      	cbnz	r4, 801ccd2 <__match+0x12>
 801cccc:	6003      	str	r3, [r0, #0]
 801ccce:	2001      	movs	r0, #1
 801ccd0:	bd30      	pop	{r4, r5, pc}
 801ccd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ccd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801ccda:	2d19      	cmp	r5, #25
 801ccdc:	bf98      	it	ls
 801ccde:	3220      	addls	r2, #32
 801cce0:	42a2      	cmp	r2, r4
 801cce2:	d0f0      	beq.n	801ccc6 <__match+0x6>
 801cce4:	2000      	movs	r0, #0
 801cce6:	e7f3      	b.n	801ccd0 <__match+0x10>

0801cce8 <__hexnan>:
 801cce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccec:	680b      	ldr	r3, [r1, #0]
 801ccee:	6801      	ldr	r1, [r0, #0]
 801ccf0:	115e      	asrs	r6, r3, #5
 801ccf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ccf6:	f013 031f 	ands.w	r3, r3, #31
 801ccfa:	b087      	sub	sp, #28
 801ccfc:	bf18      	it	ne
 801ccfe:	3604      	addne	r6, #4
 801cd00:	2500      	movs	r5, #0
 801cd02:	1f37      	subs	r7, r6, #4
 801cd04:	4682      	mov	sl, r0
 801cd06:	4690      	mov	r8, r2
 801cd08:	9301      	str	r3, [sp, #4]
 801cd0a:	f846 5c04 	str.w	r5, [r6, #-4]
 801cd0e:	46b9      	mov	r9, r7
 801cd10:	463c      	mov	r4, r7
 801cd12:	9502      	str	r5, [sp, #8]
 801cd14:	46ab      	mov	fp, r5
 801cd16:	784a      	ldrb	r2, [r1, #1]
 801cd18:	1c4b      	adds	r3, r1, #1
 801cd1a:	9303      	str	r3, [sp, #12]
 801cd1c:	b342      	cbz	r2, 801cd70 <__hexnan+0x88>
 801cd1e:	4610      	mov	r0, r2
 801cd20:	9105      	str	r1, [sp, #20]
 801cd22:	9204      	str	r2, [sp, #16]
 801cd24:	f7ff fd94 	bl	801c850 <__hexdig_fun>
 801cd28:	2800      	cmp	r0, #0
 801cd2a:	d151      	bne.n	801cdd0 <__hexnan+0xe8>
 801cd2c:	9a04      	ldr	r2, [sp, #16]
 801cd2e:	9905      	ldr	r1, [sp, #20]
 801cd30:	2a20      	cmp	r2, #32
 801cd32:	d818      	bhi.n	801cd66 <__hexnan+0x7e>
 801cd34:	9b02      	ldr	r3, [sp, #8]
 801cd36:	459b      	cmp	fp, r3
 801cd38:	dd13      	ble.n	801cd62 <__hexnan+0x7a>
 801cd3a:	454c      	cmp	r4, r9
 801cd3c:	d206      	bcs.n	801cd4c <__hexnan+0x64>
 801cd3e:	2d07      	cmp	r5, #7
 801cd40:	dc04      	bgt.n	801cd4c <__hexnan+0x64>
 801cd42:	462a      	mov	r2, r5
 801cd44:	4649      	mov	r1, r9
 801cd46:	4620      	mov	r0, r4
 801cd48:	f7ff ffa8 	bl	801cc9c <L_shift>
 801cd4c:	4544      	cmp	r4, r8
 801cd4e:	d952      	bls.n	801cdf6 <__hexnan+0x10e>
 801cd50:	2300      	movs	r3, #0
 801cd52:	f1a4 0904 	sub.w	r9, r4, #4
 801cd56:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd5a:	f8cd b008 	str.w	fp, [sp, #8]
 801cd5e:	464c      	mov	r4, r9
 801cd60:	461d      	mov	r5, r3
 801cd62:	9903      	ldr	r1, [sp, #12]
 801cd64:	e7d7      	b.n	801cd16 <__hexnan+0x2e>
 801cd66:	2a29      	cmp	r2, #41	@ 0x29
 801cd68:	d157      	bne.n	801ce1a <__hexnan+0x132>
 801cd6a:	3102      	adds	r1, #2
 801cd6c:	f8ca 1000 	str.w	r1, [sl]
 801cd70:	f1bb 0f00 	cmp.w	fp, #0
 801cd74:	d051      	beq.n	801ce1a <__hexnan+0x132>
 801cd76:	454c      	cmp	r4, r9
 801cd78:	d206      	bcs.n	801cd88 <__hexnan+0xa0>
 801cd7a:	2d07      	cmp	r5, #7
 801cd7c:	dc04      	bgt.n	801cd88 <__hexnan+0xa0>
 801cd7e:	462a      	mov	r2, r5
 801cd80:	4649      	mov	r1, r9
 801cd82:	4620      	mov	r0, r4
 801cd84:	f7ff ff8a 	bl	801cc9c <L_shift>
 801cd88:	4544      	cmp	r4, r8
 801cd8a:	d936      	bls.n	801cdfa <__hexnan+0x112>
 801cd8c:	f1a8 0204 	sub.w	r2, r8, #4
 801cd90:	4623      	mov	r3, r4
 801cd92:	f853 1b04 	ldr.w	r1, [r3], #4
 801cd96:	f842 1f04 	str.w	r1, [r2, #4]!
 801cd9a:	429f      	cmp	r7, r3
 801cd9c:	d2f9      	bcs.n	801cd92 <__hexnan+0xaa>
 801cd9e:	1b3b      	subs	r3, r7, r4
 801cda0:	f023 0303 	bic.w	r3, r3, #3
 801cda4:	3304      	adds	r3, #4
 801cda6:	3401      	adds	r4, #1
 801cda8:	3e03      	subs	r6, #3
 801cdaa:	42b4      	cmp	r4, r6
 801cdac:	bf88      	it	hi
 801cdae:	2304      	movhi	r3, #4
 801cdb0:	4443      	add	r3, r8
 801cdb2:	2200      	movs	r2, #0
 801cdb4:	f843 2b04 	str.w	r2, [r3], #4
 801cdb8:	429f      	cmp	r7, r3
 801cdba:	d2fb      	bcs.n	801cdb4 <__hexnan+0xcc>
 801cdbc:	683b      	ldr	r3, [r7, #0]
 801cdbe:	b91b      	cbnz	r3, 801cdc8 <__hexnan+0xe0>
 801cdc0:	4547      	cmp	r7, r8
 801cdc2:	d128      	bne.n	801ce16 <__hexnan+0x12e>
 801cdc4:	2301      	movs	r3, #1
 801cdc6:	603b      	str	r3, [r7, #0]
 801cdc8:	2005      	movs	r0, #5
 801cdca:	b007      	add	sp, #28
 801cdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdd0:	3501      	adds	r5, #1
 801cdd2:	2d08      	cmp	r5, #8
 801cdd4:	f10b 0b01 	add.w	fp, fp, #1
 801cdd8:	dd06      	ble.n	801cde8 <__hexnan+0x100>
 801cdda:	4544      	cmp	r4, r8
 801cddc:	d9c1      	bls.n	801cd62 <__hexnan+0x7a>
 801cdde:	2300      	movs	r3, #0
 801cde0:	f844 3c04 	str.w	r3, [r4, #-4]
 801cde4:	2501      	movs	r5, #1
 801cde6:	3c04      	subs	r4, #4
 801cde8:	6822      	ldr	r2, [r4, #0]
 801cdea:	f000 000f 	and.w	r0, r0, #15
 801cdee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801cdf2:	6020      	str	r0, [r4, #0]
 801cdf4:	e7b5      	b.n	801cd62 <__hexnan+0x7a>
 801cdf6:	2508      	movs	r5, #8
 801cdf8:	e7b3      	b.n	801cd62 <__hexnan+0x7a>
 801cdfa:	9b01      	ldr	r3, [sp, #4]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d0dd      	beq.n	801cdbc <__hexnan+0xd4>
 801ce00:	f1c3 0320 	rsb	r3, r3, #32
 801ce04:	f04f 32ff 	mov.w	r2, #4294967295
 801ce08:	40da      	lsrs	r2, r3
 801ce0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801ce0e:	4013      	ands	r3, r2
 801ce10:	f846 3c04 	str.w	r3, [r6, #-4]
 801ce14:	e7d2      	b.n	801cdbc <__hexnan+0xd4>
 801ce16:	3f04      	subs	r7, #4
 801ce18:	e7d0      	b.n	801cdbc <__hexnan+0xd4>
 801ce1a:	2004      	movs	r0, #4
 801ce1c:	e7d5      	b.n	801cdca <__hexnan+0xe2>

0801ce1e <__ascii_mbtowc>:
 801ce1e:	b082      	sub	sp, #8
 801ce20:	b901      	cbnz	r1, 801ce24 <__ascii_mbtowc+0x6>
 801ce22:	a901      	add	r1, sp, #4
 801ce24:	b142      	cbz	r2, 801ce38 <__ascii_mbtowc+0x1a>
 801ce26:	b14b      	cbz	r3, 801ce3c <__ascii_mbtowc+0x1e>
 801ce28:	7813      	ldrb	r3, [r2, #0]
 801ce2a:	600b      	str	r3, [r1, #0]
 801ce2c:	7812      	ldrb	r2, [r2, #0]
 801ce2e:	1e10      	subs	r0, r2, #0
 801ce30:	bf18      	it	ne
 801ce32:	2001      	movne	r0, #1
 801ce34:	b002      	add	sp, #8
 801ce36:	4770      	bx	lr
 801ce38:	4610      	mov	r0, r2
 801ce3a:	e7fb      	b.n	801ce34 <__ascii_mbtowc+0x16>
 801ce3c:	f06f 0001 	mvn.w	r0, #1
 801ce40:	e7f8      	b.n	801ce34 <__ascii_mbtowc+0x16>
	...

0801ce44 <_Balloc>:
 801ce44:	b570      	push	{r4, r5, r6, lr}
 801ce46:	69c6      	ldr	r6, [r0, #28]
 801ce48:	4604      	mov	r4, r0
 801ce4a:	460d      	mov	r5, r1
 801ce4c:	b976      	cbnz	r6, 801ce6c <_Balloc+0x28>
 801ce4e:	2010      	movs	r0, #16
 801ce50:	f7fc fd4a 	bl	80198e8 <malloc>
 801ce54:	4602      	mov	r2, r0
 801ce56:	61e0      	str	r0, [r4, #28]
 801ce58:	b920      	cbnz	r0, 801ce64 <_Balloc+0x20>
 801ce5a:	4b18      	ldr	r3, [pc, #96]	@ (801cebc <_Balloc+0x78>)
 801ce5c:	4818      	ldr	r0, [pc, #96]	@ (801cec0 <_Balloc+0x7c>)
 801ce5e:	216b      	movs	r1, #107	@ 0x6b
 801ce60:	f7fe fdf0 	bl	801ba44 <__assert_func>
 801ce64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ce68:	6006      	str	r6, [r0, #0]
 801ce6a:	60c6      	str	r6, [r0, #12]
 801ce6c:	69e6      	ldr	r6, [r4, #28]
 801ce6e:	68f3      	ldr	r3, [r6, #12]
 801ce70:	b183      	cbz	r3, 801ce94 <_Balloc+0x50>
 801ce72:	69e3      	ldr	r3, [r4, #28]
 801ce74:	68db      	ldr	r3, [r3, #12]
 801ce76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ce7a:	b9b8      	cbnz	r0, 801ceac <_Balloc+0x68>
 801ce7c:	2101      	movs	r1, #1
 801ce7e:	fa01 f605 	lsl.w	r6, r1, r5
 801ce82:	1d72      	adds	r2, r6, #5
 801ce84:	0092      	lsls	r2, r2, #2
 801ce86:	4620      	mov	r0, r4
 801ce88:	f001 f8a7 	bl	801dfda <_calloc_r>
 801ce8c:	b160      	cbz	r0, 801cea8 <_Balloc+0x64>
 801ce8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ce92:	e00e      	b.n	801ceb2 <_Balloc+0x6e>
 801ce94:	2221      	movs	r2, #33	@ 0x21
 801ce96:	2104      	movs	r1, #4
 801ce98:	4620      	mov	r0, r4
 801ce9a:	f001 f89e 	bl	801dfda <_calloc_r>
 801ce9e:	69e3      	ldr	r3, [r4, #28]
 801cea0:	60f0      	str	r0, [r6, #12]
 801cea2:	68db      	ldr	r3, [r3, #12]
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d1e4      	bne.n	801ce72 <_Balloc+0x2e>
 801cea8:	2000      	movs	r0, #0
 801ceaa:	bd70      	pop	{r4, r5, r6, pc}
 801ceac:	6802      	ldr	r2, [r0, #0]
 801ceae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ceb2:	2300      	movs	r3, #0
 801ceb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ceb8:	e7f7      	b.n	801ceaa <_Balloc+0x66>
 801ceba:	bf00      	nop
 801cebc:	0802207a 	.word	0x0802207a
 801cec0:	08022205 	.word	0x08022205

0801cec4 <_Bfree>:
 801cec4:	b570      	push	{r4, r5, r6, lr}
 801cec6:	69c6      	ldr	r6, [r0, #28]
 801cec8:	4605      	mov	r5, r0
 801ceca:	460c      	mov	r4, r1
 801cecc:	b976      	cbnz	r6, 801ceec <_Bfree+0x28>
 801cece:	2010      	movs	r0, #16
 801ced0:	f7fc fd0a 	bl	80198e8 <malloc>
 801ced4:	4602      	mov	r2, r0
 801ced6:	61e8      	str	r0, [r5, #28]
 801ced8:	b920      	cbnz	r0, 801cee4 <_Bfree+0x20>
 801ceda:	4b09      	ldr	r3, [pc, #36]	@ (801cf00 <_Bfree+0x3c>)
 801cedc:	4809      	ldr	r0, [pc, #36]	@ (801cf04 <_Bfree+0x40>)
 801cede:	218f      	movs	r1, #143	@ 0x8f
 801cee0:	f7fe fdb0 	bl	801ba44 <__assert_func>
 801cee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801cee8:	6006      	str	r6, [r0, #0]
 801ceea:	60c6      	str	r6, [r0, #12]
 801ceec:	b13c      	cbz	r4, 801cefe <_Bfree+0x3a>
 801ceee:	69eb      	ldr	r3, [r5, #28]
 801cef0:	6862      	ldr	r2, [r4, #4]
 801cef2:	68db      	ldr	r3, [r3, #12]
 801cef4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cef8:	6021      	str	r1, [r4, #0]
 801cefa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801cefe:	bd70      	pop	{r4, r5, r6, pc}
 801cf00:	0802207a 	.word	0x0802207a
 801cf04:	08022205 	.word	0x08022205

0801cf08 <__multadd>:
 801cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf0c:	690d      	ldr	r5, [r1, #16]
 801cf0e:	4607      	mov	r7, r0
 801cf10:	460c      	mov	r4, r1
 801cf12:	461e      	mov	r6, r3
 801cf14:	f101 0c14 	add.w	ip, r1, #20
 801cf18:	2000      	movs	r0, #0
 801cf1a:	f8dc 3000 	ldr.w	r3, [ip]
 801cf1e:	b299      	uxth	r1, r3
 801cf20:	fb02 6101 	mla	r1, r2, r1, r6
 801cf24:	0c1e      	lsrs	r6, r3, #16
 801cf26:	0c0b      	lsrs	r3, r1, #16
 801cf28:	fb02 3306 	mla	r3, r2, r6, r3
 801cf2c:	b289      	uxth	r1, r1
 801cf2e:	3001      	adds	r0, #1
 801cf30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801cf34:	4285      	cmp	r5, r0
 801cf36:	f84c 1b04 	str.w	r1, [ip], #4
 801cf3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801cf3e:	dcec      	bgt.n	801cf1a <__multadd+0x12>
 801cf40:	b30e      	cbz	r6, 801cf86 <__multadd+0x7e>
 801cf42:	68a3      	ldr	r3, [r4, #8]
 801cf44:	42ab      	cmp	r3, r5
 801cf46:	dc19      	bgt.n	801cf7c <__multadd+0x74>
 801cf48:	6861      	ldr	r1, [r4, #4]
 801cf4a:	4638      	mov	r0, r7
 801cf4c:	3101      	adds	r1, #1
 801cf4e:	f7ff ff79 	bl	801ce44 <_Balloc>
 801cf52:	4680      	mov	r8, r0
 801cf54:	b928      	cbnz	r0, 801cf62 <__multadd+0x5a>
 801cf56:	4602      	mov	r2, r0
 801cf58:	4b0c      	ldr	r3, [pc, #48]	@ (801cf8c <__multadd+0x84>)
 801cf5a:	480d      	ldr	r0, [pc, #52]	@ (801cf90 <__multadd+0x88>)
 801cf5c:	21ba      	movs	r1, #186	@ 0xba
 801cf5e:	f7fe fd71 	bl	801ba44 <__assert_func>
 801cf62:	6922      	ldr	r2, [r4, #16]
 801cf64:	3202      	adds	r2, #2
 801cf66:	f104 010c 	add.w	r1, r4, #12
 801cf6a:	0092      	lsls	r2, r2, #2
 801cf6c:	300c      	adds	r0, #12
 801cf6e:	f7fe fd4c 	bl	801ba0a <memcpy>
 801cf72:	4621      	mov	r1, r4
 801cf74:	4638      	mov	r0, r7
 801cf76:	f7ff ffa5 	bl	801cec4 <_Bfree>
 801cf7a:	4644      	mov	r4, r8
 801cf7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cf80:	3501      	adds	r5, #1
 801cf82:	615e      	str	r6, [r3, #20]
 801cf84:	6125      	str	r5, [r4, #16]
 801cf86:	4620      	mov	r0, r4
 801cf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf8c:	08022194 	.word	0x08022194
 801cf90:	08022205 	.word	0x08022205

0801cf94 <__s2b>:
 801cf94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cf98:	460c      	mov	r4, r1
 801cf9a:	4615      	mov	r5, r2
 801cf9c:	461f      	mov	r7, r3
 801cf9e:	2209      	movs	r2, #9
 801cfa0:	3308      	adds	r3, #8
 801cfa2:	4606      	mov	r6, r0
 801cfa4:	fb93 f3f2 	sdiv	r3, r3, r2
 801cfa8:	2100      	movs	r1, #0
 801cfaa:	2201      	movs	r2, #1
 801cfac:	429a      	cmp	r2, r3
 801cfae:	db09      	blt.n	801cfc4 <__s2b+0x30>
 801cfb0:	4630      	mov	r0, r6
 801cfb2:	f7ff ff47 	bl	801ce44 <_Balloc>
 801cfb6:	b940      	cbnz	r0, 801cfca <__s2b+0x36>
 801cfb8:	4602      	mov	r2, r0
 801cfba:	4b19      	ldr	r3, [pc, #100]	@ (801d020 <__s2b+0x8c>)
 801cfbc:	4819      	ldr	r0, [pc, #100]	@ (801d024 <__s2b+0x90>)
 801cfbe:	21d3      	movs	r1, #211	@ 0xd3
 801cfc0:	f7fe fd40 	bl	801ba44 <__assert_func>
 801cfc4:	0052      	lsls	r2, r2, #1
 801cfc6:	3101      	adds	r1, #1
 801cfc8:	e7f0      	b.n	801cfac <__s2b+0x18>
 801cfca:	9b08      	ldr	r3, [sp, #32]
 801cfcc:	6143      	str	r3, [r0, #20]
 801cfce:	2d09      	cmp	r5, #9
 801cfd0:	f04f 0301 	mov.w	r3, #1
 801cfd4:	6103      	str	r3, [r0, #16]
 801cfd6:	dd16      	ble.n	801d006 <__s2b+0x72>
 801cfd8:	f104 0909 	add.w	r9, r4, #9
 801cfdc:	46c8      	mov	r8, r9
 801cfde:	442c      	add	r4, r5
 801cfe0:	f818 3b01 	ldrb.w	r3, [r8], #1
 801cfe4:	4601      	mov	r1, r0
 801cfe6:	3b30      	subs	r3, #48	@ 0x30
 801cfe8:	220a      	movs	r2, #10
 801cfea:	4630      	mov	r0, r6
 801cfec:	f7ff ff8c 	bl	801cf08 <__multadd>
 801cff0:	45a0      	cmp	r8, r4
 801cff2:	d1f5      	bne.n	801cfe0 <__s2b+0x4c>
 801cff4:	f1a5 0408 	sub.w	r4, r5, #8
 801cff8:	444c      	add	r4, r9
 801cffa:	1b2d      	subs	r5, r5, r4
 801cffc:	1963      	adds	r3, r4, r5
 801cffe:	42bb      	cmp	r3, r7
 801d000:	db04      	blt.n	801d00c <__s2b+0x78>
 801d002:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d006:	340a      	adds	r4, #10
 801d008:	2509      	movs	r5, #9
 801d00a:	e7f6      	b.n	801cffa <__s2b+0x66>
 801d00c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d010:	4601      	mov	r1, r0
 801d012:	3b30      	subs	r3, #48	@ 0x30
 801d014:	220a      	movs	r2, #10
 801d016:	4630      	mov	r0, r6
 801d018:	f7ff ff76 	bl	801cf08 <__multadd>
 801d01c:	e7ee      	b.n	801cffc <__s2b+0x68>
 801d01e:	bf00      	nop
 801d020:	08022194 	.word	0x08022194
 801d024:	08022205 	.word	0x08022205

0801d028 <__hi0bits>:
 801d028:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801d02c:	4603      	mov	r3, r0
 801d02e:	bf36      	itet	cc
 801d030:	0403      	lslcc	r3, r0, #16
 801d032:	2000      	movcs	r0, #0
 801d034:	2010      	movcc	r0, #16
 801d036:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d03a:	bf3c      	itt	cc
 801d03c:	021b      	lslcc	r3, r3, #8
 801d03e:	3008      	addcc	r0, #8
 801d040:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d044:	bf3c      	itt	cc
 801d046:	011b      	lslcc	r3, r3, #4
 801d048:	3004      	addcc	r0, #4
 801d04a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d04e:	bf3c      	itt	cc
 801d050:	009b      	lslcc	r3, r3, #2
 801d052:	3002      	addcc	r0, #2
 801d054:	2b00      	cmp	r3, #0
 801d056:	db05      	blt.n	801d064 <__hi0bits+0x3c>
 801d058:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801d05c:	f100 0001 	add.w	r0, r0, #1
 801d060:	bf08      	it	eq
 801d062:	2020      	moveq	r0, #32
 801d064:	4770      	bx	lr

0801d066 <__lo0bits>:
 801d066:	6803      	ldr	r3, [r0, #0]
 801d068:	4602      	mov	r2, r0
 801d06a:	f013 0007 	ands.w	r0, r3, #7
 801d06e:	d00b      	beq.n	801d088 <__lo0bits+0x22>
 801d070:	07d9      	lsls	r1, r3, #31
 801d072:	d421      	bmi.n	801d0b8 <__lo0bits+0x52>
 801d074:	0798      	lsls	r0, r3, #30
 801d076:	bf49      	itett	mi
 801d078:	085b      	lsrmi	r3, r3, #1
 801d07a:	089b      	lsrpl	r3, r3, #2
 801d07c:	2001      	movmi	r0, #1
 801d07e:	6013      	strmi	r3, [r2, #0]
 801d080:	bf5c      	itt	pl
 801d082:	6013      	strpl	r3, [r2, #0]
 801d084:	2002      	movpl	r0, #2
 801d086:	4770      	bx	lr
 801d088:	b299      	uxth	r1, r3
 801d08a:	b909      	cbnz	r1, 801d090 <__lo0bits+0x2a>
 801d08c:	0c1b      	lsrs	r3, r3, #16
 801d08e:	2010      	movs	r0, #16
 801d090:	b2d9      	uxtb	r1, r3
 801d092:	b909      	cbnz	r1, 801d098 <__lo0bits+0x32>
 801d094:	3008      	adds	r0, #8
 801d096:	0a1b      	lsrs	r3, r3, #8
 801d098:	0719      	lsls	r1, r3, #28
 801d09a:	bf04      	itt	eq
 801d09c:	091b      	lsreq	r3, r3, #4
 801d09e:	3004      	addeq	r0, #4
 801d0a0:	0799      	lsls	r1, r3, #30
 801d0a2:	bf04      	itt	eq
 801d0a4:	089b      	lsreq	r3, r3, #2
 801d0a6:	3002      	addeq	r0, #2
 801d0a8:	07d9      	lsls	r1, r3, #31
 801d0aa:	d403      	bmi.n	801d0b4 <__lo0bits+0x4e>
 801d0ac:	085b      	lsrs	r3, r3, #1
 801d0ae:	f100 0001 	add.w	r0, r0, #1
 801d0b2:	d003      	beq.n	801d0bc <__lo0bits+0x56>
 801d0b4:	6013      	str	r3, [r2, #0]
 801d0b6:	4770      	bx	lr
 801d0b8:	2000      	movs	r0, #0
 801d0ba:	4770      	bx	lr
 801d0bc:	2020      	movs	r0, #32
 801d0be:	4770      	bx	lr

0801d0c0 <__i2b>:
 801d0c0:	b510      	push	{r4, lr}
 801d0c2:	460c      	mov	r4, r1
 801d0c4:	2101      	movs	r1, #1
 801d0c6:	f7ff febd 	bl	801ce44 <_Balloc>
 801d0ca:	4602      	mov	r2, r0
 801d0cc:	b928      	cbnz	r0, 801d0da <__i2b+0x1a>
 801d0ce:	4b05      	ldr	r3, [pc, #20]	@ (801d0e4 <__i2b+0x24>)
 801d0d0:	4805      	ldr	r0, [pc, #20]	@ (801d0e8 <__i2b+0x28>)
 801d0d2:	f240 1145 	movw	r1, #325	@ 0x145
 801d0d6:	f7fe fcb5 	bl	801ba44 <__assert_func>
 801d0da:	2301      	movs	r3, #1
 801d0dc:	6144      	str	r4, [r0, #20]
 801d0de:	6103      	str	r3, [r0, #16]
 801d0e0:	bd10      	pop	{r4, pc}
 801d0e2:	bf00      	nop
 801d0e4:	08022194 	.word	0x08022194
 801d0e8:	08022205 	.word	0x08022205

0801d0ec <__multiply>:
 801d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0f0:	4614      	mov	r4, r2
 801d0f2:	690a      	ldr	r2, [r1, #16]
 801d0f4:	6923      	ldr	r3, [r4, #16]
 801d0f6:	429a      	cmp	r2, r3
 801d0f8:	bfa8      	it	ge
 801d0fa:	4623      	movge	r3, r4
 801d0fc:	460f      	mov	r7, r1
 801d0fe:	bfa4      	itt	ge
 801d100:	460c      	movge	r4, r1
 801d102:	461f      	movge	r7, r3
 801d104:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801d108:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801d10c:	68a3      	ldr	r3, [r4, #8]
 801d10e:	6861      	ldr	r1, [r4, #4]
 801d110:	eb0a 0609 	add.w	r6, sl, r9
 801d114:	42b3      	cmp	r3, r6
 801d116:	b085      	sub	sp, #20
 801d118:	bfb8      	it	lt
 801d11a:	3101      	addlt	r1, #1
 801d11c:	f7ff fe92 	bl	801ce44 <_Balloc>
 801d120:	b930      	cbnz	r0, 801d130 <__multiply+0x44>
 801d122:	4602      	mov	r2, r0
 801d124:	4b44      	ldr	r3, [pc, #272]	@ (801d238 <__multiply+0x14c>)
 801d126:	4845      	ldr	r0, [pc, #276]	@ (801d23c <__multiply+0x150>)
 801d128:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801d12c:	f7fe fc8a 	bl	801ba44 <__assert_func>
 801d130:	f100 0514 	add.w	r5, r0, #20
 801d134:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801d138:	462b      	mov	r3, r5
 801d13a:	2200      	movs	r2, #0
 801d13c:	4543      	cmp	r3, r8
 801d13e:	d321      	bcc.n	801d184 <__multiply+0x98>
 801d140:	f107 0114 	add.w	r1, r7, #20
 801d144:	f104 0214 	add.w	r2, r4, #20
 801d148:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801d14c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801d150:	9302      	str	r3, [sp, #8]
 801d152:	1b13      	subs	r3, r2, r4
 801d154:	3b15      	subs	r3, #21
 801d156:	f023 0303 	bic.w	r3, r3, #3
 801d15a:	3304      	adds	r3, #4
 801d15c:	f104 0715 	add.w	r7, r4, #21
 801d160:	42ba      	cmp	r2, r7
 801d162:	bf38      	it	cc
 801d164:	2304      	movcc	r3, #4
 801d166:	9301      	str	r3, [sp, #4]
 801d168:	9b02      	ldr	r3, [sp, #8]
 801d16a:	9103      	str	r1, [sp, #12]
 801d16c:	428b      	cmp	r3, r1
 801d16e:	d80c      	bhi.n	801d18a <__multiply+0x9e>
 801d170:	2e00      	cmp	r6, #0
 801d172:	dd03      	ble.n	801d17c <__multiply+0x90>
 801d174:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d178:	2b00      	cmp	r3, #0
 801d17a:	d05b      	beq.n	801d234 <__multiply+0x148>
 801d17c:	6106      	str	r6, [r0, #16]
 801d17e:	b005      	add	sp, #20
 801d180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d184:	f843 2b04 	str.w	r2, [r3], #4
 801d188:	e7d8      	b.n	801d13c <__multiply+0x50>
 801d18a:	f8b1 a000 	ldrh.w	sl, [r1]
 801d18e:	f1ba 0f00 	cmp.w	sl, #0
 801d192:	d024      	beq.n	801d1de <__multiply+0xf2>
 801d194:	f104 0e14 	add.w	lr, r4, #20
 801d198:	46a9      	mov	r9, r5
 801d19a:	f04f 0c00 	mov.w	ip, #0
 801d19e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d1a2:	f8d9 3000 	ldr.w	r3, [r9]
 801d1a6:	fa1f fb87 	uxth.w	fp, r7
 801d1aa:	b29b      	uxth	r3, r3
 801d1ac:	fb0a 330b 	mla	r3, sl, fp, r3
 801d1b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801d1b4:	f8d9 7000 	ldr.w	r7, [r9]
 801d1b8:	4463      	add	r3, ip
 801d1ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d1be:	fb0a c70b 	mla	r7, sl, fp, ip
 801d1c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801d1c6:	b29b      	uxth	r3, r3
 801d1c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d1cc:	4572      	cmp	r2, lr
 801d1ce:	f849 3b04 	str.w	r3, [r9], #4
 801d1d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801d1d6:	d8e2      	bhi.n	801d19e <__multiply+0xb2>
 801d1d8:	9b01      	ldr	r3, [sp, #4]
 801d1da:	f845 c003 	str.w	ip, [r5, r3]
 801d1de:	9b03      	ldr	r3, [sp, #12]
 801d1e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801d1e4:	3104      	adds	r1, #4
 801d1e6:	f1b9 0f00 	cmp.w	r9, #0
 801d1ea:	d021      	beq.n	801d230 <__multiply+0x144>
 801d1ec:	682b      	ldr	r3, [r5, #0]
 801d1ee:	f104 0c14 	add.w	ip, r4, #20
 801d1f2:	46ae      	mov	lr, r5
 801d1f4:	f04f 0a00 	mov.w	sl, #0
 801d1f8:	f8bc b000 	ldrh.w	fp, [ip]
 801d1fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801d200:	fb09 770b 	mla	r7, r9, fp, r7
 801d204:	4457      	add	r7, sl
 801d206:	b29b      	uxth	r3, r3
 801d208:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801d20c:	f84e 3b04 	str.w	r3, [lr], #4
 801d210:	f85c 3b04 	ldr.w	r3, [ip], #4
 801d214:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d218:	f8be 3000 	ldrh.w	r3, [lr]
 801d21c:	fb09 330a 	mla	r3, r9, sl, r3
 801d220:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801d224:	4562      	cmp	r2, ip
 801d226:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801d22a:	d8e5      	bhi.n	801d1f8 <__multiply+0x10c>
 801d22c:	9f01      	ldr	r7, [sp, #4]
 801d22e:	51eb      	str	r3, [r5, r7]
 801d230:	3504      	adds	r5, #4
 801d232:	e799      	b.n	801d168 <__multiply+0x7c>
 801d234:	3e01      	subs	r6, #1
 801d236:	e79b      	b.n	801d170 <__multiply+0x84>
 801d238:	08022194 	.word	0x08022194
 801d23c:	08022205 	.word	0x08022205

0801d240 <__pow5mult>:
 801d240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d244:	4615      	mov	r5, r2
 801d246:	f012 0203 	ands.w	r2, r2, #3
 801d24a:	4607      	mov	r7, r0
 801d24c:	460e      	mov	r6, r1
 801d24e:	d007      	beq.n	801d260 <__pow5mult+0x20>
 801d250:	4c25      	ldr	r4, [pc, #148]	@ (801d2e8 <__pow5mult+0xa8>)
 801d252:	3a01      	subs	r2, #1
 801d254:	2300      	movs	r3, #0
 801d256:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d25a:	f7ff fe55 	bl	801cf08 <__multadd>
 801d25e:	4606      	mov	r6, r0
 801d260:	10ad      	asrs	r5, r5, #2
 801d262:	d03d      	beq.n	801d2e0 <__pow5mult+0xa0>
 801d264:	69fc      	ldr	r4, [r7, #28]
 801d266:	b97c      	cbnz	r4, 801d288 <__pow5mult+0x48>
 801d268:	2010      	movs	r0, #16
 801d26a:	f7fc fb3d 	bl	80198e8 <malloc>
 801d26e:	4602      	mov	r2, r0
 801d270:	61f8      	str	r0, [r7, #28]
 801d272:	b928      	cbnz	r0, 801d280 <__pow5mult+0x40>
 801d274:	4b1d      	ldr	r3, [pc, #116]	@ (801d2ec <__pow5mult+0xac>)
 801d276:	481e      	ldr	r0, [pc, #120]	@ (801d2f0 <__pow5mult+0xb0>)
 801d278:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801d27c:	f7fe fbe2 	bl	801ba44 <__assert_func>
 801d280:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d284:	6004      	str	r4, [r0, #0]
 801d286:	60c4      	str	r4, [r0, #12]
 801d288:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801d28c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d290:	b94c      	cbnz	r4, 801d2a6 <__pow5mult+0x66>
 801d292:	f240 2171 	movw	r1, #625	@ 0x271
 801d296:	4638      	mov	r0, r7
 801d298:	f7ff ff12 	bl	801d0c0 <__i2b>
 801d29c:	2300      	movs	r3, #0
 801d29e:	f8c8 0008 	str.w	r0, [r8, #8]
 801d2a2:	4604      	mov	r4, r0
 801d2a4:	6003      	str	r3, [r0, #0]
 801d2a6:	f04f 0900 	mov.w	r9, #0
 801d2aa:	07eb      	lsls	r3, r5, #31
 801d2ac:	d50a      	bpl.n	801d2c4 <__pow5mult+0x84>
 801d2ae:	4631      	mov	r1, r6
 801d2b0:	4622      	mov	r2, r4
 801d2b2:	4638      	mov	r0, r7
 801d2b4:	f7ff ff1a 	bl	801d0ec <__multiply>
 801d2b8:	4631      	mov	r1, r6
 801d2ba:	4680      	mov	r8, r0
 801d2bc:	4638      	mov	r0, r7
 801d2be:	f7ff fe01 	bl	801cec4 <_Bfree>
 801d2c2:	4646      	mov	r6, r8
 801d2c4:	106d      	asrs	r5, r5, #1
 801d2c6:	d00b      	beq.n	801d2e0 <__pow5mult+0xa0>
 801d2c8:	6820      	ldr	r0, [r4, #0]
 801d2ca:	b938      	cbnz	r0, 801d2dc <__pow5mult+0x9c>
 801d2cc:	4622      	mov	r2, r4
 801d2ce:	4621      	mov	r1, r4
 801d2d0:	4638      	mov	r0, r7
 801d2d2:	f7ff ff0b 	bl	801d0ec <__multiply>
 801d2d6:	6020      	str	r0, [r4, #0]
 801d2d8:	f8c0 9000 	str.w	r9, [r0]
 801d2dc:	4604      	mov	r4, r0
 801d2de:	e7e4      	b.n	801d2aa <__pow5mult+0x6a>
 801d2e0:	4630      	mov	r0, r6
 801d2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2e6:	bf00      	nop
 801d2e8:	08022260 	.word	0x08022260
 801d2ec:	0802207a 	.word	0x0802207a
 801d2f0:	08022205 	.word	0x08022205

0801d2f4 <__lshift>:
 801d2f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2f8:	460c      	mov	r4, r1
 801d2fa:	6849      	ldr	r1, [r1, #4]
 801d2fc:	6923      	ldr	r3, [r4, #16]
 801d2fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d302:	68a3      	ldr	r3, [r4, #8]
 801d304:	4607      	mov	r7, r0
 801d306:	4691      	mov	r9, r2
 801d308:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d30c:	f108 0601 	add.w	r6, r8, #1
 801d310:	42b3      	cmp	r3, r6
 801d312:	db0b      	blt.n	801d32c <__lshift+0x38>
 801d314:	4638      	mov	r0, r7
 801d316:	f7ff fd95 	bl	801ce44 <_Balloc>
 801d31a:	4605      	mov	r5, r0
 801d31c:	b948      	cbnz	r0, 801d332 <__lshift+0x3e>
 801d31e:	4602      	mov	r2, r0
 801d320:	4b28      	ldr	r3, [pc, #160]	@ (801d3c4 <__lshift+0xd0>)
 801d322:	4829      	ldr	r0, [pc, #164]	@ (801d3c8 <__lshift+0xd4>)
 801d324:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801d328:	f7fe fb8c 	bl	801ba44 <__assert_func>
 801d32c:	3101      	adds	r1, #1
 801d32e:	005b      	lsls	r3, r3, #1
 801d330:	e7ee      	b.n	801d310 <__lshift+0x1c>
 801d332:	2300      	movs	r3, #0
 801d334:	f100 0114 	add.w	r1, r0, #20
 801d338:	f100 0210 	add.w	r2, r0, #16
 801d33c:	4618      	mov	r0, r3
 801d33e:	4553      	cmp	r3, sl
 801d340:	db33      	blt.n	801d3aa <__lshift+0xb6>
 801d342:	6920      	ldr	r0, [r4, #16]
 801d344:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d348:	f104 0314 	add.w	r3, r4, #20
 801d34c:	f019 091f 	ands.w	r9, r9, #31
 801d350:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d354:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d358:	d02b      	beq.n	801d3b2 <__lshift+0xbe>
 801d35a:	f1c9 0e20 	rsb	lr, r9, #32
 801d35e:	468a      	mov	sl, r1
 801d360:	2200      	movs	r2, #0
 801d362:	6818      	ldr	r0, [r3, #0]
 801d364:	fa00 f009 	lsl.w	r0, r0, r9
 801d368:	4310      	orrs	r0, r2
 801d36a:	f84a 0b04 	str.w	r0, [sl], #4
 801d36e:	f853 2b04 	ldr.w	r2, [r3], #4
 801d372:	459c      	cmp	ip, r3
 801d374:	fa22 f20e 	lsr.w	r2, r2, lr
 801d378:	d8f3      	bhi.n	801d362 <__lshift+0x6e>
 801d37a:	ebac 0304 	sub.w	r3, ip, r4
 801d37e:	3b15      	subs	r3, #21
 801d380:	f023 0303 	bic.w	r3, r3, #3
 801d384:	3304      	adds	r3, #4
 801d386:	f104 0015 	add.w	r0, r4, #21
 801d38a:	4584      	cmp	ip, r0
 801d38c:	bf38      	it	cc
 801d38e:	2304      	movcc	r3, #4
 801d390:	50ca      	str	r2, [r1, r3]
 801d392:	b10a      	cbz	r2, 801d398 <__lshift+0xa4>
 801d394:	f108 0602 	add.w	r6, r8, #2
 801d398:	3e01      	subs	r6, #1
 801d39a:	4638      	mov	r0, r7
 801d39c:	612e      	str	r6, [r5, #16]
 801d39e:	4621      	mov	r1, r4
 801d3a0:	f7ff fd90 	bl	801cec4 <_Bfree>
 801d3a4:	4628      	mov	r0, r5
 801d3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3aa:	f842 0f04 	str.w	r0, [r2, #4]!
 801d3ae:	3301      	adds	r3, #1
 801d3b0:	e7c5      	b.n	801d33e <__lshift+0x4a>
 801d3b2:	3904      	subs	r1, #4
 801d3b4:	f853 2b04 	ldr.w	r2, [r3], #4
 801d3b8:	f841 2f04 	str.w	r2, [r1, #4]!
 801d3bc:	459c      	cmp	ip, r3
 801d3be:	d8f9      	bhi.n	801d3b4 <__lshift+0xc0>
 801d3c0:	e7ea      	b.n	801d398 <__lshift+0xa4>
 801d3c2:	bf00      	nop
 801d3c4:	08022194 	.word	0x08022194
 801d3c8:	08022205 	.word	0x08022205

0801d3cc <__mcmp>:
 801d3cc:	690a      	ldr	r2, [r1, #16]
 801d3ce:	4603      	mov	r3, r0
 801d3d0:	6900      	ldr	r0, [r0, #16]
 801d3d2:	1a80      	subs	r0, r0, r2
 801d3d4:	b530      	push	{r4, r5, lr}
 801d3d6:	d10e      	bne.n	801d3f6 <__mcmp+0x2a>
 801d3d8:	3314      	adds	r3, #20
 801d3da:	3114      	adds	r1, #20
 801d3dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801d3e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801d3e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d3e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d3ec:	4295      	cmp	r5, r2
 801d3ee:	d003      	beq.n	801d3f8 <__mcmp+0x2c>
 801d3f0:	d205      	bcs.n	801d3fe <__mcmp+0x32>
 801d3f2:	f04f 30ff 	mov.w	r0, #4294967295
 801d3f6:	bd30      	pop	{r4, r5, pc}
 801d3f8:	42a3      	cmp	r3, r4
 801d3fa:	d3f3      	bcc.n	801d3e4 <__mcmp+0x18>
 801d3fc:	e7fb      	b.n	801d3f6 <__mcmp+0x2a>
 801d3fe:	2001      	movs	r0, #1
 801d400:	e7f9      	b.n	801d3f6 <__mcmp+0x2a>
	...

0801d404 <__mdiff>:
 801d404:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d408:	4689      	mov	r9, r1
 801d40a:	4606      	mov	r6, r0
 801d40c:	4611      	mov	r1, r2
 801d40e:	4648      	mov	r0, r9
 801d410:	4614      	mov	r4, r2
 801d412:	f7ff ffdb 	bl	801d3cc <__mcmp>
 801d416:	1e05      	subs	r5, r0, #0
 801d418:	d112      	bne.n	801d440 <__mdiff+0x3c>
 801d41a:	4629      	mov	r1, r5
 801d41c:	4630      	mov	r0, r6
 801d41e:	f7ff fd11 	bl	801ce44 <_Balloc>
 801d422:	4602      	mov	r2, r0
 801d424:	b928      	cbnz	r0, 801d432 <__mdiff+0x2e>
 801d426:	4b3f      	ldr	r3, [pc, #252]	@ (801d524 <__mdiff+0x120>)
 801d428:	f240 2137 	movw	r1, #567	@ 0x237
 801d42c:	483e      	ldr	r0, [pc, #248]	@ (801d528 <__mdiff+0x124>)
 801d42e:	f7fe fb09 	bl	801ba44 <__assert_func>
 801d432:	2301      	movs	r3, #1
 801d434:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d438:	4610      	mov	r0, r2
 801d43a:	b003      	add	sp, #12
 801d43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d440:	bfbc      	itt	lt
 801d442:	464b      	movlt	r3, r9
 801d444:	46a1      	movlt	r9, r4
 801d446:	4630      	mov	r0, r6
 801d448:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801d44c:	bfba      	itte	lt
 801d44e:	461c      	movlt	r4, r3
 801d450:	2501      	movlt	r5, #1
 801d452:	2500      	movge	r5, #0
 801d454:	f7ff fcf6 	bl	801ce44 <_Balloc>
 801d458:	4602      	mov	r2, r0
 801d45a:	b918      	cbnz	r0, 801d464 <__mdiff+0x60>
 801d45c:	4b31      	ldr	r3, [pc, #196]	@ (801d524 <__mdiff+0x120>)
 801d45e:	f240 2145 	movw	r1, #581	@ 0x245
 801d462:	e7e3      	b.n	801d42c <__mdiff+0x28>
 801d464:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801d468:	6926      	ldr	r6, [r4, #16]
 801d46a:	60c5      	str	r5, [r0, #12]
 801d46c:	f109 0310 	add.w	r3, r9, #16
 801d470:	f109 0514 	add.w	r5, r9, #20
 801d474:	f104 0e14 	add.w	lr, r4, #20
 801d478:	f100 0b14 	add.w	fp, r0, #20
 801d47c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801d480:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801d484:	9301      	str	r3, [sp, #4]
 801d486:	46d9      	mov	r9, fp
 801d488:	f04f 0c00 	mov.w	ip, #0
 801d48c:	9b01      	ldr	r3, [sp, #4]
 801d48e:	f85e 0b04 	ldr.w	r0, [lr], #4
 801d492:	f853 af04 	ldr.w	sl, [r3, #4]!
 801d496:	9301      	str	r3, [sp, #4]
 801d498:	fa1f f38a 	uxth.w	r3, sl
 801d49c:	4619      	mov	r1, r3
 801d49e:	b283      	uxth	r3, r0
 801d4a0:	1acb      	subs	r3, r1, r3
 801d4a2:	0c00      	lsrs	r0, r0, #16
 801d4a4:	4463      	add	r3, ip
 801d4a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801d4aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801d4ae:	b29b      	uxth	r3, r3
 801d4b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801d4b4:	4576      	cmp	r6, lr
 801d4b6:	f849 3b04 	str.w	r3, [r9], #4
 801d4ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d4be:	d8e5      	bhi.n	801d48c <__mdiff+0x88>
 801d4c0:	1b33      	subs	r3, r6, r4
 801d4c2:	3b15      	subs	r3, #21
 801d4c4:	f023 0303 	bic.w	r3, r3, #3
 801d4c8:	3415      	adds	r4, #21
 801d4ca:	3304      	adds	r3, #4
 801d4cc:	42a6      	cmp	r6, r4
 801d4ce:	bf38      	it	cc
 801d4d0:	2304      	movcc	r3, #4
 801d4d2:	441d      	add	r5, r3
 801d4d4:	445b      	add	r3, fp
 801d4d6:	461e      	mov	r6, r3
 801d4d8:	462c      	mov	r4, r5
 801d4da:	4544      	cmp	r4, r8
 801d4dc:	d30e      	bcc.n	801d4fc <__mdiff+0xf8>
 801d4de:	f108 0103 	add.w	r1, r8, #3
 801d4e2:	1b49      	subs	r1, r1, r5
 801d4e4:	f021 0103 	bic.w	r1, r1, #3
 801d4e8:	3d03      	subs	r5, #3
 801d4ea:	45a8      	cmp	r8, r5
 801d4ec:	bf38      	it	cc
 801d4ee:	2100      	movcc	r1, #0
 801d4f0:	440b      	add	r3, r1
 801d4f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d4f6:	b191      	cbz	r1, 801d51e <__mdiff+0x11a>
 801d4f8:	6117      	str	r7, [r2, #16]
 801d4fa:	e79d      	b.n	801d438 <__mdiff+0x34>
 801d4fc:	f854 1b04 	ldr.w	r1, [r4], #4
 801d500:	46e6      	mov	lr, ip
 801d502:	0c08      	lsrs	r0, r1, #16
 801d504:	fa1c fc81 	uxtah	ip, ip, r1
 801d508:	4471      	add	r1, lr
 801d50a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801d50e:	b289      	uxth	r1, r1
 801d510:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801d514:	f846 1b04 	str.w	r1, [r6], #4
 801d518:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801d51c:	e7dd      	b.n	801d4da <__mdiff+0xd6>
 801d51e:	3f01      	subs	r7, #1
 801d520:	e7e7      	b.n	801d4f2 <__mdiff+0xee>
 801d522:	bf00      	nop
 801d524:	08022194 	.word	0x08022194
 801d528:	08022205 	.word	0x08022205

0801d52c <__ulp>:
 801d52c:	b082      	sub	sp, #8
 801d52e:	ed8d 0b00 	vstr	d0, [sp]
 801d532:	9a01      	ldr	r2, [sp, #4]
 801d534:	4b0f      	ldr	r3, [pc, #60]	@ (801d574 <__ulp+0x48>)
 801d536:	4013      	ands	r3, r2
 801d538:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	dc08      	bgt.n	801d552 <__ulp+0x26>
 801d540:	425b      	negs	r3, r3
 801d542:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801d546:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d54a:	da04      	bge.n	801d556 <__ulp+0x2a>
 801d54c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801d550:	4113      	asrs	r3, r2
 801d552:	2200      	movs	r2, #0
 801d554:	e008      	b.n	801d568 <__ulp+0x3c>
 801d556:	f1a2 0314 	sub.w	r3, r2, #20
 801d55a:	2b1e      	cmp	r3, #30
 801d55c:	bfda      	itte	le
 801d55e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801d562:	40da      	lsrle	r2, r3
 801d564:	2201      	movgt	r2, #1
 801d566:	2300      	movs	r3, #0
 801d568:	4619      	mov	r1, r3
 801d56a:	4610      	mov	r0, r2
 801d56c:	ec41 0b10 	vmov	d0, r0, r1
 801d570:	b002      	add	sp, #8
 801d572:	4770      	bx	lr
 801d574:	7ff00000 	.word	0x7ff00000

0801d578 <__b2d>:
 801d578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d57c:	6906      	ldr	r6, [r0, #16]
 801d57e:	f100 0814 	add.w	r8, r0, #20
 801d582:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801d586:	1f37      	subs	r7, r6, #4
 801d588:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801d58c:	4610      	mov	r0, r2
 801d58e:	f7ff fd4b 	bl	801d028 <__hi0bits>
 801d592:	f1c0 0320 	rsb	r3, r0, #32
 801d596:	280a      	cmp	r0, #10
 801d598:	600b      	str	r3, [r1, #0]
 801d59a:	491b      	ldr	r1, [pc, #108]	@ (801d608 <__b2d+0x90>)
 801d59c:	dc15      	bgt.n	801d5ca <__b2d+0x52>
 801d59e:	f1c0 0c0b 	rsb	ip, r0, #11
 801d5a2:	fa22 f30c 	lsr.w	r3, r2, ip
 801d5a6:	45b8      	cmp	r8, r7
 801d5a8:	ea43 0501 	orr.w	r5, r3, r1
 801d5ac:	bf34      	ite	cc
 801d5ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d5b2:	2300      	movcs	r3, #0
 801d5b4:	3015      	adds	r0, #21
 801d5b6:	fa02 f000 	lsl.w	r0, r2, r0
 801d5ba:	fa23 f30c 	lsr.w	r3, r3, ip
 801d5be:	4303      	orrs	r3, r0
 801d5c0:	461c      	mov	r4, r3
 801d5c2:	ec45 4b10 	vmov	d0, r4, r5
 801d5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5ca:	45b8      	cmp	r8, r7
 801d5cc:	bf3a      	itte	cc
 801d5ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801d5d2:	f1a6 0708 	subcc.w	r7, r6, #8
 801d5d6:	2300      	movcs	r3, #0
 801d5d8:	380b      	subs	r0, #11
 801d5da:	d012      	beq.n	801d602 <__b2d+0x8a>
 801d5dc:	f1c0 0120 	rsb	r1, r0, #32
 801d5e0:	fa23 f401 	lsr.w	r4, r3, r1
 801d5e4:	4082      	lsls	r2, r0
 801d5e6:	4322      	orrs	r2, r4
 801d5e8:	4547      	cmp	r7, r8
 801d5ea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801d5ee:	bf8c      	ite	hi
 801d5f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801d5f4:	2200      	movls	r2, #0
 801d5f6:	4083      	lsls	r3, r0
 801d5f8:	40ca      	lsrs	r2, r1
 801d5fa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801d5fe:	4313      	orrs	r3, r2
 801d600:	e7de      	b.n	801d5c0 <__b2d+0x48>
 801d602:	ea42 0501 	orr.w	r5, r2, r1
 801d606:	e7db      	b.n	801d5c0 <__b2d+0x48>
 801d608:	3ff00000 	.word	0x3ff00000

0801d60c <__d2b>:
 801d60c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d610:	460f      	mov	r7, r1
 801d612:	2101      	movs	r1, #1
 801d614:	ec59 8b10 	vmov	r8, r9, d0
 801d618:	4616      	mov	r6, r2
 801d61a:	f7ff fc13 	bl	801ce44 <_Balloc>
 801d61e:	4604      	mov	r4, r0
 801d620:	b930      	cbnz	r0, 801d630 <__d2b+0x24>
 801d622:	4602      	mov	r2, r0
 801d624:	4b23      	ldr	r3, [pc, #140]	@ (801d6b4 <__d2b+0xa8>)
 801d626:	4824      	ldr	r0, [pc, #144]	@ (801d6b8 <__d2b+0xac>)
 801d628:	f240 310f 	movw	r1, #783	@ 0x30f
 801d62c:	f7fe fa0a 	bl	801ba44 <__assert_func>
 801d630:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801d634:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801d638:	b10d      	cbz	r5, 801d63e <__d2b+0x32>
 801d63a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801d63e:	9301      	str	r3, [sp, #4]
 801d640:	f1b8 0300 	subs.w	r3, r8, #0
 801d644:	d023      	beq.n	801d68e <__d2b+0x82>
 801d646:	4668      	mov	r0, sp
 801d648:	9300      	str	r3, [sp, #0]
 801d64a:	f7ff fd0c 	bl	801d066 <__lo0bits>
 801d64e:	e9dd 1200 	ldrd	r1, r2, [sp]
 801d652:	b1d0      	cbz	r0, 801d68a <__d2b+0x7e>
 801d654:	f1c0 0320 	rsb	r3, r0, #32
 801d658:	fa02 f303 	lsl.w	r3, r2, r3
 801d65c:	430b      	orrs	r3, r1
 801d65e:	40c2      	lsrs	r2, r0
 801d660:	6163      	str	r3, [r4, #20]
 801d662:	9201      	str	r2, [sp, #4]
 801d664:	9b01      	ldr	r3, [sp, #4]
 801d666:	61a3      	str	r3, [r4, #24]
 801d668:	2b00      	cmp	r3, #0
 801d66a:	bf0c      	ite	eq
 801d66c:	2201      	moveq	r2, #1
 801d66e:	2202      	movne	r2, #2
 801d670:	6122      	str	r2, [r4, #16]
 801d672:	b1a5      	cbz	r5, 801d69e <__d2b+0x92>
 801d674:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801d678:	4405      	add	r5, r0
 801d67a:	603d      	str	r5, [r7, #0]
 801d67c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801d680:	6030      	str	r0, [r6, #0]
 801d682:	4620      	mov	r0, r4
 801d684:	b003      	add	sp, #12
 801d686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d68a:	6161      	str	r1, [r4, #20]
 801d68c:	e7ea      	b.n	801d664 <__d2b+0x58>
 801d68e:	a801      	add	r0, sp, #4
 801d690:	f7ff fce9 	bl	801d066 <__lo0bits>
 801d694:	9b01      	ldr	r3, [sp, #4]
 801d696:	6163      	str	r3, [r4, #20]
 801d698:	3020      	adds	r0, #32
 801d69a:	2201      	movs	r2, #1
 801d69c:	e7e8      	b.n	801d670 <__d2b+0x64>
 801d69e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d6a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801d6a6:	6038      	str	r0, [r7, #0]
 801d6a8:	6918      	ldr	r0, [r3, #16]
 801d6aa:	f7ff fcbd 	bl	801d028 <__hi0bits>
 801d6ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d6b2:	e7e5      	b.n	801d680 <__d2b+0x74>
 801d6b4:	08022194 	.word	0x08022194
 801d6b8:	08022205 	.word	0x08022205

0801d6bc <__ratio>:
 801d6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6c0:	b085      	sub	sp, #20
 801d6c2:	e9cd 1000 	strd	r1, r0, [sp]
 801d6c6:	a902      	add	r1, sp, #8
 801d6c8:	f7ff ff56 	bl	801d578 <__b2d>
 801d6cc:	9800      	ldr	r0, [sp, #0]
 801d6ce:	a903      	add	r1, sp, #12
 801d6d0:	ec55 4b10 	vmov	r4, r5, d0
 801d6d4:	f7ff ff50 	bl	801d578 <__b2d>
 801d6d8:	9b01      	ldr	r3, [sp, #4]
 801d6da:	6919      	ldr	r1, [r3, #16]
 801d6dc:	9b00      	ldr	r3, [sp, #0]
 801d6de:	691b      	ldr	r3, [r3, #16]
 801d6e0:	1ac9      	subs	r1, r1, r3
 801d6e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801d6e6:	1a9b      	subs	r3, r3, r2
 801d6e8:	ec5b ab10 	vmov	sl, fp, d0
 801d6ec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801d6f0:	2b00      	cmp	r3, #0
 801d6f2:	bfce      	itee	gt
 801d6f4:	462a      	movgt	r2, r5
 801d6f6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d6fa:	465a      	movle	r2, fp
 801d6fc:	462f      	mov	r7, r5
 801d6fe:	46d9      	mov	r9, fp
 801d700:	bfcc      	ite	gt
 801d702:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801d706:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801d70a:	464b      	mov	r3, r9
 801d70c:	4652      	mov	r2, sl
 801d70e:	4620      	mov	r0, r4
 801d710:	4639      	mov	r1, r7
 801d712:	f7e3 f873 	bl	80007fc <__aeabi_ddiv>
 801d716:	ec41 0b10 	vmov	d0, r0, r1
 801d71a:	b005      	add	sp, #20
 801d71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d720 <__copybits>:
 801d720:	3901      	subs	r1, #1
 801d722:	b570      	push	{r4, r5, r6, lr}
 801d724:	1149      	asrs	r1, r1, #5
 801d726:	6914      	ldr	r4, [r2, #16]
 801d728:	3101      	adds	r1, #1
 801d72a:	f102 0314 	add.w	r3, r2, #20
 801d72e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d732:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d736:	1f05      	subs	r5, r0, #4
 801d738:	42a3      	cmp	r3, r4
 801d73a:	d30c      	bcc.n	801d756 <__copybits+0x36>
 801d73c:	1aa3      	subs	r3, r4, r2
 801d73e:	3b11      	subs	r3, #17
 801d740:	f023 0303 	bic.w	r3, r3, #3
 801d744:	3211      	adds	r2, #17
 801d746:	42a2      	cmp	r2, r4
 801d748:	bf88      	it	hi
 801d74a:	2300      	movhi	r3, #0
 801d74c:	4418      	add	r0, r3
 801d74e:	2300      	movs	r3, #0
 801d750:	4288      	cmp	r0, r1
 801d752:	d305      	bcc.n	801d760 <__copybits+0x40>
 801d754:	bd70      	pop	{r4, r5, r6, pc}
 801d756:	f853 6b04 	ldr.w	r6, [r3], #4
 801d75a:	f845 6f04 	str.w	r6, [r5, #4]!
 801d75e:	e7eb      	b.n	801d738 <__copybits+0x18>
 801d760:	f840 3b04 	str.w	r3, [r0], #4
 801d764:	e7f4      	b.n	801d750 <__copybits+0x30>

0801d766 <__any_on>:
 801d766:	f100 0214 	add.w	r2, r0, #20
 801d76a:	6900      	ldr	r0, [r0, #16]
 801d76c:	114b      	asrs	r3, r1, #5
 801d76e:	4298      	cmp	r0, r3
 801d770:	b510      	push	{r4, lr}
 801d772:	db11      	blt.n	801d798 <__any_on+0x32>
 801d774:	dd0a      	ble.n	801d78c <__any_on+0x26>
 801d776:	f011 011f 	ands.w	r1, r1, #31
 801d77a:	d007      	beq.n	801d78c <__any_on+0x26>
 801d77c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d780:	fa24 f001 	lsr.w	r0, r4, r1
 801d784:	fa00 f101 	lsl.w	r1, r0, r1
 801d788:	428c      	cmp	r4, r1
 801d78a:	d10b      	bne.n	801d7a4 <__any_on+0x3e>
 801d78c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d790:	4293      	cmp	r3, r2
 801d792:	d803      	bhi.n	801d79c <__any_on+0x36>
 801d794:	2000      	movs	r0, #0
 801d796:	bd10      	pop	{r4, pc}
 801d798:	4603      	mov	r3, r0
 801d79a:	e7f7      	b.n	801d78c <__any_on+0x26>
 801d79c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d7a0:	2900      	cmp	r1, #0
 801d7a2:	d0f5      	beq.n	801d790 <__any_on+0x2a>
 801d7a4:	2001      	movs	r0, #1
 801d7a6:	e7f6      	b.n	801d796 <__any_on+0x30>

0801d7a8 <__ascii_wctomb>:
 801d7a8:	4603      	mov	r3, r0
 801d7aa:	4608      	mov	r0, r1
 801d7ac:	b141      	cbz	r1, 801d7c0 <__ascii_wctomb+0x18>
 801d7ae:	2aff      	cmp	r2, #255	@ 0xff
 801d7b0:	d904      	bls.n	801d7bc <__ascii_wctomb+0x14>
 801d7b2:	228a      	movs	r2, #138	@ 0x8a
 801d7b4:	601a      	str	r2, [r3, #0]
 801d7b6:	f04f 30ff 	mov.w	r0, #4294967295
 801d7ba:	4770      	bx	lr
 801d7bc:	700a      	strb	r2, [r1, #0]
 801d7be:	2001      	movs	r0, #1
 801d7c0:	4770      	bx	lr

0801d7c2 <__ssputs_r>:
 801d7c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d7c6:	688e      	ldr	r6, [r1, #8]
 801d7c8:	461f      	mov	r7, r3
 801d7ca:	42be      	cmp	r6, r7
 801d7cc:	680b      	ldr	r3, [r1, #0]
 801d7ce:	4682      	mov	sl, r0
 801d7d0:	460c      	mov	r4, r1
 801d7d2:	4690      	mov	r8, r2
 801d7d4:	d82d      	bhi.n	801d832 <__ssputs_r+0x70>
 801d7d6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d7da:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d7de:	d026      	beq.n	801d82e <__ssputs_r+0x6c>
 801d7e0:	6965      	ldr	r5, [r4, #20]
 801d7e2:	6909      	ldr	r1, [r1, #16]
 801d7e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d7e8:	eba3 0901 	sub.w	r9, r3, r1
 801d7ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d7f0:	1c7b      	adds	r3, r7, #1
 801d7f2:	444b      	add	r3, r9
 801d7f4:	106d      	asrs	r5, r5, #1
 801d7f6:	429d      	cmp	r5, r3
 801d7f8:	bf38      	it	cc
 801d7fa:	461d      	movcc	r5, r3
 801d7fc:	0553      	lsls	r3, r2, #21
 801d7fe:	d527      	bpl.n	801d850 <__ssputs_r+0x8e>
 801d800:	4629      	mov	r1, r5
 801d802:	f7fc f8a3 	bl	801994c <_malloc_r>
 801d806:	4606      	mov	r6, r0
 801d808:	b360      	cbz	r0, 801d864 <__ssputs_r+0xa2>
 801d80a:	6921      	ldr	r1, [r4, #16]
 801d80c:	464a      	mov	r2, r9
 801d80e:	f7fe f8fc 	bl	801ba0a <memcpy>
 801d812:	89a3      	ldrh	r3, [r4, #12]
 801d814:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d81c:	81a3      	strh	r3, [r4, #12]
 801d81e:	6126      	str	r6, [r4, #16]
 801d820:	6165      	str	r5, [r4, #20]
 801d822:	444e      	add	r6, r9
 801d824:	eba5 0509 	sub.w	r5, r5, r9
 801d828:	6026      	str	r6, [r4, #0]
 801d82a:	60a5      	str	r5, [r4, #8]
 801d82c:	463e      	mov	r6, r7
 801d82e:	42be      	cmp	r6, r7
 801d830:	d900      	bls.n	801d834 <__ssputs_r+0x72>
 801d832:	463e      	mov	r6, r7
 801d834:	6820      	ldr	r0, [r4, #0]
 801d836:	4632      	mov	r2, r6
 801d838:	4641      	mov	r1, r8
 801d83a:	f000 fbad 	bl	801df98 <memmove>
 801d83e:	68a3      	ldr	r3, [r4, #8]
 801d840:	1b9b      	subs	r3, r3, r6
 801d842:	60a3      	str	r3, [r4, #8]
 801d844:	6823      	ldr	r3, [r4, #0]
 801d846:	4433      	add	r3, r6
 801d848:	6023      	str	r3, [r4, #0]
 801d84a:	2000      	movs	r0, #0
 801d84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d850:	462a      	mov	r2, r5
 801d852:	f000 fbd6 	bl	801e002 <_realloc_r>
 801d856:	4606      	mov	r6, r0
 801d858:	2800      	cmp	r0, #0
 801d85a:	d1e0      	bne.n	801d81e <__ssputs_r+0x5c>
 801d85c:	6921      	ldr	r1, [r4, #16]
 801d85e:	4650      	mov	r0, sl
 801d860:	f7fe ff5a 	bl	801c718 <_free_r>
 801d864:	230c      	movs	r3, #12
 801d866:	f8ca 3000 	str.w	r3, [sl]
 801d86a:	89a3      	ldrh	r3, [r4, #12]
 801d86c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d870:	81a3      	strh	r3, [r4, #12]
 801d872:	f04f 30ff 	mov.w	r0, #4294967295
 801d876:	e7e9      	b.n	801d84c <__ssputs_r+0x8a>

0801d878 <_svfiprintf_r>:
 801d878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d87c:	4698      	mov	r8, r3
 801d87e:	898b      	ldrh	r3, [r1, #12]
 801d880:	061b      	lsls	r3, r3, #24
 801d882:	b09d      	sub	sp, #116	@ 0x74
 801d884:	4607      	mov	r7, r0
 801d886:	460d      	mov	r5, r1
 801d888:	4614      	mov	r4, r2
 801d88a:	d510      	bpl.n	801d8ae <_svfiprintf_r+0x36>
 801d88c:	690b      	ldr	r3, [r1, #16]
 801d88e:	b973      	cbnz	r3, 801d8ae <_svfiprintf_r+0x36>
 801d890:	2140      	movs	r1, #64	@ 0x40
 801d892:	f7fc f85b 	bl	801994c <_malloc_r>
 801d896:	6028      	str	r0, [r5, #0]
 801d898:	6128      	str	r0, [r5, #16]
 801d89a:	b930      	cbnz	r0, 801d8aa <_svfiprintf_r+0x32>
 801d89c:	230c      	movs	r3, #12
 801d89e:	603b      	str	r3, [r7, #0]
 801d8a0:	f04f 30ff 	mov.w	r0, #4294967295
 801d8a4:	b01d      	add	sp, #116	@ 0x74
 801d8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d8aa:	2340      	movs	r3, #64	@ 0x40
 801d8ac:	616b      	str	r3, [r5, #20]
 801d8ae:	2300      	movs	r3, #0
 801d8b0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d8b2:	2320      	movs	r3, #32
 801d8b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d8b8:	f8cd 800c 	str.w	r8, [sp, #12]
 801d8bc:	2330      	movs	r3, #48	@ 0x30
 801d8be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801da5c <_svfiprintf_r+0x1e4>
 801d8c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d8c6:	f04f 0901 	mov.w	r9, #1
 801d8ca:	4623      	mov	r3, r4
 801d8cc:	469a      	mov	sl, r3
 801d8ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d8d2:	b10a      	cbz	r2, 801d8d8 <_svfiprintf_r+0x60>
 801d8d4:	2a25      	cmp	r2, #37	@ 0x25
 801d8d6:	d1f9      	bne.n	801d8cc <_svfiprintf_r+0x54>
 801d8d8:	ebba 0b04 	subs.w	fp, sl, r4
 801d8dc:	d00b      	beq.n	801d8f6 <_svfiprintf_r+0x7e>
 801d8de:	465b      	mov	r3, fp
 801d8e0:	4622      	mov	r2, r4
 801d8e2:	4629      	mov	r1, r5
 801d8e4:	4638      	mov	r0, r7
 801d8e6:	f7ff ff6c 	bl	801d7c2 <__ssputs_r>
 801d8ea:	3001      	adds	r0, #1
 801d8ec:	f000 80a7 	beq.w	801da3e <_svfiprintf_r+0x1c6>
 801d8f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d8f2:	445a      	add	r2, fp
 801d8f4:	9209      	str	r2, [sp, #36]	@ 0x24
 801d8f6:	f89a 3000 	ldrb.w	r3, [sl]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	f000 809f 	beq.w	801da3e <_svfiprintf_r+0x1c6>
 801d900:	2300      	movs	r3, #0
 801d902:	f04f 32ff 	mov.w	r2, #4294967295
 801d906:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d90a:	f10a 0a01 	add.w	sl, sl, #1
 801d90e:	9304      	str	r3, [sp, #16]
 801d910:	9307      	str	r3, [sp, #28]
 801d912:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d916:	931a      	str	r3, [sp, #104]	@ 0x68
 801d918:	4654      	mov	r4, sl
 801d91a:	2205      	movs	r2, #5
 801d91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d920:	484e      	ldr	r0, [pc, #312]	@ (801da5c <_svfiprintf_r+0x1e4>)
 801d922:	f7e2 fc2d 	bl	8000180 <memchr>
 801d926:	9a04      	ldr	r2, [sp, #16]
 801d928:	b9d8      	cbnz	r0, 801d962 <_svfiprintf_r+0xea>
 801d92a:	06d0      	lsls	r0, r2, #27
 801d92c:	bf44      	itt	mi
 801d92e:	2320      	movmi	r3, #32
 801d930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d934:	0711      	lsls	r1, r2, #28
 801d936:	bf44      	itt	mi
 801d938:	232b      	movmi	r3, #43	@ 0x2b
 801d93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d93e:	f89a 3000 	ldrb.w	r3, [sl]
 801d942:	2b2a      	cmp	r3, #42	@ 0x2a
 801d944:	d015      	beq.n	801d972 <_svfiprintf_r+0xfa>
 801d946:	9a07      	ldr	r2, [sp, #28]
 801d948:	4654      	mov	r4, sl
 801d94a:	2000      	movs	r0, #0
 801d94c:	f04f 0c0a 	mov.w	ip, #10
 801d950:	4621      	mov	r1, r4
 801d952:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d956:	3b30      	subs	r3, #48	@ 0x30
 801d958:	2b09      	cmp	r3, #9
 801d95a:	d94b      	bls.n	801d9f4 <_svfiprintf_r+0x17c>
 801d95c:	b1b0      	cbz	r0, 801d98c <_svfiprintf_r+0x114>
 801d95e:	9207      	str	r2, [sp, #28]
 801d960:	e014      	b.n	801d98c <_svfiprintf_r+0x114>
 801d962:	eba0 0308 	sub.w	r3, r0, r8
 801d966:	fa09 f303 	lsl.w	r3, r9, r3
 801d96a:	4313      	orrs	r3, r2
 801d96c:	9304      	str	r3, [sp, #16]
 801d96e:	46a2      	mov	sl, r4
 801d970:	e7d2      	b.n	801d918 <_svfiprintf_r+0xa0>
 801d972:	9b03      	ldr	r3, [sp, #12]
 801d974:	1d19      	adds	r1, r3, #4
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	9103      	str	r1, [sp, #12]
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	bfbb      	ittet	lt
 801d97e:	425b      	neglt	r3, r3
 801d980:	f042 0202 	orrlt.w	r2, r2, #2
 801d984:	9307      	strge	r3, [sp, #28]
 801d986:	9307      	strlt	r3, [sp, #28]
 801d988:	bfb8      	it	lt
 801d98a:	9204      	strlt	r2, [sp, #16]
 801d98c:	7823      	ldrb	r3, [r4, #0]
 801d98e:	2b2e      	cmp	r3, #46	@ 0x2e
 801d990:	d10a      	bne.n	801d9a8 <_svfiprintf_r+0x130>
 801d992:	7863      	ldrb	r3, [r4, #1]
 801d994:	2b2a      	cmp	r3, #42	@ 0x2a
 801d996:	d132      	bne.n	801d9fe <_svfiprintf_r+0x186>
 801d998:	9b03      	ldr	r3, [sp, #12]
 801d99a:	1d1a      	adds	r2, r3, #4
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	9203      	str	r2, [sp, #12]
 801d9a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d9a4:	3402      	adds	r4, #2
 801d9a6:	9305      	str	r3, [sp, #20]
 801d9a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801da6c <_svfiprintf_r+0x1f4>
 801d9ac:	7821      	ldrb	r1, [r4, #0]
 801d9ae:	2203      	movs	r2, #3
 801d9b0:	4650      	mov	r0, sl
 801d9b2:	f7e2 fbe5 	bl	8000180 <memchr>
 801d9b6:	b138      	cbz	r0, 801d9c8 <_svfiprintf_r+0x150>
 801d9b8:	9b04      	ldr	r3, [sp, #16]
 801d9ba:	eba0 000a 	sub.w	r0, r0, sl
 801d9be:	2240      	movs	r2, #64	@ 0x40
 801d9c0:	4082      	lsls	r2, r0
 801d9c2:	4313      	orrs	r3, r2
 801d9c4:	3401      	adds	r4, #1
 801d9c6:	9304      	str	r3, [sp, #16]
 801d9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9cc:	4824      	ldr	r0, [pc, #144]	@ (801da60 <_svfiprintf_r+0x1e8>)
 801d9ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d9d2:	2206      	movs	r2, #6
 801d9d4:	f7e2 fbd4 	bl	8000180 <memchr>
 801d9d8:	2800      	cmp	r0, #0
 801d9da:	d036      	beq.n	801da4a <_svfiprintf_r+0x1d2>
 801d9dc:	4b21      	ldr	r3, [pc, #132]	@ (801da64 <_svfiprintf_r+0x1ec>)
 801d9de:	bb1b      	cbnz	r3, 801da28 <_svfiprintf_r+0x1b0>
 801d9e0:	9b03      	ldr	r3, [sp, #12]
 801d9e2:	3307      	adds	r3, #7
 801d9e4:	f023 0307 	bic.w	r3, r3, #7
 801d9e8:	3308      	adds	r3, #8
 801d9ea:	9303      	str	r3, [sp, #12]
 801d9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d9ee:	4433      	add	r3, r6
 801d9f0:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9f2:	e76a      	b.n	801d8ca <_svfiprintf_r+0x52>
 801d9f4:	fb0c 3202 	mla	r2, ip, r2, r3
 801d9f8:	460c      	mov	r4, r1
 801d9fa:	2001      	movs	r0, #1
 801d9fc:	e7a8      	b.n	801d950 <_svfiprintf_r+0xd8>
 801d9fe:	2300      	movs	r3, #0
 801da00:	3401      	adds	r4, #1
 801da02:	9305      	str	r3, [sp, #20]
 801da04:	4619      	mov	r1, r3
 801da06:	f04f 0c0a 	mov.w	ip, #10
 801da0a:	4620      	mov	r0, r4
 801da0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da10:	3a30      	subs	r2, #48	@ 0x30
 801da12:	2a09      	cmp	r2, #9
 801da14:	d903      	bls.n	801da1e <_svfiprintf_r+0x1a6>
 801da16:	2b00      	cmp	r3, #0
 801da18:	d0c6      	beq.n	801d9a8 <_svfiprintf_r+0x130>
 801da1a:	9105      	str	r1, [sp, #20]
 801da1c:	e7c4      	b.n	801d9a8 <_svfiprintf_r+0x130>
 801da1e:	fb0c 2101 	mla	r1, ip, r1, r2
 801da22:	4604      	mov	r4, r0
 801da24:	2301      	movs	r3, #1
 801da26:	e7f0      	b.n	801da0a <_svfiprintf_r+0x192>
 801da28:	ab03      	add	r3, sp, #12
 801da2a:	9300      	str	r3, [sp, #0]
 801da2c:	462a      	mov	r2, r5
 801da2e:	4b0e      	ldr	r3, [pc, #56]	@ (801da68 <_svfiprintf_r+0x1f0>)
 801da30:	a904      	add	r1, sp, #16
 801da32:	4638      	mov	r0, r7
 801da34:	f7fc ffa8 	bl	801a988 <_printf_float>
 801da38:	1c42      	adds	r2, r0, #1
 801da3a:	4606      	mov	r6, r0
 801da3c:	d1d6      	bne.n	801d9ec <_svfiprintf_r+0x174>
 801da3e:	89ab      	ldrh	r3, [r5, #12]
 801da40:	065b      	lsls	r3, r3, #25
 801da42:	f53f af2d 	bmi.w	801d8a0 <_svfiprintf_r+0x28>
 801da46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801da48:	e72c      	b.n	801d8a4 <_svfiprintf_r+0x2c>
 801da4a:	ab03      	add	r3, sp, #12
 801da4c:	9300      	str	r3, [sp, #0]
 801da4e:	462a      	mov	r2, r5
 801da50:	4b05      	ldr	r3, [pc, #20]	@ (801da68 <_svfiprintf_r+0x1f0>)
 801da52:	a904      	add	r1, sp, #16
 801da54:	4638      	mov	r0, r7
 801da56:	f7fd fa2f 	bl	801aeb8 <_printf_i>
 801da5a:	e7ed      	b.n	801da38 <_svfiprintf_r+0x1c0>
 801da5c:	08022360 	.word	0x08022360
 801da60:	0802236a 	.word	0x0802236a
 801da64:	0801a989 	.word	0x0801a989
 801da68:	0801d7c3 	.word	0x0801d7c3
 801da6c:	08022366 	.word	0x08022366

0801da70 <__sfputc_r>:
 801da70:	6893      	ldr	r3, [r2, #8]
 801da72:	3b01      	subs	r3, #1
 801da74:	2b00      	cmp	r3, #0
 801da76:	b410      	push	{r4}
 801da78:	6093      	str	r3, [r2, #8]
 801da7a:	da08      	bge.n	801da8e <__sfputc_r+0x1e>
 801da7c:	6994      	ldr	r4, [r2, #24]
 801da7e:	42a3      	cmp	r3, r4
 801da80:	db01      	blt.n	801da86 <__sfputc_r+0x16>
 801da82:	290a      	cmp	r1, #10
 801da84:	d103      	bne.n	801da8e <__sfputc_r+0x1e>
 801da86:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da8a:	f000 b9f1 	b.w	801de70 <__swbuf_r>
 801da8e:	6813      	ldr	r3, [r2, #0]
 801da90:	1c58      	adds	r0, r3, #1
 801da92:	6010      	str	r0, [r2, #0]
 801da94:	7019      	strb	r1, [r3, #0]
 801da96:	4608      	mov	r0, r1
 801da98:	f85d 4b04 	ldr.w	r4, [sp], #4
 801da9c:	4770      	bx	lr

0801da9e <__sfputs_r>:
 801da9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801daa0:	4606      	mov	r6, r0
 801daa2:	460f      	mov	r7, r1
 801daa4:	4614      	mov	r4, r2
 801daa6:	18d5      	adds	r5, r2, r3
 801daa8:	42ac      	cmp	r4, r5
 801daaa:	d101      	bne.n	801dab0 <__sfputs_r+0x12>
 801daac:	2000      	movs	r0, #0
 801daae:	e007      	b.n	801dac0 <__sfputs_r+0x22>
 801dab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dab4:	463a      	mov	r2, r7
 801dab6:	4630      	mov	r0, r6
 801dab8:	f7ff ffda 	bl	801da70 <__sfputc_r>
 801dabc:	1c43      	adds	r3, r0, #1
 801dabe:	d1f3      	bne.n	801daa8 <__sfputs_r+0xa>
 801dac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dac4 <_vfiprintf_r>:
 801dac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dac8:	460d      	mov	r5, r1
 801daca:	b09d      	sub	sp, #116	@ 0x74
 801dacc:	4614      	mov	r4, r2
 801dace:	4698      	mov	r8, r3
 801dad0:	4606      	mov	r6, r0
 801dad2:	b118      	cbz	r0, 801dadc <_vfiprintf_r+0x18>
 801dad4:	6a03      	ldr	r3, [r0, #32]
 801dad6:	b90b      	cbnz	r3, 801dadc <_vfiprintf_r+0x18>
 801dad8:	f7fd fdae 	bl	801b638 <__sinit>
 801dadc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dade:	07d9      	lsls	r1, r3, #31
 801dae0:	d405      	bmi.n	801daee <_vfiprintf_r+0x2a>
 801dae2:	89ab      	ldrh	r3, [r5, #12]
 801dae4:	059a      	lsls	r2, r3, #22
 801dae6:	d402      	bmi.n	801daee <_vfiprintf_r+0x2a>
 801dae8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801daea:	f7fd ff84 	bl	801b9f6 <__retarget_lock_acquire_recursive>
 801daee:	89ab      	ldrh	r3, [r5, #12]
 801daf0:	071b      	lsls	r3, r3, #28
 801daf2:	d501      	bpl.n	801daf8 <_vfiprintf_r+0x34>
 801daf4:	692b      	ldr	r3, [r5, #16]
 801daf6:	b99b      	cbnz	r3, 801db20 <_vfiprintf_r+0x5c>
 801daf8:	4629      	mov	r1, r5
 801dafa:	4630      	mov	r0, r6
 801dafc:	f000 f9f6 	bl	801deec <__swsetup_r>
 801db00:	b170      	cbz	r0, 801db20 <_vfiprintf_r+0x5c>
 801db02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801db04:	07dc      	lsls	r4, r3, #31
 801db06:	d504      	bpl.n	801db12 <_vfiprintf_r+0x4e>
 801db08:	f04f 30ff 	mov.w	r0, #4294967295
 801db0c:	b01d      	add	sp, #116	@ 0x74
 801db0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db12:	89ab      	ldrh	r3, [r5, #12]
 801db14:	0598      	lsls	r0, r3, #22
 801db16:	d4f7      	bmi.n	801db08 <_vfiprintf_r+0x44>
 801db18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801db1a:	f7fd ff6d 	bl	801b9f8 <__retarget_lock_release_recursive>
 801db1e:	e7f3      	b.n	801db08 <_vfiprintf_r+0x44>
 801db20:	2300      	movs	r3, #0
 801db22:	9309      	str	r3, [sp, #36]	@ 0x24
 801db24:	2320      	movs	r3, #32
 801db26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801db2a:	f8cd 800c 	str.w	r8, [sp, #12]
 801db2e:	2330      	movs	r3, #48	@ 0x30
 801db30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801dce0 <_vfiprintf_r+0x21c>
 801db34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801db38:	f04f 0901 	mov.w	r9, #1
 801db3c:	4623      	mov	r3, r4
 801db3e:	469a      	mov	sl, r3
 801db40:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db44:	b10a      	cbz	r2, 801db4a <_vfiprintf_r+0x86>
 801db46:	2a25      	cmp	r2, #37	@ 0x25
 801db48:	d1f9      	bne.n	801db3e <_vfiprintf_r+0x7a>
 801db4a:	ebba 0b04 	subs.w	fp, sl, r4
 801db4e:	d00b      	beq.n	801db68 <_vfiprintf_r+0xa4>
 801db50:	465b      	mov	r3, fp
 801db52:	4622      	mov	r2, r4
 801db54:	4629      	mov	r1, r5
 801db56:	4630      	mov	r0, r6
 801db58:	f7ff ffa1 	bl	801da9e <__sfputs_r>
 801db5c:	3001      	adds	r0, #1
 801db5e:	f000 80a7 	beq.w	801dcb0 <_vfiprintf_r+0x1ec>
 801db62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801db64:	445a      	add	r2, fp
 801db66:	9209      	str	r2, [sp, #36]	@ 0x24
 801db68:	f89a 3000 	ldrb.w	r3, [sl]
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	f000 809f 	beq.w	801dcb0 <_vfiprintf_r+0x1ec>
 801db72:	2300      	movs	r3, #0
 801db74:	f04f 32ff 	mov.w	r2, #4294967295
 801db78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801db7c:	f10a 0a01 	add.w	sl, sl, #1
 801db80:	9304      	str	r3, [sp, #16]
 801db82:	9307      	str	r3, [sp, #28]
 801db84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801db88:	931a      	str	r3, [sp, #104]	@ 0x68
 801db8a:	4654      	mov	r4, sl
 801db8c:	2205      	movs	r2, #5
 801db8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db92:	4853      	ldr	r0, [pc, #332]	@ (801dce0 <_vfiprintf_r+0x21c>)
 801db94:	f7e2 faf4 	bl	8000180 <memchr>
 801db98:	9a04      	ldr	r2, [sp, #16]
 801db9a:	b9d8      	cbnz	r0, 801dbd4 <_vfiprintf_r+0x110>
 801db9c:	06d1      	lsls	r1, r2, #27
 801db9e:	bf44      	itt	mi
 801dba0:	2320      	movmi	r3, #32
 801dba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dba6:	0713      	lsls	r3, r2, #28
 801dba8:	bf44      	itt	mi
 801dbaa:	232b      	movmi	r3, #43	@ 0x2b
 801dbac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801dbb0:	f89a 3000 	ldrb.w	r3, [sl]
 801dbb4:	2b2a      	cmp	r3, #42	@ 0x2a
 801dbb6:	d015      	beq.n	801dbe4 <_vfiprintf_r+0x120>
 801dbb8:	9a07      	ldr	r2, [sp, #28]
 801dbba:	4654      	mov	r4, sl
 801dbbc:	2000      	movs	r0, #0
 801dbbe:	f04f 0c0a 	mov.w	ip, #10
 801dbc2:	4621      	mov	r1, r4
 801dbc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dbc8:	3b30      	subs	r3, #48	@ 0x30
 801dbca:	2b09      	cmp	r3, #9
 801dbcc:	d94b      	bls.n	801dc66 <_vfiprintf_r+0x1a2>
 801dbce:	b1b0      	cbz	r0, 801dbfe <_vfiprintf_r+0x13a>
 801dbd0:	9207      	str	r2, [sp, #28]
 801dbd2:	e014      	b.n	801dbfe <_vfiprintf_r+0x13a>
 801dbd4:	eba0 0308 	sub.w	r3, r0, r8
 801dbd8:	fa09 f303 	lsl.w	r3, r9, r3
 801dbdc:	4313      	orrs	r3, r2
 801dbde:	9304      	str	r3, [sp, #16]
 801dbe0:	46a2      	mov	sl, r4
 801dbe2:	e7d2      	b.n	801db8a <_vfiprintf_r+0xc6>
 801dbe4:	9b03      	ldr	r3, [sp, #12]
 801dbe6:	1d19      	adds	r1, r3, #4
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	9103      	str	r1, [sp, #12]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	bfbb      	ittet	lt
 801dbf0:	425b      	neglt	r3, r3
 801dbf2:	f042 0202 	orrlt.w	r2, r2, #2
 801dbf6:	9307      	strge	r3, [sp, #28]
 801dbf8:	9307      	strlt	r3, [sp, #28]
 801dbfa:	bfb8      	it	lt
 801dbfc:	9204      	strlt	r2, [sp, #16]
 801dbfe:	7823      	ldrb	r3, [r4, #0]
 801dc00:	2b2e      	cmp	r3, #46	@ 0x2e
 801dc02:	d10a      	bne.n	801dc1a <_vfiprintf_r+0x156>
 801dc04:	7863      	ldrb	r3, [r4, #1]
 801dc06:	2b2a      	cmp	r3, #42	@ 0x2a
 801dc08:	d132      	bne.n	801dc70 <_vfiprintf_r+0x1ac>
 801dc0a:	9b03      	ldr	r3, [sp, #12]
 801dc0c:	1d1a      	adds	r2, r3, #4
 801dc0e:	681b      	ldr	r3, [r3, #0]
 801dc10:	9203      	str	r2, [sp, #12]
 801dc12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801dc16:	3402      	adds	r4, #2
 801dc18:	9305      	str	r3, [sp, #20]
 801dc1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801dcf0 <_vfiprintf_r+0x22c>
 801dc1e:	7821      	ldrb	r1, [r4, #0]
 801dc20:	2203      	movs	r2, #3
 801dc22:	4650      	mov	r0, sl
 801dc24:	f7e2 faac 	bl	8000180 <memchr>
 801dc28:	b138      	cbz	r0, 801dc3a <_vfiprintf_r+0x176>
 801dc2a:	9b04      	ldr	r3, [sp, #16]
 801dc2c:	eba0 000a 	sub.w	r0, r0, sl
 801dc30:	2240      	movs	r2, #64	@ 0x40
 801dc32:	4082      	lsls	r2, r0
 801dc34:	4313      	orrs	r3, r2
 801dc36:	3401      	adds	r4, #1
 801dc38:	9304      	str	r3, [sp, #16]
 801dc3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc3e:	4829      	ldr	r0, [pc, #164]	@ (801dce4 <_vfiprintf_r+0x220>)
 801dc40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801dc44:	2206      	movs	r2, #6
 801dc46:	f7e2 fa9b 	bl	8000180 <memchr>
 801dc4a:	2800      	cmp	r0, #0
 801dc4c:	d03f      	beq.n	801dcce <_vfiprintf_r+0x20a>
 801dc4e:	4b26      	ldr	r3, [pc, #152]	@ (801dce8 <_vfiprintf_r+0x224>)
 801dc50:	bb1b      	cbnz	r3, 801dc9a <_vfiprintf_r+0x1d6>
 801dc52:	9b03      	ldr	r3, [sp, #12]
 801dc54:	3307      	adds	r3, #7
 801dc56:	f023 0307 	bic.w	r3, r3, #7
 801dc5a:	3308      	adds	r3, #8
 801dc5c:	9303      	str	r3, [sp, #12]
 801dc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dc60:	443b      	add	r3, r7
 801dc62:	9309      	str	r3, [sp, #36]	@ 0x24
 801dc64:	e76a      	b.n	801db3c <_vfiprintf_r+0x78>
 801dc66:	fb0c 3202 	mla	r2, ip, r2, r3
 801dc6a:	460c      	mov	r4, r1
 801dc6c:	2001      	movs	r0, #1
 801dc6e:	e7a8      	b.n	801dbc2 <_vfiprintf_r+0xfe>
 801dc70:	2300      	movs	r3, #0
 801dc72:	3401      	adds	r4, #1
 801dc74:	9305      	str	r3, [sp, #20]
 801dc76:	4619      	mov	r1, r3
 801dc78:	f04f 0c0a 	mov.w	ip, #10
 801dc7c:	4620      	mov	r0, r4
 801dc7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dc82:	3a30      	subs	r2, #48	@ 0x30
 801dc84:	2a09      	cmp	r2, #9
 801dc86:	d903      	bls.n	801dc90 <_vfiprintf_r+0x1cc>
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d0c6      	beq.n	801dc1a <_vfiprintf_r+0x156>
 801dc8c:	9105      	str	r1, [sp, #20]
 801dc8e:	e7c4      	b.n	801dc1a <_vfiprintf_r+0x156>
 801dc90:	fb0c 2101 	mla	r1, ip, r1, r2
 801dc94:	4604      	mov	r4, r0
 801dc96:	2301      	movs	r3, #1
 801dc98:	e7f0      	b.n	801dc7c <_vfiprintf_r+0x1b8>
 801dc9a:	ab03      	add	r3, sp, #12
 801dc9c:	9300      	str	r3, [sp, #0]
 801dc9e:	462a      	mov	r2, r5
 801dca0:	4b12      	ldr	r3, [pc, #72]	@ (801dcec <_vfiprintf_r+0x228>)
 801dca2:	a904      	add	r1, sp, #16
 801dca4:	4630      	mov	r0, r6
 801dca6:	f7fc fe6f 	bl	801a988 <_printf_float>
 801dcaa:	4607      	mov	r7, r0
 801dcac:	1c78      	adds	r0, r7, #1
 801dcae:	d1d6      	bne.n	801dc5e <_vfiprintf_r+0x19a>
 801dcb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801dcb2:	07d9      	lsls	r1, r3, #31
 801dcb4:	d405      	bmi.n	801dcc2 <_vfiprintf_r+0x1fe>
 801dcb6:	89ab      	ldrh	r3, [r5, #12]
 801dcb8:	059a      	lsls	r2, r3, #22
 801dcba:	d402      	bmi.n	801dcc2 <_vfiprintf_r+0x1fe>
 801dcbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801dcbe:	f7fd fe9b 	bl	801b9f8 <__retarget_lock_release_recursive>
 801dcc2:	89ab      	ldrh	r3, [r5, #12]
 801dcc4:	065b      	lsls	r3, r3, #25
 801dcc6:	f53f af1f 	bmi.w	801db08 <_vfiprintf_r+0x44>
 801dcca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801dccc:	e71e      	b.n	801db0c <_vfiprintf_r+0x48>
 801dcce:	ab03      	add	r3, sp, #12
 801dcd0:	9300      	str	r3, [sp, #0]
 801dcd2:	462a      	mov	r2, r5
 801dcd4:	4b05      	ldr	r3, [pc, #20]	@ (801dcec <_vfiprintf_r+0x228>)
 801dcd6:	a904      	add	r1, sp, #16
 801dcd8:	4630      	mov	r0, r6
 801dcda:	f7fd f8ed 	bl	801aeb8 <_printf_i>
 801dcde:	e7e4      	b.n	801dcaa <_vfiprintf_r+0x1e6>
 801dce0:	08022360 	.word	0x08022360
 801dce4:	0802236a 	.word	0x0802236a
 801dce8:	0801a989 	.word	0x0801a989
 801dcec:	0801da9f 	.word	0x0801da9f
 801dcf0:	08022366 	.word	0x08022366

0801dcf4 <__sflush_r>:
 801dcf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcfc:	0716      	lsls	r6, r2, #28
 801dcfe:	4605      	mov	r5, r0
 801dd00:	460c      	mov	r4, r1
 801dd02:	d454      	bmi.n	801ddae <__sflush_r+0xba>
 801dd04:	684b      	ldr	r3, [r1, #4]
 801dd06:	2b00      	cmp	r3, #0
 801dd08:	dc02      	bgt.n	801dd10 <__sflush_r+0x1c>
 801dd0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	dd48      	ble.n	801dda2 <__sflush_r+0xae>
 801dd10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dd12:	2e00      	cmp	r6, #0
 801dd14:	d045      	beq.n	801dda2 <__sflush_r+0xae>
 801dd16:	2300      	movs	r3, #0
 801dd18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801dd1c:	682f      	ldr	r7, [r5, #0]
 801dd1e:	6a21      	ldr	r1, [r4, #32]
 801dd20:	602b      	str	r3, [r5, #0]
 801dd22:	d030      	beq.n	801dd86 <__sflush_r+0x92>
 801dd24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801dd26:	89a3      	ldrh	r3, [r4, #12]
 801dd28:	0759      	lsls	r1, r3, #29
 801dd2a:	d505      	bpl.n	801dd38 <__sflush_r+0x44>
 801dd2c:	6863      	ldr	r3, [r4, #4]
 801dd2e:	1ad2      	subs	r2, r2, r3
 801dd30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801dd32:	b10b      	cbz	r3, 801dd38 <__sflush_r+0x44>
 801dd34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dd36:	1ad2      	subs	r2, r2, r3
 801dd38:	2300      	movs	r3, #0
 801dd3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dd3c:	6a21      	ldr	r1, [r4, #32]
 801dd3e:	4628      	mov	r0, r5
 801dd40:	47b0      	blx	r6
 801dd42:	1c43      	adds	r3, r0, #1
 801dd44:	89a3      	ldrh	r3, [r4, #12]
 801dd46:	d106      	bne.n	801dd56 <__sflush_r+0x62>
 801dd48:	6829      	ldr	r1, [r5, #0]
 801dd4a:	291d      	cmp	r1, #29
 801dd4c:	d82b      	bhi.n	801dda6 <__sflush_r+0xb2>
 801dd4e:	4a2a      	ldr	r2, [pc, #168]	@ (801ddf8 <__sflush_r+0x104>)
 801dd50:	410a      	asrs	r2, r1
 801dd52:	07d6      	lsls	r6, r2, #31
 801dd54:	d427      	bmi.n	801dda6 <__sflush_r+0xb2>
 801dd56:	2200      	movs	r2, #0
 801dd58:	6062      	str	r2, [r4, #4]
 801dd5a:	04d9      	lsls	r1, r3, #19
 801dd5c:	6922      	ldr	r2, [r4, #16]
 801dd5e:	6022      	str	r2, [r4, #0]
 801dd60:	d504      	bpl.n	801dd6c <__sflush_r+0x78>
 801dd62:	1c42      	adds	r2, r0, #1
 801dd64:	d101      	bne.n	801dd6a <__sflush_r+0x76>
 801dd66:	682b      	ldr	r3, [r5, #0]
 801dd68:	b903      	cbnz	r3, 801dd6c <__sflush_r+0x78>
 801dd6a:	6560      	str	r0, [r4, #84]	@ 0x54
 801dd6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dd6e:	602f      	str	r7, [r5, #0]
 801dd70:	b1b9      	cbz	r1, 801dda2 <__sflush_r+0xae>
 801dd72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dd76:	4299      	cmp	r1, r3
 801dd78:	d002      	beq.n	801dd80 <__sflush_r+0x8c>
 801dd7a:	4628      	mov	r0, r5
 801dd7c:	f7fe fccc 	bl	801c718 <_free_r>
 801dd80:	2300      	movs	r3, #0
 801dd82:	6363      	str	r3, [r4, #52]	@ 0x34
 801dd84:	e00d      	b.n	801dda2 <__sflush_r+0xae>
 801dd86:	2301      	movs	r3, #1
 801dd88:	4628      	mov	r0, r5
 801dd8a:	47b0      	blx	r6
 801dd8c:	4602      	mov	r2, r0
 801dd8e:	1c50      	adds	r0, r2, #1
 801dd90:	d1c9      	bne.n	801dd26 <__sflush_r+0x32>
 801dd92:	682b      	ldr	r3, [r5, #0]
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d0c6      	beq.n	801dd26 <__sflush_r+0x32>
 801dd98:	2b1d      	cmp	r3, #29
 801dd9a:	d001      	beq.n	801dda0 <__sflush_r+0xac>
 801dd9c:	2b16      	cmp	r3, #22
 801dd9e:	d11e      	bne.n	801ddde <__sflush_r+0xea>
 801dda0:	602f      	str	r7, [r5, #0]
 801dda2:	2000      	movs	r0, #0
 801dda4:	e022      	b.n	801ddec <__sflush_r+0xf8>
 801dda6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ddaa:	b21b      	sxth	r3, r3
 801ddac:	e01b      	b.n	801dde6 <__sflush_r+0xf2>
 801ddae:	690f      	ldr	r7, [r1, #16]
 801ddb0:	2f00      	cmp	r7, #0
 801ddb2:	d0f6      	beq.n	801dda2 <__sflush_r+0xae>
 801ddb4:	0793      	lsls	r3, r2, #30
 801ddb6:	680e      	ldr	r6, [r1, #0]
 801ddb8:	bf08      	it	eq
 801ddba:	694b      	ldreq	r3, [r1, #20]
 801ddbc:	600f      	str	r7, [r1, #0]
 801ddbe:	bf18      	it	ne
 801ddc0:	2300      	movne	r3, #0
 801ddc2:	eba6 0807 	sub.w	r8, r6, r7
 801ddc6:	608b      	str	r3, [r1, #8]
 801ddc8:	f1b8 0f00 	cmp.w	r8, #0
 801ddcc:	dde9      	ble.n	801dda2 <__sflush_r+0xae>
 801ddce:	6a21      	ldr	r1, [r4, #32]
 801ddd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801ddd2:	4643      	mov	r3, r8
 801ddd4:	463a      	mov	r2, r7
 801ddd6:	4628      	mov	r0, r5
 801ddd8:	47b0      	blx	r6
 801ddda:	2800      	cmp	r0, #0
 801dddc:	dc08      	bgt.n	801ddf0 <__sflush_r+0xfc>
 801ddde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dde2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dde6:	81a3      	strh	r3, [r4, #12]
 801dde8:	f04f 30ff 	mov.w	r0, #4294967295
 801ddec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ddf0:	4407      	add	r7, r0
 801ddf2:	eba8 0800 	sub.w	r8, r8, r0
 801ddf6:	e7e7      	b.n	801ddc8 <__sflush_r+0xd4>
 801ddf8:	dfbffffe 	.word	0xdfbffffe

0801ddfc <_fflush_r>:
 801ddfc:	b538      	push	{r3, r4, r5, lr}
 801ddfe:	690b      	ldr	r3, [r1, #16]
 801de00:	4605      	mov	r5, r0
 801de02:	460c      	mov	r4, r1
 801de04:	b913      	cbnz	r3, 801de0c <_fflush_r+0x10>
 801de06:	2500      	movs	r5, #0
 801de08:	4628      	mov	r0, r5
 801de0a:	bd38      	pop	{r3, r4, r5, pc}
 801de0c:	b118      	cbz	r0, 801de16 <_fflush_r+0x1a>
 801de0e:	6a03      	ldr	r3, [r0, #32]
 801de10:	b90b      	cbnz	r3, 801de16 <_fflush_r+0x1a>
 801de12:	f7fd fc11 	bl	801b638 <__sinit>
 801de16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	d0f3      	beq.n	801de06 <_fflush_r+0xa>
 801de1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801de20:	07d0      	lsls	r0, r2, #31
 801de22:	d404      	bmi.n	801de2e <_fflush_r+0x32>
 801de24:	0599      	lsls	r1, r3, #22
 801de26:	d402      	bmi.n	801de2e <_fflush_r+0x32>
 801de28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de2a:	f7fd fde4 	bl	801b9f6 <__retarget_lock_acquire_recursive>
 801de2e:	4628      	mov	r0, r5
 801de30:	4621      	mov	r1, r4
 801de32:	f7ff ff5f 	bl	801dcf4 <__sflush_r>
 801de36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801de38:	07da      	lsls	r2, r3, #31
 801de3a:	4605      	mov	r5, r0
 801de3c:	d4e4      	bmi.n	801de08 <_fflush_r+0xc>
 801de3e:	89a3      	ldrh	r3, [r4, #12]
 801de40:	059b      	lsls	r3, r3, #22
 801de42:	d4e1      	bmi.n	801de08 <_fflush_r+0xc>
 801de44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801de46:	f7fd fdd7 	bl	801b9f8 <__retarget_lock_release_recursive>
 801de4a:	e7dd      	b.n	801de08 <_fflush_r+0xc>

0801de4c <fiprintf>:
 801de4c:	b40e      	push	{r1, r2, r3}
 801de4e:	b503      	push	{r0, r1, lr}
 801de50:	4601      	mov	r1, r0
 801de52:	ab03      	add	r3, sp, #12
 801de54:	4805      	ldr	r0, [pc, #20]	@ (801de6c <fiprintf+0x20>)
 801de56:	f853 2b04 	ldr.w	r2, [r3], #4
 801de5a:	6800      	ldr	r0, [r0, #0]
 801de5c:	9301      	str	r3, [sp, #4]
 801de5e:	f7ff fe31 	bl	801dac4 <_vfiprintf_r>
 801de62:	b002      	add	sp, #8
 801de64:	f85d eb04 	ldr.w	lr, [sp], #4
 801de68:	b003      	add	sp, #12
 801de6a:	4770      	bx	lr
 801de6c:	200002c0 	.word	0x200002c0

0801de70 <__swbuf_r>:
 801de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de72:	460e      	mov	r6, r1
 801de74:	4614      	mov	r4, r2
 801de76:	4605      	mov	r5, r0
 801de78:	b118      	cbz	r0, 801de82 <__swbuf_r+0x12>
 801de7a:	6a03      	ldr	r3, [r0, #32]
 801de7c:	b90b      	cbnz	r3, 801de82 <__swbuf_r+0x12>
 801de7e:	f7fd fbdb 	bl	801b638 <__sinit>
 801de82:	69a3      	ldr	r3, [r4, #24]
 801de84:	60a3      	str	r3, [r4, #8]
 801de86:	89a3      	ldrh	r3, [r4, #12]
 801de88:	071a      	lsls	r2, r3, #28
 801de8a:	d501      	bpl.n	801de90 <__swbuf_r+0x20>
 801de8c:	6923      	ldr	r3, [r4, #16]
 801de8e:	b943      	cbnz	r3, 801dea2 <__swbuf_r+0x32>
 801de90:	4621      	mov	r1, r4
 801de92:	4628      	mov	r0, r5
 801de94:	f000 f82a 	bl	801deec <__swsetup_r>
 801de98:	b118      	cbz	r0, 801dea2 <__swbuf_r+0x32>
 801de9a:	f04f 37ff 	mov.w	r7, #4294967295
 801de9e:	4638      	mov	r0, r7
 801dea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dea2:	6823      	ldr	r3, [r4, #0]
 801dea4:	6922      	ldr	r2, [r4, #16]
 801dea6:	1a98      	subs	r0, r3, r2
 801dea8:	6963      	ldr	r3, [r4, #20]
 801deaa:	b2f6      	uxtb	r6, r6
 801deac:	4283      	cmp	r3, r0
 801deae:	4637      	mov	r7, r6
 801deb0:	dc05      	bgt.n	801debe <__swbuf_r+0x4e>
 801deb2:	4621      	mov	r1, r4
 801deb4:	4628      	mov	r0, r5
 801deb6:	f7ff ffa1 	bl	801ddfc <_fflush_r>
 801deba:	2800      	cmp	r0, #0
 801debc:	d1ed      	bne.n	801de9a <__swbuf_r+0x2a>
 801debe:	68a3      	ldr	r3, [r4, #8]
 801dec0:	3b01      	subs	r3, #1
 801dec2:	60a3      	str	r3, [r4, #8]
 801dec4:	6823      	ldr	r3, [r4, #0]
 801dec6:	1c5a      	adds	r2, r3, #1
 801dec8:	6022      	str	r2, [r4, #0]
 801deca:	701e      	strb	r6, [r3, #0]
 801decc:	6962      	ldr	r2, [r4, #20]
 801dece:	1c43      	adds	r3, r0, #1
 801ded0:	429a      	cmp	r2, r3
 801ded2:	d004      	beq.n	801dede <__swbuf_r+0x6e>
 801ded4:	89a3      	ldrh	r3, [r4, #12]
 801ded6:	07db      	lsls	r3, r3, #31
 801ded8:	d5e1      	bpl.n	801de9e <__swbuf_r+0x2e>
 801deda:	2e0a      	cmp	r6, #10
 801dedc:	d1df      	bne.n	801de9e <__swbuf_r+0x2e>
 801dede:	4621      	mov	r1, r4
 801dee0:	4628      	mov	r0, r5
 801dee2:	f7ff ff8b 	bl	801ddfc <_fflush_r>
 801dee6:	2800      	cmp	r0, #0
 801dee8:	d0d9      	beq.n	801de9e <__swbuf_r+0x2e>
 801deea:	e7d6      	b.n	801de9a <__swbuf_r+0x2a>

0801deec <__swsetup_r>:
 801deec:	b538      	push	{r3, r4, r5, lr}
 801deee:	4b29      	ldr	r3, [pc, #164]	@ (801df94 <__swsetup_r+0xa8>)
 801def0:	4605      	mov	r5, r0
 801def2:	6818      	ldr	r0, [r3, #0]
 801def4:	460c      	mov	r4, r1
 801def6:	b118      	cbz	r0, 801df00 <__swsetup_r+0x14>
 801def8:	6a03      	ldr	r3, [r0, #32]
 801defa:	b90b      	cbnz	r3, 801df00 <__swsetup_r+0x14>
 801defc:	f7fd fb9c 	bl	801b638 <__sinit>
 801df00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df04:	0719      	lsls	r1, r3, #28
 801df06:	d422      	bmi.n	801df4e <__swsetup_r+0x62>
 801df08:	06da      	lsls	r2, r3, #27
 801df0a:	d407      	bmi.n	801df1c <__swsetup_r+0x30>
 801df0c:	2209      	movs	r2, #9
 801df0e:	602a      	str	r2, [r5, #0]
 801df10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801df14:	81a3      	strh	r3, [r4, #12]
 801df16:	f04f 30ff 	mov.w	r0, #4294967295
 801df1a:	e033      	b.n	801df84 <__swsetup_r+0x98>
 801df1c:	0758      	lsls	r0, r3, #29
 801df1e:	d512      	bpl.n	801df46 <__swsetup_r+0x5a>
 801df20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801df22:	b141      	cbz	r1, 801df36 <__swsetup_r+0x4a>
 801df24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801df28:	4299      	cmp	r1, r3
 801df2a:	d002      	beq.n	801df32 <__swsetup_r+0x46>
 801df2c:	4628      	mov	r0, r5
 801df2e:	f7fe fbf3 	bl	801c718 <_free_r>
 801df32:	2300      	movs	r3, #0
 801df34:	6363      	str	r3, [r4, #52]	@ 0x34
 801df36:	89a3      	ldrh	r3, [r4, #12]
 801df38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801df3c:	81a3      	strh	r3, [r4, #12]
 801df3e:	2300      	movs	r3, #0
 801df40:	6063      	str	r3, [r4, #4]
 801df42:	6923      	ldr	r3, [r4, #16]
 801df44:	6023      	str	r3, [r4, #0]
 801df46:	89a3      	ldrh	r3, [r4, #12]
 801df48:	f043 0308 	orr.w	r3, r3, #8
 801df4c:	81a3      	strh	r3, [r4, #12]
 801df4e:	6923      	ldr	r3, [r4, #16]
 801df50:	b94b      	cbnz	r3, 801df66 <__swsetup_r+0x7a>
 801df52:	89a3      	ldrh	r3, [r4, #12]
 801df54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801df58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801df5c:	d003      	beq.n	801df66 <__swsetup_r+0x7a>
 801df5e:	4621      	mov	r1, r4
 801df60:	4628      	mov	r0, r5
 801df62:	f000 f8a2 	bl	801e0aa <__smakebuf_r>
 801df66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801df6a:	f013 0201 	ands.w	r2, r3, #1
 801df6e:	d00a      	beq.n	801df86 <__swsetup_r+0x9a>
 801df70:	2200      	movs	r2, #0
 801df72:	60a2      	str	r2, [r4, #8]
 801df74:	6962      	ldr	r2, [r4, #20]
 801df76:	4252      	negs	r2, r2
 801df78:	61a2      	str	r2, [r4, #24]
 801df7a:	6922      	ldr	r2, [r4, #16]
 801df7c:	b942      	cbnz	r2, 801df90 <__swsetup_r+0xa4>
 801df7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801df82:	d1c5      	bne.n	801df10 <__swsetup_r+0x24>
 801df84:	bd38      	pop	{r3, r4, r5, pc}
 801df86:	0799      	lsls	r1, r3, #30
 801df88:	bf58      	it	pl
 801df8a:	6962      	ldrpl	r2, [r4, #20]
 801df8c:	60a2      	str	r2, [r4, #8]
 801df8e:	e7f4      	b.n	801df7a <__swsetup_r+0x8e>
 801df90:	2000      	movs	r0, #0
 801df92:	e7f7      	b.n	801df84 <__swsetup_r+0x98>
 801df94:	200002c0 	.word	0x200002c0

0801df98 <memmove>:
 801df98:	4288      	cmp	r0, r1
 801df9a:	b510      	push	{r4, lr}
 801df9c:	eb01 0402 	add.w	r4, r1, r2
 801dfa0:	d902      	bls.n	801dfa8 <memmove+0x10>
 801dfa2:	4284      	cmp	r4, r0
 801dfa4:	4623      	mov	r3, r4
 801dfa6:	d807      	bhi.n	801dfb8 <memmove+0x20>
 801dfa8:	1e43      	subs	r3, r0, #1
 801dfaa:	42a1      	cmp	r1, r4
 801dfac:	d008      	beq.n	801dfc0 <memmove+0x28>
 801dfae:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dfb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dfb6:	e7f8      	b.n	801dfaa <memmove+0x12>
 801dfb8:	4402      	add	r2, r0
 801dfba:	4601      	mov	r1, r0
 801dfbc:	428a      	cmp	r2, r1
 801dfbe:	d100      	bne.n	801dfc2 <memmove+0x2a>
 801dfc0:	bd10      	pop	{r4, pc}
 801dfc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dfc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dfca:	e7f7      	b.n	801dfbc <memmove+0x24>

0801dfcc <abort>:
 801dfcc:	b508      	push	{r3, lr}
 801dfce:	2006      	movs	r0, #6
 801dfd0:	f000 f8d0 	bl	801e174 <raise>
 801dfd4:	2001      	movs	r0, #1
 801dfd6:	f7e8 fb39 	bl	800664c <_exit>

0801dfda <_calloc_r>:
 801dfda:	b570      	push	{r4, r5, r6, lr}
 801dfdc:	fba1 5402 	umull	r5, r4, r1, r2
 801dfe0:	b93c      	cbnz	r4, 801dff2 <_calloc_r+0x18>
 801dfe2:	4629      	mov	r1, r5
 801dfe4:	f7fb fcb2 	bl	801994c <_malloc_r>
 801dfe8:	4606      	mov	r6, r0
 801dfea:	b928      	cbnz	r0, 801dff8 <_calloc_r+0x1e>
 801dfec:	2600      	movs	r6, #0
 801dfee:	4630      	mov	r0, r6
 801dff0:	bd70      	pop	{r4, r5, r6, pc}
 801dff2:	220c      	movs	r2, #12
 801dff4:	6002      	str	r2, [r0, #0]
 801dff6:	e7f9      	b.n	801dfec <_calloc_r+0x12>
 801dff8:	462a      	mov	r2, r5
 801dffa:	4621      	mov	r1, r4
 801dffc:	f7fd fbe9 	bl	801b7d2 <memset>
 801e000:	e7f5      	b.n	801dfee <_calloc_r+0x14>

0801e002 <_realloc_r>:
 801e002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e006:	4680      	mov	r8, r0
 801e008:	4615      	mov	r5, r2
 801e00a:	460c      	mov	r4, r1
 801e00c:	b921      	cbnz	r1, 801e018 <_realloc_r+0x16>
 801e00e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e012:	4611      	mov	r1, r2
 801e014:	f7fb bc9a 	b.w	801994c <_malloc_r>
 801e018:	b92a      	cbnz	r2, 801e026 <_realloc_r+0x24>
 801e01a:	f7fe fb7d 	bl	801c718 <_free_r>
 801e01e:	2400      	movs	r4, #0
 801e020:	4620      	mov	r0, r4
 801e022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e026:	f000 f8e3 	bl	801e1f0 <_malloc_usable_size_r>
 801e02a:	4285      	cmp	r5, r0
 801e02c:	4606      	mov	r6, r0
 801e02e:	d802      	bhi.n	801e036 <_realloc_r+0x34>
 801e030:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801e034:	d8f4      	bhi.n	801e020 <_realloc_r+0x1e>
 801e036:	4629      	mov	r1, r5
 801e038:	4640      	mov	r0, r8
 801e03a:	f7fb fc87 	bl	801994c <_malloc_r>
 801e03e:	4607      	mov	r7, r0
 801e040:	2800      	cmp	r0, #0
 801e042:	d0ec      	beq.n	801e01e <_realloc_r+0x1c>
 801e044:	42b5      	cmp	r5, r6
 801e046:	462a      	mov	r2, r5
 801e048:	4621      	mov	r1, r4
 801e04a:	bf28      	it	cs
 801e04c:	4632      	movcs	r2, r6
 801e04e:	f7fd fcdc 	bl	801ba0a <memcpy>
 801e052:	4621      	mov	r1, r4
 801e054:	4640      	mov	r0, r8
 801e056:	f7fe fb5f 	bl	801c718 <_free_r>
 801e05a:	463c      	mov	r4, r7
 801e05c:	e7e0      	b.n	801e020 <_realloc_r+0x1e>

0801e05e <__swhatbuf_r>:
 801e05e:	b570      	push	{r4, r5, r6, lr}
 801e060:	460c      	mov	r4, r1
 801e062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e066:	2900      	cmp	r1, #0
 801e068:	b096      	sub	sp, #88	@ 0x58
 801e06a:	4615      	mov	r5, r2
 801e06c:	461e      	mov	r6, r3
 801e06e:	da0d      	bge.n	801e08c <__swhatbuf_r+0x2e>
 801e070:	89a3      	ldrh	r3, [r4, #12]
 801e072:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e076:	f04f 0100 	mov.w	r1, #0
 801e07a:	bf14      	ite	ne
 801e07c:	2340      	movne	r3, #64	@ 0x40
 801e07e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e082:	2000      	movs	r0, #0
 801e084:	6031      	str	r1, [r6, #0]
 801e086:	602b      	str	r3, [r5, #0]
 801e088:	b016      	add	sp, #88	@ 0x58
 801e08a:	bd70      	pop	{r4, r5, r6, pc}
 801e08c:	466a      	mov	r2, sp
 801e08e:	f000 f879 	bl	801e184 <_fstat_r>
 801e092:	2800      	cmp	r0, #0
 801e094:	dbec      	blt.n	801e070 <__swhatbuf_r+0x12>
 801e096:	9901      	ldr	r1, [sp, #4]
 801e098:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e09c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e0a0:	4259      	negs	r1, r3
 801e0a2:	4159      	adcs	r1, r3
 801e0a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e0a8:	e7eb      	b.n	801e082 <__swhatbuf_r+0x24>

0801e0aa <__smakebuf_r>:
 801e0aa:	898b      	ldrh	r3, [r1, #12]
 801e0ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e0ae:	079d      	lsls	r5, r3, #30
 801e0b0:	4606      	mov	r6, r0
 801e0b2:	460c      	mov	r4, r1
 801e0b4:	d507      	bpl.n	801e0c6 <__smakebuf_r+0x1c>
 801e0b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e0ba:	6023      	str	r3, [r4, #0]
 801e0bc:	6123      	str	r3, [r4, #16]
 801e0be:	2301      	movs	r3, #1
 801e0c0:	6163      	str	r3, [r4, #20]
 801e0c2:	b003      	add	sp, #12
 801e0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e0c6:	ab01      	add	r3, sp, #4
 801e0c8:	466a      	mov	r2, sp
 801e0ca:	f7ff ffc8 	bl	801e05e <__swhatbuf_r>
 801e0ce:	9f00      	ldr	r7, [sp, #0]
 801e0d0:	4605      	mov	r5, r0
 801e0d2:	4639      	mov	r1, r7
 801e0d4:	4630      	mov	r0, r6
 801e0d6:	f7fb fc39 	bl	801994c <_malloc_r>
 801e0da:	b948      	cbnz	r0, 801e0f0 <__smakebuf_r+0x46>
 801e0dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0e0:	059a      	lsls	r2, r3, #22
 801e0e2:	d4ee      	bmi.n	801e0c2 <__smakebuf_r+0x18>
 801e0e4:	f023 0303 	bic.w	r3, r3, #3
 801e0e8:	f043 0302 	orr.w	r3, r3, #2
 801e0ec:	81a3      	strh	r3, [r4, #12]
 801e0ee:	e7e2      	b.n	801e0b6 <__smakebuf_r+0xc>
 801e0f0:	89a3      	ldrh	r3, [r4, #12]
 801e0f2:	6020      	str	r0, [r4, #0]
 801e0f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e0f8:	81a3      	strh	r3, [r4, #12]
 801e0fa:	9b01      	ldr	r3, [sp, #4]
 801e0fc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e100:	b15b      	cbz	r3, 801e11a <__smakebuf_r+0x70>
 801e102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e106:	4630      	mov	r0, r6
 801e108:	f000 f84e 	bl	801e1a8 <_isatty_r>
 801e10c:	b128      	cbz	r0, 801e11a <__smakebuf_r+0x70>
 801e10e:	89a3      	ldrh	r3, [r4, #12]
 801e110:	f023 0303 	bic.w	r3, r3, #3
 801e114:	f043 0301 	orr.w	r3, r3, #1
 801e118:	81a3      	strh	r3, [r4, #12]
 801e11a:	89a3      	ldrh	r3, [r4, #12]
 801e11c:	431d      	orrs	r5, r3
 801e11e:	81a5      	strh	r5, [r4, #12]
 801e120:	e7cf      	b.n	801e0c2 <__smakebuf_r+0x18>

0801e122 <_raise_r>:
 801e122:	291f      	cmp	r1, #31
 801e124:	b538      	push	{r3, r4, r5, lr}
 801e126:	4605      	mov	r5, r0
 801e128:	460c      	mov	r4, r1
 801e12a:	d904      	bls.n	801e136 <_raise_r+0x14>
 801e12c:	2316      	movs	r3, #22
 801e12e:	6003      	str	r3, [r0, #0]
 801e130:	f04f 30ff 	mov.w	r0, #4294967295
 801e134:	bd38      	pop	{r3, r4, r5, pc}
 801e136:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e138:	b112      	cbz	r2, 801e140 <_raise_r+0x1e>
 801e13a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e13e:	b94b      	cbnz	r3, 801e154 <_raise_r+0x32>
 801e140:	4628      	mov	r0, r5
 801e142:	f000 f853 	bl	801e1ec <_getpid_r>
 801e146:	4622      	mov	r2, r4
 801e148:	4601      	mov	r1, r0
 801e14a:	4628      	mov	r0, r5
 801e14c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e150:	f000 b83a 	b.w	801e1c8 <_kill_r>
 801e154:	2b01      	cmp	r3, #1
 801e156:	d00a      	beq.n	801e16e <_raise_r+0x4c>
 801e158:	1c59      	adds	r1, r3, #1
 801e15a:	d103      	bne.n	801e164 <_raise_r+0x42>
 801e15c:	2316      	movs	r3, #22
 801e15e:	6003      	str	r3, [r0, #0]
 801e160:	2001      	movs	r0, #1
 801e162:	e7e7      	b.n	801e134 <_raise_r+0x12>
 801e164:	2100      	movs	r1, #0
 801e166:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e16a:	4620      	mov	r0, r4
 801e16c:	4798      	blx	r3
 801e16e:	2000      	movs	r0, #0
 801e170:	e7e0      	b.n	801e134 <_raise_r+0x12>
	...

0801e174 <raise>:
 801e174:	4b02      	ldr	r3, [pc, #8]	@ (801e180 <raise+0xc>)
 801e176:	4601      	mov	r1, r0
 801e178:	6818      	ldr	r0, [r3, #0]
 801e17a:	f7ff bfd2 	b.w	801e122 <_raise_r>
 801e17e:	bf00      	nop
 801e180:	200002c0 	.word	0x200002c0

0801e184 <_fstat_r>:
 801e184:	b538      	push	{r3, r4, r5, lr}
 801e186:	4d07      	ldr	r5, [pc, #28]	@ (801e1a4 <_fstat_r+0x20>)
 801e188:	2300      	movs	r3, #0
 801e18a:	4604      	mov	r4, r0
 801e18c:	4608      	mov	r0, r1
 801e18e:	4611      	mov	r1, r2
 801e190:	602b      	str	r3, [r5, #0]
 801e192:	f7e8 faab 	bl	80066ec <_fstat>
 801e196:	1c43      	adds	r3, r0, #1
 801e198:	d102      	bne.n	801e1a0 <_fstat_r+0x1c>
 801e19a:	682b      	ldr	r3, [r5, #0]
 801e19c:	b103      	cbz	r3, 801e1a0 <_fstat_r+0x1c>
 801e19e:	6023      	str	r3, [r4, #0]
 801e1a0:	bd38      	pop	{r3, r4, r5, pc}
 801e1a2:	bf00      	nop
 801e1a4:	200033f0 	.word	0x200033f0

0801e1a8 <_isatty_r>:
 801e1a8:	b538      	push	{r3, r4, r5, lr}
 801e1aa:	4d06      	ldr	r5, [pc, #24]	@ (801e1c4 <_isatty_r+0x1c>)
 801e1ac:	2300      	movs	r3, #0
 801e1ae:	4604      	mov	r4, r0
 801e1b0:	4608      	mov	r0, r1
 801e1b2:	602b      	str	r3, [r5, #0]
 801e1b4:	f7e8 faaa 	bl	800670c <_isatty>
 801e1b8:	1c43      	adds	r3, r0, #1
 801e1ba:	d102      	bne.n	801e1c2 <_isatty_r+0x1a>
 801e1bc:	682b      	ldr	r3, [r5, #0]
 801e1be:	b103      	cbz	r3, 801e1c2 <_isatty_r+0x1a>
 801e1c0:	6023      	str	r3, [r4, #0]
 801e1c2:	bd38      	pop	{r3, r4, r5, pc}
 801e1c4:	200033f0 	.word	0x200033f0

0801e1c8 <_kill_r>:
 801e1c8:	b538      	push	{r3, r4, r5, lr}
 801e1ca:	4d07      	ldr	r5, [pc, #28]	@ (801e1e8 <_kill_r+0x20>)
 801e1cc:	2300      	movs	r3, #0
 801e1ce:	4604      	mov	r4, r0
 801e1d0:	4608      	mov	r0, r1
 801e1d2:	4611      	mov	r1, r2
 801e1d4:	602b      	str	r3, [r5, #0]
 801e1d6:	f7e8 fa29 	bl	800662c <_kill>
 801e1da:	1c43      	adds	r3, r0, #1
 801e1dc:	d102      	bne.n	801e1e4 <_kill_r+0x1c>
 801e1de:	682b      	ldr	r3, [r5, #0]
 801e1e0:	b103      	cbz	r3, 801e1e4 <_kill_r+0x1c>
 801e1e2:	6023      	str	r3, [r4, #0]
 801e1e4:	bd38      	pop	{r3, r4, r5, pc}
 801e1e6:	bf00      	nop
 801e1e8:	200033f0 	.word	0x200033f0

0801e1ec <_getpid_r>:
 801e1ec:	f7e8 ba16 	b.w	800661c <_getpid>

0801e1f0 <_malloc_usable_size_r>:
 801e1f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e1f4:	1f18      	subs	r0, r3, #4
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	bfbc      	itt	lt
 801e1fa:	580b      	ldrlt	r3, [r1, r0]
 801e1fc:	18c0      	addlt	r0, r0, r3
 801e1fe:	4770      	bx	lr

0801e200 <cos>:
 801e200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e202:	ec53 2b10 	vmov	r2, r3, d0
 801e206:	4826      	ldr	r0, [pc, #152]	@ (801e2a0 <cos+0xa0>)
 801e208:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e20c:	4281      	cmp	r1, r0
 801e20e:	d806      	bhi.n	801e21e <cos+0x1e>
 801e210:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e298 <cos+0x98>
 801e214:	b005      	add	sp, #20
 801e216:	f85d eb04 	ldr.w	lr, [sp], #4
 801e21a:	f000 b9b1 	b.w	801e580 <__kernel_cos>
 801e21e:	4821      	ldr	r0, [pc, #132]	@ (801e2a4 <cos+0xa4>)
 801e220:	4281      	cmp	r1, r0
 801e222:	d908      	bls.n	801e236 <cos+0x36>
 801e224:	4610      	mov	r0, r2
 801e226:	4619      	mov	r1, r3
 801e228:	f7e2 f806 	bl	8000238 <__aeabi_dsub>
 801e22c:	ec41 0b10 	vmov	d0, r0, r1
 801e230:	b005      	add	sp, #20
 801e232:	f85d fb04 	ldr.w	pc, [sp], #4
 801e236:	4668      	mov	r0, sp
 801e238:	f000 fb26 	bl	801e888 <__ieee754_rem_pio2>
 801e23c:	f000 0003 	and.w	r0, r0, #3
 801e240:	2801      	cmp	r0, #1
 801e242:	d00b      	beq.n	801e25c <cos+0x5c>
 801e244:	2802      	cmp	r0, #2
 801e246:	d015      	beq.n	801e274 <cos+0x74>
 801e248:	b9d8      	cbnz	r0, 801e282 <cos+0x82>
 801e24a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e24e:	ed9d 0b00 	vldr	d0, [sp]
 801e252:	f000 f995 	bl	801e580 <__kernel_cos>
 801e256:	ec51 0b10 	vmov	r0, r1, d0
 801e25a:	e7e7      	b.n	801e22c <cos+0x2c>
 801e25c:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e260:	ed9d 0b00 	vldr	d0, [sp]
 801e264:	f000 fa54 	bl	801e710 <__kernel_sin>
 801e268:	ec53 2b10 	vmov	r2, r3, d0
 801e26c:	4610      	mov	r0, r2
 801e26e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e272:	e7db      	b.n	801e22c <cos+0x2c>
 801e274:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e278:	ed9d 0b00 	vldr	d0, [sp]
 801e27c:	f000 f980 	bl	801e580 <__kernel_cos>
 801e280:	e7f2      	b.n	801e268 <cos+0x68>
 801e282:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e286:	ed9d 0b00 	vldr	d0, [sp]
 801e28a:	2001      	movs	r0, #1
 801e28c:	f000 fa40 	bl	801e710 <__kernel_sin>
 801e290:	e7e1      	b.n	801e256 <cos+0x56>
 801e292:	bf00      	nop
 801e294:	f3af 8000 	nop.w
	...
 801e2a0:	3fe921fb 	.word	0x3fe921fb
 801e2a4:	7fefffff 	.word	0x7fefffff

0801e2a8 <sin>:
 801e2a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e2aa:	ec53 2b10 	vmov	r2, r3, d0
 801e2ae:	4826      	ldr	r0, [pc, #152]	@ (801e348 <sin+0xa0>)
 801e2b0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e2b4:	4281      	cmp	r1, r0
 801e2b6:	d807      	bhi.n	801e2c8 <sin+0x20>
 801e2b8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 801e340 <sin+0x98>
 801e2bc:	2000      	movs	r0, #0
 801e2be:	b005      	add	sp, #20
 801e2c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e2c4:	f000 ba24 	b.w	801e710 <__kernel_sin>
 801e2c8:	4820      	ldr	r0, [pc, #128]	@ (801e34c <sin+0xa4>)
 801e2ca:	4281      	cmp	r1, r0
 801e2cc:	d908      	bls.n	801e2e0 <sin+0x38>
 801e2ce:	4610      	mov	r0, r2
 801e2d0:	4619      	mov	r1, r3
 801e2d2:	f7e1 ffb1 	bl	8000238 <__aeabi_dsub>
 801e2d6:	ec41 0b10 	vmov	d0, r0, r1
 801e2da:	b005      	add	sp, #20
 801e2dc:	f85d fb04 	ldr.w	pc, [sp], #4
 801e2e0:	4668      	mov	r0, sp
 801e2e2:	f000 fad1 	bl	801e888 <__ieee754_rem_pio2>
 801e2e6:	f000 0003 	and.w	r0, r0, #3
 801e2ea:	2801      	cmp	r0, #1
 801e2ec:	d00c      	beq.n	801e308 <sin+0x60>
 801e2ee:	2802      	cmp	r0, #2
 801e2f0:	d011      	beq.n	801e316 <sin+0x6e>
 801e2f2:	b9e8      	cbnz	r0, 801e330 <sin+0x88>
 801e2f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2f8:	ed9d 0b00 	vldr	d0, [sp]
 801e2fc:	2001      	movs	r0, #1
 801e2fe:	f000 fa07 	bl	801e710 <__kernel_sin>
 801e302:	ec51 0b10 	vmov	r0, r1, d0
 801e306:	e7e6      	b.n	801e2d6 <sin+0x2e>
 801e308:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e30c:	ed9d 0b00 	vldr	d0, [sp]
 801e310:	f000 f936 	bl	801e580 <__kernel_cos>
 801e314:	e7f5      	b.n	801e302 <sin+0x5a>
 801e316:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e31a:	ed9d 0b00 	vldr	d0, [sp]
 801e31e:	2001      	movs	r0, #1
 801e320:	f000 f9f6 	bl	801e710 <__kernel_sin>
 801e324:	ec53 2b10 	vmov	r2, r3, d0
 801e328:	4610      	mov	r0, r2
 801e32a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801e32e:	e7d2      	b.n	801e2d6 <sin+0x2e>
 801e330:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e334:	ed9d 0b00 	vldr	d0, [sp]
 801e338:	f000 f922 	bl	801e580 <__kernel_cos>
 801e33c:	e7f2      	b.n	801e324 <sin+0x7c>
 801e33e:	bf00      	nop
	...
 801e348:	3fe921fb 	.word	0x3fe921fb
 801e34c:	7fefffff 	.word	0x7fefffff

0801e350 <expf>:
 801e350:	b508      	push	{r3, lr}
 801e352:	ed2d 8b02 	vpush	{d8}
 801e356:	eef0 8a40 	vmov.f32	s17, s0
 801e35a:	f000 fccd 	bl	801ecf8 <__ieee754_expf>
 801e35e:	eeb0 8a40 	vmov.f32	s16, s0
 801e362:	eeb0 0a68 	vmov.f32	s0, s17
 801e366:	f000 f87d 	bl	801e464 <finitef>
 801e36a:	b160      	cbz	r0, 801e386 <expf+0x36>
 801e36c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801e3ac <expf+0x5c>
 801e370:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e378:	dd0a      	ble.n	801e390 <expf+0x40>
 801e37a:	f7fd fb11 	bl	801b9a0 <__errno>
 801e37e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801e3b0 <expf+0x60>
 801e382:	2322      	movs	r3, #34	@ 0x22
 801e384:	6003      	str	r3, [r0, #0]
 801e386:	eeb0 0a48 	vmov.f32	s0, s16
 801e38a:	ecbd 8b02 	vpop	{d8}
 801e38e:	bd08      	pop	{r3, pc}
 801e390:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801e3b4 <expf+0x64>
 801e394:	eef4 8ae7 	vcmpe.f32	s17, s15
 801e398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e39c:	d5f3      	bpl.n	801e386 <expf+0x36>
 801e39e:	f7fd faff 	bl	801b9a0 <__errno>
 801e3a2:	2322      	movs	r3, #34	@ 0x22
 801e3a4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801e3b8 <expf+0x68>
 801e3a8:	6003      	str	r3, [r0, #0]
 801e3aa:	e7ec      	b.n	801e386 <expf+0x36>
 801e3ac:	42b17217 	.word	0x42b17217
 801e3b0:	7f800000 	.word	0x7f800000
 801e3b4:	c2cff1b5 	.word	0xc2cff1b5
 801e3b8:	00000000 	.word	0x00000000

0801e3bc <fmin>:
 801e3bc:	b508      	push	{r3, lr}
 801e3be:	ed2d 8b04 	vpush	{d8-d9}
 801e3c2:	eeb0 8a40 	vmov.f32	s16, s0
 801e3c6:	eef0 8a60 	vmov.f32	s17, s1
 801e3ca:	eeb0 9a41 	vmov.f32	s18, s2
 801e3ce:	eef0 9a61 	vmov.f32	s19, s3
 801e3d2:	f000 f81d 	bl	801e410 <__fpclassifyd>
 801e3d6:	b950      	cbnz	r0, 801e3ee <fmin+0x32>
 801e3d8:	eeb0 8a49 	vmov.f32	s16, s18
 801e3dc:	eef0 8a69 	vmov.f32	s17, s19
 801e3e0:	eeb0 0a48 	vmov.f32	s0, s16
 801e3e4:	eef0 0a68 	vmov.f32	s1, s17
 801e3e8:	ecbd 8b04 	vpop	{d8-d9}
 801e3ec:	bd08      	pop	{r3, pc}
 801e3ee:	eeb0 0a49 	vmov.f32	s0, s18
 801e3f2:	eef0 0a69 	vmov.f32	s1, s19
 801e3f6:	f000 f80b 	bl	801e410 <__fpclassifyd>
 801e3fa:	2800      	cmp	r0, #0
 801e3fc:	d0f0      	beq.n	801e3e0 <fmin+0x24>
 801e3fe:	ec53 2b19 	vmov	r2, r3, d9
 801e402:	ec51 0b18 	vmov	r0, r1, d8
 801e406:	f7e2 fb41 	bl	8000a8c <__aeabi_dcmplt>
 801e40a:	2800      	cmp	r0, #0
 801e40c:	d0e4      	beq.n	801e3d8 <fmin+0x1c>
 801e40e:	e7e7      	b.n	801e3e0 <fmin+0x24>

0801e410 <__fpclassifyd>:
 801e410:	ec51 0b10 	vmov	r0, r1, d0
 801e414:	b510      	push	{r4, lr}
 801e416:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 801e41a:	460b      	mov	r3, r1
 801e41c:	d019      	beq.n	801e452 <__fpclassifyd+0x42>
 801e41e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 801e422:	490e      	ldr	r1, [pc, #56]	@ (801e45c <__fpclassifyd+0x4c>)
 801e424:	428a      	cmp	r2, r1
 801e426:	d90e      	bls.n	801e446 <__fpclassifyd+0x36>
 801e428:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 801e42c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 801e430:	428a      	cmp	r2, r1
 801e432:	d908      	bls.n	801e446 <__fpclassifyd+0x36>
 801e434:	4a0a      	ldr	r2, [pc, #40]	@ (801e460 <__fpclassifyd+0x50>)
 801e436:	4213      	tst	r3, r2
 801e438:	d007      	beq.n	801e44a <__fpclassifyd+0x3a>
 801e43a:	4294      	cmp	r4, r2
 801e43c:	d107      	bne.n	801e44e <__fpclassifyd+0x3e>
 801e43e:	fab0 f080 	clz	r0, r0
 801e442:	0940      	lsrs	r0, r0, #5
 801e444:	bd10      	pop	{r4, pc}
 801e446:	2004      	movs	r0, #4
 801e448:	e7fc      	b.n	801e444 <__fpclassifyd+0x34>
 801e44a:	2003      	movs	r0, #3
 801e44c:	e7fa      	b.n	801e444 <__fpclassifyd+0x34>
 801e44e:	2000      	movs	r0, #0
 801e450:	e7f8      	b.n	801e444 <__fpclassifyd+0x34>
 801e452:	2800      	cmp	r0, #0
 801e454:	d1ee      	bne.n	801e434 <__fpclassifyd+0x24>
 801e456:	2002      	movs	r0, #2
 801e458:	e7f4      	b.n	801e444 <__fpclassifyd+0x34>
 801e45a:	bf00      	nop
 801e45c:	7fdfffff 	.word	0x7fdfffff
 801e460:	7ff00000 	.word	0x7ff00000

0801e464 <finitef>:
 801e464:	ee10 3a10 	vmov	r3, s0
 801e468:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801e46c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801e470:	bfac      	ite	ge
 801e472:	2000      	movge	r0, #0
 801e474:	2001      	movlt	r0, #1
 801e476:	4770      	bx	lr

0801e478 <cosl>:
 801e478:	f7ff bec2 	b.w	801e200 <cos>

0801e47c <sinl>:
 801e47c:	f7ff bf14 	b.w	801e2a8 <sin>

0801e480 <acosl>:
 801e480:	f000 bbfe 	b.w	801ec80 <acos>
 801e484:	0000      	movs	r0, r0
	...

0801e488 <floor>:
 801e488:	ec51 0b10 	vmov	r0, r1, d0
 801e48c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801e490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e494:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 801e498:	2e13      	cmp	r6, #19
 801e49a:	460c      	mov	r4, r1
 801e49c:	4605      	mov	r5, r0
 801e49e:	4680      	mov	r8, r0
 801e4a0:	dc34      	bgt.n	801e50c <floor+0x84>
 801e4a2:	2e00      	cmp	r6, #0
 801e4a4:	da17      	bge.n	801e4d6 <floor+0x4e>
 801e4a6:	a332      	add	r3, pc, #200	@ (adr r3, 801e570 <floor+0xe8>)
 801e4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ac:	f7e1 fec6 	bl	800023c <__adddf3>
 801e4b0:	2200      	movs	r2, #0
 801e4b2:	2300      	movs	r3, #0
 801e4b4:	f7e2 fb08 	bl	8000ac8 <__aeabi_dcmpgt>
 801e4b8:	b150      	cbz	r0, 801e4d0 <floor+0x48>
 801e4ba:	2c00      	cmp	r4, #0
 801e4bc:	da55      	bge.n	801e56a <floor+0xe2>
 801e4be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801e4c2:	432c      	orrs	r4, r5
 801e4c4:	2500      	movs	r5, #0
 801e4c6:	42ac      	cmp	r4, r5
 801e4c8:	4c2b      	ldr	r4, [pc, #172]	@ (801e578 <floor+0xf0>)
 801e4ca:	bf08      	it	eq
 801e4cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801e4d0:	4621      	mov	r1, r4
 801e4d2:	4628      	mov	r0, r5
 801e4d4:	e023      	b.n	801e51e <floor+0x96>
 801e4d6:	4f29      	ldr	r7, [pc, #164]	@ (801e57c <floor+0xf4>)
 801e4d8:	4137      	asrs	r7, r6
 801e4da:	ea01 0307 	and.w	r3, r1, r7
 801e4de:	4303      	orrs	r3, r0
 801e4e0:	d01d      	beq.n	801e51e <floor+0x96>
 801e4e2:	a323      	add	r3, pc, #140	@ (adr r3, 801e570 <floor+0xe8>)
 801e4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4e8:	f7e1 fea8 	bl	800023c <__adddf3>
 801e4ec:	2200      	movs	r2, #0
 801e4ee:	2300      	movs	r3, #0
 801e4f0:	f7e2 faea 	bl	8000ac8 <__aeabi_dcmpgt>
 801e4f4:	2800      	cmp	r0, #0
 801e4f6:	d0eb      	beq.n	801e4d0 <floor+0x48>
 801e4f8:	2c00      	cmp	r4, #0
 801e4fa:	bfbe      	ittt	lt
 801e4fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801e500:	4133      	asrlt	r3, r6
 801e502:	18e4      	addlt	r4, r4, r3
 801e504:	ea24 0407 	bic.w	r4, r4, r7
 801e508:	2500      	movs	r5, #0
 801e50a:	e7e1      	b.n	801e4d0 <floor+0x48>
 801e50c:	2e33      	cmp	r6, #51	@ 0x33
 801e50e:	dd0a      	ble.n	801e526 <floor+0x9e>
 801e510:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801e514:	d103      	bne.n	801e51e <floor+0x96>
 801e516:	4602      	mov	r2, r0
 801e518:	460b      	mov	r3, r1
 801e51a:	f7e1 fe8f 	bl	800023c <__adddf3>
 801e51e:	ec41 0b10 	vmov	d0, r0, r1
 801e522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e526:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801e52a:	f04f 37ff 	mov.w	r7, #4294967295
 801e52e:	40df      	lsrs	r7, r3
 801e530:	4207      	tst	r7, r0
 801e532:	d0f4      	beq.n	801e51e <floor+0x96>
 801e534:	a30e      	add	r3, pc, #56	@ (adr r3, 801e570 <floor+0xe8>)
 801e536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e53a:	f7e1 fe7f 	bl	800023c <__adddf3>
 801e53e:	2200      	movs	r2, #0
 801e540:	2300      	movs	r3, #0
 801e542:	f7e2 fac1 	bl	8000ac8 <__aeabi_dcmpgt>
 801e546:	2800      	cmp	r0, #0
 801e548:	d0c2      	beq.n	801e4d0 <floor+0x48>
 801e54a:	2c00      	cmp	r4, #0
 801e54c:	da0a      	bge.n	801e564 <floor+0xdc>
 801e54e:	2e14      	cmp	r6, #20
 801e550:	d101      	bne.n	801e556 <floor+0xce>
 801e552:	3401      	adds	r4, #1
 801e554:	e006      	b.n	801e564 <floor+0xdc>
 801e556:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801e55a:	2301      	movs	r3, #1
 801e55c:	40b3      	lsls	r3, r6
 801e55e:	441d      	add	r5, r3
 801e560:	4545      	cmp	r5, r8
 801e562:	d3f6      	bcc.n	801e552 <floor+0xca>
 801e564:	ea25 0507 	bic.w	r5, r5, r7
 801e568:	e7b2      	b.n	801e4d0 <floor+0x48>
 801e56a:	2500      	movs	r5, #0
 801e56c:	462c      	mov	r4, r5
 801e56e:	e7af      	b.n	801e4d0 <floor+0x48>
 801e570:	8800759c 	.word	0x8800759c
 801e574:	7e37e43c 	.word	0x7e37e43c
 801e578:	bff00000 	.word	0xbff00000
 801e57c:	000fffff 	.word	0x000fffff

0801e580 <__kernel_cos>:
 801e580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e584:	ec57 6b10 	vmov	r6, r7, d0
 801e588:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e58c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801e590:	ed8d 1b00 	vstr	d1, [sp]
 801e594:	d206      	bcs.n	801e5a4 <__kernel_cos+0x24>
 801e596:	4630      	mov	r0, r6
 801e598:	4639      	mov	r1, r7
 801e59a:	f7e2 fab5 	bl	8000b08 <__aeabi_d2iz>
 801e59e:	2800      	cmp	r0, #0
 801e5a0:	f000 8088 	beq.w	801e6b4 <__kernel_cos+0x134>
 801e5a4:	4632      	mov	r2, r6
 801e5a6:	463b      	mov	r3, r7
 801e5a8:	4630      	mov	r0, r6
 801e5aa:	4639      	mov	r1, r7
 801e5ac:	f7e1 fffc 	bl	80005a8 <__aeabi_dmul>
 801e5b0:	4b51      	ldr	r3, [pc, #324]	@ (801e6f8 <__kernel_cos+0x178>)
 801e5b2:	2200      	movs	r2, #0
 801e5b4:	4604      	mov	r4, r0
 801e5b6:	460d      	mov	r5, r1
 801e5b8:	f7e1 fff6 	bl	80005a8 <__aeabi_dmul>
 801e5bc:	a340      	add	r3, pc, #256	@ (adr r3, 801e6c0 <__kernel_cos+0x140>)
 801e5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5c2:	4682      	mov	sl, r0
 801e5c4:	468b      	mov	fp, r1
 801e5c6:	4620      	mov	r0, r4
 801e5c8:	4629      	mov	r1, r5
 801e5ca:	f7e1 ffed 	bl	80005a8 <__aeabi_dmul>
 801e5ce:	a33e      	add	r3, pc, #248	@ (adr r3, 801e6c8 <__kernel_cos+0x148>)
 801e5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5d4:	f7e1 fe32 	bl	800023c <__adddf3>
 801e5d8:	4622      	mov	r2, r4
 801e5da:	462b      	mov	r3, r5
 801e5dc:	f7e1 ffe4 	bl	80005a8 <__aeabi_dmul>
 801e5e0:	a33b      	add	r3, pc, #236	@ (adr r3, 801e6d0 <__kernel_cos+0x150>)
 801e5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5e6:	f7e1 fe27 	bl	8000238 <__aeabi_dsub>
 801e5ea:	4622      	mov	r2, r4
 801e5ec:	462b      	mov	r3, r5
 801e5ee:	f7e1 ffdb 	bl	80005a8 <__aeabi_dmul>
 801e5f2:	a339      	add	r3, pc, #228	@ (adr r3, 801e6d8 <__kernel_cos+0x158>)
 801e5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5f8:	f7e1 fe20 	bl	800023c <__adddf3>
 801e5fc:	4622      	mov	r2, r4
 801e5fe:	462b      	mov	r3, r5
 801e600:	f7e1 ffd2 	bl	80005a8 <__aeabi_dmul>
 801e604:	a336      	add	r3, pc, #216	@ (adr r3, 801e6e0 <__kernel_cos+0x160>)
 801e606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e60a:	f7e1 fe15 	bl	8000238 <__aeabi_dsub>
 801e60e:	4622      	mov	r2, r4
 801e610:	462b      	mov	r3, r5
 801e612:	f7e1 ffc9 	bl	80005a8 <__aeabi_dmul>
 801e616:	a334      	add	r3, pc, #208	@ (adr r3, 801e6e8 <__kernel_cos+0x168>)
 801e618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e61c:	f7e1 fe0e 	bl	800023c <__adddf3>
 801e620:	4622      	mov	r2, r4
 801e622:	462b      	mov	r3, r5
 801e624:	f7e1 ffc0 	bl	80005a8 <__aeabi_dmul>
 801e628:	4622      	mov	r2, r4
 801e62a:	462b      	mov	r3, r5
 801e62c:	f7e1 ffbc 	bl	80005a8 <__aeabi_dmul>
 801e630:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e634:	4604      	mov	r4, r0
 801e636:	460d      	mov	r5, r1
 801e638:	4630      	mov	r0, r6
 801e63a:	4639      	mov	r1, r7
 801e63c:	f7e1 ffb4 	bl	80005a8 <__aeabi_dmul>
 801e640:	460b      	mov	r3, r1
 801e642:	4602      	mov	r2, r0
 801e644:	4629      	mov	r1, r5
 801e646:	4620      	mov	r0, r4
 801e648:	f7e1 fdf6 	bl	8000238 <__aeabi_dsub>
 801e64c:	4b2b      	ldr	r3, [pc, #172]	@ (801e6fc <__kernel_cos+0x17c>)
 801e64e:	4598      	cmp	r8, r3
 801e650:	4606      	mov	r6, r0
 801e652:	460f      	mov	r7, r1
 801e654:	d810      	bhi.n	801e678 <__kernel_cos+0xf8>
 801e656:	4602      	mov	r2, r0
 801e658:	460b      	mov	r3, r1
 801e65a:	4650      	mov	r0, sl
 801e65c:	4659      	mov	r1, fp
 801e65e:	f7e1 fdeb 	bl	8000238 <__aeabi_dsub>
 801e662:	460b      	mov	r3, r1
 801e664:	4926      	ldr	r1, [pc, #152]	@ (801e700 <__kernel_cos+0x180>)
 801e666:	4602      	mov	r2, r0
 801e668:	2000      	movs	r0, #0
 801e66a:	f7e1 fde5 	bl	8000238 <__aeabi_dsub>
 801e66e:	ec41 0b10 	vmov	d0, r0, r1
 801e672:	b003      	add	sp, #12
 801e674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e678:	4b22      	ldr	r3, [pc, #136]	@ (801e704 <__kernel_cos+0x184>)
 801e67a:	4921      	ldr	r1, [pc, #132]	@ (801e700 <__kernel_cos+0x180>)
 801e67c:	4598      	cmp	r8, r3
 801e67e:	bf8c      	ite	hi
 801e680:	4d21      	ldrhi	r5, [pc, #132]	@ (801e708 <__kernel_cos+0x188>)
 801e682:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801e686:	2400      	movs	r4, #0
 801e688:	4622      	mov	r2, r4
 801e68a:	462b      	mov	r3, r5
 801e68c:	2000      	movs	r0, #0
 801e68e:	f7e1 fdd3 	bl	8000238 <__aeabi_dsub>
 801e692:	4622      	mov	r2, r4
 801e694:	4680      	mov	r8, r0
 801e696:	4689      	mov	r9, r1
 801e698:	462b      	mov	r3, r5
 801e69a:	4650      	mov	r0, sl
 801e69c:	4659      	mov	r1, fp
 801e69e:	f7e1 fdcb 	bl	8000238 <__aeabi_dsub>
 801e6a2:	4632      	mov	r2, r6
 801e6a4:	463b      	mov	r3, r7
 801e6a6:	f7e1 fdc7 	bl	8000238 <__aeabi_dsub>
 801e6aa:	4602      	mov	r2, r0
 801e6ac:	460b      	mov	r3, r1
 801e6ae:	4640      	mov	r0, r8
 801e6b0:	4649      	mov	r1, r9
 801e6b2:	e7da      	b.n	801e66a <__kernel_cos+0xea>
 801e6b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801e6f0 <__kernel_cos+0x170>
 801e6b8:	e7db      	b.n	801e672 <__kernel_cos+0xf2>
 801e6ba:	bf00      	nop
 801e6bc:	f3af 8000 	nop.w
 801e6c0:	be8838d4 	.word	0xbe8838d4
 801e6c4:	bda8fae9 	.word	0xbda8fae9
 801e6c8:	bdb4b1c4 	.word	0xbdb4b1c4
 801e6cc:	3e21ee9e 	.word	0x3e21ee9e
 801e6d0:	809c52ad 	.word	0x809c52ad
 801e6d4:	3e927e4f 	.word	0x3e927e4f
 801e6d8:	19cb1590 	.word	0x19cb1590
 801e6dc:	3efa01a0 	.word	0x3efa01a0
 801e6e0:	16c15177 	.word	0x16c15177
 801e6e4:	3f56c16c 	.word	0x3f56c16c
 801e6e8:	5555554c 	.word	0x5555554c
 801e6ec:	3fa55555 	.word	0x3fa55555
 801e6f0:	00000000 	.word	0x00000000
 801e6f4:	3ff00000 	.word	0x3ff00000
 801e6f8:	3fe00000 	.word	0x3fe00000
 801e6fc:	3fd33332 	.word	0x3fd33332
 801e700:	3ff00000 	.word	0x3ff00000
 801e704:	3fe90000 	.word	0x3fe90000
 801e708:	3fd20000 	.word	0x3fd20000
 801e70c:	00000000 	.word	0x00000000

0801e710 <__kernel_sin>:
 801e710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e714:	ec55 4b10 	vmov	r4, r5, d0
 801e718:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801e71c:	b085      	sub	sp, #20
 801e71e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801e722:	ed8d 1b02 	vstr	d1, [sp, #8]
 801e726:	4680      	mov	r8, r0
 801e728:	d205      	bcs.n	801e736 <__kernel_sin+0x26>
 801e72a:	4620      	mov	r0, r4
 801e72c:	4629      	mov	r1, r5
 801e72e:	f7e2 f9eb 	bl	8000b08 <__aeabi_d2iz>
 801e732:	2800      	cmp	r0, #0
 801e734:	d052      	beq.n	801e7dc <__kernel_sin+0xcc>
 801e736:	4622      	mov	r2, r4
 801e738:	462b      	mov	r3, r5
 801e73a:	4620      	mov	r0, r4
 801e73c:	4629      	mov	r1, r5
 801e73e:	f7e1 ff33 	bl	80005a8 <__aeabi_dmul>
 801e742:	4682      	mov	sl, r0
 801e744:	468b      	mov	fp, r1
 801e746:	4602      	mov	r2, r0
 801e748:	460b      	mov	r3, r1
 801e74a:	4620      	mov	r0, r4
 801e74c:	4629      	mov	r1, r5
 801e74e:	f7e1 ff2b 	bl	80005a8 <__aeabi_dmul>
 801e752:	a342      	add	r3, pc, #264	@ (adr r3, 801e85c <__kernel_sin+0x14c>)
 801e754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e758:	e9cd 0100 	strd	r0, r1, [sp]
 801e75c:	4650      	mov	r0, sl
 801e75e:	4659      	mov	r1, fp
 801e760:	f7e1 ff22 	bl	80005a8 <__aeabi_dmul>
 801e764:	a33f      	add	r3, pc, #252	@ (adr r3, 801e864 <__kernel_sin+0x154>)
 801e766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e76a:	f7e1 fd65 	bl	8000238 <__aeabi_dsub>
 801e76e:	4652      	mov	r2, sl
 801e770:	465b      	mov	r3, fp
 801e772:	f7e1 ff19 	bl	80005a8 <__aeabi_dmul>
 801e776:	a33d      	add	r3, pc, #244	@ (adr r3, 801e86c <__kernel_sin+0x15c>)
 801e778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e77c:	f7e1 fd5e 	bl	800023c <__adddf3>
 801e780:	4652      	mov	r2, sl
 801e782:	465b      	mov	r3, fp
 801e784:	f7e1 ff10 	bl	80005a8 <__aeabi_dmul>
 801e788:	a33a      	add	r3, pc, #232	@ (adr r3, 801e874 <__kernel_sin+0x164>)
 801e78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e78e:	f7e1 fd53 	bl	8000238 <__aeabi_dsub>
 801e792:	4652      	mov	r2, sl
 801e794:	465b      	mov	r3, fp
 801e796:	f7e1 ff07 	bl	80005a8 <__aeabi_dmul>
 801e79a:	a338      	add	r3, pc, #224	@ (adr r3, 801e87c <__kernel_sin+0x16c>)
 801e79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7a0:	f7e1 fd4c 	bl	800023c <__adddf3>
 801e7a4:	4606      	mov	r6, r0
 801e7a6:	460f      	mov	r7, r1
 801e7a8:	f1b8 0f00 	cmp.w	r8, #0
 801e7ac:	d11b      	bne.n	801e7e6 <__kernel_sin+0xd6>
 801e7ae:	4602      	mov	r2, r0
 801e7b0:	460b      	mov	r3, r1
 801e7b2:	4650      	mov	r0, sl
 801e7b4:	4659      	mov	r1, fp
 801e7b6:	f7e1 fef7 	bl	80005a8 <__aeabi_dmul>
 801e7ba:	a325      	add	r3, pc, #148	@ (adr r3, 801e850 <__kernel_sin+0x140>)
 801e7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e7c0:	f7e1 fd3a 	bl	8000238 <__aeabi_dsub>
 801e7c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e7c8:	f7e1 feee 	bl	80005a8 <__aeabi_dmul>
 801e7cc:	4602      	mov	r2, r0
 801e7ce:	460b      	mov	r3, r1
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	4629      	mov	r1, r5
 801e7d4:	f7e1 fd32 	bl	800023c <__adddf3>
 801e7d8:	4604      	mov	r4, r0
 801e7da:	460d      	mov	r5, r1
 801e7dc:	ec45 4b10 	vmov	d0, r4, r5
 801e7e0:	b005      	add	sp, #20
 801e7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e7e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e7ea:	4b1b      	ldr	r3, [pc, #108]	@ (801e858 <__kernel_sin+0x148>)
 801e7ec:	2200      	movs	r2, #0
 801e7ee:	f7e1 fedb 	bl	80005a8 <__aeabi_dmul>
 801e7f2:	4632      	mov	r2, r6
 801e7f4:	4680      	mov	r8, r0
 801e7f6:	4689      	mov	r9, r1
 801e7f8:	463b      	mov	r3, r7
 801e7fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e7fe:	f7e1 fed3 	bl	80005a8 <__aeabi_dmul>
 801e802:	4602      	mov	r2, r0
 801e804:	460b      	mov	r3, r1
 801e806:	4640      	mov	r0, r8
 801e808:	4649      	mov	r1, r9
 801e80a:	f7e1 fd15 	bl	8000238 <__aeabi_dsub>
 801e80e:	4652      	mov	r2, sl
 801e810:	465b      	mov	r3, fp
 801e812:	f7e1 fec9 	bl	80005a8 <__aeabi_dmul>
 801e816:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e81a:	f7e1 fd0d 	bl	8000238 <__aeabi_dsub>
 801e81e:	a30c      	add	r3, pc, #48	@ (adr r3, 801e850 <__kernel_sin+0x140>)
 801e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e824:	4606      	mov	r6, r0
 801e826:	460f      	mov	r7, r1
 801e828:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e82c:	f7e1 febc 	bl	80005a8 <__aeabi_dmul>
 801e830:	4602      	mov	r2, r0
 801e832:	460b      	mov	r3, r1
 801e834:	4630      	mov	r0, r6
 801e836:	4639      	mov	r1, r7
 801e838:	f7e1 fd00 	bl	800023c <__adddf3>
 801e83c:	4602      	mov	r2, r0
 801e83e:	460b      	mov	r3, r1
 801e840:	4620      	mov	r0, r4
 801e842:	4629      	mov	r1, r5
 801e844:	f7e1 fcf8 	bl	8000238 <__aeabi_dsub>
 801e848:	e7c6      	b.n	801e7d8 <__kernel_sin+0xc8>
 801e84a:	bf00      	nop
 801e84c:	f3af 8000 	nop.w
 801e850:	55555549 	.word	0x55555549
 801e854:	3fc55555 	.word	0x3fc55555
 801e858:	3fe00000 	.word	0x3fe00000
 801e85c:	5acfd57c 	.word	0x5acfd57c
 801e860:	3de5d93a 	.word	0x3de5d93a
 801e864:	8a2b9ceb 	.word	0x8a2b9ceb
 801e868:	3e5ae5e6 	.word	0x3e5ae5e6
 801e86c:	57b1fe7d 	.word	0x57b1fe7d
 801e870:	3ec71de3 	.word	0x3ec71de3
 801e874:	19c161d5 	.word	0x19c161d5
 801e878:	3f2a01a0 	.word	0x3f2a01a0
 801e87c:	1110f8a6 	.word	0x1110f8a6
 801e880:	3f811111 	.word	0x3f811111
 801e884:	00000000 	.word	0x00000000

0801e888 <__ieee754_rem_pio2>:
 801e888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e88c:	ec57 6b10 	vmov	r6, r7, d0
 801e890:	4bc5      	ldr	r3, [pc, #788]	@ (801eba8 <__ieee754_rem_pio2+0x320>)
 801e892:	b08d      	sub	sp, #52	@ 0x34
 801e894:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801e898:	4598      	cmp	r8, r3
 801e89a:	4604      	mov	r4, r0
 801e89c:	9704      	str	r7, [sp, #16]
 801e89e:	d807      	bhi.n	801e8b0 <__ieee754_rem_pio2+0x28>
 801e8a0:	2200      	movs	r2, #0
 801e8a2:	2300      	movs	r3, #0
 801e8a4:	ed80 0b00 	vstr	d0, [r0]
 801e8a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e8ac:	2500      	movs	r5, #0
 801e8ae:	e028      	b.n	801e902 <__ieee754_rem_pio2+0x7a>
 801e8b0:	4bbe      	ldr	r3, [pc, #760]	@ (801ebac <__ieee754_rem_pio2+0x324>)
 801e8b2:	4598      	cmp	r8, r3
 801e8b4:	d878      	bhi.n	801e9a8 <__ieee754_rem_pio2+0x120>
 801e8b6:	9b04      	ldr	r3, [sp, #16]
 801e8b8:	4dbd      	ldr	r5, [pc, #756]	@ (801ebb0 <__ieee754_rem_pio2+0x328>)
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	4630      	mov	r0, r6
 801e8be:	a3ac      	add	r3, pc, #688	@ (adr r3, 801eb70 <__ieee754_rem_pio2+0x2e8>)
 801e8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8c4:	4639      	mov	r1, r7
 801e8c6:	dd38      	ble.n	801e93a <__ieee754_rem_pio2+0xb2>
 801e8c8:	f7e1 fcb6 	bl	8000238 <__aeabi_dsub>
 801e8cc:	45a8      	cmp	r8, r5
 801e8ce:	4606      	mov	r6, r0
 801e8d0:	460f      	mov	r7, r1
 801e8d2:	d01a      	beq.n	801e90a <__ieee754_rem_pio2+0x82>
 801e8d4:	a3a8      	add	r3, pc, #672	@ (adr r3, 801eb78 <__ieee754_rem_pio2+0x2f0>)
 801e8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8da:	f7e1 fcad 	bl	8000238 <__aeabi_dsub>
 801e8de:	4602      	mov	r2, r0
 801e8e0:	460b      	mov	r3, r1
 801e8e2:	4680      	mov	r8, r0
 801e8e4:	4689      	mov	r9, r1
 801e8e6:	4630      	mov	r0, r6
 801e8e8:	4639      	mov	r1, r7
 801e8ea:	f7e1 fca5 	bl	8000238 <__aeabi_dsub>
 801e8ee:	a3a2      	add	r3, pc, #648	@ (adr r3, 801eb78 <__ieee754_rem_pio2+0x2f0>)
 801e8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8f4:	f7e1 fca0 	bl	8000238 <__aeabi_dsub>
 801e8f8:	e9c4 8900 	strd	r8, r9, [r4]
 801e8fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e900:	2501      	movs	r5, #1
 801e902:	4628      	mov	r0, r5
 801e904:	b00d      	add	sp, #52	@ 0x34
 801e906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e90a:	a39d      	add	r3, pc, #628	@ (adr r3, 801eb80 <__ieee754_rem_pio2+0x2f8>)
 801e90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e910:	f7e1 fc92 	bl	8000238 <__aeabi_dsub>
 801e914:	a39c      	add	r3, pc, #624	@ (adr r3, 801eb88 <__ieee754_rem_pio2+0x300>)
 801e916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e91a:	4606      	mov	r6, r0
 801e91c:	460f      	mov	r7, r1
 801e91e:	f7e1 fc8b 	bl	8000238 <__aeabi_dsub>
 801e922:	4602      	mov	r2, r0
 801e924:	460b      	mov	r3, r1
 801e926:	4680      	mov	r8, r0
 801e928:	4689      	mov	r9, r1
 801e92a:	4630      	mov	r0, r6
 801e92c:	4639      	mov	r1, r7
 801e92e:	f7e1 fc83 	bl	8000238 <__aeabi_dsub>
 801e932:	a395      	add	r3, pc, #596	@ (adr r3, 801eb88 <__ieee754_rem_pio2+0x300>)
 801e934:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e938:	e7dc      	b.n	801e8f4 <__ieee754_rem_pio2+0x6c>
 801e93a:	f7e1 fc7f 	bl	800023c <__adddf3>
 801e93e:	45a8      	cmp	r8, r5
 801e940:	4606      	mov	r6, r0
 801e942:	460f      	mov	r7, r1
 801e944:	d018      	beq.n	801e978 <__ieee754_rem_pio2+0xf0>
 801e946:	a38c      	add	r3, pc, #560	@ (adr r3, 801eb78 <__ieee754_rem_pio2+0x2f0>)
 801e948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e94c:	f7e1 fc76 	bl	800023c <__adddf3>
 801e950:	4602      	mov	r2, r0
 801e952:	460b      	mov	r3, r1
 801e954:	4680      	mov	r8, r0
 801e956:	4689      	mov	r9, r1
 801e958:	4630      	mov	r0, r6
 801e95a:	4639      	mov	r1, r7
 801e95c:	f7e1 fc6c 	bl	8000238 <__aeabi_dsub>
 801e960:	a385      	add	r3, pc, #532	@ (adr r3, 801eb78 <__ieee754_rem_pio2+0x2f0>)
 801e962:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e966:	f7e1 fc69 	bl	800023c <__adddf3>
 801e96a:	f04f 35ff 	mov.w	r5, #4294967295
 801e96e:	e9c4 8900 	strd	r8, r9, [r4]
 801e972:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801e976:	e7c4      	b.n	801e902 <__ieee754_rem_pio2+0x7a>
 801e978:	a381      	add	r3, pc, #516	@ (adr r3, 801eb80 <__ieee754_rem_pio2+0x2f8>)
 801e97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e97e:	f7e1 fc5d 	bl	800023c <__adddf3>
 801e982:	a381      	add	r3, pc, #516	@ (adr r3, 801eb88 <__ieee754_rem_pio2+0x300>)
 801e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e988:	4606      	mov	r6, r0
 801e98a:	460f      	mov	r7, r1
 801e98c:	f7e1 fc56 	bl	800023c <__adddf3>
 801e990:	4602      	mov	r2, r0
 801e992:	460b      	mov	r3, r1
 801e994:	4680      	mov	r8, r0
 801e996:	4689      	mov	r9, r1
 801e998:	4630      	mov	r0, r6
 801e99a:	4639      	mov	r1, r7
 801e99c:	f7e1 fc4c 	bl	8000238 <__aeabi_dsub>
 801e9a0:	a379      	add	r3, pc, #484	@ (adr r3, 801eb88 <__ieee754_rem_pio2+0x300>)
 801e9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9a6:	e7de      	b.n	801e966 <__ieee754_rem_pio2+0xde>
 801e9a8:	4b82      	ldr	r3, [pc, #520]	@ (801ebb4 <__ieee754_rem_pio2+0x32c>)
 801e9aa:	4598      	cmp	r8, r3
 801e9ac:	f200 80d1 	bhi.w	801eb52 <__ieee754_rem_pio2+0x2ca>
 801e9b0:	f000 f99a 	bl	801ece8 <fabs>
 801e9b4:	ec57 6b10 	vmov	r6, r7, d0
 801e9b8:	a375      	add	r3, pc, #468	@ (adr r3, 801eb90 <__ieee754_rem_pio2+0x308>)
 801e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9be:	4630      	mov	r0, r6
 801e9c0:	4639      	mov	r1, r7
 801e9c2:	f7e1 fdf1 	bl	80005a8 <__aeabi_dmul>
 801e9c6:	4b7c      	ldr	r3, [pc, #496]	@ (801ebb8 <__ieee754_rem_pio2+0x330>)
 801e9c8:	2200      	movs	r2, #0
 801e9ca:	f7e1 fc37 	bl	800023c <__adddf3>
 801e9ce:	f7e2 f89b 	bl	8000b08 <__aeabi_d2iz>
 801e9d2:	4605      	mov	r5, r0
 801e9d4:	f7e1 fd7e 	bl	80004d4 <__aeabi_i2d>
 801e9d8:	4602      	mov	r2, r0
 801e9da:	460b      	mov	r3, r1
 801e9dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e9e0:	a363      	add	r3, pc, #396	@ (adr r3, 801eb70 <__ieee754_rem_pio2+0x2e8>)
 801e9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9e6:	f7e1 fddf 	bl	80005a8 <__aeabi_dmul>
 801e9ea:	4602      	mov	r2, r0
 801e9ec:	460b      	mov	r3, r1
 801e9ee:	4630      	mov	r0, r6
 801e9f0:	4639      	mov	r1, r7
 801e9f2:	f7e1 fc21 	bl	8000238 <__aeabi_dsub>
 801e9f6:	a360      	add	r3, pc, #384	@ (adr r3, 801eb78 <__ieee754_rem_pio2+0x2f0>)
 801e9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9fc:	4682      	mov	sl, r0
 801e9fe:	468b      	mov	fp, r1
 801ea00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea04:	f7e1 fdd0 	bl	80005a8 <__aeabi_dmul>
 801ea08:	2d1f      	cmp	r5, #31
 801ea0a:	4606      	mov	r6, r0
 801ea0c:	460f      	mov	r7, r1
 801ea0e:	dc0c      	bgt.n	801ea2a <__ieee754_rem_pio2+0x1a2>
 801ea10:	4b6a      	ldr	r3, [pc, #424]	@ (801ebbc <__ieee754_rem_pio2+0x334>)
 801ea12:	1e6a      	subs	r2, r5, #1
 801ea14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ea18:	4543      	cmp	r3, r8
 801ea1a:	d006      	beq.n	801ea2a <__ieee754_rem_pio2+0x1a2>
 801ea1c:	4632      	mov	r2, r6
 801ea1e:	463b      	mov	r3, r7
 801ea20:	4650      	mov	r0, sl
 801ea22:	4659      	mov	r1, fp
 801ea24:	f7e1 fc08 	bl	8000238 <__aeabi_dsub>
 801ea28:	e00e      	b.n	801ea48 <__ieee754_rem_pio2+0x1c0>
 801ea2a:	463b      	mov	r3, r7
 801ea2c:	4632      	mov	r2, r6
 801ea2e:	4650      	mov	r0, sl
 801ea30:	4659      	mov	r1, fp
 801ea32:	f7e1 fc01 	bl	8000238 <__aeabi_dsub>
 801ea36:	ea4f 5328 	mov.w	r3, r8, asr #20
 801ea3a:	9305      	str	r3, [sp, #20]
 801ea3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801ea40:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801ea44:	2b10      	cmp	r3, #16
 801ea46:	dc02      	bgt.n	801ea4e <__ieee754_rem_pio2+0x1c6>
 801ea48:	e9c4 0100 	strd	r0, r1, [r4]
 801ea4c:	e039      	b.n	801eac2 <__ieee754_rem_pio2+0x23a>
 801ea4e:	a34c      	add	r3, pc, #304	@ (adr r3, 801eb80 <__ieee754_rem_pio2+0x2f8>)
 801ea50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea58:	f7e1 fda6 	bl	80005a8 <__aeabi_dmul>
 801ea5c:	4606      	mov	r6, r0
 801ea5e:	460f      	mov	r7, r1
 801ea60:	4602      	mov	r2, r0
 801ea62:	460b      	mov	r3, r1
 801ea64:	4650      	mov	r0, sl
 801ea66:	4659      	mov	r1, fp
 801ea68:	f7e1 fbe6 	bl	8000238 <__aeabi_dsub>
 801ea6c:	4602      	mov	r2, r0
 801ea6e:	460b      	mov	r3, r1
 801ea70:	4680      	mov	r8, r0
 801ea72:	4689      	mov	r9, r1
 801ea74:	4650      	mov	r0, sl
 801ea76:	4659      	mov	r1, fp
 801ea78:	f7e1 fbde 	bl	8000238 <__aeabi_dsub>
 801ea7c:	4632      	mov	r2, r6
 801ea7e:	463b      	mov	r3, r7
 801ea80:	f7e1 fbda 	bl	8000238 <__aeabi_dsub>
 801ea84:	a340      	add	r3, pc, #256	@ (adr r3, 801eb88 <__ieee754_rem_pio2+0x300>)
 801ea86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea8a:	4606      	mov	r6, r0
 801ea8c:	460f      	mov	r7, r1
 801ea8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ea92:	f7e1 fd89 	bl	80005a8 <__aeabi_dmul>
 801ea96:	4632      	mov	r2, r6
 801ea98:	463b      	mov	r3, r7
 801ea9a:	f7e1 fbcd 	bl	8000238 <__aeabi_dsub>
 801ea9e:	4602      	mov	r2, r0
 801eaa0:	460b      	mov	r3, r1
 801eaa2:	4606      	mov	r6, r0
 801eaa4:	460f      	mov	r7, r1
 801eaa6:	4640      	mov	r0, r8
 801eaa8:	4649      	mov	r1, r9
 801eaaa:	f7e1 fbc5 	bl	8000238 <__aeabi_dsub>
 801eaae:	9a05      	ldr	r2, [sp, #20]
 801eab0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801eab4:	1ad3      	subs	r3, r2, r3
 801eab6:	2b31      	cmp	r3, #49	@ 0x31
 801eab8:	dc20      	bgt.n	801eafc <__ieee754_rem_pio2+0x274>
 801eaba:	e9c4 0100 	strd	r0, r1, [r4]
 801eabe:	46c2      	mov	sl, r8
 801eac0:	46cb      	mov	fp, r9
 801eac2:	e9d4 8900 	ldrd	r8, r9, [r4]
 801eac6:	4650      	mov	r0, sl
 801eac8:	4642      	mov	r2, r8
 801eaca:	464b      	mov	r3, r9
 801eacc:	4659      	mov	r1, fp
 801eace:	f7e1 fbb3 	bl	8000238 <__aeabi_dsub>
 801ead2:	463b      	mov	r3, r7
 801ead4:	4632      	mov	r2, r6
 801ead6:	f7e1 fbaf 	bl	8000238 <__aeabi_dsub>
 801eada:	9b04      	ldr	r3, [sp, #16]
 801eadc:	2b00      	cmp	r3, #0
 801eade:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801eae2:	f6bf af0e 	bge.w	801e902 <__ieee754_rem_pio2+0x7a>
 801eae6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801eaea:	6063      	str	r3, [r4, #4]
 801eaec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801eaf0:	f8c4 8000 	str.w	r8, [r4]
 801eaf4:	60a0      	str	r0, [r4, #8]
 801eaf6:	60e3      	str	r3, [r4, #12]
 801eaf8:	426d      	negs	r5, r5
 801eafa:	e702      	b.n	801e902 <__ieee754_rem_pio2+0x7a>
 801eafc:	a326      	add	r3, pc, #152	@ (adr r3, 801eb98 <__ieee754_rem_pio2+0x310>)
 801eafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb06:	f7e1 fd4f 	bl	80005a8 <__aeabi_dmul>
 801eb0a:	4606      	mov	r6, r0
 801eb0c:	460f      	mov	r7, r1
 801eb0e:	4602      	mov	r2, r0
 801eb10:	460b      	mov	r3, r1
 801eb12:	4640      	mov	r0, r8
 801eb14:	4649      	mov	r1, r9
 801eb16:	f7e1 fb8f 	bl	8000238 <__aeabi_dsub>
 801eb1a:	4602      	mov	r2, r0
 801eb1c:	460b      	mov	r3, r1
 801eb1e:	4682      	mov	sl, r0
 801eb20:	468b      	mov	fp, r1
 801eb22:	4640      	mov	r0, r8
 801eb24:	4649      	mov	r1, r9
 801eb26:	f7e1 fb87 	bl	8000238 <__aeabi_dsub>
 801eb2a:	4632      	mov	r2, r6
 801eb2c:	463b      	mov	r3, r7
 801eb2e:	f7e1 fb83 	bl	8000238 <__aeabi_dsub>
 801eb32:	a31b      	add	r3, pc, #108	@ (adr r3, 801eba0 <__ieee754_rem_pio2+0x318>)
 801eb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb38:	4606      	mov	r6, r0
 801eb3a:	460f      	mov	r7, r1
 801eb3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eb40:	f7e1 fd32 	bl	80005a8 <__aeabi_dmul>
 801eb44:	4632      	mov	r2, r6
 801eb46:	463b      	mov	r3, r7
 801eb48:	f7e1 fb76 	bl	8000238 <__aeabi_dsub>
 801eb4c:	4606      	mov	r6, r0
 801eb4e:	460f      	mov	r7, r1
 801eb50:	e764      	b.n	801ea1c <__ieee754_rem_pio2+0x194>
 801eb52:	4b1b      	ldr	r3, [pc, #108]	@ (801ebc0 <__ieee754_rem_pio2+0x338>)
 801eb54:	4598      	cmp	r8, r3
 801eb56:	d935      	bls.n	801ebc4 <__ieee754_rem_pio2+0x33c>
 801eb58:	4632      	mov	r2, r6
 801eb5a:	463b      	mov	r3, r7
 801eb5c:	4630      	mov	r0, r6
 801eb5e:	4639      	mov	r1, r7
 801eb60:	f7e1 fb6a 	bl	8000238 <__aeabi_dsub>
 801eb64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801eb68:	e9c4 0100 	strd	r0, r1, [r4]
 801eb6c:	e69e      	b.n	801e8ac <__ieee754_rem_pio2+0x24>
 801eb6e:	bf00      	nop
 801eb70:	54400000 	.word	0x54400000
 801eb74:	3ff921fb 	.word	0x3ff921fb
 801eb78:	1a626331 	.word	0x1a626331
 801eb7c:	3dd0b461 	.word	0x3dd0b461
 801eb80:	1a600000 	.word	0x1a600000
 801eb84:	3dd0b461 	.word	0x3dd0b461
 801eb88:	2e037073 	.word	0x2e037073
 801eb8c:	3ba3198a 	.word	0x3ba3198a
 801eb90:	6dc9c883 	.word	0x6dc9c883
 801eb94:	3fe45f30 	.word	0x3fe45f30
 801eb98:	2e000000 	.word	0x2e000000
 801eb9c:	3ba3198a 	.word	0x3ba3198a
 801eba0:	252049c1 	.word	0x252049c1
 801eba4:	397b839a 	.word	0x397b839a
 801eba8:	3fe921fb 	.word	0x3fe921fb
 801ebac:	4002d97b 	.word	0x4002d97b
 801ebb0:	3ff921fb 	.word	0x3ff921fb
 801ebb4:	413921fb 	.word	0x413921fb
 801ebb8:	3fe00000 	.word	0x3fe00000
 801ebbc:	08022374 	.word	0x08022374
 801ebc0:	7fefffff 	.word	0x7fefffff
 801ebc4:	ea4f 5528 	mov.w	r5, r8, asr #20
 801ebc8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801ebcc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801ebd0:	4630      	mov	r0, r6
 801ebd2:	460f      	mov	r7, r1
 801ebd4:	f7e1 ff98 	bl	8000b08 <__aeabi_d2iz>
 801ebd8:	f7e1 fc7c 	bl	80004d4 <__aeabi_i2d>
 801ebdc:	4602      	mov	r2, r0
 801ebde:	460b      	mov	r3, r1
 801ebe0:	4630      	mov	r0, r6
 801ebe2:	4639      	mov	r1, r7
 801ebe4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ebe8:	f7e1 fb26 	bl	8000238 <__aeabi_dsub>
 801ebec:	4b22      	ldr	r3, [pc, #136]	@ (801ec78 <__ieee754_rem_pio2+0x3f0>)
 801ebee:	2200      	movs	r2, #0
 801ebf0:	f7e1 fcda 	bl	80005a8 <__aeabi_dmul>
 801ebf4:	460f      	mov	r7, r1
 801ebf6:	4606      	mov	r6, r0
 801ebf8:	f7e1 ff86 	bl	8000b08 <__aeabi_d2iz>
 801ebfc:	f7e1 fc6a 	bl	80004d4 <__aeabi_i2d>
 801ec00:	4602      	mov	r2, r0
 801ec02:	460b      	mov	r3, r1
 801ec04:	4630      	mov	r0, r6
 801ec06:	4639      	mov	r1, r7
 801ec08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801ec0c:	f7e1 fb14 	bl	8000238 <__aeabi_dsub>
 801ec10:	4b19      	ldr	r3, [pc, #100]	@ (801ec78 <__ieee754_rem_pio2+0x3f0>)
 801ec12:	2200      	movs	r2, #0
 801ec14:	f7e1 fcc8 	bl	80005a8 <__aeabi_dmul>
 801ec18:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801ec1c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801ec20:	f04f 0803 	mov.w	r8, #3
 801ec24:	2600      	movs	r6, #0
 801ec26:	2700      	movs	r7, #0
 801ec28:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801ec2c:	4632      	mov	r2, r6
 801ec2e:	463b      	mov	r3, r7
 801ec30:	46c2      	mov	sl, r8
 801ec32:	f108 38ff 	add.w	r8, r8, #4294967295
 801ec36:	f7e1 ff1f 	bl	8000a78 <__aeabi_dcmpeq>
 801ec3a:	2800      	cmp	r0, #0
 801ec3c:	d1f4      	bne.n	801ec28 <__ieee754_rem_pio2+0x3a0>
 801ec3e:	4b0f      	ldr	r3, [pc, #60]	@ (801ec7c <__ieee754_rem_pio2+0x3f4>)
 801ec40:	9301      	str	r3, [sp, #4]
 801ec42:	2302      	movs	r3, #2
 801ec44:	9300      	str	r3, [sp, #0]
 801ec46:	462a      	mov	r2, r5
 801ec48:	4653      	mov	r3, sl
 801ec4a:	4621      	mov	r1, r4
 801ec4c:	a806      	add	r0, sp, #24
 801ec4e:	f000 f947 	bl	801eee0 <__kernel_rem_pio2>
 801ec52:	9b04      	ldr	r3, [sp, #16]
 801ec54:	2b00      	cmp	r3, #0
 801ec56:	4605      	mov	r5, r0
 801ec58:	f6bf ae53 	bge.w	801e902 <__ieee754_rem_pio2+0x7a>
 801ec5c:	e9d4 2100 	ldrd	r2, r1, [r4]
 801ec60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ec64:	e9c4 2300 	strd	r2, r3, [r4]
 801ec68:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801ec6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801ec70:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801ec74:	e740      	b.n	801eaf8 <__ieee754_rem_pio2+0x270>
 801ec76:	bf00      	nop
 801ec78:	41700000 	.word	0x41700000
 801ec7c:	080223f4 	.word	0x080223f4

0801ec80 <acos>:
 801ec80:	b538      	push	{r3, r4, r5, lr}
 801ec82:	ed2d 8b02 	vpush	{d8}
 801ec86:	ec55 4b10 	vmov	r4, r5, d0
 801ec8a:	f000 fc81 	bl	801f590 <__ieee754_acos>
 801ec8e:	4622      	mov	r2, r4
 801ec90:	462b      	mov	r3, r5
 801ec92:	4620      	mov	r0, r4
 801ec94:	4629      	mov	r1, r5
 801ec96:	eeb0 8a40 	vmov.f32	s16, s0
 801ec9a:	eef0 8a60 	vmov.f32	s17, s1
 801ec9e:	f7e1 ff1d 	bl	8000adc <__aeabi_dcmpun>
 801eca2:	b9a8      	cbnz	r0, 801ecd0 <acos+0x50>
 801eca4:	ec45 4b10 	vmov	d0, r4, r5
 801eca8:	f000 f81e 	bl	801ece8 <fabs>
 801ecac:	4b0c      	ldr	r3, [pc, #48]	@ (801ece0 <acos+0x60>)
 801ecae:	ec51 0b10 	vmov	r0, r1, d0
 801ecb2:	2200      	movs	r2, #0
 801ecb4:	f7e1 ff08 	bl	8000ac8 <__aeabi_dcmpgt>
 801ecb8:	b150      	cbz	r0, 801ecd0 <acos+0x50>
 801ecba:	f7fc fe71 	bl	801b9a0 <__errno>
 801ecbe:	ecbd 8b02 	vpop	{d8}
 801ecc2:	2321      	movs	r3, #33	@ 0x21
 801ecc4:	6003      	str	r3, [r0, #0]
 801ecc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ecca:	4806      	ldr	r0, [pc, #24]	@ (801ece4 <acos+0x64>)
 801eccc:	f7fc beac 	b.w	801ba28 <nan>
 801ecd0:	eeb0 0a48 	vmov.f32	s0, s16
 801ecd4:	eef0 0a68 	vmov.f32	s1, s17
 801ecd8:	ecbd 8b02 	vpop	{d8}
 801ecdc:	bd38      	pop	{r3, r4, r5, pc}
 801ecde:	bf00      	nop
 801ece0:	3ff00000 	.word	0x3ff00000
 801ece4:	0802212e 	.word	0x0802212e

0801ece8 <fabs>:
 801ece8:	ec51 0b10 	vmov	r0, r1, d0
 801ecec:	4602      	mov	r2, r0
 801ecee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ecf2:	ec43 2b10 	vmov	d0, r2, r3
 801ecf6:	4770      	bx	lr

0801ecf8 <__ieee754_expf>:
 801ecf8:	ee10 2a10 	vmov	r2, s0
 801ecfc:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801ed00:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ed04:	d902      	bls.n	801ed0c <__ieee754_expf+0x14>
 801ed06:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ed0a:	4770      	bx	lr
 801ed0c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801ed10:	d106      	bne.n	801ed20 <__ieee754_expf+0x28>
 801ed12:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801ee4c <__ieee754_expf+0x154>
 801ed16:	2900      	cmp	r1, #0
 801ed18:	bf18      	it	ne
 801ed1a:	eeb0 0a67 	vmovne.f32	s0, s15
 801ed1e:	4770      	bx	lr
 801ed20:	484b      	ldr	r0, [pc, #300]	@ (801ee50 <__ieee754_expf+0x158>)
 801ed22:	4282      	cmp	r2, r0
 801ed24:	dd02      	ble.n	801ed2c <__ieee754_expf+0x34>
 801ed26:	2000      	movs	r0, #0
 801ed28:	f000 b8d4 	b.w	801eed4 <__math_oflowf>
 801ed2c:	2a00      	cmp	r2, #0
 801ed2e:	da05      	bge.n	801ed3c <__ieee754_expf+0x44>
 801ed30:	4a48      	ldr	r2, [pc, #288]	@ (801ee54 <__ieee754_expf+0x15c>)
 801ed32:	4293      	cmp	r3, r2
 801ed34:	d902      	bls.n	801ed3c <__ieee754_expf+0x44>
 801ed36:	2000      	movs	r0, #0
 801ed38:	f000 b8c6 	b.w	801eec8 <__math_uflowf>
 801ed3c:	4a46      	ldr	r2, [pc, #280]	@ (801ee58 <__ieee754_expf+0x160>)
 801ed3e:	4293      	cmp	r3, r2
 801ed40:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801ed44:	d952      	bls.n	801edec <__ieee754_expf+0xf4>
 801ed46:	4a45      	ldr	r2, [pc, #276]	@ (801ee5c <__ieee754_expf+0x164>)
 801ed48:	4293      	cmp	r3, r2
 801ed4a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801ed4e:	d834      	bhi.n	801edba <__ieee754_expf+0xc2>
 801ed50:	4b43      	ldr	r3, [pc, #268]	@ (801ee60 <__ieee754_expf+0x168>)
 801ed52:	4413      	add	r3, r2
 801ed54:	ed93 7a00 	vldr	s14, [r3]
 801ed58:	4b42      	ldr	r3, [pc, #264]	@ (801ee64 <__ieee754_expf+0x16c>)
 801ed5a:	4413      	add	r3, r2
 801ed5c:	ee30 7a47 	vsub.f32	s14, s0, s14
 801ed60:	f1c1 0201 	rsb	r2, r1, #1
 801ed64:	edd3 7a00 	vldr	s15, [r3]
 801ed68:	1a52      	subs	r2, r2, r1
 801ed6a:	ee37 0a67 	vsub.f32	s0, s14, s15
 801ed6e:	ee20 6a00 	vmul.f32	s12, s0, s0
 801ed72:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801ee68 <__ieee754_expf+0x170>
 801ed76:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ee6c <__ieee754_expf+0x174>
 801ed7a:	eee6 6a05 	vfma.f32	s13, s12, s10
 801ed7e:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801ee70 <__ieee754_expf+0x178>
 801ed82:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ed86:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801ee74 <__ieee754_expf+0x17c>
 801ed8a:	eee5 6a06 	vfma.f32	s13, s10, s12
 801ed8e:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801ee78 <__ieee754_expf+0x180>
 801ed92:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ed96:	eef0 6a40 	vmov.f32	s13, s0
 801ed9a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801ed9e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801eda2:	ee20 5a26 	vmul.f32	s10, s0, s13
 801eda6:	bb92      	cbnz	r2, 801ee0e <__ieee754_expf+0x116>
 801eda8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801edac:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801edb0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801edb4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801edb8:	4770      	bx	lr
 801edba:	4b30      	ldr	r3, [pc, #192]	@ (801ee7c <__ieee754_expf+0x184>)
 801edbc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801ee80 <__ieee754_expf+0x188>
 801edc0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801ee84 <__ieee754_expf+0x18c>
 801edc4:	4413      	add	r3, r2
 801edc6:	edd3 7a00 	vldr	s15, [r3]
 801edca:	eee0 7a07 	vfma.f32	s15, s0, s14
 801edce:	eeb0 7a40 	vmov.f32	s14, s0
 801edd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801edd6:	ee17 2a90 	vmov	r2, s15
 801edda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801edde:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ede2:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801ee88 <__ieee754_expf+0x190>
 801ede6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801edea:	e7be      	b.n	801ed6a <__ieee754_expf+0x72>
 801edec:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801edf0:	d20b      	bcs.n	801ee0a <__ieee754_expf+0x112>
 801edf2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801ee8c <__ieee754_expf+0x194>
 801edf6:	ee70 6a26 	vadd.f32	s13, s0, s13
 801edfa:	eef4 6ae5 	vcmpe.f32	s13, s11
 801edfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee02:	dd02      	ble.n	801ee0a <__ieee754_expf+0x112>
 801ee04:	ee30 0a25 	vadd.f32	s0, s0, s11
 801ee08:	4770      	bx	lr
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	e7af      	b.n	801ed6e <__ieee754_expf+0x76>
 801ee0e:	ee36 6a66 	vsub.f32	s12, s12, s13
 801ee12:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801ee16:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801ee1a:	bfb8      	it	lt
 801ee1c:	3264      	addlt	r2, #100	@ 0x64
 801ee1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ee22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ee26:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ee2a:	ee17 3a90 	vmov	r3, s15
 801ee2e:	bfab      	itete	ge
 801ee30:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801ee34:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801ee38:	ee00 3a10 	vmovge	s0, r3
 801ee3c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801ee90 <__ieee754_expf+0x198>
 801ee40:	bfbc      	itt	lt
 801ee42:	ee00 3a10 	vmovlt	s0, r3
 801ee46:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801ee4a:	4770      	bx	lr
 801ee4c:	00000000 	.word	0x00000000
 801ee50:	42b17217 	.word	0x42b17217
 801ee54:	42cff1b5 	.word	0x42cff1b5
 801ee58:	3eb17218 	.word	0x3eb17218
 801ee5c:	3f851591 	.word	0x3f851591
 801ee60:	08022504 	.word	0x08022504
 801ee64:	080224fc 	.word	0x080224fc
 801ee68:	3331bb4c 	.word	0x3331bb4c
 801ee6c:	b5ddea0e 	.word	0xb5ddea0e
 801ee70:	388ab355 	.word	0x388ab355
 801ee74:	bb360b61 	.word	0xbb360b61
 801ee78:	3e2aaaab 	.word	0x3e2aaaab
 801ee7c:	0802250c 	.word	0x0802250c
 801ee80:	3fb8aa3b 	.word	0x3fb8aa3b
 801ee84:	3f317180 	.word	0x3f317180
 801ee88:	3717f7d1 	.word	0x3717f7d1
 801ee8c:	7149f2ca 	.word	0x7149f2ca
 801ee90:	0d800000 	.word	0x0d800000

0801ee94 <with_errnof>:
 801ee94:	b510      	push	{r4, lr}
 801ee96:	ed2d 8b02 	vpush	{d8}
 801ee9a:	eeb0 8a40 	vmov.f32	s16, s0
 801ee9e:	4604      	mov	r4, r0
 801eea0:	f7fc fd7e 	bl	801b9a0 <__errno>
 801eea4:	eeb0 0a48 	vmov.f32	s0, s16
 801eea8:	ecbd 8b02 	vpop	{d8}
 801eeac:	6004      	str	r4, [r0, #0]
 801eeae:	bd10      	pop	{r4, pc}

0801eeb0 <xflowf>:
 801eeb0:	b130      	cbz	r0, 801eec0 <xflowf+0x10>
 801eeb2:	eef1 7a40 	vneg.f32	s15, s0
 801eeb6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801eeba:	2022      	movs	r0, #34	@ 0x22
 801eebc:	f7ff bfea 	b.w	801ee94 <with_errnof>
 801eec0:	eef0 7a40 	vmov.f32	s15, s0
 801eec4:	e7f7      	b.n	801eeb6 <xflowf+0x6>
	...

0801eec8 <__math_uflowf>:
 801eec8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801eed0 <__math_uflowf+0x8>
 801eecc:	f7ff bff0 	b.w	801eeb0 <xflowf>
 801eed0:	10000000 	.word	0x10000000

0801eed4 <__math_oflowf>:
 801eed4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801eedc <__math_oflowf+0x8>
 801eed8:	f7ff bfea 	b.w	801eeb0 <xflowf>
 801eedc:	70000000 	.word	0x70000000

0801eee0 <__kernel_rem_pio2>:
 801eee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eee4:	ed2d 8b02 	vpush	{d8}
 801eee8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801eeec:	f112 0f14 	cmn.w	r2, #20
 801eef0:	9306      	str	r3, [sp, #24]
 801eef2:	9104      	str	r1, [sp, #16]
 801eef4:	4bbe      	ldr	r3, [pc, #760]	@ (801f1f0 <__kernel_rem_pio2+0x310>)
 801eef6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801eef8:	9008      	str	r0, [sp, #32]
 801eefa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801eefe:	9300      	str	r3, [sp, #0]
 801ef00:	9b06      	ldr	r3, [sp, #24]
 801ef02:	f103 33ff 	add.w	r3, r3, #4294967295
 801ef06:	bfa8      	it	ge
 801ef08:	1ed4      	subge	r4, r2, #3
 801ef0a:	9305      	str	r3, [sp, #20]
 801ef0c:	bfb2      	itee	lt
 801ef0e:	2400      	movlt	r4, #0
 801ef10:	2318      	movge	r3, #24
 801ef12:	fb94 f4f3 	sdivge	r4, r4, r3
 801ef16:	f06f 0317 	mvn.w	r3, #23
 801ef1a:	fb04 3303 	mla	r3, r4, r3, r3
 801ef1e:	eb03 0b02 	add.w	fp, r3, r2
 801ef22:	9b00      	ldr	r3, [sp, #0]
 801ef24:	9a05      	ldr	r2, [sp, #20]
 801ef26:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801f1e0 <__kernel_rem_pio2+0x300>
 801ef2a:	eb03 0802 	add.w	r8, r3, r2
 801ef2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ef30:	1aa7      	subs	r7, r4, r2
 801ef32:	ae20      	add	r6, sp, #128	@ 0x80
 801ef34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ef38:	2500      	movs	r5, #0
 801ef3a:	4545      	cmp	r5, r8
 801ef3c:	dd13      	ble.n	801ef66 <__kernel_rem_pio2+0x86>
 801ef3e:	9b06      	ldr	r3, [sp, #24]
 801ef40:	aa20      	add	r2, sp, #128	@ 0x80
 801ef42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801ef46:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801ef4a:	f04f 0800 	mov.w	r8, #0
 801ef4e:	9b00      	ldr	r3, [sp, #0]
 801ef50:	4598      	cmp	r8, r3
 801ef52:	dc31      	bgt.n	801efb8 <__kernel_rem_pio2+0xd8>
 801ef54:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801f1e0 <__kernel_rem_pio2+0x300>
 801ef58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ef5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ef60:	462f      	mov	r7, r5
 801ef62:	2600      	movs	r6, #0
 801ef64:	e01b      	b.n	801ef9e <__kernel_rem_pio2+0xbe>
 801ef66:	42ef      	cmn	r7, r5
 801ef68:	d407      	bmi.n	801ef7a <__kernel_rem_pio2+0x9a>
 801ef6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801ef6e:	f7e1 fab1 	bl	80004d4 <__aeabi_i2d>
 801ef72:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ef76:	3501      	adds	r5, #1
 801ef78:	e7df      	b.n	801ef3a <__kernel_rem_pio2+0x5a>
 801ef7a:	ec51 0b18 	vmov	r0, r1, d8
 801ef7e:	e7f8      	b.n	801ef72 <__kernel_rem_pio2+0x92>
 801ef80:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ef84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801ef88:	f7e1 fb0e 	bl	80005a8 <__aeabi_dmul>
 801ef8c:	4602      	mov	r2, r0
 801ef8e:	460b      	mov	r3, r1
 801ef90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ef94:	f7e1 f952 	bl	800023c <__adddf3>
 801ef98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ef9c:	3601      	adds	r6, #1
 801ef9e:	9b05      	ldr	r3, [sp, #20]
 801efa0:	429e      	cmp	r6, r3
 801efa2:	f1a7 0708 	sub.w	r7, r7, #8
 801efa6:	ddeb      	ble.n	801ef80 <__kernel_rem_pio2+0xa0>
 801efa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801efac:	f108 0801 	add.w	r8, r8, #1
 801efb0:	ecaa 7b02 	vstmia	sl!, {d7}
 801efb4:	3508      	adds	r5, #8
 801efb6:	e7ca      	b.n	801ef4e <__kernel_rem_pio2+0x6e>
 801efb8:	9b00      	ldr	r3, [sp, #0]
 801efba:	f8dd 8000 	ldr.w	r8, [sp]
 801efbe:	aa0c      	add	r2, sp, #48	@ 0x30
 801efc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801efc4:	930a      	str	r3, [sp, #40]	@ 0x28
 801efc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801efc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801efcc:	9309      	str	r3, [sp, #36]	@ 0x24
 801efce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801efd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 801efd4:	ab98      	add	r3, sp, #608	@ 0x260
 801efd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801efda:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801efde:	ed8d 7b02 	vstr	d7, [sp, #8]
 801efe2:	ac0c      	add	r4, sp, #48	@ 0x30
 801efe4:	ab70      	add	r3, sp, #448	@ 0x1c0
 801efe6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801efea:	46a1      	mov	r9, r4
 801efec:	46c2      	mov	sl, r8
 801efee:	f1ba 0f00 	cmp.w	sl, #0
 801eff2:	f1a5 0508 	sub.w	r5, r5, #8
 801eff6:	dc77      	bgt.n	801f0e8 <__kernel_rem_pio2+0x208>
 801eff8:	4658      	mov	r0, fp
 801effa:	ed9d 0b02 	vldr	d0, [sp, #8]
 801effe:	f000 fd23 	bl	801fa48 <scalbn>
 801f002:	ec57 6b10 	vmov	r6, r7, d0
 801f006:	2200      	movs	r2, #0
 801f008:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801f00c:	4630      	mov	r0, r6
 801f00e:	4639      	mov	r1, r7
 801f010:	f7e1 faca 	bl	80005a8 <__aeabi_dmul>
 801f014:	ec41 0b10 	vmov	d0, r0, r1
 801f018:	f7ff fa36 	bl	801e488 <floor>
 801f01c:	4b75      	ldr	r3, [pc, #468]	@ (801f1f4 <__kernel_rem_pio2+0x314>)
 801f01e:	ec51 0b10 	vmov	r0, r1, d0
 801f022:	2200      	movs	r2, #0
 801f024:	f7e1 fac0 	bl	80005a8 <__aeabi_dmul>
 801f028:	4602      	mov	r2, r0
 801f02a:	460b      	mov	r3, r1
 801f02c:	4630      	mov	r0, r6
 801f02e:	4639      	mov	r1, r7
 801f030:	f7e1 f902 	bl	8000238 <__aeabi_dsub>
 801f034:	460f      	mov	r7, r1
 801f036:	4606      	mov	r6, r0
 801f038:	f7e1 fd66 	bl	8000b08 <__aeabi_d2iz>
 801f03c:	9002      	str	r0, [sp, #8]
 801f03e:	f7e1 fa49 	bl	80004d4 <__aeabi_i2d>
 801f042:	4602      	mov	r2, r0
 801f044:	460b      	mov	r3, r1
 801f046:	4630      	mov	r0, r6
 801f048:	4639      	mov	r1, r7
 801f04a:	f7e1 f8f5 	bl	8000238 <__aeabi_dsub>
 801f04e:	f1bb 0f00 	cmp.w	fp, #0
 801f052:	4606      	mov	r6, r0
 801f054:	460f      	mov	r7, r1
 801f056:	dd6c      	ble.n	801f132 <__kernel_rem_pio2+0x252>
 801f058:	f108 31ff 	add.w	r1, r8, #4294967295
 801f05c:	ab0c      	add	r3, sp, #48	@ 0x30
 801f05e:	9d02      	ldr	r5, [sp, #8]
 801f060:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801f064:	f1cb 0018 	rsb	r0, fp, #24
 801f068:	fa43 f200 	asr.w	r2, r3, r0
 801f06c:	4415      	add	r5, r2
 801f06e:	4082      	lsls	r2, r0
 801f070:	1a9b      	subs	r3, r3, r2
 801f072:	aa0c      	add	r2, sp, #48	@ 0x30
 801f074:	9502      	str	r5, [sp, #8]
 801f076:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801f07a:	f1cb 0217 	rsb	r2, fp, #23
 801f07e:	fa43 f902 	asr.w	r9, r3, r2
 801f082:	f1b9 0f00 	cmp.w	r9, #0
 801f086:	dd64      	ble.n	801f152 <__kernel_rem_pio2+0x272>
 801f088:	9b02      	ldr	r3, [sp, #8]
 801f08a:	2200      	movs	r2, #0
 801f08c:	3301      	adds	r3, #1
 801f08e:	9302      	str	r3, [sp, #8]
 801f090:	4615      	mov	r5, r2
 801f092:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801f096:	4590      	cmp	r8, r2
 801f098:	f300 80b8 	bgt.w	801f20c <__kernel_rem_pio2+0x32c>
 801f09c:	f1bb 0f00 	cmp.w	fp, #0
 801f0a0:	dd07      	ble.n	801f0b2 <__kernel_rem_pio2+0x1d2>
 801f0a2:	f1bb 0f01 	cmp.w	fp, #1
 801f0a6:	f000 80bf 	beq.w	801f228 <__kernel_rem_pio2+0x348>
 801f0aa:	f1bb 0f02 	cmp.w	fp, #2
 801f0ae:	f000 80c6 	beq.w	801f23e <__kernel_rem_pio2+0x35e>
 801f0b2:	f1b9 0f02 	cmp.w	r9, #2
 801f0b6:	d14c      	bne.n	801f152 <__kernel_rem_pio2+0x272>
 801f0b8:	4632      	mov	r2, r6
 801f0ba:	463b      	mov	r3, r7
 801f0bc:	494e      	ldr	r1, [pc, #312]	@ (801f1f8 <__kernel_rem_pio2+0x318>)
 801f0be:	2000      	movs	r0, #0
 801f0c0:	f7e1 f8ba 	bl	8000238 <__aeabi_dsub>
 801f0c4:	4606      	mov	r6, r0
 801f0c6:	460f      	mov	r7, r1
 801f0c8:	2d00      	cmp	r5, #0
 801f0ca:	d042      	beq.n	801f152 <__kernel_rem_pio2+0x272>
 801f0cc:	4658      	mov	r0, fp
 801f0ce:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801f1e8 <__kernel_rem_pio2+0x308>
 801f0d2:	f000 fcb9 	bl	801fa48 <scalbn>
 801f0d6:	4630      	mov	r0, r6
 801f0d8:	4639      	mov	r1, r7
 801f0da:	ec53 2b10 	vmov	r2, r3, d0
 801f0de:	f7e1 f8ab 	bl	8000238 <__aeabi_dsub>
 801f0e2:	4606      	mov	r6, r0
 801f0e4:	460f      	mov	r7, r1
 801f0e6:	e034      	b.n	801f152 <__kernel_rem_pio2+0x272>
 801f0e8:	4b44      	ldr	r3, [pc, #272]	@ (801f1fc <__kernel_rem_pio2+0x31c>)
 801f0ea:	2200      	movs	r2, #0
 801f0ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f0f0:	f7e1 fa5a 	bl	80005a8 <__aeabi_dmul>
 801f0f4:	f7e1 fd08 	bl	8000b08 <__aeabi_d2iz>
 801f0f8:	f7e1 f9ec 	bl	80004d4 <__aeabi_i2d>
 801f0fc:	4b40      	ldr	r3, [pc, #256]	@ (801f200 <__kernel_rem_pio2+0x320>)
 801f0fe:	2200      	movs	r2, #0
 801f100:	4606      	mov	r6, r0
 801f102:	460f      	mov	r7, r1
 801f104:	f7e1 fa50 	bl	80005a8 <__aeabi_dmul>
 801f108:	4602      	mov	r2, r0
 801f10a:	460b      	mov	r3, r1
 801f10c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f110:	f7e1 f892 	bl	8000238 <__aeabi_dsub>
 801f114:	f7e1 fcf8 	bl	8000b08 <__aeabi_d2iz>
 801f118:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f11c:	f849 0b04 	str.w	r0, [r9], #4
 801f120:	4639      	mov	r1, r7
 801f122:	4630      	mov	r0, r6
 801f124:	f7e1 f88a 	bl	800023c <__adddf3>
 801f128:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f12c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f130:	e75d      	b.n	801efee <__kernel_rem_pio2+0x10e>
 801f132:	d107      	bne.n	801f144 <__kernel_rem_pio2+0x264>
 801f134:	f108 33ff 	add.w	r3, r8, #4294967295
 801f138:	aa0c      	add	r2, sp, #48	@ 0x30
 801f13a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801f13e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801f142:	e79e      	b.n	801f082 <__kernel_rem_pio2+0x1a2>
 801f144:	4b2f      	ldr	r3, [pc, #188]	@ (801f204 <__kernel_rem_pio2+0x324>)
 801f146:	2200      	movs	r2, #0
 801f148:	f7e1 fcb4 	bl	8000ab4 <__aeabi_dcmpge>
 801f14c:	2800      	cmp	r0, #0
 801f14e:	d143      	bne.n	801f1d8 <__kernel_rem_pio2+0x2f8>
 801f150:	4681      	mov	r9, r0
 801f152:	2200      	movs	r2, #0
 801f154:	2300      	movs	r3, #0
 801f156:	4630      	mov	r0, r6
 801f158:	4639      	mov	r1, r7
 801f15a:	f7e1 fc8d 	bl	8000a78 <__aeabi_dcmpeq>
 801f15e:	2800      	cmp	r0, #0
 801f160:	f000 80bf 	beq.w	801f2e2 <__kernel_rem_pio2+0x402>
 801f164:	f108 33ff 	add.w	r3, r8, #4294967295
 801f168:	2200      	movs	r2, #0
 801f16a:	9900      	ldr	r1, [sp, #0]
 801f16c:	428b      	cmp	r3, r1
 801f16e:	da6e      	bge.n	801f24e <__kernel_rem_pio2+0x36e>
 801f170:	2a00      	cmp	r2, #0
 801f172:	f000 8089 	beq.w	801f288 <__kernel_rem_pio2+0x3a8>
 801f176:	f108 38ff 	add.w	r8, r8, #4294967295
 801f17a:	ab0c      	add	r3, sp, #48	@ 0x30
 801f17c:	f1ab 0b18 	sub.w	fp, fp, #24
 801f180:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801f184:	2b00      	cmp	r3, #0
 801f186:	d0f6      	beq.n	801f176 <__kernel_rem_pio2+0x296>
 801f188:	4658      	mov	r0, fp
 801f18a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801f1e8 <__kernel_rem_pio2+0x308>
 801f18e:	f000 fc5b 	bl	801fa48 <scalbn>
 801f192:	f108 0301 	add.w	r3, r8, #1
 801f196:	00da      	lsls	r2, r3, #3
 801f198:	9205      	str	r2, [sp, #20]
 801f19a:	ec55 4b10 	vmov	r4, r5, d0
 801f19e:	aa70      	add	r2, sp, #448	@ 0x1c0
 801f1a0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801f1fc <__kernel_rem_pio2+0x31c>
 801f1a4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801f1a8:	4646      	mov	r6, r8
 801f1aa:	f04f 0a00 	mov.w	sl, #0
 801f1ae:	2e00      	cmp	r6, #0
 801f1b0:	f280 80cf 	bge.w	801f352 <__kernel_rem_pio2+0x472>
 801f1b4:	4644      	mov	r4, r8
 801f1b6:	2c00      	cmp	r4, #0
 801f1b8:	f2c0 80fd 	blt.w	801f3b6 <__kernel_rem_pio2+0x4d6>
 801f1bc:	4b12      	ldr	r3, [pc, #72]	@ (801f208 <__kernel_rem_pio2+0x328>)
 801f1be:	461f      	mov	r7, r3
 801f1c0:	ab70      	add	r3, sp, #448	@ 0x1c0
 801f1c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f1c6:	9306      	str	r3, [sp, #24]
 801f1c8:	f04f 0a00 	mov.w	sl, #0
 801f1cc:	f04f 0b00 	mov.w	fp, #0
 801f1d0:	2600      	movs	r6, #0
 801f1d2:	eba8 0504 	sub.w	r5, r8, r4
 801f1d6:	e0e2      	b.n	801f39e <__kernel_rem_pio2+0x4be>
 801f1d8:	f04f 0902 	mov.w	r9, #2
 801f1dc:	e754      	b.n	801f088 <__kernel_rem_pio2+0x1a8>
 801f1de:	bf00      	nop
	...
 801f1ec:	3ff00000 	.word	0x3ff00000
 801f1f0:	08022558 	.word	0x08022558
 801f1f4:	40200000 	.word	0x40200000
 801f1f8:	3ff00000 	.word	0x3ff00000
 801f1fc:	3e700000 	.word	0x3e700000
 801f200:	41700000 	.word	0x41700000
 801f204:	3fe00000 	.word	0x3fe00000
 801f208:	08022518 	.word	0x08022518
 801f20c:	f854 3b04 	ldr.w	r3, [r4], #4
 801f210:	b945      	cbnz	r5, 801f224 <__kernel_rem_pio2+0x344>
 801f212:	b123      	cbz	r3, 801f21e <__kernel_rem_pio2+0x33e>
 801f214:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801f218:	f844 3c04 	str.w	r3, [r4, #-4]
 801f21c:	2301      	movs	r3, #1
 801f21e:	3201      	adds	r2, #1
 801f220:	461d      	mov	r5, r3
 801f222:	e738      	b.n	801f096 <__kernel_rem_pio2+0x1b6>
 801f224:	1acb      	subs	r3, r1, r3
 801f226:	e7f7      	b.n	801f218 <__kernel_rem_pio2+0x338>
 801f228:	f108 32ff 	add.w	r2, r8, #4294967295
 801f22c:	ab0c      	add	r3, sp, #48	@ 0x30
 801f22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f232:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f236:	a90c      	add	r1, sp, #48	@ 0x30
 801f238:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801f23c:	e739      	b.n	801f0b2 <__kernel_rem_pio2+0x1d2>
 801f23e:	f108 32ff 	add.w	r2, r8, #4294967295
 801f242:	ab0c      	add	r3, sp, #48	@ 0x30
 801f244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801f248:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f24c:	e7f3      	b.n	801f236 <__kernel_rem_pio2+0x356>
 801f24e:	a90c      	add	r1, sp, #48	@ 0x30
 801f250:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801f254:	3b01      	subs	r3, #1
 801f256:	430a      	orrs	r2, r1
 801f258:	e787      	b.n	801f16a <__kernel_rem_pio2+0x28a>
 801f25a:	3401      	adds	r4, #1
 801f25c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f260:	2a00      	cmp	r2, #0
 801f262:	d0fa      	beq.n	801f25a <__kernel_rem_pio2+0x37a>
 801f264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f266:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f26a:	eb0d 0503 	add.w	r5, sp, r3
 801f26e:	9b06      	ldr	r3, [sp, #24]
 801f270:	aa20      	add	r2, sp, #128	@ 0x80
 801f272:	4443      	add	r3, r8
 801f274:	f108 0701 	add.w	r7, r8, #1
 801f278:	3d98      	subs	r5, #152	@ 0x98
 801f27a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801f27e:	4444      	add	r4, r8
 801f280:	42bc      	cmp	r4, r7
 801f282:	da04      	bge.n	801f28e <__kernel_rem_pio2+0x3ae>
 801f284:	46a0      	mov	r8, r4
 801f286:	e6a2      	b.n	801efce <__kernel_rem_pio2+0xee>
 801f288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f28a:	2401      	movs	r4, #1
 801f28c:	e7e6      	b.n	801f25c <__kernel_rem_pio2+0x37c>
 801f28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f290:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801f294:	f7e1 f91e 	bl	80004d4 <__aeabi_i2d>
 801f298:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801f560 <__kernel_rem_pio2+0x680>
 801f29c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801f2a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801f2a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801f2a8:	46b2      	mov	sl, r6
 801f2aa:	f04f 0800 	mov.w	r8, #0
 801f2ae:	9b05      	ldr	r3, [sp, #20]
 801f2b0:	4598      	cmp	r8, r3
 801f2b2:	dd05      	ble.n	801f2c0 <__kernel_rem_pio2+0x3e0>
 801f2b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801f2b8:	3701      	adds	r7, #1
 801f2ba:	eca5 7b02 	vstmia	r5!, {d7}
 801f2be:	e7df      	b.n	801f280 <__kernel_rem_pio2+0x3a0>
 801f2c0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801f2c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801f2c8:	f7e1 f96e 	bl	80005a8 <__aeabi_dmul>
 801f2cc:	4602      	mov	r2, r0
 801f2ce:	460b      	mov	r3, r1
 801f2d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f2d4:	f7e0 ffb2 	bl	800023c <__adddf3>
 801f2d8:	f108 0801 	add.w	r8, r8, #1
 801f2dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f2e0:	e7e5      	b.n	801f2ae <__kernel_rem_pio2+0x3ce>
 801f2e2:	f1cb 0000 	rsb	r0, fp, #0
 801f2e6:	ec47 6b10 	vmov	d0, r6, r7
 801f2ea:	f000 fbad 	bl	801fa48 <scalbn>
 801f2ee:	ec55 4b10 	vmov	r4, r5, d0
 801f2f2:	4b9d      	ldr	r3, [pc, #628]	@ (801f568 <__kernel_rem_pio2+0x688>)
 801f2f4:	2200      	movs	r2, #0
 801f2f6:	4620      	mov	r0, r4
 801f2f8:	4629      	mov	r1, r5
 801f2fa:	f7e1 fbdb 	bl	8000ab4 <__aeabi_dcmpge>
 801f2fe:	b300      	cbz	r0, 801f342 <__kernel_rem_pio2+0x462>
 801f300:	4b9a      	ldr	r3, [pc, #616]	@ (801f56c <__kernel_rem_pio2+0x68c>)
 801f302:	2200      	movs	r2, #0
 801f304:	4620      	mov	r0, r4
 801f306:	4629      	mov	r1, r5
 801f308:	f7e1 f94e 	bl	80005a8 <__aeabi_dmul>
 801f30c:	f7e1 fbfc 	bl	8000b08 <__aeabi_d2iz>
 801f310:	4606      	mov	r6, r0
 801f312:	f7e1 f8df 	bl	80004d4 <__aeabi_i2d>
 801f316:	4b94      	ldr	r3, [pc, #592]	@ (801f568 <__kernel_rem_pio2+0x688>)
 801f318:	2200      	movs	r2, #0
 801f31a:	f7e1 f945 	bl	80005a8 <__aeabi_dmul>
 801f31e:	460b      	mov	r3, r1
 801f320:	4602      	mov	r2, r0
 801f322:	4629      	mov	r1, r5
 801f324:	4620      	mov	r0, r4
 801f326:	f7e0 ff87 	bl	8000238 <__aeabi_dsub>
 801f32a:	f7e1 fbed 	bl	8000b08 <__aeabi_d2iz>
 801f32e:	ab0c      	add	r3, sp, #48	@ 0x30
 801f330:	f10b 0b18 	add.w	fp, fp, #24
 801f334:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f338:	f108 0801 	add.w	r8, r8, #1
 801f33c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801f340:	e722      	b.n	801f188 <__kernel_rem_pio2+0x2a8>
 801f342:	4620      	mov	r0, r4
 801f344:	4629      	mov	r1, r5
 801f346:	f7e1 fbdf 	bl	8000b08 <__aeabi_d2iz>
 801f34a:	ab0c      	add	r3, sp, #48	@ 0x30
 801f34c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801f350:	e71a      	b.n	801f188 <__kernel_rem_pio2+0x2a8>
 801f352:	ab0c      	add	r3, sp, #48	@ 0x30
 801f354:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801f358:	f7e1 f8bc 	bl	80004d4 <__aeabi_i2d>
 801f35c:	4622      	mov	r2, r4
 801f35e:	462b      	mov	r3, r5
 801f360:	f7e1 f922 	bl	80005a8 <__aeabi_dmul>
 801f364:	4652      	mov	r2, sl
 801f366:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801f36a:	465b      	mov	r3, fp
 801f36c:	4620      	mov	r0, r4
 801f36e:	4629      	mov	r1, r5
 801f370:	f7e1 f91a 	bl	80005a8 <__aeabi_dmul>
 801f374:	3e01      	subs	r6, #1
 801f376:	4604      	mov	r4, r0
 801f378:	460d      	mov	r5, r1
 801f37a:	e718      	b.n	801f1ae <__kernel_rem_pio2+0x2ce>
 801f37c:	9906      	ldr	r1, [sp, #24]
 801f37e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801f382:	9106      	str	r1, [sp, #24]
 801f384:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801f388:	f7e1 f90e 	bl	80005a8 <__aeabi_dmul>
 801f38c:	4602      	mov	r2, r0
 801f38e:	460b      	mov	r3, r1
 801f390:	4650      	mov	r0, sl
 801f392:	4659      	mov	r1, fp
 801f394:	f7e0 ff52 	bl	800023c <__adddf3>
 801f398:	3601      	adds	r6, #1
 801f39a:	4682      	mov	sl, r0
 801f39c:	468b      	mov	fp, r1
 801f39e:	9b00      	ldr	r3, [sp, #0]
 801f3a0:	429e      	cmp	r6, r3
 801f3a2:	dc01      	bgt.n	801f3a8 <__kernel_rem_pio2+0x4c8>
 801f3a4:	42b5      	cmp	r5, r6
 801f3a6:	dae9      	bge.n	801f37c <__kernel_rem_pio2+0x49c>
 801f3a8:	ab48      	add	r3, sp, #288	@ 0x120
 801f3aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801f3ae:	e9c5 ab00 	strd	sl, fp, [r5]
 801f3b2:	3c01      	subs	r4, #1
 801f3b4:	e6ff      	b.n	801f1b6 <__kernel_rem_pio2+0x2d6>
 801f3b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f3b8:	2b02      	cmp	r3, #2
 801f3ba:	dc0b      	bgt.n	801f3d4 <__kernel_rem_pio2+0x4f4>
 801f3bc:	2b00      	cmp	r3, #0
 801f3be:	dc39      	bgt.n	801f434 <__kernel_rem_pio2+0x554>
 801f3c0:	d05d      	beq.n	801f47e <__kernel_rem_pio2+0x59e>
 801f3c2:	9b02      	ldr	r3, [sp, #8]
 801f3c4:	f003 0007 	and.w	r0, r3, #7
 801f3c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801f3cc:	ecbd 8b02 	vpop	{d8}
 801f3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f3d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801f3d6:	2b03      	cmp	r3, #3
 801f3d8:	d1f3      	bne.n	801f3c2 <__kernel_rem_pio2+0x4e2>
 801f3da:	9b05      	ldr	r3, [sp, #20]
 801f3dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801f3e0:	eb0d 0403 	add.w	r4, sp, r3
 801f3e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801f3e8:	4625      	mov	r5, r4
 801f3ea:	46c2      	mov	sl, r8
 801f3ec:	f1ba 0f00 	cmp.w	sl, #0
 801f3f0:	f1a5 0508 	sub.w	r5, r5, #8
 801f3f4:	dc6b      	bgt.n	801f4ce <__kernel_rem_pio2+0x5ee>
 801f3f6:	4645      	mov	r5, r8
 801f3f8:	2d01      	cmp	r5, #1
 801f3fa:	f1a4 0408 	sub.w	r4, r4, #8
 801f3fe:	f300 8087 	bgt.w	801f510 <__kernel_rem_pio2+0x630>
 801f402:	9c05      	ldr	r4, [sp, #20]
 801f404:	ab48      	add	r3, sp, #288	@ 0x120
 801f406:	441c      	add	r4, r3
 801f408:	2000      	movs	r0, #0
 801f40a:	2100      	movs	r1, #0
 801f40c:	f1b8 0f01 	cmp.w	r8, #1
 801f410:	f300 809c 	bgt.w	801f54c <__kernel_rem_pio2+0x66c>
 801f414:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801f418:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801f41c:	f1b9 0f00 	cmp.w	r9, #0
 801f420:	f040 80a6 	bne.w	801f570 <__kernel_rem_pio2+0x690>
 801f424:	9b04      	ldr	r3, [sp, #16]
 801f426:	e9c3 7800 	strd	r7, r8, [r3]
 801f42a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801f42e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801f432:	e7c6      	b.n	801f3c2 <__kernel_rem_pio2+0x4e2>
 801f434:	9d05      	ldr	r5, [sp, #20]
 801f436:	ab48      	add	r3, sp, #288	@ 0x120
 801f438:	441d      	add	r5, r3
 801f43a:	4644      	mov	r4, r8
 801f43c:	2000      	movs	r0, #0
 801f43e:	2100      	movs	r1, #0
 801f440:	2c00      	cmp	r4, #0
 801f442:	da35      	bge.n	801f4b0 <__kernel_rem_pio2+0x5d0>
 801f444:	f1b9 0f00 	cmp.w	r9, #0
 801f448:	d038      	beq.n	801f4bc <__kernel_rem_pio2+0x5dc>
 801f44a:	4602      	mov	r2, r0
 801f44c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f450:	9c04      	ldr	r4, [sp, #16]
 801f452:	e9c4 2300 	strd	r2, r3, [r4]
 801f456:	4602      	mov	r2, r0
 801f458:	460b      	mov	r3, r1
 801f45a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801f45e:	f7e0 feeb 	bl	8000238 <__aeabi_dsub>
 801f462:	ad4a      	add	r5, sp, #296	@ 0x128
 801f464:	2401      	movs	r4, #1
 801f466:	45a0      	cmp	r8, r4
 801f468:	da2b      	bge.n	801f4c2 <__kernel_rem_pio2+0x5e2>
 801f46a:	f1b9 0f00 	cmp.w	r9, #0
 801f46e:	d002      	beq.n	801f476 <__kernel_rem_pio2+0x596>
 801f470:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f474:	4619      	mov	r1, r3
 801f476:	9b04      	ldr	r3, [sp, #16]
 801f478:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801f47c:	e7a1      	b.n	801f3c2 <__kernel_rem_pio2+0x4e2>
 801f47e:	9c05      	ldr	r4, [sp, #20]
 801f480:	ab48      	add	r3, sp, #288	@ 0x120
 801f482:	441c      	add	r4, r3
 801f484:	2000      	movs	r0, #0
 801f486:	2100      	movs	r1, #0
 801f488:	f1b8 0f00 	cmp.w	r8, #0
 801f48c:	da09      	bge.n	801f4a2 <__kernel_rem_pio2+0x5c2>
 801f48e:	f1b9 0f00 	cmp.w	r9, #0
 801f492:	d002      	beq.n	801f49a <__kernel_rem_pio2+0x5ba>
 801f494:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f498:	4619      	mov	r1, r3
 801f49a:	9b04      	ldr	r3, [sp, #16]
 801f49c:	e9c3 0100 	strd	r0, r1, [r3]
 801f4a0:	e78f      	b.n	801f3c2 <__kernel_rem_pio2+0x4e2>
 801f4a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f4a6:	f7e0 fec9 	bl	800023c <__adddf3>
 801f4aa:	f108 38ff 	add.w	r8, r8, #4294967295
 801f4ae:	e7eb      	b.n	801f488 <__kernel_rem_pio2+0x5a8>
 801f4b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801f4b4:	f7e0 fec2 	bl	800023c <__adddf3>
 801f4b8:	3c01      	subs	r4, #1
 801f4ba:	e7c1      	b.n	801f440 <__kernel_rem_pio2+0x560>
 801f4bc:	4602      	mov	r2, r0
 801f4be:	460b      	mov	r3, r1
 801f4c0:	e7c6      	b.n	801f450 <__kernel_rem_pio2+0x570>
 801f4c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801f4c6:	f7e0 feb9 	bl	800023c <__adddf3>
 801f4ca:	3401      	adds	r4, #1
 801f4cc:	e7cb      	b.n	801f466 <__kernel_rem_pio2+0x586>
 801f4ce:	ed95 7b00 	vldr	d7, [r5]
 801f4d2:	ed8d 7b00 	vstr	d7, [sp]
 801f4d6:	ed95 7b02 	vldr	d7, [r5, #8]
 801f4da:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f4de:	ec53 2b17 	vmov	r2, r3, d7
 801f4e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 801f4e6:	f7e0 fea9 	bl	800023c <__adddf3>
 801f4ea:	4602      	mov	r2, r0
 801f4ec:	460b      	mov	r3, r1
 801f4ee:	4606      	mov	r6, r0
 801f4f0:	460f      	mov	r7, r1
 801f4f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f4f6:	f7e0 fe9f 	bl	8000238 <__aeabi_dsub>
 801f4fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801f4fe:	f7e0 fe9d 	bl	800023c <__adddf3>
 801f502:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f506:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801f50a:	e9c5 6700 	strd	r6, r7, [r5]
 801f50e:	e76d      	b.n	801f3ec <__kernel_rem_pio2+0x50c>
 801f510:	ed94 7b00 	vldr	d7, [r4]
 801f514:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801f518:	ec51 0b17 	vmov	r0, r1, d7
 801f51c:	4652      	mov	r2, sl
 801f51e:	465b      	mov	r3, fp
 801f520:	ed8d 7b00 	vstr	d7, [sp]
 801f524:	f7e0 fe8a 	bl	800023c <__adddf3>
 801f528:	4602      	mov	r2, r0
 801f52a:	460b      	mov	r3, r1
 801f52c:	4606      	mov	r6, r0
 801f52e:	460f      	mov	r7, r1
 801f530:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f534:	f7e0 fe80 	bl	8000238 <__aeabi_dsub>
 801f538:	4652      	mov	r2, sl
 801f53a:	465b      	mov	r3, fp
 801f53c:	f7e0 fe7e 	bl	800023c <__adddf3>
 801f540:	3d01      	subs	r5, #1
 801f542:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801f546:	e9c4 6700 	strd	r6, r7, [r4]
 801f54a:	e755      	b.n	801f3f8 <__kernel_rem_pio2+0x518>
 801f54c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801f550:	f7e0 fe74 	bl	800023c <__adddf3>
 801f554:	f108 38ff 	add.w	r8, r8, #4294967295
 801f558:	e758      	b.n	801f40c <__kernel_rem_pio2+0x52c>
 801f55a:	bf00      	nop
 801f55c:	f3af 8000 	nop.w
	...
 801f568:	41700000 	.word	0x41700000
 801f56c:	3e700000 	.word	0x3e700000
 801f570:	9b04      	ldr	r3, [sp, #16]
 801f572:	9a04      	ldr	r2, [sp, #16]
 801f574:	601f      	str	r7, [r3, #0]
 801f576:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801f57a:	605c      	str	r4, [r3, #4]
 801f57c:	609d      	str	r5, [r3, #8]
 801f57e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f582:	60d3      	str	r3, [r2, #12]
 801f584:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801f588:	6110      	str	r0, [r2, #16]
 801f58a:	6153      	str	r3, [r2, #20]
 801f58c:	e719      	b.n	801f3c2 <__kernel_rem_pio2+0x4e2>
 801f58e:	bf00      	nop

0801f590 <__ieee754_acos>:
 801f590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f594:	ec55 4b10 	vmov	r4, r5, d0
 801f598:	49b7      	ldr	r1, [pc, #732]	@ (801f878 <__ieee754_acos+0x2e8>)
 801f59a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801f59e:	428b      	cmp	r3, r1
 801f5a0:	d919      	bls.n	801f5d6 <__ieee754_acos+0x46>
 801f5a2:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801f5a6:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801f5aa:	4323      	orrs	r3, r4
 801f5ac:	d106      	bne.n	801f5bc <__ieee754_acos+0x2c>
 801f5ae:	2d00      	cmp	r5, #0
 801f5b0:	f340 8210 	ble.w	801f9d4 <__ieee754_acos+0x444>
 801f5b4:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801f808 <__ieee754_acos+0x278>
 801f5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5bc:	4622      	mov	r2, r4
 801f5be:	462b      	mov	r3, r5
 801f5c0:	4620      	mov	r0, r4
 801f5c2:	4629      	mov	r1, r5
 801f5c4:	f7e0 fe38 	bl	8000238 <__aeabi_dsub>
 801f5c8:	4602      	mov	r2, r0
 801f5ca:	460b      	mov	r3, r1
 801f5cc:	f7e1 f916 	bl	80007fc <__aeabi_ddiv>
 801f5d0:	ec41 0b10 	vmov	d0, r0, r1
 801f5d4:	e7f0      	b.n	801f5b8 <__ieee754_acos+0x28>
 801f5d6:	49a9      	ldr	r1, [pc, #676]	@ (801f87c <__ieee754_acos+0x2ec>)
 801f5d8:	428b      	cmp	r3, r1
 801f5da:	f200 8085 	bhi.w	801f6e8 <__ieee754_acos+0x158>
 801f5de:	4aa8      	ldr	r2, [pc, #672]	@ (801f880 <__ieee754_acos+0x2f0>)
 801f5e0:	4293      	cmp	r3, r2
 801f5e2:	f240 81fa 	bls.w	801f9da <__ieee754_acos+0x44a>
 801f5e6:	4622      	mov	r2, r4
 801f5e8:	462b      	mov	r3, r5
 801f5ea:	4620      	mov	r0, r4
 801f5ec:	4629      	mov	r1, r5
 801f5ee:	f7e0 ffdb 	bl	80005a8 <__aeabi_dmul>
 801f5f2:	a387      	add	r3, pc, #540	@ (adr r3, 801f810 <__ieee754_acos+0x280>)
 801f5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f5f8:	4606      	mov	r6, r0
 801f5fa:	460f      	mov	r7, r1
 801f5fc:	f7e0 ffd4 	bl	80005a8 <__aeabi_dmul>
 801f600:	a385      	add	r3, pc, #532	@ (adr r3, 801f818 <__ieee754_acos+0x288>)
 801f602:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f606:	f7e0 fe19 	bl	800023c <__adddf3>
 801f60a:	4632      	mov	r2, r6
 801f60c:	463b      	mov	r3, r7
 801f60e:	f7e0 ffcb 	bl	80005a8 <__aeabi_dmul>
 801f612:	a383      	add	r3, pc, #524	@ (adr r3, 801f820 <__ieee754_acos+0x290>)
 801f614:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f618:	f7e0 fe0e 	bl	8000238 <__aeabi_dsub>
 801f61c:	4632      	mov	r2, r6
 801f61e:	463b      	mov	r3, r7
 801f620:	f7e0 ffc2 	bl	80005a8 <__aeabi_dmul>
 801f624:	a380      	add	r3, pc, #512	@ (adr r3, 801f828 <__ieee754_acos+0x298>)
 801f626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f62a:	f7e0 fe07 	bl	800023c <__adddf3>
 801f62e:	4632      	mov	r2, r6
 801f630:	463b      	mov	r3, r7
 801f632:	f7e0 ffb9 	bl	80005a8 <__aeabi_dmul>
 801f636:	a37e      	add	r3, pc, #504	@ (adr r3, 801f830 <__ieee754_acos+0x2a0>)
 801f638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f63c:	f7e0 fdfc 	bl	8000238 <__aeabi_dsub>
 801f640:	4632      	mov	r2, r6
 801f642:	463b      	mov	r3, r7
 801f644:	f7e0 ffb0 	bl	80005a8 <__aeabi_dmul>
 801f648:	a37b      	add	r3, pc, #492	@ (adr r3, 801f838 <__ieee754_acos+0x2a8>)
 801f64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f64e:	f7e0 fdf5 	bl	800023c <__adddf3>
 801f652:	4632      	mov	r2, r6
 801f654:	463b      	mov	r3, r7
 801f656:	f7e0 ffa7 	bl	80005a8 <__aeabi_dmul>
 801f65a:	a379      	add	r3, pc, #484	@ (adr r3, 801f840 <__ieee754_acos+0x2b0>)
 801f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f660:	4680      	mov	r8, r0
 801f662:	4689      	mov	r9, r1
 801f664:	4630      	mov	r0, r6
 801f666:	4639      	mov	r1, r7
 801f668:	f7e0 ff9e 	bl	80005a8 <__aeabi_dmul>
 801f66c:	a376      	add	r3, pc, #472	@ (adr r3, 801f848 <__ieee754_acos+0x2b8>)
 801f66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f672:	f7e0 fde1 	bl	8000238 <__aeabi_dsub>
 801f676:	4632      	mov	r2, r6
 801f678:	463b      	mov	r3, r7
 801f67a:	f7e0 ff95 	bl	80005a8 <__aeabi_dmul>
 801f67e:	a374      	add	r3, pc, #464	@ (adr r3, 801f850 <__ieee754_acos+0x2c0>)
 801f680:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f684:	f7e0 fdda 	bl	800023c <__adddf3>
 801f688:	4632      	mov	r2, r6
 801f68a:	463b      	mov	r3, r7
 801f68c:	f7e0 ff8c 	bl	80005a8 <__aeabi_dmul>
 801f690:	a371      	add	r3, pc, #452	@ (adr r3, 801f858 <__ieee754_acos+0x2c8>)
 801f692:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f696:	f7e0 fdcf 	bl	8000238 <__aeabi_dsub>
 801f69a:	4632      	mov	r2, r6
 801f69c:	463b      	mov	r3, r7
 801f69e:	f7e0 ff83 	bl	80005a8 <__aeabi_dmul>
 801f6a2:	4b78      	ldr	r3, [pc, #480]	@ (801f884 <__ieee754_acos+0x2f4>)
 801f6a4:	2200      	movs	r2, #0
 801f6a6:	f7e0 fdc9 	bl	800023c <__adddf3>
 801f6aa:	4602      	mov	r2, r0
 801f6ac:	460b      	mov	r3, r1
 801f6ae:	4640      	mov	r0, r8
 801f6b0:	4649      	mov	r1, r9
 801f6b2:	f7e1 f8a3 	bl	80007fc <__aeabi_ddiv>
 801f6b6:	4622      	mov	r2, r4
 801f6b8:	462b      	mov	r3, r5
 801f6ba:	f7e0 ff75 	bl	80005a8 <__aeabi_dmul>
 801f6be:	4602      	mov	r2, r0
 801f6c0:	460b      	mov	r3, r1
 801f6c2:	a167      	add	r1, pc, #412	@ (adr r1, 801f860 <__ieee754_acos+0x2d0>)
 801f6c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f6c8:	f7e0 fdb6 	bl	8000238 <__aeabi_dsub>
 801f6cc:	4602      	mov	r2, r0
 801f6ce:	460b      	mov	r3, r1
 801f6d0:	4620      	mov	r0, r4
 801f6d2:	4629      	mov	r1, r5
 801f6d4:	f7e0 fdb0 	bl	8000238 <__aeabi_dsub>
 801f6d8:	4602      	mov	r2, r0
 801f6da:	460b      	mov	r3, r1
 801f6dc:	a162      	add	r1, pc, #392	@ (adr r1, 801f868 <__ieee754_acos+0x2d8>)
 801f6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f6e2:	f7e0 fda9 	bl	8000238 <__aeabi_dsub>
 801f6e6:	e773      	b.n	801f5d0 <__ieee754_acos+0x40>
 801f6e8:	2d00      	cmp	r5, #0
 801f6ea:	f280 80cf 	bge.w	801f88c <__ieee754_acos+0x2fc>
 801f6ee:	4b65      	ldr	r3, [pc, #404]	@ (801f884 <__ieee754_acos+0x2f4>)
 801f6f0:	2200      	movs	r2, #0
 801f6f2:	4620      	mov	r0, r4
 801f6f4:	4629      	mov	r1, r5
 801f6f6:	f7e0 fda1 	bl	800023c <__adddf3>
 801f6fa:	4b63      	ldr	r3, [pc, #396]	@ (801f888 <__ieee754_acos+0x2f8>)
 801f6fc:	2200      	movs	r2, #0
 801f6fe:	f7e0 ff53 	bl	80005a8 <__aeabi_dmul>
 801f702:	a343      	add	r3, pc, #268	@ (adr r3, 801f810 <__ieee754_acos+0x280>)
 801f704:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f708:	4604      	mov	r4, r0
 801f70a:	460d      	mov	r5, r1
 801f70c:	f7e0 ff4c 	bl	80005a8 <__aeabi_dmul>
 801f710:	a341      	add	r3, pc, #260	@ (adr r3, 801f818 <__ieee754_acos+0x288>)
 801f712:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f716:	f7e0 fd91 	bl	800023c <__adddf3>
 801f71a:	4622      	mov	r2, r4
 801f71c:	462b      	mov	r3, r5
 801f71e:	f7e0 ff43 	bl	80005a8 <__aeabi_dmul>
 801f722:	a33f      	add	r3, pc, #252	@ (adr r3, 801f820 <__ieee754_acos+0x290>)
 801f724:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f728:	f7e0 fd86 	bl	8000238 <__aeabi_dsub>
 801f72c:	4622      	mov	r2, r4
 801f72e:	462b      	mov	r3, r5
 801f730:	f7e0 ff3a 	bl	80005a8 <__aeabi_dmul>
 801f734:	a33c      	add	r3, pc, #240	@ (adr r3, 801f828 <__ieee754_acos+0x298>)
 801f736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f73a:	f7e0 fd7f 	bl	800023c <__adddf3>
 801f73e:	4622      	mov	r2, r4
 801f740:	462b      	mov	r3, r5
 801f742:	f7e0 ff31 	bl	80005a8 <__aeabi_dmul>
 801f746:	a33a      	add	r3, pc, #232	@ (adr r3, 801f830 <__ieee754_acos+0x2a0>)
 801f748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f74c:	f7e0 fd74 	bl	8000238 <__aeabi_dsub>
 801f750:	4622      	mov	r2, r4
 801f752:	462b      	mov	r3, r5
 801f754:	f7e0 ff28 	bl	80005a8 <__aeabi_dmul>
 801f758:	a337      	add	r3, pc, #220	@ (adr r3, 801f838 <__ieee754_acos+0x2a8>)
 801f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f75e:	f7e0 fd6d 	bl	800023c <__adddf3>
 801f762:	4622      	mov	r2, r4
 801f764:	462b      	mov	r3, r5
 801f766:	f7e0 ff1f 	bl	80005a8 <__aeabi_dmul>
 801f76a:	a335      	add	r3, pc, #212	@ (adr r3, 801f840 <__ieee754_acos+0x2b0>)
 801f76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f770:	4606      	mov	r6, r0
 801f772:	460f      	mov	r7, r1
 801f774:	4620      	mov	r0, r4
 801f776:	4629      	mov	r1, r5
 801f778:	f7e0 ff16 	bl	80005a8 <__aeabi_dmul>
 801f77c:	a332      	add	r3, pc, #200	@ (adr r3, 801f848 <__ieee754_acos+0x2b8>)
 801f77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f782:	f7e0 fd59 	bl	8000238 <__aeabi_dsub>
 801f786:	4622      	mov	r2, r4
 801f788:	462b      	mov	r3, r5
 801f78a:	f7e0 ff0d 	bl	80005a8 <__aeabi_dmul>
 801f78e:	a330      	add	r3, pc, #192	@ (adr r3, 801f850 <__ieee754_acos+0x2c0>)
 801f790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f794:	f7e0 fd52 	bl	800023c <__adddf3>
 801f798:	4622      	mov	r2, r4
 801f79a:	462b      	mov	r3, r5
 801f79c:	f7e0 ff04 	bl	80005a8 <__aeabi_dmul>
 801f7a0:	a32d      	add	r3, pc, #180	@ (adr r3, 801f858 <__ieee754_acos+0x2c8>)
 801f7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7a6:	f7e0 fd47 	bl	8000238 <__aeabi_dsub>
 801f7aa:	4622      	mov	r2, r4
 801f7ac:	462b      	mov	r3, r5
 801f7ae:	f7e0 fefb 	bl	80005a8 <__aeabi_dmul>
 801f7b2:	4b34      	ldr	r3, [pc, #208]	@ (801f884 <__ieee754_acos+0x2f4>)
 801f7b4:	2200      	movs	r2, #0
 801f7b6:	f7e0 fd41 	bl	800023c <__adddf3>
 801f7ba:	ec45 4b10 	vmov	d0, r4, r5
 801f7be:	4680      	mov	r8, r0
 801f7c0:	4689      	mov	r9, r1
 801f7c2:	f000 f9bf 	bl	801fb44 <__ieee754_sqrt>
 801f7c6:	ec55 4b10 	vmov	r4, r5, d0
 801f7ca:	4642      	mov	r2, r8
 801f7cc:	464b      	mov	r3, r9
 801f7ce:	4630      	mov	r0, r6
 801f7d0:	4639      	mov	r1, r7
 801f7d2:	f7e1 f813 	bl	80007fc <__aeabi_ddiv>
 801f7d6:	4622      	mov	r2, r4
 801f7d8:	462b      	mov	r3, r5
 801f7da:	f7e0 fee5 	bl	80005a8 <__aeabi_dmul>
 801f7de:	a320      	add	r3, pc, #128	@ (adr r3, 801f860 <__ieee754_acos+0x2d0>)
 801f7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f7e4:	f7e0 fd28 	bl	8000238 <__aeabi_dsub>
 801f7e8:	4622      	mov	r2, r4
 801f7ea:	462b      	mov	r3, r5
 801f7ec:	f7e0 fd26 	bl	800023c <__adddf3>
 801f7f0:	4602      	mov	r2, r0
 801f7f2:	460b      	mov	r3, r1
 801f7f4:	f7e0 fd22 	bl	800023c <__adddf3>
 801f7f8:	4602      	mov	r2, r0
 801f7fa:	460b      	mov	r3, r1
 801f7fc:	a11c      	add	r1, pc, #112	@ (adr r1, 801f870 <__ieee754_acos+0x2e0>)
 801f7fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f802:	e76e      	b.n	801f6e2 <__ieee754_acos+0x152>
 801f804:	f3af 8000 	nop.w
	...
 801f810:	0dfdf709 	.word	0x0dfdf709
 801f814:	3f023de1 	.word	0x3f023de1
 801f818:	7501b288 	.word	0x7501b288
 801f81c:	3f49efe0 	.word	0x3f49efe0
 801f820:	b5688f3b 	.word	0xb5688f3b
 801f824:	3fa48228 	.word	0x3fa48228
 801f828:	0e884455 	.word	0x0e884455
 801f82c:	3fc9c155 	.word	0x3fc9c155
 801f830:	03eb6f7d 	.word	0x03eb6f7d
 801f834:	3fd4d612 	.word	0x3fd4d612
 801f838:	55555555 	.word	0x55555555
 801f83c:	3fc55555 	.word	0x3fc55555
 801f840:	b12e9282 	.word	0xb12e9282
 801f844:	3fb3b8c5 	.word	0x3fb3b8c5
 801f848:	1b8d0159 	.word	0x1b8d0159
 801f84c:	3fe6066c 	.word	0x3fe6066c
 801f850:	9c598ac8 	.word	0x9c598ac8
 801f854:	40002ae5 	.word	0x40002ae5
 801f858:	1c8a2d4b 	.word	0x1c8a2d4b
 801f85c:	40033a27 	.word	0x40033a27
 801f860:	33145c07 	.word	0x33145c07
 801f864:	3c91a626 	.word	0x3c91a626
 801f868:	54442d18 	.word	0x54442d18
 801f86c:	3ff921fb 	.word	0x3ff921fb
 801f870:	54442d18 	.word	0x54442d18
 801f874:	400921fb 	.word	0x400921fb
 801f878:	3fefffff 	.word	0x3fefffff
 801f87c:	3fdfffff 	.word	0x3fdfffff
 801f880:	3c600000 	.word	0x3c600000
 801f884:	3ff00000 	.word	0x3ff00000
 801f888:	3fe00000 	.word	0x3fe00000
 801f88c:	4622      	mov	r2, r4
 801f88e:	462b      	mov	r3, r5
 801f890:	496b      	ldr	r1, [pc, #428]	@ (801fa40 <__ieee754_acos+0x4b0>)
 801f892:	2000      	movs	r0, #0
 801f894:	f7e0 fcd0 	bl	8000238 <__aeabi_dsub>
 801f898:	4b6a      	ldr	r3, [pc, #424]	@ (801fa44 <__ieee754_acos+0x4b4>)
 801f89a:	2200      	movs	r2, #0
 801f89c:	f7e0 fe84 	bl	80005a8 <__aeabi_dmul>
 801f8a0:	4604      	mov	r4, r0
 801f8a2:	460d      	mov	r5, r1
 801f8a4:	ec45 4b10 	vmov	d0, r4, r5
 801f8a8:	f000 f94c 	bl	801fb44 <__ieee754_sqrt>
 801f8ac:	a34c      	add	r3, pc, #304	@ (adr r3, 801f9e0 <__ieee754_acos+0x450>)
 801f8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8b2:	4620      	mov	r0, r4
 801f8b4:	4629      	mov	r1, r5
 801f8b6:	ec59 8b10 	vmov	r8, r9, d0
 801f8ba:	f7e0 fe75 	bl	80005a8 <__aeabi_dmul>
 801f8be:	a34a      	add	r3, pc, #296	@ (adr r3, 801f9e8 <__ieee754_acos+0x458>)
 801f8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8c4:	f7e0 fcba 	bl	800023c <__adddf3>
 801f8c8:	4622      	mov	r2, r4
 801f8ca:	462b      	mov	r3, r5
 801f8cc:	f7e0 fe6c 	bl	80005a8 <__aeabi_dmul>
 801f8d0:	a347      	add	r3, pc, #284	@ (adr r3, 801f9f0 <__ieee754_acos+0x460>)
 801f8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8d6:	f7e0 fcaf 	bl	8000238 <__aeabi_dsub>
 801f8da:	4622      	mov	r2, r4
 801f8dc:	462b      	mov	r3, r5
 801f8de:	f7e0 fe63 	bl	80005a8 <__aeabi_dmul>
 801f8e2:	a345      	add	r3, pc, #276	@ (adr r3, 801f9f8 <__ieee754_acos+0x468>)
 801f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8e8:	f7e0 fca8 	bl	800023c <__adddf3>
 801f8ec:	4622      	mov	r2, r4
 801f8ee:	462b      	mov	r3, r5
 801f8f0:	f7e0 fe5a 	bl	80005a8 <__aeabi_dmul>
 801f8f4:	a342      	add	r3, pc, #264	@ (adr r3, 801fa00 <__ieee754_acos+0x470>)
 801f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f8fa:	f7e0 fc9d 	bl	8000238 <__aeabi_dsub>
 801f8fe:	4622      	mov	r2, r4
 801f900:	462b      	mov	r3, r5
 801f902:	f7e0 fe51 	bl	80005a8 <__aeabi_dmul>
 801f906:	a340      	add	r3, pc, #256	@ (adr r3, 801fa08 <__ieee754_acos+0x478>)
 801f908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f90c:	f7e0 fc96 	bl	800023c <__adddf3>
 801f910:	4622      	mov	r2, r4
 801f912:	462b      	mov	r3, r5
 801f914:	f7e0 fe48 	bl	80005a8 <__aeabi_dmul>
 801f918:	a33d      	add	r3, pc, #244	@ (adr r3, 801fa10 <__ieee754_acos+0x480>)
 801f91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f91e:	4682      	mov	sl, r0
 801f920:	468b      	mov	fp, r1
 801f922:	4620      	mov	r0, r4
 801f924:	4629      	mov	r1, r5
 801f926:	f7e0 fe3f 	bl	80005a8 <__aeabi_dmul>
 801f92a:	a33b      	add	r3, pc, #236	@ (adr r3, 801fa18 <__ieee754_acos+0x488>)
 801f92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f930:	f7e0 fc82 	bl	8000238 <__aeabi_dsub>
 801f934:	4622      	mov	r2, r4
 801f936:	462b      	mov	r3, r5
 801f938:	f7e0 fe36 	bl	80005a8 <__aeabi_dmul>
 801f93c:	a338      	add	r3, pc, #224	@ (adr r3, 801fa20 <__ieee754_acos+0x490>)
 801f93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f942:	f7e0 fc7b 	bl	800023c <__adddf3>
 801f946:	4622      	mov	r2, r4
 801f948:	462b      	mov	r3, r5
 801f94a:	f7e0 fe2d 	bl	80005a8 <__aeabi_dmul>
 801f94e:	a336      	add	r3, pc, #216	@ (adr r3, 801fa28 <__ieee754_acos+0x498>)
 801f950:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f954:	f7e0 fc70 	bl	8000238 <__aeabi_dsub>
 801f958:	4622      	mov	r2, r4
 801f95a:	462b      	mov	r3, r5
 801f95c:	f7e0 fe24 	bl	80005a8 <__aeabi_dmul>
 801f960:	4b37      	ldr	r3, [pc, #220]	@ (801fa40 <__ieee754_acos+0x4b0>)
 801f962:	2200      	movs	r2, #0
 801f964:	f7e0 fc6a 	bl	800023c <__adddf3>
 801f968:	4602      	mov	r2, r0
 801f96a:	460b      	mov	r3, r1
 801f96c:	4650      	mov	r0, sl
 801f96e:	4659      	mov	r1, fp
 801f970:	f7e0 ff44 	bl	80007fc <__aeabi_ddiv>
 801f974:	4642      	mov	r2, r8
 801f976:	464b      	mov	r3, r9
 801f978:	f7e0 fe16 	bl	80005a8 <__aeabi_dmul>
 801f97c:	2600      	movs	r6, #0
 801f97e:	4682      	mov	sl, r0
 801f980:	468b      	mov	fp, r1
 801f982:	4632      	mov	r2, r6
 801f984:	464b      	mov	r3, r9
 801f986:	4630      	mov	r0, r6
 801f988:	4649      	mov	r1, r9
 801f98a:	f7e0 fe0d 	bl	80005a8 <__aeabi_dmul>
 801f98e:	4602      	mov	r2, r0
 801f990:	460b      	mov	r3, r1
 801f992:	4620      	mov	r0, r4
 801f994:	4629      	mov	r1, r5
 801f996:	f7e0 fc4f 	bl	8000238 <__aeabi_dsub>
 801f99a:	4632      	mov	r2, r6
 801f99c:	4604      	mov	r4, r0
 801f99e:	460d      	mov	r5, r1
 801f9a0:	464b      	mov	r3, r9
 801f9a2:	4640      	mov	r0, r8
 801f9a4:	4649      	mov	r1, r9
 801f9a6:	f7e0 fc49 	bl	800023c <__adddf3>
 801f9aa:	4602      	mov	r2, r0
 801f9ac:	460b      	mov	r3, r1
 801f9ae:	4620      	mov	r0, r4
 801f9b0:	4629      	mov	r1, r5
 801f9b2:	f7e0 ff23 	bl	80007fc <__aeabi_ddiv>
 801f9b6:	4602      	mov	r2, r0
 801f9b8:	460b      	mov	r3, r1
 801f9ba:	4650      	mov	r0, sl
 801f9bc:	4659      	mov	r1, fp
 801f9be:	f7e0 fc3d 	bl	800023c <__adddf3>
 801f9c2:	4632      	mov	r2, r6
 801f9c4:	464b      	mov	r3, r9
 801f9c6:	f7e0 fc39 	bl	800023c <__adddf3>
 801f9ca:	4602      	mov	r2, r0
 801f9cc:	460b      	mov	r3, r1
 801f9ce:	f7e0 fc35 	bl	800023c <__adddf3>
 801f9d2:	e5fd      	b.n	801f5d0 <__ieee754_acos+0x40>
 801f9d4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801fa30 <__ieee754_acos+0x4a0>
 801f9d8:	e5ee      	b.n	801f5b8 <__ieee754_acos+0x28>
 801f9da:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801fa38 <__ieee754_acos+0x4a8>
 801f9de:	e5eb      	b.n	801f5b8 <__ieee754_acos+0x28>
 801f9e0:	0dfdf709 	.word	0x0dfdf709
 801f9e4:	3f023de1 	.word	0x3f023de1
 801f9e8:	7501b288 	.word	0x7501b288
 801f9ec:	3f49efe0 	.word	0x3f49efe0
 801f9f0:	b5688f3b 	.word	0xb5688f3b
 801f9f4:	3fa48228 	.word	0x3fa48228
 801f9f8:	0e884455 	.word	0x0e884455
 801f9fc:	3fc9c155 	.word	0x3fc9c155
 801fa00:	03eb6f7d 	.word	0x03eb6f7d
 801fa04:	3fd4d612 	.word	0x3fd4d612
 801fa08:	55555555 	.word	0x55555555
 801fa0c:	3fc55555 	.word	0x3fc55555
 801fa10:	b12e9282 	.word	0xb12e9282
 801fa14:	3fb3b8c5 	.word	0x3fb3b8c5
 801fa18:	1b8d0159 	.word	0x1b8d0159
 801fa1c:	3fe6066c 	.word	0x3fe6066c
 801fa20:	9c598ac8 	.word	0x9c598ac8
 801fa24:	40002ae5 	.word	0x40002ae5
 801fa28:	1c8a2d4b 	.word	0x1c8a2d4b
 801fa2c:	40033a27 	.word	0x40033a27
 801fa30:	54442d18 	.word	0x54442d18
 801fa34:	400921fb 	.word	0x400921fb
 801fa38:	54442d18 	.word	0x54442d18
 801fa3c:	3ff921fb 	.word	0x3ff921fb
 801fa40:	3ff00000 	.word	0x3ff00000
 801fa44:	3fe00000 	.word	0x3fe00000

0801fa48 <scalbn>:
 801fa48:	b570      	push	{r4, r5, r6, lr}
 801fa4a:	ec55 4b10 	vmov	r4, r5, d0
 801fa4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801fa52:	4606      	mov	r6, r0
 801fa54:	462b      	mov	r3, r5
 801fa56:	b991      	cbnz	r1, 801fa7e <scalbn+0x36>
 801fa58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801fa5c:	4323      	orrs	r3, r4
 801fa5e:	d03d      	beq.n	801fadc <scalbn+0x94>
 801fa60:	4b35      	ldr	r3, [pc, #212]	@ (801fb38 <scalbn+0xf0>)
 801fa62:	4620      	mov	r0, r4
 801fa64:	4629      	mov	r1, r5
 801fa66:	2200      	movs	r2, #0
 801fa68:	f7e0 fd9e 	bl	80005a8 <__aeabi_dmul>
 801fa6c:	4b33      	ldr	r3, [pc, #204]	@ (801fb3c <scalbn+0xf4>)
 801fa6e:	429e      	cmp	r6, r3
 801fa70:	4604      	mov	r4, r0
 801fa72:	460d      	mov	r5, r1
 801fa74:	da0f      	bge.n	801fa96 <scalbn+0x4e>
 801fa76:	a328      	add	r3, pc, #160	@ (adr r3, 801fb18 <scalbn+0xd0>)
 801fa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa7c:	e01e      	b.n	801fabc <scalbn+0x74>
 801fa7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801fa82:	4291      	cmp	r1, r2
 801fa84:	d10b      	bne.n	801fa9e <scalbn+0x56>
 801fa86:	4622      	mov	r2, r4
 801fa88:	4620      	mov	r0, r4
 801fa8a:	4629      	mov	r1, r5
 801fa8c:	f7e0 fbd6 	bl	800023c <__adddf3>
 801fa90:	4604      	mov	r4, r0
 801fa92:	460d      	mov	r5, r1
 801fa94:	e022      	b.n	801fadc <scalbn+0x94>
 801fa96:	460b      	mov	r3, r1
 801fa98:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801fa9c:	3936      	subs	r1, #54	@ 0x36
 801fa9e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801faa2:	4296      	cmp	r6, r2
 801faa4:	dd0d      	ble.n	801fac2 <scalbn+0x7a>
 801faa6:	2d00      	cmp	r5, #0
 801faa8:	a11d      	add	r1, pc, #116	@ (adr r1, 801fb20 <scalbn+0xd8>)
 801faaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801faae:	da02      	bge.n	801fab6 <scalbn+0x6e>
 801fab0:	a11d      	add	r1, pc, #116	@ (adr r1, 801fb28 <scalbn+0xe0>)
 801fab2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fab6:	a31a      	add	r3, pc, #104	@ (adr r3, 801fb20 <scalbn+0xd8>)
 801fab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fabc:	f7e0 fd74 	bl	80005a8 <__aeabi_dmul>
 801fac0:	e7e6      	b.n	801fa90 <scalbn+0x48>
 801fac2:	1872      	adds	r2, r6, r1
 801fac4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801fac8:	428a      	cmp	r2, r1
 801faca:	dcec      	bgt.n	801faa6 <scalbn+0x5e>
 801facc:	2a00      	cmp	r2, #0
 801face:	dd08      	ble.n	801fae2 <scalbn+0x9a>
 801fad0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fad4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fad8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fadc:	ec45 4b10 	vmov	d0, r4, r5
 801fae0:	bd70      	pop	{r4, r5, r6, pc}
 801fae2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801fae6:	da08      	bge.n	801fafa <scalbn+0xb2>
 801fae8:	2d00      	cmp	r5, #0
 801faea:	a10b      	add	r1, pc, #44	@ (adr r1, 801fb18 <scalbn+0xd0>)
 801faec:	e9d1 0100 	ldrd	r0, r1, [r1]
 801faf0:	dac1      	bge.n	801fa76 <scalbn+0x2e>
 801faf2:	a10f      	add	r1, pc, #60	@ (adr r1, 801fb30 <scalbn+0xe8>)
 801faf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801faf8:	e7bd      	b.n	801fa76 <scalbn+0x2e>
 801fafa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801fafe:	3236      	adds	r2, #54	@ 0x36
 801fb00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801fb04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801fb08:	4620      	mov	r0, r4
 801fb0a:	4b0d      	ldr	r3, [pc, #52]	@ (801fb40 <scalbn+0xf8>)
 801fb0c:	4629      	mov	r1, r5
 801fb0e:	2200      	movs	r2, #0
 801fb10:	e7d4      	b.n	801fabc <scalbn+0x74>
 801fb12:	bf00      	nop
 801fb14:	f3af 8000 	nop.w
 801fb18:	c2f8f359 	.word	0xc2f8f359
 801fb1c:	01a56e1f 	.word	0x01a56e1f
 801fb20:	8800759c 	.word	0x8800759c
 801fb24:	7e37e43c 	.word	0x7e37e43c
 801fb28:	8800759c 	.word	0x8800759c
 801fb2c:	fe37e43c 	.word	0xfe37e43c
 801fb30:	c2f8f359 	.word	0xc2f8f359
 801fb34:	81a56e1f 	.word	0x81a56e1f
 801fb38:	43500000 	.word	0x43500000
 801fb3c:	ffff3cb0 	.word	0xffff3cb0
 801fb40:	3c900000 	.word	0x3c900000

0801fb44 <__ieee754_sqrt>:
 801fb44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb48:	4a68      	ldr	r2, [pc, #416]	@ (801fcec <__ieee754_sqrt+0x1a8>)
 801fb4a:	ec55 4b10 	vmov	r4, r5, d0
 801fb4e:	43aa      	bics	r2, r5
 801fb50:	462b      	mov	r3, r5
 801fb52:	4621      	mov	r1, r4
 801fb54:	d110      	bne.n	801fb78 <__ieee754_sqrt+0x34>
 801fb56:	4622      	mov	r2, r4
 801fb58:	4620      	mov	r0, r4
 801fb5a:	4629      	mov	r1, r5
 801fb5c:	f7e0 fd24 	bl	80005a8 <__aeabi_dmul>
 801fb60:	4602      	mov	r2, r0
 801fb62:	460b      	mov	r3, r1
 801fb64:	4620      	mov	r0, r4
 801fb66:	4629      	mov	r1, r5
 801fb68:	f7e0 fb68 	bl	800023c <__adddf3>
 801fb6c:	4604      	mov	r4, r0
 801fb6e:	460d      	mov	r5, r1
 801fb70:	ec45 4b10 	vmov	d0, r4, r5
 801fb74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb78:	2d00      	cmp	r5, #0
 801fb7a:	dc0e      	bgt.n	801fb9a <__ieee754_sqrt+0x56>
 801fb7c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801fb80:	4322      	orrs	r2, r4
 801fb82:	d0f5      	beq.n	801fb70 <__ieee754_sqrt+0x2c>
 801fb84:	b19d      	cbz	r5, 801fbae <__ieee754_sqrt+0x6a>
 801fb86:	4622      	mov	r2, r4
 801fb88:	4620      	mov	r0, r4
 801fb8a:	4629      	mov	r1, r5
 801fb8c:	f7e0 fb54 	bl	8000238 <__aeabi_dsub>
 801fb90:	4602      	mov	r2, r0
 801fb92:	460b      	mov	r3, r1
 801fb94:	f7e0 fe32 	bl	80007fc <__aeabi_ddiv>
 801fb98:	e7e8      	b.n	801fb6c <__ieee754_sqrt+0x28>
 801fb9a:	152a      	asrs	r2, r5, #20
 801fb9c:	d115      	bne.n	801fbca <__ieee754_sqrt+0x86>
 801fb9e:	2000      	movs	r0, #0
 801fba0:	e009      	b.n	801fbb6 <__ieee754_sqrt+0x72>
 801fba2:	0acb      	lsrs	r3, r1, #11
 801fba4:	3a15      	subs	r2, #21
 801fba6:	0549      	lsls	r1, r1, #21
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d0fa      	beq.n	801fba2 <__ieee754_sqrt+0x5e>
 801fbac:	e7f7      	b.n	801fb9e <__ieee754_sqrt+0x5a>
 801fbae:	462a      	mov	r2, r5
 801fbb0:	e7fa      	b.n	801fba8 <__ieee754_sqrt+0x64>
 801fbb2:	005b      	lsls	r3, r3, #1
 801fbb4:	3001      	adds	r0, #1
 801fbb6:	02dc      	lsls	r4, r3, #11
 801fbb8:	d5fb      	bpl.n	801fbb2 <__ieee754_sqrt+0x6e>
 801fbba:	1e44      	subs	r4, r0, #1
 801fbbc:	1b12      	subs	r2, r2, r4
 801fbbe:	f1c0 0420 	rsb	r4, r0, #32
 801fbc2:	fa21 f404 	lsr.w	r4, r1, r4
 801fbc6:	4323      	orrs	r3, r4
 801fbc8:	4081      	lsls	r1, r0
 801fbca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fbce:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801fbd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fbd6:	07d2      	lsls	r2, r2, #31
 801fbd8:	bf5c      	itt	pl
 801fbda:	005b      	lslpl	r3, r3, #1
 801fbdc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801fbe0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801fbe4:	bf58      	it	pl
 801fbe6:	0049      	lslpl	r1, r1, #1
 801fbe8:	2600      	movs	r6, #0
 801fbea:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801fbee:	106d      	asrs	r5, r5, #1
 801fbf0:	0049      	lsls	r1, r1, #1
 801fbf2:	2016      	movs	r0, #22
 801fbf4:	4632      	mov	r2, r6
 801fbf6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801fbfa:	1917      	adds	r7, r2, r4
 801fbfc:	429f      	cmp	r7, r3
 801fbfe:	bfde      	ittt	le
 801fc00:	193a      	addle	r2, r7, r4
 801fc02:	1bdb      	suble	r3, r3, r7
 801fc04:	1936      	addle	r6, r6, r4
 801fc06:	0fcf      	lsrs	r7, r1, #31
 801fc08:	3801      	subs	r0, #1
 801fc0a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801fc0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fc12:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801fc16:	d1f0      	bne.n	801fbfa <__ieee754_sqrt+0xb6>
 801fc18:	4604      	mov	r4, r0
 801fc1a:	2720      	movs	r7, #32
 801fc1c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801fc20:	429a      	cmp	r2, r3
 801fc22:	eb00 0e0c 	add.w	lr, r0, ip
 801fc26:	db02      	blt.n	801fc2e <__ieee754_sqrt+0xea>
 801fc28:	d113      	bne.n	801fc52 <__ieee754_sqrt+0x10e>
 801fc2a:	458e      	cmp	lr, r1
 801fc2c:	d811      	bhi.n	801fc52 <__ieee754_sqrt+0x10e>
 801fc2e:	f1be 0f00 	cmp.w	lr, #0
 801fc32:	eb0e 000c 	add.w	r0, lr, ip
 801fc36:	da42      	bge.n	801fcbe <__ieee754_sqrt+0x17a>
 801fc38:	2800      	cmp	r0, #0
 801fc3a:	db40      	blt.n	801fcbe <__ieee754_sqrt+0x17a>
 801fc3c:	f102 0801 	add.w	r8, r2, #1
 801fc40:	1a9b      	subs	r3, r3, r2
 801fc42:	458e      	cmp	lr, r1
 801fc44:	bf88      	it	hi
 801fc46:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801fc4a:	eba1 010e 	sub.w	r1, r1, lr
 801fc4e:	4464      	add	r4, ip
 801fc50:	4642      	mov	r2, r8
 801fc52:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801fc56:	3f01      	subs	r7, #1
 801fc58:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801fc5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801fc60:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801fc64:	d1dc      	bne.n	801fc20 <__ieee754_sqrt+0xdc>
 801fc66:	4319      	orrs	r1, r3
 801fc68:	d01b      	beq.n	801fca2 <__ieee754_sqrt+0x15e>
 801fc6a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801fcf0 <__ieee754_sqrt+0x1ac>
 801fc6e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801fcf4 <__ieee754_sqrt+0x1b0>
 801fc72:	e9da 0100 	ldrd	r0, r1, [sl]
 801fc76:	e9db 2300 	ldrd	r2, r3, [fp]
 801fc7a:	f7e0 fadd 	bl	8000238 <__aeabi_dsub>
 801fc7e:	e9da 8900 	ldrd	r8, r9, [sl]
 801fc82:	4602      	mov	r2, r0
 801fc84:	460b      	mov	r3, r1
 801fc86:	4640      	mov	r0, r8
 801fc88:	4649      	mov	r1, r9
 801fc8a:	f7e0 ff09 	bl	8000aa0 <__aeabi_dcmple>
 801fc8e:	b140      	cbz	r0, 801fca2 <__ieee754_sqrt+0x15e>
 801fc90:	f1b4 3fff 	cmp.w	r4, #4294967295
 801fc94:	e9da 0100 	ldrd	r0, r1, [sl]
 801fc98:	e9db 2300 	ldrd	r2, r3, [fp]
 801fc9c:	d111      	bne.n	801fcc2 <__ieee754_sqrt+0x17e>
 801fc9e:	3601      	adds	r6, #1
 801fca0:	463c      	mov	r4, r7
 801fca2:	1072      	asrs	r2, r6, #1
 801fca4:	0863      	lsrs	r3, r4, #1
 801fca6:	07f1      	lsls	r1, r6, #31
 801fca8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801fcac:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801fcb0:	bf48      	it	mi
 801fcb2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801fcb6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801fcba:	4618      	mov	r0, r3
 801fcbc:	e756      	b.n	801fb6c <__ieee754_sqrt+0x28>
 801fcbe:	4690      	mov	r8, r2
 801fcc0:	e7be      	b.n	801fc40 <__ieee754_sqrt+0xfc>
 801fcc2:	f7e0 fabb 	bl	800023c <__adddf3>
 801fcc6:	e9da 8900 	ldrd	r8, r9, [sl]
 801fcca:	4602      	mov	r2, r0
 801fccc:	460b      	mov	r3, r1
 801fcce:	4640      	mov	r0, r8
 801fcd0:	4649      	mov	r1, r9
 801fcd2:	f7e0 fedb 	bl	8000a8c <__aeabi_dcmplt>
 801fcd6:	b120      	cbz	r0, 801fce2 <__ieee754_sqrt+0x19e>
 801fcd8:	1ca0      	adds	r0, r4, #2
 801fcda:	bf08      	it	eq
 801fcdc:	3601      	addeq	r6, #1
 801fcde:	3402      	adds	r4, #2
 801fce0:	e7df      	b.n	801fca2 <__ieee754_sqrt+0x15e>
 801fce2:	1c63      	adds	r3, r4, #1
 801fce4:	f023 0401 	bic.w	r4, r3, #1
 801fce8:	e7db      	b.n	801fca2 <__ieee754_sqrt+0x15e>
 801fcea:	bf00      	nop
 801fcec:	7ff00000 	.word	0x7ff00000
 801fcf0:	20000318 	.word	0x20000318
 801fcf4:	20000310 	.word	0x20000310

0801fcf8 <_init>:
 801fcf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fcfa:	bf00      	nop
 801fcfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fcfe:	bc08      	pop	{r3}
 801fd00:	469e      	mov	lr, r3
 801fd02:	4770      	bx	lr

0801fd04 <_fini>:
 801fd04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd06:	bf00      	nop
 801fd08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fd0a:	bc08      	pop	{r3}
 801fd0c:	469e      	mov	lr, r3
 801fd0e:	4770      	bx	lr
