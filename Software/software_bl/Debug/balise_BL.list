
balise_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ba40  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ab8  0801bb80  0801bb80  0001cb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e638  0801e638  0001f638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e640  0801e640  0001f640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e644  0801e644  0001f644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000300  20000008  0801e648  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002b00  20000308  0801e948  00020308  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20002e08  0801e948  00020e08  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 10 .debug_info   00036784  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000078f0  00000000  00000000  00056abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ea0  00000000  00000000  0005e3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000023a7  00000000  00000000  00061250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002e8a3  00000000  00000000  000635f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003b177  00000000  00000000  00091e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00105c10  00000000  00000000  000cd011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d2c21  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000df8c  00000000  00000000  001d2c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001e0bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	0801bb68 	.word	0x0801bb68

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	0801bb68 	.word	0x0801bb68

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff0b 	bl	8000a8c <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fc81 	bl	80005a8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc02 	bl	80004b4 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fc78 	bl	80005a8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff faba 	bl	8000238 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000fb0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
}
 8000fba:	bf00      	nop
 8000fbc:	3714      	adds	r7, #20
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fde:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <MX_ADC1_Init+0xfc>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fe4:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ff0:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ff6:	4b32      	ldr	r3, [pc, #200]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8000ffe:	2204      	movs	r2, #4
 8001000:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800100a:	2201      	movs	r2, #1
 800100c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800100e:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001010:	2203      	movs	r2, #3
 8001012:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800101e:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 8001022:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001026:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800102a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800102c:	4b24      	ldr	r3, [pc, #144]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800102e:	2200      	movs	r2, #0
 8001030:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001036:	2200      	movs	r2, #0
 8001038:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001042:	481f      	ldr	r0, [pc, #124]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001044:	f005 fcf0 	bl	8006a28 <HAL_ADC_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800104e:	f000 ff30 	bl	8001eb2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <MX_ADC1_Init+0x100>)
 8001054:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001056:	2306      	movs	r3, #6
 8001058:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800105a:	2307      	movs	r3, #7
 800105c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800105e:	237f      	movs	r3, #127	@ 0x7f
 8001060:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001062:	2304      	movs	r3, #4
 8001064:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4814      	ldr	r0, [pc, #80]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 8001070:	f005 febe 	bl	8006df0 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800107a:	f000 ff1a 	bl	8001eb2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800107e:	4b13      	ldr	r3, [pc, #76]	@ (80010cc <MX_ADC1_Init+0x104>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	480d      	ldr	r0, [pc, #52]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 800108c:	f005 feb0 	bl	8006df0 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001096:	f000 ff0c 	bl	8001eb2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800109a:	4b0d      	ldr	r3, [pc, #52]	@ (80010d0 <MX_ADC1_Init+0x108>)
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109e:	2312      	movs	r3, #18
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	4806      	ldr	r0, [pc, #24]	@ (80010c0 <MX_ADC1_Init+0xf8>)
 80010a8:	f005 fea2 	bl	8006df0 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80010b2:	f000 fefe 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000324 	.word	0x20000324
 80010c4:	50040000 	.word	0x50040000
 80010c8:	80000001 	.word	0x80000001
 80010cc:	c7520000 	.word	0xc7520000
 80010d0:	25b00200 	.word	0x25b00200

080010d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 030c 	add.w	r3, r7, #12
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a22      	ldr	r2, [pc, #136]	@ (800117c <HAL_ADC_MspInit+0xa8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d13e      	bne.n	8001174 <HAL_ADC_MspInit+0xa0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80010f6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010fa:	f7ff ff4b 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff ff48 	bl	8000f94 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001104:	2310      	movs	r3, #16
 8001106:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111a:	f006 ff8b 	bl	8008034 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001120:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <HAL_ADC_MspInit+0xb0>)
 8001122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001126:	2205      	movs	r2, #5
 8001128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001136:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001138:	2280      	movs	r2, #128	@ 0x80
 800113a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800113e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001142:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800114a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800114c:	4b0c      	ldr	r3, [pc, #48]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800114e:	2220      	movs	r2, #32
 8001150:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800115a:	f006 fc2d 	bl	80079b8 <HAL_DMA_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001164:	f000 fea5 	bl	8001eb2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 800116c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <HAL_ADC_MspInit+0xac>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3720      	adds	r7, #32
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	50040000 	.word	0x50040000
 8001180:	20000388 	.word	0x20000388
 8001184:	40020008 	.word	0x40020008

08001188 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001188:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_ADC_ConvCpltCallback+0x160>)
 8001198:	4293      	cmp	r3, r2
 800119a:	f040 8091 	bne.w	80012c0 <HAL_ADC_ConvCpltCallback+0x138>
		vrefint=(float) ((4095.0*1.212)/rawdata[0]);
 800119e:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011a0:	881b      	ldrh	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f996 	bl	80004d4 <__aeabi_i2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	a14a      	add	r1, pc, #296	@ (adr r1, 80012d8 <HAL_ADC_ConvCpltCallback+0x150>)
 80011ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011b2:	f7ff fb23 	bl	80007fc <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f7ff fceb 	bl	8000b98 <__aeabi_d2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 80011c6:	6013      	str	r3, [r2, #0]
//		vtemp=(float) ((vrefint*rawdata[1])/4095.0);
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80011c8:	4b4a      	ldr	r3, [pc, #296]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x16c>)
 80011ca:	ed93 7a00 	vldr	s14, [r3]
 80011ce:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011d8:	ee17 0a90 	vmov	r0, s15
 80011dc:	f7ff f98c 	bl	80004f8 <__aeabi_f2d>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	f04f 0000 	mov.w	r0, #0
 80011e8:	4944      	ldr	r1, [pc, #272]	@ (80012fc <HAL_ADC_ConvCpltCallback+0x174>)
 80011ea:	f7ff fb07 	bl	80007fc <__aeabi_ddiv>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4690      	mov	r8, r2
 80011f4:	4699      	mov	r9, r3
 80011f6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80011f8:	885b      	ldrh	r3, [r3, #2]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f96a 	bl	80004d4 <__aeabi_i2d>
 8001200:	4604      	mov	r4, r0
 8001202:	460d      	mov	r5, r1
 8001204:	4b3a      	ldr	r3, [pc, #232]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f975 	bl	80004f8 <__aeabi_f2d>
 800120e:	f04f 0200 	mov.w	r2, #0
 8001212:	4b3b      	ldr	r3, [pc, #236]	@ (8001300 <HAL_ADC_ConvCpltCallback+0x178>)
 8001214:	f7ff faf2 	bl	80007fc <__aeabi_ddiv>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f9c2 	bl	80005a8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4614      	mov	r4, r2
 800122a:	461d      	mov	r5, r3
 800122c:	4b32      	ldr	r3, [pc, #200]	@ (80012f8 <HAL_ADC_ConvCpltCallback+0x170>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f961 	bl	80004f8 <__aeabi_f2d>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4620      	mov	r0, r4
 800123c:	4629      	mov	r1, r5
 800123e:	f7fe fffb 	bl	8000238 <__aeabi_dsub>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4640      	mov	r0, r8
 8001248:	4649      	mov	r1, r9
 800124a:	f7ff f9ad 	bl	80005a8 <__aeabi_dmul>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	4610      	mov	r0, r2
 8001254:	4619      	mov	r1, r3
 8001256:	f7ff fc9f 	bl	8000b98 <__aeabi_d2f>
 800125a:	ee07 0a10 	vmov	s14, r0
 800125e:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 8001262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001266:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001268:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 2*(rawdata[2]/4095.0)*vrefint;
 800126c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 800126e:	889b      	ldrh	r3, [r3, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f92f 	bl	80004d4 <__aeabi_i2d>
 8001276:	a31a      	add	r3, pc, #104	@ (adr r3, 80012e0 <HAL_ADC_ConvCpltCallback+0x158>)
 8001278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127c:	f7ff fabe 	bl	80007fc <__aeabi_ddiv>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4610      	mov	r0, r2
 8001286:	4619      	mov	r1, r3
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	f7fe ffd6 	bl	800023c <__adddf3>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4614      	mov	r4, r2
 8001296:	461d      	mov	r5, r3
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <HAL_ADC_ConvCpltCallback+0x168>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f92b 	bl	80004f8 <__aeabi_f2d>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7ff f97d 	bl	80005a8 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f7ff fc6f 	bl	8000b98 <__aeabi_d2f>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_ADC_ConvCpltCallback+0x180>)
 80012be:	6013      	str	r3, [r2, #0]

	}
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 80012c0:	2203      	movs	r2, #3
 80012c2:	490a      	ldr	r1, [pc, #40]	@ (80012ec <HAL_ADC_ConvCpltCallback+0x164>)
 80012c4:	4811      	ldr	r0, [pc, #68]	@ (800130c <HAL_ADC_ConvCpltCallback+0x184>)
 80012c6:	f005 fcfb 	bl	8006cc0 <HAL_ADC_Start_DMA>



}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	d70a3d70 	.word	0xd70a3d70
 80012dc:	40b36323 	.word	0x40b36323
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40affe00 	.word	0x40affe00
 80012e8:	50040000 	.word	0x50040000
 80012ec:	200007a0 	.word	0x200007a0
 80012f0:	200007ac 	.word	0x200007ac
 80012f4:	20000008 	.word	0x20000008
 80012f8:	2000000c 	.word	0x2000000c
 80012fc:	40590000 	.word	0x40590000
 8001300:	40080000 	.word	0x40080000
 8001304:	200007a8 	.word	0x200007a8
 8001308:	200007b0 	.word	0x200007b0
 800130c:	20000324 	.word	0x20000324

08001310 <bmp581_init_precise_normal>:
extern float temp;
uint8_t odrcheck=0;

//Ox18 donc 11000 pour ODR donc 5hz en mode normal avec oversampling a 128 pour la pression et 8 pour la temperature

uint8_t bmp581_init_precise_normal(BMP_t * bmp581){
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af04      	add	r7, sp, #16
 8001316:	6078      	str	r0, [r7, #4]

//	uint8_t OSR_tmask = 0b01111111;
//	uint8_t ODR_tmask = 0b01100001;

	uint8_t OSR_tmask = 0b01111011;
 8001318:	237b      	movs	r3, #123	@ 0x7b
 800131a:	72fb      	strb	r3, [r7, #11]
	uint8_t ODR_tmask = 0b01101001;
 800131c:	2369      	movs	r3, #105	@ 0x69
 800131e:	72bb      	strb	r3, [r7, #10]
	uint8_t DSP_conf_mask = 0b00101011;
 8001320:	232b      	movs	r3, #43	@ 0x2b
 8001322:	727b      	strb	r3, [r7, #9]
	uint8_t DSP_conf_mask2 = 0b00010010;
 8001324:	2312      	movs	r3, #18
 8001326:	723b      	strb	r3, [r7, #8]
	int check=0;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_OSR_CONFIG, 1, &OSR_tmask, 1, 100)!=HAL_OK){
 800132c:	2364      	movs	r3, #100	@ 0x64
 800132e:	9302      	str	r3, [sp, #8]
 8001330:	2301      	movs	r3, #1
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	f107 030b 	add.w	r3, r7, #11
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2301      	movs	r3, #1
 800133c:	2236      	movs	r2, #54	@ 0x36
 800133e:	218e      	movs	r1, #142	@ 0x8e
 8001340:	482a      	ldr	r0, [pc, #168]	@ (80013ec <bmp581_init_precise_normal+0xdc>)
 8001342:	f007 f909 	bl	8008558 <HAL_I2C_Mem_Write>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <bmp581_init_precise_normal+0x40>
			check=1;
 800134c:	2301      	movs	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
		}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_ODR_CONFIG, 1, &ODR_tmask, 1, 100)!=HAL_OK){
 8001350:	2364      	movs	r3, #100	@ 0x64
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2301      	movs	r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	f107 030a 	add.w	r3, r7, #10
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	2237      	movs	r2, #55	@ 0x37
 8001362:	218e      	movs	r1, #142	@ 0x8e
 8001364:	4821      	ldr	r0, [pc, #132]	@ (80013ec <bmp581_init_precise_normal+0xdc>)
 8001366:	f007 f8f7 	bl	8008558 <HAL_I2C_Mem_Write>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <bmp581_init_precise_normal+0x64>
					check=1;
 8001370:	2301      	movs	r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask, 1, 100)!=HAL_OK){
 8001374:	2364      	movs	r3, #100	@ 0x64
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2301      	movs	r3, #1
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	f107 0309 	add.w	r3, r7, #9
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2301      	movs	r3, #1
 8001384:	2230      	movs	r2, #48	@ 0x30
 8001386:	218e      	movs	r1, #142	@ 0x8e
 8001388:	4818      	ldr	r0, [pc, #96]	@ (80013ec <bmp581_init_precise_normal+0xdc>)
 800138a:	f007 f8e5 	bl	8008558 <HAL_I2C_Mem_Write>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <bmp581_init_precise_normal+0x88>
				check=1;
 8001394:	2301      	movs	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
			}
	if(HAL_I2C_Mem_Write(&hi2c1, BMP581_WRITE_ADDR, BMP581_DSP_CONFIG, 1, &DSP_conf_mask2, 1, 100)!=HAL_OK){
 8001398:	2364      	movs	r3, #100	@ 0x64
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	2301      	movs	r3, #1
 800139e:	9301      	str	r3, [sp, #4]
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2301      	movs	r3, #1
 80013a8:	2230      	movs	r2, #48	@ 0x30
 80013aa:	218e      	movs	r1, #142	@ 0x8e
 80013ac:	480f      	ldr	r0, [pc, #60]	@ (80013ec <bmp581_init_precise_normal+0xdc>)
 80013ae:	f007 f8d3 	bl	8008558 <HAL_I2C_Mem_Write>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <bmp581_init_precise_normal+0xac>
					check=1;
 80013b8:	2301      	movs	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
				}
	if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_OSR_EFF, 1, &odrcheck, 1, 100)!=HAL_OK){
 80013bc:	2364      	movs	r3, #100	@ 0x64
 80013be:	9302      	str	r3, [sp, #8]
 80013c0:	2301      	movs	r3, #1
 80013c2:	9301      	str	r3, [sp, #4]
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <bmp581_init_precise_normal+0xe0>)
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	2301      	movs	r3, #1
 80013ca:	2238      	movs	r2, #56	@ 0x38
 80013cc:	218f      	movs	r1, #143	@ 0x8f
 80013ce:	4807      	ldr	r0, [pc, #28]	@ (80013ec <bmp581_init_precise_normal+0xdc>)
 80013d0:	f007 f9d6 	bl	8008780 <HAL_I2C_Mem_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <bmp581_init_precise_normal+0xce>
					check=1;
 80013da:	2301      	movs	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
				}


	return check;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	b2db      	uxtb	r3, r3

}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000404 	.word	0x20000404
 80013f0:	20000400 	.word	0x20000400
 80013f4:	00000000 	.word	0x00000000

080013f8 <bmp581_read_precise_normal>:




uint8_t bmp581_read_precise_normal(BMP_t * bmp581){
 80013f8:	b5b0      	push	{r4, r5, r7, lr}
 80013fa:	b08e      	sub	sp, #56	@ 0x38
 80013fc:	af04      	add	r7, sp, #16
 80013fe:	6078      	str	r0, [r7, #4]
		int check=0;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
		uint8_t recarray[6];
		int32_t intbuffertemp=0;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
		int32_t intbufferpres=0;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]

		double tmoy=0;
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c7 2304 	strd	r2, r3, [r7, #16]
//			check=1;
//		}
//		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_PRESS_DATA_MSB, 1, &recarray[5], 1, 100)!=HAL_OK){
//			check=1;
//		}
		if(HAL_I2C_Mem_Read(&hi2c1, BMP581_READ_ADDR, BMP581_TEMP_DATA_XLSB, 1, &recarray, 6, 100)!=HAL_OK){
 8001418:	2364      	movs	r3, #100	@ 0x64
 800141a:	9302      	str	r3, [sp, #8]
 800141c:	2306      	movs	r3, #6
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	221d      	movs	r2, #29
 800142a:	218f      	movs	r1, #143	@ 0x8f
 800142c:	4866      	ldr	r0, [pc, #408]	@ (80015c8 <bmp581_read_precise_normal+0x1d0>)
 800142e:	f007 f9a7 	bl	8008780 <HAL_I2C_Mem_Read>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <bmp581_read_precise_normal+0x44>
					check=1;
 8001438:	2301      	movs	r3, #1
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
				}


		if(check==0){
 800143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 80a1 	bne.w	8001586 <bmp581_read_precise_normal+0x18e>

		intbuffertemp=(recarray[2]<<16)|(recarray[1]<<8)|(recarray[0]);
 8001444:	7abb      	ldrb	r3, [r7, #10]
 8001446:	041a      	lsls	r2, r3, #16
 8001448:	7a7b      	ldrb	r3, [r7, #9]
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	4313      	orrs	r3, r2
 800144e:	7a3a      	ldrb	r2, [r7, #8]
 8001450:	4313      	orrs	r3, r2
 8001452:	623b      	str	r3, [r7, #32]
		intbufferpres=(recarray[5]<<16)|(recarray[4]<<8)|(recarray[3]);
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	041a      	lsls	r2, r3, #16
 8001458:	7b3b      	ldrb	r3, [r7, #12]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	4313      	orrs	r3, r2
 800145e:	7afa      	ldrb	r2, [r7, #11]
 8001460:	4313      	orrs	r3, r2
 8001462:	61fb      	str	r3, [r7, #28]
		bmptemp=(double)intbuffertemp/65536.0;
 8001464:	6a38      	ldr	r0, [r7, #32]
 8001466:	f7ff f835 	bl	80004d4 <__aeabi_i2d>
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	4b57      	ldr	r3, [pc, #348]	@ (80015cc <bmp581_read_precise_normal+0x1d4>)
 8001470:	f7ff f9c4 	bl	80007fc <__aeabi_ddiv>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4955      	ldr	r1, [pc, #340]	@ (80015d0 <bmp581_read_precise_normal+0x1d8>)
 800147a:	e9c1 2300 	strd	r2, r3, [r1]
		bmppress=(double) intbufferpres/64.0;
 800147e:	69f8      	ldr	r0, [r7, #28]
 8001480:	f7ff f828 	bl	80004d4 <__aeabi_i2d>
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	4b52      	ldr	r3, [pc, #328]	@ (80015d4 <bmp581_read_precise_normal+0x1dc>)
 800148a:	f7ff f9b7 	bl	80007fc <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4951      	ldr	r1, [pc, #324]	@ (80015d8 <bmp581_read_precise_normal+0x1e0>)
 8001494:	e9c1 2300 	strd	r2, r3, [r1]

		//alt=(double)(288.15/0.0065)*(1-pow((double)(finalpress*1000.0)/101325.0, (double)(287.05*0.0065)/(9.80665)));
		bmpalt=(double) ((8.314*293.15)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 8001498:	4b4f      	ldr	r3, [pc, #316]	@ (80015d8 <bmp581_read_precise_normal+0x1e0>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	a13e      	add	r1, pc, #248	@ (adr r1, 8001598 <bmp581_read_precise_normal+0x1a0>)
 80014a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014a4:	f7ff f9aa 	bl	80007fc <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	ec43 2b17 	vmov	d7, r2, r3
 80014b0:	eeb0 0a47 	vmov.f32	s0, s14
 80014b4:	eef0 0a67 	vmov.f32	s1, s15
 80014b8:	f018 fbe2 	bl	8019c80 <log>
 80014bc:	ec51 0b10 	vmov	r0, r1, d0
 80014c0:	a337      	add	r3, pc, #220	@ (adr r3, 80015a0 <bmp581_read_precise_normal+0x1a8>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f86f 	bl	80005a8 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4943      	ldr	r1, [pc, #268]	@ (80015dc <bmp581_read_precise_normal+0x1e4>)
 80014d0:	e9c1 2300 	strd	r2, r3, [r1]
		tmoy=(double) 293.15+bmptemp+(0.0065*bmpalt)/2;
 80014d4:	4b3e      	ldr	r3, [pc, #248]	@ (80015d0 <bmp581_read_precise_normal+0x1d8>)
 80014d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014da:	a333      	add	r3, pc, #204	@ (adr r3, 80015a8 <bmp581_read_precise_normal+0x1b0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7fe feac 	bl	800023c <__adddf3>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4614      	mov	r4, r2
 80014ea:	461d      	mov	r5, r3
 80014ec:	4b3b      	ldr	r3, [pc, #236]	@ (80015dc <bmp581_read_precise_normal+0x1e4>)
 80014ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014f2:	a32f      	add	r3, pc, #188	@ (adr r3, 80015b0 <bmp581_read_precise_normal+0x1b8>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	f7ff f856 	bl	80005a8 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4610      	mov	r0, r2
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800150c:	f7ff f976 	bl	80007fc <__aeabi_ddiv>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4620      	mov	r0, r4
 8001516:	4629      	mov	r1, r5
 8001518:	f7fe fe90 	bl	800023c <__adddf3>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	e9c7 2304 	strd	r2, r3, [r7, #16]
		bmpalt=(double) ((8.314*tmoy)/(9.80665*0.028964))*log((double)101325.0/(bmppress));
 8001524:	a324      	add	r3, pc, #144	@ (adr r3, 80015b8 <bmp581_read_precise_normal+0x1c0>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800152e:	f7ff f83b 	bl	80005a8 <__aeabi_dmul>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4610      	mov	r0, r2
 8001538:	4619      	mov	r1, r3
 800153a:	a321      	add	r3, pc, #132	@ (adr r3, 80015c0 <bmp581_read_precise_normal+0x1c8>)
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	f7ff f95c 	bl	80007fc <__aeabi_ddiv>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4614      	mov	r4, r2
 800154a:	461d      	mov	r5, r3
 800154c:	4b22      	ldr	r3, [pc, #136]	@ (80015d8 <bmp581_read_precise_normal+0x1e0>)
 800154e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001552:	a111      	add	r1, pc, #68	@ (adr r1, 8001598 <bmp581_read_precise_normal+0x1a0>)
 8001554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001558:	f7ff f950 	bl	80007fc <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	ec43 2b17 	vmov	d7, r2, r3
 8001564:	eeb0 0a47 	vmov.f32	s0, s14
 8001568:	eef0 0a67 	vmov.f32	s1, s15
 800156c:	f018 fb88 	bl	8019c80 <log>
 8001570:	ec53 2b10 	vmov	r2, r3, d0
 8001574:	4620      	mov	r0, r4
 8001576:	4629      	mov	r1, r5
 8001578:	f7ff f816 	bl	80005a8 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4916      	ldr	r1, [pc, #88]	@ (80015dc <bmp581_read_precise_normal+0x1e4>)
 8001582:	e9c1 2300 	strd	r2, r3, [r1]



		}

		return check;
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	b2db      	uxtb	r3, r3
}
 800158a:	4618      	mov	r0, r3
 800158c:	3728      	adds	r7, #40	@ 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bdb0      	pop	{r4, r5, r7, pc}
 8001592:	bf00      	nop
 8001594:	f3af 8000 	nop.w
 8001598:	00000000 	.word	0x00000000
 800159c:	40f8bcd0 	.word	0x40f8bcd0
 80015a0:	81a9275b 	.word	0x81a9275b
 80015a4:	40c0c254 	.word	0x40c0c254
 80015a8:	66666666 	.word	0x66666666
 80015ac:	40725266 	.word	0x40725266
 80015b0:	76c8b439 	.word	0x76c8b439
 80015b4:	3f7a9fbe 	.word	0x3f7a9fbe
 80015b8:	9ba5e354 	.word	0x9ba5e354
 80015bc:	4020a0c4 	.word	0x4020a0c4
 80015c0:	50527f89 	.word	0x50527f89
 80015c4:	3fd22db5 	.word	0x3fd22db5
 80015c8:	20000404 	.word	0x20000404
 80015cc:	40f00000 	.word	0x40f00000
 80015d0:	200003e8 	.word	0x200003e8
 80015d4:	40500000 	.word	0x40500000
 80015d8:	200003f0 	.word	0x200003f0
 80015dc:	200003f8 	.word	0x200003f8

080015e0 <LL_AHB1_GRP1_EnableClock>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80015f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001616:	2004      	movs	r0, #4
 8001618:	f7ff ffe2 	bl	80015e0 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800161c:	2001      	movs	r0, #1
 800161e:	f7ff ffdf 	bl	80015e0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 4, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2104      	movs	r1, #4
 8001626:	200b      	movs	r0, #11
 8001628:	f006 f991 	bl	800794e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800162c:	200b      	movs	r0, #11
 800162e:	f006 f9a8 	bl	8007982 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2102      	movs	r1, #2
 8001636:	200c      	movs	r0, #12
 8001638:	f006 f989 	bl	800794e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800163c:	200c      	movs	r0, #12
 800163e:	f006 f9a0 	bl	8007982 <HAL_NVIC_EnableIRQ>

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}

08001646 <LL_AHB2_GRP1_EnableClock>:
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001652:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001654:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800165e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001662:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4013      	ands	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800166a:	68fb      	ldr	r3, [r7, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168c:	2004      	movs	r0, #4
 800168e:	f7ff ffda 	bl	8001646 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff ffd7 	bl	8001646 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff ffd4 	bl	8001646 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	2101      	movs	r1, #1
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a6:	f006 fe4d 	bl	8008344 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2183      	movs	r1, #131	@ 0x83
 80016ae:	481b      	ldr	r0, [pc, #108]	@ (800171c <MX_GPIO_Init+0xa4>)
 80016b0:	f006 fe48 	bl	8008344 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80016b4:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80016b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016ba:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80016be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	4619      	mov	r1, r3
 80016c8:	4815      	ldr	r0, [pc, #84]	@ (8001720 <MX_GPIO_Init+0xa8>)
 80016ca:	f006 fcb3 	bl	8008034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016ce:	2301      	movs	r3, #1
 80016d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e6:	f006 fca5 	bl	8008034 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|SPI_CS_Pin;
 80016ea:	2383      	movs	r3, #131	@ 0x83
 80016ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ee:	2301      	movs	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4807      	ldr	r0, [pc, #28]	@ (800171c <MX_GPIO_Init+0xa4>)
 8001700:	f006 fc98 	bl	8008034 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2101      	movs	r1, #1
 8001708:	2028      	movs	r0, #40	@ 0x28
 800170a:	f006 f920 	bl	800794e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800170e:	2028      	movs	r0, #40	@ 0x28
 8001710:	f006 f937 	bl	8007982 <HAL_NVIC_EnableIRQ>

}
 8001714:	bf00      	nop
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	48000400 	.word	0x48000400
 8001720:	48000800 	.word	0x48000800

08001724 <LL_AHB2_GRP1_EnableClock>:
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800172c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001730:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4313      	orrs	r3, r2
 800173a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800173c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001740:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001748:	68fb      	ldr	r3, [r7, #12]
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001756:	b480      	push	{r7}
 8001758:	b085      	sub	sp, #20
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800175e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001762:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001764:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4313      	orrs	r3, r2
 800176c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800176e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001772:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4013      	ands	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177a:	68fb      	ldr	r3, [r7, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_I2C1_Init+0x74>)
 800178e:	4a1c      	ldr	r2, [pc, #112]	@ (8001800 <MX_I2C1_Init+0x78>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_I2C1_Init+0x74>)
 8001794:	4a1b      	ldr	r2, [pc, #108]	@ (8001804 <MX_I2C1_Init+0x7c>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_I2C1_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_I2C1_Init+0x74>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_I2C1_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_I2C1_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <MX_I2C1_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_I2C1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <MX_I2C1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c2:	480e      	ldr	r0, [pc, #56]	@ (80017fc <MX_I2C1_Init+0x74>)
 80017c4:	f006 fe2c 	bl	8008420 <HAL_I2C_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017ce:	f000 fb70 	bl	8001eb2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d2:	2100      	movs	r1, #0
 80017d4:	4809      	ldr	r0, [pc, #36]	@ (80017fc <MX_I2C1_Init+0x74>)
 80017d6:	f007 fbaf 	bl	8008f38 <HAL_I2CEx_ConfigAnalogFilter>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017e0:	f000 fb67 	bl	8001eb2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017e4:	2100      	movs	r1, #0
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_I2C1_Init+0x74>)
 80017e8:	f007 fbf1 	bl	8008fce <HAL_I2CEx_ConfigDigitalFilter>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 fb5e 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000404 	.word	0x20000404
 8001800:	40005400 	.word	0x40005400
 8001804:	10b17db5 	.word	0x10b17db5

08001808 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800180c:	4b1d      	ldr	r3, [pc, #116]	@ (8001884 <MX_I2C3_Init+0x7c>)
 800180e:	4a1e      	ldr	r2, [pc, #120]	@ (8001888 <MX_I2C3_Init+0x80>)
 8001810:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00910B1C;
 8001812:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <MX_I2C3_Init+0x7c>)
 8001814:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <MX_I2C3_Init+0x84>)
 8001816:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001818:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <MX_I2C3_Init+0x7c>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181e:	4b19      	ldr	r3, [pc, #100]	@ (8001884 <MX_I2C3_Init+0x7c>)
 8001820:	2201      	movs	r2, #1
 8001822:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001824:	4b17      	ldr	r3, [pc, #92]	@ (8001884 <MX_I2C3_Init+0x7c>)
 8001826:	2200      	movs	r2, #0
 8001828:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800182a:	4b16      	ldr	r3, [pc, #88]	@ (8001884 <MX_I2C3_Init+0x7c>)
 800182c:	2200      	movs	r2, #0
 800182e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001830:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <MX_I2C3_Init+0x7c>)
 8001832:	2200      	movs	r2, #0
 8001834:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001836:	4b13      	ldr	r3, [pc, #76]	@ (8001884 <MX_I2C3_Init+0x7c>)
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800183c:	4b11      	ldr	r3, [pc, #68]	@ (8001884 <MX_I2C3_Init+0x7c>)
 800183e:	2200      	movs	r2, #0
 8001840:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001842:	4810      	ldr	r0, [pc, #64]	@ (8001884 <MX_I2C3_Init+0x7c>)
 8001844:	f006 fdec 	bl	8008420 <HAL_I2C_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800184e:	f000 fb30 	bl	8001eb2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001852:	2100      	movs	r1, #0
 8001854:	480b      	ldr	r0, [pc, #44]	@ (8001884 <MX_I2C3_Init+0x7c>)
 8001856:	f007 fb6f 	bl	8008f38 <HAL_I2CEx_ConfigAnalogFilter>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001860:	f000 fb27 	bl	8001eb2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001864:	2100      	movs	r1, #0
 8001866:	4807      	ldr	r0, [pc, #28]	@ (8001884 <MX_I2C3_Init+0x7c>)
 8001868:	f007 fbb1 	bl	8008fce <HAL_I2CEx_ConfigDigitalFilter>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001872:	f000 fb1e 	bl	8001eb2 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C3);
 8001876:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 800187a:	f007 fbf5 	bl	8009068 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000458 	.word	0x20000458
 8001888:	40005c00 	.word	0x40005c00
 800188c:	00910b1c 	.word	0x00910b1c

08001890 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b09c      	sub	sp, #112	@ 0x70
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2250      	movs	r2, #80	@ 0x50
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f015 fcce 	bl	8017252 <memset>
  if(i2cHandle->Instance==I2C1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a37      	ldr	r2, [pc, #220]	@ (8001998 <HAL_I2C_MspInit+0x108>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d127      	bne.n	8001910 <HAL_I2C_MspInit+0x80>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80018c0:	2304      	movs	r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80018c4:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00a fd53 	bl	800c37a <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018da:	f000 faea 	bl	8001eb2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	2002      	movs	r0, #2
 80018e0:	f7ff ff20 	bl	8001724 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ea:	2312      	movs	r3, #18
 80018ec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018f6:	2304      	movs	r3, #4
 80018f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80018fe:	4619      	mov	r1, r3
 8001900:	4826      	ldr	r0, [pc, #152]	@ (800199c <HAL_I2C_MspInit+0x10c>)
 8001902:	f006 fb97 	bl	8008034 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001906:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800190a:	f7ff ff24 	bl	8001756 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800190e:	e03e      	b.n	800198e <HAL_I2C_MspInit+0xfe>
  else if(i2cHandle->Instance==I2C3)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a22      	ldr	r2, [pc, #136]	@ (80019a0 <HAL_I2C_MspInit+0x110>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d139      	bne.n	800198e <HAL_I2C_MspInit+0xfe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800191a:	2308      	movs	r3, #8
 800191c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800191e:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001922:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	4618      	mov	r0, r3
 800192a:	f00a fd26 	bl	800c37a <HAL_RCCEx_PeriphCLKConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_I2C_MspInit+0xa8>
      Error_Handler();
 8001934:	f000 fabd 	bl	8001eb2 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	2001      	movs	r0, #1
 800193a:	f7ff fef3 	bl	8001724 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2002      	movs	r0, #2
 8001940:	f7ff fef0 	bl	8001724 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001948:	2312      	movs	r3, #18
 800194a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001954:	2304      	movs	r3, #4
 8001956:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800195c:	4619      	mov	r1, r3
 800195e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001962:	f006 fb67 	bl	8008034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001966:	2310      	movs	r3, #16
 8001968:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800196a:	2312      	movs	r3, #18
 800196c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001976:	2304      	movs	r3, #4
 8001978:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800197e:	4619      	mov	r1, r3
 8001980:	4806      	ldr	r0, [pc, #24]	@ (800199c <HAL_I2C_MspInit+0x10c>)
 8001982:	f006 fb57 	bl	8008034 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001986:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800198a:	f7ff fee4 	bl	8001756 <LL_APB1_GRP1_EnableClock>
}
 800198e:	bf00      	nop
 8001990:	3770      	adds	r7, #112	@ 0x70
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40005400 	.word	0x40005400
 800199c:	48000400 	.word	0x48000400
 80019a0:	40005c00 	.word	0x40005c00

080019a4 <LL_AHB3_GRP1_EnableClock>:
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019c8:	68fb      	ldr	r3, [r7, #12]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <MX_IPCC_Init>:

IPCC_HandleTypeDef hipcc;

/* IPCC init function */
void MX_IPCC_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_IPCC_Init+0x20>)
 80019de:	4a07      	ldr	r2, [pc, #28]	@ (80019fc <MX_IPCC_Init+0x24>)
 80019e0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_IPCC_Init+0x20>)
 80019e4:	f007 fb52 	bl	800908c <HAL_IPCC_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80019ee:	f000 fa60 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200004ac 	.word	0x200004ac
 80019fc:	58000c00 	.word	0x58000c00

08001a00 <HAL_IPCC_MspInit>:

void HAL_IPCC_MspInit(IPCC_HandleTypeDef* ipccHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  if(ipccHandle->Instance==IPCC)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a44 <HAL_IPCC_MspInit+0x44>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d113      	bne.n	8001a3a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* IPCC clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a12:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001a16:	f7ff ffc5 	bl	80019a4 <LL_AHB3_GRP1_EnableClock>

    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	202c      	movs	r0, #44	@ 0x2c
 8001a20:	f005 ff95 	bl	800794e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001a24:	202c      	movs	r0, #44	@ 0x2c
 8001a26:	f005 ffac 	bl	8007982 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	202d      	movs	r0, #45	@ 0x2d
 8001a30:	f005 ff8d 	bl	800794e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a34:	202d      	movs	r0, #45	@ 0x2d
 8001a36:	f005 ffa4 	bl	8007982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	58000c00 	.word	0x58000c00

08001a48 <LL_AHB2_GRP1_EnableClock>:
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
}
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
	...

08001a7c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)//lors d'un appuie sur un bouton, le systeme s'interrompt afin d'arriver dans cette fonction redefinie avec en parametre d'entre , le bouton sur lequel l'on a appuiyé
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_14){
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a8c:	d12f      	bne.n	8001aee <HAL_GPIO_EXTI_Callback+0x72>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_14)== GPIO_PIN_RESET){
 8001a8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a92:	4833      	ldr	r0, [pc, #204]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001a94:	f006 fc3e 	bl	8008314 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_GPIO_EXTI_Callback+0x36>

					boutonAtime=0;
 8001a9e:	4b31      	ldr	r3, [pc, #196]	@ (8001b64 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
					tbtn1=HAL_GetTick();
 8001aa4:	f004 fdbc 	bl	8006620 <HAL_GetTick>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	461a      	mov	r2, r3
 8001aac:	4b2e      	ldr	r3, [pc, #184]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0xec>)
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e010      	b.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x58>


				}
				else{
					BTN_A++;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8001b6c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001aba:	6013      	str	r3, [r2, #0]

					boutonAtime=HAL_GetTick()-tbtn1;
 8001abc:	f004 fdb0 	bl	8006620 <HAL_GetTick>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a29      	ldr	r2, [pc, #164]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0xec>)
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001acc:	601a      	str	r2, [r3, #0]
					tbtn1=0;
 8001ace:	4b26      	ldr	r3, [pc, #152]	@ (8001b68 <HAL_GPIO_EXTI_Callback+0xec>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]


				}

				if(boutonAtime>=400){
 8001ad4:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001adc:	db07      	blt.n	8001aee <HAL_GPIO_EXTI_Callback+0x72>
					BTN_A_LONG++;
 8001ade:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a22      	ldr	r2, [pc, #136]	@ (8001b70 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001ae6:	6013      	str	r3, [r2, #0]
					BTN_A=0;
 8001ae8:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <HAL_GPIO_EXTI_Callback+0xf0>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
				}

	}
	if(GPIO_Pin==GPIO_PIN_15){
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001af4:	d12f      	bne.n	8001b56 <HAL_GPIO_EXTI_Callback+0xda>

		if(HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)== GPIO_PIN_RESET){
 8001af6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001afa:	4819      	ldr	r0, [pc, #100]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001afc:	f006 fc0a 	bl	8008314 <HAL_GPIO_ReadPin>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d109      	bne.n	8001b1a <HAL_GPIO_EXTI_Callback+0x9e>

			boutonBtime=0;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
			tbtn2=HAL_GetTick();
 8001b0c:	f004 fd88 	bl	8006620 <HAL_GetTick>
 8001b10:	4603      	mov	r3, r0
 8001b12:	461a      	mov	r2, r3
 8001b14:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	e010      	b.n	8001b3c <HAL_GPIO_EXTI_Callback+0xc0>


		}
		else{
			BTN_B++;
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <HAL_GPIO_EXTI_Callback+0x100>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_GPIO_EXTI_Callback+0x100>)
 8001b22:	6013      	str	r3, [r2, #0]

			boutonBtime=HAL_GetTick()-tbtn2;
 8001b24:	f004 fd7c 	bl	8006620 <HAL_GetTick>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a13      	ldr	r2, [pc, #76]	@ (8001b78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001b2c:	6812      	ldr	r2, [r2, #0]
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b34:	601a      	str	r2, [r3, #0]
			tbtn2=0;
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <HAL_GPIO_EXTI_Callback+0xfc>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]


		}

		if(boutonBtime>=400){
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b74 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001b44:	db07      	blt.n	8001b56 <HAL_GPIO_EXTI_Callback+0xda>
			BTN_B_LONG++;
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <HAL_GPIO_EXTI_Callback+0x104>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b80 <HAL_GPIO_EXTI_Callback+0x104>)
 8001b4e:	6013      	str	r3, [r2, #0]
			BTN_B=0;
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_GPIO_EXTI_Callback+0x100>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
		}



	}
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	48000800 	.word	0x48000800
 8001b64:	20000a9c 	.word	0x20000a9c
 8001b68:	20000aa4 	.word	0x20000aa4
 8001b6c:	20000778 	.word	0x20000778
 8001b70:	20000ab0 	.word	0x20000ab0
 8001b74:	20000aa0 	.word	0x20000aa0
 8001b78:	20000aa8 	.word	0x20000aa8
 8001b7c:	2000077c 	.word	0x2000077c
 8001b80:	20000aac 	.word	0x20000aac

08001b84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	@ 0x28
 8001b88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b8a:	f004 fc95 	bl	80064b8 <HAL_Init>

  /* USER CODE BEGIN Init */

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  void (*boot_jump)(void);

  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9c:	2004      	movs	r0, #4
 8001b9e:	f7ff ff53 	bl	8001a48 <LL_AHB2_GRP1_EnableClock>
   GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 8001ba2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001ba6:	607b      	str	r3, [r7, #4]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	485d      	ldr	r0, [pc, #372]	@ (8001d2c <main+0x1a8>)
 8001bb6:	f006 fa3d 	bl	8008034 <HAL_GPIO_Init>
   /* If both Select and Reset button held down at boot time, then immediately
    * jump to DFU bootloader, rather than start the Snickerdoodle application.
    */
   if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET) &&
 8001bba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001bbe:	485b      	ldr	r0, [pc, #364]	@ (8001d2c <main+0x1a8>)
 8001bc0:	f006 fba8 	bl	8008314 <HAL_GPIO_ReadPin>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d115      	bne.n	8001bf6 <main+0x72>
 	  (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15) == GPIO_PIN_RESET))
 8001bca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bce:	4857      	ldr	r0, [pc, #348]	@ (8001d2c <main+0x1a8>)
 8001bd0:	f006 fba0 	bl	8008314 <HAL_GPIO_ReadPin>
 8001bd4:	4603      	mov	r3, r0
   if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14) == GPIO_PIN_RESET) &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10d      	bne.n	8001bf6 <main+0x72>
   {
 	  HAL_DeInit();
 8001bda:	f004 fc8d 	bl	80064f8 <HAL_DeInit>
 	  boot_jump = (void (*)(void))(*((uint32_t *)(SYS_MEM_START_ADDR + 4)));
 8001bde:	4b54      	ldr	r3, [pc, #336]	@ (8001d30 <main+0x1ac>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	61fb      	str	r3, [r7, #28]
 	  __set_MSP(*(__IO uint32_t*)SYS_MEM_START_ADDR);
 8001be4:	4b53      	ldr	r3, [pc, #332]	@ (8001d34 <main+0x1b0>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f383 8808 	msr	MSP, r3
}
 8001bf0:	bf00      	nop

 	  /* NOTE WELL: This call never returns: */
 	  boot_jump();
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	4798      	blx	r3
   }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf6:	f000 f8c7 	bl	8001d88 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bfa:	f000 f929 	bl	8001e50 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001bfe:	f7ff feeb 	bl	80019d8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c02:	f7ff fd39 	bl	8001678 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c06:	f7ff fd04 	bl	8001612 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c0a:	f7ff f9dd 	bl	8000fc8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c0e:	f7ff fdbb 	bl	8001788 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c12:	f7ff fdf9 	bl	8001808 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 8001c16:	f004 f9d5 	bl	8005fc4 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001c1a:	f003 ff45 	bl	8005aa8 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001c1e:	f003 ff91 	bl	8005b44 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001c22:	f003 ffb7 	bl	8005b94 <MX_TIM17_Init>
  MX_SPI1_Init();
 8001c26:	f000 fe6f 	bl	8002908 <MX_SPI1_Init>
  MX_USB_Device_Init();
 8001c2a:	f012 fe47 	bl	80148bc <MX_USB_Device_Init>
  MX_RTC_Init();
 8001c2e:	f000 fd99 	bl	8002764 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */



  	ssd1306_Init();
 8001c32:	f001 f8f5 	bl	8002e20 <ssd1306_Init>

  	HAL_Delay(10);
 8001c36:	200a      	movs	r0, #10
 8001c38:	f004 fd0a 	bl	8006650 <HAL_Delay>
  	ssd1306_Fill(Black);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f001 f959 	bl	8002ef4 <ssd1306_Fill>

  	ssd1306_DrawBitmap(32, 32, startimg, 64, 32, White);
 8001c42:	2301      	movs	r3, #1
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	2320      	movs	r3, #32
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2340      	movs	r3, #64	@ 0x40
 8001c4c:	4a3a      	ldr	r2, [pc, #232]	@ (8001d38 <main+0x1b4>)
 8001c4e:	2120      	movs	r1, #32
 8001c50:	2020      	movs	r0, #32
 8001c52:	f001 fb9a 	bl	800338a <ssd1306_DrawBitmap>
  	ssd1306_UpdateScreen();
 8001c56:	f001 f965 	bl	8002f24 <ssd1306_UpdateScreen>


  	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)rawdata, 3);
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	4937      	ldr	r1, [pc, #220]	@ (8001d3c <main+0x1b8>)
 8001c5e:	4838      	ldr	r0, [pc, #224]	@ (8001d40 <main+0x1bc>)
 8001c60:	f005 f82e 	bl	8006cc0 <HAL_ADC_Start_DMA>
  	HAL_TIM_Base_Start(&htim2);
 8001c64:	4837      	ldr	r0, [pc, #220]	@ (8001d44 <main+0x1c0>)
 8001c66:	f00c fa25 	bl	800e0b4 <HAL_TIM_Base_Start>
  	HAL_TIM_Base_Start_IT(&htim16);
 8001c6a:	4837      	ldr	r0, [pc, #220]	@ (8001d48 <main+0x1c4>)
 8001c6c:	f00c fa68 	bl	800e140 <HAL_TIM_Base_Start_IT>
  	//HAL_TIM_Base_Start_IT(&htim17);

  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_0,GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	2101      	movs	r1, #1
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f006 fb64 	bl	8008344 <HAL_GPIO_WritePin>

  	HAL_Delay(100);
 8001c7c:	2064      	movs	r0, #100	@ 0x64
 8001c7e:	f004 fce7 	bl	8006650 <HAL_Delay>
  	HAL_UART_Abort(&hlpuart1);
 8001c82:	4832      	ldr	r0, [pc, #200]	@ (8001d4c <main+0x1c8>)
 8001c84:	f00c ff22 	bl	800eacc <HAL_UART_Abort>
  	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8001c88:	2240      	movs	r2, #64	@ 0x40
 8001c8a:	4931      	ldr	r1, [pc, #196]	@ (8001d50 <main+0x1cc>)
 8001c8c:	482f      	ldr	r0, [pc, #188]	@ (8001d4c <main+0x1c8>)
 8001c8e:	f00c fed1 	bl	800ea34 <HAL_UART_Receive_DMA>


  	memset(flashread,'1',256);
 8001c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c96:	2131      	movs	r1, #49	@ 0x31
 8001c98:	482e      	ldr	r0, [pc, #184]	@ (8001d54 <main+0x1d0>)
 8001c9a:	f015 fada 	bl	8017252 <memset>
  	memset(flashwrite,'\0',256);
 8001c9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	482c      	ldr	r0, [pc, #176]	@ (8001d58 <main+0x1d4>)
 8001ca6:	f015 fad4 	bl	8017252 <memset>
  	memset((uint8_t *)bufferscreen ,'\0',50);
 8001caa:	2232      	movs	r2, #50	@ 0x32
 8001cac:	2100      	movs	r1, #0
 8001cae:	482b      	ldr	r0, [pc, #172]	@ (8001d5c <main+0x1d8>)
 8001cb0:	f015 facf 	bl	8017252 <memset>



  	SPIF_Init(&hspif1, &hspi1, GPIOB, GPIO_PIN_7);
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001d60 <main+0x1dc>)
 8001cb8:	492a      	ldr	r1, [pc, #168]	@ (8001d64 <main+0x1e0>)
 8001cba:	482b      	ldr	r0, [pc, #172]	@ (8001d68 <main+0x1e4>)
 8001cbc:	f012 fce5 	bl	801468a <SPIF_Init>
  	getindex();
 8001cc0:	f000 ff7a 	bl	8002bb8 <getindex>

  	ssd1306_Fill(Black);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f001 f915 	bl	8002ef4 <ssd1306_Fill>

  	bmp581->i2c=&hi2c1;
 8001cca:	4b28      	ldr	r3, [pc, #160]	@ (8001d6c <main+0x1e8>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a28      	ldr	r2, [pc, #160]	@ (8001d70 <main+0x1ec>)
 8001cd0:	601a      	str	r2, [r3, #0]
  	bmp581->addr=0x47;
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <main+0x1e8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2247      	movs	r2, #71	@ 0x47
 8001cd8:	711a      	strb	r2, [r3, #4]

  	if(bmp581_init_precise_normal(&bmp581)!=0){
 8001cda:	4824      	ldr	r0, [pc, #144]	@ (8001d6c <main+0x1e8>)
 8001cdc:	f7ff fb18 	bl	8001310 <bmp581_init_precise_normal>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00f      	beq.n	8001d06 <main+0x182>
  		ssd1306_SetCursor(32,42);
 8001ce6:	212a      	movs	r1, #42	@ 0x2a
 8001ce8:	2020      	movs	r0, #32
 8001cea:	f001 fa45 	bl	8003178 <ssd1306_SetCursor>
  		ssd1306_WriteString("bmp prbm", Font_7x10, White);
 8001cee:	4a21      	ldr	r2, [pc, #132]	@ (8001d74 <main+0x1f0>)
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	ca06      	ldmia	r2, {r1, r2}
 8001cf4:	4820      	ldr	r0, [pc, #128]	@ (8001d78 <main+0x1f4>)
 8001cf6:	f001 fa19 	bl	800312c <ssd1306_WriteString>
  		ssd1306_UpdateScreen();
 8001cfa:	f001 f913 	bl	8002f24 <ssd1306_UpdateScreen>
  		HAL_Delay(1000);
 8001cfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d02:	f004 fca5 	bl	8006650 <HAL_Delay>

  	}


  	state=STATE_SPEED;
 8001d06:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <main+0x1f8>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
  	BTN_A=0;
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d80 <main+0x1fc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
  	BTN_A_LONG=0;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <main+0x200>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

  	HAL_Delay(500);
 8001d18:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d1c:	f004 fc98 	bl	8006650 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  statemachine();
 8001d20:	f001 fd9e 	bl	8003860 <statemachine>
	  ssd1306_UpdateScreen();
 8001d24:	f001 f8fe 	bl	8002f24 <ssd1306_UpdateScreen>
	  statemachine();
 8001d28:	bf00      	nop
 8001d2a:	e7f9      	b.n	8001d20 <main+0x19c>
 8001d2c:	48000800 	.word	0x48000800
 8001d30:	1fff0004 	.word	0x1fff0004
 8001d34:	1fff0000 	.word	0x1fff0000
 8001d38:	0801bec8 	.word	0x0801bec8
 8001d3c:	200007a0 	.word	0x200007a0
 8001d40:	20000324 	.word	0x20000324
 8001d44:	20001104 	.word	0x20001104
 8001d48:	20001150 	.word	0x20001150
 8001d4c:	200011e8 	.word	0x200011e8
 8001d50:	200004f4 	.word	0x200004f4
 8001d54:	200008b4 	.word	0x200008b4
 8001d58:	200007b4 	.word	0x200007b4
 8001d5c:	200009d8 	.word	0x200009d8
 8001d60:	48000400 	.word	0x48000400
 8001d64:	20000c94 	.word	0x20000c94
 8001d68:	20000780 	.word	0x20000780
 8001d6c:	20000bfc 	.word	0x20000bfc
 8001d70:	20000404 	.word	0x20000404
 8001d74:	2000001c 	.word	0x2000001c
 8001d78:	0801bb80 	.word	0x0801bb80
 8001d7c:	200004e8 	.word	0x200004e8
 8001d80:	20000778 	.word	0x20000778
 8001d84:	20000ab0 	.word	0x20000ab0

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09a      	sub	sp, #104	@ 0x68
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 0320 	add.w	r3, r7, #32
 8001d92:	2248      	movs	r2, #72	@ 0x48
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f015 fa5b 	bl	8017252 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	611a      	str	r2, [r3, #16]
 8001daa:	615a      	str	r2, [r3, #20]
 8001dac:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dae:	4b27      	ldr	r3, [pc, #156]	@ (8001e4c <SystemClock_Config+0xc4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001db6:	4a25      	ldr	r2, [pc, #148]	@ (8001e4c <SystemClock_Config+0xc4>)
 8001db8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b23      	ldr	r3, [pc, #140]	@ (8001e4c <SystemClock_Config+0xc4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dda:	2340      	movs	r3, #64	@ 0x40
 8001ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dde:	2302      	movs	r3, #2
 8001de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001de2:	2303      	movs	r3, #3
 8001de4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001de6:	2310      	movs	r3, #16
 8001de8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001dea:	2308      	movs	r3, #8
 8001dec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001df4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001df8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dfe:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	4618      	mov	r0, r3
 8001e06:	f009 fb07 	bl	800b418 <HAL_RCC_OscConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001e10:	f000 f84f 	bl	8001eb2 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001e14:	236f      	movs	r3, #111	@ 0x6f
 8001e16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2103      	movs	r1, #3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f009 fe63 	bl	800bb00 <HAL_RCC_ClockConfig>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001e40:	f000 f837 	bl	8001eb2 <Error_Handler>
  }
}
 8001e44:	bf00      	nop
 8001e46:	3768      	adds	r7, #104	@ 0x68
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	58000400 	.word	0x58000400

08001e50 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b094      	sub	sp, #80	@ 0x50
 8001e54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e56:	463b      	mov	r3, r7
 8001e58:	2250      	movs	r2, #80	@ 0x50
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f015 f9f8 	bl	8017252 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8001e62:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 8001e66:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8001e68:	2306      	movs	r3, #6
 8001e6a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001e6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e70:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001e72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e76:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001e78:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001e7c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001e7e:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8001e82:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001e84:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001e88:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001e8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001e94:	2310      	movs	r3, #16
 8001e96:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f00a fa6d 	bl	800c37a <HAL_RCCEx_PeriphCLKConfig>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001ea6:	f000 f804 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  //LL_HSEM_1StepLock( HSEM, 5 );

  /* USER CODE END Smps */
}
 8001eaa:	bf00      	nop
 8001eac:	3750      	adds	r7, #80	@ 0x50
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb6:	b672      	cpsid	i
}
 8001eb8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eba:	bf00      	nop
 8001ebc:	e7fd      	b.n	8001eba <Error_Handler+0x8>

08001ebe <gps_checksum>:

char *data[15];
extern uint8_t receivedtrame[64];

int gps_checksum(char *nmea_data)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
    //if you point a string with less than 5 characters the function will read outside of scope and crash the mcu.
    if(strlen(nmea_data) < 5) return 0;
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7fe f9aa 	bl	8000220 <strlen>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d801      	bhi.n	8001ed6 <gps_checksum+0x18>
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e038      	b.n	8001f48 <gps_checksum+0x8a>
    char recv_crc[2];
    recv_crc[0] = nmea_data[strlen(nmea_data) - 4];
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe f9a2 	bl	8000220 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	723b      	strb	r3, [r7, #8]
    recv_crc[1] = nmea_data[strlen(nmea_data) - 3];
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7fe f999 	bl	8000220 <strlen>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	727b      	strb	r3, [r7, #9]
    int crc = 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
    int i;

    //exclude the CRLF plus CRC with an * from the end
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e00a      	b.n	8001f1a <gps_checksum+0x5c>
        crc ^= nmea_data[i];
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	4053      	eors	r3, r2
 8001f12:	617b      	str	r3, [r7, #20]
    for (i = 0; i < strlen(nmea_data) - 5; i ++) {
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	3301      	adds	r3, #1
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe f980 	bl	8000220 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	1f5a      	subs	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d8ec      	bhi.n	8001f04 <gps_checksum+0x46>
    }
    int receivedHash = strtol(recv_crc, NULL, 16);
 8001f2a:	f107 0308 	add.w	r3, r7, #8
 8001f2e:	2210      	movs	r2, #16
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f014 f9be 	bl	80162b4 <strtol>
 8001f38:	60f8      	str	r0, [r7, #12]
    if (crc == receivedHash) {
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d101      	bne.n	8001f46 <gps_checksum+0x88>
        return 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <gps_checksum+0x8a>
    }
    else{
        return 0;
 8001f46:	2300      	movs	r3, #0
    }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <nmea_GPGGA>:

int nmea_GPGGA(GPS *gps_data, char*inputString){
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b0b7      	sub	sp, #220	@ 0xdc
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 8001f60:	f107 0320 	add.w	r3, r7, #32
 8001f64:	2264      	movs	r2, #100	@ 0x64
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f015 f972 	bl	8017252 <memset>
    char *marker = strtok(inputString, ",");
 8001f6e:	49c2      	ldr	r1, [pc, #776]	@ (8002278 <nmea_GPGGA+0x328>)
 8001f70:	6838      	ldr	r0, [r7, #0]
 8001f72:	f015 f989 	bl	8017288 <strtok>
 8001f76:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8001f7a:	e027      	b.n	8001fcc <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8001f7c:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8001f80:	f7fe f94e 	bl	8000220 <strlen>
 8001f84:	4603      	mov	r3, r0
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8001f8c:	1c63      	adds	r3, r4, #1
 8001f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001f92:	4610      	mov	r0, r2
 8001f94:	f013 f9e6 	bl	8015364 <malloc>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	00a3      	lsls	r3, r4, #2
 8001f9e:	33d8      	adds	r3, #216	@ 0xd8
 8001fa0:	443b      	add	r3, r7
 8001fa2:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 8001fa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001faa:	3b01      	subs	r3, #1
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	33d8      	adds	r3, #216	@ 0xd8
 8001fb0:	443b      	add	r3, r7
 8001fb2:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8001fb6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f015 fa5d 	bl	801747a <strcpy>
        marker = strtok(NULL, ",");
 8001fc0:	49ad      	ldr	r1, [pc, #692]	@ (8002278 <nmea_GPGGA+0x328>)
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f015 f960 	bl	8017288 <strtok>
 8001fc8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8001fcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1d3      	bne.n	8001f7c <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8001fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	332c      	adds	r3, #44	@ 0x2c
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f015 fa44 	bl	801747a <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8001ff2:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8001ff6:	2b53      	cmp	r3, #83	@ 0x53
 8001ff8:	d004      	beq.n	8002004 <nmea_GPGGA+0xb4>
 8001ffa:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8001ffe:	2b4e      	cmp	r3, #78	@ 0x4e
 8002000:	f040 8159 	bne.w	80022b6 <nmea_GPGGA+0x366>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800200a:	e010      	b.n	800202e <nmea_GPGGA+0xde>
 800200c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800200e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002012:	4413      	add	r3, r2
 8002014:	7819      	ldrb	r1, [r3, #0]
 8002016:	f107 021c 	add.w	r2, r7, #28
 800201a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800201e:	4413      	add	r3, r2
 8002020:	460a      	mov	r2, r1
 8002022:	701a      	strb	r2, [r3, #0]
 8002024:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002028:	3301      	adds	r3, #1
 800202a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800202e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002032:	2b01      	cmp	r3, #1
 8002034:	ddea      	ble.n	800200c <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800203c:	e011      	b.n	8002062 <nmea_GPGGA+0x112>
 800203e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002040:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002044:	3302      	adds	r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	7819      	ldrb	r1, [r3, #0]
 800204a:	f107 0214 	add.w	r2, r7, #20
 800204e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002052:	4413      	add	r3, r2
 8002054:	460a      	mov	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800205c:	3301      	adds	r3, #1
 800205e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002066:	2b05      	cmp	r3, #5
 8002068:	dde9      	ble.n	800203e <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 800206a:	f107 031c 	add.w	r3, r7, #28
 800206e:	220a      	movs	r2, #10
 8002070:	2100      	movs	r1, #0
 8002072:	4618      	mov	r0, r3
 8002074:	f014 f91e 	bl	80162b4 <strtol>
 8002078:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f014 f836 	bl	80160f4 <strtof>
 8002088:	ed87 0a2b 	vstr	s0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 800208c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002098:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 800209c:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 800227c <nmea_GPGGA+0x32c>
 80020a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a8:	ee17 0a90 	vmov	r0, s15
 80020ac:	f7fe fa24 	bl	80004f8 <__aeabi_f2d>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80020be:	e010      	b.n	80020e2 <nmea_GPGGA+0x192>
 80020c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020c6:	4413      	add	r3, r2
 80020c8:	7819      	ldrb	r1, [r3, #0]
 80020ca:	f107 0210 	add.w	r2, r7, #16
 80020ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020d2:	4413      	add	r3, r2
 80020d4:	460a      	mov	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
 80020d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020dc:	3301      	adds	r3, #1
 80020de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80020e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	ddea      	ble.n	80020c0 <nmea_GPGGA+0x170>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020f0:	e011      	b.n	8002116 <nmea_GPGGA+0x1c6>
 80020f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80020f8:	3303      	adds	r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	7819      	ldrb	r1, [r3, #0]
 80020fe:	f107 0208 	add.w	r2, r7, #8
 8002102:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002106:	4413      	add	r3, r2
 8002108:	460a      	mov	r2, r1
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002110:	3301      	adds	r3, #1
 8002112:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800211a:	2b05      	cmp	r3, #5
 800211c:	dde9      	ble.n	80020f2 <nmea_GPGGA+0x1a2>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	220a      	movs	r2, #10
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f014 f8c4 	bl	80162b4 <strtol>
 800212c:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 8002130:	f107 0308 	add.w	r3, r7, #8
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f013 ffdc 	bl	80160f4 <strtof>
 800213c:	ed87 0a26 	vstr	s0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8002140:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002144:	ee07 3a90 	vmov	s15, r3
 8002148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800214c:	edd7 6a26 	vldr	s13, [r7, #152]	@ 0x98
 8002150:	ed9f 6a4a 	vldr	s12, [pc, #296]	@ 800227c <nmea_GPGGA+0x32c>
 8002154:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215c:	ee17 0a90 	vmov	r0, s15
 8002160:	f7fe f9ca 	bl	80004f8 <__aeabi_f2d>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002178:	f7fe fc7e 	bl	8000a78 <__aeabi_dcmpeq>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d176      	bne.n	8002270 <nmea_GPGGA+0x320>
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800218e:	f7fe fc73 	bl	8000a78 <__aeabi_dcmpeq>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d16b      	bne.n	8002270 <nmea_GPGGA+0x320>
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	4b38      	ldr	r3, [pc, #224]	@ (8002280 <nmea_GPGGA+0x330>)
 800219e:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80021a2:	f7fe fc73 	bl	8000a8c <__aeabi_dcmplt>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d061      	beq.n	8002270 <nmea_GPGGA+0x320>
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	4b34      	ldr	r3, [pc, #208]	@ (8002284 <nmea_GPGGA+0x334>)
 80021b2:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80021b6:	f7fe fc69 	bl	8000a8c <__aeabi_dcmplt>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d057      	beq.n	8002270 <nmea_GPGGA+0x320>
            gps_data->latitude = lat_deg;
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 80021c6:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 80021d0:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 80021d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 80021e2:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 80021e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f013 ff83 	bl	80160f4 <strtof>
 80021ee:	ed87 0a23 	vstr	s0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 80021f2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80021f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021fe:	d102      	bne.n	8002206 <nmea_GPGGA+0x2b6>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69db      	ldr	r3, [r3, #28]
 8002204:	e001      	b.n	800220a <nmea_GPGGA+0x2ba>
 8002206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800220e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002210:	220a      	movs	r2, #10
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f014 f84d 	bl	80162b4 <strtol>
 800221a:	4602      	mov	r2, r0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 8002220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002222:	220a      	movs	r2, #10
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f014 f844 	bl	80162b4 <strtol>
 800222c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 8002230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002234:	2b00      	cmp	r3, #0
 8002236:	bfcc      	ite	gt
 8002238:	2301      	movgt	r3, #1
 800223a:	2300      	movle	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 8002244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f013 ff53 	bl	80160f4 <strtof>
 800224e:	ed87 0a21 	vstr	s0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 8002252:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8002256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800225a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800225e:	d102      	bne.n	8002266 <nmea_GPGGA+0x316>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	e001      	b.n	800226a <nmea_GPGGA+0x31a>
 8002266:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 800226e:	e022      	b.n	80022b6 <nmea_GPGGA+0x366>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002276:	e016      	b.n	80022a6 <nmea_GPGGA+0x356>
 8002278:	0801bb8c 	.word	0x0801bb8c
 800227c:	42700000 	.word	0x42700000
 8002280:	40568000 	.word	0x40568000
 8002284:	40668000 	.word	0x40668000
 8002288:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	33d8      	adds	r3, #216	@ 0xd8
 8002290:	443b      	add	r3, r7
 8002292:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002296:	4618      	mov	r0, r3
 8002298:	f013 f86c 	bl	8015374 <free>
 800229c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022a0:	3301      	adds	r3, #1
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80022a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80022aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022ae:	429a      	cmp	r2, r3
 80022b0:	dbea      	blt.n	8002288 <nmea_GPGGA+0x338>
            return 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e019      	b.n	80022ea <nmea_GPGGA+0x39a>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 80022b6:	2300      	movs	r3, #0
 80022b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022bc:	e00e      	b.n	80022dc <nmea_GPGGA+0x38c>
 80022be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	33d8      	adds	r3, #216	@ 0xd8
 80022c6:	443b      	add	r3, r7
 80022c8:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f013 f851 	bl	8015374 <free>
 80022d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022d6:	3301      	adds	r3, #1
 80022d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80022e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbea      	blt.n	80022be <nmea_GPGGA+0x36e>
    return 1;
 80022e8:	2301      	movs	r3, #1
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	37dc      	adds	r7, #220	@ 0xdc
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	0000      	movs	r0, r0
	...

080022f8 <nmea_GNRMC>:
//    return 1;
//}



int nmea_GNRMC(GPS *gps_data, char*inputString){
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b0a1      	sub	sp, #132	@ 0x84
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 8002306:	f107 030c 	add.w	r3, r7, #12
 800230a:	2264      	movs	r2, #100	@ 0x64
 800230c:	2100      	movs	r1, #0
 800230e:	4618      	mov	r0, r3
 8002310:	f014 ff9f 	bl	8017252 <memset>
    char *marker = strtok(inputString, ",");
 8002314:	4930      	ldr	r1, [pc, #192]	@ (80023d8 <nmea_GNRMC+0xe0>)
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	f014 ffb6 	bl	8017288 <strtok>
 800231c:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 800231e:	e021      	b.n	8002364 <nmea_GNRMC+0x6c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002320:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8002322:	f7fd ff7d 	bl	8000220 <strlen>
 8002326:	4603      	mov	r3, r0
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800232c:	1c63      	adds	r3, r4, #1
 800232e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002330:	4610      	mov	r0, r2
 8002332:	f013 f817 	bl	8015364 <malloc>
 8002336:	4603      	mov	r3, r0
 8002338:	461a      	mov	r2, r3
 800233a:	00a3      	lsls	r3, r4, #2
 800233c:	3380      	adds	r3, #128	@ 0x80
 800233e:	443b      	add	r3, r7
 8002340:	f843 2c74 	str.w	r2, [r3, #-116]
        strcpy(values[counter - 1], marker);
 8002344:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002346:	3b01      	subs	r3, #1
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	3380      	adds	r3, #128	@ 0x80
 800234c:	443b      	add	r3, r7
 800234e:	f853 3c74 	ldr.w	r3, [r3, #-116]
 8002352:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8002354:	4618      	mov	r0, r3
 8002356:	f015 f890 	bl	801747a <strcpy>
        marker = strtok(NULL, ",");
 800235a:	491f      	ldr	r1, [pc, #124]	@ (80023d8 <nmea_GNRMC+0xe0>)
 800235c:	2000      	movs	r0, #0
 800235e:	f014 ff93 	bl	8017288 <strtok>
 8002362:	67b8      	str	r0, [r7, #120]	@ 0x78
    while (marker != NULL) {
 8002364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1da      	bne.n	8002320 <nmea_GNRMC+0x28>
    }
    float speed = strtof(values[7], NULL);
 800236a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f013 fec0 	bl	80160f4 <strtof>
 8002374:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
    gps_data->speed=speed/(1.944);
 8002378:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800237a:	f7fe f8bd 	bl	80004f8 <__aeabi_f2d>
 800237e:	a314      	add	r3, pc, #80	@ (adr r3, 80023d0 <nmea_GNRMC+0xd8>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	f7fe fa3a 	bl	80007fc <__aeabi_ddiv>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	f7fe fc02 	bl	8000b98 <__aeabi_d2f>
 8002394:	4602      	mov	r2, r0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	639a      	str	r2, [r3, #56]	@ 0x38


    for(int i=0; i<counter; i++) free(values[i]);
 800239a:	2300      	movs	r3, #0
 800239c:	677b      	str	r3, [r7, #116]	@ 0x74
 800239e:	e00b      	b.n	80023b8 <nmea_GNRMC+0xc0>
 80023a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	3380      	adds	r3, #128	@ 0x80
 80023a6:	443b      	add	r3, r7
 80023a8:	f853 3c74 	ldr.w	r3, [r3, #-116]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f012 ffe1 	bl	8015374 <free>
 80023b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023b4:	3301      	adds	r3, #1
 80023b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80023b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80023ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023bc:	429a      	cmp	r2, r3
 80023be:	dbef      	blt.n	80023a0 <nmea_GNRMC+0xa8>
    return 1;
 80023c0:	2301      	movs	r3, #1
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3784      	adds	r7, #132	@ 0x84
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd90      	pop	{r4, r7, pc}
 80023ca:	bf00      	nop
 80023cc:	f3af 8000 	nop.w
 80023d0:	be76c8b4 	.word	0xbe76c8b4
 80023d4:	3fff1a9f 	.word	0x3fff1a9f
 80023d8:	0801bb8c 	.word	0x0801bb8c

080023dc <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 80023e6:	223c      	movs	r2, #60	@ 0x3c
 80023e8:	2100      	movs	r1, #0
 80023ea:	485c      	ldr	r0, [pc, #368]	@ (800255c <nmea_parse+0x180>)
 80023ec:	f014 ff31 	bl	8017252 <memset>
    char * token = strtok(buffer, "$");
 80023f0:	495b      	ldr	r1, [pc, #364]	@ (8002560 <nmea_parse+0x184>)
 80023f2:	6838      	ldr	r0, [r7, #0]
 80023f4:	f014 ff48 	bl	8017288 <strtok>
 80023f8:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 80023fe:	e01d      	b.n	800243c <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002400:	6978      	ldr	r0, [r7, #20]
 8002402:	f7fd ff0d 	bl	8000220 <strlen>
 8002406:	4603      	mov	r3, r0
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	693c      	ldr	r4, [r7, #16]
 800240c:	1c63      	adds	r3, r4, #1
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	4610      	mov	r0, r2
 8002412:	f012 ffa7 	bl	8015364 <malloc>
 8002416:	4603      	mov	r3, r0
 8002418:	461a      	mov	r2, r3
 800241a:	4b50      	ldr	r3, [pc, #320]	@ (800255c <nmea_parse+0x180>)
 800241c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	3b01      	subs	r3, #1
 8002424:	4a4d      	ldr	r2, [pc, #308]	@ (800255c <nmea_parse+0x180>)
 8002426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242a:	6979      	ldr	r1, [r7, #20]
 800242c:	4618      	mov	r0, r3
 800242e:	f015 f824 	bl	801747a <strcpy>
        token = strtok(NULL, "$");
 8002432:	494b      	ldr	r1, [pc, #300]	@ (8002560 <nmea_parse+0x184>)
 8002434:	2000      	movs	r0, #0
 8002436:	f014 ff27 	bl	8017288 <strtok>
 800243a:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1de      	bne.n	8002400 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002442:	2300      	movs	r3, #0
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e06e      	b.n	8002526 <nmea_parse+0x14a>
       if(strstr(data[i], "\r\n")!=NULL && gps_checksum(data[i])){
 8002448:	4a44      	ldr	r2, [pc, #272]	@ (800255c <nmea_parse+0x180>)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002450:	4944      	ldr	r1, [pc, #272]	@ (8002564 <nmea_parse+0x188>)
 8002452:	4618      	mov	r0, r3
 8002454:	f014 ff74 	bl	8017340 <strstr>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d060      	beq.n	8002520 <nmea_parse+0x144>
 800245e:	4a3f      	ldr	r2, [pc, #252]	@ (800255c <nmea_parse+0x180>)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fd29 	bl	8001ebe <gps_checksum>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d056      	beq.n	8002520 <nmea_parse+0x144>
           if(strstr(data[i], "GNRMC")!=NULL){
 8002472:	4a3a      	ldr	r2, [pc, #232]	@ (800255c <nmea_parse+0x180>)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	493b      	ldr	r1, [pc, #236]	@ (8002568 <nmea_parse+0x18c>)
 800247c:	4618      	mov	r0, r3
 800247e:	f014 ff5f 	bl	8017340 <strstr>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <nmea_parse+0xee>
        	   nmea_GNRMC(gps_data, data[i]);
 8002488:	4a34      	ldr	r2, [pc, #208]	@ (800255c <nmea_parse+0x180>)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	4619      	mov	r1, r3
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f7ff ff30 	bl	80022f8 <nmea_GNRMC>
        	   memcpy((uint8_t *) receivedtrame,(uint8_t *)data[i],64);
 8002498:	4a30      	ldr	r2, [pc, #192]	@ (800255c <nmea_parse+0x180>)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	4a32      	ldr	r2, [pc, #200]	@ (800256c <nmea_parse+0x190>)
 80024a2:	4610      	mov	r0, r2
 80024a4:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80024a8:	4602      	mov	r2, r0
 80024aa:	4619      	mov	r1, r3
 80024ac:	f8d1 c000 	ldr.w	ip, [r1]
 80024b0:	684e      	ldr	r6, [r1, #4]
 80024b2:	688d      	ldr	r5, [r1, #8]
 80024b4:	68c9      	ldr	r1, [r1, #12]
 80024b6:	f8c2 c000 	str.w	ip, [r2]
 80024ba:	6056      	str	r6, [r2, #4]
 80024bc:	6095      	str	r5, [r2, #8]
 80024be:	60d1      	str	r1, [r2, #12]
 80024c0:	3310      	adds	r3, #16
 80024c2:	3010      	adds	r0, #16
 80024c4:	42a3      	cmp	r3, r4
 80024c6:	d1ef      	bne.n	80024a8 <nmea_parse+0xcc>
 80024c8:	e02a      	b.n	8002520 <nmea_parse+0x144>
           }
           else if(strstr(data[i], "GNGGA")!=NULL){
 80024ca:	4a24      	ldr	r2, [pc, #144]	@ (800255c <nmea_parse+0x180>)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	4927      	ldr	r1, [pc, #156]	@ (8002570 <nmea_parse+0x194>)
 80024d4:	4618      	mov	r0, r3
 80024d6:	f014 ff33 	bl	8017340 <strstr>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01f      	beq.n	8002520 <nmea_parse+0x144>
               nmea_GPGGA(gps_data, data[i]);
 80024e0:	4a1e      	ldr	r2, [pc, #120]	@ (800255c <nmea_parse+0x180>)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e8:	4619      	mov	r1, r3
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fd30 	bl	8001f50 <nmea_GPGGA>
               memcpy((uint8_t *) receivedtrame,(uint8_t *)data[i],64);
 80024f0:	4a1a      	ldr	r2, [pc, #104]	@ (800255c <nmea_parse+0x180>)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f8:	4a1c      	ldr	r2, [pc, #112]	@ (800256c <nmea_parse+0x190>)
 80024fa:	4610      	mov	r0, r2
 80024fc:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 8002500:	4602      	mov	r2, r0
 8002502:	4619      	mov	r1, r3
 8002504:	f8d1 c000 	ldr.w	ip, [r1]
 8002508:	684e      	ldr	r6, [r1, #4]
 800250a:	688d      	ldr	r5, [r1, #8]
 800250c:	68c9      	ldr	r1, [r1, #12]
 800250e:	f8c2 c000 	str.w	ip, [r2]
 8002512:	6056      	str	r6, [r2, #4]
 8002514:	6095      	str	r5, [r2, #8]
 8002516:	60d1      	str	r1, [r2, #12]
 8002518:	3310      	adds	r3, #16
 800251a:	3010      	adds	r0, #16
 800251c:	42a3      	cmp	r3, r4
 800251e:	d1ef      	bne.n	8002500 <nmea_parse+0x124>
    for(int i = 0; i<cnt; i++){
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3301      	adds	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	429a      	cmp	r2, r3
 800252c:	db8c      	blt.n	8002448 <nmea_parse+0x6c>
           }

       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	e009      	b.n	8002548 <nmea_parse+0x16c>
 8002534:	4a09      	ldr	r2, [pc, #36]	@ (800255c <nmea_parse+0x180>)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800253c:	4618      	mov	r0, r3
 800253e:	f012 ff19 	bl	8015374 <free>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	3301      	adds	r3, #1
 8002546:	60bb      	str	r3, [r7, #8]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	429a      	cmp	r2, r3
 800254e:	dbf1      	blt.n	8002534 <nmea_parse+0x158>


}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	371c      	adds	r7, #28
 8002556:	46bd      	mov	sp, r7
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	bf00      	nop
 800255c:	20000c00 	.word	0x20000c00
 8002560:	0801bb90 	.word	0x0801bb90
 8002564:	0801bb94 	.word	0x0801bb94
 8002568:	0801bb98 	.word	0x0801bb98
 800256c:	20000bb8 	.word	0x20000bb8
 8002570:	0801bba0 	.word	0x0801bba0
 8002574:	00000000 	.word	0x00000000

08002578 <distancecalc>:

double distancecalc(double lat1, double lat2, double long1, double long2){
 8002578:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800257c:	b08a      	sub	sp, #40	@ 0x28
 800257e:	af00      	add	r7, sp, #0
 8002580:	ed87 0b06 	vstr	d0, [r7, #24]
 8002584:	ed87 1b04 	vstr	d1, [r7, #16]
 8002588:	ed87 2b02 	vstr	d2, [r7, #8]
 800258c:	ed87 3b00 	vstr	d3, [r7]
	double distance=0;
 8002590:	f04f 0200 	mov.w	r2, #0
 8002594:	f04f 0300 	mov.w	r3, #0
 8002598:	e9c7 2308 	strd	r2, r3, [r7, #32]
	distance=(double) 6371000*acosl(fmin(1,sinl(lat1*(M_PI/180))*sinl(lat2*(M_PI/180))+cosl(lat1*(M_PI/180))*cosl(lat2*(M_PI/180))*cosl((long2-long1)*(M_PI/180))));
 800259c:	a358      	add	r3, pc, #352	@ (adr r3, 8002700 <distancecalc+0x188>)
 800259e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80025a6:	f7fd ffff 	bl	80005a8 <__aeabi_dmul>
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	ec43 2b17 	vmov	d7, r2, r3
 80025b2:	eeb0 0a47 	vmov.f32	s0, s14
 80025b6:	eef0 0a67 	vmov.f32	s1, s15
 80025ba:	f017 fcdf 	bl	8019f7c <sinl>
 80025be:	ec55 4b10 	vmov	r4, r5, d0
 80025c2:	a34f      	add	r3, pc, #316	@ (adr r3, 8002700 <distancecalc+0x188>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025cc:	f7fd ffec 	bl	80005a8 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	ec43 2b17 	vmov	d7, r2, r3
 80025d8:	eeb0 0a47 	vmov.f32	s0, s14
 80025dc:	eef0 0a67 	vmov.f32	s1, s15
 80025e0:	f017 fccc 	bl	8019f7c <sinl>
 80025e4:	ec53 2b10 	vmov	r2, r3, d0
 80025e8:	4620      	mov	r0, r4
 80025ea:	4629      	mov	r1, r5
 80025ec:	f7fd ffdc 	bl	80005a8 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4614      	mov	r4, r2
 80025f6:	461d      	mov	r5, r3
 80025f8:	a341      	add	r3, pc, #260	@ (adr r3, 8002700 <distancecalc+0x188>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002602:	f7fd ffd1 	bl	80005a8 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	ec43 2b17 	vmov	d7, r2, r3
 800260e:	eeb0 0a47 	vmov.f32	s0, s14
 8002612:	eef0 0a67 	vmov.f32	s1, s15
 8002616:	f017 fcaf 	bl	8019f78 <cosl>
 800261a:	ec59 8b10 	vmov	r8, r9, d0
 800261e:	a338      	add	r3, pc, #224	@ (adr r3, 8002700 <distancecalc+0x188>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002628:	f7fd ffbe 	bl	80005a8 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	ec43 2b17 	vmov	d7, r2, r3
 8002634:	eeb0 0a47 	vmov.f32	s0, s14
 8002638:	eef0 0a67 	vmov.f32	s1, s15
 800263c:	f017 fc9c 	bl	8019f78 <cosl>
 8002640:	ec53 2b10 	vmov	r2, r3, d0
 8002644:	4640      	mov	r0, r8
 8002646:	4649      	mov	r1, r9
 8002648:	f7fd ffae 	bl	80005a8 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4690      	mov	r8, r2
 8002652:	4699      	mov	r9, r3
 8002654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002658:	e9d7 0100 	ldrd	r0, r1, [r7]
 800265c:	f7fd fdec 	bl	8000238 <__aeabi_dsub>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	a325      	add	r3, pc, #148	@ (adr r3, 8002700 <distancecalc+0x188>)
 800266a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266e:	f7fd ff9b 	bl	80005a8 <__aeabi_dmul>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	ec43 2b17 	vmov	d7, r2, r3
 800267a:	eeb0 0a47 	vmov.f32	s0, s14
 800267e:	eef0 0a67 	vmov.f32	s1, s15
 8002682:	f017 fc79 	bl	8019f78 <cosl>
 8002686:	ec53 2b10 	vmov	r2, r3, d0
 800268a:	4640      	mov	r0, r8
 800268c:	4649      	mov	r1, r9
 800268e:	f7fd ff8b 	bl	80005a8 <__aeabi_dmul>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4620      	mov	r0, r4
 8002698:	4629      	mov	r1, r5
 800269a:	f7fd fdcf 	bl	800023c <__adddf3>
 800269e:	4602      	mov	r2, r0
 80026a0:	460b      	mov	r3, r1
 80026a2:	ec43 2b17 	vmov	d7, r2, r3
 80026a6:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80026f8 <distancecalc+0x180>
 80026aa:	eeb0 0a47 	vmov.f32	s0, s14
 80026ae:	eef0 0a67 	vmov.f32	s1, s15
 80026b2:	f017 fc03 	bl	8019ebc <fmin>
 80026b6:	eeb0 7a40 	vmov.f32	s14, s0
 80026ba:	eef0 7a60 	vmov.f32	s15, s1
 80026be:	eeb0 0a47 	vmov.f32	s0, s14
 80026c2:	eef0 0a67 	vmov.f32	s1, s15
 80026c6:	f017 fc5b 	bl	8019f80 <acosl>
 80026ca:	ec51 0b10 	vmov	r0, r1, d0
 80026ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8002708 <distancecalc+0x190>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	f7fd ff68 	bl	80005a8 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return distance;
 80026e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80026e8:	eeb0 0a47 	vmov.f32	s0, s14
 80026ec:	eef0 0a67 	vmov.f32	s1, s15
 80026f0:	3728      	adds	r7, #40	@ 0x28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026f8:	00000000 	.word	0x00000000
 80026fc:	3ff00000 	.word	0x3ff00000
 8002700:	a2529d39 	.word	0xa2529d39
 8002704:	3f91df46 	.word	0x3f91df46
 8002708:	00000000 	.word	0x00000000
 800270c:	41584dae 	.word	0x41584dae

08002710 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800271c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002720:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002728:	bf00      	nop
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_APB1_GRP1_EnableClock>:
{
 8002732:	b480      	push	{r7}
 8002734:	b085      	sub	sp, #20
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800273a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800273e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4313      	orrs	r3, r2
 8002748:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800274a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800274e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4013      	ands	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002756:	68fb      	ldr	r3, [r7, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002778:	2300      	movs	r3, #0
 800277a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <MX_RTC_Init+0xc8>)
 800277e:	4a2c      	ldr	r2, [pc, #176]	@ (8002830 <MX_RTC_Init+0xcc>)
 8002780:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002782:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <MX_RTC_Init+0xc8>)
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002788:	4b28      	ldr	r3, [pc, #160]	@ (800282c <MX_RTC_Init+0xc8>)
 800278a:	227f      	movs	r2, #127	@ 0x7f
 800278c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800278e:	4b27      	ldr	r3, [pc, #156]	@ (800282c <MX_RTC_Init+0xc8>)
 8002790:	22ff      	movs	r2, #255	@ 0xff
 8002792:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002794:	4b25      	ldr	r3, [pc, #148]	@ (800282c <MX_RTC_Init+0xc8>)
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800279a:	4b24      	ldr	r3, [pc, #144]	@ (800282c <MX_RTC_Init+0xc8>)
 800279c:	2200      	movs	r2, #0
 800279e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80027a0:	4b22      	ldr	r3, [pc, #136]	@ (800282c <MX_RTC_Init+0xc8>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80027a6:	4b21      	ldr	r3, [pc, #132]	@ (800282c <MX_RTC_Init+0xc8>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027ac:	481f      	ldr	r0, [pc, #124]	@ (800282c <MX_RTC_Init+0xc8>)
 80027ae:	f00a f86b 	bl	800c888 <HAL_RTC_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80027b8:	f7ff fb7b 	bl	8001eb2 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80027bc:	2300      	movs	r3, #0
 80027be:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2201      	movs	r2, #1
 80027d8:	4619      	mov	r1, r3
 80027da:	4814      	ldr	r0, [pc, #80]	@ (800282c <MX_RTC_Init+0xc8>)
 80027dc:	f00a f904 	bl	800c9e8 <HAL_RTC_SetTime>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_RTC_Init+0x86>
  {
    Error_Handler();
 80027e6:	f7ff fb64 	bl	8001eb2 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80027ea:	2301      	movs	r3, #1
 80027ec:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80027ee:	2301      	movs	r3, #1
 80027f0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80027f2:	2301      	movs	r3, #1
 80027f4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80027f6:	2300      	movs	r3, #0
 80027f8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80027fa:	463b      	mov	r3, r7
 80027fc:	2201      	movs	r2, #1
 80027fe:	4619      	mov	r1, r3
 8002800:	480a      	ldr	r0, [pc, #40]	@ (800282c <MX_RTC_Init+0xc8>)
 8002802:	f00a f9b5 	bl	800cb70 <HAL_RTC_SetDate>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 800280c:	f7ff fb51 	bl	8001eb2 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002810:	2204      	movs	r2, #4
 8002812:	2100      	movs	r1, #0
 8002814:	4805      	ldr	r0, [pc, #20]	@ (800282c <MX_RTC_Init+0xc8>)
 8002816:	f00a fac9 	bl	800cdac <HAL_RTCEx_SetWakeUpTimer_IT>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <MX_RTC_Init+0xc0>
  {
    Error_Handler();
 8002820:	f7ff fb47 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000c3c 	.word	0x20000c3c
 8002830:	40002800 	.word	0x40002800

08002834 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b096      	sub	sp, #88	@ 0x58
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800283c:	f107 0308 	add.w	r3, r7, #8
 8002840:	2250      	movs	r2, #80	@ 0x50
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f014 fd04 	bl	8017252 <memset>
  if(rtcHandle->Instance==RTC)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a14      	ldr	r2, [pc, #80]	@ (80028a0 <HAL_RTC_MspInit+0x6c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d121      	bne.n	8002898 <HAL_RTC_MspInit+0x64>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

	  HAL_PWR_EnableBkUpAccess();
 8002854:	f008 fa3c 	bl	800acd0 <HAL_PWR_EnableBkUpAccess>




	  HAL_PWR_EnableBkUpAccess();
 8002858:	f008 fa3a 	bl	800acd0 <HAL_PWR_EnableBkUpAccess>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800285c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002860:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8002862:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002866:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002868:	f107 0308 	add.w	r3, r7, #8
 800286c:	4618      	mov	r0, r3
 800286e:	f009 fd84 	bl	800c37a <HAL_RCCEx_PeriphCLKConfig>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002878:	f7ff fb1b 	bl	8001eb2 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800287c:	f7ff ff48 	bl	8002710 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002880:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002884:	f7ff ff55 	bl	8002732 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	2003      	movs	r0, #3
 800288e:	f005 f85e 	bl	800794e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002892:	2003      	movs	r0, #3
 8002894:	f005 f875 	bl	8007982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002898:	bf00      	nop
 800289a:	3758      	adds	r7, #88	@ 0x58
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40002800 	.word	0x40002800

080028a4 <LL_AHB2_GRP1_EnableClock>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4013      	ands	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028c8:	68fb      	ldr	r3, [r7, #12]
}
 80028ca:	bf00      	nop
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80028de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80028ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4013      	ands	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028fa:	68fb      	ldr	r3, [r7, #12]
}
 80028fc:	bf00      	nop
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <MX_SPI1_Init+0x74>)
 800290e:	4a1c      	ldr	r2, [pc, #112]	@ (8002980 <MX_SPI1_Init+0x78>)
 8002910:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002912:	4b1a      	ldr	r3, [pc, #104]	@ (800297c <MX_SPI1_Init+0x74>)
 8002914:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002918:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800291a:	4b18      	ldr	r3, [pc, #96]	@ (800297c <MX_SPI1_Init+0x74>)
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002920:	4b16      	ldr	r3, [pc, #88]	@ (800297c <MX_SPI1_Init+0x74>)
 8002922:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002926:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002928:	4b14      	ldr	r3, [pc, #80]	@ (800297c <MX_SPI1_Init+0x74>)
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800292e:	4b13      	ldr	r3, [pc, #76]	@ (800297c <MX_SPI1_Init+0x74>)
 8002930:	2200      	movs	r2, #0
 8002932:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002934:	4b11      	ldr	r3, [pc, #68]	@ (800297c <MX_SPI1_Init+0x74>)
 8002936:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800293a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800293c:	4b0f      	ldr	r3, [pc, #60]	@ (800297c <MX_SPI1_Init+0x74>)
 800293e:	2210      	movs	r2, #16
 8002940:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <MX_SPI1_Init+0x74>)
 8002944:	2200      	movs	r2, #0
 8002946:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002948:	4b0c      	ldr	r3, [pc, #48]	@ (800297c <MX_SPI1_Init+0x74>)
 800294a:	2200      	movs	r2, #0
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294e:	4b0b      	ldr	r3, [pc, #44]	@ (800297c <MX_SPI1_Init+0x74>)
 8002950:	2200      	movs	r2, #0
 8002952:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002954:	4b09      	ldr	r3, [pc, #36]	@ (800297c <MX_SPI1_Init+0x74>)
 8002956:	2207      	movs	r2, #7
 8002958:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800295a:	4b08      	ldr	r3, [pc, #32]	@ (800297c <MX_SPI1_Init+0x74>)
 800295c:	2200      	movs	r2, #0
 800295e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <MX_SPI1_Init+0x74>)
 8002962:	2208      	movs	r2, #8
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002966:	4805      	ldr	r0, [pc, #20]	@ (800297c <MX_SPI1_Init+0x74>)
 8002968:	f00a fb0c 	bl	800cf84 <HAL_SPI_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002972:	f7ff fa9e 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000c94 	.word	0x20000c94
 8002980:	40013000 	.word	0x40013000

08002984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a14 <HAL_SPI_MspInit+0x90>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d132      	bne.n	8002a0c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029a6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80029aa:	f7ff ff94 	bl	80028d6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7ff ff78 	bl	80028a4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b4:	2002      	movs	r0, #2
 80029b6:	f7ff ff75 	bl	80028a4 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 80029ba:	2342      	movs	r3, #66	@ 0x42
 80029bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ca:	2305      	movs	r3, #5
 80029cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f107 030c 	add.w	r3, r7, #12
 80029d2:	4619      	mov	r1, r3
 80029d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029d8:	f005 fb2c 	bl	8008034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80029dc:	2320      	movs	r3, #32
 80029de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e0:	2302      	movs	r3, #2
 80029e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ec:	2305      	movs	r3, #5
 80029ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	4619      	mov	r1, r3
 80029f6:	4808      	ldr	r0, [pc, #32]	@ (8002a18 <HAL_SPI_MspInit+0x94>)
 80029f8:	f005 fb1c 	bl	8008034 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2103      	movs	r1, #3
 8002a00:	2022      	movs	r0, #34	@ 0x22
 8002a02:	f004 ffa4 	bl	800794e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002a06:	2022      	movs	r0, #34	@ 0x22
 8002a08:	f004 ffbb 	bl	8007982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40013000 	.word	0x40013000
 8002a18:	48000400 	.word	0x48000400
 8002a1c:	00000000 	.word	0x00000000

08002a20 <csvframe>:
  /* USER CODE END SPI1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int csvframe(uint8_t* buffer,float temp,float vbat,GPS * gpsdata,int otherval1,float otherval2,double baroalt){
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	ed2d 8b02 	vpush	{d8}
 8002a28:	b0ab      	sub	sp, #172	@ 0xac
 8002a2a:	af18      	add	r7, sp, #96	@ 0x60
 8002a2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002a2e:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
 8002a32:	edc7 0a0d 	vstr	s1, [r7, #52]	@ 0x34
 8002a36:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a3a:	ed87 1a0a 	vstr	s2, [r7, #40]	@ 0x28
 8002a3e:	ed87 2b08 	vstr	d2, [r7, #32]
	int framesize=0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	647b      	str	r3, [r7, #68]	@ 0x44
	framesize=snprintf((char *)buffer,256, "%0.2f,%0.3f,%0.2f,%0.7f,%0.7f,%0.2f,%d,%0.2f,%0.2lf,%d-%02d-%02dT%02d:%02d:%02d.00+02:00\n\r",temp,vbat,(gpsdata->speed)*3.6,gpsdata->latitude,gpsdata->longitude,gpsdata->altitude,otherval1,otherval2,baroalt,ANNEE,MOIS,JOURS,HR,MINUTE,SEC);
 8002a46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002a48:	f7fd fd56 	bl	80004f8 <__aeabi_f2d>
 8002a4c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002a50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a52:	f7fd fd51 	bl	80004f8 <__aeabi_f2d>
 8002a56:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fd fd4a 	bl	80004f8 <__aeabi_f2d>
 8002a64:	a333      	add	r3, pc, #204	@ (adr r3, 8002b34 <csvframe+0x114>)
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	f7fd fd9d 	bl	80005a8 <__aeabi_dmul>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	ec43 2b18 	vmov	d8, r2, r3
 8002a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a78:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd36 	bl	80004f8 <__aeabi_f2d>
 8002a8c:	4682      	mov	sl, r0
 8002a8e:	468b      	mov	fp, r1
 8002a90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a92:	f7fd fd31 	bl	80004f8 <__aeabi_f2d>
 8002a96:	4b20      	ldr	r3, [pc, #128]	@ (8002b18 <csvframe+0xf8>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b1c <csvframe+0xfc>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b20 <csvframe+0x100>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <csvframe+0x104>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	461e      	mov	r6, r3
 8002aae:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <csvframe+0x108>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8002b2c <csvframe+0x10c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	9317      	str	r3, [sp, #92]	@ 0x5c
 8002aba:	9216      	str	r2, [sp, #88]	@ 0x58
 8002abc:	9615      	str	r6, [sp, #84]	@ 0x54
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	9214      	str	r2, [sp, #80]	@ 0x50
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	9213      	str	r2, [sp, #76]	@ 0x4c
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	9312      	str	r3, [sp, #72]	@ 0x48
 8002aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ace:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8002ad2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8002ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad8:	930c      	str	r3, [sp, #48]	@ 0x30
 8002ada:	e9cd ab0a 	strd	sl, fp, [sp, #40]	@ 0x28
 8002ade:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002ae2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8002ae6:	ed8d 8b04 	vstr	d8, [sp, #16]
 8002aea:	ed97 7b04 	vldr	d7, [r7, #16]
 8002aee:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002af2:	ed97 7b06 	vldr	d7, [r7, #24]
 8002af6:	ed8d 7b00 	vstr	d7, [sp]
 8002afa:	4a0d      	ldr	r2, [pc, #52]	@ (8002b30 <csvframe+0x110>)
 8002afc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b00:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002b02:	f014 fb0f 	bl	8017124 <sniprintf>
 8002b06:	6478      	str	r0, [r7, #68]	@ 0x44
	return framesize;
 8002b08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	374c      	adds	r7, #76	@ 0x4c
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	ecbd 8b02 	vpop	{d8}
 8002b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b18:	20000012 	.word	0x20000012
 8002b1c:	20000011 	.word	0x20000011
 8002b20:	20000010 	.word	0x20000010
 8002b24:	20000a95 	.word	0x20000a95
 8002b28:	20000a96 	.word	0x20000a96
 8002b2c:	20000a94 	.word	0x20000a94
 8002b30:	0801bba8 	.word	0x0801bba8
 8002b34:	cccccccd 	.word	0xcccccccd
 8002b38:	400ccccc 	.word	0x400ccccc

08002b3c <storeindex>:


void storeindex(void){
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b09c      	sub	sp, #112	@ 0x70
 8002b40:	af02      	add	r7, sp, #8
	int writepage=MAX_WRITE_PAGE+1;
 8002b42:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8002b46:	667b      	str	r3, [r7, #100]	@ 0x64
	uint8_t writebuffer[100];
	memset((uint8_t*)writebuffer,'\0',100);
 8002b48:	463b      	mov	r3, r7
 8002b4a:	2264      	movs	r2, #100	@ 0x64
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f014 fb7f 	bl	8017252 <memset>
	snprintf((char *)writebuffer,100, "%d$%d$",pageoffset,pagenumber);
 8002b54:	4b14      	ldr	r3, [pc, #80]	@ (8002ba8 <storeindex+0x6c>)
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	4b14      	ldr	r3, [pc, #80]	@ (8002bac <storeindex+0x70>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4638      	mov	r0, r7
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <storeindex+0x74>)
 8002b64:	2164      	movs	r1, #100	@ 0x64
 8002b66:	f014 fadd 	bl	8017124 <sniprintf>
	SPIF_EraseSector(&hspif1, (int)floor((writepage)/16));
 8002b6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	da00      	bge.n	8002b72 <storeindex+0x36>
 8002b70:	330f      	adds	r3, #15
 8002b72:	111b      	asrs	r3, r3, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fcad 	bl	80004d4 <__aeabi_i2d>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	f7fd ffc1 	bl	8000b08 <__aeabi_d2iz>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	480a      	ldr	r0, [pc, #40]	@ (8002bb4 <storeindex+0x78>)
 8002b8c:	f011 fdc9 	bl	8014722 <SPIF_EraseSector>
	SPIF_WritePage(&hspif1,writepage, (uint8_t *)writebuffer, 100,0);
 8002b90:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8002b92:	463a      	mov	r2, r7
 8002b94:	2300      	movs	r3, #0
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	2364      	movs	r3, #100	@ 0x64
 8002b9a:	4806      	ldr	r0, [pc, #24]	@ (8002bb4 <storeindex+0x78>)
 8002b9c:	f011 fe44 	bl	8014828 <SPIF_WritePage>

}
 8002ba0:	bf00      	nop
 8002ba2:	3768      	adds	r7, #104	@ 0x68
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	200009b4 	.word	0x200009b4
 8002bac:	200009b8 	.word	0x200009b8
 8002bb0:	0801bc04 	.word	0x0801bc04
 8002bb4:	20000780 	.word	0x20000780

08002bb8 <getindex>:

void getindex(void){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
	int readpage=MAX_WRITE_PAGE+1;
 8002bbe:	f44f 43c8 	mov.w	r3, #25600	@ 0x6400
 8002bc2:	607b      	str	r3, [r7, #4]
	SPIF_ReadPage(&hspif1, readpage, (uint8_t *)indexbuffer, 50, 0);
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	2332      	movs	r3, #50	@ 0x32
 8002bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8002c7c <getindex+0xc4>)
 8002bce:	482c      	ldr	r0, [pc, #176]	@ (8002c80 <getindex+0xc8>)
 8002bd0:	f011 fe48 	bl	8014864 <SPIF_ReadPage>
	memset(numbuf1,'$',10);
 8002bd4:	220a      	movs	r2, #10
 8002bd6:	2124      	movs	r1, #36	@ 0x24
 8002bd8:	482a      	ldr	r0, [pc, #168]	@ (8002c84 <getindex+0xcc>)
 8002bda:	f014 fb3a 	bl	8017252 <memset>
	memset(numbuf2,'$',10);
 8002bde:	220a      	movs	r2, #10
 8002be0:	2124      	movs	r1, #36	@ 0x24
 8002be2:	4829      	ldr	r0, [pc, #164]	@ (8002c88 <getindex+0xd0>)
 8002be4:	f014 fb35 	bl	8017252 <memset>
	int cnt=0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60fb      	str	r3, [r7, #12]
	if((indexbuffer[0]&0x0F)<10 ){
 8002bec:	4b23      	ldr	r3, [pc, #140]	@ (8002c7c <getindex+0xc4>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	dc3a      	bgt.n	8002c6e <getindex+0xb6>
	while(indexbuffer[cnt]!='$'){
 8002bf8:	e00b      	b.n	8002c12 <getindex+0x5a>

			  numbuf1[cnt]=indexbuffer[cnt];
 8002bfa:	4a20      	ldr	r2, [pc, #128]	@ (8002c7c <getindex+0xc4>)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4413      	add	r3, r2
 8002c00:	7819      	ldrb	r1, [r3, #0]
 8002c02:	4a20      	ldr	r2, [pc, #128]	@ (8002c84 <getindex+0xcc>)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4413      	add	r3, r2
 8002c08:	460a      	mov	r2, r1
 8002c0a:	701a      	strb	r2, [r3, #0]
			  cnt++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
	while(indexbuffer[cnt]!='$'){
 8002c12:	4a1a      	ldr	r2, [pc, #104]	@ (8002c7c <getindex+0xc4>)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b24      	cmp	r3, #36	@ 0x24
 8002c1c:	d1ed      	bne.n	8002bfa <getindex+0x42>
		  }
		  cnt++;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	3301      	adds	r3, #1
 8002c22:	60fb      	str	r3, [r7, #12]
		  int cnt1=0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
		  while(indexbuffer[cnt]!='$'){
 8002c28:	e00e      	b.n	8002c48 <getindex+0x90>

		  		  numbuf2[cnt1]=indexbuffer[cnt];
 8002c2a:	4a14      	ldr	r2, [pc, #80]	@ (8002c7c <getindex+0xc4>)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	7819      	ldrb	r1, [r3, #0]
 8002c32:	4a15      	ldr	r2, [pc, #84]	@ (8002c88 <getindex+0xd0>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4413      	add	r3, r2
 8002c38:	460a      	mov	r2, r1
 8002c3a:	701a      	strb	r2, [r3, #0]
		  		  cnt1++;
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	60bb      	str	r3, [r7, #8]
		  		  cnt++;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	3301      	adds	r3, #1
 8002c46:	60fb      	str	r3, [r7, #12]
		  while(indexbuffer[cnt]!='$'){
 8002c48:	4a0c      	ldr	r2, [pc, #48]	@ (8002c7c <getindex+0xc4>)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b24      	cmp	r3, #36	@ 0x24
 8002c52:	d1ea      	bne.n	8002c2a <getindex+0x72>
		  	  }

		 pageoffset=atoi((char *)numbuf1);
 8002c54:	480b      	ldr	r0, [pc, #44]	@ (8002c84 <getindex+0xcc>)
 8002c56:	f012 fb81 	bl	801535c <atoi>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c8c <getindex+0xd4>)
 8002c5e:	6013      	str	r3, [r2, #0]
		 pagenumber=atoi((char *)numbuf2);
 8002c60:	4809      	ldr	r0, [pc, #36]	@ (8002c88 <getindex+0xd0>)
 8002c62:	f012 fb7b 	bl	801535c <atoi>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a09      	ldr	r2, [pc, #36]	@ (8002c90 <getindex+0xd8>)
 8002c6a:	6013      	str	r3, [r2, #0]
	}
	else{
		storeindex();
	}

}
 8002c6c:	e001      	b.n	8002c72 <getindex+0xba>
		storeindex();
 8002c6e:	f7ff ff65 	bl	8002b3c <storeindex>
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000c60 	.word	0x20000c60
 8002c80:	20000780 	.word	0x20000780
 8002c84:	200009c0 	.word	0x200009c0
 8002c88:	200009cc 	.word	0x200009cc
 8002c8c:	200009b4 	.word	0x200009b4
 8002c90:	200009b8 	.word	0x200009b8

08002c94 <writebuffertoflash>:

void writebuffertoflash(uint8_t * buffer,int bufferlenght){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
	if((pagenumber+1)%16==0){
 8002c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002d9c <writebuffertoflash+0x108>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d11b      	bne.n	8002ce4 <writebuffertoflash+0x50>
		if(sectoreraseen==0){
 8002cac:	4b3c      	ldr	r3, [pc, #240]	@ (8002da0 <writebuffertoflash+0x10c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d117      	bne.n	8002ce4 <writebuffertoflash+0x50>
		SPIF_EraseSector(&hspif1, (int)floor((pagenumber+1)/16));
 8002cb4:	4b39      	ldr	r3, [pc, #228]	@ (8002d9c <writebuffertoflash+0x108>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da00      	bge.n	8002cc0 <writebuffertoflash+0x2c>
 8002cbe:	330f      	adds	r3, #15
 8002cc0:	111b      	asrs	r3, r3, #4
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc06 	bl	80004d4 <__aeabi_i2d>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f7fd ff1a 	bl	8000b08 <__aeabi_d2iz>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4832      	ldr	r0, [pc, #200]	@ (8002da4 <writebuffertoflash+0x110>)
 8002cda:	f011 fd22 	bl	8014722 <SPIF_EraseSector>
		sectoreraseen=1;
 8002cde:	4b30      	ldr	r3, [pc, #192]	@ (8002da0 <writebuffertoflash+0x10c>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
		}

		  }
	if(bufferlenght+pageoffset<256){
 8002ce4:	4b30      	ldr	r3, [pc, #192]	@ (8002da8 <writebuffertoflash+0x114>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	4413      	add	r3, r2
 8002cec:	2bff      	cmp	r3, #255	@ 0xff
 8002cee:	dc11      	bgt.n	8002d14 <writebuffertoflash+0x80>
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, bufferlenght,pageoffset);
 8002cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d9c <writebuffertoflash+0x108>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8002da8 <writebuffertoflash+0x114>)
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	9200      	str	r2, [sp, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4828      	ldr	r0, [pc, #160]	@ (8002da4 <writebuffertoflash+0x110>)
 8002d02:	f011 fd91 	bl	8014828 <SPIF_WritePage>
		pageoffset=pageoffset+bufferlenght;
 8002d06:	4b28      	ldr	r3, [pc, #160]	@ (8002da8 <writebuffertoflash+0x114>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	4a26      	ldr	r2, [pc, #152]	@ (8002da8 <writebuffertoflash+0x114>)
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	e03c      	b.n	8002d8e <writebuffertoflash+0xfa>
	}
	else{
		SPIF_WritePage(&hspif1,pagenumber, (uint8_t *)buffer, 256-pageoffset,pageoffset);
 8002d14:	4b21      	ldr	r3, [pc, #132]	@ (8002d9c <writebuffertoflash+0x108>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <writebuffertoflash+0x114>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <writebuffertoflash+0x114>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	481d      	ldr	r0, [pc, #116]	@ (8002da4 <writebuffertoflash+0x110>)
 8002d30:	f011 fd7a 	bl	8014828 <SPIF_WritePage>
		HAL_Delay(100);
 8002d34:	2064      	movs	r0, #100	@ 0x64
 8002d36:	f003 fc8b 	bl	8006650 <HAL_Delay>
		SPIF_WritePage(&hspif1,pagenumber+1, (uint8_t *)buffer+(256-pageoffset), bufferlenght-(256-pageoffset),0);
 8002d3a:	4b18      	ldr	r3, [pc, #96]	@ (8002d9c <writebuffertoflash+0x108>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	4618      	mov	r0, r3
 8002d42:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <writebuffertoflash+0x114>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1899      	adds	r1, r3, r2
 8002d50:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <writebuffertoflash+0x114>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	2300      	movs	r3, #0
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	460a      	mov	r2, r1
 8002d66:	4601      	mov	r1, r0
 8002d68:	480e      	ldr	r0, [pc, #56]	@ (8002da4 <writebuffertoflash+0x110>)
 8002d6a:	f011 fd5d 	bl	8014828 <SPIF_WritePage>
		pagenumber=pagenumber+1;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <writebuffertoflash+0x108>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	4a09      	ldr	r2, [pc, #36]	@ (8002d9c <writebuffertoflash+0x108>)
 8002d76:	6013      	str	r3, [r2, #0]
		sectoreraseen=0;
 8002d78:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <writebuffertoflash+0x10c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
		pageoffset=(bufferlenght-(256-pageoffset));
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002da8 <writebuffertoflash+0x114>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	4a07      	ldr	r2, [pc, #28]	@ (8002da8 <writebuffertoflash+0x114>)
 8002d8c:	6013      	str	r3, [r2, #0]
	}
	storeindex();
 8002d8e:	f7ff fed5 	bl	8002b3c <storeindex>

}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200009b8 	.word	0x200009b8
 8002da0:	200009bc 	.word	0x200009bc
 8002da4:	20000780 	.word	0x20000780
 8002da8:	200009b4 	.word	0x200009b4

08002dac <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

extern uint8_t bufferscreen[50];

void ssd1306_Reset(void) {
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af04      	add	r7, sp, #16
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	9301      	str	r3, [sp, #4]
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	9300      	str	r3, [sp, #0]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2178      	movs	r1, #120	@ 0x78
 8002dda:	4803      	ldr	r0, [pc, #12]	@ (8002de8 <ssd1306_WriteCommand+0x2c>)
 8002ddc:	f005 fbbc 	bl	8008558 <HAL_I2C_Mem_Write>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000458 	.word	0x20000458

08002dec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af04      	add	r7, sp, #16
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfe:	9202      	str	r2, [sp, #8]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2301      	movs	r3, #1
 8002e08:	2240      	movs	r2, #64	@ 0x40
 8002e0a:	2178      	movs	r1, #120	@ 0x78
 8002e0c:	4803      	ldr	r0, [pc, #12]	@ (8002e1c <ssd1306_WriteData+0x30>)
 8002e0e:	f005 fba3 	bl	8008558 <HAL_I2C_Mem_Write>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000458 	.word	0x20000458

08002e20 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002e24:	f7ff ffc2 	bl	8002dac <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002e28:	2064      	movs	r0, #100	@ 0x64
 8002e2a:	f003 fc11 	bl	8006650 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f000 fb1a 	bl	8003468 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002e34:	2020      	movs	r0, #32
 8002e36:	f7ff ffc1 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f7ff ffbe 	bl	8002dbc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e40:	20b0      	movs	r0, #176	@ 0xb0
 8002e42:	f7ff ffbb 	bl	8002dbc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002e46:	20c8      	movs	r0, #200	@ 0xc8
 8002e48:	f7ff ffb8 	bl	8002dbc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7ff ffb5 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002e52:	2010      	movs	r0, #16
 8002e54:	f7ff ffb2 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002e58:	2040      	movs	r0, #64	@ 0x40
 8002e5a:	f7ff ffaf 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002e5e:	20ff      	movs	r0, #255	@ 0xff
 8002e60:	f000 faee 	bl	8003440 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002e64:	20a1      	movs	r0, #161	@ 0xa1
 8002e66:	f7ff ffa9 	bl	8002dbc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002e6a:	20a6      	movs	r0, #166	@ 0xa6
 8002e6c:	f7ff ffa6 	bl	8002dbc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002e70:	20a8      	movs	r0, #168	@ 0xa8
 8002e72:	f7ff ffa3 	bl	8002dbc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002e76:	203f      	movs	r0, #63	@ 0x3f
 8002e78:	f7ff ffa0 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002e7c:	20a4      	movs	r0, #164	@ 0xa4
 8002e7e:	f7ff ff9d 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002e82:	20d3      	movs	r0, #211	@ 0xd3
 8002e84:	f7ff ff9a 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002e88:	2000      	movs	r0, #0
 8002e8a:	f7ff ff97 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002e8e:	20d5      	movs	r0, #213	@ 0xd5
 8002e90:	f7ff ff94 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002e94:	20f0      	movs	r0, #240	@ 0xf0
 8002e96:	f7ff ff91 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002e9a:	20d9      	movs	r0, #217	@ 0xd9
 8002e9c:	f7ff ff8e 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002ea0:	2022      	movs	r0, #34	@ 0x22
 8002ea2:	f7ff ff8b 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002ea6:	20da      	movs	r0, #218	@ 0xda
 8002ea8:	f7ff ff88 	bl	8002dbc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002eac:	2012      	movs	r0, #18
 8002eae:	f7ff ff85 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002eb2:	20db      	movs	r0, #219	@ 0xdb
 8002eb4:	f7ff ff82 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002eb8:	2020      	movs	r0, #32
 8002eba:	f7ff ff7f 	bl	8002dbc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002ebe:	208d      	movs	r0, #141	@ 0x8d
 8002ec0:	f7ff ff7c 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002ec4:	2014      	movs	r0, #20
 8002ec6:	f7ff ff79 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002eca:	2001      	movs	r0, #1
 8002ecc:	f000 facc 	bl	8003468 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f000 f80f 	bl	8002ef4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002ed6:	f000 f825 	bl	8002f24 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002eda:	4b05      	ldr	r3, [pc, #20]	@ (8002ef0 <ssd1306_Init+0xd0>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002ee0:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <ssd1306_Init+0xd0>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002ee6:	4b02      	ldr	r3, [pc, #8]	@ (8002ef0 <ssd1306_Init+0xd0>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	711a      	strb	r2, [r3, #4]
}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200010f8 	.word	0x200010f8

08002ef4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	4603      	mov	r3, r0
 8002efc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <ssd1306_Fill+0x14>
 8002f04:	2300      	movs	r3, #0
 8002f06:	e000      	b.n	8002f0a <ssd1306_Fill+0x16>
 8002f08:	23ff      	movs	r3, #255	@ 0xff
 8002f0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4803      	ldr	r0, [pc, #12]	@ (8002f20 <ssd1306_Fill+0x2c>)
 8002f12:	f014 f99e 	bl	8017252 <memset>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000cf8 	.word	0x20000cf8

08002f24 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	71fb      	strb	r3, [r7, #7]
 8002f2e:	e016      	b.n	8002f5e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	3b50      	subs	r3, #80	@ 0x50
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ff40 	bl	8002dbc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff ff3d 	bl	8002dbc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002f42:	2010      	movs	r0, #16
 8002f44:	f7ff ff3a 	bl	8002dbc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	01db      	lsls	r3, r3, #7
 8002f4c:	4a08      	ldr	r2, [pc, #32]	@ (8002f70 <ssd1306_UpdateScreen+0x4c>)
 8002f4e:	4413      	add	r3, r2
 8002f50:	2180      	movs	r1, #128	@ 0x80
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ff4a 	bl	8002dec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	71fb      	strb	r3, [r7, #7]
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b07      	cmp	r3, #7
 8002f62:	d9e5      	bls.n	8002f30 <ssd1306_UpdateScreen+0xc>
    }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000cf8 	.word	0x20000cf8

08002f74 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	71fb      	strb	r3, [r7, #7]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	71bb      	strb	r3, [r7, #6]
 8002f82:	4613      	mov	r3, r2
 8002f84:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	db3d      	blt.n	800300a <ssd1306_DrawPixel+0x96>
 8002f8e:	79bb      	ldrb	r3, [r7, #6]
 8002f90:	2b3f      	cmp	r3, #63	@ 0x3f
 8002f92:	d83a      	bhi.n	800300a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002f94:	797b      	ldrb	r3, [r7, #5]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d11a      	bne.n	8002fd0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	79bb      	ldrb	r3, [r7, #6]
 8002f9e:	08db      	lsrs	r3, r3, #3
 8002fa0:	b2d8      	uxtb	r0, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	01db      	lsls	r3, r3, #7
 8002fa6:	4413      	add	r3, r2
 8002fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8003018 <ssd1306_DrawPixel+0xa4>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	b25a      	sxtb	r2, r3
 8002fae:	79bb      	ldrb	r3, [r7, #6]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fba:	b25b      	sxtb	r3, r3
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	b259      	sxtb	r1, r3
 8002fc0:	79fa      	ldrb	r2, [r7, #7]
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	01db      	lsls	r3, r3, #7
 8002fc6:	4413      	add	r3, r2
 8002fc8:	b2c9      	uxtb	r1, r1
 8002fca:	4a13      	ldr	r2, [pc, #76]	@ (8003018 <ssd1306_DrawPixel+0xa4>)
 8002fcc:	54d1      	strb	r1, [r2, r3]
 8002fce:	e01d      	b.n	800300c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002fd0:	79fa      	ldrb	r2, [r7, #7]
 8002fd2:	79bb      	ldrb	r3, [r7, #6]
 8002fd4:	08db      	lsrs	r3, r3, #3
 8002fd6:	b2d8      	uxtb	r0, r3
 8002fd8:	4603      	mov	r3, r0
 8002fda:	01db      	lsls	r3, r3, #7
 8002fdc:	4413      	add	r3, r2
 8002fde:	4a0e      	ldr	r2, [pc, #56]	@ (8003018 <ssd1306_DrawPixel+0xa4>)
 8002fe0:	5cd3      	ldrb	r3, [r2, r3]
 8002fe2:	b25a      	sxtb	r2, r3
 8002fe4:	79bb      	ldrb	r3, [r7, #6]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	2101      	movs	r1, #1
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	b259      	sxtb	r1, r3
 8002ffa:	79fa      	ldrb	r2, [r7, #7]
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	01db      	lsls	r3, r3, #7
 8003000:	4413      	add	r3, r2
 8003002:	b2c9      	uxtb	r1, r1
 8003004:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <ssd1306_DrawPixel+0xa4>)
 8003006:	54d1      	strb	r1, [r2, r3]
 8003008:	e000      	b.n	800300c <ssd1306_DrawPixel+0x98>
        return;
 800300a:	bf00      	nop
    }
}
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000cf8 	.word	0x20000cf8

0800301c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	4604      	mov	r4, r0
 8003024:	1d38      	adds	r0, r7, #4
 8003026:	e880 0006 	stmia.w	r0, {r1, r2}
 800302a:	461a      	mov	r2, r3
 800302c:	4623      	mov	r3, r4
 800302e:	73fb      	strb	r3, [r7, #15]
 8003030:	4613      	mov	r3, r2
 8003032:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	2b1f      	cmp	r3, #31
 8003038:	d902      	bls.n	8003040 <ssd1306_WriteChar+0x24>
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b7e      	cmp	r3, #126	@ 0x7e
 800303e:	d901      	bls.n	8003044 <ssd1306_WriteChar+0x28>
        return 0;
 8003040:	2300      	movs	r3, #0
 8003042:	e06c      	b.n	800311e <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8003044:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	461a      	mov	r2, r3
 800304a:	793b      	ldrb	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	2b80      	cmp	r3, #128	@ 0x80
 8003050:	dc06      	bgt.n	8003060 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8003052:	4b35      	ldr	r3, [pc, #212]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 8003054:	885b      	ldrh	r3, [r3, #2]
 8003056:	461a      	mov	r2, r3
 8003058:	797b      	ldrb	r3, [r7, #5]
 800305a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800305c:	2b40      	cmp	r3, #64	@ 0x40
 800305e:	dd01      	ble.n	8003064 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8003060:	2300      	movs	r3, #0
 8003062:	e05c      	b.n	800311e <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	e04c      	b.n	8003104 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	7bfb      	ldrb	r3, [r7, #15]
 800306e:	3b20      	subs	r3, #32
 8003070:	7979      	ldrb	r1, [r7, #5]
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4619      	mov	r1, r3
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	440b      	add	r3, r1
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4413      	add	r3, r2
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e034      	b.n	80030f4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800309a:	4b23      	ldr	r3, [pc, #140]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	4413      	add	r3, r2
 80030a6:	b2d8      	uxtb	r0, r3
 80030a8:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 80030aa:	885b      	ldrh	r3, [r3, #2]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	7bba      	ldrb	r2, [r7, #14]
 80030b8:	4619      	mov	r1, r3
 80030ba:	f7ff ff5b 	bl	8002f74 <ssd1306_DrawPixel>
 80030be:	e016      	b.n	80030ee <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	4413      	add	r3, r2
 80030cc:	b2d8      	uxtb	r0, r3
 80030ce:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 80030d0:	885b      	ldrh	r3, [r3, #2]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	4413      	add	r3, r2
 80030da:	b2d9      	uxtb	r1, r3
 80030dc:	7bbb      	ldrb	r3, [r7, #14]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	f7ff ff43 	bl	8002f74 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	3301      	adds	r3, #1
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	793b      	ldrb	r3, [r7, #4]
 80030f6:	461a      	mov	r2, r3
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d3c5      	bcc.n	800308a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3301      	adds	r3, #1
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	797b      	ldrb	r3, [r7, #5]
 8003106:	461a      	mov	r2, r3
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	4293      	cmp	r3, r2
 800310c:	d3ad      	bcc.n	800306a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	793a      	ldrb	r2, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	b29a      	uxth	r2, r3
 8003118:	4b03      	ldr	r3, [pc, #12]	@ (8003128 <ssd1306_WriteChar+0x10c>)
 800311a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800311c:	7bfb      	ldrb	r3, [r7, #15]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	@ 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	bf00      	nop
 8003128:	200010f8 	.word	0x200010f8

0800312c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	1d38      	adds	r0, r7, #4
 8003136:	e880 0006 	stmia.w	r0, {r1, r2}
 800313a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800313c:	e012      	b.n	8003164 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	7818      	ldrb	r0, [r3, #0]
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	1d3a      	adds	r2, r7, #4
 8003146:	ca06      	ldmia	r2, {r1, r2}
 8003148:	f7ff ff68 	bl	800301c <ssd1306_WriteChar>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	429a      	cmp	r2, r3
 8003156:	d002      	beq.n	800315e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	e008      	b.n	8003170 <ssd1306_WriteString+0x44>
        }
        str++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	3301      	adds	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1e8      	bne.n	800313e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	781b      	ldrb	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	460a      	mov	r2, r1
 8003182:	71fb      	strb	r3, [r7, #7]
 8003184:	4613      	mov	r3, r2
 8003186:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <ssd1306_SetCursor+0x2c>)
 800318e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003190:	79bb      	ldrb	r3, [r7, #6]
 8003192:	b29a      	uxth	r2, r3
 8003194:	4b03      	ldr	r3, [pc, #12]	@ (80031a4 <ssd1306_SetCursor+0x2c>)
 8003196:	805a      	strh	r2, [r3, #2]
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	200010f8 	.word	0x200010f8

080031a8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b089      	sub	sp, #36	@ 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4604      	mov	r4, r0
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4623      	mov	r3, r4
 80031b8:	71fb      	strb	r3, [r7, #7]
 80031ba:	4603      	mov	r3, r0
 80031bc:	71bb      	strb	r3, [r7, #6]
 80031be:	460b      	mov	r3, r1
 80031c0:	717b      	strb	r3, [r7, #5]
 80031c2:	4613      	mov	r3, r2
 80031c4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80031c6:	797a      	ldrb	r2, [r7, #5]
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bfb8      	it	lt
 80031d0:	425b      	neglt	r3, r3
 80031d2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80031d4:	793a      	ldrb	r2, [r7, #4]
 80031d6:	79bb      	ldrb	r3, [r7, #6]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	bfb8      	it	lt
 80031de:	425b      	neglt	r3, r3
 80031e0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80031e2:	79fa      	ldrb	r2, [r7, #7]
 80031e4:	797b      	ldrb	r3, [r7, #5]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d201      	bcs.n	80031ee <ssd1306_Line+0x46>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e001      	b.n	80031f2 <ssd1306_Line+0x4a>
 80031ee:	f04f 33ff 	mov.w	r3, #4294967295
 80031f2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80031f4:	79ba      	ldrb	r2, [r7, #6]
 80031f6:	793b      	ldrb	r3, [r7, #4]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d201      	bcs.n	8003200 <ssd1306_Line+0x58>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e001      	b.n	8003204 <ssd1306_Line+0x5c>
 8003200:	f04f 33ff 	mov.w	r3, #4294967295
 8003204:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 800320e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003212:	7939      	ldrb	r1, [r7, #4]
 8003214:	797b      	ldrb	r3, [r7, #5]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff feac 	bl	8002f74 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 800321c:	e024      	b.n	8003268 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 800321e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003222:	79b9      	ldrb	r1, [r7, #6]
 8003224:	79fb      	ldrb	r3, [r7, #7]
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fea4 	bl	8002f74 <ssd1306_DrawPixel>
        error2 = error * 2;
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	425b      	negs	r3, r3
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	dd08      	ble.n	800324e <ssd1306_Line+0xa6>
            error -= deltaY;
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	b2da      	uxtb	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4413      	add	r3, r2
 800324c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	429a      	cmp	r2, r3
 8003254:	da08      	bge.n	8003268 <ssd1306_Line+0xc0>
            error += deltaX;
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	4413      	add	r3, r2
 800325c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	79bb      	ldrb	r3, [r7, #6]
 8003264:	4413      	add	r3, r2
 8003266:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003268:	79fa      	ldrb	r2, [r7, #7]
 800326a:	797b      	ldrb	r3, [r7, #5]
 800326c:	429a      	cmp	r2, r3
 800326e:	d1d6      	bne.n	800321e <ssd1306_Line+0x76>
 8003270:	79ba      	ldrb	r2, [r7, #6]
 8003272:	793b      	ldrb	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d1d2      	bne.n	800321e <ssd1306_Line+0x76>
        }
    }
    return;
 8003278:	bf00      	nop
}
 800327a:	3724      	adds	r7, #36	@ 0x24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd90      	pop	{r4, r7, pc}

08003280 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003280:	b590      	push	{r4, r7, lr}
 8003282:	b085      	sub	sp, #20
 8003284:	af02      	add	r7, sp, #8
 8003286:	4604      	mov	r4, r0
 8003288:	4608      	mov	r0, r1
 800328a:	4611      	mov	r1, r2
 800328c:	461a      	mov	r2, r3
 800328e:	4623      	mov	r3, r4
 8003290:	71fb      	strb	r3, [r7, #7]
 8003292:	4603      	mov	r3, r0
 8003294:	71bb      	strb	r3, [r7, #6]
 8003296:	460b      	mov	r3, r1
 8003298:	717b      	strb	r3, [r7, #5]
 800329a:	4613      	mov	r3, r2
 800329c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800329e:	79bc      	ldrb	r4, [r7, #6]
 80032a0:	797a      	ldrb	r2, [r7, #5]
 80032a2:	79b9      	ldrb	r1, [r7, #6]
 80032a4:	79f8      	ldrb	r0, [r7, #7]
 80032a6:	7e3b      	ldrb	r3, [r7, #24]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	4623      	mov	r3, r4
 80032ac:	f7ff ff7c 	bl	80031a8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 80032b0:	793c      	ldrb	r4, [r7, #4]
 80032b2:	797a      	ldrb	r2, [r7, #5]
 80032b4:	79b9      	ldrb	r1, [r7, #6]
 80032b6:	7978      	ldrb	r0, [r7, #5]
 80032b8:	7e3b      	ldrb	r3, [r7, #24]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4623      	mov	r3, r4
 80032be:	f7ff ff73 	bl	80031a8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 80032c2:	793c      	ldrb	r4, [r7, #4]
 80032c4:	79fa      	ldrb	r2, [r7, #7]
 80032c6:	7939      	ldrb	r1, [r7, #4]
 80032c8:	7978      	ldrb	r0, [r7, #5]
 80032ca:	7e3b      	ldrb	r3, [r7, #24]
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	4623      	mov	r3, r4
 80032d0:	f7ff ff6a 	bl	80031a8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 80032d4:	79bc      	ldrb	r4, [r7, #6]
 80032d6:	79fa      	ldrb	r2, [r7, #7]
 80032d8:	7939      	ldrb	r1, [r7, #4]
 80032da:	79f8      	ldrb	r0, [r7, #7]
 80032dc:	7e3b      	ldrb	r3, [r7, #24]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	4623      	mov	r3, r4
 80032e2:	f7ff ff61 	bl	80031a8 <ssd1306_Line>

    return;
 80032e6:	bf00      	nop
}
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}

080032ee <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80032ee:	b590      	push	{r4, r7, lr}
 80032f0:	b085      	sub	sp, #20
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4604      	mov	r4, r0
 80032f6:	4608      	mov	r0, r1
 80032f8:	4611      	mov	r1, r2
 80032fa:	461a      	mov	r2, r3
 80032fc:	4623      	mov	r3, r4
 80032fe:	71fb      	strb	r3, [r7, #7]
 8003300:	4603      	mov	r3, r0
 8003302:	71bb      	strb	r3, [r7, #6]
 8003304:	460b      	mov	r3, r1
 8003306:	717b      	strb	r3, [r7, #5]
 8003308:	4613      	mov	r3, r2
 800330a:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800330c:	79fa      	ldrb	r2, [r7, #7]
 800330e:	797b      	ldrb	r3, [r7, #5]
 8003310:	4293      	cmp	r3, r2
 8003312:	bf28      	it	cs
 8003314:	4613      	movcs	r3, r2
 8003316:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8003318:	797a      	ldrb	r2, [r7, #5]
 800331a:	79fb      	ldrb	r3, [r7, #7]
 800331c:	4293      	cmp	r3, r2
 800331e:	bf38      	it	cc
 8003320:	4613      	movcc	r3, r2
 8003322:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8003324:	79ba      	ldrb	r2, [r7, #6]
 8003326:	793b      	ldrb	r3, [r7, #4]
 8003328:	4293      	cmp	r3, r2
 800332a:	bf28      	it	cs
 800332c:	4613      	movcs	r3, r2
 800332e:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8003330:	793a      	ldrb	r2, [r7, #4]
 8003332:	79bb      	ldrb	r3, [r7, #6]
 8003334:	4293      	cmp	r3, r2
 8003336:	bf38      	it	cc
 8003338:	4613      	movcc	r3, r2
 800333a:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800333c:	7afb      	ldrb	r3, [r7, #11]
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	e017      	b.n	8003372 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003342:	7b7b      	ldrb	r3, [r7, #13]
 8003344:	73bb      	strb	r3, [r7, #14]
 8003346:	e009      	b.n	800335c <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8003348:	f897 2020 	ldrb.w	r2, [r7, #32]
 800334c:	7bf9      	ldrb	r1, [r7, #15]
 800334e:	7bbb      	ldrb	r3, [r7, #14]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fe0f 	bl	8002f74 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003356:	7bbb      	ldrb	r3, [r7, #14]
 8003358:	3301      	adds	r3, #1
 800335a:	73bb      	strb	r3, [r7, #14]
 800335c:	7bba      	ldrb	r2, [r7, #14]
 800335e:	7b3b      	ldrb	r3, [r7, #12]
 8003360:	429a      	cmp	r2, r3
 8003362:	d803      	bhi.n	800336c <ssd1306_FillRectangle+0x7e>
 8003364:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003368:	2b00      	cmp	r3, #0
 800336a:	daed      	bge.n	8003348 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800336c:	7bfb      	ldrb	r3, [r7, #15]
 800336e:	3301      	adds	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	7abb      	ldrb	r3, [r7, #10]
 8003376:	429a      	cmp	r2, r3
 8003378:	d803      	bhi.n	8003382 <ssd1306_FillRectangle+0x94>
 800337a:	7bfb      	ldrb	r3, [r7, #15]
 800337c:	2b3f      	cmp	r3, #63	@ 0x3f
 800337e:	d9e0      	bls.n	8003342 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8003380:	bf00      	nop
 8003382:	bf00      	nop
}
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	bd90      	pop	{r4, r7, pc}

0800338a <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	603a      	str	r2, [r7, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
 8003398:	460b      	mov	r3, r1
 800339a:	71bb      	strb	r3, [r7, #6]
 800339c:	4613      	mov	r3, r2
 800339e:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80033a0:	797b      	ldrb	r3, [r7, #5]
 80033a2:	3307      	adds	r3, #7
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	da00      	bge.n	80033aa <ssd1306_DrawBitmap+0x20>
 80033a8:	3307      	adds	r3, #7
 80033aa:	10db      	asrs	r3, r3, #3
 80033ac:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db3e      	blt.n	8003438 <ssd1306_DrawBitmap+0xae>
 80033ba:	79bb      	ldrb	r3, [r7, #6]
 80033bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80033be:	d83b      	bhi.n	8003438 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80033c0:	2300      	movs	r3, #0
 80033c2:	73bb      	strb	r3, [r7, #14]
 80033c4:	e033      	b.n	800342e <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80033c6:	2300      	movs	r3, #0
 80033c8:	737b      	strb	r3, [r7, #13]
 80033ca:	e026      	b.n	800341a <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80033cc:	7b7b      	ldrb	r3, [r7, #13]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e00d      	b.n	80033fa <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80033de:	7bbb      	ldrb	r3, [r7, #14]
 80033e0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033e4:	fb02 f303 	mul.w	r3, r2, r3
 80033e8:	7b7a      	ldrb	r2, [r7, #13]
 80033ea:	08d2      	lsrs	r2, r2, #3
 80033ec:	b2d2      	uxtb	r2, r2
 80033ee:	4413      	add	r3, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	4413      	add	r3, r2
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80033fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	da08      	bge.n	8003414 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8003402:	79fa      	ldrb	r2, [r7, #7]
 8003404:	7b7b      	ldrb	r3, [r7, #13]
 8003406:	4413      	add	r3, r2
 8003408:	b2db      	uxtb	r3, r3
 800340a:	7f3a      	ldrb	r2, [r7, #28]
 800340c:	79b9      	ldrb	r1, [r7, #6]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff fdb0 	bl	8002f74 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8003414:	7b7b      	ldrb	r3, [r7, #13]
 8003416:	3301      	adds	r3, #1
 8003418:	737b      	strb	r3, [r7, #13]
 800341a:	7b7a      	ldrb	r2, [r7, #13]
 800341c:	797b      	ldrb	r3, [r7, #5]
 800341e:	429a      	cmp	r2, r3
 8003420:	d3d4      	bcc.n	80033cc <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003422:	7bbb      	ldrb	r3, [r7, #14]
 8003424:	3301      	adds	r3, #1
 8003426:	73bb      	strb	r3, [r7, #14]
 8003428:	79bb      	ldrb	r3, [r7, #6]
 800342a:	3301      	adds	r3, #1
 800342c:	71bb      	strb	r3, [r7, #6]
 800342e:	7bba      	ldrb	r2, [r7, #14]
 8003430:	7e3b      	ldrb	r3, [r7, #24]
 8003432:	429a      	cmp	r2, r3
 8003434:	d3c7      	bcc.n	80033c6 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8003436:	e000      	b.n	800343a <ssd1306_DrawBitmap+0xb0>
        return;
 8003438:	bf00      	nop
}
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800344a:	2381      	movs	r3, #129	@ 0x81
 800344c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fcb3 	bl	8002dbc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fcaf 	bl	8002dbc <ssd1306_WriteCommand>
}
 800345e:	bf00      	nop
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003478:	23af      	movs	r3, #175	@ 0xaf
 800347a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800347c:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <ssd1306_SetDisplayOn+0x38>)
 800347e:	2201      	movs	r2, #1
 8003480:	715a      	strb	r2, [r3, #5]
 8003482:	e004      	b.n	800348e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003484:	23ae      	movs	r3, #174	@ 0xae
 8003486:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003488:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <ssd1306_SetDisplayOn+0x38>)
 800348a:	2200      	movs	r2, #0
 800348c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fc93 	bl	8002dbc <ssd1306_WriteCommand>
}
 8003496:	bf00      	nop
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200010f8 	.word	0x200010f8
 80034a4:	00000000 	.word	0x00000000

080034a8 <batterygauge>:



}

void batterygauge(float vbat,int x, int y,int currentsquare){
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af02      	add	r7, sp, #8
 80034ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80034b2:	60b8      	str	r0, [r7, #8]
 80034b4:	6079      	str	r1, [r7, #4]
 80034b6:	603a      	str	r2, [r7, #0]
	ssd1306_Line(x+15,y+1,x+15,y+5, White);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	330f      	adds	r3, #15
 80034be:	b2d8      	uxtb	r0, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3301      	adds	r3, #1
 80034c6:	b2d9      	uxtb	r1, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	330f      	adds	r3, #15
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	3305      	adds	r3, #5
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2401      	movs	r4, #1
 80034da:	9400      	str	r4, [sp, #0]
 80034dc:	f7ff fe64 	bl	80031a8 <ssd1306_Line>
	ssd1306_Line(x+16,y+1,x+16,y+5, White);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3310      	adds	r3, #16
 80034e6:	b2d8      	uxtb	r0, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	b2d9      	uxtb	r1, r3
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	3310      	adds	r3, #16
 80034f6:	b2da      	uxtb	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3305      	adds	r3, #5
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2401      	movs	r4, #1
 8003502:	9400      	str	r4, [sp, #0]
 8003504:	f7ff fe50 	bl	80031a8 <ssd1306_Line>
	ssd1306_DrawRectangle(x, y, x+14, y+6, White);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	b2d8      	uxtb	r0, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	b2d9      	uxtb	r1, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	330e      	adds	r3, #14
 8003516:	b2da      	uxtb	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	3306      	adds	r3, #6
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2401      	movs	r4, #1
 8003522:	9400      	str	r4, [sp, #0]
 8003524:	f7ff feac 	bl	8003280 <ssd1306_DrawRectangle>
	if(vbat<=3.7){
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7fc ffe5 	bl	80004f8 <__aeabi_f2d>
 800352e:	a396      	add	r3, pc, #600	@ (adr r3, 8003788 <batterygauge+0x2e0>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fd fab4 	bl	8000aa0 <__aeabi_dcmple>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d02a      	beq.n	8003594 <batterygauge+0xec>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	3302      	adds	r3, #2
 8003544:	b2d8      	uxtb	r0, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	3302      	adds	r3, #2
 800354c:	b2d9      	uxtb	r1, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3303      	adds	r3, #3
 8003554:	b2da      	uxtb	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3304      	adds	r3, #4
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2401      	movs	r4, #1
 8003560:	9400      	str	r4, [sp, #0]
 8003562:	f7ff fe8d 	bl	8003280 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d113      	bne.n	8003594 <batterygauge+0xec>
			ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	3302      	adds	r3, #2
 8003572:	b2d8      	uxtb	r0, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3302      	adds	r3, #2
 800357a:	b2d9      	uxtb	r1, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	b2db      	uxtb	r3, r3
 8003580:	3303      	adds	r3, #3
 8003582:	b2da      	uxtb	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3304      	adds	r3, #4
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2401      	movs	r4, #1
 800358e:	9400      	str	r4, [sp, #0]
 8003590:	f7ff fe76 	bl	8003280 <ssd1306_DrawRectangle>
		}
		else{

		}
	}
	if(vbat>3.7 && vbat<= 3.9){
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f7fc ffaf 	bl	80004f8 <__aeabi_f2d>
 800359a:	a37b      	add	r3, pc, #492	@ (adr r3, 8003788 <batterygauge+0x2e0>)
 800359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a0:	f7fd fa92 	bl	8000ac8 <__aeabi_dcmpgt>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d035      	beq.n	8003616 <batterygauge+0x16e>
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f7fc ffa4 	bl	80004f8 <__aeabi_f2d>
 80035b0:	a377      	add	r3, pc, #476	@ (adr r3, 8003790 <batterygauge+0x2e8>)
 80035b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b6:	f7fd fa73 	bl	8000aa0 <__aeabi_dcmple>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d02a      	beq.n	8003616 <batterygauge+0x16e>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	3302      	adds	r3, #2
 80035c6:	b2d8      	uxtb	r0, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	3302      	adds	r3, #2
 80035ce:	b2d9      	uxtb	r1, r3
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	3303      	adds	r3, #3
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	3304      	adds	r3, #4
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2401      	movs	r4, #1
 80035e2:	9400      	str	r4, [sp, #0]
 80035e4:	f7ff fe4c 	bl	8003280 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d113      	bne.n	8003616 <batterygauge+0x16e>
			ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	3305      	adds	r3, #5
 80035f4:	b2d8      	uxtb	r0, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3302      	adds	r3, #2
 80035fc:	b2d9      	uxtb	r1, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3306      	adds	r3, #6
 8003604:	b2da      	uxtb	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	3304      	adds	r3, #4
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2401      	movs	r4, #1
 8003610:	9400      	str	r4, [sp, #0]
 8003612:	f7ff fe35 	bl	8003280 <ssd1306_DrawRectangle>
				else{

				}

	}
	if(vbat>3.9 && vbat<=4.1){
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f7fc ff6e 	bl	80004f8 <__aeabi_f2d>
 800361c:	a35c      	add	r3, pc, #368	@ (adr r3, 8003790 <batterygauge+0x2e8>)
 800361e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003622:	f7fd fa51 	bl	8000ac8 <__aeabi_dcmpgt>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d049      	beq.n	80036c0 <batterygauge+0x218>
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7fc ff63 	bl	80004f8 <__aeabi_f2d>
 8003632:	a359      	add	r3, pc, #356	@ (adr r3, 8003798 <batterygauge+0x2f0>)
 8003634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003638:	f7fd fa32 	bl	8000aa0 <__aeabi_dcmple>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d03e      	beq.n	80036c0 <batterygauge+0x218>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3302      	adds	r3, #2
 8003648:	b2d8      	uxtb	r0, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	3302      	adds	r3, #2
 8003650:	b2d9      	uxtb	r1, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	3303      	adds	r3, #3
 8003658:	b2da      	uxtb	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	3304      	adds	r3, #4
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2401      	movs	r4, #1
 8003664:	9400      	str	r4, [sp, #0]
 8003666:	f7ff fe0b 	bl	8003280 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	b2db      	uxtb	r3, r3
 800366e:	3305      	adds	r3, #5
 8003670:	b2d8      	uxtb	r0, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	3302      	adds	r3, #2
 8003678:	b2d9      	uxtb	r1, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	3306      	adds	r3, #6
 8003680:	b2da      	uxtb	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3304      	adds	r3, #4
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2401      	movs	r4, #1
 800368c:	9400      	str	r4, [sp, #0]
 800368e:	f7ff fdf7 	bl	8003280 <ssd1306_DrawRectangle>

		if(currentsquare==1){
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d113      	bne.n	80036c0 <batterygauge+0x218>
			ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	3308      	adds	r3, #8
 800369e:	b2d8      	uxtb	r0, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	3302      	adds	r3, #2
 80036a6:	b2d9      	uxtb	r1, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	3309      	adds	r3, #9
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	3304      	adds	r3, #4
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2401      	movs	r4, #1
 80036ba:	9400      	str	r4, [sp, #0]
 80036bc:	f7ff fde0 	bl	8003280 <ssd1306_DrawRectangle>
				else{

				}
	}

	if(vbat>4.1){
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7fc ff19 	bl	80004f8 <__aeabi_f2d>
 80036c6:	a334      	add	r3, pc, #208	@ (adr r3, 8003798 <batterygauge+0x2f0>)
 80036c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036cc:	f7fd f9fc 	bl	8000ac8 <__aeabi_dcmpgt>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d100      	bne.n	80036d8 <batterygauge+0x230>
	}




}
 80036d6:	e052      	b.n	800377e <batterygauge+0x2d6>
		ssd1306_DrawRectangle(x+2, y+2, x+3, y+4, White);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3302      	adds	r3, #2
 80036de:	b2d8      	uxtb	r0, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	3302      	adds	r3, #2
 80036e6:	b2d9      	uxtb	r1, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	3303      	adds	r3, #3
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	3304      	adds	r3, #4
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2401      	movs	r4, #1
 80036fa:	9400      	str	r4, [sp, #0]
 80036fc:	f7ff fdc0 	bl	8003280 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+5, y+2, x+6, y+4, White);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3305      	adds	r3, #5
 8003706:	b2d8      	uxtb	r0, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	3302      	adds	r3, #2
 800370e:	b2d9      	uxtb	r1, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	3306      	adds	r3, #6
 8003716:	b2da      	uxtb	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	3304      	adds	r3, #4
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2401      	movs	r4, #1
 8003722:	9400      	str	r4, [sp, #0]
 8003724:	f7ff fdac 	bl	8003280 <ssd1306_DrawRectangle>
		ssd1306_DrawRectangle(x+8, y+2, x+9, y+4, White);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3308      	adds	r3, #8
 800372e:	b2d8      	uxtb	r0, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3302      	adds	r3, #2
 8003736:	b2d9      	uxtb	r1, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3309      	adds	r3, #9
 800373e:	b2da      	uxtb	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	3304      	adds	r3, #4
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2401      	movs	r4, #1
 800374a:	9400      	str	r4, [sp, #0]
 800374c:	f7ff fd98 	bl	8003280 <ssd1306_DrawRectangle>
		if(currentsquare==1){
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d113      	bne.n	800377e <batterygauge+0x2d6>
			ssd1306_DrawRectangle(x+11, y+2, x+12, y+4, White);
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	330b      	adds	r3, #11
 800375c:	b2d8      	uxtb	r0, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	b2db      	uxtb	r3, r3
 8003762:	3302      	adds	r3, #2
 8003764:	b2d9      	uxtb	r1, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	330c      	adds	r3, #12
 800376c:	b2da      	uxtb	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	3304      	adds	r3, #4
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2401      	movs	r4, #1
 8003778:	9400      	str	r4, [sp, #0]
 800377a:	f7ff fd81 	bl	8003280 <ssd1306_DrawRectangle>
}
 800377e:	bf00      	nop
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bd90      	pop	{r4, r7, pc}
 8003786:	bf00      	nop
 8003788:	9999999a 	.word	0x9999999a
 800378c:	400d9999 	.word	0x400d9999
 8003790:	33333333 	.word	0x33333333
 8003794:	400f3333 	.word	0x400f3333
 8003798:	66666666 	.word	0x66666666
 800379c:	40106666 	.word	0x40106666

080037a0 <percentage>:

void percentage(float percent){
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af02      	add	r7, sp, #8
 80037a6:	ed87 0a01 	vstr	s0, [r7, #4]
	ssd1306_FillRectangle(32, 40, floor(0.64*percent+32), 56, White);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7fc fea4 	bl	80004f8 <__aeabi_f2d>
 80037b0:	a329      	add	r3, pc, #164	@ (adr r3, 8003858 <percentage+0xb8>)
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f7fc fef7 	bl	80005a8 <__aeabi_dmul>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <percentage+0xa8>)
 80037c8:	f7fc fd38 	bl	800023c <__adddf3>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	ec43 2b17 	vmov	d7, r2, r3
 80037d4:	eeb0 0a47 	vmov.f32	s0, s14
 80037d8:	eef0 0a67 	vmov.f32	s1, s15
 80037dc:	f016 fbd4 	bl	8019f88 <floor>
 80037e0:	ec53 2b10 	vmov	r2, r3, d0
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7fd f9b6 	bl	8000b58 <__aeabi_d2uiz>
 80037ec:	4603      	mov	r3, r0
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	2301      	movs	r3, #1
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	2338      	movs	r3, #56	@ 0x38
 80037f6:	2128      	movs	r1, #40	@ 0x28
 80037f8:	2020      	movs	r0, #32
 80037fa:	f7ff fd78 	bl	80032ee <ssd1306_FillRectangle>
	ssd1306_DrawRectangle(32, 40, 96, 56, White);
 80037fe:	2301      	movs	r3, #1
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2338      	movs	r3, #56	@ 0x38
 8003804:	2260      	movs	r2, #96	@ 0x60
 8003806:	2128      	movs	r1, #40	@ 0x28
 8003808:	2020      	movs	r0, #32
 800380a:	f7ff fd39 	bl	8003280 <ssd1306_DrawRectangle>
	snprintf((char  *)bufferscreen,20,"%0.2f %%",(float) percent);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fc fe72 	bl	80004f8 <__aeabi_f2d>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	e9cd 2300 	strd	r2, r3, [sp]
 800381c:	4a0b      	ldr	r2, [pc, #44]	@ (800384c <percentage+0xac>)
 800381e:	2114      	movs	r1, #20
 8003820:	480b      	ldr	r0, [pc, #44]	@ (8003850 <percentage+0xb0>)
 8003822:	f013 fc7f 	bl	8017124 <sniprintf>
	ssd1306_SetCursor(45,44);
 8003826:	212c      	movs	r1, #44	@ 0x2c
 8003828:	202d      	movs	r0, #45	@ 0x2d
 800382a:	f7ff fca5 	bl	8003178 <ssd1306_SetCursor>
	ssd1306_WriteString((char  *)bufferscreen,Font_6x8,White);
 800382e:	4a09      	ldr	r2, [pc, #36]	@ (8003854 <percentage+0xb4>)
 8003830:	2301      	movs	r3, #1
 8003832:	ca06      	ldmia	r2, {r1, r2}
 8003834:	4806      	ldr	r0, [pc, #24]	@ (8003850 <percentage+0xb0>)
 8003836:	f7ff fc79 	bl	800312c <ssd1306_WriteString>


}
 800383a:	bf00      	nop
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	f3af 8000 	nop.w
 8003848:	40400000 	.word	0x40400000
 800384c:	0801bc0c 	.word	0x0801bc0c
 8003850:	200009d8 	.word	0x200009d8
 8003854:	20000014 	.word	0x20000014
 8003858:	47ae147b 	.word	0x47ae147b
 800385c:	3fe47ae1 	.word	0x3fe47ae1

08003860 <statemachine>:
extern uint8_t odrcheck;

extern uint8_t receivedtrame[64];


void statemachine(void){
 8003860:	b5b0      	push	{r4, r5, r7, lr}
 8003862:	ed2d 8b02 	vpush	{d8}
 8003866:	b08a      	sub	sp, #40	@ 0x28
 8003868:	af04      	add	r7, sp, #16
	switch(state){
 800386a:	4bbb      	ldr	r3, [pc, #748]	@ (8003b58 <statemachine+0x2f8>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b05      	cmp	r3, #5
 8003870:	f201 8674 	bhi.w	800555c <statemachine+0x1cfc>
 8003874:	a201      	add	r2, pc, #4	@ (adr r2, 800387c <statemachine+0x1c>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	08003895 	.word	0x08003895
 8003880:	08003c3b 	.word	0x08003c3b
 8003884:	080044a9 	.word	0x080044a9
 8003888:	08004caf 	.word	0x08004caf
 800388c:	08004f0d 	.word	0x08004f0d
 8003890:	080053fd 	.word	0x080053fd
	 case STATE_SPEED:
		 nmea_parse(&myData, DataBuffer);
 8003894:	49b1      	ldr	r1, [pc, #708]	@ (8003b5c <statemachine+0x2fc>)
 8003896:	48b2      	ldr	r0, [pc, #712]	@ (8003b60 <statemachine+0x300>)
 8003898:	f7fe fda0 	bl	80023dc <nmea_parse>
		ssd1306_Fill(Black);
 800389c:	2000      	movs	r0, #0
 800389e:	f7ff fb29 	bl	8002ef4 <ssd1306_Fill>

				 if(myData.speed>=vitmax){
 80038a2:	4baf      	ldr	r3, [pc, #700]	@ (8003b60 <statemachine+0x300>)
 80038a4:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80038a8:	4bae      	ldr	r3, [pc, #696]	@ (8003b64 <statemachine+0x304>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b6:	db03      	blt.n	80038c0 <statemachine+0x60>
									 vitmax=myData.speed;
 80038b8:	4ba9      	ldr	r3, [pc, #676]	@ (8003b60 <statemachine+0x300>)
 80038ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038bc:	4aa9      	ldr	r2, [pc, #676]	@ (8003b64 <statemachine+0x304>)
 80038be:	6013      	str	r3, [r2, #0]
								 }
								 float pace=0;
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
								 float sec=0;
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
								 if (myData.speed!=0){
 80038cc:	4ba4      	ldr	r3, [pc, #656]	@ (8003b60 <statemachine+0x300>)
 80038ce:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80038d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038da:	d032      	beq.n	8003942 <statemachine+0xe2>
									 pace=1000/(60*myData.speed);
 80038dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003b60 <statemachine+0x300>)
 80038de:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80038e2:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003b68 <statemachine+0x308>
 80038e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038ea:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8003b6c <statemachine+0x30c>
 80038ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f2:	edc7 7a05 	vstr	s15, [r7, #20]
									 sec=(pace-floor(pace))*60;
 80038f6:	6978      	ldr	r0, [r7, #20]
 80038f8:	f7fc fdfe 	bl	80004f8 <__aeabi_f2d>
 80038fc:	4604      	mov	r4, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	6978      	ldr	r0, [r7, #20]
 8003902:	f7fc fdf9 	bl	80004f8 <__aeabi_f2d>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	ec43 2b10 	vmov	d0, r2, r3
 800390e:	f016 fb3b 	bl	8019f88 <floor>
 8003912:	ec53 2b10 	vmov	r2, r3, d0
 8003916:	4620      	mov	r0, r4
 8003918:	4629      	mov	r1, r5
 800391a:	f7fc fc8d 	bl	8000238 <__aeabi_dsub>
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	4610      	mov	r0, r2
 8003924:	4619      	mov	r1, r3
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	4b91      	ldr	r3, [pc, #580]	@ (8003b70 <statemachine+0x310>)
 800392c:	f7fc fe3c 	bl	80005a8 <__aeabi_dmul>
 8003930:	4602      	mov	r2, r0
 8003932:	460b      	mov	r3, r1
 8003934:	4610      	mov	r0, r2
 8003936:	4619      	mov	r1, r3
 8003938:	f7fd f92e 	bl	8000b98 <__aeabi_d2f>
 800393c:	4603      	mov	r3, r0
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	e001      	b.n	8003946 <statemachine+0xe6>
								 }
								 else {
									 pace=99;
 8003942:	4b8c      	ldr	r3, [pc, #560]	@ (8003b74 <statemachine+0x314>)
 8003944:	617b      	str	r3, [r7, #20]
								 }


				  switch(spdstate){
 8003946:	4b8c      	ldr	r3, [pc, #560]	@ (8003b78 <statemachine+0x318>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b02      	cmp	r3, #2
 800394c:	f000 8087 	beq.w	8003a5e <statemachine+0x1fe>
 8003950:	2b02      	cmp	r3, #2
 8003952:	f300 812c 	bgt.w	8003bae <statemachine+0x34e>
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <statemachine+0x100>
 800395a:	2b01      	cmp	r3, #1
 800395c:	d040      	beq.n	80039e0 <statemachine+0x180>
 800395e:	e126      	b.n	8003bae <statemachine+0x34e>


				 case STATE_GROS:


						ssd1306_SetCursor(32, 32);
 8003960:	2120      	movs	r1, #32
 8003962:	2020      	movs	r0, #32
 8003964:	f7ff fc08 	bl	8003178 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "%0.1f",(myData.speed)*3.6);
 8003968:	4b7d      	ldr	r3, [pc, #500]	@ (8003b60 <statemachine+0x300>)
 800396a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396c:	4618      	mov	r0, r3
 800396e:	f7fc fdc3 	bl	80004f8 <__aeabi_f2d>
 8003972:	a377      	add	r3, pc, #476	@ (adr r3, 8003b50 <statemachine+0x2f0>)
 8003974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003978:	f7fc fe16 	bl	80005a8 <__aeabi_dmul>
 800397c:	4602      	mov	r2, r0
 800397e:	460b      	mov	r3, r1
 8003980:	e9cd 2300 	strd	r2, r3, [sp]
 8003984:	4a7d      	ldr	r2, [pc, #500]	@ (8003b7c <statemachine+0x31c>)
 8003986:	210f      	movs	r1, #15
 8003988:	487d      	ldr	r0, [pc, #500]	@ (8003b80 <statemachine+0x320>)
 800398a:	f013 fbcb 	bl	8017124 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 800398e:	4a7d      	ldr	r2, [pc, #500]	@ (8003b84 <statemachine+0x324>)
 8003990:	2301      	movs	r3, #1
 8003992:	ca06      	ldmia	r2, {r1, r2}
 8003994:	487a      	ldr	r0, [pc, #488]	@ (8003b80 <statemachine+0x320>)
 8003996:	f7ff fbc9 	bl	800312c <ssd1306_WriteString>
						ssd1306_SetCursor(32, 56);
 800399a:	2138      	movs	r1, #56	@ 0x38
 800399c:	2020      	movs	r0, #32
 800399e:	f7ff fbeb 	bl	8003178 <ssd1306_SetCursor>
						ssd1306_WriteString("Vit(kmh)", Font_6x8, White);
 80039a2:	4a79      	ldr	r2, [pc, #484]	@ (8003b88 <statemachine+0x328>)
 80039a4:	2301      	movs	r3, #1
 80039a6:	ca06      	ldmia	r2, {r1, r2}
 80039a8:	4878      	ldr	r0, [pc, #480]	@ (8003b8c <statemachine+0x32c>)
 80039aa:	f7ff fbbf 	bl	800312c <ssd1306_WriteString>
						batterygauge(vbat,79, 57,1);
 80039ae:	4b78      	ldr	r3, [pc, #480]	@ (8003b90 <statemachine+0x330>)
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	2201      	movs	r2, #1
 80039b6:	2139      	movs	r1, #57	@ 0x39
 80039b8:	204f      	movs	r0, #79	@ 0x4f
 80039ba:	eeb0 0a67 	vmov.f32	s0, s15
 80039be:	f7ff fd73 	bl	80034a8 <batterygauge>

					 if(BTN_B>=1){
 80039c2:	4b74      	ldr	r3, [pc, #464]	@ (8003b94 <statemachine+0x334>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f340 80bb 	ble.w	8003b42 <statemachine+0x2e2>
							spdstate++;
 80039cc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b78 <statemachine+0x318>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	4b68      	ldr	r3, [pc, #416]	@ (8003b78 <statemachine+0x318>)
 80039d6:	701a      	strb	r2, [r3, #0]
							BTN_B=0;
 80039d8:	4b6e      	ldr	r3, [pc, #440]	@ (8003b94 <statemachine+0x334>)
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
					 					 				  	}




				  break;
 80039de:	e0b0      	b.n	8003b42 <statemachine+0x2e2>
				 case STATE_GROS1:

					 ssd1306_SetCursor(32, 32);
 80039e0:	2120      	movs	r1, #32
 80039e2:	2020      	movs	r0, #32
 80039e4:	f7ff fbc8 	bl	8003178 <ssd1306_SetCursor>
					 snprintf((char *)bufferscreen,15, "%0.1f",vitmax*3.6);
 80039e8:	4b5e      	ldr	r3, [pc, #376]	@ (8003b64 <statemachine+0x304>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fc fd83 	bl	80004f8 <__aeabi_f2d>
 80039f2:	a357      	add	r3, pc, #348	@ (adr r3, 8003b50 <statemachine+0x2f0>)
 80039f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f8:	f7fc fdd6 	bl	80005a8 <__aeabi_dmul>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	e9cd 2300 	strd	r2, r3, [sp]
 8003a04:	4a5d      	ldr	r2, [pc, #372]	@ (8003b7c <statemachine+0x31c>)
 8003a06:	210f      	movs	r1, #15
 8003a08:	485d      	ldr	r0, [pc, #372]	@ (8003b80 <statemachine+0x320>)
 8003a0a:	f013 fb8b 	bl	8017124 <sniprintf>
					 ssd1306_WriteString((char *)bufferscreen, Font_16x24, White);
 8003a0e:	4a5d      	ldr	r2, [pc, #372]	@ (8003b84 <statemachine+0x324>)
 8003a10:	2301      	movs	r3, #1
 8003a12:	ca06      	ldmia	r2, {r1, r2}
 8003a14:	485a      	ldr	r0, [pc, #360]	@ (8003b80 <statemachine+0x320>)
 8003a16:	f7ff fb89 	bl	800312c <ssd1306_WriteString>
					 ssd1306_SetCursor(32, 56);
 8003a1a:	2138      	movs	r1, #56	@ 0x38
 8003a1c:	2020      	movs	r0, #32
 8003a1e:	f7ff fbab 	bl	8003178 <ssd1306_SetCursor>
					 ssd1306_WriteString("maxV", Font_6x8, White);
 8003a22:	4a59      	ldr	r2, [pc, #356]	@ (8003b88 <statemachine+0x328>)
 8003a24:	2301      	movs	r3, #1
 8003a26:	ca06      	ldmia	r2, {r1, r2}
 8003a28:	485b      	ldr	r0, [pc, #364]	@ (8003b98 <statemachine+0x338>)
 8003a2a:	f7ff fb7f 	bl	800312c <ssd1306_WriteString>
					 batterygauge(vbat,79, 57,1);
 8003a2e:	4b58      	ldr	r3, [pc, #352]	@ (8003b90 <statemachine+0x330>)
 8003a30:	edd3 7a00 	vldr	s15, [r3]
 8003a34:	2201      	movs	r2, #1
 8003a36:	2139      	movs	r1, #57	@ 0x39
 8003a38:	204f      	movs	r0, #79	@ 0x4f
 8003a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3e:	f7ff fd33 	bl	80034a8 <batterygauge>





					 if(BTN_B>=1){
 8003a42:	4b54      	ldr	r3, [pc, #336]	@ (8003b94 <statemachine+0x334>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	dd7d      	ble.n	8003b46 <statemachine+0x2e6>
					 							spdstate++;
 8003a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b78 <statemachine+0x318>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	4b49      	ldr	r3, [pc, #292]	@ (8003b78 <statemachine+0x318>)
 8003a54:	701a      	strb	r2, [r3, #0]
					 							BTN_B=0;
 8003a56:	4b4f      	ldr	r3, [pc, #316]	@ (8003b94 <statemachine+0x334>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

					 					 					 				  	}



					 break;
 8003a5c:	e073      	b.n	8003b46 <statemachine+0x2e6>
				  case STATE_SUMMARY:
				  						ssd1306_SetCursor(32, 32);
 8003a5e:	2120      	movs	r1, #32
 8003a60:	2020      	movs	r0, #32
 8003a62:	f7ff fb89 	bl	8003178 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "%0.0fmin%0.0fs",floor(pace),floor(sec));
 8003a66:	6978      	ldr	r0, [r7, #20]
 8003a68:	f7fc fd46 	bl	80004f8 <__aeabi_f2d>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	ec43 2b10 	vmov	d0, r2, r3
 8003a74:	f016 fa88 	bl	8019f88 <floor>
 8003a78:	eeb0 8a40 	vmov.f32	s16, s0
 8003a7c:	eef0 8a60 	vmov.f32	s17, s1
 8003a80:	6938      	ldr	r0, [r7, #16]
 8003a82:	f7fc fd39 	bl	80004f8 <__aeabi_f2d>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	ec43 2b10 	vmov	d0, r2, r3
 8003a8e:	f016 fa7b 	bl	8019f88 <floor>
 8003a92:	eeb0 7a40 	vmov.f32	s14, s0
 8003a96:	eef0 7a60 	vmov.f32	s15, s1
 8003a9a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003a9e:	ed8d 8b00 	vstr	d8, [sp]
 8003aa2:	4a3e      	ldr	r2, [pc, #248]	@ (8003b9c <statemachine+0x33c>)
 8003aa4:	210f      	movs	r1, #15
 8003aa6:	4836      	ldr	r0, [pc, #216]	@ (8003b80 <statemachine+0x320>)
 8003aa8:	f013 fb3c 	bl	8017124 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8003aac:	4a3c      	ldr	r2, [pc, #240]	@ (8003ba0 <statemachine+0x340>)
 8003aae:	2301      	movs	r3, #1
 8003ab0:	ca06      	ldmia	r2, {r1, r2}
 8003ab2:	4833      	ldr	r0, [pc, #204]	@ (8003b80 <statemachine+0x320>)
 8003ab4:	f7ff fb3a 	bl	800312c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 42);
 8003ab8:	212a      	movs	r1, #42	@ 0x2a
 8003aba:	2020      	movs	r0, #32
 8003abc:	f7ff fb5c 	bl	8003178 <ssd1306_SetCursor>
				  						ssd1306_WriteString("pace", Font_6x8, White);
 8003ac0:	4a31      	ldr	r2, [pc, #196]	@ (8003b88 <statemachine+0x328>)
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	ca06      	ldmia	r2, {r1, r2}
 8003ac6:	4837      	ldr	r0, [pc, #220]	@ (8003ba4 <statemachine+0x344>)
 8003ac8:	f7ff fb30 	bl	800312c <ssd1306_WriteString>
				  						ssd1306_SetCursor(32, 56);
 8003acc:	2138      	movs	r1, #56	@ 0x38
 8003ace:	2020      	movs	r0, #32
 8003ad0:	f7ff fb52 	bl	8003178 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "V=%0.1fkmh",vitmax*3.6);
 8003ad4:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <statemachine+0x304>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fc fd0d 	bl	80004f8 <__aeabi_f2d>
 8003ade:	a31c      	add	r3, pc, #112	@ (adr r3, 8003b50 <statemachine+0x2f0>)
 8003ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae4:	f7fc fd60 	bl	80005a8 <__aeabi_dmul>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	e9cd 2300 	strd	r2, r3, [sp]
 8003af0:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba8 <statemachine+0x348>)
 8003af2:	210f      	movs	r1, #15
 8003af4:	4822      	ldr	r0, [pc, #136]	@ (8003b80 <statemachine+0x320>)
 8003af6:	f013 fb15 	bl	8017124 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8003afa:	4a23      	ldr	r2, [pc, #140]	@ (8003b88 <statemachine+0x328>)
 8003afc:	2301      	movs	r3, #1
 8003afe:	ca06      	ldmia	r2, {r1, r2}
 8003b00:	481f      	ldr	r0, [pc, #124]	@ (8003b80 <statemachine+0x320>)
 8003b02:	f7ff fb13 	bl	800312c <ssd1306_WriteString>
				  						batterygauge(vbat,79, 43,1);
 8003b06:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <statemachine+0x330>)
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	212b      	movs	r1, #43	@ 0x2b
 8003b10:	204f      	movs	r0, #79	@ 0x4f
 8003b12:	eeb0 0a67 	vmov.f32	s0, s15
 8003b16:	f7ff fcc7 	bl	80034a8 <batterygauge>



				  					 if(BTN_B>=1){
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b94 <statemachine+0x334>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	dd44      	ble.n	8003bac <statemachine+0x34c>
				  								spdstate--;
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <statemachine+0x318>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	4b13      	ldr	r3, [pc, #76]	@ (8003b78 <statemachine+0x318>)
 8003b2c:	701a      	strb	r2, [r3, #0]
				  								spdstate--;
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <statemachine+0x318>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b10      	ldr	r3, [pc, #64]	@ (8003b78 <statemachine+0x318>)
 8003b38:	701a      	strb	r2, [r3, #0]
				  								BTN_B=0;
 8003b3a:	4b16      	ldr	r3, [pc, #88]	@ (8003b94 <statemachine+0x334>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
				  					 					 				  	}




				  					 break;
 8003b40:	e034      	b.n	8003bac <statemachine+0x34c>
				  break;
 8003b42:	bf00      	nop
 8003b44:	e033      	b.n	8003bae <statemachine+0x34e>
					 break;
 8003b46:	bf00      	nop
 8003b48:	e031      	b.n	8003bae <statemachine+0x34e>
 8003b4a:	bf00      	nop
 8003b4c:	f3af 8000 	nop.w
 8003b50:	cccccccd 	.word	0xcccccccd
 8003b54:	400ccccc 	.word	0x400ccccc
 8003b58:	200004e8 	.word	0x200004e8
 8003b5c:	20000534 	.word	0x20000534
 8003b60:	20000738 	.word	0x20000738
 8003b64:	20000a4c 	.word	0x20000a4c
 8003b68:	42700000 	.word	0x42700000
 8003b6c:	447a0000 	.word	0x447a0000
 8003b70:	404e0000 	.word	0x404e0000
 8003b74:	42c60000 	.word	0x42c60000
 8003b78:	200004e9 	.word	0x200004e9
 8003b7c:	0801bc18 	.word	0x0801bc18
 8003b80:	200009d8 	.word	0x200009d8
 8003b84:	20000024 	.word	0x20000024
 8003b88:	20000014 	.word	0x20000014
 8003b8c:	0801bc20 	.word	0x0801bc20
 8003b90:	200007b0 	.word	0x200007b0
 8003b94:	2000077c 	.word	0x2000077c
 8003b98:	0801bc2c 	.word	0x0801bc2c
 8003b9c:	0801bc34 	.word	0x0801bc34
 8003ba0:	2000001c 	.word	0x2000001c
 8003ba4:	0801bc44 	.word	0x0801bc44
 8003ba8:	0801bc4c 	.word	0x0801bc4c
				  					 break;
 8003bac:	bf00      	nop
				  }
				  					if(BTN_A>=1){
 8003bae:	4b84      	ldr	r3, [pc, #528]	@ (8003dc0 <statemachine+0x560>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	dd0b      	ble.n	8003bce <statemachine+0x36e>
				  									 					state++;
 8003bb6:	4b83      	ldr	r3, [pc, #524]	@ (8003dc4 <statemachine+0x564>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4b81      	ldr	r3, [pc, #516]	@ (8003dc4 <statemachine+0x564>)
 8003bc0:	701a      	strb	r2, [r3, #0]
				  									 					BTN_A=0;
 8003bc2:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc0 <statemachine+0x560>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]
				  									 					BTN_B=0;
 8003bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8003dc8 <statemachine+0x568>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
				  									  	}
				  									 	 if(BTN_A_LONG>=1){
 8003bce:	4b7f      	ldr	r3, [pc, #508]	@ (8003dcc <statemachine+0x56c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	dd23      	ble.n	8003c1e <statemachine+0x3be>
				  									 						 				 									state++;
 8003bd6:	4b7b      	ldr	r3, [pc, #492]	@ (8003dc4 <statemachine+0x564>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4b79      	ldr	r3, [pc, #484]	@ (8003dc4 <statemachine+0x564>)
 8003be0:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8003be2:	4b78      	ldr	r3, [pc, #480]	@ (8003dc4 <statemachine+0x564>)
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	4b76      	ldr	r3, [pc, #472]	@ (8003dc4 <statemachine+0x564>)
 8003bec:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8003bee:	4b75      	ldr	r3, [pc, #468]	@ (8003dc4 <statemachine+0x564>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4b73      	ldr	r3, [pc, #460]	@ (8003dc4 <statemachine+0x564>)
 8003bf8:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8003bfa:	4b72      	ldr	r3, [pc, #456]	@ (8003dc4 <statemachine+0x564>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	3301      	adds	r3, #1
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	4b70      	ldr	r3, [pc, #448]	@ (8003dc4 <statemachine+0x564>)
 8003c04:	701a      	strb	r2, [r3, #0]
				  									 						 				 									state++;
 8003c06:	4b6f      	ldr	r3, [pc, #444]	@ (8003dc4 <statemachine+0x564>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc4 <statemachine+0x564>)
 8003c10:	701a      	strb	r2, [r3, #0]

				  									 						 				 									  			 	BTN_A_LONG=0;
 8003c12:	4b6e      	ldr	r3, [pc, #440]	@ (8003dcc <statemachine+0x56c>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
				  									 						 				 									  			 	BTN_B=0;
 8003c18:	4b6b      	ldr	r3, [pc, #428]	@ (8003dc8 <statemachine+0x568>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
				  									 						 				 									  	}
				  									 	 if(BTN_B_LONG>=1){
 8003c1e:	4b6c      	ldr	r3, [pc, #432]	@ (8003dd0 <statemachine+0x570>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f341 848e 	ble.w	8005544 <statemachine+0x1ce4>
				  									 					  							  vitmax=0;
 8003c28:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd4 <statemachine+0x574>)
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
				  									 					  							BTN_B_LONG=0;
 8003c30:	4b67      	ldr	r3, [pc, #412]	@ (8003dd0 <statemachine+0x570>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
				  									 					  						}
				  									 	 break;
 8003c36:	f001 bc85 	b.w	8005544 <statemachine+0x1ce4>


				  case STATE_BALISE:
					  ssd1306_Fill(Black);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7ff f95a 	bl	8002ef4 <ssd1306_Fill>

					  if(settimeen==0){
 8003c40:	4b65      	ldr	r3, [pc, #404]	@ (8003dd8 <statemachine+0x578>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d145      	bne.n	8003cd4 <statemachine+0x474>

						  if(myData.fix==1){
 8003c48:	4b64      	ldr	r3, [pc, #400]	@ (8003ddc <statemachine+0x57c>)
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d141      	bne.n	8003cd4 <statemachine+0x474>
							settimeen=1;
 8003c50:	4b61      	ldr	r3, [pc, #388]	@ (8003dd8 <statemachine+0x578>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]
							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8003c56:	4b61      	ldr	r3, [pc, #388]	@ (8003ddc <statemachine+0x57c>)
 8003c58:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	0092      	lsls	r2, r2, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8003ddc <statemachine+0x57c>)
 8003c6e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	4413      	add	r3, r2
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	4b58      	ldr	r3, [pc, #352]	@ (8003de0 <statemachine+0x580>)
 8003c7e:	701a      	strb	r2, [r3, #0]
							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8003c80:	4b56      	ldr	r3, [pc, #344]	@ (8003ddc <statemachine+0x57c>)
 8003c82:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	0092      	lsls	r2, r2, #2
 8003c90:	4413      	add	r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4b51      	ldr	r3, [pc, #324]	@ (8003ddc <statemachine+0x57c>)
 8003c98:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8003de4 <statemachine+0x584>)
 8003ca8:	701a      	strb	r2, [r3, #0]
							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8003caa:	4b4c      	ldr	r3, [pc, #304]	@ (8003ddc <statemachine+0x57c>)
 8003cac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003cb0:	f003 030f 	and.w	r3, r3, #15
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	0092      	lsls	r2, r2, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b46      	ldr	r3, [pc, #280]	@ (8003ddc <statemachine+0x57c>)
 8003cc2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	4b45      	ldr	r3, [pc, #276]	@ (8003de8 <statemachine+0x588>)
 8003cd2:	701a      	strb	r2, [r3, #0]





					  switch(balisestate){
 8003cd4:	4b45      	ldr	r3, [pc, #276]	@ (8003dec <statemachine+0x58c>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	f000 838d 	beq.w	80043f8 <statemachine+0xb98>
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	f301 8432 	bgt.w	8005548 <statemachine+0x1ce8>
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d004      	beq.n	8003cf2 <statemachine+0x492>
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	f000 8093 	beq.w	8003e14 <statemachine+0x5b4>
						  				 									 									  	}

					  }


					  break;
 8003cee:	f001 bc2b 	b.w	8005548 <statemachine+0x1ce8>
						  ssd1306_SetCursor(32,32);
 8003cf2:	2120      	movs	r1, #32
 8003cf4:	2020      	movs	r0, #32
 8003cf6:	f7ff fa3f 	bl	8003178 <ssd1306_SetCursor>
						  ssd1306_WriteString("Tracker",Font_6x8,White);
 8003cfa:	4a3d      	ldr	r2, [pc, #244]	@ (8003df0 <statemachine+0x590>)
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	ca06      	ldmia	r2, {r1, r2}
 8003d00:	483c      	ldr	r0, [pc, #240]	@ (8003df4 <statemachine+0x594>)
 8003d02:	f7ff fa13 	bl	800312c <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "offset=%d",pageoffset);
 8003d06:	4b3c      	ldr	r3, [pc, #240]	@ (8003df8 <statemachine+0x598>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a3c      	ldr	r2, [pc, #240]	@ (8003dfc <statemachine+0x59c>)
 8003d0c:	2132      	movs	r1, #50	@ 0x32
 8003d0e:	483c      	ldr	r0, [pc, #240]	@ (8003e00 <statemachine+0x5a0>)
 8003d10:	f013 fa08 	bl	8017124 <sniprintf>
						  ssd1306_SetCursor(32,42);
 8003d14:	212a      	movs	r1, #42	@ 0x2a
 8003d16:	2020      	movs	r0, #32
 8003d18:	f7ff fa2e 	bl	8003178 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8003d1c:	4a39      	ldr	r2, [pc, #228]	@ (8003e04 <statemachine+0x5a4>)
 8003d1e:	2301      	movs	r3, #1
 8003d20:	ca06      	ldmia	r2, {r1, r2}
 8003d22:	4837      	ldr	r0, [pc, #220]	@ (8003e00 <statemachine+0x5a0>)
 8003d24:	f7ff fa02 	bl	800312c <ssd1306_WriteString>
						  snprintf((char *)bufferscreen,50, "page=%d",pagenumber);
 8003d28:	4b37      	ldr	r3, [pc, #220]	@ (8003e08 <statemachine+0x5a8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a37      	ldr	r2, [pc, #220]	@ (8003e0c <statemachine+0x5ac>)
 8003d2e:	2132      	movs	r1, #50	@ 0x32
 8003d30:	4833      	ldr	r0, [pc, #204]	@ (8003e00 <statemachine+0x5a0>)
 8003d32:	f013 f9f7 	bl	8017124 <sniprintf>
						  ssd1306_SetCursor(32,52);
 8003d36:	2134      	movs	r1, #52	@ 0x34
 8003d38:	2020      	movs	r0, #32
 8003d3a:	f7ff fa1d 	bl	8003178 <ssd1306_SetCursor>
						  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8003d3e:	4a31      	ldr	r2, [pc, #196]	@ (8003e04 <statemachine+0x5a4>)
 8003d40:	2301      	movs	r3, #1
 8003d42:	ca06      	ldmia	r2, {r1, r2}
 8003d44:	482e      	ldr	r0, [pc, #184]	@ (8003e00 <statemachine+0x5a0>)
 8003d46:	f7ff f9f1 	bl	800312c <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8003d4a:	4b21      	ldr	r3, [pc, #132]	@ (8003dd0 <statemachine+0x570>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	dd0e      	ble.n	8003d70 <statemachine+0x510>
							balisestate++;
 8003d52:	4b26      	ldr	r3, [pc, #152]	@ (8003dec <statemachine+0x58c>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4b24      	ldr	r3, [pc, #144]	@ (8003dec <statemachine+0x58c>)
 8003d5c:	701a      	strb	r2, [r3, #0]
							BTN_B_LONG=0;
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <statemachine+0x570>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
							BTN_A=0;
 8003d64:	4b16      	ldr	r3, [pc, #88]	@ (8003dc0 <statemachine+0x560>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
							HAL_TIM_Base_Start_IT(&htim17);
 8003d6a:	4829      	ldr	r0, [pc, #164]	@ (8003e10 <statemachine+0x5b0>)
 8003d6c:	f00a f9e8 	bl	800e140 <HAL_TIM_Base_Start_IT>
						  if(BTN_A>=1){
 8003d70:	4b13      	ldr	r3, [pc, #76]	@ (8003dc0 <statemachine+0x560>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	dd0e      	ble.n	8003d96 <statemachine+0x536>
						  				  			 	state++;
 8003d78:	4b12      	ldr	r3, [pc, #72]	@ (8003dc4 <statemachine+0x564>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <statemachine+0x564>)
 8003d82:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 8003d84:	4b0e      	ldr	r3, [pc, #56]	@ (8003dc0 <statemachine+0x560>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <statemachine+0x568>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
						  				  			 	settimeen=0;
 8003d90:	4b11      	ldr	r3, [pc, #68]	@ (8003dd8 <statemachine+0x578>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8003d96:	4b0d      	ldr	r3, [pc, #52]	@ (8003dcc <statemachine+0x56c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f340 837e 	ble.w	800449c <statemachine+0xc3c>
									  state--;
 8003da0:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <statemachine+0x564>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	4b06      	ldr	r3, [pc, #24]	@ (8003dc4 <statemachine+0x564>)
 8003daa:	701a      	strb	r2, [r3, #0]
									BTN_A_LONG=0;
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <statemachine+0x56c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
									BTN_B=0;
 8003db2:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <statemachine+0x568>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
									settimeen=0;
 8003db8:	4b07      	ldr	r3, [pc, #28]	@ (8003dd8 <statemachine+0x578>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
						  break;
 8003dbe:	e36d      	b.n	800449c <statemachine+0xc3c>
 8003dc0:	20000778 	.word	0x20000778
 8003dc4:	200004e8 	.word	0x200004e8
 8003dc8:	2000077c 	.word	0x2000077c
 8003dcc:	20000ab0 	.word	0x20000ab0
 8003dd0:	20000aac 	.word	0x20000aac
 8003dd4:	20000a4c 	.word	0x20000a4c
 8003dd8:	20000a98 	.word	0x20000a98
 8003ddc:	20000738 	.word	0x20000738
 8003de0:	20000a95 	.word	0x20000a95
 8003de4:	20000a96 	.word	0x20000a96
 8003de8:	20000a94 	.word	0x20000a94
 8003dec:	200004ed 	.word	0x200004ed
 8003df0:	20000014 	.word	0x20000014
 8003df4:	0801bc58 	.word	0x0801bc58
 8003df8:	200009b4 	.word	0x200009b4
 8003dfc:	0801bc60 	.word	0x0801bc60
 8003e00:	200009d8 	.word	0x200009d8
 8003e04:	2000001c 	.word	0x2000001c
 8003e08:	200009b8 	.word	0x200009b8
 8003e0c:	0801bc6c 	.word	0x0801bc6c
 8003e10:	2000119c 	.word	0x2000119c
						  if(myData.speed>=vitmax){
 8003e14:	4baa      	ldr	r3, [pc, #680]	@ (80040c0 <statemachine+0x860>)
 8003e16:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8003e1a:	4baa      	ldr	r3, [pc, #680]	@ (80040c4 <statemachine+0x864>)
 8003e1c:	edd3 7a00 	vldr	s15, [r3]
 8003e20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e28:	db03      	blt.n	8003e32 <statemachine+0x5d2>
						  									 vitmax=myData.speed;
 8003e2a:	4ba5      	ldr	r3, [pc, #660]	@ (80040c0 <statemachine+0x860>)
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	4aa5      	ldr	r2, [pc, #660]	@ (80040c4 <statemachine+0x864>)
 8003e30:	6013      	str	r3, [r2, #0]
						  if(pagenumber+1>=MAX_WRITE_PAGE){
 8003e32:	4ba5      	ldr	r3, [pc, #660]	@ (80040c8 <statemachine+0x868>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f246 32fd 	movw	r2, #25597	@ 0x63fd
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	dd05      	ble.n	8003e4a <statemachine+0x5ea>
							  HAL_TIM_Base_Stop_IT(&htim17);
 8003e3e:	48a3      	ldr	r0, [pc, #652]	@ (80040cc <statemachine+0x86c>)
 8003e40:	f00a f9cc 	bl	800e1dc <HAL_TIM_Base_Stop_IT>
							  balisestate=2;
 8003e44:	4ba2      	ldr	r3, [pc, #648]	@ (80040d0 <statemachine+0x870>)
 8003e46:	2202      	movs	r2, #2
 8003e48:	701a      	strb	r2, [r3, #0]
						  if(enablewrite==1){
 8003e4a:	4ba2      	ldr	r3, [pc, #648]	@ (80040d4 <statemachine+0x874>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	f040 80bb 	bne.w	8003fca <statemachine+0x76a>
							  oldlat=myData.latitude;
 8003e54:	4b9a      	ldr	r3, [pc, #616]	@ (80040c0 <statemachine+0x860>)
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	499f      	ldr	r1, [pc, #636]	@ (80040d8 <statemachine+0x878>)
 8003e5c:	e9c1 2300 	strd	r2, r3, [r1]
							  oldlong=myData.longitude;
 8003e60:	4b97      	ldr	r3, [pc, #604]	@ (80040c0 <statemachine+0x860>)
 8003e62:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e66:	499d      	ldr	r1, [pc, #628]	@ (80040dc <statemachine+0x87c>)
 8003e68:	e9c1 2300 	strd	r2, r3, [r1]
							  nmea_parse(&myData, DataBuffer);
 8003e6c:	499c      	ldr	r1, [pc, #624]	@ (80040e0 <statemachine+0x880>)
 8003e6e:	4894      	ldr	r0, [pc, #592]	@ (80040c0 <statemachine+0x860>)
 8003e70:	f7fe fab4 	bl	80023dc <nmea_parse>
							  bmp581_read_precise_normal(&bmp581);
 8003e74:	489b      	ldr	r0, [pc, #620]	@ (80040e4 <statemachine+0x884>)
 8003e76:	f7fd fabf 	bl	80013f8 <bmp581_read_precise_normal>
							  if(distancecalc(oldlat, myData.latitude,oldlong, myData.longitude) > 139.0){//correspond à 500kmh pendant 1sec
 8003e7a:	4b97      	ldr	r3, [pc, #604]	@ (80040d8 <statemachine+0x878>)
 8003e7c:	ed93 7b00 	vldr	d7, [r3]
 8003e80:	4b8f      	ldr	r3, [pc, #572]	@ (80040c0 <statemachine+0x860>)
 8003e82:	ed93 6b00 	vldr	d6, [r3]
 8003e86:	4b95      	ldr	r3, [pc, #596]	@ (80040dc <statemachine+0x87c>)
 8003e88:	ed93 5b00 	vldr	d5, [r3]
 8003e8c:	4b8c      	ldr	r3, [pc, #560]	@ (80040c0 <statemachine+0x860>)
 8003e8e:	ed93 4b04 	vldr	d4, [r3, #16]
 8003e92:	eeb0 3a44 	vmov.f32	s6, s8
 8003e96:	eef0 3a64 	vmov.f32	s7, s9
 8003e9a:	eeb0 2a45 	vmov.f32	s4, s10
 8003e9e:	eef0 2a65 	vmov.f32	s5, s11
 8003ea2:	eeb0 1a46 	vmov.f32	s2, s12
 8003ea6:	eef0 1a66 	vmov.f32	s3, s13
 8003eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8003eae:	eef0 0a67 	vmov.f32	s1, s15
 8003eb2:	f7fe fb61 	bl	8002578 <distancecalc>
 8003eb6:	ec51 0b10 	vmov	r0, r1, d0
 8003eba:	a37f      	add	r3, pc, #508	@ (adr r3, 80040b8 <statemachine+0x858>)
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f7fc fe02 	bl	8000ac8 <__aeabi_dcmpgt>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02c      	beq.n	8003f24 <statemachine+0x6c4>
								  myData.latitude=oldlat;
 8003eca:	4b83      	ldr	r3, [pc, #524]	@ (80040d8 <statemachine+0x878>)
 8003ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed0:	497b      	ldr	r1, [pc, #492]	@ (80040c0 <statemachine+0x860>)
 8003ed2:	e9c1 2300 	strd	r2, r3, [r1]
								  myData.longitude=oldlong;
 8003ed6:	4b81      	ldr	r3, [pc, #516]	@ (80040dc <statemachine+0x87c>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	4978      	ldr	r1, [pc, #480]	@ (80040c0 <statemachine+0x860>)
 8003ede:	e9c1 2304 	strd	r2, r3, [r1, #16]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop,bmpalt);
 8003ee2:	4b81      	ldr	r3, [pc, #516]	@ (80040e8 <statemachine+0x888>)
 8003ee4:	edd3 6a00 	vldr	s13, [r3]
 8003ee8:	4b80      	ldr	r3, [pc, #512]	@ (80040ec <statemachine+0x88c>)
 8003eea:	ed93 6a00 	vldr	s12, [r3]
 8003eee:	4b74      	ldr	r3, [pc, #464]	@ (80040c0 <statemachine+0x860>)
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef2:	4a73      	ldr	r2, [pc, #460]	@ (80040c0 <statemachine+0x860>)
 8003ef4:	edd2 5a08 	vldr	s11, [r2, #32]
 8003ef8:	4a7d      	ldr	r2, [pc, #500]	@ (80040f0 <statemachine+0x890>)
 8003efa:	ed92 7b00 	vldr	d7, [r2]
 8003efe:	eeb0 2a47 	vmov.f32	s4, s14
 8003f02:	eef0 2a67 	vmov.f32	s5, s15
 8003f06:	eeb0 1a65 	vmov.f32	s2, s11
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	496c      	ldr	r1, [pc, #432]	@ (80040c0 <statemachine+0x860>)
 8003f0e:	eef0 0a46 	vmov.f32	s1, s12
 8003f12:	eeb0 0a66 	vmov.f32	s0, s13
 8003f16:	4877      	ldr	r0, [pc, #476]	@ (80040f4 <statemachine+0x894>)
 8003f18:	f7fe fd82 	bl	8002a20 <csvframe>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4a76      	ldr	r2, [pc, #472]	@ (80040f8 <statemachine+0x898>)
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	e049      	b.n	8003fb8 <statemachine+0x758>
								  distanceparcouru=distanceparcouru + distancecalc(oldlat, myData.latitude,oldlong, myData.longitude);
 8003f24:	4b6c      	ldr	r3, [pc, #432]	@ (80040d8 <statemachine+0x878>)
 8003f26:	ed93 7b00 	vldr	d7, [r3]
 8003f2a:	4b65      	ldr	r3, [pc, #404]	@ (80040c0 <statemachine+0x860>)
 8003f2c:	ed93 6b00 	vldr	d6, [r3]
 8003f30:	4b6a      	ldr	r3, [pc, #424]	@ (80040dc <statemachine+0x87c>)
 8003f32:	ed93 5b00 	vldr	d5, [r3]
 8003f36:	4b62      	ldr	r3, [pc, #392]	@ (80040c0 <statemachine+0x860>)
 8003f38:	ed93 4b04 	vldr	d4, [r3, #16]
 8003f3c:	eeb0 3a44 	vmov.f32	s6, s8
 8003f40:	eef0 3a64 	vmov.f32	s7, s9
 8003f44:	eeb0 2a45 	vmov.f32	s4, s10
 8003f48:	eef0 2a65 	vmov.f32	s5, s11
 8003f4c:	eeb0 1a46 	vmov.f32	s2, s12
 8003f50:	eef0 1a66 	vmov.f32	s3, s13
 8003f54:	eeb0 0a47 	vmov.f32	s0, s14
 8003f58:	eef0 0a67 	vmov.f32	s1, s15
 8003f5c:	f7fe fb0c 	bl	8002578 <distancecalc>
 8003f60:	ec51 0b10 	vmov	r0, r1, d0
 8003f64:	4b65      	ldr	r3, [pc, #404]	@ (80040fc <statemachine+0x89c>)
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f7fc f967 	bl	800023c <__adddf3>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4962      	ldr	r1, [pc, #392]	@ (80040fc <statemachine+0x89c>)
 8003f74:	e9c1 2300 	strd	r2, r3, [r1]
								  flashbufferlen=csvframe((uint8_t *)flashwrite,temp,vbat,&myData,myData.satelliteCount,myData.hdop,bmpalt);
 8003f78:	4b5b      	ldr	r3, [pc, #364]	@ (80040e8 <statemachine+0x888>)
 8003f7a:	edd3 6a00 	vldr	s13, [r3]
 8003f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80040ec <statemachine+0x88c>)
 8003f80:	ed93 6a00 	vldr	s12, [r3]
 8003f84:	4b4e      	ldr	r3, [pc, #312]	@ (80040c0 <statemachine+0x860>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	4a4d      	ldr	r2, [pc, #308]	@ (80040c0 <statemachine+0x860>)
 8003f8a:	edd2 5a08 	vldr	s11, [r2, #32]
 8003f8e:	4a58      	ldr	r2, [pc, #352]	@ (80040f0 <statemachine+0x890>)
 8003f90:	ed92 7b00 	vldr	d7, [r2]
 8003f94:	eeb0 2a47 	vmov.f32	s4, s14
 8003f98:	eef0 2a67 	vmov.f32	s5, s15
 8003f9c:	eeb0 1a65 	vmov.f32	s2, s11
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4947      	ldr	r1, [pc, #284]	@ (80040c0 <statemachine+0x860>)
 8003fa4:	eef0 0a46 	vmov.f32	s1, s12
 8003fa8:	eeb0 0a66 	vmov.f32	s0, s13
 8003fac:	4851      	ldr	r0, [pc, #324]	@ (80040f4 <statemachine+0x894>)
 8003fae:	f7fe fd37 	bl	8002a20 <csvframe>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4a50      	ldr	r2, [pc, #320]	@ (80040f8 <statemachine+0x898>)
 8003fb6:	6013      	str	r3, [r2, #0]
							  writebuffertoflash((uint8_t*)flashwrite,flashbufferlen);
 8003fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80040f8 <statemachine+0x898>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	484d      	ldr	r0, [pc, #308]	@ (80040f4 <statemachine+0x894>)
 8003fc0:	f7fe fe68 	bl	8002c94 <writebuffertoflash>
							  enablewrite=0;
 8003fc4:	4b43      	ldr	r3, [pc, #268]	@ (80040d4 <statemachine+0x874>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
						  ssd1306_SetCursor(32,32);
 8003fca:	2120      	movs	r1, #32
 8003fcc:	2020      	movs	r0, #32
 8003fce:	f7ff f8d3 	bl	8003178 <ssd1306_SetCursor>
						  switch(ecranstate){
 8003fd2:	4b4b      	ldr	r3, [pc, #300]	@ (8004100 <statemachine+0x8a0>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	f200 818f 	bhi.w	80042fa <statemachine+0xa9a>
 8003fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe4 <statemachine+0x784>)
 8003fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe2:	bf00      	nop
 8003fe4:	08003ffd 	.word	0x08003ffd
 8003fe8:	0800404f 	.word	0x0800404f
 8003fec:	0800412d 	.word	0x0800412d
 8003ff0:	08004197 	.word	0x08004197
 8003ff4:	080041ef 	.word	0x080041ef
 8003ff8:	0800424d 	.word	0x0800424d
							  snprintf((char *)bufferscreen,50,"%d",pagenumber);
 8003ffc:	4b32      	ldr	r3, [pc, #200]	@ (80040c8 <statemachine+0x868>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a40      	ldr	r2, [pc, #256]	@ (8004104 <statemachine+0x8a4>)
 8004002:	2132      	movs	r1, #50	@ 0x32
 8004004:	4840      	ldr	r0, [pc, #256]	@ (8004108 <statemachine+0x8a8>)
 8004006:	f013 f88d 	bl	8017124 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800400a:	4a40      	ldr	r2, [pc, #256]	@ (800410c <statemachine+0x8ac>)
 800400c:	2301      	movs	r3, #1
 800400e:	ca06      	ldmia	r2, {r1, r2}
 8004010:	483d      	ldr	r0, [pc, #244]	@ (8004108 <statemachine+0x8a8>)
 8004012:	f7ff f88b 	bl	800312c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004016:	212a      	movs	r1, #42	@ 0x2a
 8004018:	2020      	movs	r0, #32
 800401a:	f7ff f8ad 	bl	8003178 <ssd1306_SetCursor>
							  ssd1306_WriteString("PageNb",Font_6x8,White);
 800401e:	4a3c      	ldr	r2, [pc, #240]	@ (8004110 <statemachine+0x8b0>)
 8004020:	2301      	movs	r3, #1
 8004022:	ca06      	ldmia	r2, {r1, r2}
 8004024:	483b      	ldr	r0, [pc, #236]	@ (8004114 <statemachine+0x8b4>)
 8004026:	f7ff f881 	bl	800312c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800402a:	4b3b      	ldr	r3, [pc, #236]	@ (8004118 <statemachine+0x8b8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	f340 8158 	ble.w	80042e4 <statemachine+0xa84>
														  ecranstate++;
 8004034:	4b32      	ldr	r3, [pc, #200]	@ (8004100 <statemachine+0x8a0>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	3301      	adds	r3, #1
 800403a:	b2da      	uxtb	r2, r3
 800403c:	4b30      	ldr	r3, [pc, #192]	@ (8004100 <statemachine+0x8a0>)
 800403e:	701a      	strb	r2, [r3, #0]
													  	BTN_B=0;
 8004040:	4b35      	ldr	r3, [pc, #212]	@ (8004118 <statemachine+0x8b8>)
 8004042:	2200      	movs	r2, #0
 8004044:	601a      	str	r2, [r3, #0]
													  	BTN_A=0;
 8004046:	4b35      	ldr	r3, [pc, #212]	@ (800411c <statemachine+0x8bc>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
							  break;
 800404c:	e14a      	b.n	80042e4 <statemachine+0xa84>
							  snprintf((char  *)bufferscreen,50,"%0.3lf",distanceparcouru/1000);
 800404e:	4b2b      	ldr	r3, [pc, #172]	@ (80040fc <statemachine+0x89c>)
 8004050:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004054:	f04f 0200 	mov.w	r2, #0
 8004058:	4b31      	ldr	r3, [pc, #196]	@ (8004120 <statemachine+0x8c0>)
 800405a:	f7fc fbcf 	bl	80007fc <__aeabi_ddiv>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	e9cd 2300 	strd	r2, r3, [sp]
 8004066:	4a2f      	ldr	r2, [pc, #188]	@ (8004124 <statemachine+0x8c4>)
 8004068:	2132      	movs	r1, #50	@ 0x32
 800406a:	4827      	ldr	r0, [pc, #156]	@ (8004108 <statemachine+0x8a8>)
 800406c:	f013 f85a 	bl	8017124 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004070:	4a26      	ldr	r2, [pc, #152]	@ (800410c <statemachine+0x8ac>)
 8004072:	2301      	movs	r3, #1
 8004074:	ca06      	ldmia	r2, {r1, r2}
 8004076:	4824      	ldr	r0, [pc, #144]	@ (8004108 <statemachine+0x8a8>)
 8004078:	f7ff f858 	bl	800312c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 800407c:	212a      	movs	r1, #42	@ 0x2a
 800407e:	2020      	movs	r0, #32
 8004080:	f7ff f87a 	bl	8003178 <ssd1306_SetCursor>
							  ssd1306_WriteString("Dist(km)",Font_6x8,White);
 8004084:	4a22      	ldr	r2, [pc, #136]	@ (8004110 <statemachine+0x8b0>)
 8004086:	2301      	movs	r3, #1
 8004088:	ca06      	ldmia	r2, {r1, r2}
 800408a:	4827      	ldr	r0, [pc, #156]	@ (8004128 <statemachine+0x8c8>)
 800408c:	f7ff f84e 	bl	800312c <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004090:	4b21      	ldr	r3, [pc, #132]	@ (8004118 <statemachine+0x8b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f340 8127 	ble.w	80042e8 <statemachine+0xa88>
							  														  ecranstate++;
 800409a:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <statemachine+0x8a0>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4b17      	ldr	r3, [pc, #92]	@ (8004100 <statemachine+0x8a0>)
 80040a4:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80040a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004118 <statemachine+0x8b8>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	@ (800411c <statemachine+0x8bc>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
							  break;
 80040b2:	e119      	b.n	80042e8 <statemachine+0xa88>
 80040b4:	f3af 8000 	nop.w
 80040b8:	00000000 	.word	0x00000000
 80040bc:	40616000 	.word	0x40616000
 80040c0:	20000738 	.word	0x20000738
 80040c4:	20000a4c 	.word	0x20000a4c
 80040c8:	200009b8 	.word	0x200009b8
 80040cc:	2000119c 	.word	0x2000119c
 80040d0:	200004ed 	.word	0x200004ed
 80040d4:	20000a90 	.word	0x20000a90
 80040d8:	20000a80 	.word	0x20000a80
 80040dc:	20000a88 	.word	0x20000a88
 80040e0:	20000534 	.word	0x20000534
 80040e4:	20000bfc 	.word	0x20000bfc
 80040e8:	200007a8 	.word	0x200007a8
 80040ec:	200007b0 	.word	0x200007b0
 80040f0:	200003f8 	.word	0x200003f8
 80040f4:	200007b4 	.word	0x200007b4
 80040f8:	20000a64 	.word	0x20000a64
 80040fc:	20000a78 	.word	0x20000a78
 8004100:	20000bf8 	.word	0x20000bf8
 8004104:	0801bc74 	.word	0x0801bc74
 8004108:	200009d8 	.word	0x200009d8
 800410c:	2000001c 	.word	0x2000001c
 8004110:	20000014 	.word	0x20000014
 8004114:	0801bc78 	.word	0x0801bc78
 8004118:	2000077c 	.word	0x2000077c
 800411c:	20000778 	.word	0x20000778
 8004120:	408f4000 	.word	0x408f4000
 8004124:	0801bc80 	.word	0x0801bc80
 8004128:	0801bc88 	.word	0x0801bc88
							  snprintf((char  *)bufferscreen,50,"%0.1f",myData.speed*3.6);
 800412c:	4b9c      	ldr	r3, [pc, #624]	@ (80043a0 <statemachine+0xb40>)
 800412e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc f9e1 	bl	80004f8 <__aeabi_f2d>
 8004136:	a398      	add	r3, pc, #608	@ (adr r3, 8004398 <statemachine+0xb38>)
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f7fc fa34 	bl	80005a8 <__aeabi_dmul>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	e9cd 2300 	strd	r2, r3, [sp]
 8004148:	4a96      	ldr	r2, [pc, #600]	@ (80043a4 <statemachine+0xb44>)
 800414a:	2132      	movs	r1, #50	@ 0x32
 800414c:	4896      	ldr	r0, [pc, #600]	@ (80043a8 <statemachine+0xb48>)
 800414e:	f012 ffe9 	bl	8017124 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004152:	4a96      	ldr	r2, [pc, #600]	@ (80043ac <statemachine+0xb4c>)
 8004154:	2301      	movs	r3, #1
 8004156:	ca06      	ldmia	r2, {r1, r2}
 8004158:	4893      	ldr	r0, [pc, #588]	@ (80043a8 <statemachine+0xb48>)
 800415a:	f7fe ffe7 	bl	800312c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 800415e:	212a      	movs	r1, #42	@ 0x2a
 8004160:	2020      	movs	r0, #32
 8004162:	f7ff f809 	bl	8003178 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vit(kmh)",Font_6x8,White);
 8004166:	4a92      	ldr	r2, [pc, #584]	@ (80043b0 <statemachine+0xb50>)
 8004168:	2301      	movs	r3, #1
 800416a:	ca06      	ldmia	r2, {r1, r2}
 800416c:	4891      	ldr	r0, [pc, #580]	@ (80043b4 <statemachine+0xb54>)
 800416e:	f7fe ffdd 	bl	800312c <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004172:	4b91      	ldr	r3, [pc, #580]	@ (80043b8 <statemachine+0xb58>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f340 80b8 	ble.w	80042ec <statemachine+0xa8c>
							  														  ecranstate++;
 800417c:	4b8f      	ldr	r3, [pc, #572]	@ (80043bc <statemachine+0xb5c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	3301      	adds	r3, #1
 8004182:	b2da      	uxtb	r2, r3
 8004184:	4b8d      	ldr	r3, [pc, #564]	@ (80043bc <statemachine+0xb5c>)
 8004186:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 8004188:	4b8b      	ldr	r3, [pc, #556]	@ (80043b8 <statemachine+0xb58>)
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 800418e:	4b8c      	ldr	r3, [pc, #560]	@ (80043c0 <statemachine+0xb60>)
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
							  break;
 8004194:	e0aa      	b.n	80042ec <statemachine+0xa8c>
							  snprintf((char  *)bufferscreen,50,"%0.1lf",bmpalt);
 8004196:	4b8b      	ldr	r3, [pc, #556]	@ (80043c4 <statemachine+0xb64>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	e9cd 2300 	strd	r2, r3, [sp]
 80041a0:	4a89      	ldr	r2, [pc, #548]	@ (80043c8 <statemachine+0xb68>)
 80041a2:	2132      	movs	r1, #50	@ 0x32
 80041a4:	4880      	ldr	r0, [pc, #512]	@ (80043a8 <statemachine+0xb48>)
 80041a6:	f012 ffbd 	bl	8017124 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 80041aa:	4a80      	ldr	r2, [pc, #512]	@ (80043ac <statemachine+0xb4c>)
 80041ac:	2301      	movs	r3, #1
 80041ae:	ca06      	ldmia	r2, {r1, r2}
 80041b0:	487d      	ldr	r0, [pc, #500]	@ (80043a8 <statemachine+0xb48>)
 80041b2:	f7fe ffbb 	bl	800312c <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 80041b6:	212a      	movs	r1, #42	@ 0x2a
 80041b8:	2020      	movs	r0, #32
 80041ba:	f7fe ffdd 	bl	8003178 <ssd1306_SetCursor>
							  							ssd1306_WriteString("alt(m)",Font_6x8,White);
 80041be:	4a7c      	ldr	r2, [pc, #496]	@ (80043b0 <statemachine+0xb50>)
 80041c0:	2301      	movs	r3, #1
 80041c2:	ca06      	ldmia	r2, {r1, r2}
 80041c4:	4881      	ldr	r0, [pc, #516]	@ (80043cc <statemachine+0xb6c>)
 80041c6:	f7fe ffb1 	bl	800312c <ssd1306_WriteString>
							  if(BTN_B>=1){
 80041ca:	4b7b      	ldr	r3, [pc, #492]	@ (80043b8 <statemachine+0xb58>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f340 808e 	ble.w	80042f0 <statemachine+0xa90>
							  														  ecranstate++;
 80041d4:	4b79      	ldr	r3, [pc, #484]	@ (80043bc <statemachine+0xb5c>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	3301      	adds	r3, #1
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	4b77      	ldr	r3, [pc, #476]	@ (80043bc <statemachine+0xb5c>)
 80041de:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80041e0:	4b75      	ldr	r3, [pc, #468]	@ (80043b8 <statemachine+0xb58>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80041e6:	4b76      	ldr	r3, [pc, #472]	@ (80043c0 <statemachine+0xb60>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
							  break;
 80041ec:	e080      	b.n	80042f0 <statemachine+0xa90>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vbat);
 80041ee:	4b78      	ldr	r3, [pc, #480]	@ (80043d0 <statemachine+0xb70>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fc f980 	bl	80004f8 <__aeabi_f2d>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	e9cd 2300 	strd	r2, r3, [sp]
 8004200:	4a68      	ldr	r2, [pc, #416]	@ (80043a4 <statemachine+0xb44>)
 8004202:	2132      	movs	r1, #50	@ 0x32
 8004204:	4868      	ldr	r0, [pc, #416]	@ (80043a8 <statemachine+0xb48>)
 8004206:	f012 ff8d 	bl	8017124 <sniprintf>
							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 800420a:	4a68      	ldr	r2, [pc, #416]	@ (80043ac <statemachine+0xb4c>)
 800420c:	2301      	movs	r3, #1
 800420e:	ca06      	ldmia	r2, {r1, r2}
 8004210:	4865      	ldr	r0, [pc, #404]	@ (80043a8 <statemachine+0xb48>)
 8004212:	f7fe ff8b 	bl	800312c <ssd1306_WriteString>
							  ssd1306_SetCursor(32,42);
 8004216:	212a      	movs	r1, #42	@ 0x2a
 8004218:	2020      	movs	r0, #32
 800421a:	f7fe ffad 	bl	8003178 <ssd1306_SetCursor>
							  ssd1306_WriteString("Vbat(V)",Font_6x8,White);
 800421e:	4a64      	ldr	r2, [pc, #400]	@ (80043b0 <statemachine+0xb50>)
 8004220:	2301      	movs	r3, #1
 8004222:	ca06      	ldmia	r2, {r1, r2}
 8004224:	486b      	ldr	r0, [pc, #428]	@ (80043d4 <statemachine+0xb74>)
 8004226:	f7fe ff81 	bl	800312c <ssd1306_WriteString>
							  if(BTN_B>=1){
 800422a:	4b63      	ldr	r3, [pc, #396]	@ (80043b8 <statemachine+0xb58>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	dd60      	ble.n	80042f4 <statemachine+0xa94>
							  														  ecranstate++;
 8004232:	4b62      	ldr	r3, [pc, #392]	@ (80043bc <statemachine+0xb5c>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b60      	ldr	r3, [pc, #384]	@ (80043bc <statemachine+0xb5c>)
 800423c:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 800423e:	4b5e      	ldr	r3, [pc, #376]	@ (80043b8 <statemachine+0xb58>)
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 8004244:	4b5e      	ldr	r3, [pc, #376]	@ (80043c0 <statemachine+0xb60>)
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
							  break;
 800424a:	e053      	b.n	80042f4 <statemachine+0xa94>
							  snprintf((char  *)bufferscreen,50,"%0.1f",vitmax*3.6);
 800424c:	4b62      	ldr	r3, [pc, #392]	@ (80043d8 <statemachine+0xb78>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f7fc f951 	bl	80004f8 <__aeabi_f2d>
 8004256:	a350      	add	r3, pc, #320	@ (adr r3, 8004398 <statemachine+0xb38>)
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f7fc f9a4 	bl	80005a8 <__aeabi_dmul>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	e9cd 2300 	strd	r2, r3, [sp]
 8004268:	4a4e      	ldr	r2, [pc, #312]	@ (80043a4 <statemachine+0xb44>)
 800426a:	2132      	movs	r1, #50	@ 0x32
 800426c:	484e      	ldr	r0, [pc, #312]	@ (80043a8 <statemachine+0xb48>)
 800426e:	f012 ff59 	bl	8017124 <sniprintf>
							  							  ssd1306_WriteString((char *)bufferscreen,Font_7x10,White);
 8004272:	4a4e      	ldr	r2, [pc, #312]	@ (80043ac <statemachine+0xb4c>)
 8004274:	2301      	movs	r3, #1
 8004276:	ca06      	ldmia	r2, {r1, r2}
 8004278:	484b      	ldr	r0, [pc, #300]	@ (80043a8 <statemachine+0xb48>)
 800427a:	f7fe ff57 	bl	800312c <ssd1306_WriteString>
							  							ssd1306_SetCursor(32,42);
 800427e:	212a      	movs	r1, #42	@ 0x2a
 8004280:	2020      	movs	r0, #32
 8004282:	f7fe ff79 	bl	8003178 <ssd1306_SetCursor>
							  							ssd1306_WriteString("MaxV",Font_6x8,White);
 8004286:	4a4a      	ldr	r2, [pc, #296]	@ (80043b0 <statemachine+0xb50>)
 8004288:	2301      	movs	r3, #1
 800428a:	ca06      	ldmia	r2, {r1, r2}
 800428c:	4853      	ldr	r0, [pc, #332]	@ (80043dc <statemachine+0xb7c>)
 800428e:	f7fe ff4d 	bl	800312c <ssd1306_WriteString>
							  if(BTN_B>=1){
 8004292:	4b49      	ldr	r3, [pc, #292]	@ (80043b8 <statemachine+0xb58>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	dd2e      	ble.n	80042f8 <statemachine+0xa98>
							  														ecranstate--;
 800429a:	4b48      	ldr	r3, [pc, #288]	@ (80043bc <statemachine+0xb5c>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	3b01      	subs	r3, #1
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	4b46      	ldr	r3, [pc, #280]	@ (80043bc <statemachine+0xb5c>)
 80042a4:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80042a6:	4b45      	ldr	r3, [pc, #276]	@ (80043bc <statemachine+0xb5c>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b43      	ldr	r3, [pc, #268]	@ (80043bc <statemachine+0xb5c>)
 80042b0:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80042b2:	4b42      	ldr	r3, [pc, #264]	@ (80043bc <statemachine+0xb5c>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4b40      	ldr	r3, [pc, #256]	@ (80043bc <statemachine+0xb5c>)
 80042bc:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80042be:	4b3f      	ldr	r3, [pc, #252]	@ (80043bc <statemachine+0xb5c>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	4b3d      	ldr	r3, [pc, #244]	@ (80043bc <statemachine+0xb5c>)
 80042c8:	701a      	strb	r2, [r3, #0]
							  														ecranstate--;
 80042ca:	4b3c      	ldr	r3, [pc, #240]	@ (80043bc <statemachine+0xb5c>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	4b3a      	ldr	r3, [pc, #232]	@ (80043bc <statemachine+0xb5c>)
 80042d4:	701a      	strb	r2, [r3, #0]
							  													  	BTN_B=0;
 80042d6:	4b38      	ldr	r3, [pc, #224]	@ (80043b8 <statemachine+0xb58>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
							  													  	BTN_A=0;
 80042dc:	4b38      	ldr	r3, [pc, #224]	@ (80043c0 <statemachine+0xb60>)
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
							  break;
 80042e2:	e009      	b.n	80042f8 <statemachine+0xa98>
							  break;
 80042e4:	bf00      	nop
 80042e6:	e008      	b.n	80042fa <statemachine+0xa9a>
							  break;
 80042e8:	bf00      	nop
 80042ea:	e006      	b.n	80042fa <statemachine+0xa9a>
							  break;
 80042ec:	bf00      	nop
 80042ee:	e004      	b.n	80042fa <statemachine+0xa9a>
							  break;
 80042f0:	bf00      	nop
 80042f2:	e002      	b.n	80042fa <statemachine+0xa9a>
							  break;
 80042f4:	bf00      	nop
 80042f6:	e000      	b.n	80042fa <statemachine+0xa9a>
							  break;
 80042f8:	bf00      	nop
						 	batterygauge(vbat,79, 42,1);
 80042fa:	4b35      	ldr	r3, [pc, #212]	@ (80043d0 <statemachine+0xb70>)
 80042fc:	edd3 7a00 	vldr	s15, [r3]
 8004300:	2201      	movs	r2, #1
 8004302:	212a      	movs	r1, #42	@ 0x2a
 8004304:	204f      	movs	r0, #79	@ 0x4f
 8004306:	eeb0 0a67 	vmov.f32	s0, s15
 800430a:	f7ff f8cd 	bl	80034a8 <batterygauge>
						 	ssd1306_SetCursor(32,52);
 800430e:	2134      	movs	r1, #52	@ 0x34
 8004310:	2020      	movs	r0, #32
 8004312:	f7fe ff31 	bl	8003178 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "%0.2fV",vbat);
 8004316:	4b2e      	ldr	r3, [pc, #184]	@ (80043d0 <statemachine+0xb70>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc f8ec 	bl	80004f8 <__aeabi_f2d>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	e9cd 2300 	strd	r2, r3, [sp]
 8004328:	4a2d      	ldr	r2, [pc, #180]	@ (80043e0 <statemachine+0xb80>)
 800432a:	2132      	movs	r1, #50	@ 0x32
 800432c:	481e      	ldr	r0, [pc, #120]	@ (80043a8 <statemachine+0xb48>)
 800432e:	f012 fef9 	bl	8017124 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004332:	4a1f      	ldr	r2, [pc, #124]	@ (80043b0 <statemachine+0xb50>)
 8004334:	2301      	movs	r3, #1
 8004336:	ca06      	ldmia	r2, {r1, r2}
 8004338:	481b      	ldr	r0, [pc, #108]	@ (80043a8 <statemachine+0xb48>)
 800433a:	f7fe fef7 	bl	800312c <ssd1306_WriteString>
						 	ssd1306_SetCursor(65,52);
 800433e:	2134      	movs	r1, #52	@ 0x34
 8004340:	2041      	movs	r0, #65	@ 0x41
 8004342:	f7fe ff19 	bl	8003178 <ssd1306_SetCursor>
						 	snprintf((char  *)bufferscreen,50, "sat=%d",myData.satelliteCount);
 8004346:	4b16      	ldr	r3, [pc, #88]	@ (80043a0 <statemachine+0xb40>)
 8004348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434a:	4a26      	ldr	r2, [pc, #152]	@ (80043e4 <statemachine+0xb84>)
 800434c:	2132      	movs	r1, #50	@ 0x32
 800434e:	4816      	ldr	r0, [pc, #88]	@ (80043a8 <statemachine+0xb48>)
 8004350:	f012 fee8 	bl	8017124 <sniprintf>
						 	ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8004354:	4a16      	ldr	r2, [pc, #88]	@ (80043b0 <statemachine+0xb50>)
 8004356:	2301      	movs	r3, #1
 8004358:	ca06      	ldmia	r2, {r1, r2}
 800435a:	4813      	ldr	r0, [pc, #76]	@ (80043a8 <statemachine+0xb48>)
 800435c:	f7fe fee6 	bl	800312c <ssd1306_WriteString>
						  if(BTN_B_LONG>=1){
 8004360:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <statemachine+0xb88>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	f340 809c 	ble.w	80044a2 <statemachine+0xc42>
						  						  balisestate--;
 800436a:	4b20      	ldr	r3, [pc, #128]	@ (80043ec <statemachine+0xb8c>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	3b01      	subs	r3, #1
 8004370:	b2da      	uxtb	r2, r3
 8004372:	4b1e      	ldr	r3, [pc, #120]	@ (80043ec <statemachine+0xb8c>)
 8004374:	701a      	strb	r2, [r3, #0]
						  						  BTN_B_LONG=0;
 8004376:	4b1c      	ldr	r3, [pc, #112]	@ (80043e8 <statemachine+0xb88>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]
						  						  BTN_A=0;
 800437c:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <statemachine+0xb60>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
						  						  HAL_TIM_Base_Stop_IT(&htim17);
 8004382:	481b      	ldr	r0, [pc, #108]	@ (80043f0 <statemachine+0xb90>)
 8004384:	f009 ff2a 	bl	800e1dc <HAL_TIM_Base_Stop_IT>
						  						HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8004388:	2200      	movs	r2, #0
 800438a:	2102      	movs	r1, #2
 800438c:	4819      	ldr	r0, [pc, #100]	@ (80043f4 <statemachine+0xb94>)
 800438e:	f003 ffd9 	bl	8008344 <HAL_GPIO_WritePin>
						  break;
 8004392:	e086      	b.n	80044a2 <statemachine+0xc42>
 8004394:	f3af 8000 	nop.w
 8004398:	cccccccd 	.word	0xcccccccd
 800439c:	400ccccc 	.word	0x400ccccc
 80043a0:	20000738 	.word	0x20000738
 80043a4:	0801bc18 	.word	0x0801bc18
 80043a8:	200009d8 	.word	0x200009d8
 80043ac:	2000001c 	.word	0x2000001c
 80043b0:	20000014 	.word	0x20000014
 80043b4:	0801bc20 	.word	0x0801bc20
 80043b8:	2000077c 	.word	0x2000077c
 80043bc:	20000bf8 	.word	0x20000bf8
 80043c0:	20000778 	.word	0x20000778
 80043c4:	200003f8 	.word	0x200003f8
 80043c8:	0801bc94 	.word	0x0801bc94
 80043cc:	0801bc9c 	.word	0x0801bc9c
 80043d0:	200007b0 	.word	0x200007b0
 80043d4:	0801bca4 	.word	0x0801bca4
 80043d8:	20000a4c 	.word	0x20000a4c
 80043dc:	0801bcac 	.word	0x0801bcac
 80043e0:	0801bcb4 	.word	0x0801bcb4
 80043e4:	0801bcbc 	.word	0x0801bcbc
 80043e8:	20000aac 	.word	0x20000aac
 80043ec:	200004ed 	.word	0x200004ed
 80043f0:	2000119c 	.word	0x2000119c
 80043f4:	48000400 	.word	0x48000400
						  ssd1306_SetCursor(32,32);
 80043f8:	2120      	movs	r1, #32
 80043fa:	2020      	movs	r0, #32
 80043fc:	f7fe febc 	bl	8003178 <ssd1306_SetCursor>
						  ssd1306_WriteString("fin de",Font_6x8,White);
 8004400:	4a98      	ldr	r2, [pc, #608]	@ (8004664 <statemachine+0xe04>)
 8004402:	2301      	movs	r3, #1
 8004404:	ca06      	ldmia	r2, {r1, r2}
 8004406:	4898      	ldr	r0, [pc, #608]	@ (8004668 <statemachine+0xe08>)
 8004408:	f7fe fe90 	bl	800312c <ssd1306_WriteString>
						  ssd1306_SetCursor(32,42);
 800440c:	212a      	movs	r1, #42	@ 0x2a
 800440e:	2020      	movs	r0, #32
 8004410:	f7fe feb2 	bl	8003178 <ssd1306_SetCursor>
						  ssd1306_WriteString("memoire",Font_6x8,White);
 8004414:	4a93      	ldr	r2, [pc, #588]	@ (8004664 <statemachine+0xe04>)
 8004416:	2301      	movs	r3, #1
 8004418:	ca06      	ldmia	r2, {r1, r2}
 800441a:	4894      	ldr	r0, [pc, #592]	@ (800466c <statemachine+0xe0c>)
 800441c:	f7fe fe86 	bl	800312c <ssd1306_WriteString>
						  ssd1306_SetCursor(32,52);
 8004420:	2134      	movs	r1, #52	@ 0x34
 8004422:	2020      	movs	r0, #32
 8004424:	f7fe fea8 	bl	8003178 <ssd1306_SetCursor>
						  snprintf((char *)bufferscreen,50,"%d,%d",pageoffset,pagenumber);
 8004428:	4b91      	ldr	r3, [pc, #580]	@ (8004670 <statemachine+0xe10>)
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	4b91      	ldr	r3, [pc, #580]	@ (8004674 <statemachine+0xe14>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	4a90      	ldr	r2, [pc, #576]	@ (8004678 <statemachine+0xe18>)
 8004436:	2132      	movs	r1, #50	@ 0x32
 8004438:	4890      	ldr	r0, [pc, #576]	@ (800467c <statemachine+0xe1c>)
 800443a:	f012 fe73 	bl	8017124 <sniprintf>
						  ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 800443e:	4a89      	ldr	r2, [pc, #548]	@ (8004664 <statemachine+0xe04>)
 8004440:	2301      	movs	r3, #1
 8004442:	ca06      	ldmia	r2, {r1, r2}
 8004444:	488d      	ldr	r0, [pc, #564]	@ (800467c <statemachine+0xe1c>)
 8004446:	f7fe fe71 	bl	800312c <ssd1306_WriteString>
						  if(BTN_A>=1){
 800444a:	4b8d      	ldr	r3, [pc, #564]	@ (8004680 <statemachine+0xe20>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	dd0e      	ble.n	8004470 <statemachine+0xc10>
						  				  			 	state++;
 8004452:	4b8c      	ldr	r3, [pc, #560]	@ (8004684 <statemachine+0xe24>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	3301      	adds	r3, #1
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4b8a      	ldr	r3, [pc, #552]	@ (8004684 <statemachine+0xe24>)
 800445c:	701a      	strb	r2, [r3, #0]
						  				  			 	BTN_A=0;
 800445e:	4b88      	ldr	r3, [pc, #544]	@ (8004680 <statemachine+0xe20>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
						  				  			 	BTN_B=0;
 8004464:	4b88      	ldr	r3, [pc, #544]	@ (8004688 <statemachine+0xe28>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
						  				  			settimeen=0;
 800446a:	4b88      	ldr	r3, [pc, #544]	@ (800468c <statemachine+0xe2c>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
						  if(BTN_A_LONG>=1){
 8004470:	4b87      	ldr	r3, [pc, #540]	@ (8004690 <statemachine+0xe30>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	f341 8067 	ble.w	8005548 <statemachine+0x1ce8>
						  				 									 									  			 	state--;
 800447a:	4b82      	ldr	r3, [pc, #520]	@ (8004684 <statemachine+0xe24>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	3b01      	subs	r3, #1
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b80      	ldr	r3, [pc, #512]	@ (8004684 <statemachine+0xe24>)
 8004484:	701a      	strb	r2, [r3, #0]
						  				 									 									  			 	BTN_A=0;
 8004486:	4b7e      	ldr	r3, [pc, #504]	@ (8004680 <statemachine+0xe20>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_B=0;
 800448c:	4b7e      	ldr	r3, [pc, #504]	@ (8004688 <statemachine+0xe28>)
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
						  				 									 									  			 	BTN_A_LONG=0;
 8004492:	4b7f      	ldr	r3, [pc, #508]	@ (8004690 <statemachine+0xe30>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
					  break;
 8004498:	f001 b856 	b.w	8005548 <statemachine+0x1ce8>
						  break;
 800449c:	bf00      	nop
 800449e:	f001 b853 	b.w	8005548 <statemachine+0x1ce8>
						  break;
 80044a2:	bf00      	nop
					  break;
 80044a4:	f001 b850 	b.w	8005548 <statemachine+0x1ce8>

	case STATE_POS:
			  ssd1306_Fill(Black);
 80044a8:	2000      	movs	r0, #0
 80044aa:	f7fe fd23 	bl	8002ef4 <ssd1306_Fill>
			  nmea_parse(&myData, DataBuffer);
 80044ae:	4979      	ldr	r1, [pc, #484]	@ (8004694 <statemachine+0xe34>)
 80044b0:	4879      	ldr	r0, [pc, #484]	@ (8004698 <statemachine+0xe38>)
 80044b2:	f7fd ff93 	bl	80023dc <nmea_parse>
			  switch(posstate){
 80044b6:	4b79      	ldr	r3, [pc, #484]	@ (800469c <statemachine+0xe3c>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b06      	cmp	r3, #6
 80044bc:	f200 83d1 	bhi.w	8004c62 <statemachine+0x1402>
 80044c0:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <statemachine+0xc68>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	0800458f 	.word	0x0800458f
 80044d0:	080046c9 	.word	0x080046c9
 80044d4:	08004787 	.word	0x08004787
 80044d8:	08004845 	.word	0x08004845
 80044dc:	0800499d 	.word	0x0800499d
 80044e0:	08004a7f 	.word	0x08004a7f

			  case STATE_SUMMARY1:

						ssd1306_SetCursor(32, 32);
 80044e4:	2120      	movs	r1, #32
 80044e6:	2020      	movs	r0, #32
 80044e8:	f7fe fe46 	bl	8003178 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "Latitude:");
 80044ec:	4a6c      	ldr	r2, [pc, #432]	@ (80046a0 <statemachine+0xe40>)
 80044ee:	210f      	movs	r1, #15
 80044f0:	4862      	ldr	r0, [pc, #392]	@ (800467c <statemachine+0xe1c>)
 80044f2:	f012 fe17 	bl	8017124 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80044f6:	4a5b      	ldr	r2, [pc, #364]	@ (8004664 <statemachine+0xe04>)
 80044f8:	2301      	movs	r3, #1
 80044fa:	ca06      	ldmia	r2, {r1, r2}
 80044fc:	485f      	ldr	r0, [pc, #380]	@ (800467c <statemachine+0xe1c>)
 80044fe:	f7fe fe15 	bl	800312c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8004502:	4b65      	ldr	r3, [pc, #404]	@ (8004698 <statemachine+0xe38>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	e9cd 2300 	strd	r2, r3, [sp]
 800450c:	4a65      	ldr	r2, [pc, #404]	@ (80046a4 <statemachine+0xe44>)
 800450e:	210f      	movs	r1, #15
 8004510:	485a      	ldr	r0, [pc, #360]	@ (800467c <statemachine+0xe1c>)
 8004512:	f012 fe07 	bl	8017124 <sniprintf>
						ssd1306_SetCursor(32, 40);
 8004516:	2128      	movs	r1, #40	@ 0x28
 8004518:	2020      	movs	r0, #32
 800451a:	f7fe fe2d 	bl	8003178 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800451e:	4a51      	ldr	r2, [pc, #324]	@ (8004664 <statemachine+0xe04>)
 8004520:	2301      	movs	r3, #1
 8004522:	ca06      	ldmia	r2, {r1, r2}
 8004524:	4855      	ldr	r0, [pc, #340]	@ (800467c <statemachine+0xe1c>)
 8004526:	f7fe fe01 	bl	800312c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Longitude:");
 800452a:	4a5f      	ldr	r2, [pc, #380]	@ (80046a8 <statemachine+0xe48>)
 800452c:	210f      	movs	r1, #15
 800452e:	4853      	ldr	r0, [pc, #332]	@ (800467c <statemachine+0xe1c>)
 8004530:	f012 fdf8 	bl	8017124 <sniprintf>
						ssd1306_SetCursor(32, 48);
 8004534:	2130      	movs	r1, #48	@ 0x30
 8004536:	2020      	movs	r0, #32
 8004538:	f7fe fe1e 	bl	8003178 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800453c:	4a49      	ldr	r2, [pc, #292]	@ (8004664 <statemachine+0xe04>)
 800453e:	2301      	movs	r3, #1
 8004540:	ca06      	ldmia	r2, {r1, r2}
 8004542:	484e      	ldr	r0, [pc, #312]	@ (800467c <statemachine+0xe1c>)
 8004544:	f7fe fdf2 	bl	800312c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 8004548:	4b53      	ldr	r3, [pc, #332]	@ (8004698 <statemachine+0xe38>)
 800454a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800454e:	e9cd 2300 	strd	r2, r3, [sp]
 8004552:	4a54      	ldr	r2, [pc, #336]	@ (80046a4 <statemachine+0xe44>)
 8004554:	210f      	movs	r1, #15
 8004556:	4849      	ldr	r0, [pc, #292]	@ (800467c <statemachine+0xe1c>)
 8004558:	f012 fde4 	bl	8017124 <sniprintf>
						ssd1306_SetCursor(32, 56);
 800455c:	2138      	movs	r1, #56	@ 0x38
 800455e:	2020      	movs	r0, #32
 8004560:	f7fe fe0a 	bl	8003178 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004564:	4a3f      	ldr	r2, [pc, #252]	@ (8004664 <statemachine+0xe04>)
 8004566:	2301      	movs	r3, #1
 8004568:	ca06      	ldmia	r2, {r1, r2}
 800456a:	4844      	ldr	r0, [pc, #272]	@ (800467c <statemachine+0xe1c>)
 800456c:	f7fe fdde 	bl	800312c <ssd1306_WriteString>
				  if(BTN_B>=1){
 8004570:	4b45      	ldr	r3, [pc, #276]	@ (8004688 <statemachine+0xe28>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	f340 8339 	ble.w	8004bec <statemachine+0x138c>
					  posstate++;
 800457a:	4b48      	ldr	r3, [pc, #288]	@ (800469c <statemachine+0xe3c>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4b46      	ldr	r3, [pc, #280]	@ (800469c <statemachine+0xe3c>)
 8004584:	701a      	strb	r2, [r3, #0]
					  BTN_B=0;
 8004586:	4b40      	ldr	r3, [pc, #256]	@ (8004688 <statemachine+0xe28>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
				  }



				  break;
 800458c:	e32e      	b.n	8004bec <statemachine+0x138c>
			  case STATE_INFO:
				ssd1306_Fill(Black);
 800458e:	2000      	movs	r0, #0
 8004590:	f7fe fcb0 	bl	8002ef4 <ssd1306_Fill>
				nmea_parse(&myData, DataBuffer);
 8004594:	493f      	ldr	r1, [pc, #252]	@ (8004694 <statemachine+0xe34>)
 8004596:	4840      	ldr	r0, [pc, #256]	@ (8004698 <statemachine+0xe38>)
 8004598:	f7fd ff20 	bl	80023dc <nmea_parse>
				snprintf((char *)bufferscreen,15, "hdop=%.1f",myData.hdop);//sert a	connaitre la qualitée du fix si proche de 1 voir inférieur alors le fix est tres bon
 800459c:	4b3e      	ldr	r3, [pc, #248]	@ (8004698 <statemachine+0xe38>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fb ffa9 	bl	80004f8 <__aeabi_f2d>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	e9cd 2300 	strd	r2, r3, [sp]
 80045ae:	4a3f      	ldr	r2, [pc, #252]	@ (80046ac <statemachine+0xe4c>)
 80045b0:	210f      	movs	r1, #15
 80045b2:	4832      	ldr	r0, [pc, #200]	@ (800467c <statemachine+0xe1c>)
 80045b4:	f012 fdb6 	bl	8017124 <sniprintf>
				ssd1306_SetCursor(32, 32);
 80045b8:	2120      	movs	r1, #32
 80045ba:	2020      	movs	r0, #32
 80045bc:	f7fe fddc 	bl	8003178 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80045c0:	4a3b      	ldr	r2, [pc, #236]	@ (80046b0 <statemachine+0xe50>)
 80045c2:	2301      	movs	r3, #1
 80045c4:	ca06      	ldmia	r2, {r1, r2}
 80045c6:	482d      	ldr	r0, [pc, #180]	@ (800467c <statemachine+0xe1c>)
 80045c8:	f7fe fdb0 	bl	800312c <ssd1306_WriteString>
				snprintf((char *)bufferscreen,20, "v=%0.2fV",vbat);
 80045cc:	4b39      	ldr	r3, [pc, #228]	@ (80046b4 <statemachine+0xe54>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb ff91 	bl	80004f8 <__aeabi_f2d>
 80045d6:	4602      	mov	r2, r0
 80045d8:	460b      	mov	r3, r1
 80045da:	e9cd 2300 	strd	r2, r3, [sp]
 80045de:	4a36      	ldr	r2, [pc, #216]	@ (80046b8 <statemachine+0xe58>)
 80045e0:	2114      	movs	r1, #20
 80045e2:	4826      	ldr	r0, [pc, #152]	@ (800467c <statemachine+0xe1c>)
 80045e4:	f012 fd9e 	bl	8017124 <sniprintf>
				ssd1306_SetCursor(32, 42);
 80045e8:	212a      	movs	r1, #42	@ 0x2a
 80045ea:	2020      	movs	r0, #32
 80045ec:	f7fe fdc4 	bl	8003178 <ssd1306_SetCursor>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 80045f0:	4a2f      	ldr	r2, [pc, #188]	@ (80046b0 <statemachine+0xe50>)
 80045f2:	2301      	movs	r3, #1
 80045f4:	ca06      	ldmia	r2, {r1, r2}
 80045f6:	4821      	ldr	r0, [pc, #132]	@ (800467c <statemachine+0xe1c>)
 80045f8:	f7fe fd98 	bl	800312c <ssd1306_WriteString>
				ssd1306_SetCursor(32, 52);
 80045fc:	2134      	movs	r1, #52	@ 0x34
 80045fe:	2020      	movs	r0, #32
 8004600:	f7fe fdba 	bl	8003178 <ssd1306_SetCursor>
				snprintf((char *)bufferscreen,15,  "T=%0.2fC",temp);
 8004604:	4b2d      	ldr	r3, [pc, #180]	@ (80046bc <statemachine+0xe5c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7fb ff75 	bl	80004f8 <__aeabi_f2d>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	e9cd 2300 	strd	r2, r3, [sp]
 8004616:	4a2a      	ldr	r2, [pc, #168]	@ (80046c0 <statemachine+0xe60>)
 8004618:	210f      	movs	r1, #15
 800461a:	4818      	ldr	r0, [pc, #96]	@ (800467c <statemachine+0xe1c>)
 800461c:	f012 fd82 	bl	8017124 <sniprintf>
				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004620:	4a23      	ldr	r2, [pc, #140]	@ (80046b0 <statemachine+0xe50>)
 8004622:	2301      	movs	r3, #1
 8004624:	ca06      	ldmia	r2, {r1, r2}
 8004626:	4815      	ldr	r0, [pc, #84]	@ (800467c <statemachine+0xe1c>)
 8004628:	f7fe fd80 	bl	800312c <ssd1306_WriteString>
				 if(BTN_B>=1){
 800462c:	4b16      	ldr	r3, [pc, #88]	@ (8004688 <statemachine+0xe28>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	dd08      	ble.n	8004646 <statemachine+0xde6>
								  					  posstate++;
 8004634:	4b19      	ldr	r3, [pc, #100]	@ (800469c <statemachine+0xe3c>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	b2da      	uxtb	r2, r3
 800463c:	4b17      	ldr	r3, [pc, #92]	@ (800469c <statemachine+0xe3c>)
 800463e:	701a      	strb	r2, [r3, #0]
								  					  BTN_B=0;
 8004640:	4b11      	ldr	r3, [pc, #68]	@ (8004688 <statemachine+0xe28>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
								  				  }
								  if(BTN_B_LONG>=1){
 8004646:	4b1f      	ldr	r3, [pc, #124]	@ (80046c4 <statemachine+0xe64>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	f340 82d0 	ble.w	8004bf0 <statemachine+0x1390>
													  posstate--;
 8004650:	4b12      	ldr	r3, [pc, #72]	@ (800469c <statemachine+0xe3c>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	3b01      	subs	r3, #1
 8004656:	b2da      	uxtb	r2, r3
 8004658:	4b10      	ldr	r3, [pc, #64]	@ (800469c <statemachine+0xe3c>)
 800465a:	701a      	strb	r2, [r3, #0]
													BTN_B_LONG=0;
 800465c:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <statemachine+0xe64>)
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
												}

				  break;
 8004662:	e2c5      	b.n	8004bf0 <statemachine+0x1390>
 8004664:	20000014 	.word	0x20000014
 8004668:	0801bcc4 	.word	0x0801bcc4
 800466c:	0801bccc 	.word	0x0801bccc
 8004670:	200009b4 	.word	0x200009b4
 8004674:	200009b8 	.word	0x200009b8
 8004678:	0801bcd4 	.word	0x0801bcd4
 800467c:	200009d8 	.word	0x200009d8
 8004680:	20000778 	.word	0x20000778
 8004684:	200004e8 	.word	0x200004e8
 8004688:	2000077c 	.word	0x2000077c
 800468c:	20000a98 	.word	0x20000a98
 8004690:	20000ab0 	.word	0x20000ab0
 8004694:	20000534 	.word	0x20000534
 8004698:	20000738 	.word	0x20000738
 800469c:	200004ea 	.word	0x200004ea
 80046a0:	0801bcdc 	.word	0x0801bcdc
 80046a4:	0801bce8 	.word	0x0801bce8
 80046a8:	0801bcf0 	.word	0x0801bcf0
 80046ac:	0801bcfc 	.word	0x0801bcfc
 80046b0:	2000001c 	.word	0x2000001c
 80046b4:	200007b0 	.word	0x200007b0
 80046b8:	0801bd08 	.word	0x0801bd08
 80046bc:	200007a8 	.word	0x200007a8
 80046c0:	0801bd14 	.word	0x0801bd14
 80046c4:	20000aac 	.word	0x20000aac
			  case STATE_LAT:
						ssd1306_SetCursor(32, 32);
 80046c8:	2120      	movs	r1, #32
 80046ca:	2020      	movs	r0, #32
 80046cc:	f7fe fd54 	bl	8003178 <ssd1306_SetCursor>
						snprintf((char *)bufferscreen,15, "LatSide:");
 80046d0:	4aa1      	ldr	r2, [pc, #644]	@ (8004958 <statemachine+0x10f8>)
 80046d2:	210f      	movs	r1, #15
 80046d4:	48a1      	ldr	r0, [pc, #644]	@ (800495c <statemachine+0x10fc>)
 80046d6:	f012 fd25 	bl	8017124 <sniprintf>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80046da:	4aa1      	ldr	r2, [pc, #644]	@ (8004960 <statemachine+0x1100>)
 80046dc:	2301      	movs	r3, #1
 80046de:	ca06      	ldmia	r2, {r1, r2}
 80046e0:	489e      	ldr	r0, [pc, #632]	@ (800495c <statemachine+0x10fc>)
 80046e2:	f7fe fd23 	bl	800312c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%c",myData.latSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80046e6:	4b9f      	ldr	r3, [pc, #636]	@ (8004964 <statemachine+0x1104>)
 80046e8:	7a1b      	ldrb	r3, [r3, #8]
 80046ea:	4a9f      	ldr	r2, [pc, #636]	@ (8004968 <statemachine+0x1108>)
 80046ec:	210f      	movs	r1, #15
 80046ee:	489b      	ldr	r0, [pc, #620]	@ (800495c <statemachine+0x10fc>)
 80046f0:	f012 fd18 	bl	8017124 <sniprintf>
						ssd1306_SetCursor(32, 40);
 80046f4:	2128      	movs	r1, #40	@ 0x28
 80046f6:	2020      	movs	r0, #32
 80046f8:	f7fe fd3e 	bl	8003178 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80046fc:	4a98      	ldr	r2, [pc, #608]	@ (8004960 <statemachine+0x1100>)
 80046fe:	2301      	movs	r3, #1
 8004700:	ca06      	ldmia	r2, {r1, r2}
 8004702:	4896      	ldr	r0, [pc, #600]	@ (800495c <statemachine+0x10fc>)
 8004704:	f7fe fd12 	bl	800312c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "Latitude:");
 8004708:	4a98      	ldr	r2, [pc, #608]	@ (800496c <statemachine+0x110c>)
 800470a:	210f      	movs	r1, #15
 800470c:	4893      	ldr	r0, [pc, #588]	@ (800495c <statemachine+0x10fc>)
 800470e:	f012 fd09 	bl	8017124 <sniprintf>
						ssd1306_SetCursor(32, 48);
 8004712:	2130      	movs	r1, #48	@ 0x30
 8004714:	2020      	movs	r0, #32
 8004716:	f7fe fd2f 	bl	8003178 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 800471a:	4a91      	ldr	r2, [pc, #580]	@ (8004960 <statemachine+0x1100>)
 800471c:	2301      	movs	r3, #1
 800471e:	ca06      	ldmia	r2, {r1, r2}
 8004720:	488e      	ldr	r0, [pc, #568]	@ (800495c <statemachine+0x10fc>)
 8004722:	f7fe fd03 	bl	800312c <ssd1306_WriteString>
						snprintf((char *)bufferscreen,15, "%0.7f",myData.latitude);
 8004726:	4b8f      	ldr	r3, [pc, #572]	@ (8004964 <statemachine+0x1104>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	e9cd 2300 	strd	r2, r3, [sp]
 8004730:	4a8f      	ldr	r2, [pc, #572]	@ (8004970 <statemachine+0x1110>)
 8004732:	210f      	movs	r1, #15
 8004734:	4889      	ldr	r0, [pc, #548]	@ (800495c <statemachine+0x10fc>)
 8004736:	f012 fcf5 	bl	8017124 <sniprintf>
						ssd1306_SetCursor(32, 56);
 800473a:	2138      	movs	r1, #56	@ 0x38
 800473c:	2020      	movs	r0, #32
 800473e:	f7fe fd1b 	bl	8003178 <ssd1306_SetCursor>
						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004742:	4a87      	ldr	r2, [pc, #540]	@ (8004960 <statemachine+0x1100>)
 8004744:	2301      	movs	r3, #1
 8004746:	ca06      	ldmia	r2, {r1, r2}
 8004748:	4884      	ldr	r0, [pc, #528]	@ (800495c <statemachine+0x10fc>)
 800474a:	f7fe fcef 	bl	800312c <ssd1306_WriteString>


				  if(BTN_B>=1){
 800474e:	4b89      	ldr	r3, [pc, #548]	@ (8004974 <statemachine+0x1114>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	dd08      	ble.n	8004768 <statemachine+0xf08>
				  					  posstate++;
 8004756:	4b88      	ldr	r3, [pc, #544]	@ (8004978 <statemachine+0x1118>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	3301      	adds	r3, #1
 800475c:	b2da      	uxtb	r2, r3
 800475e:	4b86      	ldr	r3, [pc, #536]	@ (8004978 <statemachine+0x1118>)
 8004760:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8004762:	4b84      	ldr	r3, [pc, #528]	@ (8004974 <statemachine+0x1114>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8004768:	4b84      	ldr	r3, [pc, #528]	@ (800497c <statemachine+0x111c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f340 8241 	ble.w	8004bf4 <statemachine+0x1394>
									  posstate--;
 8004772:	4b81      	ldr	r3, [pc, #516]	@ (8004978 <statemachine+0x1118>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	3b01      	subs	r3, #1
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b7f      	ldr	r3, [pc, #508]	@ (8004978 <statemachine+0x1118>)
 800477c:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 800477e:	4b7f      	ldr	r3, [pc, #508]	@ (800497c <statemachine+0x111c>)
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
								}



				  break;
 8004784:	e236      	b.n	8004bf4 <statemachine+0x1394>
			  case STATE_LONG:

					ssd1306_SetCursor(32, 32);
 8004786:	2120      	movs	r1, #32
 8004788:	2020      	movs	r0, #32
 800478a:	f7fe fcf5 	bl	8003178 <ssd1306_SetCursor>
					snprintf((char *)bufferscreen,15, "LonSide:");
 800478e:	4a7c      	ldr	r2, [pc, #496]	@ (8004980 <statemachine+0x1120>)
 8004790:	210f      	movs	r1, #15
 8004792:	4872      	ldr	r0, [pc, #456]	@ (800495c <statemachine+0x10fc>)
 8004794:	f012 fcc6 	bl	8017124 <sniprintf>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004798:	4a71      	ldr	r2, [pc, #452]	@ (8004960 <statemachine+0x1100>)
 800479a:	2301      	movs	r3, #1
 800479c:	ca06      	ldmia	r2, {r1, r2}
 800479e:	486f      	ldr	r0, [pc, #444]	@ (800495c <statemachine+0x10fc>)
 80047a0:	f7fe fcc4 	bl	800312c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%c",myData.lonSide);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80047a4:	4b6f      	ldr	r3, [pc, #444]	@ (8004964 <statemachine+0x1104>)
 80047a6:	7e1b      	ldrb	r3, [r3, #24]
 80047a8:	4a6f      	ldr	r2, [pc, #444]	@ (8004968 <statemachine+0x1108>)
 80047aa:	210f      	movs	r1, #15
 80047ac:	486b      	ldr	r0, [pc, #428]	@ (800495c <statemachine+0x10fc>)
 80047ae:	f012 fcb9 	bl	8017124 <sniprintf>
					ssd1306_SetCursor(32, 40);
 80047b2:	2128      	movs	r1, #40	@ 0x28
 80047b4:	2020      	movs	r0, #32
 80047b6:	f7fe fcdf 	bl	8003178 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80047ba:	4a69      	ldr	r2, [pc, #420]	@ (8004960 <statemachine+0x1100>)
 80047bc:	2301      	movs	r3, #1
 80047be:	ca06      	ldmia	r2, {r1, r2}
 80047c0:	4866      	ldr	r0, [pc, #408]	@ (800495c <statemachine+0x10fc>)
 80047c2:	f7fe fcb3 	bl	800312c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "Longitude:");
 80047c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004984 <statemachine+0x1124>)
 80047c8:	210f      	movs	r1, #15
 80047ca:	4864      	ldr	r0, [pc, #400]	@ (800495c <statemachine+0x10fc>)
 80047cc:	f012 fcaa 	bl	8017124 <sniprintf>
					ssd1306_SetCursor(32, 48);
 80047d0:	2130      	movs	r1, #48	@ 0x30
 80047d2:	2020      	movs	r0, #32
 80047d4:	f7fe fcd0 	bl	8003178 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80047d8:	4a61      	ldr	r2, [pc, #388]	@ (8004960 <statemachine+0x1100>)
 80047da:	2301      	movs	r3, #1
 80047dc:	ca06      	ldmia	r2, {r1, r2}
 80047de:	485f      	ldr	r0, [pc, #380]	@ (800495c <statemachine+0x10fc>)
 80047e0:	f7fe fca4 	bl	800312c <ssd1306_WriteString>
					snprintf((char *)bufferscreen,15, "%0.7f",myData.longitude);
 80047e4:	4b5f      	ldr	r3, [pc, #380]	@ (8004964 <statemachine+0x1104>)
 80047e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80047ea:	e9cd 2300 	strd	r2, r3, [sp]
 80047ee:	4a60      	ldr	r2, [pc, #384]	@ (8004970 <statemachine+0x1110>)
 80047f0:	210f      	movs	r1, #15
 80047f2:	485a      	ldr	r0, [pc, #360]	@ (800495c <statemachine+0x10fc>)
 80047f4:	f012 fc96 	bl	8017124 <sniprintf>
					ssd1306_SetCursor(32, 56);
 80047f8:	2138      	movs	r1, #56	@ 0x38
 80047fa:	2020      	movs	r0, #32
 80047fc:	f7fe fcbc 	bl	8003178 <ssd1306_SetCursor>
					ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004800:	4a57      	ldr	r2, [pc, #348]	@ (8004960 <statemachine+0x1100>)
 8004802:	2301      	movs	r3, #1
 8004804:	ca06      	ldmia	r2, {r1, r2}
 8004806:	4855      	ldr	r0, [pc, #340]	@ (800495c <statemachine+0x10fc>)
 8004808:	f7fe fc90 	bl	800312c <ssd1306_WriteString>

				  if(BTN_B>=1){
 800480c:	4b59      	ldr	r3, [pc, #356]	@ (8004974 <statemachine+0x1114>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	dd08      	ble.n	8004826 <statemachine+0xfc6>
				  					  posstate++;
 8004814:	4b58      	ldr	r3, [pc, #352]	@ (8004978 <statemachine+0x1118>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	b2da      	uxtb	r2, r3
 800481c:	4b56      	ldr	r3, [pc, #344]	@ (8004978 <statemachine+0x1118>)
 800481e:	701a      	strb	r2, [r3, #0]
				  					  BTN_B=0;
 8004820:	4b54      	ldr	r3, [pc, #336]	@ (8004974 <statemachine+0x1114>)
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8004826:	4b55      	ldr	r3, [pc, #340]	@ (800497c <statemachine+0x111c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f340 81e4 	ble.w	8004bf8 <statemachine+0x1398>
									  posstate--;
 8004830:	4b51      	ldr	r3, [pc, #324]	@ (8004978 <statemachine+0x1118>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	3b01      	subs	r3, #1
 8004836:	b2da      	uxtb	r2, r3
 8004838:	4b4f      	ldr	r3, [pc, #316]	@ (8004978 <statemachine+0x1118>)
 800483a:	701a      	strb	r2, [r3, #0]
									BTN_B_LONG=0;
 800483c:	4b4f      	ldr	r3, [pc, #316]	@ (800497c <statemachine+0x111c>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
								}

				  break;
 8004842:	e1d9      	b.n	8004bf8 <statemachine+0x1398>
			  case STATE_ALT:


				  						ssd1306_SetCursor(32, 32);
 8004844:	2120      	movs	r1, #32
 8004846:	2020      	movs	r0, #32
 8004848:	f7fe fc96 	bl	8003178 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "altitude:");
 800484c:	4a4e      	ldr	r2, [pc, #312]	@ (8004988 <statemachine+0x1128>)
 800484e:	210f      	movs	r1, #15
 8004850:	4842      	ldr	r0, [pc, #264]	@ (800495c <statemachine+0x10fc>)
 8004852:	f012 fc67 	bl	8017124 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004856:	4a42      	ldr	r2, [pc, #264]	@ (8004960 <statemachine+0x1100>)
 8004858:	2301      	movs	r3, #1
 800485a:	ca06      	ldmia	r2, {r1, r2}
 800485c:	483f      	ldr	r0, [pc, #252]	@ (800495c <statemachine+0x10fc>)
 800485e:	f7fe fc65 	bl	800312c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1f m",myData.altitude);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 8004862:	4b40      	ldr	r3, [pc, #256]	@ (8004964 <statemachine+0x1104>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	4618      	mov	r0, r3
 8004868:	f7fb fe46 	bl	80004f8 <__aeabi_f2d>
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	e9cd 2300 	strd	r2, r3, [sp]
 8004874:	4a45      	ldr	r2, [pc, #276]	@ (800498c <statemachine+0x112c>)
 8004876:	210f      	movs	r1, #15
 8004878:	4838      	ldr	r0, [pc, #224]	@ (800495c <statemachine+0x10fc>)
 800487a:	f012 fc53 	bl	8017124 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 800487e:	2128      	movs	r1, #40	@ 0x28
 8004880:	2020      	movs	r0, #32
 8004882:	f7fe fc79 	bl	8003178 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004886:	4a36      	ldr	r2, [pc, #216]	@ (8004960 <statemachine+0x1100>)
 8004888:	2301      	movs	r3, #1
 800488a:	ca06      	ldmia	r2, {r1, r2}
 800488c:	4833      	ldr	r0, [pc, #204]	@ (800495c <statemachine+0x10fc>)
 800488e:	f7fe fc4d 	bl	800312c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "Pressure:");
 8004892:	4a3f      	ldr	r2, [pc, #252]	@ (8004990 <statemachine+0x1130>)
 8004894:	210f      	movs	r1, #15
 8004896:	4831      	ldr	r0, [pc, #196]	@ (800495c <statemachine+0x10fc>)
 8004898:	f012 fc44 	bl	8017124 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 800489c:	2130      	movs	r1, #48	@ 0x30
 800489e:	2020      	movs	r0, #32
 80048a0:	f7fe fc6a 	bl	8003178 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80048a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004960 <statemachine+0x1100>)
 80048a6:	2301      	movs	r3, #1
 80048a8:	ca06      	ldmia	r2, {r1, r2}
 80048aa:	482c      	ldr	r0, [pc, #176]	@ (800495c <statemachine+0x10fc>)
 80048ac:	f7fe fc3e 	bl	800312c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.1fhpa",1000*expf((-0.0001148)*(myData.altitude)));
 80048b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004964 <statemachine+0x1104>)
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fb fe1f 	bl	80004f8 <__aeabi_f2d>
 80048ba:	a325      	add	r3, pc, #148	@ (adr r3, 8004950 <statemachine+0x10f0>)
 80048bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c0:	f7fb fe72 	bl	80005a8 <__aeabi_dmul>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	f7fc f964 	bl	8000b98 <__aeabi_d2f>
 80048d0:	4603      	mov	r3, r0
 80048d2:	ee00 3a10 	vmov	s0, r3
 80048d6:	f015 fabb 	bl	8019e50 <expf>
 80048da:	eef0 7a40 	vmov.f32	s15, s0
 80048de:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004994 <statemachine+0x1134>
 80048e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048e6:	ee17 0a90 	vmov	r0, s15
 80048ea:	f7fb fe05 	bl	80004f8 <__aeabi_f2d>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	e9cd 2300 	strd	r2, r3, [sp]
 80048f6:	4a28      	ldr	r2, [pc, #160]	@ (8004998 <statemachine+0x1138>)
 80048f8:	210f      	movs	r1, #15
 80048fa:	4818      	ldr	r0, [pc, #96]	@ (800495c <statemachine+0x10fc>)
 80048fc:	f012 fc12 	bl	8017124 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8004900:	2138      	movs	r1, #56	@ 0x38
 8004902:	2020      	movs	r0, #32
 8004904:	f7fe fc38 	bl	8003178 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004908:	4a15      	ldr	r2, [pc, #84]	@ (8004960 <statemachine+0x1100>)
 800490a:	2301      	movs	r3, #1
 800490c:	ca06      	ldmia	r2, {r1, r2}
 800490e:	4813      	ldr	r0, [pc, #76]	@ (800495c <statemachine+0x10fc>)
 8004910:	f7fe fc0c 	bl	800312c <ssd1306_WriteString>

				  if(BTN_B>=1){
 8004914:	4b17      	ldr	r3, [pc, #92]	@ (8004974 <statemachine+0x1114>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	dd08      	ble.n	800492e <statemachine+0x10ce>
				  					posstate++;
 800491c:	4b16      	ldr	r3, [pc, #88]	@ (8004978 <statemachine+0x1118>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	3301      	adds	r3, #1
 8004922:	b2da      	uxtb	r2, r3
 8004924:	4b14      	ldr	r3, [pc, #80]	@ (8004978 <statemachine+0x1118>)
 8004926:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8004928:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <statemachine+0x1114>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 800492e:	4b13      	ldr	r3, [pc, #76]	@ (800497c <statemachine+0x111c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f340 8162 	ble.w	8004bfc <statemachine+0x139c>
					  posstate--;
 8004938:	4b0f      	ldr	r3, [pc, #60]	@ (8004978 <statemachine+0x1118>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	3b01      	subs	r3, #1
 800493e:	b2da      	uxtb	r2, r3
 8004940:	4b0d      	ldr	r3, [pc, #52]	@ (8004978 <statemachine+0x1118>)
 8004942:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8004944:	4b0d      	ldr	r3, [pc, #52]	@ (800497c <statemachine+0x111c>)
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
				}
				  break;
 800494a:	e157      	b.n	8004bfc <statemachine+0x139c>
 800494c:	f3af 8000 	nop.w
 8004950:	fb798882 	.word	0xfb798882
 8004954:	bf1e1818 	.word	0xbf1e1818
 8004958:	0801bd20 	.word	0x0801bd20
 800495c:	200009d8 	.word	0x200009d8
 8004960:	20000014 	.word	0x20000014
 8004964:	20000738 	.word	0x20000738
 8004968:	0801bd2c 	.word	0x0801bd2c
 800496c:	0801bcdc 	.word	0x0801bcdc
 8004970:	0801bce8 	.word	0x0801bce8
 8004974:	2000077c 	.word	0x2000077c
 8004978:	200004ea 	.word	0x200004ea
 800497c:	20000aac 	.word	0x20000aac
 8004980:	0801bd30 	.word	0x0801bd30
 8004984:	0801bcf0 	.word	0x0801bcf0
 8004988:	0801bd3c 	.word	0x0801bd3c
 800498c:	0801bd48 	.word	0x0801bd48
 8004990:	0801bd50 	.word	0x0801bd50
 8004994:	447a0000 	.word	0x447a0000
 8004998:	0801bd5c 	.word	0x0801bd5c
			  case STATE_ALTBARO:

				  	  	  	  	  	  	bmp581_read_precise_normal(bmp581);
 800499c:	4b99      	ldr	r3, [pc, #612]	@ (8004c04 <statemachine+0x13a4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7fc fd29 	bl	80013f8 <bmp581_read_precise_normal>
				  						ssd1306_SetCursor(32, 32);
 80049a6:	2120      	movs	r1, #32
 80049a8:	2020      	movs	r0, #32
 80049aa:	f7fe fbe5 	bl	8003178 <ssd1306_SetCursor>
				  						snprintf((char *)bufferscreen,15, "baroalt:");
 80049ae:	4a96      	ldr	r2, [pc, #600]	@ (8004c08 <statemachine+0x13a8>)
 80049b0:	210f      	movs	r1, #15
 80049b2:	4896      	ldr	r0, [pc, #600]	@ (8004c0c <statemachine+0x13ac>)
 80049b4:	f012 fbb6 	bl	8017124 <sniprintf>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80049b8:	4a95      	ldr	r2, [pc, #596]	@ (8004c10 <statemachine+0x13b0>)
 80049ba:	2301      	movs	r3, #1
 80049bc:	ca06      	ldmia	r2, {r1, r2}
 80049be:	4893      	ldr	r0, [pc, #588]	@ (8004c0c <statemachine+0x13ac>)
 80049c0:	f7fe fbb4 	bl	800312c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.2lf m",bmpalt);//pas forcement utile d'afficher 7 decimales apres la virgule, 6 donne une precision au metre ce qui est le max du gps
 80049c4:	4b93      	ldr	r3, [pc, #588]	@ (8004c14 <statemachine+0x13b4>)
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	e9cd 2300 	strd	r2, r3, [sp]
 80049ce:	4a92      	ldr	r2, [pc, #584]	@ (8004c18 <statemachine+0x13b8>)
 80049d0:	210f      	movs	r1, #15
 80049d2:	488e      	ldr	r0, [pc, #568]	@ (8004c0c <statemachine+0x13ac>)
 80049d4:	f012 fba6 	bl	8017124 <sniprintf>
				  						ssd1306_SetCursor(32, 40);
 80049d8:	2128      	movs	r1, #40	@ 0x28
 80049da:	2020      	movs	r0, #32
 80049dc:	f7fe fbcc 	bl	8003178 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80049e0:	4a8b      	ldr	r2, [pc, #556]	@ (8004c10 <statemachine+0x13b0>)
 80049e2:	2301      	movs	r3, #1
 80049e4:	ca06      	ldmia	r2, {r1, r2}
 80049e6:	4889      	ldr	r0, [pc, #548]	@ (8004c0c <statemachine+0x13ac>)
 80049e8:	f7fe fba0 	bl	800312c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "baropress:");
 80049ec:	4a8b      	ldr	r2, [pc, #556]	@ (8004c1c <statemachine+0x13bc>)
 80049ee:	210f      	movs	r1, #15
 80049f0:	4886      	ldr	r0, [pc, #536]	@ (8004c0c <statemachine+0x13ac>)
 80049f2:	f012 fb97 	bl	8017124 <sniprintf>
				  						ssd1306_SetCursor(32, 48);
 80049f6:	2130      	movs	r1, #48	@ 0x30
 80049f8:	2020      	movs	r0, #32
 80049fa:	f7fe fbbd 	bl	8003178 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 80049fe:	4a84      	ldr	r2, [pc, #528]	@ (8004c10 <statemachine+0x13b0>)
 8004a00:	2301      	movs	r3, #1
 8004a02:	ca06      	ldmia	r2, {r1, r2}
 8004a04:	4881      	ldr	r0, [pc, #516]	@ (8004c0c <statemachine+0x13ac>)
 8004a06:	f7fe fb91 	bl	800312c <ssd1306_WriteString>
				  						snprintf((char *)bufferscreen,15, "%0.3lfkPa",bmppress/1000.0);
 8004a0a:	4b85      	ldr	r3, [pc, #532]	@ (8004c20 <statemachine+0x13c0>)
 8004a0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a10:	f04f 0200 	mov.w	r2, #0
 8004a14:	4b83      	ldr	r3, [pc, #524]	@ (8004c24 <statemachine+0x13c4>)
 8004a16:	f7fb fef1 	bl	80007fc <__aeabi_ddiv>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	e9cd 2300 	strd	r2, r3, [sp]
 8004a22:	4a81      	ldr	r2, [pc, #516]	@ (8004c28 <statemachine+0x13c8>)
 8004a24:	210f      	movs	r1, #15
 8004a26:	4879      	ldr	r0, [pc, #484]	@ (8004c0c <statemachine+0x13ac>)
 8004a28:	f012 fb7c 	bl	8017124 <sniprintf>
				  						ssd1306_SetCursor(32, 56);
 8004a2c:	2138      	movs	r1, #56	@ 0x38
 8004a2e:	2020      	movs	r0, #32
 8004a30:	f7fe fba2 	bl	8003178 <ssd1306_SetCursor>
				  						ssd1306_WriteString((char *)bufferscreen, Font_6x8, White);
 8004a34:	4a76      	ldr	r2, [pc, #472]	@ (8004c10 <statemachine+0x13b0>)
 8004a36:	2301      	movs	r3, #1
 8004a38:	ca06      	ldmia	r2, {r1, r2}
 8004a3a:	4874      	ldr	r0, [pc, #464]	@ (8004c0c <statemachine+0x13ac>)
 8004a3c:	f7fe fb76 	bl	800312c <ssd1306_WriteString>
				  						HAL_Delay(200);
 8004a40:	20c8      	movs	r0, #200	@ 0xc8
 8004a42:	f001 fe05 	bl	8006650 <HAL_Delay>

				  if(BTN_B>=1){
 8004a46:	4b79      	ldr	r3, [pc, #484]	@ (8004c2c <statemachine+0x13cc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	dd08      	ble.n	8004a60 <statemachine+0x1200>
				  					posstate++;
 8004a4e:	4b78      	ldr	r3, [pc, #480]	@ (8004c30 <statemachine+0x13d0>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	3301      	adds	r3, #1
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	4b76      	ldr	r3, [pc, #472]	@ (8004c30 <statemachine+0x13d0>)
 8004a58:	701a      	strb	r2, [r3, #0]
				  					BTN_B=0;
 8004a5a:	4b74      	ldr	r3, [pc, #464]	@ (8004c2c <statemachine+0x13cc>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
				  				  }
				  if(BTN_B_LONG>=1){
 8004a60:	4b74      	ldr	r3, [pc, #464]	@ (8004c34 <statemachine+0x13d4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f340 80cb 	ble.w	8004c00 <statemachine+0x13a0>
					  posstate--;
 8004a6a:	4b71      	ldr	r3, [pc, #452]	@ (8004c30 <statemachine+0x13d0>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	4b6f      	ldr	r3, [pc, #444]	@ (8004c30 <statemachine+0x13d0>)
 8004a74:	701a      	strb	r2, [r3, #0]
					BTN_B_LONG=0;
 8004a76:	4b6f      	ldr	r3, [pc, #444]	@ (8004c34 <statemachine+0x13d4>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
				}
				  break;
 8004a7c:	e0c0      	b.n	8004c00 <statemachine+0x13a0>
			  case STATE_HEURE:
			  			  ssd1306_Fill(Black);
 8004a7e:	2000      	movs	r0, #0
 8004a80:	f7fe fa38 	bl	8002ef4 <ssd1306_Fill>
			  			  nmea_parse(&myData, DataBuffer);
 8004a84:	496c      	ldr	r1, [pc, #432]	@ (8004c38 <statemachine+0x13d8>)
 8004a86:	486d      	ldr	r0, [pc, #436]	@ (8004c3c <statemachine+0x13dc>)
 8004a88:	f7fd fca8 	bl	80023dc <nmea_parse>
			  			  if(settimeen==0){
 8004a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8004c40 <statemachine+0x13e0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d141      	bne.n	8004b18 <statemachine+0x12b8>

			  							settimeen=1;
 8004a94:	4b6a      	ldr	r3, [pc, #424]	@ (8004c40 <statemachine+0x13e0>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
			  							HR=(myData.lastMeasure[0]&0x0f)*10+(myData.lastMeasure[1]&0x0f);
 8004a9a:	4b68      	ldr	r3, [pc, #416]	@ (8004c3c <statemachine+0x13dc>)
 8004a9c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	0092      	lsls	r2, r2, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	4b62      	ldr	r3, [pc, #392]	@ (8004c3c <statemachine+0x13dc>)
 8004ab2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	4b60      	ldr	r3, [pc, #384]	@ (8004c44 <statemachine+0x13e4>)
 8004ac2:	701a      	strb	r2, [r3, #0]
			  							MINUTE=(myData.lastMeasure[2]&0x0f)*10+(myData.lastMeasure[3]&0x0f);
 8004ac4:	4b5d      	ldr	r3, [pc, #372]	@ (8004c3c <statemachine+0x13dc>)
 8004ac6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	0092      	lsls	r2, r2, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4b58      	ldr	r3, [pc, #352]	@ (8004c3c <statemachine+0x13dc>)
 8004adc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4b57      	ldr	r3, [pc, #348]	@ (8004c48 <statemachine+0x13e8>)
 8004aec:	701a      	strb	r2, [r3, #0]
			  							SEC=(myData.lastMeasure[4]&0x0f)*10+(myData.lastMeasure[5]&0x0f);
 8004aee:	4b53      	ldr	r3, [pc, #332]	@ (8004c3c <statemachine+0x13dc>)
 8004af0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004af4:	f003 030f 	and.w	r3, r3, #15
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	0092      	lsls	r2, r2, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	4b4d      	ldr	r3, [pc, #308]	@ (8004c3c <statemachine+0x13dc>)
 8004b06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	4413      	add	r3, r2
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	4b4d      	ldr	r3, [pc, #308]	@ (8004c4c <statemachine+0x13ec>)
 8004b16:	701a      	strb	r2, [r3, #0]


			  					  }


			  				  ssd1306_SetCursor(32, 32);
 8004b18:	2120      	movs	r1, #32
 8004b1a:	2020      	movs	r0, #32
 8004b1c:	f7fe fb2c 	bl	8003178 <ssd1306_SetCursor>
			  				  ssd1306_WriteString("hr GMT:", Font_6x8, White);
 8004b20:	4a3b      	ldr	r2, [pc, #236]	@ (8004c10 <statemachine+0x13b0>)
 8004b22:	2301      	movs	r3, #1
 8004b24:	ca06      	ldmia	r2, {r1, r2}
 8004b26:	484a      	ldr	r0, [pc, #296]	@ (8004c50 <statemachine+0x13f0>)
 8004b28:	f7fe fb00 	bl	800312c <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 42);
 8004b2c:	212a      	movs	r1, #42	@ 0x2a
 8004b2e:	2020      	movs	r0, #32
 8004b30:	f7fe fb22 	bl	8003178 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d:%02d",HR,MINUTE);
 8004b34:	4b43      	ldr	r3, [pc, #268]	@ (8004c44 <statemachine+0x13e4>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	4b43      	ldr	r3, [pc, #268]	@ (8004c48 <statemachine+0x13e8>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	4a44      	ldr	r2, [pc, #272]	@ (8004c54 <statemachine+0x13f4>)
 8004b44:	210f      	movs	r1, #15
 8004b46:	4831      	ldr	r0, [pc, #196]	@ (8004c0c <statemachine+0x13ac>)
 8004b48:	f012 faec 	bl	8017124 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004b4c:	4a42      	ldr	r2, [pc, #264]	@ (8004c58 <statemachine+0x13f8>)
 8004b4e:	2301      	movs	r3, #1
 8004b50:	ca06      	ldmia	r2, {r1, r2}
 8004b52:	482e      	ldr	r0, [pc, #184]	@ (8004c0c <statemachine+0x13ac>)
 8004b54:	f7fe faea 	bl	800312c <ssd1306_WriteString>
			  				ssd1306_SetCursor(32, 52);
 8004b58:	2134      	movs	r1, #52	@ 0x34
 8004b5a:	2020      	movs	r0, #32
 8004b5c:	f7fe fb0c 	bl	8003178 <ssd1306_SetCursor>
			  				snprintf((char *)bufferscreen,15, "%02d sec",SEC);
 8004b60:	4b3a      	ldr	r3, [pc, #232]	@ (8004c4c <statemachine+0x13ec>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	4a3d      	ldr	r2, [pc, #244]	@ (8004c5c <statemachine+0x13fc>)
 8004b66:	210f      	movs	r1, #15
 8004b68:	4828      	ldr	r0, [pc, #160]	@ (8004c0c <statemachine+0x13ac>)
 8004b6a:	f012 fadb 	bl	8017124 <sniprintf>
			  				ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004b6e:	4a3a      	ldr	r2, [pc, #232]	@ (8004c58 <statemachine+0x13f8>)
 8004b70:	2301      	movs	r3, #1
 8004b72:	ca06      	ldmia	r2, {r1, r2}
 8004b74:	4825      	ldr	r0, [pc, #148]	@ (8004c0c <statemachine+0x13ac>)
 8004b76:	f7fe fad9 	bl	800312c <ssd1306_WriteString>
			  				if(BTN_B>=1){
 8004b7a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c2c <statemachine+0x13cc>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	dd26      	ble.n	8004bd0 <statemachine+0x1370>
			  					posstate--;
 8004b82:	4b2b      	ldr	r3, [pc, #172]	@ (8004c30 <statemachine+0x13d0>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4b29      	ldr	r3, [pc, #164]	@ (8004c30 <statemachine+0x13d0>)
 8004b8c:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8004b8e:	4b28      	ldr	r3, [pc, #160]	@ (8004c30 <statemachine+0x13d0>)
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	4b26      	ldr	r3, [pc, #152]	@ (8004c30 <statemachine+0x13d0>)
 8004b98:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8004b9a:	4b25      	ldr	r3, [pc, #148]	@ (8004c30 <statemachine+0x13d0>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	4b23      	ldr	r3, [pc, #140]	@ (8004c30 <statemachine+0x13d0>)
 8004ba4:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8004ba6:	4b22      	ldr	r3, [pc, #136]	@ (8004c30 <statemachine+0x13d0>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4b20      	ldr	r3, [pc, #128]	@ (8004c30 <statemachine+0x13d0>)
 8004bb0:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004c30 <statemachine+0x13d0>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4b1d      	ldr	r3, [pc, #116]	@ (8004c30 <statemachine+0x13d0>)
 8004bbc:	701a      	strb	r2, [r3, #0]
			  					posstate--;
 8004bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004c30 <statemachine+0x13d0>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c30 <statemachine+0x13d0>)
 8004bc8:	701a      	strb	r2, [r3, #0]
			  					BTN_B=0;
 8004bca:	4b18      	ldr	r3, [pc, #96]	@ (8004c2c <statemachine+0x13cc>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
			  				}
			  				if(BTN_B_LONG>=1){
 8004bd0:	4b18      	ldr	r3, [pc, #96]	@ (8004c34 <statemachine+0x13d4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	dd43      	ble.n	8004c60 <statemachine+0x1400>
			  							  					posstate--;
 8004bd8:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <statemachine+0x13d0>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	4b13      	ldr	r3, [pc, #76]	@ (8004c30 <statemachine+0x13d0>)
 8004be2:	701a      	strb	r2, [r3, #0]
			  							  					BTN_B_LONG=0;
 8004be4:	4b13      	ldr	r3, [pc, #76]	@ (8004c34 <statemachine+0x13d4>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	601a      	str	r2, [r3, #0]
			  							  				}
			  			break;
 8004bea:	e039      	b.n	8004c60 <statemachine+0x1400>
				  break;
 8004bec:	bf00      	nop
 8004bee:	e038      	b.n	8004c62 <statemachine+0x1402>
				  break;
 8004bf0:	bf00      	nop
 8004bf2:	e036      	b.n	8004c62 <statemachine+0x1402>
				  break;
 8004bf4:	bf00      	nop
 8004bf6:	e034      	b.n	8004c62 <statemachine+0x1402>
				  break;
 8004bf8:	bf00      	nop
 8004bfa:	e032      	b.n	8004c62 <statemachine+0x1402>
				  break;
 8004bfc:	bf00      	nop
 8004bfe:	e030      	b.n	8004c62 <statemachine+0x1402>
				  break;
 8004c00:	bf00      	nop
 8004c02:	e02e      	b.n	8004c62 <statemachine+0x1402>
 8004c04:	20000bfc 	.word	0x20000bfc
 8004c08:	0801bd68 	.word	0x0801bd68
 8004c0c:	200009d8 	.word	0x200009d8
 8004c10:	20000014 	.word	0x20000014
 8004c14:	200003f8 	.word	0x200003f8
 8004c18:	0801bd74 	.word	0x0801bd74
 8004c1c:	0801bd80 	.word	0x0801bd80
 8004c20:	200003f0 	.word	0x200003f0
 8004c24:	408f4000 	.word	0x408f4000
 8004c28:	0801bd8c 	.word	0x0801bd8c
 8004c2c:	2000077c 	.word	0x2000077c
 8004c30:	200004ea 	.word	0x200004ea
 8004c34:	20000aac 	.word	0x20000aac
 8004c38:	20000534 	.word	0x20000534
 8004c3c:	20000738 	.word	0x20000738
 8004c40:	20000a98 	.word	0x20000a98
 8004c44:	20000a95 	.word	0x20000a95
 8004c48:	20000a96 	.word	0x20000a96
 8004c4c:	20000a94 	.word	0x20000a94
 8004c50:	0801bd98 	.word	0x0801bd98
 8004c54:	0801bda0 	.word	0x0801bda0
 8004c58:	2000001c 	.word	0x2000001c
 8004c5c:	0801bdac 	.word	0x0801bdac
			  			break;
 8004c60:	bf00      	nop
			  }

					if(BTN_A>=1){
 8004c62:	4b96      	ldr	r3, [pc, #600]	@ (8004ebc <statemachine+0x165c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	dd0b      	ble.n	8004c82 <statemachine+0x1422>
							state++;
 8004c6a:	4b95      	ldr	r3, [pc, #596]	@ (8004ec0 <statemachine+0x1660>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4b93      	ldr	r3, [pc, #588]	@ (8004ec0 <statemachine+0x1660>)
 8004c74:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8004c76:	4b91      	ldr	r3, [pc, #580]	@ (8004ebc <statemachine+0x165c>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8004c7c:	4b91      	ldr	r3, [pc, #580]	@ (8004ec4 <statemachine+0x1664>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]


						}
					if(BTN_A_LONG>=1){
 8004c82:	4b91      	ldr	r3, [pc, #580]	@ (8004ec8 <statemachine+0x1668>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f340 8460 	ble.w	800554c <statemachine+0x1cec>
									 									 									  			 	state--;
 8004c8c:	4b8c      	ldr	r3, [pc, #560]	@ (8004ec0 <statemachine+0x1660>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b2da      	uxtb	r2, r3
 8004c94:	4b8a      	ldr	r3, [pc, #552]	@ (8004ec0 <statemachine+0x1660>)
 8004c96:	701a      	strb	r2, [r3, #0]
									 									 									  			 	BTN_A=0;
 8004c98:	4b88      	ldr	r3, [pc, #544]	@ (8004ebc <statemachine+0x165c>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_B=0;
 8004c9e:	4b89      	ldr	r3, [pc, #548]	@ (8004ec4 <statemachine+0x1664>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
									 									 									  			 	BTN_A_LONG=0;
 8004ca4:	4b88      	ldr	r3, [pc, #544]	@ (8004ec8 <statemachine+0x1668>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
									 									 									  	}
			  break;
 8004caa:	f000 bc4f 	b.w	800554c <statemachine+0x1cec>
		  case STATE_CHRONOMETER:

			  ssd1306_Fill(Black);
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f7fe f920 	bl	8002ef4 <ssd1306_Fill>
			  ssd1306_SetCursor(32, 32);
 8004cb4:	2120      	movs	r1, #32
 8004cb6:	2020      	movs	r0, #32
 8004cb8:	f7fe fa5e 	bl	8003178 <ssd1306_SetCursor>
			  ssd1306_WriteString("chrono", Font_6x8, White);
 8004cbc:	4a83      	ldr	r2, [pc, #524]	@ (8004ecc <statemachine+0x166c>)
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	ca06      	ldmia	r2, {r1, r2}
 8004cc2:	4883      	ldr	r0, [pc, #524]	@ (8004ed0 <statemachine+0x1670>)
 8004cc4:	f7fe fa32 	bl	800312c <ssd1306_WriteString>
			  ssd1306_SetCursor(32,40);
 8004cc8:	2128      	movs	r1, #40	@ 0x28
 8004cca:	2020      	movs	r0, #32
 8004ccc:	f7fe fa54 	bl	8003178 <ssd1306_SetCursor>

			  switch(chronostate){
 8004cd0:	4b80      	ldr	r3, [pc, #512]	@ (8004ed4 <statemachine+0x1674>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d03b      	beq.n	8004d50 <statemachine+0x14f0>
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	dc6a      	bgt.n	8004db2 <statemachine+0x1552>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d002      	beq.n	8004ce6 <statemachine+0x1486>
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d01d      	beq.n	8004d20 <statemachine+0x14c0>
 8004ce4:	e065      	b.n	8004db2 <statemachine+0x1552>
			  case STATE_RESET:
				  min=0;
 8004ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ed8 <statemachine+0x1678>)
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
				  seconde=0;
 8004cee:	4b7b      	ldr	r3, [pc, #492]	@ (8004edc <statemachine+0x167c>)
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
				  calctime=0;
 8004cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8004ee0 <statemachine+0x1680>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

				  	 if(BTN_B>=1){
 8004cfc:	4b71      	ldr	r3, [pc, #452]	@ (8004ec4 <statemachine+0x1664>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	dd51      	ble.n	8004da8 <statemachine+0x1548>
				  		chronostate++;
 8004d04:	4b73      	ldr	r3, [pc, #460]	@ (8004ed4 <statemachine+0x1674>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b71      	ldr	r3, [pc, #452]	@ (8004ed4 <statemachine+0x1674>)
 8004d0e:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004d10:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec4 <statemachine+0x1664>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]
				  		starttime=uwTick;
 8004d16:	4b73      	ldr	r3, [pc, #460]	@ (8004ee4 <statemachine+0x1684>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a73      	ldr	r2, [pc, #460]	@ (8004ee8 <statemachine+0x1688>)
 8004d1c:	6013      	str	r3, [r2, #0]

				  }


				  break;
 8004d1e:	e043      	b.n	8004da8 <statemachine+0x1548>
			  case STATE_RUN:
				  calctime=uwTick-starttime+timehandler;
 8004d20:	4b70      	ldr	r3, [pc, #448]	@ (8004ee4 <statemachine+0x1684>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	4b70      	ldr	r3, [pc, #448]	@ (8004ee8 <statemachine+0x1688>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	1ad2      	subs	r2, r2, r3
 8004d2a:	4b70      	ldr	r3, [pc, #448]	@ (8004eec <statemachine+0x168c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4413      	add	r3, r2
 8004d30:	4a6b      	ldr	r2, [pc, #428]	@ (8004ee0 <statemachine+0x1680>)
 8004d32:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8004d34:	4b63      	ldr	r3, [pc, #396]	@ (8004ec4 <statemachine+0x1664>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	dd37      	ble.n	8004dac <statemachine+0x154c>
				  		chronostate++;
 8004d3c:	4b65      	ldr	r3, [pc, #404]	@ (8004ed4 <statemachine+0x1674>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	3301      	adds	r3, #1
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	4b63      	ldr	r3, [pc, #396]	@ (8004ed4 <statemachine+0x1674>)
 8004d46:	701a      	strb	r2, [r3, #0]
				  		BTN_B=0;
 8004d48:	4b5e      	ldr	r3, [pc, #376]	@ (8004ec4 <statemachine+0x1664>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
			  }


				  break;
 8004d4e:	e02d      	b.n	8004dac <statemachine+0x154c>
			  case STATE_PAUSE:
				  timehandler=calctime;
 8004d50:	4b63      	ldr	r3, [pc, #396]	@ (8004ee0 <statemachine+0x1680>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a65      	ldr	r2, [pc, #404]	@ (8004eec <statemachine+0x168c>)
 8004d56:	6013      	str	r3, [r2, #0]

				  if(BTN_B>=1){
 8004d58:	4b5a      	ldr	r3, [pc, #360]	@ (8004ec4 <statemachine+0x1664>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	dd0c      	ble.n	8004d7a <statemachine+0x151a>
				  			chronostate--;
 8004d60:	4b5c      	ldr	r3, [pc, #368]	@ (8004ed4 <statemachine+0x1674>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	4b5a      	ldr	r3, [pc, #360]	@ (8004ed4 <statemachine+0x1674>)
 8004d6a:	701a      	strb	r2, [r3, #0]
				  			BTN_B=0;
 8004d6c:	4b55      	ldr	r3, [pc, #340]	@ (8004ec4 <statemachine+0x1664>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
				  			starttime=uwTick;
 8004d72:	4b5c      	ldr	r3, [pc, #368]	@ (8004ee4 <statemachine+0x1684>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a5c      	ldr	r2, [pc, #368]	@ (8004ee8 <statemachine+0x1688>)
 8004d78:	6013      	str	r3, [r2, #0]

			 }
				  if(BTN_B_LONG>=1){
 8004d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ef0 <statemachine+0x1690>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	dd16      	ble.n	8004db0 <statemachine+0x1550>
				  				  	chronostate--;
 8004d82:	4b54      	ldr	r3, [pc, #336]	@ (8004ed4 <statemachine+0x1674>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	4b52      	ldr	r3, [pc, #328]	@ (8004ed4 <statemachine+0x1674>)
 8004d8c:	701a      	strb	r2, [r3, #0]
				  				  	chronostate--;
 8004d8e:	4b51      	ldr	r3, [pc, #324]	@ (8004ed4 <statemachine+0x1674>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b2da      	uxtb	r2, r3
 8004d96:	4b4f      	ldr	r3, [pc, #316]	@ (8004ed4 <statemachine+0x1674>)
 8004d98:	701a      	strb	r2, [r3, #0]
				  				  	BTN_B_LONG=0;
 8004d9a:	4b55      	ldr	r3, [pc, #340]	@ (8004ef0 <statemachine+0x1690>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
				  				  	timehandler=0;
 8004da0:	4b52      	ldr	r3, [pc, #328]	@ (8004eec <statemachine+0x168c>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
				  			 }


				  break;
 8004da6:	e003      	b.n	8004db0 <statemachine+0x1550>
				  break;
 8004da8:	bf00      	nop
 8004daa:	e002      	b.n	8004db2 <statemachine+0x1552>
				  break;
 8004dac:	bf00      	nop
 8004dae:	e000      	b.n	8004db2 <statemachine+0x1552>
				  break;
 8004db0:	bf00      	nop
			  }

			  min=floor((float) calctime/60000);
 8004db2:	4b4b      	ldr	r3, [pc, #300]	@ (8004ee0 <statemachine+0x1680>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8004ef4 <statemachine+0x1694>
 8004dc2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dc6:	ee16 0a90 	vmov	r0, s13
 8004dca:	f7fb fb95 	bl	80004f8 <__aeabi_f2d>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	ec43 2b10 	vmov	d0, r2, r3
 8004dd6:	f015 f8d7 	bl	8019f88 <floor>
 8004dda:	ec53 2b10 	vmov	r2, r3, d0
 8004dde:	4610      	mov	r0, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	f7fb fed9 	bl	8000b98 <__aeabi_d2f>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed8 <statemachine+0x1678>)
 8004dea:	6013      	str	r3, [r2, #0]
			  seconde=(float) ((calctime-(min*60000))/1000);
 8004dec:	4b3c      	ldr	r3, [pc, #240]	@ (8004ee0 <statemachine+0x1680>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	ee07 3a90 	vmov	s15, r3
 8004df4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004df8:	4b37      	ldr	r3, [pc, #220]	@ (8004ed8 <statemachine+0x1678>)
 8004dfa:	edd3 7a00 	vldr	s15, [r3]
 8004dfe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ef4 <statemachine+0x1694>
 8004e02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004e06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e0a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8004ef8 <statemachine+0x1698>
 8004e0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e12:	4b32      	ldr	r3, [pc, #200]	@ (8004edc <statemachine+0x167c>)
 8004e14:	edc3 7a00 	vstr	s15, [r3]
			  snprintf((char *)bufferscreen,15, "%0.0fmin",min);
 8004e18:	4b2f      	ldr	r3, [pc, #188]	@ (8004ed8 <statemachine+0x1678>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fb fb6b 	bl	80004f8 <__aeabi_f2d>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	e9cd 2300 	strd	r2, r3, [sp]
 8004e2a:	4a34      	ldr	r2, [pc, #208]	@ (8004efc <statemachine+0x169c>)
 8004e2c:	210f      	movs	r1, #15
 8004e2e:	4834      	ldr	r0, [pc, #208]	@ (8004f00 <statemachine+0x16a0>)
 8004e30:	f012 f978 	bl	8017124 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004e34:	4a33      	ldr	r2, [pc, #204]	@ (8004f04 <statemachine+0x16a4>)
 8004e36:	2301      	movs	r3, #1
 8004e38:	ca06      	ldmia	r2, {r1, r2}
 8004e3a:	4831      	ldr	r0, [pc, #196]	@ (8004f00 <statemachine+0x16a0>)
 8004e3c:	f7fe f976 	bl	800312c <ssd1306_WriteString>
			  ssd1306_SetCursor(32, 50);
 8004e40:	2132      	movs	r1, #50	@ 0x32
 8004e42:	2020      	movs	r0, #32
 8004e44:	f7fe f998 	bl	8003178 <ssd1306_SetCursor>
			  snprintf((char *)bufferscreen,15, "%0.3fs",seconde);
 8004e48:	4b24      	ldr	r3, [pc, #144]	@ (8004edc <statemachine+0x167c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fb fb53 	bl	80004f8 <__aeabi_f2d>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	e9cd 2300 	strd	r2, r3, [sp]
 8004e5a:	4a2b      	ldr	r2, [pc, #172]	@ (8004f08 <statemachine+0x16a8>)
 8004e5c:	210f      	movs	r1, #15
 8004e5e:	4828      	ldr	r0, [pc, #160]	@ (8004f00 <statemachine+0x16a0>)
 8004e60:	f012 f960 	bl	8017124 <sniprintf>
			  ssd1306_WriteString((char *)bufferscreen, Font_7x10, White);
 8004e64:	4a27      	ldr	r2, [pc, #156]	@ (8004f04 <statemachine+0x16a4>)
 8004e66:	2301      	movs	r3, #1
 8004e68:	ca06      	ldmia	r2, {r1, r2}
 8004e6a:	4825      	ldr	r0, [pc, #148]	@ (8004f00 <statemachine+0x16a0>)
 8004e6c:	f7fe f95e 	bl	800312c <ssd1306_WriteString>


			  if(BTN_A>=1){
 8004e70:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <statemachine+0x165c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	dd0b      	ble.n	8004e90 <statemachine+0x1630>
			 	state++;
 8004e78:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <statemachine+0x1660>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec0 <statemachine+0x1660>)
 8004e82:	701a      	strb	r2, [r3, #0]
			 	BTN_A=0;
 8004e84:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <statemachine+0x165c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]
			 	BTN_B=0;
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec4 <statemachine+0x1664>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]


	}
			  if(BTN_A_LONG>=1){
 8004e90:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <statemachine+0x1668>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f340 835b 	ble.w	8005550 <statemachine+0x1cf0>
			  				 									 									  			 	state--;
 8004e9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <statemachine+0x1660>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <statemachine+0x1660>)
 8004ea4:	701a      	strb	r2, [r3, #0]
			  				 									 									  			 	BTN_A=0;
 8004ea6:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <statemachine+0x165c>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_B=0;
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <statemachine+0x1664>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	601a      	str	r2, [r3, #0]
			  				 									 									  			 	BTN_A_LONG=0;
 8004eb2:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <statemachine+0x1668>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
			  				 									 									  	}
			  break;
 8004eb8:	e34a      	b.n	8005550 <statemachine+0x1cf0>
 8004eba:	bf00      	nop
 8004ebc:	20000778 	.word	0x20000778
 8004ec0:	200004e8 	.word	0x200004e8
 8004ec4:	2000077c 	.word	0x2000077c
 8004ec8:	20000ab0 	.word	0x20000ab0
 8004ecc:	20000014 	.word	0x20000014
 8004ed0:	0801bdb8 	.word	0x0801bdb8
 8004ed4:	200004eb 	.word	0x200004eb
 8004ed8:	20000a54 	.word	0x20000a54
 8004edc:	20000a50 	.word	0x20000a50
 8004ee0:	20000a5c 	.word	0x20000a5c
 8004ee4:	200012dc 	.word	0x200012dc
 8004ee8:	20000a58 	.word	0x20000a58
 8004eec:	20000a60 	.word	0x20000a60
 8004ef0:	20000aac 	.word	0x20000aac
 8004ef4:	476a6000 	.word	0x476a6000
 8004ef8:	447a0000 	.word	0x447a0000
 8004efc:	0801bdc0 	.word	0x0801bdc0
 8004f00:	200009d8 	.word	0x200009d8
 8004f04:	2000001c 	.word	0x2000001c
 8004f08:	0801bdcc 	.word	0x0801bdcc




			  case STATE_USB:
				  ssd1306_Fill(Black);
 8004f0c:	2000      	movs	r0, #0
 8004f0e:	f7fd fff1 	bl	8002ef4 <ssd1306_Fill>
				  ssd1306_SetCursor(32,32);
 8004f12:	2120      	movs	r1, #32
 8004f14:	2020      	movs	r0, #32
 8004f16:	f7fe f92f 	bl	8003178 <ssd1306_SetCursor>
				  ssd1306_WriteString("usb",Font_6x8,White);
 8004f1a:	4aa8      	ldr	r2, [pc, #672]	@ (80051bc <statemachine+0x195c>)
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	ca06      	ldmia	r2, {r1, r2}
 8004f20:	48a7      	ldr	r0, [pc, #668]	@ (80051c0 <statemachine+0x1960>)
 8004f22:	f7fe f903 	bl	800312c <ssd1306_WriteString>
				  switch(usbstate){
 8004f26:	4ba7      	ldr	r3, [pc, #668]	@ (80051c4 <statemachine+0x1964>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b02      	cmp	r3, #2
 8004f2c:	f000 812b 	beq.w	8005186 <statemachine+0x1926>
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	f300 830f 	bgt.w	8005554 <statemachine+0x1cf4>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <statemachine+0x16e0>
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d042      	beq.n	8004fc4 <statemachine+0x1764>
				 									 									  			 	BTN_B=0;
				 									 									  			 	BTN_A_LONG=0;
				 									 									  	}
				 					 break;
				 				  }
				  break;
 8004f3e:	e309      	b.n	8005554 <statemachine+0x1cf4>
				 					  ssd1306_SetCursor(32,40);
 8004f40:	2128      	movs	r1, #40	@ 0x28
 8004f42:	2020      	movs	r0, #32
 8004f44:	f7fe f918 	bl	8003178 <ssd1306_SetCursor>
				 					  ssd1306_WriteString("do nothing",Font_6x8,White);
 8004f48:	4a9c      	ldr	r2, [pc, #624]	@ (80051bc <statemachine+0x195c>)
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	ca06      	ldmia	r2, {r1, r2}
 8004f4e:	489e      	ldr	r0, [pc, #632]	@ (80051c8 <statemachine+0x1968>)
 8004f50:	f7fe f8ec 	bl	800312c <ssd1306_WriteString>
				 					  usbtransmiten=0;
 8004f54:	4b9d      	ldr	r3, [pc, #628]	@ (80051cc <statemachine+0x196c>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
				 					  if(BTN_B>=1){
 8004f5a:	4b9d      	ldr	r3, [pc, #628]	@ (80051d0 <statemachine+0x1970>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	dd0b      	ble.n	8004f7a <statemachine+0x171a>
				 						  usbstate++;
 8004f62:	4b98      	ldr	r3, [pc, #608]	@ (80051c4 <statemachine+0x1964>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	3301      	adds	r3, #1
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	4b96      	ldr	r3, [pc, #600]	@ (80051c4 <statemachine+0x1964>)
 8004f6c:	701a      	strb	r2, [r3, #0]
				 						  BTN_B=0;
 8004f6e:	4b98      	ldr	r3, [pc, #608]	@ (80051d0 <statemachine+0x1970>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
				 						  BTN_A=0;
 8004f74:	4b97      	ldr	r3, [pc, #604]	@ (80051d4 <statemachine+0x1974>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8004f7a:	4b96      	ldr	r3, [pc, #600]	@ (80051d4 <statemachine+0x1974>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	dd0b      	ble.n	8004f9a <statemachine+0x173a>
				 						 state++;
 8004f82:	4b95      	ldr	r3, [pc, #596]	@ (80051d8 <statemachine+0x1978>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	3301      	adds	r3, #1
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	4b93      	ldr	r3, [pc, #588]	@ (80051d8 <statemachine+0x1978>)
 8004f8c:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8004f8e:	4b91      	ldr	r3, [pc, #580]	@ (80051d4 <statemachine+0x1974>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 8004f94:	4b8e      	ldr	r3, [pc, #568]	@ (80051d0 <statemachine+0x1970>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8004f9a:	4b90      	ldr	r3, [pc, #576]	@ (80051dc <statemachine+0x197c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f340 8202 	ble.w	80053a8 <statemachine+0x1b48>
				 									 									 									  			 	state--;
 8004fa4:	4b8c      	ldr	r3, [pc, #560]	@ (80051d8 <statemachine+0x1978>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	4b8a      	ldr	r3, [pc, #552]	@ (80051d8 <statemachine+0x1978>)
 8004fae:	701a      	strb	r2, [r3, #0]
				 									 									 									  			 	BTN_A=0;
 8004fb0:	4b88      	ldr	r3, [pc, #544]	@ (80051d4 <statemachine+0x1974>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_B=0;
 8004fb6:	4b86      	ldr	r3, [pc, #536]	@ (80051d0 <statemachine+0x1970>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
				 									 									 									  			 	BTN_A_LONG=0;
 8004fbc:	4b87      	ldr	r3, [pc, #540]	@ (80051dc <statemachine+0x197c>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	601a      	str	r2, [r3, #0]
				 					  break;
 8004fc2:	e1f1      	b.n	80053a8 <statemachine+0x1b48>
				 					 ssd1306_SetCursor(32,40);
 8004fc4:	2128      	movs	r1, #40	@ 0x28
 8004fc6:	2020      	movs	r0, #32
 8004fc8:	f7fe f8d6 	bl	8003178 <ssd1306_SetCursor>
				 					ssd1306_WriteString("Push A",Font_6x8,White);
 8004fcc:	4a7b      	ldr	r2, [pc, #492]	@ (80051bc <statemachine+0x195c>)
 8004fce:	2301      	movs	r3, #1
 8004fd0:	ca06      	ldmia	r2, {r1, r2}
 8004fd2:	4883      	ldr	r0, [pc, #524]	@ (80051e0 <statemachine+0x1980>)
 8004fd4:	f7fe f8aa 	bl	800312c <ssd1306_WriteString>
				 					ssd1306_SetCursor(32,48);
 8004fd8:	2130      	movs	r1, #48	@ 0x30
 8004fda:	2020      	movs	r0, #32
 8004fdc:	f7fe f8cc 	bl	8003178 <ssd1306_SetCursor>
				 					ssd1306_WriteString("to erase",Font_6x8,White);
 8004fe0:	4a76      	ldr	r2, [pc, #472]	@ (80051bc <statemachine+0x195c>)
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	ca06      	ldmia	r2, {r1, r2}
 8004fe6:	487f      	ldr	r0, [pc, #508]	@ (80051e4 <statemachine+0x1984>)
 8004fe8:	f7fe f8a0 	bl	800312c <ssd1306_WriteString>
				 					if(erasedisplay==1){
 8004fec:	4b7e      	ldr	r3, [pc, #504]	@ (80051e8 <statemachine+0x1988>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d137      	bne.n	8005064 <statemachine+0x1804>
					 					 ssd1306_Fill(Black);
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f7fd ff7d 	bl	8002ef4 <ssd1306_Fill>
					 					 ssd1306_SetCursor(32,32);
 8004ffa:	2120      	movs	r1, #32
 8004ffc:	2020      	movs	r0, #32
 8004ffe:	f7fe f8bb 	bl	8003178 <ssd1306_SetCursor>
					 					ssd1306_WriteString("usb",Font_6x8,White);
 8005002:	4a6e      	ldr	r2, [pc, #440]	@ (80051bc <statemachine+0x195c>)
 8005004:	2301      	movs	r3, #1
 8005006:	ca06      	ldmia	r2, {r1, r2}
 8005008:	486d      	ldr	r0, [pc, #436]	@ (80051c0 <statemachine+0x1960>)
 800500a:	f7fe f88f 	bl	800312c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,42);
 800500e:	212a      	movs	r1, #42	@ 0x2a
 8005010:	2020      	movs	r0, #32
 8005012:	f7fe f8b1 	bl	8003178 <ssd1306_SetCursor>
					 					ssd1306_WriteString("FIN",Font_7x10,White);
 8005016:	4a75      	ldr	r2, [pc, #468]	@ (80051ec <statemachine+0x198c>)
 8005018:	2301      	movs	r3, #1
 800501a:	ca06      	ldmia	r2, {r1, r2}
 800501c:	4874      	ldr	r0, [pc, #464]	@ (80051f0 <statemachine+0x1990>)
 800501e:	f7fe f885 	bl	800312c <ssd1306_WriteString>
					 					ssd1306_SetCursor(32,56);
 8005022:	2138      	movs	r1, #56	@ 0x38
 8005024:	2020      	movs	r0, #32
 8005026:	f7fe f8a7 	bl	8003178 <ssd1306_SetCursor>
				 						snprintf((char  *)bufferscreen,50,"t=%0.2f",(float)erasetime/1000);
 800502a:	4b72      	ldr	r3, [pc, #456]	@ (80051f4 <statemachine+0x1994>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	ee07 3a90 	vmov	s15, r3
 8005032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005036:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80051f8 <statemachine+0x1998>
 800503a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800503e:	ee16 0a90 	vmov	r0, s13
 8005042:	f7fb fa59 	bl	80004f8 <__aeabi_f2d>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	e9cd 2300 	strd	r2, r3, [sp]
 800504e:	4a6b      	ldr	r2, [pc, #428]	@ (80051fc <statemachine+0x199c>)
 8005050:	2132      	movs	r1, #50	@ 0x32
 8005052:	486b      	ldr	r0, [pc, #428]	@ (8005200 <statemachine+0x19a0>)
 8005054:	f012 f866 	bl	8017124 <sniprintf>
				 						ssd1306_WriteString((char *)bufferscreen,Font_6x8,White);
 8005058:	4a58      	ldr	r2, [pc, #352]	@ (80051bc <statemachine+0x195c>)
 800505a:	2301      	movs	r3, #1
 800505c:	ca06      	ldmia	r2, {r1, r2}
 800505e:	4868      	ldr	r0, [pc, #416]	@ (8005200 <statemachine+0x19a0>)
 8005060:	f7fe f864 	bl	800312c <ssd1306_WriteString>
				 					if(BTN_A>=1){
 8005064:	4b5b      	ldr	r3, [pc, #364]	@ (80051d4 <statemachine+0x1974>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	dd7a      	ble.n	8005162 <statemachine+0x1902>
				 						erasetime=HAL_GetTick();
 800506c:	f001 fad8 	bl	8006620 <HAL_GetTick>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	4b5f      	ldr	r3, [pc, #380]	@ (80051f4 <statemachine+0x1994>)
 8005076:	601a      	str	r2, [r3, #0]
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e03f      	b.n	80050fe <statemachine+0x189e>
				 							ssd1306_Fill(Black);
 800507e:	2000      	movs	r0, #0
 8005080:	f7fd ff38 	bl	8002ef4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 8005084:	2120      	movs	r1, #32
 8005086:	2020      	movs	r0, #32
 8005088:	f7fe f876 	bl	8003178 <ssd1306_SetCursor>
				 							ssd1306_WriteString("usb",Font_6x8,White);
 800508c:	4a4b      	ldr	r2, [pc, #300]	@ (80051bc <statemachine+0x195c>)
 800508e:	2301      	movs	r3, #1
 8005090:	ca06      	ldmia	r2, {r1, r2}
 8005092:	484b      	ldr	r0, [pc, #300]	@ (80051c0 <statemachine+0x1960>)
 8005094:	f7fe f84a 	bl	800312c <ssd1306_WriteString>
				 							SPIF_EraseSector(&hspif1,i);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4619      	mov	r1, r3
 800509c:	4859      	ldr	r0, [pc, #356]	@ (8005204 <statemachine+0x19a4>)
 800509e:	f00f fb40 	bl	8014722 <SPIF_EraseSector>
				 							if(i>=1){
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	dd21      	ble.n	80050ec <statemachine+0x188c>
				 							percentage((float) (i*100)/((int)floor((pagenumber)/16)));
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2264      	movs	r2, #100	@ 0x64
 80050ac:	fb02 f303 	mul.w	r3, r2, r3
 80050b0:	ee07 3a90 	vmov	s15, r3
 80050b4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80050b8:	4b53      	ldr	r3, [pc, #332]	@ (8005208 <statemachine+0x19a8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da00      	bge.n	80050c2 <statemachine+0x1862>
 80050c0:	330f      	adds	r3, #15
 80050c2:	111b      	asrs	r3, r3, #4
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fb fa05 	bl	80004d4 <__aeabi_i2d>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4610      	mov	r0, r2
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7fb fd19 	bl	8000b08 <__aeabi_d2iz>
 80050d6:	ee07 0a90 	vmov	s15, r0
 80050da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050de:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80050e2:	eeb0 0a47 	vmov.f32	s0, s14
 80050e6:	f7fe fb5b 	bl	80037a0 <percentage>
 80050ea:	e003      	b.n	80050f4 <statemachine+0x1894>
				 								percentage((float) 0);
 80050ec:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 800520c <statemachine+0x19ac>
 80050f0:	f7fe fb56 	bl	80037a0 <percentage>
				 							ssd1306_UpdateScreen();
 80050f4:	f7fd ff16 	bl	8002f24 <ssd1306_UpdateScreen>
				 						for(int i=0;i<=(int)floor((pagenumber)/16);i++){
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	4b42      	ldr	r3, [pc, #264]	@ (8005208 <statemachine+0x19a8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	da00      	bge.n	8005108 <statemachine+0x18a8>
 8005106:	330f      	adds	r3, #15
 8005108:	111b      	asrs	r3, r3, #4
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb f9e2 	bl	80004d4 <__aeabi_i2d>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4610      	mov	r0, r2
 8005116:	4619      	mov	r1, r3
 8005118:	f7fb fcf6 	bl	8000b08 <__aeabi_d2iz>
 800511c:	4602      	mov	r2, r0
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	4293      	cmp	r3, r2
 8005122:	ddac      	ble.n	800507e <statemachine+0x181e>
				 						SPIF_EraseSector(&hspif1, (int)floor((MAX_WRITE_PAGE+1)/16));
 8005124:	f44f 61c8 	mov.w	r1, #1600	@ 0x640
 8005128:	4836      	ldr	r0, [pc, #216]	@ (8005204 <statemachine+0x19a4>)
 800512a:	f00f fafa 	bl	8014722 <SPIF_EraseSector>
				 						erasetime=HAL_GetTick()-erasetime;
 800512e:	f001 fa77 	bl	8006620 <HAL_GetTick>
 8005132:	4603      	mov	r3, r0
 8005134:	4a2f      	ldr	r2, [pc, #188]	@ (80051f4 <statemachine+0x1994>)
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	1a9b      	subs	r3, r3, r2
 800513a:	461a      	mov	r2, r3
 800513c:	4b2d      	ldr	r3, [pc, #180]	@ (80051f4 <statemachine+0x1994>)
 800513e:	601a      	str	r2, [r3, #0]
				 						erasedisplay=1;
 8005140:	4b29      	ldr	r3, [pc, #164]	@ (80051e8 <statemachine+0x1988>)
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]
				 						pageoffset=0;
 8005146:	4b32      	ldr	r3, [pc, #200]	@ (8005210 <statemachine+0x19b0>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]
				 						pagenumber=0;
 800514c:	4b2e      	ldr	r3, [pc, #184]	@ (8005208 <statemachine+0x19a8>)
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
				 						storeindex();
 8005152:	f7fd fcf3 	bl	8002b3c <storeindex>
				 						BTN_A=0;
 8005156:	4b1f      	ldr	r3, [pc, #124]	@ (80051d4 <statemachine+0x1974>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
				 						BTN_B=0;
 800515c:	4b1c      	ldr	r3, [pc, #112]	@ (80051d0 <statemachine+0x1970>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
				 					if(BTN_B>=1){
 8005162:	4b1b      	ldr	r3, [pc, #108]	@ (80051d0 <statemachine+0x1970>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f340 8120 	ble.w	80053ac <statemachine+0x1b4c>
					 						usbstate++;
 800516c:	4b15      	ldr	r3, [pc, #84]	@ (80051c4 <statemachine+0x1964>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	3301      	adds	r3, #1
 8005172:	b2da      	uxtb	r2, r3
 8005174:	4b13      	ldr	r3, [pc, #76]	@ (80051c4 <statemachine+0x1964>)
 8005176:	701a      	strb	r2, [r3, #0]
					 						  BTN_B=0;
 8005178:	4b15      	ldr	r3, [pc, #84]	@ (80051d0 <statemachine+0x1970>)
 800517a:	2200      	movs	r2, #0
 800517c:	601a      	str	r2, [r3, #0]
					 						  BTN_A=0;
 800517e:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <statemachine+0x1974>)
 8005180:	2200      	movs	r2, #0
 8005182:	601a      	str	r2, [r3, #0]
				 			  break;
 8005184:	e112      	b.n	80053ac <statemachine+0x1b4c>
				 					ssd1306_Fill(Black);
 8005186:	2000      	movs	r0, #0
 8005188:	f7fd feb4 	bl	8002ef4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,40);
 800518c:	2128      	movs	r1, #40	@ 0x28
 800518e:	2020      	movs	r0, #32
 8005190:	f7fd fff2 	bl	8003178 <ssd1306_SetCursor>
				 					ssd1306_WriteString("write",Font_6x8,White);
 8005194:	4a09      	ldr	r2, [pc, #36]	@ (80051bc <statemachine+0x195c>)
 8005196:	2301      	movs	r3, #1
 8005198:	ca06      	ldmia	r2, {r1, r2}
 800519a:	481e      	ldr	r0, [pc, #120]	@ (8005214 <statemachine+0x19b4>)
 800519c:	f7fd ffc6 	bl	800312c <ssd1306_WriteString>
				 					if(pagenumber>0){
 80051a0:	4b19      	ldr	r3, [pc, #100]	@ (8005208 <statemachine+0x19a8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f340 80ae 	ble.w	8005306 <statemachine+0x1aa6>
				 					int i=0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60bb      	str	r3, [r7, #8]
				 					if(usbtransmiten==0){
 80051ae:	4b07      	ldr	r3, [pc, #28]	@ (80051cc <statemachine+0x196c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f040 8095 	bne.w	80052e2 <statemachine+0x1a82>
				 						while(i<pagenumber){
 80051b8:	e065      	b.n	8005286 <statemachine+0x1a26>
 80051ba:	bf00      	nop
 80051bc:	20000014 	.word	0x20000014
 80051c0:	0801bdd4 	.word	0x0801bdd4
 80051c4:	200004ec 	.word	0x200004ec
 80051c8:	0801bdd8 	.word	0x0801bdd8
 80051cc:	20000a70 	.word	0x20000a70
 80051d0:	2000077c 	.word	0x2000077c
 80051d4:	20000778 	.word	0x20000778
 80051d8:	200004e8 	.word	0x200004e8
 80051dc:	20000ab0 	.word	0x20000ab0
 80051e0:	0801bde4 	.word	0x0801bde4
 80051e4:	0801bdec 	.word	0x0801bdec
 80051e8:	20000a6c 	.word	0x20000a6c
 80051ec:	2000001c 	.word	0x2000001c
 80051f0:	0801bdf8 	.word	0x0801bdf8
 80051f4:	20000a68 	.word	0x20000a68
 80051f8:	447a0000 	.word	0x447a0000
 80051fc:	0801bdfc 	.word	0x0801bdfc
 8005200:	200009d8 	.word	0x200009d8
 8005204:	20000780 	.word	0x20000780
 8005208:	200009b8 	.word	0x200009b8
 800520c:	00000000 	.word	0x00000000
 8005210:	200009b4 	.word	0x200009b4
 8005214:	0801be04 	.word	0x0801be04
				 							ssd1306_Fill(Black);
 8005218:	2000      	movs	r0, #0
 800521a:	f7fd fe6b 	bl	8002ef4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,32);
 800521e:	2120      	movs	r1, #32
 8005220:	2020      	movs	r0, #32
 8005222:	f7fd ffa9 	bl	8003178 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_6x8,White);
 8005226:	4a63      	ldr	r2, [pc, #396]	@ (80053b4 <statemachine+0x1b54>)
 8005228:	2301      	movs	r3, #1
 800522a:	ca06      	ldmia	r2, {r1, r2}
 800522c:	4862      	ldr	r0, [pc, #392]	@ (80053b8 <statemachine+0x1b58>)
 800522e:	f7fd ff7d 	bl	800312c <ssd1306_WriteString>
				 							SPIF_ReadPage(&hspif1,i, (uint8_t  *)flashread, 256, 0);
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	2300      	movs	r3, #0
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800523c:	4a5f      	ldr	r2, [pc, #380]	@ (80053bc <statemachine+0x1b5c>)
 800523e:	4860      	ldr	r0, [pc, #384]	@ (80053c0 <statemachine+0x1b60>)
 8005240:	f00f fb10 	bl	8014864 <SPIF_ReadPage>
				 							CDC_Transmit_FS((char  * )flashread,256);
 8005244:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005248:	485c      	ldr	r0, [pc, #368]	@ (80053bc <statemachine+0x1b5c>)
 800524a:	f00f fc0b 	bl	8014a64 <CDC_Transmit_FS>
				 							percentage((float) (i*100)/pagenumber);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2264      	movs	r2, #100	@ 0x64
 8005252:	fb02 f303 	mul.w	r3, r2, r3
 8005256:	ee07 3a90 	vmov	s15, r3
 800525a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800525e:	4b59      	ldr	r3, [pc, #356]	@ (80053c4 <statemachine+0x1b64>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	ee07 3a90 	vmov	s15, r3
 8005266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800526a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800526e:	eeb0 0a66 	vmov.f32	s0, s13
 8005272:	f7fe fa95 	bl	80037a0 <percentage>
				 							ssd1306_UpdateScreen();
 8005276:	f7fd fe55 	bl	8002f24 <ssd1306_UpdateScreen>
				 							HAL_Delay(125);
 800527a:	207d      	movs	r0, #125	@ 0x7d
 800527c:	f001 f9e8 	bl	8006650 <HAL_Delay>
				 							i++;
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	3301      	adds	r3, #1
 8005284:	60bb      	str	r3, [r7, #8]
				 						while(i<pagenumber){
 8005286:	4b4f      	ldr	r3, [pc, #316]	@ (80053c4 <statemachine+0x1b64>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68ba      	ldr	r2, [r7, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	dbc3      	blt.n	8005218 <statemachine+0x19b8>
				 						SPIF_ReadPage(&hspif1,pagenumber, (uint8_t   *)flashread, pageoffset, 0);
 8005290:	4b4c      	ldr	r3, [pc, #304]	@ (80053c4 <statemachine+0x1b64>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4619      	mov	r1, r3
 8005296:	4b4c      	ldr	r3, [pc, #304]	@ (80053c8 <statemachine+0x1b68>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	461a      	mov	r2, r3
 800529c:	2300      	movs	r3, #0
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	4a46      	ldr	r2, [pc, #280]	@ (80053bc <statemachine+0x1b5c>)
 80052a4:	4846      	ldr	r0, [pc, #280]	@ (80053c0 <statemachine+0x1b60>)
 80052a6:	f00f fadd 	bl	8014864 <SPIF_ReadPage>
				 						CDC_Transmit_FS((uint8_t   * )flashread,pageoffset);
 80052aa:	4b47      	ldr	r3, [pc, #284]	@ (80053c8 <statemachine+0x1b68>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	4619      	mov	r1, r3
 80052b2:	4842      	ldr	r0, [pc, #264]	@ (80053bc <statemachine+0x1b5c>)
 80052b4:	f00f fbd6 	bl	8014a64 <CDC_Transmit_FS>
				 						HAL_Delay(125);
 80052b8:	207d      	movs	r0, #125	@ 0x7d
 80052ba:	f001 f9c9 	bl	8006650 <HAL_Delay>
				 						int taillefin=0;
 80052be:	2300      	movs	r3, #0
 80052c0:	607b      	str	r3, [r7, #4]
										taillefin = snprintf((char  *)usbbuffer,64,"findetrame\n\r");
 80052c2:	4a42      	ldr	r2, [pc, #264]	@ (80053cc <statemachine+0x1b6c>)
 80052c4:	2140      	movs	r1, #64	@ 0x40
 80052c6:	4842      	ldr	r0, [pc, #264]	@ (80053d0 <statemachine+0x1b70>)
 80052c8:	f011 ff2c 	bl	8017124 <sniprintf>
 80052cc:	6078      	str	r0, [r7, #4]
				 						CDC_Transmit_FS((char  *)usbbuffer,taillefin);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	4619      	mov	r1, r3
 80052d4:	483e      	ldr	r0, [pc, #248]	@ (80053d0 <statemachine+0x1b70>)
 80052d6:	f00f fbc5 	bl	8014a64 <CDC_Transmit_FS>
				 						usbtransmiten=1;
 80052da:	4b3e      	ldr	r3, [pc, #248]	@ (80053d4 <statemachine+0x1b74>)
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	e003      	b.n	80052ea <statemachine+0x1a8a>
				 						usbpercent=1;
 80052e2:	4b3d      	ldr	r3, [pc, #244]	@ (80053d8 <statemachine+0x1b78>)
 80052e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80052e8:	601a      	str	r2, [r3, #0]
				 					ssd1306_Fill(Black);
 80052ea:	2000      	movs	r0, #0
 80052ec:	f7fd fe02 	bl	8002ef4 <ssd1306_Fill>
				 					ssd1306_SetCursor(32,48);
 80052f0:	2130      	movs	r1, #48	@ 0x30
 80052f2:	2020      	movs	r0, #32
 80052f4:	f7fd ff40 	bl	8003178 <ssd1306_SetCursor>
				 					ssd1306_WriteString("finish",Font_7x10,White);
 80052f8:	4a38      	ldr	r2, [pc, #224]	@ (80053dc <statemachine+0x1b7c>)
 80052fa:	2301      	movs	r3, #1
 80052fc:	ca06      	ldmia	r2, {r1, r2}
 80052fe:	4838      	ldr	r0, [pc, #224]	@ (80053e0 <statemachine+0x1b80>)
 8005300:	f7fd ff14 	bl	800312c <ssd1306_WriteString>
 8005304:	e016      	b.n	8005334 <statemachine+0x1ad4>
				 							ssd1306_Fill(Black);
 8005306:	2000      	movs	r0, #0
 8005308:	f7fd fdf4 	bl	8002ef4 <ssd1306_Fill>
				 							ssd1306_SetCursor(32,40);
 800530c:	2128      	movs	r1, #40	@ 0x28
 800530e:	2020      	movs	r0, #32
 8005310:	f7fd ff32 	bl	8003178 <ssd1306_SetCursor>
				 							ssd1306_WriteString("write",Font_7x10,White);
 8005314:	4a31      	ldr	r2, [pc, #196]	@ (80053dc <statemachine+0x1b7c>)
 8005316:	2301      	movs	r3, #1
 8005318:	ca06      	ldmia	r2, {r1, r2}
 800531a:	4827      	ldr	r0, [pc, #156]	@ (80053b8 <statemachine+0x1b58>)
 800531c:	f7fd ff06 	bl	800312c <ssd1306_WriteString>
				 							ssd1306_SetCursor(32,50);
 8005320:	2132      	movs	r1, #50	@ 0x32
 8005322:	2020      	movs	r0, #32
 8005324:	f7fd ff28 	bl	8003178 <ssd1306_SetCursor>
				 							ssd1306_WriteString("nothing",Font_7x10,White);
 8005328:	4a2c      	ldr	r2, [pc, #176]	@ (80053dc <statemachine+0x1b7c>)
 800532a:	2301      	movs	r3, #1
 800532c:	ca06      	ldmia	r2, {r1, r2}
 800532e:	482d      	ldr	r0, [pc, #180]	@ (80053e4 <statemachine+0x1b84>)
 8005330:	f7fd fefc 	bl	800312c <ssd1306_WriteString>
				 					if(BTN_B>=1){
 8005334:	4b2c      	ldr	r3, [pc, #176]	@ (80053e8 <statemachine+0x1b88>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	dd11      	ble.n	8005360 <statemachine+0x1b00>
				 									 						usbstate--;
 800533c:	4b2b      	ldr	r3, [pc, #172]	@ (80053ec <statemachine+0x1b8c>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	3b01      	subs	r3, #1
 8005342:	b2da      	uxtb	r2, r3
 8005344:	4b29      	ldr	r3, [pc, #164]	@ (80053ec <statemachine+0x1b8c>)
 8005346:	701a      	strb	r2, [r3, #0]
				 									 						usbstate--;
 8005348:	4b28      	ldr	r3, [pc, #160]	@ (80053ec <statemachine+0x1b8c>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	3b01      	subs	r3, #1
 800534e:	b2da      	uxtb	r2, r3
 8005350:	4b26      	ldr	r3, [pc, #152]	@ (80053ec <statemachine+0x1b8c>)
 8005352:	701a      	strb	r2, [r3, #0]
				 									 						  BTN_B=0;
 8005354:	4b24      	ldr	r3, [pc, #144]	@ (80053e8 <statemachine+0x1b88>)
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
				 									 						  BTN_A=0;
 800535a:	4b25      	ldr	r3, [pc, #148]	@ (80053f0 <statemachine+0x1b90>)
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
				 					 if(BTN_A>=1){
 8005360:	4b23      	ldr	r3, [pc, #140]	@ (80053f0 <statemachine+0x1b90>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	dd0b      	ble.n	8005380 <statemachine+0x1b20>
				 									  			 	state++;
 8005368:	4b22      	ldr	r3, [pc, #136]	@ (80053f4 <statemachine+0x1b94>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	3301      	adds	r3, #1
 800536e:	b2da      	uxtb	r2, r3
 8005370:	4b20      	ldr	r3, [pc, #128]	@ (80053f4 <statemachine+0x1b94>)
 8005372:	701a      	strb	r2, [r3, #0]
				 									  			 	BTN_A=0;
 8005374:	4b1e      	ldr	r3, [pc, #120]	@ (80053f0 <statemachine+0x1b90>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
				 									  			 	BTN_B=0;
 800537a:	4b1b      	ldr	r3, [pc, #108]	@ (80053e8 <statemachine+0x1b88>)
 800537c:	2200      	movs	r2, #0
 800537e:	601a      	str	r2, [r3, #0]
				 					if(BTN_A_LONG>=1){
 8005380:	4b1d      	ldr	r3, [pc, #116]	@ (80053f8 <statemachine+0x1b98>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	dd13      	ble.n	80053b0 <statemachine+0x1b50>
				 									 									  			 	state--;
 8005388:	4b1a      	ldr	r3, [pc, #104]	@ (80053f4 <statemachine+0x1b94>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	3b01      	subs	r3, #1
 800538e:	b2da      	uxtb	r2, r3
 8005390:	4b18      	ldr	r3, [pc, #96]	@ (80053f4 <statemachine+0x1b94>)
 8005392:	701a      	strb	r2, [r3, #0]
				 									 									  			 	BTN_A=0;
 8005394:	4b16      	ldr	r3, [pc, #88]	@ (80053f0 <statemachine+0x1b90>)
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_B=0;
 800539a:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <statemachine+0x1b88>)
 800539c:	2200      	movs	r2, #0
 800539e:	601a      	str	r2, [r3, #0]
				 									 									  			 	BTN_A_LONG=0;
 80053a0:	4b15      	ldr	r3, [pc, #84]	@ (80053f8 <statemachine+0x1b98>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	601a      	str	r2, [r3, #0]
				 					 break;
 80053a6:	e003      	b.n	80053b0 <statemachine+0x1b50>
				 					  break;
 80053a8:	bf00      	nop
 80053aa:	e0d3      	b.n	8005554 <statemachine+0x1cf4>
				 			  break;
 80053ac:	bf00      	nop
 80053ae:	e0d1      	b.n	8005554 <statemachine+0x1cf4>
				 					 break;
 80053b0:	bf00      	nop
				  break;
 80053b2:	e0cf      	b.n	8005554 <statemachine+0x1cf4>
 80053b4:	20000014 	.word	0x20000014
 80053b8:	0801be04 	.word	0x0801be04
 80053bc:	200008b4 	.word	0x200008b4
 80053c0:	20000780 	.word	0x20000780
 80053c4:	200009b8 	.word	0x200009b8
 80053c8:	200009b4 	.word	0x200009b4
 80053cc:	0801be0c 	.word	0x0801be0c
 80053d0:	20000a0c 	.word	0x20000a0c
 80053d4:	20000a70 	.word	0x20000a70
 80053d8:	20000a74 	.word	0x20000a74
 80053dc:	2000001c 	.word	0x2000001c
 80053e0:	0801be1c 	.word	0x0801be1c
 80053e4:	0801be24 	.word	0x0801be24
 80053e8:	2000077c 	.word	0x2000077c
 80053ec:	200004ec 	.word	0x200004ec
 80053f0:	20000778 	.word	0x20000778
 80053f4:	200004e8 	.word	0x200004e8
 80053f8:	20000ab0 	.word	0x20000ab0

				  case STATE_BLUETOOTH:
					  ssd1306_Fill(Black);
 80053fc:	2000      	movs	r0, #0
 80053fe:	f7fd fd79 	bl	8002ef4 <ssd1306_Fill>
					  ssd1306_SetCursor(32,32);
 8005402:	2120      	movs	r1, #32
 8005404:	2020      	movs	r0, #32
 8005406:	f7fd feb7 	bl	8003178 <ssd1306_SetCursor>
					  nmea_parse(&myData, DataBuffer);
 800540a:	4957      	ldr	r1, [pc, #348]	@ (8005568 <statemachine+0x1d08>)
 800540c:	4857      	ldr	r0, [pc, #348]	@ (800556c <statemachine+0x1d0c>)
 800540e:	f7fc ffe5 	bl	80023dc <nmea_parse>
					  ssd1306_WriteString("bmp581",Font_6x8,White);
 8005412:	4a57      	ldr	r2, [pc, #348]	@ (8005570 <statemachine+0x1d10>)
 8005414:	2301      	movs	r3, #1
 8005416:	ca06      	ldmia	r2, {r1, r2}
 8005418:	4856      	ldr	r0, [pc, #344]	@ (8005574 <statemachine+0x1d14>)
 800541a:	f7fd fe87 	bl	800312c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,40);
 800541e:	2128      	movs	r1, #40	@ 0x28
 8005420:	2020      	movs	r0, #32
 8005422:	f7fd fea9 	bl	8003178 <ssd1306_SetCursor>
					  HAL_Delay(200);
 8005426:	20c8      	movs	r0, #200	@ 0xc8
 8005428:	f001 f912 	bl	8006650 <HAL_Delay>
					  bmp581_read_precise_normal(bmp581);
 800542c:	4b52      	ldr	r3, [pc, #328]	@ (8005578 <statemachine+0x1d18>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f7fb ffe1 	bl	80013f8 <bmp581_read_precise_normal>





					  snprintf((char  *)blereceivebuf,64,"%0.1lf",(double)bmppress);
 8005436:	4b51      	ldr	r3, [pc, #324]	@ (800557c <statemachine+0x1d1c>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	e9cd 2300 	strd	r2, r3, [sp]
 8005440:	4a4f      	ldr	r2, [pc, #316]	@ (8005580 <statemachine+0x1d20>)
 8005442:	2140      	movs	r1, #64	@ 0x40
 8005444:	484f      	ldr	r0, [pc, #316]	@ (8005584 <statemachine+0x1d24>)
 8005446:	f011 fe6d 	bl	8017124 <sniprintf>
					  ssd1306_WriteString((char *) blereceivebuf, Font_6x8, White);
 800544a:	4a49      	ldr	r2, [pc, #292]	@ (8005570 <statemachine+0x1d10>)
 800544c:	2301      	movs	r3, #1
 800544e:	ca06      	ldmia	r2, {r1, r2}
 8005450:	484c      	ldr	r0, [pc, #304]	@ (8005584 <statemachine+0x1d24>)
 8005452:	f7fd fe6b 	bl	800312c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,48);
 8005456:	2130      	movs	r1, #48	@ 0x30
 8005458:	2020      	movs	r0, #32
 800545a:	f7fd fe8d 	bl	8003178 <ssd1306_SetCursor>
					  snprintf((char  *)blereceivebuf,64,"%0.1lf",(double)bmptemp);
 800545e:	4b4a      	ldr	r3, [pc, #296]	@ (8005588 <statemachine+0x1d28>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	e9cd 2300 	strd	r2, r3, [sp]
 8005468:	4a45      	ldr	r2, [pc, #276]	@ (8005580 <statemachine+0x1d20>)
 800546a:	2140      	movs	r1, #64	@ 0x40
 800546c:	4845      	ldr	r0, [pc, #276]	@ (8005584 <statemachine+0x1d24>)
 800546e:	f011 fe59 	bl	8017124 <sniprintf>
					  ssd1306_WriteString((char *) blereceivebuf, Font_6x8, White);
 8005472:	4a3f      	ldr	r2, [pc, #252]	@ (8005570 <statemachine+0x1d10>)
 8005474:	2301      	movs	r3, #1
 8005476:	ca06      	ldmia	r2, {r1, r2}
 8005478:	4842      	ldr	r0, [pc, #264]	@ (8005584 <statemachine+0x1d24>)
 800547a:	f7fd fe57 	bl	800312c <ssd1306_WriteString>
					  ssd1306_SetCursor(32,56);
 800547e:	2138      	movs	r1, #56	@ 0x38
 8005480:	2020      	movs	r0, #32
 8005482:	f7fd fe79 	bl	8003178 <ssd1306_SetCursor>
					  ssd1306_WriteString((char *) receivedtrame, Font_6x8, White);
 8005486:	4a3a      	ldr	r2, [pc, #232]	@ (8005570 <statemachine+0x1d10>)
 8005488:	2301      	movs	r3, #1
 800548a:	ca06      	ldmia	r2, {r1, r2}
 800548c:	483f      	ldr	r0, [pc, #252]	@ (800558c <statemachine+0x1d2c>)
 800548e:	f7fd fe4d 	bl	800312c <ssd1306_WriteString>





						if(BTN_B_LONG>=1){
 8005492:	4b3f      	ldr	r3, [pc, #252]	@ (8005590 <statemachine+0x1d30>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	dd0b      	ble.n	80054b2 <statemachine+0x1c52>
												BTN_A=0;
 800549a:	4b3e      	ldr	r3, [pc, #248]	@ (8005594 <statemachine+0x1d34>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
												BTN_B=0;
 80054a0:	4b3d      	ldr	r3, [pc, #244]	@ (8005598 <statemachine+0x1d38>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
												BTN_A_LONG=0;
 80054a6:	4b3d      	ldr	r3, [pc, #244]	@ (800559c <statemachine+0x1d3c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	601a      	str	r2, [r3, #0]
												BTN_B_LONG=0;
 80054ac:	4b38      	ldr	r3, [pc, #224]	@ (8005590 <statemachine+0x1d30>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
												}




					  if(BTN_B>=1){
 80054b2:	4b39      	ldr	r3, [pc, #228]	@ (8005598 <statemachine+0x1d38>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	dd08      	ble.n	80054cc <statemachine+0x1c6c>


						  bluetoothsend=1;
 80054ba:	4b39      	ldr	r3, [pc, #228]	@ (80055a0 <statemachine+0x1d40>)
 80054bc:	2201      	movs	r2, #1
 80054be:	601a      	str	r2, [r3, #0]
						  BTN_B=0;
 80054c0:	4b35      	ldr	r3, [pc, #212]	@ (8005598 <statemachine+0x1d38>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	601a      	str	r2, [r3, #0]
						  BTN_B_LONG=0;
 80054c6:	4b32      	ldr	r3, [pc, #200]	@ (8005590 <statemachine+0x1d30>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
					  }


				  if(BTN_A>=1){
 80054cc:	4b31      	ldr	r3, [pc, #196]	@ (8005594 <statemachine+0x1d34>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dd23      	ble.n	800551c <statemachine+0x1cbc>
						state--;
 80054d4:	4b33      	ldr	r3, [pc, #204]	@ (80055a4 <statemachine+0x1d44>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	3b01      	subs	r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	4b31      	ldr	r3, [pc, #196]	@ (80055a4 <statemachine+0x1d44>)
 80054de:	701a      	strb	r2, [r3, #0]
						state--;
 80054e0:	4b30      	ldr	r3, [pc, #192]	@ (80055a4 <statemachine+0x1d44>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	4b2e      	ldr	r3, [pc, #184]	@ (80055a4 <statemachine+0x1d44>)
 80054ea:	701a      	strb	r2, [r3, #0]
						state--;
 80054ec:	4b2d      	ldr	r3, [pc, #180]	@ (80055a4 <statemachine+0x1d44>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	4b2b      	ldr	r3, [pc, #172]	@ (80055a4 <statemachine+0x1d44>)
 80054f6:	701a      	strb	r2, [r3, #0]
						state--;
 80054f8:	4b2a      	ldr	r3, [pc, #168]	@ (80055a4 <statemachine+0x1d44>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	4b28      	ldr	r3, [pc, #160]	@ (80055a4 <statemachine+0x1d44>)
 8005502:	701a      	strb	r2, [r3, #0]
						state--;
 8005504:	4b27      	ldr	r3, [pc, #156]	@ (80055a4 <statemachine+0x1d44>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	3b01      	subs	r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	4b25      	ldr	r3, [pc, #148]	@ (80055a4 <statemachine+0x1d44>)
 800550e:	701a      	strb	r2, [r3, #0]
						BTN_A=0;
 8005510:	4b20      	ldr	r3, [pc, #128]	@ (8005594 <statemachine+0x1d34>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
						BTN_B=0;
 8005516:	4b20      	ldr	r3, [pc, #128]	@ (8005598 <statemachine+0x1d38>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
							}
					if(BTN_A_LONG>=1){
 800551c:	4b1f      	ldr	r3, [pc, #124]	@ (800559c <statemachine+0x1d3c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	dd19      	ble.n	8005558 <statemachine+0x1cf8>
							state--;
 8005524:	4b1f      	ldr	r3, [pc, #124]	@ (80055a4 <statemachine+0x1d44>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	3b01      	subs	r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <statemachine+0x1d44>)
 800552e:	701a      	strb	r2, [r3, #0]
							BTN_A=0;
 8005530:	4b18      	ldr	r3, [pc, #96]	@ (8005594 <statemachine+0x1d34>)
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
							BTN_B=0;
 8005536:	4b18      	ldr	r3, [pc, #96]	@ (8005598 <statemachine+0x1d38>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
							BTN_A_LONG=0;
 800553c:	4b17      	ldr	r3, [pc, #92]	@ (800559c <statemachine+0x1d3c>)
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
							}



					  break;
 8005542:	e009      	b.n	8005558 <statemachine+0x1cf8>
				  									 	 break;
 8005544:	bf00      	nop
 8005546:	e008      	b.n	800555a <statemachine+0x1cfa>
					  break;
 8005548:	bf00      	nop
 800554a:	e006      	b.n	800555a <statemachine+0x1cfa>
			  break;
 800554c:	bf00      	nop
 800554e:	e004      	b.n	800555a <statemachine+0x1cfa>
			  break;
 8005550:	bf00      	nop
 8005552:	e002      	b.n	800555a <statemachine+0x1cfa>
				  break;
 8005554:	bf00      	nop
 8005556:	e000      	b.n	800555a <statemachine+0x1cfa>
					  break;
 8005558:	bf00      	nop




	}
return ;
 800555a:	bf00      	nop
 800555c:	bf00      	nop
}
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	ecbd 8b02 	vpop	{d8}
 8005566:	bdb0      	pop	{r4, r5, r7, pc}
 8005568:	20000534 	.word	0x20000534
 800556c:	20000738 	.word	0x20000738
 8005570:	20000014 	.word	0x20000014
 8005574:	0801be2c 	.word	0x0801be2c
 8005578:	20000bfc 	.word	0x20000bfc
 800557c:	200003f0 	.word	0x200003f0
 8005580:	0801bc94 	.word	0x0801bc94
 8005584:	20000ab8 	.word	0x20000ab8
 8005588:	200003e8 	.word	0x200003e8
 800558c:	20000bb8 	.word	0x20000bb8
 8005590:	20000aac 	.word	0x20000aac
 8005594:	20000778 	.word	0x20000778
 8005598:	2000077c 	.word	0x2000077c
 800559c:	20000ab0 	.word	0x20000ab0
 80055a0:	20000ab4 	.word	0x20000ab4
 80055a4:	200004e8 	.word	0x200004e8

080055a8 <LL_AHB3_GRP1_EnableClock>:
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4313      	orrs	r3, r2
 80055be:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80055c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4013      	ands	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055cc:	68fb      	ldr	r3, [r7, #12]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	af00      	add	r7, sp, #0



  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80055de:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80055e2:	f7ff ffe1 	bl	80055a8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80055e6:	2200      	movs	r2, #0
 80055e8:	2100      	movs	r1, #0
 80055ea:	202e      	movs	r0, #46	@ 0x2e
 80055ec:	f002 f9af 	bl	800794e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80055f0:	202e      	movs	r0, #46	@ 0x2e
 80055f2:	f002 f9c6 	bl	8007982 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
	...

080055fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
  {
	   ssd1306_SetCursor(32, 20);
 8005600:	2114      	movs	r1, #20
 8005602:	2020      	movs	r0, #32
 8005604:	f7fd fdb8 	bl	8003178 <ssd1306_SetCursor>
	   	  ssd1306_WriteString("NMI", Font_7x10, White);
 8005608:	4a04      	ldr	r2, [pc, #16]	@ (800561c <NMI_Handler+0x20>)
 800560a:	2301      	movs	r3, #1
 800560c:	ca06      	ldmia	r2, {r1, r2}
 800560e:	4804      	ldr	r0, [pc, #16]	@ (8005620 <NMI_Handler+0x24>)
 8005610:	f7fd fd8c 	bl	800312c <ssd1306_WriteString>
	   	  ssd1306_UpdateScreen();
 8005614:	f7fd fc86 	bl	8002f24 <ssd1306_UpdateScreen>
	   ssd1306_SetCursor(32, 20);
 8005618:	bf00      	nop
 800561a:	e7f1      	b.n	8005600 <NMI_Handler+0x4>
 800561c:	2000001c 	.word	0x2000001c
 8005620:	0801be34 	.word	0x0801be34

08005624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8005628:	2114      	movs	r1, #20
 800562a:	2020      	movs	r0, #32
 800562c:	f7fd fda4 	bl	8003178 <ssd1306_SetCursor>
	  ssd1306_WriteString("hardfault", Font_7x10, White);
 8005630:	4a04      	ldr	r2, [pc, #16]	@ (8005644 <HardFault_Handler+0x20>)
 8005632:	2301      	movs	r3, #1
 8005634:	ca06      	ldmia	r2, {r1, r2}
 8005636:	4804      	ldr	r0, [pc, #16]	@ (8005648 <HardFault_Handler+0x24>)
 8005638:	f7fd fd78 	bl	800312c <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800563c:	f7fd fc72 	bl	8002f24 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8005640:	bf00      	nop
 8005642:	e7f1      	b.n	8005628 <HardFault_Handler+0x4>
 8005644:	2000001c 	.word	0x2000001c
 8005648:	0801be38 	.word	0x0801be38

0800564c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8005650:	2114      	movs	r1, #20
 8005652:	2020      	movs	r0, #32
 8005654:	f7fd fd90 	bl	8003178 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("mem", Font_7x10, White);
 8005658:	4a04      	ldr	r2, [pc, #16]	@ (800566c <MemManage_Handler+0x20>)
 800565a:	2301      	movs	r3, #1
 800565c:	ca06      	ldmia	r2, {r1, r2}
 800565e:	4804      	ldr	r0, [pc, #16]	@ (8005670 <MemManage_Handler+0x24>)
 8005660:	f7fd fd64 	bl	800312c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 8005664:	f7fd fc5e 	bl	8002f24 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8005668:	bf00      	nop
 800566a:	e7f1      	b.n	8005650 <MemManage_Handler+0x4>
 800566c:	2000001c 	.word	0x2000001c
 8005670:	0801be44 	.word	0x0801be44

08005674 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 8005678:	2114      	movs	r1, #20
 800567a:	2020      	movs	r0, #32
 800567c:	f7fd fd7c 	bl	8003178 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("bus", Font_7x10, White);
 8005680:	4a04      	ldr	r2, [pc, #16]	@ (8005694 <BusFault_Handler+0x20>)
 8005682:	2301      	movs	r3, #1
 8005684:	ca06      	ldmia	r2, {r1, r2}
 8005686:	4804      	ldr	r0, [pc, #16]	@ (8005698 <BusFault_Handler+0x24>)
 8005688:	f7fd fd50 	bl	800312c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 800568c:	f7fd fc4a 	bl	8002f24 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 8005690:	bf00      	nop
 8005692:	e7f1      	b.n	8005678 <BusFault_Handler+0x4>
 8005694:	2000001c 	.word	0x2000001c
 8005698:	0801be48 	.word	0x0801be48

0800569c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  ssd1306_SetCursor(32, 20);
 80056a0:	2114      	movs	r1, #20
 80056a2:	2020      	movs	r0, #32
 80056a4:	f7fd fd68 	bl	8003178 <ssd1306_SetCursor>
	  	  ssd1306_WriteString("usage", Font_7x10, White);
 80056a8:	4a04      	ldr	r2, [pc, #16]	@ (80056bc <UsageFault_Handler+0x20>)
 80056aa:	2301      	movs	r3, #1
 80056ac:	ca06      	ldmia	r2, {r1, r2}
 80056ae:	4804      	ldr	r0, [pc, #16]	@ (80056c0 <UsageFault_Handler+0x24>)
 80056b0:	f7fd fd3c 	bl	800312c <ssd1306_WriteString>
	  	  ssd1306_UpdateScreen();
 80056b4:	f7fd fc36 	bl	8002f24 <ssd1306_UpdateScreen>
	  ssd1306_SetCursor(32, 20);
 80056b8:	bf00      	nop
 80056ba:	e7f1      	b.n	80056a0 <UsageFault_Handler+0x4>
 80056bc:	2000001c 	.word	0x2000001c
 80056c0:	0801be4c 	.word	0x0801be4c

080056c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056e4:	bf00      	nop
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056f2:	f000 ff81 	bl	80065f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005700:	4802      	ldr	r0, [pc, #8]	@ (800570c <RTC_WKUP_IRQHandler+0x10>)
 8005702:	f007 fc0f 	bl	800cf24 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000c3c 	.word	0x20000c3c

08005710 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005714:	4802      	ldr	r0, [pc, #8]	@ (8005720 <DMA1_Channel1_IRQHandler+0x10>)
 8005716:	f002 fb30 	bl	8007d7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000388 	.word	0x20000388

08005724 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8005728:	4802      	ldr	r0, [pc, #8]	@ (8005734 <DMA1_Channel2_IRQHandler+0x10>)
 800572a:	f002 fb26 	bl	8007d7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	2000127c 	.word	0x2000127c

08005738 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800573c:	4802      	ldr	r0, [pc, #8]	@ (8005748 <USB_LP_IRQHandler+0x10>)
 800573e:	f003 feb5 	bl	80094ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005742:	bf00      	nop
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200027c0 	.word	0x200027c0

0800574c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005750:	4806      	ldr	r0, [pc, #24]	@ (800576c <TIM1_UP_TIM16_IRQHandler+0x20>)
 8005752:	f008 fd72 	bl	800e23a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
  updatedate();
 8005756:	f000 fa7b 	bl	8005c50 <updatedate>
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 800575a:	2101      	movs	r1, #1
 800575c:	4804      	ldr	r0, [pc, #16]	@ (8005770 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800575e:	f002 fe09 	bl	8008374 <HAL_GPIO_TogglePin>
  bluetoothsend=1;
 8005762:	4b04      	ldr	r3, [pc, #16]	@ (8005774 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8005764:	2201      	movs	r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005768:	bf00      	nop
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20001150 	.word	0x20001150
 8005770:	48000400 	.word	0x48000400
 8005774:	20000ab4 	.word	0x20000ab4

08005778 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800577c:	4805      	ldr	r0, [pc, #20]	@ (8005794 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 800577e:	f008 fd5c 	bl	800e23a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8005782:	2102      	movs	r1, #2
 8005784:	4804      	ldr	r0, [pc, #16]	@ (8005798 <TIM1_TRG_COM_TIM17_IRQHandler+0x20>)
 8005786:	f002 fdf5 	bl	8008374 <HAL_GPIO_TogglePin>
  enablewrite=1;
 800578a:	4b04      	ldr	r3, [pc, #16]	@ (800579c <TIM1_TRG_COM_TIM17_IRQHandler+0x24>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005790:	bf00      	nop
 8005792:	bd80      	pop	{r7, pc}
 8005794:	2000119c 	.word	0x2000119c
 8005798:	48000400 	.word	0x48000400
 800579c:	20000a90 	.word	0x20000a90

080057a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80057a4:	4802      	ldr	r0, [pc, #8]	@ (80057b0 <SPI1_IRQHandler+0x10>)
 80057a6:	f008 f95d 	bl	800da64 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000c94 	.word	0x20000c94

080057b4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80057b8:	4802      	ldr	r0, [pc, #8]	@ (80057c4 <LPUART1_IRQHandler+0x10>)
 80057ba:	f009 fa95 	bl	800ece8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80057be:	bf00      	nop
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	200011e8 	.word	0x200011e8

080057c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80057cc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80057d0:	f002 fdea 	bl	80083a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80057d4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80057d8:	f002 fde6 	bl	80083a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80057dc:	bf00      	nop
 80057de:	bd80      	pop	{r7, pc}

080057e0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80057e4:	4802      	ldr	r0, [pc, #8]	@ (80057f0 <IPCC_C1_RX_IRQHandler+0x10>)
 80057e6:	f003 fcd1 	bl	800918c <HAL_IPCC_RX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80057ea:	bf00      	nop
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200004ac 	.word	0x200004ac

080057f4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80057f8:	4802      	ldr	r0, [pc, #8]	@ (8005804 <IPCC_C1_TX_IRQHandler+0x10>)
 80057fa:	f003 fc79 	bl	80090f0 <HAL_IPCC_TX_IRQHandler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80057fe:	bf00      	nop
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	200004ac 	.word	0x200004ac

08005808 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800580c:	f002 fde4 	bl	80083d8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005810:	bf00      	nop
 8005812:	bd80      	pop	{r7, pc}

08005814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  return 1;
 8005818:	2301      	movs	r3, #1
}
 800581a:	4618      	mov	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <_kill>:

int _kill(int pid, int sig)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800582e:	f011 fdf7 	bl	8017420 <__errno>
 8005832:	4603      	mov	r3, r0
 8005834:	2216      	movs	r2, #22
 8005836:	601a      	str	r2, [r3, #0]
  return -1;
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <_exit>:

void _exit (int status)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800584c:	f04f 31ff 	mov.w	r1, #4294967295
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ffe7 	bl	8005824 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005856:	bf00      	nop
 8005858:	e7fd      	b.n	8005856 <_exit+0x12>

0800585a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b086      	sub	sp, #24
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e00a      	b.n	8005882 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800586c:	f3af 8000 	nop.w
 8005870:	4601      	mov	r1, r0
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	60ba      	str	r2, [r7, #8]
 8005878:	b2ca      	uxtb	r2, r1
 800587a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	3301      	adds	r3, #1
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	429a      	cmp	r2, r3
 8005888:	dbf0      	blt.n	800586c <_read+0x12>
  }

  return len;
 800588a:	687b      	ldr	r3, [r7, #4]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e009      	b.n	80058ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	60ba      	str	r2, [r7, #8]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	3301      	adds	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	429a      	cmp	r2, r3
 80058c0:	dbf1      	blt.n	80058a6 <_write+0x12>
  }
  return len;
 80058c2:	687b      	ldr	r3, [r7, #4]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <_close>:

int _close(int file)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80058d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80058f4:	605a      	str	r2, [r3, #4]
  return 0;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <_isatty>:

int _isatty(int file)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800590c:	2301      	movs	r3, #1
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	60f8      	str	r0, [r7, #12]
 8005922:	60b9      	str	r1, [r7, #8]
 8005924:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800593c:	4a14      	ldr	r2, [pc, #80]	@ (8005990 <_sbrk+0x5c>)
 800593e:	4b15      	ldr	r3, [pc, #84]	@ (8005994 <_sbrk+0x60>)
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005948:	4b13      	ldr	r3, [pc, #76]	@ (8005998 <_sbrk+0x64>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005950:	4b11      	ldr	r3, [pc, #68]	@ (8005998 <_sbrk+0x64>)
 8005952:	4a12      	ldr	r2, [pc, #72]	@ (800599c <_sbrk+0x68>)
 8005954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005956:	4b10      	ldr	r3, [pc, #64]	@ (8005998 <_sbrk+0x64>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	429a      	cmp	r2, r3
 8005962:	d207      	bcs.n	8005974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005964:	f011 fd5c 	bl	8017420 <__errno>
 8005968:	4603      	mov	r3, r0
 800596a:	220c      	movs	r2, #12
 800596c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800596e:	f04f 33ff 	mov.w	r3, #4294967295
 8005972:	e009      	b.n	8005988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005974:	4b08      	ldr	r3, [pc, #32]	@ (8005998 <_sbrk+0x64>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800597a:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <_sbrk+0x64>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4413      	add	r3, r2
 8005982:	4a05      	ldr	r2, [pc, #20]	@ (8005998 <_sbrk+0x64>)
 8005984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005986:	68fb      	ldr	r3, [r7, #12]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3718      	adds	r7, #24
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20030000 	.word	0x20030000
 8005994:	00000400 	.word	0x00000400
 8005998:	20001100 	.word	0x20001100
 800599c:	20002e08 	.word	0x20002e08

080059a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80059a4:	4b24      	ldr	r3, [pc, #144]	@ (8005a38 <SystemInit+0x98>)
 80059a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059aa:	4a23      	ldr	r2, [pc, #140]	@ (8005a38 <SystemInit+0x98>)
 80059ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80059b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80059c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80059cc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80059ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059d8:	4b18      	ldr	r3, [pc, #96]	@ (8005a3c <SystemInit+0x9c>)
 80059da:	4013      	ands	r3, r2
 80059dc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80059de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059ea:	f023 0305 	bic.w	r3, r3, #5
 80059ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80059f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8005a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a40 <SystemInit+0xa0>)
 8005a0c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a12:	4a0b      	ldr	r2, [pc, #44]	@ (8005a40 <SystemInit+0xa0>)
 8005a14:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	619a      	str	r2, [r3, #24]
}
 8005a2e:	bf00      	nop
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	e000ed00 	.word	0xe000ed00
 8005a3c:	faf6fefb 	.word	0xfaf6fefb
 8005a40:	22041000 	.word	0x22041000

08005a44 <LL_APB1_GRP1_EnableClock>:
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a60:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4013      	ands	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a68:	68fb      	ldr	r3, [r7, #12]
}
 8005a6a:	bf00      	nop
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <LL_APB2_GRP1_EnableClock>:
{
 8005a76:	b480      	push	{r7}
 8005a78:	b085      	sub	sp, #20
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8005a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a82:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a92:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4013      	ands	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
}
 8005a9c:	bf00      	nop
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005aae:	f107 0310 	add.w	r3, r7, #16
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	609a      	str	r2, [r3, #8]
 8005aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005abc:	1d3b      	adds	r3, r7, #4
 8005abe:	2200      	movs	r2, #0
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
 8005ac4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8005b40 <MX_TIM2_Init+0x98>)
 8005ac8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005acc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8005ace:	4b1c      	ldr	r3, [pc, #112]	@ (8005b40 <MX_TIM2_Init+0x98>)
 8005ad0:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8005ad4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8005b40 <MX_TIM2_Init+0x98>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8005adc:	4b18      	ldr	r3, [pc, #96]	@ (8005b40 <MX_TIM2_Init+0x98>)
 8005ade:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005ae2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ae4:	4b16      	ldr	r3, [pc, #88]	@ (8005b40 <MX_TIM2_Init+0x98>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005aea:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <MX_TIM2_Init+0x98>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005af0:	4813      	ldr	r0, [pc, #76]	@ (8005b40 <MX_TIM2_Init+0x98>)
 8005af2:	f008 fa87 	bl	800e004 <HAL_TIM_Base_Init>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8005afc:	f7fc f9d9 	bl	8001eb2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005b00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005b04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005b06:	f107 0310 	add.w	r3, r7, #16
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	480c      	ldr	r0, [pc, #48]	@ (8005b40 <MX_TIM2_Init+0x98>)
 8005b0e:	f008 fc9b 	bl	800e448 <HAL_TIM_ConfigClockSource>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8005b18:	f7fc f9cb 	bl	8001eb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005b24:	1d3b      	adds	r3, r7, #4
 8005b26:	4619      	mov	r1, r3
 8005b28:	4805      	ldr	r0, [pc, #20]	@ (8005b40 <MX_TIM2_Init+0x98>)
 8005b2a:	f008 fe95 	bl	800e858 <HAL_TIMEx_MasterConfigSynchronization>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8005b34:	f7fc f9bd 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005b38:	bf00      	nop
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20001104 	.word	0x20001104

08005b44 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005b48:	4b10      	ldr	r3, [pc, #64]	@ (8005b8c <MX_TIM16_Init+0x48>)
 8005b4a:	4a11      	ldr	r2, [pc, #68]	@ (8005b90 <MX_TIM16_Init+0x4c>)
 8005b4c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64000-1;
 8005b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b8c <MX_TIM16_Init+0x48>)
 8005b50:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8005b54:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b56:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <MX_TIM16_Init+0x48>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8005b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b8c <MX_TIM16_Init+0x48>)
 8005b5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005b62:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005b64:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <MX_TIM16_Init+0x48>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005b6a:	4b08      	ldr	r3, [pc, #32]	@ (8005b8c <MX_TIM16_Init+0x48>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005b70:	4b06      	ldr	r3, [pc, #24]	@ (8005b8c <MX_TIM16_Init+0x48>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005b76:	4805      	ldr	r0, [pc, #20]	@ (8005b8c <MX_TIM16_Init+0x48>)
 8005b78:	f008 fa44 	bl	800e004 <HAL_TIM_Base_Init>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8005b82:	f7fc f996 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005b86:	bf00      	nop
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20001150 	.word	0x20001150
 8005b90:	40014400 	.word	0x40014400

08005b94 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8005b98:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd8 <MX_TIM17_Init+0x44>)
 8005b9a:	4a10      	ldr	r2, [pc, #64]	@ (8005bdc <MX_TIM17_Init+0x48>)
 8005b9c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64000-1;
 8005b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd8 <MX_TIM17_Init+0x44>)
 8005ba0:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8005ba4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd8 <MX_TIM17_Init+0x44>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 200-1;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd8 <MX_TIM17_Init+0x44>)
 8005bae:	22c7      	movs	r2, #199	@ 0xc7
 8005bb0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bb2:	4b09      	ldr	r3, [pc, #36]	@ (8005bd8 <MX_TIM17_Init+0x44>)
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005bb8:	4b07      	ldr	r3, [pc, #28]	@ (8005bd8 <MX_TIM17_Init+0x44>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bbe:	4b06      	ldr	r3, [pc, #24]	@ (8005bd8 <MX_TIM17_Init+0x44>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005bc4:	4804      	ldr	r0, [pc, #16]	@ (8005bd8 <MX_TIM17_Init+0x44>)
 8005bc6:	f008 fa1d 	bl	800e004 <HAL_TIM_Base_Init>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8005bd0:	f7fc f96f 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8005bd4:	bf00      	nop
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	2000119c 	.word	0x2000119c
 8005bdc:	40014800 	.word	0x40014800

08005be0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf0:	d103      	bne.n	8005bfa <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f7ff ff26 	bl	8005a44 <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8005bf8:	e022      	b.n	8005c40 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM16)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a12      	ldr	r2, [pc, #72]	@ (8005c48 <HAL_TIM_Base_MspInit+0x68>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d10c      	bne.n	8005c1e <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005c04:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005c08:	f7ff ff35 	bl	8005a76 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 4, 0);
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2104      	movs	r1, #4
 8005c10:	2019      	movs	r0, #25
 8005c12:	f001 fe9c 	bl	800794e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005c16:	2019      	movs	r0, #25
 8005c18:	f001 feb3 	bl	8007982 <HAL_NVIC_EnableIRQ>
}
 8005c1c:	e010      	b.n	8005c40 <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM17)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a0a      	ldr	r2, [pc, #40]	@ (8005c4c <HAL_TIM_Base_MspInit+0x6c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d10b      	bne.n	8005c40 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005c28:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8005c2c:	f7ff ff23 	bl	8005a76 <LL_APB2_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 2, 0);
 8005c30:	2200      	movs	r2, #0
 8005c32:	2102      	movs	r1, #2
 8005c34:	201a      	movs	r0, #26
 8005c36:	f001 fe8a 	bl	800794e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005c3a:	201a      	movs	r0, #26
 8005c3c:	f001 fea1 	bl	8007982 <HAL_NVIC_EnableIRQ>
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40014400 	.word	0x40014400
 8005c4c:	40014800 	.word	0x40014800

08005c50 <updatedate>:
  /* USER CODE END TIM17_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void updatedate(void){
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0

	SEC+=1;
 8005c54:	4b98      	ldr	r3, [pc, #608]	@ (8005eb8 <updatedate+0x268>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	4b96      	ldr	r3, [pc, #600]	@ (8005eb8 <updatedate+0x268>)
 8005c5e:	701a      	strb	r2, [r3, #0]
	if(SEC>59){
 8005c60:	4b95      	ldr	r3, [pc, #596]	@ (8005eb8 <updatedate+0x268>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b3b      	cmp	r3, #59	@ 0x3b
 8005c66:	d908      	bls.n	8005c7a <updatedate+0x2a>
		SEC=0;
 8005c68:	4b93      	ldr	r3, [pc, #588]	@ (8005eb8 <updatedate+0x268>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	701a      	strb	r2, [r3, #0]
		MINUTE+=1;
 8005c6e:	4b93      	ldr	r3, [pc, #588]	@ (8005ebc <updatedate+0x26c>)
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	3301      	adds	r3, #1
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	4b91      	ldr	r3, [pc, #580]	@ (8005ebc <updatedate+0x26c>)
 8005c78:	701a      	strb	r2, [r3, #0]
	}

	if(MINUTE>59){
 8005c7a:	4b90      	ldr	r3, [pc, #576]	@ (8005ebc <updatedate+0x26c>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b3b      	cmp	r3, #59	@ 0x3b
 8005c80:	d908      	bls.n	8005c94 <updatedate+0x44>

		MINUTE=0;
 8005c82:	4b8e      	ldr	r3, [pc, #568]	@ (8005ebc <updatedate+0x26c>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
		HR+=1;
 8005c88:	4b8d      	ldr	r3, [pc, #564]	@ (8005ec0 <updatedate+0x270>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	4b8b      	ldr	r3, [pc, #556]	@ (8005ec0 <updatedate+0x270>)
 8005c92:	701a      	strb	r2, [r3, #0]
	}
	if(HR>=24){
 8005c94:	4b8a      	ldr	r3, [pc, #552]	@ (8005ec0 <updatedate+0x270>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b17      	cmp	r3, #23
 8005c9a:	d908      	bls.n	8005cae <updatedate+0x5e>
		HR=0;
 8005c9c:	4b88      	ldr	r3, [pc, #544]	@ (8005ec0 <updatedate+0x270>)
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
		JOURS+=1;
 8005ca2:	4b88      	ldr	r3, [pc, #544]	@ (8005ec4 <updatedate+0x274>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4b86      	ldr	r3, [pc, #536]	@ (8005ec4 <updatedate+0x274>)
 8005cac:	701a      	strb	r2, [r3, #0]
	}
	switch (mois){
 8005cae:	4b86      	ldr	r3, [pc, #536]	@ (8005ec8 <updatedate+0x278>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b0b      	cmp	r3, #11
 8005cb4:	f200 8137 	bhi.w	8005f26 <updatedate+0x2d6>
 8005cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc0 <updatedate+0x70>)
 8005cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cbe:	bf00      	nop
 8005cc0:	08005cf1 	.word	0x08005cf1
 8005cc4:	08005d1b 	.word	0x08005d1b
 8005cc8:	08005d45 	.word	0x08005d45
 8005ccc:	08005d6f 	.word	0x08005d6f
 8005cd0:	08005d99 	.word	0x08005d99
 8005cd4:	08005dc3 	.word	0x08005dc3
 8005cd8:	08005ded 	.word	0x08005ded
 8005cdc:	08005e17 	.word	0x08005e17
 8005ce0:	08005e3f 	.word	0x08005e3f
 8005ce4:	08005e67 	.word	0x08005e67
 8005ce8:	08005e8f 	.word	0x08005e8f
 8005cec:	08005ed1 	.word	0x08005ed1

	case JANVIER:
		if(JOURS>31){
 8005cf0:	4b74      	ldr	r3, [pc, #464]	@ (8005ec4 <updatedate+0x274>)
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	2b1f      	cmp	r3, #31
 8005cf6:	f240 80ff 	bls.w	8005ef8 <updatedate+0x2a8>
			JOURS=1;
 8005cfa:	4b72      	ldr	r3, [pc, #456]	@ (8005ec4 <updatedate+0x274>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
			mois++;
 8005d00:	4b71      	ldr	r3, [pc, #452]	@ (8005ec8 <updatedate+0x278>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	3301      	adds	r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	4b6f      	ldr	r3, [pc, #444]	@ (8005ec8 <updatedate+0x278>)
 8005d0a:	701a      	strb	r2, [r3, #0]
			MOIS++;
 8005d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8005ecc <updatedate+0x27c>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	3301      	adds	r3, #1
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	4b6d      	ldr	r3, [pc, #436]	@ (8005ecc <updatedate+0x27c>)
 8005d16:	701a      	strb	r2, [r3, #0]
		}

		break;
 8005d18:	e0ee      	b.n	8005ef8 <updatedate+0x2a8>
	case FEVRIER:
		if(JOURS>29){
 8005d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8005ec4 <updatedate+0x274>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b1d      	cmp	r3, #29
 8005d20:	f240 80ec 	bls.w	8005efc <updatedate+0x2ac>
					JOURS=1;
 8005d24:	4b67      	ldr	r3, [pc, #412]	@ (8005ec4 <updatedate+0x274>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	701a      	strb	r2, [r3, #0]
					mois++;
 8005d2a:	4b67      	ldr	r3, [pc, #412]	@ (8005ec8 <updatedate+0x278>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	4b65      	ldr	r3, [pc, #404]	@ (8005ec8 <updatedate+0x278>)
 8005d34:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005d36:	4b65      	ldr	r3, [pc, #404]	@ (8005ecc <updatedate+0x27c>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	4b63      	ldr	r3, [pc, #396]	@ (8005ecc <updatedate+0x27c>)
 8005d40:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005d42:	e0db      	b.n	8005efc <updatedate+0x2ac>
	case MARS:
		if(JOURS>31){
 8005d44:	4b5f      	ldr	r3, [pc, #380]	@ (8005ec4 <updatedate+0x274>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	2b1f      	cmp	r3, #31
 8005d4a:	f240 80d9 	bls.w	8005f00 <updatedate+0x2b0>
					JOURS=1;
 8005d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8005ec4 <updatedate+0x274>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	701a      	strb	r2, [r3, #0]
					mois++;
 8005d54:	4b5c      	ldr	r3, [pc, #368]	@ (8005ec8 <updatedate+0x278>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ec8 <updatedate+0x278>)
 8005d5e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005d60:	4b5a      	ldr	r3, [pc, #360]	@ (8005ecc <updatedate+0x27c>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	3301      	adds	r3, #1
 8005d66:	b2da      	uxtb	r2, r3
 8005d68:	4b58      	ldr	r3, [pc, #352]	@ (8005ecc <updatedate+0x27c>)
 8005d6a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005d6c:	e0c8      	b.n	8005f00 <updatedate+0x2b0>
	case AVRIL:
		if(JOURS>30){
 8005d6e:	4b55      	ldr	r3, [pc, #340]	@ (8005ec4 <updatedate+0x274>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b1e      	cmp	r3, #30
 8005d74:	f240 80c6 	bls.w	8005f04 <updatedate+0x2b4>
					JOURS=1;
 8005d78:	4b52      	ldr	r3, [pc, #328]	@ (8005ec4 <updatedate+0x274>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
					mois++;
 8005d7e:	4b52      	ldr	r3, [pc, #328]	@ (8005ec8 <updatedate+0x278>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	4b50      	ldr	r3, [pc, #320]	@ (8005ec8 <updatedate+0x278>)
 8005d88:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005d8a:	4b50      	ldr	r3, [pc, #320]	@ (8005ecc <updatedate+0x27c>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4b4e      	ldr	r3, [pc, #312]	@ (8005ecc <updatedate+0x27c>)
 8005d94:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005d96:	e0b5      	b.n	8005f04 <updatedate+0x2b4>
	case MAI:
		if(JOURS>31){
 8005d98:	4b4a      	ldr	r3, [pc, #296]	@ (8005ec4 <updatedate+0x274>)
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	2b1f      	cmp	r3, #31
 8005d9e:	f240 80b3 	bls.w	8005f08 <updatedate+0x2b8>
					JOURS=1;
 8005da2:	4b48      	ldr	r3, [pc, #288]	@ (8005ec4 <updatedate+0x274>)
 8005da4:	2201      	movs	r2, #1
 8005da6:	701a      	strb	r2, [r3, #0]
					mois++;
 8005da8:	4b47      	ldr	r3, [pc, #284]	@ (8005ec8 <updatedate+0x278>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	3301      	adds	r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	4b45      	ldr	r3, [pc, #276]	@ (8005ec8 <updatedate+0x278>)
 8005db2:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005db4:	4b45      	ldr	r3, [pc, #276]	@ (8005ecc <updatedate+0x27c>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	4b43      	ldr	r3, [pc, #268]	@ (8005ecc <updatedate+0x27c>)
 8005dbe:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005dc0:	e0a2      	b.n	8005f08 <updatedate+0x2b8>
	case JUIN:
		if(JOURS>30){
 8005dc2:	4b40      	ldr	r3, [pc, #256]	@ (8005ec4 <updatedate+0x274>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b1e      	cmp	r3, #30
 8005dc8:	f240 80a0 	bls.w	8005f0c <updatedate+0x2bc>
					JOURS=1;
 8005dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec4 <updatedate+0x274>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
					mois++;
 8005dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec8 <updatedate+0x278>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	4b3b      	ldr	r3, [pc, #236]	@ (8005ec8 <updatedate+0x278>)
 8005ddc:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005dde:	4b3b      	ldr	r3, [pc, #236]	@ (8005ecc <updatedate+0x27c>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	3301      	adds	r3, #1
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	4b39      	ldr	r3, [pc, #228]	@ (8005ecc <updatedate+0x27c>)
 8005de8:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005dea:	e08f      	b.n	8005f0c <updatedate+0x2bc>
	case JUILLET:
		if(JOURS>31){
 8005dec:	4b35      	ldr	r3, [pc, #212]	@ (8005ec4 <updatedate+0x274>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b1f      	cmp	r3, #31
 8005df2:	f240 808d 	bls.w	8005f10 <updatedate+0x2c0>
					JOURS=1;
 8005df6:	4b33      	ldr	r3, [pc, #204]	@ (8005ec4 <updatedate+0x274>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	701a      	strb	r2, [r3, #0]
					mois++;
 8005dfc:	4b32      	ldr	r3, [pc, #200]	@ (8005ec8 <updatedate+0x278>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	4b30      	ldr	r3, [pc, #192]	@ (8005ec8 <updatedate+0x278>)
 8005e06:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e08:	4b30      	ldr	r3, [pc, #192]	@ (8005ecc <updatedate+0x27c>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	4b2e      	ldr	r3, [pc, #184]	@ (8005ecc <updatedate+0x27c>)
 8005e12:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e14:	e07c      	b.n	8005f10 <updatedate+0x2c0>
	case AOUT:
		if(JOURS>31){
 8005e16:	4b2b      	ldr	r3, [pc, #172]	@ (8005ec4 <updatedate+0x274>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b1f      	cmp	r3, #31
 8005e1c:	d97a      	bls.n	8005f14 <updatedate+0x2c4>
					JOURS=1;
 8005e1e:	4b29      	ldr	r3, [pc, #164]	@ (8005ec4 <updatedate+0x274>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e24:	4b28      	ldr	r3, [pc, #160]	@ (8005ec8 <updatedate+0x278>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b26      	ldr	r3, [pc, #152]	@ (8005ec8 <updatedate+0x278>)
 8005e2e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e30:	4b26      	ldr	r3, [pc, #152]	@ (8005ecc <updatedate+0x27c>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	4b24      	ldr	r3, [pc, #144]	@ (8005ecc <updatedate+0x27c>)
 8005e3a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e3c:	e06a      	b.n	8005f14 <updatedate+0x2c4>
	case SEPTEMBRE:
		if(JOURS>30){
 8005e3e:	4b21      	ldr	r3, [pc, #132]	@ (8005ec4 <updatedate+0x274>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b1e      	cmp	r3, #30
 8005e44:	d968      	bls.n	8005f18 <updatedate+0x2c8>
					JOURS=1;
 8005e46:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec4 <updatedate+0x274>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e4c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ec8 <updatedate+0x278>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	4b1c      	ldr	r3, [pc, #112]	@ (8005ec8 <updatedate+0x278>)
 8005e56:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e58:	4b1c      	ldr	r3, [pc, #112]	@ (8005ecc <updatedate+0x27c>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	4b1a      	ldr	r3, [pc, #104]	@ (8005ecc <updatedate+0x27c>)
 8005e62:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e64:	e058      	b.n	8005f18 <updatedate+0x2c8>
	case OCTOBRE:
		if(JOURS>31){
 8005e66:	4b17      	ldr	r3, [pc, #92]	@ (8005ec4 <updatedate+0x274>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b1f      	cmp	r3, #31
 8005e6c:	d956      	bls.n	8005f1c <updatedate+0x2cc>
					JOURS=1;
 8005e6e:	4b15      	ldr	r3, [pc, #84]	@ (8005ec4 <updatedate+0x274>)
 8005e70:	2201      	movs	r2, #1
 8005e72:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e74:	4b14      	ldr	r3, [pc, #80]	@ (8005ec8 <updatedate+0x278>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	b2da      	uxtb	r2, r3
 8005e7c:	4b12      	ldr	r3, [pc, #72]	@ (8005ec8 <updatedate+0x278>)
 8005e7e:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005e80:	4b12      	ldr	r3, [pc, #72]	@ (8005ecc <updatedate+0x27c>)
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	3301      	adds	r3, #1
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	4b10      	ldr	r3, [pc, #64]	@ (8005ecc <updatedate+0x27c>)
 8005e8a:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005e8c:	e046      	b.n	8005f1c <updatedate+0x2cc>
	case NOVEMBRE:
		if(JOURS>30){
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ec4 <updatedate+0x274>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b1e      	cmp	r3, #30
 8005e94:	d944      	bls.n	8005f20 <updatedate+0x2d0>
					JOURS=1;
 8005e96:	4b0b      	ldr	r3, [pc, #44]	@ (8005ec4 <updatedate+0x274>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
					mois++;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec8 <updatedate+0x278>)
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b2da      	uxtb	r2, r3
 8005ea4:	4b08      	ldr	r3, [pc, #32]	@ (8005ec8 <updatedate+0x278>)
 8005ea6:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005ea8:	4b08      	ldr	r3, [pc, #32]	@ (8005ecc <updatedate+0x27c>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	4b06      	ldr	r3, [pc, #24]	@ (8005ecc <updatedate+0x27c>)
 8005eb2:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005eb4:	e034      	b.n	8005f20 <updatedate+0x2d0>
 8005eb6:	bf00      	nop
 8005eb8:	20000a94 	.word	0x20000a94
 8005ebc:	20000a96 	.word	0x20000a96
 8005ec0:	20000a95 	.word	0x20000a95
 8005ec4:	20000010 	.word	0x20000010
 8005ec8:	20000a97 	.word	0x20000a97
 8005ecc:	20000011 	.word	0x20000011
	case DECEMBRE:
		if(JOURS>31){
 8005ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8005f50 <updatedate+0x300>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	2b1f      	cmp	r3, #31
 8005ed6:	d925      	bls.n	8005f24 <updatedate+0x2d4>
					JOURS=1;
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f50 <updatedate+0x300>)
 8005eda:	2201      	movs	r2, #1
 8005edc:	701a      	strb	r2, [r3, #0]
					mois++;
 8005ede:	4b1d      	ldr	r3, [pc, #116]	@ (8005f54 <updatedate+0x304>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f54 <updatedate+0x304>)
 8005ee8:	701a      	strb	r2, [r3, #0]
					MOIS++;
 8005eea:	4b1b      	ldr	r3, [pc, #108]	@ (8005f58 <updatedate+0x308>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	4b19      	ldr	r3, [pc, #100]	@ (8005f58 <updatedate+0x308>)
 8005ef4:	701a      	strb	r2, [r3, #0]
				}
		break;
 8005ef6:	e015      	b.n	8005f24 <updatedate+0x2d4>
		break;
 8005ef8:	bf00      	nop
 8005efa:	e014      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005efc:	bf00      	nop
 8005efe:	e012      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f00:	bf00      	nop
 8005f02:	e010      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f04:	bf00      	nop
 8005f06:	e00e      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f08:	bf00      	nop
 8005f0a:	e00c      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f0c:	bf00      	nop
 8005f0e:	e00a      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f10:	bf00      	nop
 8005f12:	e008      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f14:	bf00      	nop
 8005f16:	e006      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f18:	bf00      	nop
 8005f1a:	e004      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f1c:	bf00      	nop
 8005f1e:	e002      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f20:	bf00      	nop
 8005f22:	e000      	b.n	8005f26 <updatedate+0x2d6>
		break;
 8005f24:	bf00      	nop

	}

	if(MOIS>12){
 8005f26:	4b0c      	ldr	r3, [pc, #48]	@ (8005f58 <updatedate+0x308>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b0c      	cmp	r3, #12
 8005f2c:	d90b      	bls.n	8005f46 <updatedate+0x2f6>
		mois=JANVIER;
 8005f2e:	4b09      	ldr	r3, [pc, #36]	@ (8005f54 <updatedate+0x304>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
		MOIS=1;
 8005f34:	4b08      	ldr	r3, [pc, #32]	@ (8005f58 <updatedate+0x308>)
 8005f36:	2201      	movs	r2, #1
 8005f38:	701a      	strb	r2, [r3, #0]
		ANNEE++;
 8005f3a:	4b08      	ldr	r3, [pc, #32]	@ (8005f5c <updatedate+0x30c>)
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	4b06      	ldr	r3, [pc, #24]	@ (8005f5c <updatedate+0x30c>)
 8005f44:	801a      	strh	r2, [r3, #0]
	}
}
 8005f46:	bf00      	nop
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000010 	.word	0x20000010
 8005f54:	20000a97 	.word	0x20000a97
 8005f58:	20000011 	.word	0x20000011
 8005f5c:	20000012 	.word	0x20000012

08005f60 <LL_AHB2_GRP1_EnableClock>:
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4013      	ands	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005f84:	68fb      	ldr	r3, [r7, #12]
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <LL_APB1_GRP2_EnableClock>:
{
 8005f92:	b480      	push	{r7}
 8005f94:	b085      	sub	sp, #20
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fa0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8005faa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005fc8:	4b22      	ldr	r3, [pc, #136]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8005fca:	4a23      	ldr	r2, [pc, #140]	@ (8006058 <MX_LPUART1_UART_Init+0x94>)
 8005fcc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8005fce:	4b21      	ldr	r3, [pc, #132]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8005fd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005fd4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8005fea:	220c      	movs	r2, #12
 8005fec:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fee:	4b19      	ldr	r3, [pc, #100]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005ff4:	4b17      	ldr	r3, [pc, #92]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005ffa:	4b16      	ldr	r3, [pc, #88]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006000:	4b14      	ldr	r3, [pc, #80]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8006002:	2200      	movs	r2, #0
 8006004:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8006006:	4b13      	ldr	r3, [pc, #76]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8006008:	2200      	movs	r2, #0
 800600a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800600c:	4811      	ldr	r0, [pc, #68]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 800600e:	f008 fcc1 	bl	800e994 <HAL_UART_Init>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8006018:	f7fb ff4b 	bl	8001eb2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800601c:	2100      	movs	r1, #0
 800601e:	480d      	ldr	r0, [pc, #52]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8006020:	f00a f886 	bl	8010130 <HAL_UARTEx_SetTxFifoThreshold>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800602a:	f7fb ff42 	bl	8001eb2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800602e:	2100      	movs	r1, #0
 8006030:	4808      	ldr	r0, [pc, #32]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8006032:	f00a f8bb 	bl	80101ac <HAL_UARTEx_SetRxFifoThreshold>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800603c:	f7fb ff39 	bl	8001eb2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006040:	4804      	ldr	r0, [pc, #16]	@ (8006054 <MX_LPUART1_UART_Init+0x90>)
 8006042:	f00a f83c 	bl	80100be <HAL_UARTEx_DisableFifoMode>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800604c:	f7fb ff31 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006050:	bf00      	nop
 8006052:	bd80      	pop	{r7, pc}
 8006054:	200011e8 	.word	0x200011e8
 8006058:	40008000 	.word	0x40008000

0800605c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b09c      	sub	sp, #112	@ 0x70
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006064:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006074:	f107 030c 	add.w	r3, r7, #12
 8006078:	2250      	movs	r2, #80	@ 0x50
 800607a:	2100      	movs	r1, #0
 800607c:	4618      	mov	r0, r3
 800607e:	f011 f8e8 	bl	8017252 <memset>
  if(uartHandle->Instance==LPUART1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a2f      	ldr	r2, [pc, #188]	@ (8006144 <HAL_UART_MspInit+0xe8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d157      	bne.n	800613c <HAL_UART_MspInit+0xe0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800608c:	2302      	movs	r3, #2
 800608e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 8006090:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006094:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006096:	f107 030c 	add.w	r3, r7, #12
 800609a:	4618      	mov	r0, r3
 800609c:	f006 f96d 	bl	800c37a <HAL_RCCEx_PeriphCLKConfig>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80060a6:	f7fb ff04 	bl	8001eb2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80060aa:	2001      	movs	r0, #1
 80060ac:	f7ff ff71 	bl	8005f92 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b0:	2001      	movs	r0, #1
 80060b2:	f7ff ff55 	bl	8005f60 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80060b6:	230c      	movs	r3, #12
 80060b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060ba:	2302      	movs	r3, #2
 80060bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060c2:	2300      	movs	r3, #0
 80060c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80060c6:	2308      	movs	r3, #8
 80060c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80060ce:	4619      	mov	r1, r3
 80060d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80060d4:	f001 ffae 	bl	8008034 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 80060d8:	4b1b      	ldr	r3, [pc, #108]	@ (8006148 <HAL_UART_MspInit+0xec>)
 80060da:	4a1c      	ldr	r2, [pc, #112]	@ (800614c <HAL_UART_MspInit+0xf0>)
 80060dc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80060de:	4b1a      	ldr	r3, [pc, #104]	@ (8006148 <HAL_UART_MspInit+0xec>)
 80060e0:	2210      	movs	r2, #16
 80060e2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060e4:	4b18      	ldr	r3, [pc, #96]	@ (8006148 <HAL_UART_MspInit+0xec>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060ea:	4b17      	ldr	r3, [pc, #92]	@ (8006148 <HAL_UART_MspInit+0xec>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060f0:	4b15      	ldr	r3, [pc, #84]	@ (8006148 <HAL_UART_MspInit+0xec>)
 80060f2:	2280      	movs	r2, #128	@ 0x80
 80060f4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060f6:	4b14      	ldr	r3, [pc, #80]	@ (8006148 <HAL_UART_MspInit+0xec>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060fc:	4b12      	ldr	r3, [pc, #72]	@ (8006148 <HAL_UART_MspInit+0xec>)
 80060fe:	2200      	movs	r2, #0
 8006100:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8006102:	4b11      	ldr	r3, [pc, #68]	@ (8006148 <HAL_UART_MspInit+0xec>)
 8006104:	2220      	movs	r2, #32
 8006106:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006108:	4b0f      	ldr	r3, [pc, #60]	@ (8006148 <HAL_UART_MspInit+0xec>)
 800610a:	2200      	movs	r2, #0
 800610c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800610e:	480e      	ldr	r0, [pc, #56]	@ (8006148 <HAL_UART_MspInit+0xec>)
 8006110:	f001 fc52 	bl	80079b8 <HAL_DMA_Init>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800611a:	f7fb feca 	bl	8001eb2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a09      	ldr	r2, [pc, #36]	@ (8006148 <HAL_UART_MspInit+0xec>)
 8006122:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006126:	4a08      	ldr	r2, [pc, #32]	@ (8006148 <HAL_UART_MspInit+0xec>)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 800612c:	2200      	movs	r2, #0
 800612e:	2102      	movs	r1, #2
 8006130:	2025      	movs	r0, #37	@ 0x25
 8006132:	f001 fc0c 	bl	800794e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006136:	2025      	movs	r0, #37	@ 0x25
 8006138:	f001 fc23 	bl	8007982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800613c:	bf00      	nop
 800613e:	3770      	adds	r7, #112	@ 0x70
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	40008000 	.word	0x40008000
 8006148:	2000127c 	.word	0x2000127c
 800614c:	4002001c 	.word	0x4002001c

08006150 <HAL_UART_RxCpltCallback>:
  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8006150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	if(huart->Instance==LPUART1){
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a31      	ldr	r2, [pc, #196]	@ (8006224 <HAL_UART_RxCpltCallback+0xd4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d15c      	bne.n	800621c <HAL_UART_RxCpltCallback+0xcc>
	oldPos = newPos; //keep track of the last position in the buffer
 8006162:	4b31      	ldr	r3, [pc, #196]	@ (8006228 <HAL_UART_RxCpltCallback+0xd8>)
 8006164:	881a      	ldrh	r2, [r3, #0]
 8006166:	4b31      	ldr	r3, [pc, #196]	@ (800622c <HAL_UART_RxCpltCallback+0xdc>)
 8006168:	801a      	strh	r2, [r3, #0]
			if(oldPos + 64 > DataBuffer_SIZE){ //if the buffer is full, parse it, then reset the buffer
 800616a:	4b30      	ldr	r3, [pc, #192]	@ (800622c <HAL_UART_RxCpltCallback+0xdc>)
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8006172:	d922      	bls.n	80061ba <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = DataBuffer_SIZE-oldPos;  // find out how much space is left in the main buffer
 8006174:	4b2d      	ldr	r3, [pc, #180]	@ (800622c <HAL_UART_RxCpltCallback+0xdc>)
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800617c:	81fb      	strh	r3, [r7, #14]
				memcpy ((uint8_t *)DataBuffer+oldPos, RxBuffer, datatocopy);  // copy data in that remaining space
 800617e:	4b2b      	ldr	r3, [pc, #172]	@ (800622c <HAL_UART_RxCpltCallback+0xdc>)
 8006180:	881b      	ldrh	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	4b2a      	ldr	r3, [pc, #168]	@ (8006230 <HAL_UART_RxCpltCallback+0xe0>)
 8006186:	4413      	add	r3, r2
 8006188:	89fa      	ldrh	r2, [r7, #14]
 800618a:	492a      	ldr	r1, [pc, #168]	@ (8006234 <HAL_UART_RxCpltCallback+0xe4>)
 800618c:	4618      	mov	r0, r3
 800618e:	f011 f97c 	bl	801748a <memcpy>

				oldPos = 0;  // point to the start of the buffer
 8006192:	4b26      	ldr	r3, [pc, #152]	@ (800622c <HAL_UART_RxCpltCallback+0xdc>)
 8006194:	2200      	movs	r2, #0
 8006196:	801a      	strh	r2, [r3, #0]
				memcpy ((uint8_t *)DataBuffer, (uint8_t *)RxBuffer+datatocopy, (64-datatocopy));  // copy the remaining data
 8006198:	89fb      	ldrh	r3, [r7, #14]
 800619a:	4a26      	ldr	r2, [pc, #152]	@ (8006234 <HAL_UART_RxCpltCallback+0xe4>)
 800619c:	1899      	adds	r1, r3, r2
 800619e:	89fb      	ldrh	r3, [r7, #14]
 80061a0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80061a4:	461a      	mov	r2, r3
 80061a6:	4822      	ldr	r0, [pc, #136]	@ (8006230 <HAL_UART_RxCpltCallback+0xe0>)
 80061a8:	f011 f96f 	bl	801748a <memcpy>
				newPos = (64-datatocopy);  // update the position
 80061ac:	89fb      	ldrh	r3, [r7, #14]
 80061ae:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006228 <HAL_UART_RxCpltCallback+0xd8>)
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	e01e      	b.n	80061f8 <HAL_UART_RxCpltCallback+0xa8>
			}
			else{
				memcpy((uint8_t *)DataBuffer+oldPos, RxBuffer, 64); //copy received data to the buffer
 80061ba:	4b1c      	ldr	r3, [pc, #112]	@ (800622c <HAL_UART_RxCpltCallback+0xdc>)
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	461a      	mov	r2, r3
 80061c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006230 <HAL_UART_RxCpltCallback+0xe0>)
 80061c2:	441a      	add	r2, r3
 80061c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006234 <HAL_UART_RxCpltCallback+0xe4>)
 80061c6:	4610      	mov	r0, r2
 80061c8:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80061cc:	4602      	mov	r2, r0
 80061ce:	4619      	mov	r1, r3
 80061d0:	f8d1 c000 	ldr.w	ip, [r1]
 80061d4:	684e      	ldr	r6, [r1, #4]
 80061d6:	688d      	ldr	r5, [r1, #8]
 80061d8:	68c9      	ldr	r1, [r1, #12]
 80061da:	f8c2 c000 	str.w	ip, [r2]
 80061de:	6056      	str	r6, [r2, #4]
 80061e0:	6095      	str	r5, [r2, #8]
 80061e2:	60d1      	str	r1, [r2, #12]
 80061e4:	3310      	adds	r3, #16
 80061e6:	3010      	adds	r0, #16
 80061e8:	42a3      	cmp	r3, r4
 80061ea:	d1ef      	bne.n	80061cc <HAL_UART_RxCpltCallback+0x7c>
				newPos = 64+oldPos; //update buffer position
 80061ec:	4b0f      	ldr	r3, [pc, #60]	@ (800622c <HAL_UART_RxCpltCallback+0xdc>)
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	3340      	adds	r3, #64	@ 0x40
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006228 <HAL_UART_RxCpltCallback+0xd8>)
 80061f6:	801a      	strh	r2, [r3, #0]
			}




			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);//on recoit par dma à nouveau 64 caractères
 80061f8:	2240      	movs	r2, #64	@ 0x40
 80061fa:	490e      	ldr	r1, [pc, #56]	@ (8006234 <HAL_UART_RxCpltCallback+0xe4>)
 80061fc:	480e      	ldr	r0, [pc, #56]	@ (8006238 <HAL_UART_RxCpltCallback+0xe8>)
 80061fe:	f008 fc19 	bl	800ea34 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_lpuart1_rx, DMA_IT_HT);//on desactive l'interruption afin de ne pas être interrompu tout le temps
 8006202:	4b0e      	ldr	r3, [pc, #56]	@ (800623c <HAL_UART_RxCpltCallback+0xec>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4b0c      	ldr	r3, [pc, #48]	@ (800623c <HAL_UART_RxCpltCallback+0xec>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0204 	bic.w	r2, r2, #4
 8006210:	601a      	str	r2, [r3, #0]


	HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)RxBuffer, RxBuffer_SIZE);
 8006212:	2240      	movs	r2, #64	@ 0x40
 8006214:	4907      	ldr	r1, [pc, #28]	@ (8006234 <HAL_UART_RxCpltCallback+0xe4>)
 8006216:	4808      	ldr	r0, [pc, #32]	@ (8006238 <HAL_UART_RxCpltCallback+0xe8>)
 8006218:	f008 fc0c 	bl	800ea34 <HAL_UART_Receive_DMA>

	}

}
 800621c:	bf00      	nop
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006224:	40008000 	.word	0x40008000
 8006228:	200004f0 	.word	0x200004f0
 800622c:	200004ee 	.word	0x200004ee
 8006230:	20000534 	.word	0x20000534
 8006234:	200004f4 	.word	0x200004f4
 8006238:	200011e8 	.word	0x200011e8
 800623c:	2000127c 	.word	0x2000127c

08006240 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006240:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006242:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006244:	3304      	adds	r3, #4

08006246 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006246:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006248:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800624a:	d3f9      	bcc.n	8006240 <CopyDataInit>
  bx lr
 800624c:	4770      	bx	lr

0800624e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800624e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006250:	3004      	adds	r0, #4

08006252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006252:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006254:	d3fb      	bcc.n	800624e <FillZerobss>
  bx lr
 8006256:	4770      	bx	lr

08006258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006258:	480c      	ldr	r0, [pc, #48]	@ (800628c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800625a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800625c:	f7ff fba0 	bl	80059a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006260:	480b      	ldr	r0, [pc, #44]	@ (8006290 <LoopForever+0x6>)
 8006262:	490c      	ldr	r1, [pc, #48]	@ (8006294 <LoopForever+0xa>)
 8006264:	4a0c      	ldr	r2, [pc, #48]	@ (8006298 <LoopForever+0xe>)
 8006266:	2300      	movs	r3, #0
 8006268:	f7ff ffed 	bl	8006246 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800626c:	480b      	ldr	r0, [pc, #44]	@ (800629c <LoopForever+0x12>)
 800626e:	490c      	ldr	r1, [pc, #48]	@ (80062a0 <LoopForever+0x16>)
 8006270:	4a0c      	ldr	r2, [pc, #48]	@ (80062a4 <LoopForever+0x1a>)
 8006272:	2300      	movs	r3, #0
 8006274:	f7ff ffe7 	bl	8006246 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006278:	480b      	ldr	r0, [pc, #44]	@ (80062a8 <LoopForever+0x1e>)
 800627a:	490c      	ldr	r1, [pc, #48]	@ (80062ac <LoopForever+0x22>)
 800627c:	2300      	movs	r3, #0
 800627e:	f7ff ffe8 	bl	8006252 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006282:	f011 f8d3 	bl	801742c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006286:	f7fb fc7d 	bl	8001b84 <main>

0800628a <LoopForever>:

LoopForever:
  b LoopForever
 800628a:	e7fe      	b.n	800628a <LoopForever>
  ldr   r0, =_estack
 800628c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006290:	20000008 	.word	0x20000008
 8006294:	20000308 	.word	0x20000308
 8006298:	0801e648 	.word	0x0801e648
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800629c:	20030000 	.word	0x20030000
 80062a0:	20030000 	.word	0x20030000
 80062a4:	0801e948 	.word	0x0801e948
  INIT_BSS _sbss, _ebss
 80062a8:	20000308 	.word	0x20000308
 80062ac:	20002e08 	.word	0x20002e08

080062b0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80062b0:	e7fe      	b.n	80062b0 <ADC1_IRQHandler>

080062b2 <LL_AHB1_GRP1_ForceReset>:
{
 80062b2:	b480      	push	{r7}
 80062b4:	b083      	sub	sp, #12
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1RSTR, Periphs);
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80062ca:	bf00      	nop
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <LL_AHB1_GRP1_ReleaseReset>:
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB1RSTR, Periphs);
 80062de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	43db      	mvns	r3, r3
 80062e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062ec:	4013      	ands	r3, r2
 80062ee:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <LL_AHB2_GRP1_ForceReset>:
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2RSTR, Periphs);
 8006304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4313      	orrs	r3, r2
 8006312:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <LL_AHB2_GRP1_ReleaseReset>:
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2RSTR, Periphs);
 8006328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800632c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	43db      	mvns	r3, r3
 8006332:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006336:	4013      	ands	r3, r2
 8006338:	62cb      	str	r3, [r1, #44]	@ 0x2c
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <LL_AHB3_GRP1_ForceReset>:
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3RSTR, Periphs);
 800634e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006352:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006354:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4313      	orrs	r3, r2
 800635c:	630b      	str	r3, [r1, #48]	@ 0x30
}
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr

0800636a <LL_AHB3_GRP1_ReleaseReset>:
{
 800636a:	b480      	push	{r7}
 800636c:	b083      	sub	sp, #12
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB3RSTR, Periphs);
 8006372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	43db      	mvns	r3, r3
 800637c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006380:	4013      	ands	r3, r2
 8006382:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <LL_APB1_GRP1_ForceReset>:
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8006398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800639c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800639e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4313      	orrs	r3, r2
 80063a6:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <LL_APB1_GRP2_ForceReset>:
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 80063bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <LL_APB1_GRP1_ReleaseReset>:
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 80063e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	43db      	mvns	r3, r3
 80063ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063ee:	4013      	ands	r3, r2
 80063f0:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <LL_APB1_GRP2_ReleaseReset>:
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8006406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800640a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	43db      	mvns	r3, r3
 8006410:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006414:	4013      	ands	r3, r2
 8006416:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <LL_APB2_GRP1_ForceReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 800642c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006430:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006432:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4313      	orrs	r3, r2
 800643a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <LL_APB2_GRP1_ReleaseReset>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	43db      	mvns	r3, r3
 800645a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800645e:	4013      	ands	r3, r2
 8006460:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <LL_APB3_GRP1_ForceReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ForceReset(uint32_t Periphs)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB3RSTR, Periphs);
 8006476:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800647a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800647c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4313      	orrs	r3, r2
 8006484:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8006486:	bf00      	nop
 8006488:	370c      	adds	r7, #12
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <LL_APB3_GRP1_ReleaseReset>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_RF
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_ReleaseReset(uint32_t Periphs)
{
 8006492:	b480      	push	{r7}
 8006494:	b083      	sub	sp, #12
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB3RSTR, Periphs);
 800649a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800649e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	43db      	mvns	r3, r3
 80064a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80064a8:	4013      	ands	r3, r2
 80064aa:	644b      	str	r3, [r1, #68]	@ 0x44
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064c2:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <HAL_Init+0x3c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a0b      	ldr	r2, [pc, #44]	@ (80064f4 <HAL_Init+0x3c>)
 80064c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064cc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064ce:	2003      	movs	r0, #3
 80064d0:	f001 fa32 	bl	8007938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064d4:	200f      	movs	r0, #15
 80064d6:	f000 f855 	bl	8006584 <HAL_InitTick>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	71fb      	strb	r3, [r7, #7]
 80064e4:	e001      	b.n	80064ea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80064e6:	f7ff f878 	bl	80055da <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80064ea:	79fb      	ldrb	r3, [r7, #7]
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	58004000 	.word	0x58004000

080064f8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80064fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006500:	f7ff ff46 	bl	8006390 <LL_APB1_GRP1_ForceReset>
 8006504:	f04f 30ff 	mov.w	r0, #4294967295
 8006508:	f7ff ff54 	bl	80063b4 <LL_APB1_GRP2_ForceReset>
  __HAL_RCC_APB1_RELEASE_RESET();
 800650c:	f04f 30ff 	mov.w	r0, #4294967295
 8006510:	f7ff ff62 	bl	80063d8 <LL_APB1_GRP1_ReleaseReset>
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	f7ff ff71 	bl	80063fe <LL_APB1_GRP2_ReleaseReset>

  __HAL_RCC_APB2_FORCE_RESET();
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	f7ff ff80 	bl	8006424 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_APB2_RELEASE_RESET();
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	f7ff ff8e 	bl	8006448 <LL_APB2_GRP1_ReleaseReset>

  __HAL_RCC_APB3_FORCE_RESET();
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	f7ff ff9d 	bl	800646e <LL_APB3_GRP1_ForceReset>
  __HAL_RCC_APB3_RELEASE_RESET();
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	f7ff ffab 	bl	8006492 <LL_APB3_GRP1_ReleaseReset>

  __HAL_RCC_AHB1_FORCE_RESET();
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	f7ff feb7 	bl	80062b2 <LL_AHB1_GRP1_ForceReset>
  __HAL_RCC_AHB1_RELEASE_RESET();
 8006544:	f04f 30ff 	mov.w	r0, #4294967295
 8006548:	f7ff fec5 	bl	80062d6 <LL_AHB1_GRP1_ReleaseReset>

  __HAL_RCC_AHB2_FORCE_RESET();
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	f7ff fed4 	bl	80062fc <LL_AHB2_GRP1_ForceReset>
  __HAL_RCC_AHB2_RELEASE_RESET();
 8006554:	f04f 30ff 	mov.w	r0, #4294967295
 8006558:	f7ff fee2 	bl	8006320 <LL_AHB2_GRP1_ReleaseReset>

  __HAL_RCC_AHB3_FORCE_RESET();
 800655c:	f04f 30ff 	mov.w	r0, #4294967295
 8006560:	f7ff fef1 	bl	8006346 <LL_AHB3_GRP1_ForceReset>
  __HAL_RCC_AHB3_RELEASE_RESET();
 8006564:	f04f 30ff 	mov.w	r0, #4294967295
 8006568:	f7ff feff 	bl	800636a <LL_AHB3_GRP1_ReleaseReset>

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800656c:	f000 f803 	bl	8006576 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8006576:	b480      	push	{r7}
 8006578:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800657a:	bf00      	nop
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8006590:	4b17      	ldr	r3, [pc, #92]	@ (80065f0 <HAL_InitTick+0x6c>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d024      	beq.n	80065e2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006598:	f005 fc5e 	bl	800be58 <HAL_RCC_GetHCLKFreq>
 800659c:	4602      	mov	r2, r0
 800659e:	4b14      	ldr	r3, [pc, #80]	@ (80065f0 <HAL_InitTick+0x6c>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	4619      	mov	r1, r3
 80065a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80065a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80065ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b0:	4618      	mov	r0, r3
 80065b2:	f001 f9f4 	bl	800799e <HAL_SYSTICK_Config>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10f      	bne.n	80065dc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b0f      	cmp	r3, #15
 80065c0:	d809      	bhi.n	80065d6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80065c2:	2200      	movs	r2, #0
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	f001 f9c0 	bl	800794e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80065ce:	4a09      	ldr	r2, [pc, #36]	@ (80065f4 <HAL_InitTick+0x70>)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	e007      	b.n	80065e6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	73fb      	strb	r3, [r7, #15]
 80065da:	e004      	b.n	80065e6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	73fb      	strb	r3, [r7, #15]
 80065e0:	e001      	b.n	80065e6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	20000034 	.word	0x20000034
 80065f4:	20000030 	.word	0x20000030

080065f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80065f8:	b480      	push	{r7}
 80065fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80065fc:	4b06      	ldr	r3, [pc, #24]	@ (8006618 <HAL_IncTick+0x20>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	4b06      	ldr	r3, [pc, #24]	@ (800661c <HAL_IncTick+0x24>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4413      	add	r3, r2
 8006608:	4a04      	ldr	r2, [pc, #16]	@ (800661c <HAL_IncTick+0x24>)
 800660a:	6013      	str	r3, [r2, #0]
}
 800660c:	bf00      	nop
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	20000034 	.word	0x20000034
 800661c:	200012dc 	.word	0x200012dc

08006620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return uwTick;
 8006624:	4b03      	ldr	r3, [pc, #12]	@ (8006634 <HAL_GetTick+0x14>)
 8006626:	681b      	ldr	r3, [r3, #0]
}
 8006628:	4618      	mov	r0, r3
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	200012dc 	.word	0x200012dc

08006638 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800663c:	4b03      	ldr	r3, [pc, #12]	@ (800664c <HAL_GetTickPrio+0x14>)
 800663e:	681b      	ldr	r3, [r3, #0]
}
 8006640:	4618      	mov	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20000030 	.word	0x20000030

08006650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006658:	f7ff ffe2 	bl	8006620 <HAL_GetTick>
 800665c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006668:	d005      	beq.n	8006676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800666a:	4b0a      	ldr	r3, [pc, #40]	@ (8006694 <HAL_Delay+0x44>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4413      	add	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006676:	bf00      	nop
 8006678:	f7ff ffd2 	bl	8006620 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	429a      	cmp	r2, r3
 8006686:	d8f7      	bhi.n	8006678 <HAL_Delay+0x28>
  {
  }
}
 8006688:	bf00      	nop
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20000034 	.word	0x20000034

08006698 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80066be:	b480      	push	{r7}
 80066c0:	b083      	sub	sp, #12
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	609a      	str	r2, [r3, #8]
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
 800670c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3360      	adds	r3, #96	@ 0x60
 8006712:	461a      	mov	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	4b08      	ldr	r3, [pc, #32]	@ (8006744 <LL_ADC_SetOffset+0x44>)
 8006722:	4013      	ands	r3, r2
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	4313      	orrs	r3, r2
 8006730:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	03fff000 	.word	0x03fff000

08006748 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3360      	adds	r3, #96	@ 0x60
 8006756:	461a      	mov	r2, r3
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3360      	adds	r3, #96	@ 0x60
 8006784:	461a      	mov	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	431a      	orrs	r2, r3
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80067be:	2301      	movs	r3, #1
 80067c0:	e000      	b.n	80067c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80067c2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	3330      	adds	r3, #48	@ 0x30
 80067e0:	461a      	mov	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	0a1b      	lsrs	r3, r3, #8
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	f003 030c 	and.w	r3, r3, #12
 80067ec:	4413      	add	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	211f      	movs	r1, #31
 80067fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006800:	43db      	mvns	r3, r3
 8006802:	401a      	ands	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	0e9b      	lsrs	r3, r3, #26
 8006808:	f003 011f 	and.w	r1, r3, #31
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	fa01 f303 	lsl.w	r3, r1, r3
 8006816:	431a      	orrs	r2, r3
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3314      	adds	r3, #20
 8006838:	461a      	mov	r2, r3
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	0e5b      	lsrs	r3, r3, #25
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	4413      	add	r3, r2
 8006846:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	0d1b      	lsrs	r3, r3, #20
 8006850:	f003 031f 	and.w	r3, r3, #31
 8006854:	2107      	movs	r1, #7
 8006856:	fa01 f303 	lsl.w	r3, r1, r3
 800685a:	43db      	mvns	r3, r3
 800685c:	401a      	ands	r2, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	0d1b      	lsrs	r3, r3, #20
 8006862:	f003 031f 	and.w	r3, r3, #31
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	fa01 f303 	lsl.w	r3, r1, r3
 800686c:	431a      	orrs	r2, r3
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
	...

08006880 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006898:	43db      	mvns	r3, r3
 800689a:	401a      	ands	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f003 0318 	and.w	r3, r3, #24
 80068a2:	4908      	ldr	r1, [pc, #32]	@ (80068c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80068a4:	40d9      	lsrs	r1, r3
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	400b      	ands	r3, r1
 80068aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ae:	431a      	orrs	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80068b6:	bf00      	nop
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	0007ffff 	.word	0x0007ffff

080068c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80068d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6093      	str	r3, [r2, #8]
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80068fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006900:	d101      	bne.n	8006906 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006906:	2300      	movs	r3, #0
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006924:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006928:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800694c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006950:	d101      	bne.n	8006956 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006974:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006978:	f043 0201 	orr.w	r2, r3, #1
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b01      	cmp	r3, #1
 800699e:	d101      	bne.n	80069a4 <LL_ADC_IsEnabled+0x18>
 80069a0:	2301      	movs	r3, #1
 80069a2:	e000      	b.n	80069a6 <LL_ADC_IsEnabled+0x1a>
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069c2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80069c6:	f043 0204 	orr.w	r2, r3, #4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d101      	bne.n	80069f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80069ee:	2301      	movs	r3, #1
 80069f0:	e000      	b.n	80069f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d101      	bne.n	8006a18 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006a18:	2300      	movs	r3, #0
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
	...

08006a28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d101      	bne.n	8006a46 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e12e      	b.n	8006ca4 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fa fb3d 	bl	80010d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff ff3d 	bl	80068ec <LL_ADC_IsDeepPowerDownEnabled>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff ff23 	bl	80068c8 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff ff58 	bl	800693c <LL_ADC_IsInternalRegulatorEnabled>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d115      	bne.n	8006abe <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff ff3c 	bl	8006914 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a9c:	4b83      	ldr	r3, [pc, #524]	@ (8006cac <HAL_ADC_Init+0x284>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	099b      	lsrs	r3, r3, #6
 8006aa2:	4a83      	ldr	r2, [pc, #524]	@ (8006cb0 <HAL_ADC_Init+0x288>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	099b      	lsrs	r3, r3, #6
 8006aaa:	3301      	adds	r3, #1
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ab0:	e002      	b.n	8006ab8 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1f9      	bne.n	8006ab2 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7ff ff3a 	bl	800693c <LL_ADC_IsInternalRegulatorEnabled>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d10d      	bne.n	8006aea <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad2:	f043 0210 	orr.w	r2, r3, #16
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ade:	f043 0201 	orr.w	r2, r3, #1
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7ff ff73 	bl	80069da <LL_ADC_REG_IsConversionOngoing>
 8006af4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f040 80c7 	bne.w	8006c92 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f040 80c3 	bne.w	8006c92 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b10:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006b14:	f043 0202 	orr.w	r2, r3, #2
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff ff33 	bl	800698c <LL_ADC_IsEnabled>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10b      	bne.n	8006b44 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006b2c:	4861      	ldr	r0, [pc, #388]	@ (8006cb4 <HAL_ADC_Init+0x28c>)
 8006b2e:	f7ff ff2d 	bl	800698c <LL_ADC_IsEnabled>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d105      	bne.n	8006b44 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	485e      	ldr	r0, [pc, #376]	@ (8006cb8 <HAL_ADC_Init+0x290>)
 8006b40:	f7ff fdaa 	bl	8006698 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	7e5b      	ldrb	r3, [r3, #25]
 8006b48:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b4e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006b54:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006b5a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b62:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8006b64:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d106      	bne.n	8006b84 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	045b      	lsls	r3, r3, #17
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b90:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68da      	ldr	r2, [r3, #12]
 8006ba6:	4b45      	ldr	r3, [pc, #276]	@ (8006cbc <HAL_ADC_Init+0x294>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6812      	ldr	r2, [r2, #0]
 8006bae:	69b9      	ldr	r1, [r7, #24]
 8006bb0:	430b      	orrs	r3, r1
 8006bb2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff ff0e 	bl	80069da <LL_ADC_REG_IsConversionOngoing>
 8006bbe:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7ff ff1b 	bl	8006a00 <LL_ADC_INJ_IsConversionOngoing>
 8006bca:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d13d      	bne.n	8006c4e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d13a      	bne.n	8006c4e <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006bdc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006be4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006be6:	4313      	orrs	r3, r2
 8006be8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006bf4:	f023 0302 	bic.w	r3, r3, #2
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6812      	ldr	r2, [r2, #0]
 8006bfc:	69b9      	ldr	r1, [r7, #24]
 8006bfe:	430b      	orrs	r3, r1
 8006c00:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d118      	bne.n	8006c3e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006c16:	f023 0304 	bic.w	r3, r3, #4
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006c22:	4311      	orrs	r1, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8006c28:	4311      	orrs	r1, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	611a      	str	r2, [r3, #16]
 8006c3c:	e007      	b.n	8006c4e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d10c      	bne.n	8006c70 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c5c:	f023 010f 	bic.w	r1, r3, #15
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	1e5a      	subs	r2, r3, #1
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006c6e:	e007      	b.n	8006c80 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 020f 	bic.w	r2, r2, #15
 8006c7e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c84:	f023 0303 	bic.w	r3, r3, #3
 8006c88:	f043 0201 	orr.w	r2, r3, #1
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c90:	e007      	b.n	8006ca2 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c96:	f043 0210 	orr.w	r2, r3, #16
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3720      	adds	r7, #32
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	2000002c 	.word	0x2000002c
 8006cb0:	053e2d63 	.word	0x053e2d63
 8006cb4:	50040000 	.word	0x50040000
 8006cb8:	50040300 	.word	0x50040300
 8006cbc:	fff0c007 	.word	0xfff0c007

08006cc0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fe82 	bl	80069da <LL_ADC_REG_IsConversionOngoing>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d167      	bne.n	8006dac <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d101      	bne.n	8006cea <HAL_ADC_Start_DMA+0x2a>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e063      	b.n	8006db2 <HAL_ADC_Start_DMA+0xf2>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006cf2:	68f8      	ldr	r0, [r7, #12]
 8006cf4:	f000 fc42 	bl	800757c <ADC_Enable>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006cfc:	7dfb      	ldrb	r3, [r7, #23]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d14f      	bne.n	8006da2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d006      	beq.n	8006d30 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d26:	f023 0206 	bic.w	r2, r3, #6
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8006d2e:	e002      	b.n	8006d36 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d3a:	4a20      	ldr	r2, [pc, #128]	@ (8006dbc <HAL_ADC_Start_DMA+0xfc>)
 8006d3c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d42:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc0 <HAL_ADC_Start_DMA+0x100>)
 8006d44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <HAL_ADC_Start_DMA+0x104>)
 8006d4c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	221c      	movs	r2, #28
 8006d54:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0210 	orr.w	r2, r2, #16
 8006d6c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f042 0201 	orr.w	r2, r2, #1
 8006d7c:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3340      	adds	r3, #64	@ 0x40
 8006d88:	4619      	mov	r1, r3
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f000 febb 	bl	8007b08 <HAL_DMA_Start_IT>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fe09 	bl	80069b2 <LL_ADC_REG_StartConversion>
 8006da0:	e006      	b.n	8006db0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006daa:	e001      	b.n	8006db0 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
 8006dae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	08007671 	.word	0x08007671
 8006dc0:	08007749 	.word	0x08007749
 8006dc4:	08007765 	.word	0x08007765

08006dc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b0b6      	sub	sp, #216	@ 0xd8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006e00:	2300      	movs	r3, #0
 8006e02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_ADC_ConfigChannel+0x22>
 8006e0e:	2302      	movs	r3, #2
 8006e10:	e39f      	b.n	8007552 <HAL_ADC_ConfigChannel+0x762>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fddb 	bl	80069da <LL_ADC_REG_IsConversionOngoing>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f040 8384 	bne.w	8007534 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	6859      	ldr	r1, [r3, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	f7ff fcc9 	bl	80067d0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f7ff fdc9 	bl	80069da <LL_ADC_REG_IsConversionOngoing>
 8006e48:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fdd5 	bl	8006a00 <LL_ADC_INJ_IsConversionOngoing>
 8006e56:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f040 81a6 	bne.w	80071b0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f040 81a1 	bne.w	80071b0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6818      	ldr	r0, [r3, #0]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	6819      	ldr	r1, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f7ff fcd4 	bl	8006828 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	695a      	ldr	r2, [r3, #20]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	08db      	lsrs	r3, r3, #3
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	2b04      	cmp	r3, #4
 8006ea0:	d00a      	beq.n	8006eb8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6818      	ldr	r0, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	6919      	ldr	r1, [r3, #16]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eb2:	f7ff fc25 	bl	8006700 <LL_ADC_SetOffset>
 8006eb6:	e17b      	b.n	80071b0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7ff fc42 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <HAL_ADC_ConfigChannel+0xf4>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7ff fc37 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8006eda:	4603      	mov	r3, r0
 8006edc:	0e9b      	lsrs	r3, r3, #26
 8006ede:	f003 021f 	and.w	r2, r3, #31
 8006ee2:	e01e      	b.n	8006f22 <HAL_ADC_ConfigChannel+0x132>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2100      	movs	r1, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fc2c 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ef6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006efa:	fa93 f3a3 	rbit	r3, r3
 8006efe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8006f12:	2320      	movs	r3, #32
 8006f14:	e004      	b.n	8006f20 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8006f16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f1a:	fab3 f383 	clz	r3, r3
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	461a      	mov	r2, r3
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d105      	bne.n	8006f3a <HAL_ADC_ConfigChannel+0x14a>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	0e9b      	lsrs	r3, r3, #26
 8006f34:	f003 031f 	and.w	r3, r3, #31
 8006f38:	e018      	b.n	8006f6c <HAL_ADC_ConfigChannel+0x17c>
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006f46:	fa93 f3a3 	rbit	r3, r3
 8006f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006f4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006f56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8006f5e:	2320      	movs	r3, #32
 8006f60:	e004      	b.n	8006f6c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8006f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006f66:	fab3 f383 	clz	r3, r3
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d106      	bne.n	8006f7e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2200      	movs	r2, #0
 8006f76:	2100      	movs	r1, #0
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7ff fbfb 	bl	8006774 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2101      	movs	r1, #1
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff fbdf 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10a      	bne.n	8006faa <HAL_ADC_ConfigChannel+0x1ba>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2101      	movs	r1, #1
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7ff fbd4 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	0e9b      	lsrs	r3, r3, #26
 8006fa4:	f003 021f 	and.w	r2, r3, #31
 8006fa8:	e01e      	b.n	8006fe8 <HAL_ADC_ConfigChannel+0x1f8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2101      	movs	r1, #1
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fbc9 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006fc0:	fa93 f3a3 	rbit	r3, r3
 8006fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006fc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8006fd8:	2320      	movs	r3, #32
 8006fda:	e004      	b.n	8006fe6 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8006fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006fe0:	fab3 f383 	clz	r3, r3
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d105      	bne.n	8007000 <HAL_ADC_ConfigChannel+0x210>
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	0e9b      	lsrs	r3, r3, #26
 8006ffa:	f003 031f 	and.w	r3, r3, #31
 8006ffe:	e018      	b.n	8007032 <HAL_ADC_ConfigChannel+0x242>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007008:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800700c:	fa93 f3a3 	rbit	r3, r3
 8007010:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007014:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007018:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800701c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8007024:	2320      	movs	r3, #32
 8007026:	e004      	b.n	8007032 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8007028:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800702c:	fab3 f383 	clz	r3, r3
 8007030:	b2db      	uxtb	r3, r3
 8007032:	429a      	cmp	r2, r3
 8007034:	d106      	bne.n	8007044 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2200      	movs	r2, #0
 800703c:	2101      	movs	r1, #1
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff fb98 	bl	8006774 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2102      	movs	r1, #2
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fb7c 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8007050:	4603      	mov	r3, r0
 8007052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10a      	bne.n	8007070 <HAL_ADC_ConfigChannel+0x280>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2102      	movs	r1, #2
 8007060:	4618      	mov	r0, r3
 8007062:	f7ff fb71 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8007066:	4603      	mov	r3, r0
 8007068:	0e9b      	lsrs	r3, r3, #26
 800706a:	f003 021f 	and.w	r2, r3, #31
 800706e:	e01e      	b.n	80070ae <HAL_ADC_ConfigChannel+0x2be>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2102      	movs	r1, #2
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff fb66 	bl	8006748 <LL_ADC_GetOffsetChannel>
 800707c:	4603      	mov	r3, r0
 800707e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007086:	fa93 f3a3 	rbit	r3, r3
 800708a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800708e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007096:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 800709e:	2320      	movs	r3, #32
 80070a0:	e004      	b.n	80070ac <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80070a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80070a6:	fab3 f383 	clz	r3, r3
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	461a      	mov	r2, r3
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d105      	bne.n	80070c6 <HAL_ADC_ConfigChannel+0x2d6>
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	0e9b      	lsrs	r3, r3, #26
 80070c0:	f003 031f 	and.w	r3, r3, #31
 80070c4:	e016      	b.n	80070f4 <HAL_ADC_ConfigChannel+0x304>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070d2:	fa93 f3a3 	rbit	r3, r3
 80070d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80070d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80070da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80070de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80070e6:	2320      	movs	r3, #32
 80070e8:	e004      	b.n	80070f4 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80070ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070ee:	fab3 f383 	clz	r3, r3
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d106      	bne.n	8007106 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2200      	movs	r2, #0
 80070fe:	2102      	movs	r1, #2
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff fb37 	bl	8006774 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2103      	movs	r1, #3
 800710c:	4618      	mov	r0, r3
 800710e:	f7ff fb1b 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8007112:	4603      	mov	r3, r0
 8007114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10a      	bne.n	8007132 <HAL_ADC_ConfigChannel+0x342>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	2103      	movs	r1, #3
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff fb10 	bl	8006748 <LL_ADC_GetOffsetChannel>
 8007128:	4603      	mov	r3, r0
 800712a:	0e9b      	lsrs	r3, r3, #26
 800712c:	f003 021f 	and.w	r2, r3, #31
 8007130:	e017      	b.n	8007162 <HAL_ADC_ConfigChannel+0x372>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2103      	movs	r1, #3
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fb05 	bl	8006748 <LL_ADC_GetOffsetChannel>
 800713e:	4603      	mov	r3, r0
 8007140:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007144:	fa93 f3a3 	rbit	r3, r3
 8007148:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800714a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800714c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800714e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007150:	2b00      	cmp	r3, #0
 8007152:	d101      	bne.n	8007158 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8007154:	2320      	movs	r3, #32
 8007156:	e003      	b.n	8007160 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8007158:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800715a:	fab3 f383 	clz	r3, r3
 800715e:	b2db      	uxtb	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800716a:	2b00      	cmp	r3, #0
 800716c:	d105      	bne.n	800717a <HAL_ADC_ConfigChannel+0x38a>
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	0e9b      	lsrs	r3, r3, #26
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	e011      	b.n	800719e <HAL_ADC_ConfigChannel+0x3ae>
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007180:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007182:	fa93 f3a3 	rbit	r3, r3
 8007186:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800718a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800718c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d101      	bne.n	8007196 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8007192:	2320      	movs	r3, #32
 8007194:	e003      	b.n	800719e <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8007196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007198:	fab3 f383 	clz	r3, r3
 800719c:	b2db      	uxtb	r3, r3
 800719e:	429a      	cmp	r2, r3
 80071a0:	d106      	bne.n	80071b0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2200      	movs	r2, #0
 80071a8:	2103      	movs	r1, #3
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fae2 	bl	8006774 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fbe9 	bl	800698c <LL_ADC_IsEnabled>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 81c2 	bne.w	8007546 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6818      	ldr	r0, [r3, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	6819      	ldr	r1, [r3, #0]
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f7ff fb56 	bl	8006880 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	4a8e      	ldr	r2, [pc, #568]	@ (8007414 <HAL_ADC_ConfigChannel+0x624>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	f040 8130 	bne.w	8007440 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10b      	bne.n	8007208 <HAL_ADC_ConfigChannel+0x418>
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	0e9b      	lsrs	r3, r3, #26
 80071f6:	3301      	adds	r3, #1
 80071f8:	f003 031f 	and.w	r3, r3, #31
 80071fc:	2b09      	cmp	r3, #9
 80071fe:	bf94      	ite	ls
 8007200:	2301      	movls	r3, #1
 8007202:	2300      	movhi	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	e019      	b.n	800723c <HAL_ADC_ConfigChannel+0x44c>
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800720e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007210:	fa93 f3a3 	rbit	r3, r3
 8007214:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007216:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007218:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800721a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8007220:	2320      	movs	r3, #32
 8007222:	e003      	b.n	800722c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8007224:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007226:	fab3 f383 	clz	r3, r3
 800722a:	b2db      	uxtb	r3, r3
 800722c:	3301      	adds	r3, #1
 800722e:	f003 031f 	and.w	r3, r3, #31
 8007232:	2b09      	cmp	r3, #9
 8007234:	bf94      	ite	ls
 8007236:	2301      	movls	r3, #1
 8007238:	2300      	movhi	r3, #0
 800723a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800723c:	2b00      	cmp	r3, #0
 800723e:	d079      	beq.n	8007334 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007248:	2b00      	cmp	r3, #0
 800724a:	d107      	bne.n	800725c <HAL_ADC_ConfigChannel+0x46c>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	0e9b      	lsrs	r3, r3, #26
 8007252:	3301      	adds	r3, #1
 8007254:	069b      	lsls	r3, r3, #26
 8007256:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800725a:	e015      	b.n	8007288 <HAL_ADC_ConfigChannel+0x498>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007264:	fa93 f3a3 	rbit	r3, r3
 8007268:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800726a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800726c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800726e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8007274:	2320      	movs	r3, #32
 8007276:	e003      	b.n	8007280 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8007278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800727a:	fab3 f383 	clz	r3, r3
 800727e:	b2db      	uxtb	r3, r3
 8007280:	3301      	adds	r3, #1
 8007282:	069b      	lsls	r3, r3, #26
 8007284:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <HAL_ADC_ConfigChannel+0x4b8>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	0e9b      	lsrs	r3, r3, #26
 800729a:	3301      	adds	r3, #1
 800729c:	f003 031f 	and.w	r3, r3, #31
 80072a0:	2101      	movs	r1, #1
 80072a2:	fa01 f303 	lsl.w	r3, r1, r3
 80072a6:	e017      	b.n	80072d8 <HAL_ADC_ConfigChannel+0x4e8>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072b0:	fa93 f3a3 	rbit	r3, r3
 80072b4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80072b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80072ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d101      	bne.n	80072c4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80072c0:	2320      	movs	r3, #32
 80072c2:	e003      	b.n	80072cc <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80072c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c6:	fab3 f383 	clz	r3, r3
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	3301      	adds	r3, #1
 80072ce:	f003 031f 	and.w	r3, r3, #31
 80072d2:	2101      	movs	r1, #1
 80072d4:	fa01 f303 	lsl.w	r3, r1, r3
 80072d8:	ea42 0103 	orr.w	r1, r2, r3
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10a      	bne.n	80072fe <HAL_ADC_ConfigChannel+0x50e>
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	0e9b      	lsrs	r3, r3, #26
 80072ee:	3301      	adds	r3, #1
 80072f0:	f003 021f 	and.w	r2, r3, #31
 80072f4:	4613      	mov	r3, r2
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	4413      	add	r3, r2
 80072fa:	051b      	lsls	r3, r3, #20
 80072fc:	e018      	b.n	8007330 <HAL_ADC_ConfigChannel+0x540>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007306:	fa93 f3a3 	rbit	r3, r3
 800730a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800730c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800730e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8007316:	2320      	movs	r3, #32
 8007318:	e003      	b.n	8007322 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800731a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800731c:	fab3 f383 	clz	r3, r3
 8007320:	b2db      	uxtb	r3, r3
 8007322:	3301      	adds	r3, #1
 8007324:	f003 021f 	and.w	r2, r3, #31
 8007328:	4613      	mov	r3, r2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007330:	430b      	orrs	r3, r1
 8007332:	e080      	b.n	8007436 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800733c:	2b00      	cmp	r3, #0
 800733e:	d107      	bne.n	8007350 <HAL_ADC_ConfigChannel+0x560>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	0e9b      	lsrs	r3, r3, #26
 8007346:	3301      	adds	r3, #1
 8007348:	069b      	lsls	r3, r3, #26
 800734a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800734e:	e015      	b.n	800737c <HAL_ADC_ConfigChannel+0x58c>
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007358:	fa93 f3a3 	rbit	r3, r3
 800735c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007360:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8007362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8007368:	2320      	movs	r3, #32
 800736a:	e003      	b.n	8007374 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	fab3 f383 	clz	r3, r3
 8007372:	b2db      	uxtb	r3, r3
 8007374:	3301      	adds	r3, #1
 8007376:	069b      	lsls	r3, r3, #26
 8007378:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007384:	2b00      	cmp	r3, #0
 8007386:	d109      	bne.n	800739c <HAL_ADC_ConfigChannel+0x5ac>
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	0e9b      	lsrs	r3, r3, #26
 800738e:	3301      	adds	r3, #1
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	2101      	movs	r1, #1
 8007396:	fa01 f303 	lsl.w	r3, r1, r3
 800739a:	e017      	b.n	80073cc <HAL_ADC_ConfigChannel+0x5dc>
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	fa93 f3a3 	rbit	r3, r3
 80073a8:	61fb      	str	r3, [r7, #28]
  return result;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80073b4:	2320      	movs	r3, #32
 80073b6:	e003      	b.n	80073c0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	fab3 f383 	clz	r3, r3
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	3301      	adds	r3, #1
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	2101      	movs	r1, #1
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	ea42 0103 	orr.w	r1, r2, r3
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10d      	bne.n	80073f8 <HAL_ADC_ConfigChannel+0x608>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	0e9b      	lsrs	r3, r3, #26
 80073e2:	3301      	adds	r3, #1
 80073e4:	f003 021f 	and.w	r2, r3, #31
 80073e8:	4613      	mov	r3, r2
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	4413      	add	r3, r2
 80073ee:	3b1e      	subs	r3, #30
 80073f0:	051b      	lsls	r3, r3, #20
 80073f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80073f6:	e01d      	b.n	8007434 <HAL_ADC_ConfigChannel+0x644>
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	fa93 f3a3 	rbit	r3, r3
 8007404:	613b      	str	r3, [r7, #16]
  return result;
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d103      	bne.n	8007418 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8007410:	2320      	movs	r3, #32
 8007412:	e005      	b.n	8007420 <HAL_ADC_ConfigChannel+0x630>
 8007414:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	fab3 f383 	clz	r3, r3
 800741e:	b2db      	uxtb	r3, r3
 8007420:	3301      	adds	r3, #1
 8007422:	f003 021f 	and.w	r2, r3, #31
 8007426:	4613      	mov	r3, r2
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	4413      	add	r3, r2
 800742c:	3b1e      	subs	r3, #30
 800742e:	051b      	lsls	r3, r3, #20
 8007430:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007434:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800743a:	4619      	mov	r1, r3
 800743c:	f7ff f9f4 	bl	8006828 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	4b45      	ldr	r3, [pc, #276]	@ (800755c <HAL_ADC_ConfigChannel+0x76c>)
 8007446:	4013      	ands	r3, r2
 8007448:	2b00      	cmp	r3, #0
 800744a:	d07c      	beq.n	8007546 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800744c:	4844      	ldr	r0, [pc, #272]	@ (8007560 <HAL_ADC_ConfigChannel+0x770>)
 800744e:	f7ff f949 	bl	80066e4 <LL_ADC_GetCommonPathInternalCh>
 8007452:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007456:	4843      	ldr	r0, [pc, #268]	@ (8007564 <HAL_ADC_ConfigChannel+0x774>)
 8007458:	f7ff fa98 	bl	800698c <LL_ADC_IsEnabled>
 800745c:	4603      	mov	r3, r0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d15e      	bne.n	8007520 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a40      	ldr	r2, [pc, #256]	@ (8007568 <HAL_ADC_ConfigChannel+0x778>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d127      	bne.n	80074bc <HAL_ADC_ConfigChannel+0x6cc>
 800746c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007470:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d121      	bne.n	80074bc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a39      	ldr	r2, [pc, #228]	@ (8007564 <HAL_ADC_ConfigChannel+0x774>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d161      	bne.n	8007546 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007482:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007486:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800748a:	4619      	mov	r1, r3
 800748c:	4834      	ldr	r0, [pc, #208]	@ (8007560 <HAL_ADC_ConfigChannel+0x770>)
 800748e:	f7ff f916 	bl	80066be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007492:	4b36      	ldr	r3, [pc, #216]	@ (800756c <HAL_ADC_ConfigChannel+0x77c>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	099b      	lsrs	r3, r3, #6
 8007498:	4a35      	ldr	r2, [pc, #212]	@ (8007570 <HAL_ADC_ConfigChannel+0x780>)
 800749a:	fba2 2303 	umull	r2, r3, r2, r3
 800749e:	099b      	lsrs	r3, r3, #6
 80074a0:	1c5a      	adds	r2, r3, #1
 80074a2:	4613      	mov	r3, r2
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	4413      	add	r3, r2
 80074a8:	009b      	lsls	r3, r3, #2
 80074aa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80074ac:	e002      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f9      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80074ba:	e044      	b.n	8007546 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007574 <HAL_ADC_ConfigChannel+0x784>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d113      	bne.n	80074ee <HAL_ADC_ConfigChannel+0x6fe>
 80074c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10d      	bne.n	80074ee <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a23      	ldr	r2, [pc, #140]	@ (8007564 <HAL_ADC_ConfigChannel+0x774>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d134      	bne.n	8007546 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80074dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80074e4:	4619      	mov	r1, r3
 80074e6:	481e      	ldr	r0, [pc, #120]	@ (8007560 <HAL_ADC_ConfigChannel+0x770>)
 80074e8:	f7ff f8e9 	bl	80066be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80074ec:	e02b      	b.n	8007546 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a21      	ldr	r2, [pc, #132]	@ (8007578 <HAL_ADC_ConfigChannel+0x788>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d126      	bne.n	8007546 <HAL_ADC_ConfigChannel+0x756>
 80074f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80074fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d120      	bne.n	8007546 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a16      	ldr	r2, [pc, #88]	@ (8007564 <HAL_ADC_ConfigChannel+0x774>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d11b      	bne.n	8007546 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800750e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007512:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007516:	4619      	mov	r1, r3
 8007518:	4811      	ldr	r0, [pc, #68]	@ (8007560 <HAL_ADC_ConfigChannel+0x770>)
 800751a:	f7ff f8d0 	bl	80066be <LL_ADC_SetCommonPathInternalCh>
 800751e:	e012      	b.n	8007546 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007524:	f043 0220 	orr.w	r2, r3, #32
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007532:	e008      	b.n	8007546 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007538:	f043 0220 	orr.w	r2, r3, #32
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800754e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007552:	4618      	mov	r0, r3
 8007554:	37d8      	adds	r7, #216	@ 0xd8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	80080000 	.word	0x80080000
 8007560:	50040300 	.word	0x50040300
 8007564:	50040000 	.word	0x50040000
 8007568:	c7520000 	.word	0xc7520000
 800756c:	2000002c 	.word	0x2000002c
 8007570:	053e2d63 	.word	0x053e2d63
 8007574:	cb840000 	.word	0xcb840000
 8007578:	80000001 	.word	0x80000001

0800757c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007584:	2300      	movs	r3, #0
 8007586:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff f9fd 	bl	800698c <LL_ADC_IsEnabled>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d15e      	bne.n	8007656 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	4b30      	ldr	r3, [pc, #192]	@ (8007660 <ADC_Enable+0xe4>)
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00d      	beq.n	80075c2 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075aa:	f043 0210 	orr.w	r2, r3, #16
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075b6:	f043 0201 	orr.w	r2, r3, #1
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e04a      	b.n	8007658 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7ff f9cc 	bl	8006964 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80075cc:	4825      	ldr	r0, [pc, #148]	@ (8007664 <ADC_Enable+0xe8>)
 80075ce:	f7ff f889 	bl	80066e4 <LL_ADC_GetCommonPathInternalCh>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00f      	beq.n	80075fc <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80075dc:	4b22      	ldr	r3, [pc, #136]	@ (8007668 <ADC_Enable+0xec>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	099b      	lsrs	r3, r3, #6
 80075e2:	4a22      	ldr	r2, [pc, #136]	@ (800766c <ADC_Enable+0xf0>)
 80075e4:	fba2 2303 	umull	r2, r3, r2, r3
 80075e8:	099b      	lsrs	r3, r3, #6
 80075ea:	3301      	adds	r3, #1
 80075ec:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80075ee:	e002      	b.n	80075f6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1f9      	bne.n	80075f0 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80075fc:	f7ff f810 	bl	8006620 <HAL_GetTick>
 8007600:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007602:	e021      	b.n	8007648 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4618      	mov	r0, r3
 800760a:	f7ff f9bf 	bl	800698c <LL_ADC_IsEnabled>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff f9a3 	bl	8006964 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800761e:	f7fe ffff 	bl	8006620 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d90d      	bls.n	8007648 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007630:	f043 0210 	orr.w	r2, r3, #16
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763c:	f043 0201 	orr.w	r2, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e007      	b.n	8007658 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b01      	cmp	r3, #1
 8007654:	d1d6      	bne.n	8007604 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}
 8007660:	8000003f 	.word	0x8000003f
 8007664:	50040300 	.word	0x50040300
 8007668:	2000002c 	.word	0x2000002c
 800766c:	053e2d63 	.word	0x053e2d63

08007670 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007682:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007686:	2b00      	cmp	r3, #0
 8007688:	d14b      	bne.n	8007722 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f003 0308 	and.w	r3, r3, #8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d021      	beq.n	80076e8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff f87e 	bl	80067aa <LL_ADC_REG_IsTriggerSourceSWStart>
 80076ae:	4603      	mov	r3, r0
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d032      	beq.n	800771a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d12b      	bne.n	800771a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d11f      	bne.n	800771a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076de:	f043 0201 	orr.w	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80076e6:	e018      	b.n	800771a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d111      	bne.n	800771a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d105      	bne.n	800771a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007712:	f043 0201 	orr.w	r2, r3, #1
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f7f9 fd34 	bl	8001188 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007720:	e00e      	b.n	8007740 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff fb54 	bl	8006ddc <HAL_ADC_ErrorCallback>
}
 8007734:	e004      	b.n	8007740 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800773a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	4798      	blx	r3
}
 8007740:	bf00      	nop
 8007742:	3710      	adds	r7, #16
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}

08007748 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007754:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	f7ff fb36 	bl	8006dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800775c:	bf00      	nop
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007770:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007776:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007782:	f043 0204 	orr.w	r2, r3, #4
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7ff fb26 	bl	8006ddc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007790:	bf00      	nop
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f003 0307 	and.w	r3, r3, #7
 80077a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077a8:	4b0c      	ldr	r3, [pc, #48]	@ (80077dc <__NVIC_SetPriorityGrouping+0x44>)
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80077b4:	4013      	ands	r3, r2
 80077b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80077c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80077ca:	4a04      	ldr	r2, [pc, #16]	@ (80077dc <__NVIC_SetPriorityGrouping+0x44>)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	60d3      	str	r3, [r2, #12]
}
 80077d0:	bf00      	nop
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	e000ed00 	.word	0xe000ed00

080077e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80077e4:	4b04      	ldr	r3, [pc, #16]	@ (80077f8 <__NVIC_GetPriorityGrouping+0x18>)
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	0a1b      	lsrs	r3, r3, #8
 80077ea:	f003 0307 	and.w	r3, r3, #7
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	e000ed00 	.word	0xe000ed00

080077fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	4603      	mov	r3, r0
 8007804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800780a:	2b00      	cmp	r3, #0
 800780c:	db0b      	blt.n	8007826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	f003 021f 	and.w	r2, r3, #31
 8007814:	4907      	ldr	r1, [pc, #28]	@ (8007834 <__NVIC_EnableIRQ+0x38>)
 8007816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	2001      	movs	r0, #1
 800781e:	fa00 f202 	lsl.w	r2, r0, r2
 8007822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007826:	bf00      	nop
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	e000e100 	.word	0xe000e100

08007838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	4603      	mov	r3, r0
 8007840:	6039      	str	r1, [r7, #0]
 8007842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007848:	2b00      	cmp	r3, #0
 800784a:	db0a      	blt.n	8007862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	b2da      	uxtb	r2, r3
 8007850:	490c      	ldr	r1, [pc, #48]	@ (8007884 <__NVIC_SetPriority+0x4c>)
 8007852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007856:	0112      	lsls	r2, r2, #4
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	440b      	add	r3, r1
 800785c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007860:	e00a      	b.n	8007878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	b2da      	uxtb	r2, r3
 8007866:	4908      	ldr	r1, [pc, #32]	@ (8007888 <__NVIC_SetPriority+0x50>)
 8007868:	79fb      	ldrb	r3, [r7, #7]
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	3b04      	subs	r3, #4
 8007870:	0112      	lsls	r2, r2, #4
 8007872:	b2d2      	uxtb	r2, r2
 8007874:	440b      	add	r3, r1
 8007876:	761a      	strb	r2, [r3, #24]
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	e000e100 	.word	0xe000e100
 8007888:	e000ed00 	.word	0xe000ed00

0800788c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800788c:	b480      	push	{r7}
 800788e:	b089      	sub	sp, #36	@ 0x24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f1c3 0307 	rsb	r3, r3, #7
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	bf28      	it	cs
 80078aa:	2304      	movcs	r3, #4
 80078ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	3304      	adds	r3, #4
 80078b2:	2b06      	cmp	r3, #6
 80078b4:	d902      	bls.n	80078bc <NVIC_EncodePriority+0x30>
 80078b6:	69fb      	ldr	r3, [r7, #28]
 80078b8:	3b03      	subs	r3, #3
 80078ba:	e000      	b.n	80078be <NVIC_EncodePriority+0x32>
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078c0:	f04f 32ff 	mov.w	r2, #4294967295
 80078c4:	69bb      	ldr	r3, [r7, #24]
 80078c6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ca:	43da      	mvns	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	401a      	ands	r2, r3
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078d4:	f04f 31ff 	mov.w	r1, #4294967295
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	fa01 f303 	lsl.w	r3, r1, r3
 80078de:	43d9      	mvns	r1, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078e4:	4313      	orrs	r3, r2
         );
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3724      	adds	r7, #36	@ 0x24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
	...

080078f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	3b01      	subs	r3, #1
 8007900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007904:	d301      	bcc.n	800790a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007906:	2301      	movs	r3, #1
 8007908:	e00f      	b.n	800792a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800790a:	4a0a      	ldr	r2, [pc, #40]	@ (8007934 <SysTick_Config+0x40>)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3b01      	subs	r3, #1
 8007910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007912:	210f      	movs	r1, #15
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	f7ff ff8e 	bl	8007838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800791c:	4b05      	ldr	r3, [pc, #20]	@ (8007934 <SysTick_Config+0x40>)
 800791e:	2200      	movs	r2, #0
 8007920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007922:	4b04      	ldr	r3, [pc, #16]	@ (8007934 <SysTick_Config+0x40>)
 8007924:	2207      	movs	r2, #7
 8007926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	e000e010 	.word	0xe000e010

08007938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff ff29 	bl	8007798 <__NVIC_SetPriorityGrouping>
}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b086      	sub	sp, #24
 8007952:	af00      	add	r7, sp, #0
 8007954:	4603      	mov	r3, r0
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
 800795a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800795c:	f7ff ff40 	bl	80077e0 <__NVIC_GetPriorityGrouping>
 8007960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	6978      	ldr	r0, [r7, #20]
 8007968:	f7ff ff90 	bl	800788c <NVIC_EncodePriority>
 800796c:	4602      	mov	r2, r0
 800796e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff ff5f 	bl	8007838 <__NVIC_SetPriority>
}
 800797a:	bf00      	nop
 800797c:	3718      	adds	r7, #24
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	4603      	mov	r3, r0
 800798a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800798c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007990:	4618      	mov	r0, r3
 8007992:	f7ff ff33 	bl	80077fc <__NVIC_EnableIRQ>
}
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff ffa4 	bl	80078f4 <SysTick_Config>
 80079ac:	4603      	mov	r3, r0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e08e      	b.n	8007ae8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	4b47      	ldr	r3, [pc, #284]	@ (8007af0 <HAL_DMA_Init+0x138>)
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d80f      	bhi.n	80079f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	4b45      	ldr	r3, [pc, #276]	@ (8007af4 <HAL_DMA_Init+0x13c>)
 80079de:	4413      	add	r3, r2
 80079e0:	4a45      	ldr	r2, [pc, #276]	@ (8007af8 <HAL_DMA_Init+0x140>)
 80079e2:	fba2 2303 	umull	r2, r3, r2, r3
 80079e6:	091b      	lsrs	r3, r3, #4
 80079e8:	009a      	lsls	r2, r3, #2
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a42      	ldr	r2, [pc, #264]	@ (8007afc <HAL_DMA_Init+0x144>)
 80079f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80079f4:	e00e      	b.n	8007a14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	4b40      	ldr	r3, [pc, #256]	@ (8007b00 <HAL_DMA_Init+0x148>)
 80079fe:	4413      	add	r3, r2
 8007a00:	4a3d      	ldr	r2, [pc, #244]	@ (8007af8 <HAL_DMA_Init+0x140>)
 8007a02:	fba2 2303 	umull	r2, r3, r2, r3
 8007a06:	091b      	lsrs	r3, r3, #4
 8007a08:	009a      	lsls	r2, r3, #2
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a3c      	ldr	r2, [pc, #240]	@ (8007b04 <HAL_DMA_Init+0x14c>)
 8007a12:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fa80 	bl	8007f6c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a74:	d102      	bne.n	8007a7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a84:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007a88:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007a92:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d010      	beq.n	8007abe <HAL_DMA_Init+0x106>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d80c      	bhi.n	8007abe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 fa9f 	bl	8007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aae:	2200      	movs	r2, #0
 8007ab0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007aba:	605a      	str	r2, [r3, #4]
 8007abc:	e008      	b.n	8007ad0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	40020407 	.word	0x40020407
 8007af4:	bffdfff8 	.word	0xbffdfff8
 8007af8:	cccccccd 	.word	0xcccccccd
 8007afc:	40020000 	.word	0x40020000
 8007b00:	bffdfbf8 	.word	0xbffdfbf8
 8007b04:	40020400 	.word	0x40020400

08007b08 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b086      	sub	sp, #24
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
 8007b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <HAL_DMA_Start_IT+0x20>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e066      	b.n	8007bf6 <HAL_DMA_Start_IT+0xee>
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d155      	bne.n	8007be8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2202      	movs	r2, #2
 8007b40:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2200      	movs	r2, #0
 8007b48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0201 	bic.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 f9c5 	bl	8007ef0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d008      	beq.n	8007b80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 020e 	orr.w	r2, r2, #14
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e00f      	b.n	8007ba0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0204 	bic.w	r2, r2, #4
 8007b8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 020a 	orr.w	r2, r2, #10
 8007b9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d007      	beq.n	8007bbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d007      	beq.n	8007bd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0201 	orr.w	r2, r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e005      	b.n	8007bf4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}

08007bfe <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b083      	sub	sp, #12
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e04f      	b.n	8007cb0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d008      	beq.n	8007c2e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2204      	movs	r2, #4
 8007c20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e040      	b.n	8007cb0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 020e 	bic.w	r2, r2, #14
 8007c3c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c62:	f003 021c 	and.w	r2, r3, #28
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8007c70:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c7a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00c      	beq.n	8007c9e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007c9c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d005      	beq.n	8007ce0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	73fb      	strb	r3, [r7, #15]
 8007cde:	e047      	b.n	8007d70 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f022 020e 	bic.w	r2, r2, #14
 8007cee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f022 0201 	bic.w	r2, r2, #1
 8007cfe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d0a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d14:	f003 021c 	and.w	r2, r3, #28
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d22:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d2c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00c      	beq.n	8007d50 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d40:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d44:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007d4e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	4798      	blx	r3
    }
  }
  return status;
 8007d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d96:	f003 031c 	and.w	r3, r3, #28
 8007d9a:	2204      	movs	r2, #4
 8007d9c:	409a      	lsls	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	4013      	ands	r3, r2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d026      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x7a>
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d021      	beq.n	8007df4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f003 0320 	and.w	r3, r3, #32
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d107      	bne.n	8007dce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0204 	bic.w	r2, r2, #4
 8007dcc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd2:	f003 021c 	and.w	r2, r3, #28
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dda:	2104      	movs	r1, #4
 8007ddc:	fa01 f202 	lsl.w	r2, r1, r2
 8007de0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d071      	beq.n	8007ece <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007df2:	e06c      	b.n	8007ece <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df8:	f003 031c 	and.w	r3, r3, #28
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	409a      	lsls	r2, r3
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4013      	ands	r3, r2
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d02e      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xec>
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d029      	beq.n	8007e66 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0320 	and.w	r3, r3, #32
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d10b      	bne.n	8007e38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 020a 	bic.w	r2, r2, #10
 8007e2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e3c:	f003 021c 	and.w	r2, r3, #28
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e44:	2102      	movs	r1, #2
 8007e46:	fa01 f202 	lsl.w	r2, r1, r2
 8007e4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d038      	beq.n	8007ece <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007e64:	e033      	b.n	8007ece <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e6a:	f003 031c 	and.w	r3, r3, #28
 8007e6e:	2208      	movs	r2, #8
 8007e70:	409a      	lsls	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4013      	ands	r3, r2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d02a      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x156>
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d025      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 020e 	bic.w	r2, r2, #14
 8007e92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e98:	f003 021c 	and.w	r2, r3, #28
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8007ea6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ece:	bf00      	nop
 8007ed0:	bf00      	nop
}
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
 8007efc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f06:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d004      	beq.n	8007f1a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f18:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1e:	f003 021c 	and.w	r2, r3, #28
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f26:	2101      	movs	r1, #1
 8007f28:	fa01 f202 	lsl.w	r2, r1, r2
 8007f2c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	2b10      	cmp	r3, #16
 8007f3c:	d108      	bne.n	8007f50 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68ba      	ldr	r2, [r7, #8]
 8007f4c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f4e:	e007      	b.n	8007f60 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	60da      	str	r2, [r3, #12]
}
 8007f60:	bf00      	nop
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	461a      	mov	r2, r3
 8007f7a:	4b17      	ldr	r3, [pc, #92]	@ (8007fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d80a      	bhi.n	8007f96 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f84:	089b      	lsrs	r3, r3, #2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f8c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6493      	str	r3, [r2, #72]	@ 0x48
 8007f94:	e007      	b.n	8007fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9a:	089b      	lsrs	r3, r3, #2
 8007f9c:	009a      	lsls	r2, r3, #2
 8007f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007fa0:	4413      	add	r3, r2
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	3b08      	subs	r3, #8
 8007fae:	4a0c      	ldr	r2, [pc, #48]	@ (8007fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb4:	091b      	lsrs	r3, r3, #4
 8007fb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a0a      	ldr	r2, [pc, #40]	@ (8007fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007fbc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f003 031f 	and.w	r3, r3, #31
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	409a      	lsls	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007fcc:	bf00      	nop
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr
 8007fd8:	40020407 	.word	0x40020407
 8007fdc:	4002081c 	.word	0x4002081c
 8007fe0:	cccccccd 	.word	0xcccccccd
 8007fe4:	40020880 	.word	0x40020880

08007fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ff8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800802c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	461a      	mov	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a09      	ldr	r2, [pc, #36]	@ (8008030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800800c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	3b01      	subs	r3, #1
 8008012:	f003 0303 	and.w	r3, r3, #3
 8008016:	2201      	movs	r2, #1
 8008018:	409a      	lsls	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	1000823f 	.word	0x1000823f
 8008030:	40020940 	.word	0x40020940

08008034 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008034:	b480      	push	{r7}
 8008036:	b087      	sub	sp, #28
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008042:	e14c      	b.n	80082de <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	2101      	movs	r1, #1
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	fa01 f303 	lsl.w	r3, r1, r3
 8008050:	4013      	ands	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 813e 	beq.w	80082d8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f003 0303 	and.w	r3, r3, #3
 8008064:	2b01      	cmp	r3, #1
 8008066:	d005      	beq.n	8008074 <HAL_GPIO_Init+0x40>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	f003 0303 	and.w	r3, r3, #3
 8008070:	2b02      	cmp	r3, #2
 8008072:	d130      	bne.n	80080d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	2203      	movs	r2, #3
 8008080:	fa02 f303 	lsl.w	r3, r2, r3
 8008084:	43db      	mvns	r3, r3
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	4013      	ands	r3, r2
 800808a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	68da      	ldr	r2, [r3, #12]
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	fa02 f303 	lsl.w	r3, r2, r3
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080aa:	2201      	movs	r2, #1
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	fa02 f303 	lsl.w	r3, r2, r3
 80080b2:	43db      	mvns	r3, r3
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	4013      	ands	r3, r2
 80080b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	091b      	lsrs	r3, r3, #4
 80080c0:	f003 0201 	and.w	r2, r3, #1
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	693a      	ldr	r2, [r7, #16]
 80080d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	f003 0303 	and.w	r3, r3, #3
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d017      	beq.n	8008112 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	005b      	lsls	r3, r3, #1
 80080ec:	2203      	movs	r2, #3
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	43db      	mvns	r3, r3
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	4013      	ands	r3, r2
 80080f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	005b      	lsls	r3, r3, #1
 8008102:	fa02 f303 	lsl.w	r3, r2, r3
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	4313      	orrs	r3, r2
 800810a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	693a      	ldr	r2, [r7, #16]
 8008110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	f003 0303 	and.w	r3, r3, #3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d123      	bne.n	8008166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	08da      	lsrs	r2, r3, #3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3208      	adds	r2, #8
 8008126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f003 0307 	and.w	r3, r3, #7
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	220f      	movs	r2, #15
 8008136:	fa02 f303 	lsl.w	r3, r2, r3
 800813a:	43db      	mvns	r3, r3
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4013      	ands	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	691a      	ldr	r2, [r3, #16]
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f003 0307 	and.w	r3, r3, #7
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	fa02 f303 	lsl.w	r3, r2, r3
 8008152:	693a      	ldr	r2, [r7, #16]
 8008154:	4313      	orrs	r3, r2
 8008156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	08da      	lsrs	r2, r3, #3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3208      	adds	r2, #8
 8008160:	6939      	ldr	r1, [r7, #16]
 8008162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	005b      	lsls	r3, r3, #1
 8008170:	2203      	movs	r2, #3
 8008172:	fa02 f303 	lsl.w	r3, r2, r3
 8008176:	43db      	mvns	r3, r3
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	4013      	ands	r3, r2
 800817c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f003 0203 	and.w	r2, r3, #3
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	fa02 f303 	lsl.w	r3, r2, r3
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	4313      	orrs	r3, r2
 8008192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f000 8098 	beq.w	80082d8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80081a8:	4a54      	ldr	r2, [pc, #336]	@ (80082fc <HAL_GPIO_Init+0x2c8>)
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	089b      	lsrs	r3, r3, #2
 80081ae:	3302      	adds	r3, #2
 80081b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f003 0303 	and.w	r3, r3, #3
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	220f      	movs	r2, #15
 80081c0:	fa02 f303 	lsl.w	r3, r2, r3
 80081c4:	43db      	mvns	r3, r3
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	4013      	ands	r3, r2
 80081ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80081d2:	d019      	beq.n	8008208 <HAL_GPIO_Init+0x1d4>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a4a      	ldr	r2, [pc, #296]	@ (8008300 <HAL_GPIO_Init+0x2cc>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d013      	beq.n	8008204 <HAL_GPIO_Init+0x1d0>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a49      	ldr	r2, [pc, #292]	@ (8008304 <HAL_GPIO_Init+0x2d0>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00d      	beq.n	8008200 <HAL_GPIO_Init+0x1cc>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a48      	ldr	r2, [pc, #288]	@ (8008308 <HAL_GPIO_Init+0x2d4>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d007      	beq.n	80081fc <HAL_GPIO_Init+0x1c8>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a47      	ldr	r2, [pc, #284]	@ (800830c <HAL_GPIO_Init+0x2d8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d101      	bne.n	80081f8 <HAL_GPIO_Init+0x1c4>
 80081f4:	2304      	movs	r3, #4
 80081f6:	e008      	b.n	800820a <HAL_GPIO_Init+0x1d6>
 80081f8:	2307      	movs	r3, #7
 80081fa:	e006      	b.n	800820a <HAL_GPIO_Init+0x1d6>
 80081fc:	2303      	movs	r3, #3
 80081fe:	e004      	b.n	800820a <HAL_GPIO_Init+0x1d6>
 8008200:	2302      	movs	r3, #2
 8008202:	e002      	b.n	800820a <HAL_GPIO_Init+0x1d6>
 8008204:	2301      	movs	r3, #1
 8008206:	e000      	b.n	800820a <HAL_GPIO_Init+0x1d6>
 8008208:	2300      	movs	r3, #0
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	f002 0203 	and.w	r2, r2, #3
 8008210:	0092      	lsls	r2, r2, #2
 8008212:	4093      	lsls	r3, r2
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	4313      	orrs	r3, r2
 8008218:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800821a:	4938      	ldr	r1, [pc, #224]	@ (80082fc <HAL_GPIO_Init+0x2c8>)
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	089b      	lsrs	r3, r3, #2
 8008220:	3302      	adds	r3, #2
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008228:	4b39      	ldr	r3, [pc, #228]	@ (8008310 <HAL_GPIO_Init+0x2dc>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	43db      	mvns	r3, r3
 8008232:	693a      	ldr	r2, [r7, #16]
 8008234:	4013      	ands	r3, r2
 8008236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d003      	beq.n	800824c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800824c:	4a30      	ldr	r2, [pc, #192]	@ (8008310 <HAL_GPIO_Init+0x2dc>)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008252:	4b2f      	ldr	r3, [pc, #188]	@ (8008310 <HAL_GPIO_Init+0x2dc>)
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	43db      	mvns	r3, r3
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	4013      	ands	r3, r2
 8008260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d003      	beq.n	8008276 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800826e:	693a      	ldr	r2, [r7, #16]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	4313      	orrs	r3, r2
 8008274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008276:	4a26      	ldr	r2, [pc, #152]	@ (8008310 <HAL_GPIO_Init+0x2dc>)
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800827c:	4b24      	ldr	r3, [pc, #144]	@ (8008310 <HAL_GPIO_Init+0x2dc>)
 800827e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008282:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	43db      	mvns	r3, r3
 8008288:	693a      	ldr	r2, [r7, #16]
 800828a:	4013      	ands	r3, r2
 800828c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d003      	beq.n	80082a2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800829a:	693a      	ldr	r2, [r7, #16]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80082a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008310 <HAL_GPIO_Init+0x2dc>)
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80082aa:	4b19      	ldr	r3, [pc, #100]	@ (8008310 <HAL_GPIO_Init+0x2dc>)
 80082ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	43db      	mvns	r3, r3
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	4013      	ands	r3, r2
 80082ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d003      	beq.n	80082d0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80082d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008310 <HAL_GPIO_Init+0x2dc>)
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3301      	adds	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	fa22 f303 	lsr.w	r3, r2, r3
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f47f aeab 	bne.w	8008044 <HAL_GPIO_Init+0x10>
  }
}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	40010000 	.word	0x40010000
 8008300:	48000400 	.word	0x48000400
 8008304:	48000800 	.word	0x48000800
 8008308:	48000c00 	.word	0x48000c00
 800830c:	48001000 	.word	0x48001000
 8008310:	58000800 	.word	0x58000800

08008314 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	887b      	ldrh	r3, [r7, #2]
 8008326:	4013      	ands	r3, r2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800832c:	2301      	movs	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	e001      	b.n	8008336 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008332:	2300      	movs	r3, #0
 8008334:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	460b      	mov	r3, r1
 800834e:	807b      	strh	r3, [r7, #2]
 8008350:	4613      	mov	r3, r2
 8008352:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008354:	787b      	ldrb	r3, [r7, #1]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800835a:	887a      	ldrh	r2, [r7, #2]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008360:	e002      	b.n	8008368 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008362:	887a      	ldrh	r2, [r7, #2]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	695b      	ldr	r3, [r3, #20]
 8008384:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008386:	887a      	ldrh	r2, [r7, #2]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4013      	ands	r3, r2
 800838c:	041a      	lsls	r2, r3, #16
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	43d9      	mvns	r1, r3
 8008392:	887b      	ldrh	r3, [r7, #2]
 8008394:	400b      	ands	r3, r1
 8008396:	431a      	orrs	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	619a      	str	r2, [r3, #24]
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80083b2:	4b08      	ldr	r3, [pc, #32]	@ (80083d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	88fb      	ldrh	r3, [r7, #6]
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d006      	beq.n	80083cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80083be:	4a05      	ldr	r2, [pc, #20]	@ (80083d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80083c0:	88fb      	ldrh	r3, [r7, #6]
 80083c2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80083c4:	88fb      	ldrh	r3, [r7, #6]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7f9 fb58 	bl	8001a7c <HAL_GPIO_EXTI_Callback>
  }
}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	58000800 	.word	0x58000800

080083d8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80083de:	4b0a      	ldr	r3, [pc, #40]	@ (8008408 <HAL_HSEM_IRQHandler+0x30>)
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80083e4:	4b08      	ldr	r3, [pc, #32]	@ (8008408 <HAL_HSEM_IRQHandler+0x30>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	43db      	mvns	r3, r3
 80083ec:	4906      	ldr	r1, [pc, #24]	@ (8008408 <HAL_HSEM_IRQHandler+0x30>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80083f2:	4a05      	ldr	r2, [pc, #20]	@ (8008408 <HAL_HSEM_IRQHandler+0x30>)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f807 	bl	800840c <HAL_HSEM_FreeCallback>
}
 80083fe:	bf00      	nop
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	58001500 	.word	0x58001500

0800840c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d101      	bne.n	8008432 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e08d      	b.n	800854e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d106      	bne.n	800844c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7f9 fa22 	bl	8001890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2224      	movs	r2, #36	@ 0x24
 8008450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0201 	bic.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008470:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008480:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d107      	bne.n	800849a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	689a      	ldr	r2, [r3, #8]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008496:	609a      	str	r2, [r3, #8]
 8008498:	e006      	b.n	80084a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	689a      	ldr	r2, [r3, #8]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80084a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d108      	bne.n	80084c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084be:	605a      	str	r2, [r3, #4]
 80084c0:	e007      	b.n	80084d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80084d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6812      	ldr	r2, [r2, #0]
 80084dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80084e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	69d9      	ldr	r1, [r3, #28]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6a1a      	ldr	r2, [r3, #32]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0201 	orr.w	r2, r2, #1
 800852e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
	...

08008558 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b088      	sub	sp, #32
 800855c:	af02      	add	r7, sp, #8
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	4608      	mov	r0, r1
 8008562:	4611      	mov	r1, r2
 8008564:	461a      	mov	r2, r3
 8008566:	4603      	mov	r3, r0
 8008568:	817b      	strh	r3, [r7, #10]
 800856a:	460b      	mov	r3, r1
 800856c:	813b      	strh	r3, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b20      	cmp	r3, #32
 800857c:	f040 80f9 	bne.w	8008772 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <HAL_I2C_Mem_Write+0x34>
 8008586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008588:	2b00      	cmp	r3, #0
 800858a:	d105      	bne.n	8008598 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008592:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e0ed      	b.n	8008774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_I2C_Mem_Write+0x4e>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e0e6      	b.n	8008774 <HAL_I2C_Mem_Write+0x21c>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085ae:	f7fe f837 	bl	8006620 <HAL_GetTick>
 80085b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	2319      	movs	r3, #25
 80085ba:	2201      	movs	r2, #1
 80085bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fac3 	bl	8008b4c <I2C_WaitOnFlagUntilTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e0d1      	b.n	8008774 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2221      	movs	r2, #33	@ 0x21
 80085d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2240      	movs	r2, #64	@ 0x40
 80085dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a3a      	ldr	r2, [r7, #32]
 80085ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80085f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2200      	movs	r2, #0
 80085f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085f8:	88f8      	ldrh	r0, [r7, #6]
 80085fa:	893a      	ldrh	r2, [r7, #8]
 80085fc:	8979      	ldrh	r1, [r7, #10]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	9301      	str	r3, [sp, #4]
 8008602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008604:	9300      	str	r3, [sp, #0]
 8008606:	4603      	mov	r3, r0
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f000 f9d3 	bl	80089b4 <I2C_RequestMemoryWrite>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e0a9      	b.n	8008774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008624:	b29b      	uxth	r3, r3
 8008626:	2bff      	cmp	r3, #255	@ 0xff
 8008628:	d90e      	bls.n	8008648 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	22ff      	movs	r2, #255	@ 0xff
 800862e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008634:	b2da      	uxtb	r2, r3
 8008636:	8979      	ldrh	r1, [r7, #10]
 8008638:	2300      	movs	r3, #0
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 fc47 	bl	8008ed4 <I2C_TransferConfig>
 8008646:	e00f      	b.n	8008668 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800864c:	b29a      	uxth	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008656:	b2da      	uxtb	r2, r3
 8008658:	8979      	ldrh	r1, [r7, #10]
 800865a:	2300      	movs	r3, #0
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f000 fc36 	bl	8008ed4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008668:	697a      	ldr	r2, [r7, #20]
 800866a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f000 fac6 	bl	8008bfe <I2C_WaitOnTXISFlagUntilTimeout>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e07b      	b.n	8008774 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008680:	781a      	ldrb	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800868c:	1c5a      	adds	r2, r3, #1
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008696:	b29b      	uxth	r3, r3
 8008698:	3b01      	subs	r3, #1
 800869a:	b29a      	uxth	r2, r3
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a4:	3b01      	subs	r3, #1
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d034      	beq.n	8008720 <HAL_I2C_Mem_Write+0x1c8>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d130      	bne.n	8008720 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	9300      	str	r3, [sp, #0]
 80086c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c4:	2200      	movs	r2, #0
 80086c6:	2180      	movs	r1, #128	@ 0x80
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 fa3f 	bl	8008b4c <I2C_WaitOnFlagUntilTimeout>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d001      	beq.n	80086d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e04d      	b.n	8008774 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086dc:	b29b      	uxth	r3, r3
 80086de:	2bff      	cmp	r3, #255	@ 0xff
 80086e0:	d90e      	bls.n	8008700 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	22ff      	movs	r2, #255	@ 0xff
 80086e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	8979      	ldrh	r1, [r7, #10]
 80086f0:	2300      	movs	r3, #0
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 fbeb 	bl	8008ed4 <I2C_TransferConfig>
 80086fe:	e00f      	b.n	8008720 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008704:	b29a      	uxth	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800870e:	b2da      	uxtb	r2, r3
 8008710:	8979      	ldrh	r1, [r7, #10]
 8008712:	2300      	movs	r3, #0
 8008714:	9300      	str	r3, [sp, #0]
 8008716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 fbda 	bl	8008ed4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008724:	b29b      	uxth	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d19e      	bne.n	8008668 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f000 faac 	bl	8008c8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e01a      	b.n	8008774 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2220      	movs	r2, #32
 8008744:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6859      	ldr	r1, [r3, #4]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	4b0a      	ldr	r3, [pc, #40]	@ (800877c <HAL_I2C_Mem_Write+0x224>)
 8008752:	400b      	ands	r3, r1
 8008754:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	e000      	b.n	8008774 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008772:	2302      	movs	r3, #2
  }
}
 8008774:	4618      	mov	r0, r3
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	fe00e800 	.word	0xfe00e800

08008780 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b088      	sub	sp, #32
 8008784:	af02      	add	r7, sp, #8
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	4608      	mov	r0, r1
 800878a:	4611      	mov	r1, r2
 800878c:	461a      	mov	r2, r3
 800878e:	4603      	mov	r3, r0
 8008790:	817b      	strh	r3, [r7, #10]
 8008792:	460b      	mov	r3, r1
 8008794:	813b      	strh	r3, [r7, #8]
 8008796:	4613      	mov	r3, r2
 8008798:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	f040 80fd 	bne.w	80089a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d002      	beq.n	80087b4 <HAL_I2C_Mem_Read+0x34>
 80087ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d105      	bne.n	80087c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087ba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e0f1      	b.n	80089a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087c6:	2b01      	cmp	r3, #1
 80087c8:	d101      	bne.n	80087ce <HAL_I2C_Mem_Read+0x4e>
 80087ca:	2302      	movs	r3, #2
 80087cc:	e0ea      	b.n	80089a4 <HAL_I2C_Mem_Read+0x224>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087d6:	f7fd ff23 	bl	8006620 <HAL_GetTick>
 80087da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	2319      	movs	r3, #25
 80087e2:	2201      	movs	r2, #1
 80087e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 f9af 	bl	8008b4c <I2C_WaitOnFlagUntilTimeout>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	e0d5      	b.n	80089a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2222      	movs	r2, #34	@ 0x22
 80087fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2240      	movs	r2, #64	@ 0x40
 8008804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2200      	movs	r2, #0
 800880c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6a3a      	ldr	r2, [r7, #32]
 8008812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008818:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008820:	88f8      	ldrh	r0, [r7, #6]
 8008822:	893a      	ldrh	r2, [r7, #8]
 8008824:	8979      	ldrh	r1, [r7, #10]
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	9301      	str	r3, [sp, #4]
 800882a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882c:	9300      	str	r3, [sp, #0]
 800882e:	4603      	mov	r3, r0
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 f913 	bl	8008a5c <I2C_RequestMemoryRead>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d005      	beq.n	8008848 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e0ad      	b.n	80089a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800884c:	b29b      	uxth	r3, r3
 800884e:	2bff      	cmp	r3, #255	@ 0xff
 8008850:	d90e      	bls.n	8008870 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	22ff      	movs	r2, #255	@ 0xff
 8008856:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800885c:	b2da      	uxtb	r2, r3
 800885e:	8979      	ldrh	r1, [r7, #10]
 8008860:	4b52      	ldr	r3, [pc, #328]	@ (80089ac <HAL_I2C_Mem_Read+0x22c>)
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 fb33 	bl	8008ed4 <I2C_TransferConfig>
 800886e:	e00f      	b.n	8008890 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008874:	b29a      	uxth	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800887e:	b2da      	uxtb	r2, r3
 8008880:	8979      	ldrh	r1, [r7, #10]
 8008882:	4b4a      	ldr	r3, [pc, #296]	@ (80089ac <HAL_I2C_Mem_Read+0x22c>)
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 fb22 	bl	8008ed4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008896:	2200      	movs	r2, #0
 8008898:	2104      	movs	r1, #4
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 f956 	bl	8008b4c <I2C_WaitOnFlagUntilTimeout>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e07c      	b.n	80089a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	b2d2      	uxtb	r2, r2
 80088b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088bc:	1c5a      	adds	r2, r3, #1
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d034      	beq.n	8008950 <HAL_I2C_Mem_Read+0x1d0>
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d130      	bne.n	8008950 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f4:	2200      	movs	r2, #0
 80088f6:	2180      	movs	r1, #128	@ 0x80
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f927 	bl	8008b4c <I2C_WaitOnFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e04d      	b.n	80089a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800890c:	b29b      	uxth	r3, r3
 800890e:	2bff      	cmp	r3, #255	@ 0xff
 8008910:	d90e      	bls.n	8008930 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	22ff      	movs	r2, #255	@ 0xff
 8008916:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800891c:	b2da      	uxtb	r2, r3
 800891e:	8979      	ldrh	r1, [r7, #10]
 8008920:	2300      	movs	r3, #0
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 fad3 	bl	8008ed4 <I2C_TransferConfig>
 800892e:	e00f      	b.n	8008950 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008934:	b29a      	uxth	r2, r3
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800893e:	b2da      	uxtb	r2, r3
 8008940:	8979      	ldrh	r1, [r7, #10]
 8008942:	2300      	movs	r3, #0
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800894a:	68f8      	ldr	r0, [r7, #12]
 800894c:	f000 fac2 	bl	8008ed4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008954:	b29b      	uxth	r3, r3
 8008956:	2b00      	cmp	r3, #0
 8008958:	d19a      	bne.n	8008890 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 f994 	bl	8008c8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e01a      	b.n	80089a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2220      	movs	r2, #32
 8008974:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6859      	ldr	r1, [r3, #4]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	4b0b      	ldr	r3, [pc, #44]	@ (80089b0 <HAL_I2C_Mem_Read+0x230>)
 8008982:	400b      	ands	r3, r1
 8008984:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2220      	movs	r2, #32
 800898a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	e000      	b.n	80089a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80089a2:	2302      	movs	r3, #2
  }
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}
 80089ac:	80002400 	.word	0x80002400
 80089b0:	fe00e800 	.word	0xfe00e800

080089b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	4608      	mov	r0, r1
 80089be:	4611      	mov	r1, r2
 80089c0:	461a      	mov	r2, r3
 80089c2:	4603      	mov	r3, r0
 80089c4:	817b      	strh	r3, [r7, #10]
 80089c6:	460b      	mov	r3, r1
 80089c8:	813b      	strh	r3, [r7, #8]
 80089ca:	4613      	mov	r3, r2
 80089cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80089ce:	88fb      	ldrh	r3, [r7, #6]
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	8979      	ldrh	r1, [r7, #10]
 80089d4:	4b20      	ldr	r3, [pc, #128]	@ (8008a58 <I2C_RequestMemoryWrite+0xa4>)
 80089d6:	9300      	str	r3, [sp, #0]
 80089d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 fa79 	bl	8008ed4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089e2:	69fa      	ldr	r2, [r7, #28]
 80089e4:	69b9      	ldr	r1, [r7, #24]
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f000 f909 	bl	8008bfe <I2C_WaitOnTXISFlagUntilTimeout>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d001      	beq.n	80089f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e02c      	b.n	8008a50 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80089f6:	88fb      	ldrh	r3, [r7, #6]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d105      	bne.n	8008a08 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80089fc:	893b      	ldrh	r3, [r7, #8]
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a06:	e015      	b.n	8008a34 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a08:	893b      	ldrh	r3, [r7, #8]
 8008a0a:	0a1b      	lsrs	r3, r3, #8
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	69b9      	ldr	r1, [r7, #24]
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f8ef 	bl	8008bfe <I2C_WaitOnTXISFlagUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d001      	beq.n	8008a2a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008a26:	2301      	movs	r3, #1
 8008a28:	e012      	b.n	8008a50 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a2a:	893b      	ldrh	r3, [r7, #8]
 8008a2c:	b2da      	uxtb	r2, r3
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	9300      	str	r3, [sp, #0]
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2180      	movs	r1, #128	@ 0x80
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f000 f884 	bl	8008b4c <I2C_WaitOnFlagUntilTimeout>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	80002000 	.word	0x80002000

08008a5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	4608      	mov	r0, r1
 8008a66:	4611      	mov	r1, r2
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	817b      	strh	r3, [r7, #10]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	813b      	strh	r3, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008a76:	88fb      	ldrh	r3, [r7, #6]
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	8979      	ldrh	r1, [r7, #10]
 8008a7c:	4b20      	ldr	r3, [pc, #128]	@ (8008b00 <I2C_RequestMemoryRead+0xa4>)
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	2300      	movs	r3, #0
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 fa26 	bl	8008ed4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a88:	69fa      	ldr	r2, [r7, #28]
 8008a8a:	69b9      	ldr	r1, [r7, #24]
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 f8b6 	bl	8008bfe <I2C_WaitOnTXISFlagUntilTimeout>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d001      	beq.n	8008a9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e02c      	b.n	8008af6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a9c:	88fb      	ldrh	r3, [r7, #6]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d105      	bne.n	8008aae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008aa2:	893b      	ldrh	r3, [r7, #8]
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	629a      	str	r2, [r3, #40]	@ 0x28
 8008aac:	e015      	b.n	8008ada <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008aae:	893b      	ldrh	r3, [r7, #8]
 8008ab0:	0a1b      	lsrs	r3, r3, #8
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008abc:	69fa      	ldr	r2, [r7, #28]
 8008abe:	69b9      	ldr	r1, [r7, #24]
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 f89c 	bl	8008bfe <I2C_WaitOnTXISFlagUntilTimeout>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e012      	b.n	8008af6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ad0:	893b      	ldrh	r3, [r7, #8]
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2140      	movs	r1, #64	@ 0x40
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f000 f831 	bl	8008b4c <I2C_WaitOnFlagUntilTimeout>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d001      	beq.n	8008af4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	80002000 	.word	0x80002000

08008b04 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b083      	sub	sp, #12
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	699b      	ldr	r3, [r3, #24]
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d103      	bne.n	8008b22 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d007      	beq.n	8008b40 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	699a      	ldr	r2, [r3, #24]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f042 0201 	orr.w	r2, r2, #1
 8008b3e:	619a      	str	r2, [r3, #24]
  }
}
 8008b40:	bf00      	nop
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	603b      	str	r3, [r7, #0]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b5c:	e03b      	b.n	8008bd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 f8d6 	bl	8008d14 <I2C_IsErrorOccurred>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d001      	beq.n	8008b72 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e041      	b.n	8008bf6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b78:	d02d      	beq.n	8008bd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b7a:	f7fd fd51 	bl	8006620 <HAL_GetTick>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	69bb      	ldr	r3, [r7, #24]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d302      	bcc.n	8008b90 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d122      	bne.n	8008bd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699a      	ldr	r2, [r3, #24]
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2301      	moveq	r3, #1
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d113      	bne.n	8008bd6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb2:	f043 0220 	orr.w	r2, r3, #32
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e00f      	b.n	8008bf6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	699a      	ldr	r2, [r3, #24]
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	4013      	ands	r3, r2
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	bf0c      	ite	eq
 8008be6:	2301      	moveq	r3, #1
 8008be8:	2300      	movne	r3, #0
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	461a      	mov	r2, r3
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	d0b4      	beq.n	8008b5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c0a:	e033      	b.n	8008c74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	68f8      	ldr	r0, [r7, #12]
 8008c12:	f000 f87f 	bl	8008d14 <I2C_IsErrorOccurred>
 8008c16:	4603      	mov	r3, r0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d001      	beq.n	8008c20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e031      	b.n	8008c84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c26:	d025      	beq.n	8008c74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c28:	f7fd fcfa 	bl	8006620 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d302      	bcc.n	8008c3e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d11a      	bne.n	8008c74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d013      	beq.n	8008c74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c50:	f043 0220 	orr.w	r2, r3, #32
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2220      	movs	r2, #32
 8008c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e007      	b.n	8008c84 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	699b      	ldr	r3, [r3, #24]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d1c4      	bne.n	8008c0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	60f8      	str	r0, [r7, #12]
 8008c94:	60b9      	str	r1, [r7, #8]
 8008c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c98:	e02f      	b.n	8008cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f000 f838 	bl	8008d14 <I2C_IsErrorOccurred>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e02d      	b.n	8008d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cae:	f7fd fcb7 	bl	8006620 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	68ba      	ldr	r2, [r7, #8]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d302      	bcc.n	8008cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d11a      	bne.n	8008cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	f003 0320 	and.w	r3, r3, #32
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	d013      	beq.n	8008cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008cd6:	f043 0220 	orr.w	r2, r3, #32
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e007      	b.n	8008d0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	f003 0320 	and.w	r3, r3, #32
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	d1c8      	bne.n	8008c9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3710      	adds	r7, #16
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
	...

08008d14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08a      	sub	sp, #40	@ 0x28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d068      	beq.n	8008e12 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2210      	movs	r2, #16
 8008d46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008d48:	e049      	b.n	8008dde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d50:	d045      	beq.n	8008dde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008d52:	f7fd fc65 	bl	8006620 <HAL_GetTick>
 8008d56:	4602      	mov	r2, r0
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	1ad3      	subs	r3, r2, r3
 8008d5c:	68ba      	ldr	r2, [r7, #8]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d302      	bcc.n	8008d68 <I2C_IsErrorOccurred+0x54>
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d13a      	bne.n	8008dde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699b      	ldr	r3, [r3, #24]
 8008d82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d8a:	d121      	bne.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d92:	d01d      	beq.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008d94:	7cfb      	ldrb	r3, [r7, #19]
 8008d96:	2b20      	cmp	r3, #32
 8008d98:	d01a      	beq.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008da8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008daa:	f7fd fc39 	bl	8006620 <HAL_GetTick>
 8008dae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008db0:	e00e      	b.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008db2:	f7fd fc35 	bl	8006620 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	2b19      	cmp	r3, #25
 8008dbe:	d907      	bls.n	8008dd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	f043 0320 	orr.w	r3, r3, #32
 8008dc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008dce:	e006      	b.n	8008dde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	f003 0320 	and.w	r3, r3, #32
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	d1e9      	bne.n	8008db2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	f003 0320 	and.w	r3, r3, #32
 8008de8:	2b20      	cmp	r3, #32
 8008dea:	d003      	beq.n	8008df4 <I2C_IsErrorOccurred+0xe0>
 8008dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d0aa      	beq.n	8008d4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008df4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d103      	bne.n	8008e04 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2220      	movs	r2, #32
 8008e02:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e04:	6a3b      	ldr	r3, [r7, #32]
 8008e06:	f043 0304 	orr.w	r3, r3, #4
 8008e0a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00b      	beq.n	8008e3c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	f043 0301 	orr.w	r3, r3, #1
 8008e2a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008e34:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00b      	beq.n	8008e5e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	f043 0308 	orr.w	r3, r3, #8
 8008e4c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008e56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008e68:	6a3b      	ldr	r3, [r7, #32]
 8008e6a:	f043 0302 	orr.w	r3, r3, #2
 8008e6e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008e78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008e80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01c      	beq.n	8008ec2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f7ff fe3b 	bl	8008b04 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6859      	ldr	r1, [r3, #4]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed0 <I2C_IsErrorOccurred+0x1bc>)
 8008e9a:	400b      	ands	r3, r1
 8008e9c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ea2:	6a3b      	ldr	r3, [r7, #32]
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2220      	movs	r2, #32
 8008eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3728      	adds	r7, #40	@ 0x28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	fe00e800 	.word	0xfe00e800

08008ed4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b087      	sub	sp, #28
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	607b      	str	r3, [r7, #4]
 8008ede:	460b      	mov	r3, r1
 8008ee0:	817b      	strh	r3, [r7, #10]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ee6:	897b      	ldrh	r3, [r7, #10]
 8008ee8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008eec:	7a7b      	ldrb	r3, [r7, #9]
 8008eee:	041b      	lsls	r3, r3, #16
 8008ef0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008ef4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f02:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	6a3b      	ldr	r3, [r7, #32]
 8008f0c:	0d5b      	lsrs	r3, r3, #21
 8008f0e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008f12:	4b08      	ldr	r3, [pc, #32]	@ (8008f34 <I2C_TransferConfig+0x60>)
 8008f14:	430b      	orrs	r3, r1
 8008f16:	43db      	mvns	r3, r3
 8008f18:	ea02 0103 	and.w	r1, r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	697a      	ldr	r2, [r7, #20]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	03ff63ff 	.word	0x03ff63ff

08008f38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b20      	cmp	r3, #32
 8008f4c:	d138      	bne.n	8008fc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f58:	2302      	movs	r3, #2
 8008f5a:	e032      	b.n	8008fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2224      	movs	r2, #36	@ 0x24
 8008f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0201 	bic.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	6819      	ldr	r1, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	681a      	ldr	r2, [r3, #0]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f042 0201 	orr.w	r2, r2, #1
 8008faa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2220      	movs	r2, #32
 8008fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e000      	b.n	8008fc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fc0:	2302      	movs	r3, #2
  }
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b20      	cmp	r3, #32
 8008fe2:	d139      	bne.n	8009058 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d101      	bne.n	8008ff2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008fee:	2302      	movs	r3, #2
 8008ff0:	e033      	b.n	800905a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2224      	movs	r2, #36	@ 0x24
 8008ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0201 	bic.w	r2, r2, #1
 8009010:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009020:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	021b      	lsls	r3, r3, #8
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	4313      	orrs	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 0201 	orr.w	r2, r2, #1
 8009042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2220      	movs	r2, #32
 8009048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	e000      	b.n	800905a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009058:	2302      	movs	r3, #2
  }
}
 800905a:	4618      	mov	r0, r3
 800905c:	3714      	adds	r7, #20
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
	...

08009068 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8009070:	4b05      	ldr	r3, [pc, #20]	@ (8009088 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	4904      	ldr	r1, [pc, #16]	@ (8009088 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4313      	orrs	r3, r2
 800907a:	604b      	str	r3, [r1, #4]
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	40010000 	.word	0x40010000

0800908c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d01e      	beq.n	80090dc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800909e:	4b13      	ldr	r3, [pc, #76]	@ (80090ec <HAL_IPCC_Init+0x60>)
 80090a0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d102      	bne.n	80090b4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7f8 fca6 	bl	8001a00 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80090b4:	68b8      	ldr	r0, [r7, #8]
 80090b6:	f000 f8f5 	bl	80092a4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f8c6 	bl	8009258 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80090da:	e001      	b.n	80090e0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	58000c00 	.word	0x58000c00

080090f0 <HAL_IPCC_TX_IRQHandler>:
  * @brief  This function handles IPCC Tx Free interrupt request.
  * @param  hipcc IPCC handle
  * @retval None
  */
void HAL_IPCC_TX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 80090f8:	2300      	movs	r3, #0
 80090fa:	613b      	str	r3, [r7, #16]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80090fc:	4b22      	ldr	r3, [pc, #136]	@ (8009188 <HAL_IPCC_TX_IRQHandler+0x98>)
 80090fe:	60fb      	str	r3, [r7, #12]

  /* check the Tx free channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_TX_BUF;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	43db      	mvns	r3, r3
 8009106:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800910a:	617b      	str	r3, [r7, #20]
  irqmask = irqmask & ~(currentInstance->SR << IPCC_MR_CH1FM_Pos);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	041b      	lsls	r3, r3, #16
 8009112:	43db      	mvns	r3, r3
 8009114:	697a      	ldr	r2, [r7, #20]
 8009116:	4013      	ands	r3, r2
 8009118:	617b      	str	r3, [r7, #20]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800911a:	e02c      	b.n	8009176 <HAL_IPCC_TX_IRQHandler+0x86>
  {
    bit_pos = 1UL << (IPCC_MR_CH1FM_Pos + (ch_count & CHANNEL_INDEX_MASK));
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	f003 030f 	and.w	r3, r3, #15
 8009122:	3310      	adds	r3, #16
 8009124:	2201      	movs	r2, #1
 8009126:	fa02 f303 	lsl.w	r3, r2, r3
 800912a:	60bb      	str	r3, [r7, #8]

    if ((irqmask & bit_pos) != 0U)
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	4013      	ands	r3, r2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d01c      	beq.n	8009170 <HAL_IPCC_TX_IRQHandler+0x80>
    {
      /* mask the channel Free interrupt  */
      currentInstance->MR |= bit_pos;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	431a      	orrs	r2, r3
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackTx[ch_count] != NULL)
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	3306      	adds	r3, #6
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <HAL_IPCC_TX_IRQHandler+0x76>
      {
        hipcc->ChannelCallbackTx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_TX);
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	3306      	adds	r3, #6
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4413      	add	r3, r2
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	6939      	ldr	r1, [r7, #16]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	4798      	blx	r3
      }
      irqmask =  irqmask & ~(bit_pos);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	43db      	mvns	r3, r3
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	4013      	ands	r3, r2
 800916e:	617b      	str	r3, [r7, #20]
    }
    ch_count++;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	3301      	adds	r3, #1
 8009174:	613b      	str	r3, [r7, #16]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1cf      	bne.n	800911c <HAL_IPCC_TX_IRQHandler+0x2c>
  }
}
 800917c:	bf00      	nop
 800917e:	bf00      	nop
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	58000c00 	.word	0x58000c00

0800918c <HAL_IPCC_RX_IRQHandler>:
  * @brief  This function handles IPCC Rx Occupied interrupt request.
  * @param  hipcc : IPCC handle
  * @retval None
  */
void HAL_IPCC_RX_IRQHandler(IPCC_HandleTypeDef *const hipcc)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b088      	sub	sp, #32
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  uint32_t irqmask;
  uint32_t bit_pos;
  uint32_t ch_count = 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	61bb      	str	r3, [r7, #24]
  IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009198:	4b20      	ldr	r3, [pc, #128]	@ (800921c <HAL_IPCC_RX_IRQHandler+0x90>)
 800919a:	617b      	str	r3, [r7, #20]
  IPCC_CommonTypeDef *otherInstance = IPCC_C2;
 800919c:	4b20      	ldr	r3, [pc, #128]	@ (8009220 <HAL_IPCC_RX_IRQHandler+0x94>)
 800919e:	613b      	str	r3, [r7, #16]

  /* check the Rx occupied channels which are not masked */
  irqmask = ~(currentInstance->MR) & IPCC_ALL_RX_BUF;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	43db      	mvns	r3, r3
 80091a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091aa:	61fb      	str	r3, [r7, #28]
  irqmask = irqmask & otherInstance->SR;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	69fa      	ldr	r2, [r7, #28]
 80091b2:	4013      	ands	r3, r2
 80091b4:	61fb      	str	r3, [r7, #28]

  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 80091b6:	e029      	b.n	800920c <HAL_IPCC_RX_IRQHandler+0x80>
  {
    bit_pos = 1UL << (ch_count & CHANNEL_INDEX_MASK);
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	2201      	movs	r2, #1
 80091c0:	fa02 f303 	lsl.w	r3, r2, r3
 80091c4:	60fb      	str	r3, [r7, #12]

    if ((irqmask & bit_pos) != 0U)
 80091c6:	69fa      	ldr	r2, [r7, #28]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	4013      	ands	r3, r2
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d01a      	beq.n	8009206 <HAL_IPCC_RX_IRQHandler+0x7a>
    {
      /* mask the channel occupied interrupt */
      currentInstance->MR |= bit_pos;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	431a      	orrs	r2, r3
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	605a      	str	r2, [r3, #4]
      if (hipcc->ChannelCallbackRx[ch_count] != NULL)
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	4413      	add	r3, r2
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d008      	beq.n	80091fc <HAL_IPCC_RX_IRQHandler+0x70>
      {
        hipcc->ChannelCallbackRx[ch_count](hipcc, ch_count, IPCC_CHANNEL_DIR_RX);
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	4413      	add	r3, r2
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	69b9      	ldr	r1, [r7, #24]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	4798      	blx	r3
      }
      irqmask = irqmask & ~(bit_pos);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	43db      	mvns	r3, r3
 8009200:	69fa      	ldr	r2, [r7, #28]
 8009202:	4013      	ands	r3, r2
 8009204:	61fb      	str	r3, [r7, #28]
    }
    ch_count++;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	3301      	adds	r3, #1
 800920a:	61bb      	str	r3, [r7, #24]
  while (irqmask != 0UL)  /* if several bits are set, it loops to serve all of them */
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d1d2      	bne.n	80091b8 <HAL_IPCC_RX_IRQHandler+0x2c>
  }
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	3720      	adds	r7, #32
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	58000c00 	.word	0x58000c00
 8009220:	58000c10 	.word	0x58000c10

08009224 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009224:	b480      	push	{r7}
 8009226:	b085      	sub	sp, #20
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	4613      	mov	r3, r2
 8009230:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009232:	bf00      	nop
 8009234:	3714      	adds	r7, #20
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800923e:	b480      	push	{r7}
 8009240:	b085      	sub	sp, #20
 8009242:	af00      	add	r7, sp, #0
 8009244:	60f8      	str	r0, [r7, #12]
 8009246:	60b9      	str	r1, [r7, #8]
 8009248:	4613      	mov	r3, r2
 800924a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800924c:	bf00      	nop
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]
 8009264:	e00f      	b.n	8009286 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	4a0b      	ldr	r2, [pc, #44]	@ (800929c <IPCC_SetDefaultCallbacks+0x44>)
 8009270:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3306      	adds	r3, #6
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	4a08      	ldr	r2, [pc, #32]	@ (80092a0 <IPCC_SetDefaultCallbacks+0x48>)
 800927e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3301      	adds	r3, #1
 8009284:	60fb      	str	r3, [r7, #12]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b05      	cmp	r3, #5
 800928a:	d9ec      	bls.n	8009266 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	08009225 	.word	0x08009225
 80092a0:	0800923f 	.word	0x0800923f

080092a4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80092b8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	223f      	movs	r2, #63	@ 0x3f
 80092be:	609a      	str	r2, [r3, #8]
}
 80092c0:	bf00      	nop
 80092c2:	370c      	adds	r7, #12
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e0c0      	b.n	8009460 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d106      	bne.n	80092f8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f00b fd30 	bl	8014d58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2203      	movs	r2, #3
 80092fc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4618      	mov	r0, r3
 8009306:	f006 fff4 	bl	80102f2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]
 800930e:	e03e      	b.n	800938e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009310:	7bfa      	ldrb	r2, [r7, #15]
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	440b      	add	r3, r1
 800931e:	3311      	adds	r3, #17
 8009320:	2201      	movs	r2, #1
 8009322:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009324:	7bfa      	ldrb	r2, [r7, #15]
 8009326:	6879      	ldr	r1, [r7, #4]
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	440b      	add	r3, r1
 8009332:	3310      	adds	r3, #16
 8009334:	7bfa      	ldrb	r2, [r7, #15]
 8009336:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009338:	7bfa      	ldrb	r2, [r7, #15]
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	440b      	add	r3, r1
 8009346:	3313      	adds	r3, #19
 8009348:	2200      	movs	r2, #0
 800934a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800934c:	7bfa      	ldrb	r2, [r7, #15]
 800934e:	6879      	ldr	r1, [r7, #4]
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	00db      	lsls	r3, r3, #3
 8009358:	440b      	add	r3, r1
 800935a:	3320      	adds	r3, #32
 800935c:	2200      	movs	r2, #0
 800935e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009360:	7bfa      	ldrb	r2, [r7, #15]
 8009362:	6879      	ldr	r1, [r7, #4]
 8009364:	4613      	mov	r3, r2
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	440b      	add	r3, r1
 800936e:	3324      	adds	r3, #36	@ 0x24
 8009370:	2200      	movs	r2, #0
 8009372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009374:	7bfb      	ldrb	r3, [r7, #15]
 8009376:	6879      	ldr	r1, [r7, #4]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	4613      	mov	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	4413      	add	r3, r2
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	440b      	add	r3, r1
 8009384:	2200      	movs	r2, #0
 8009386:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009388:	7bfb      	ldrb	r3, [r7, #15]
 800938a:	3301      	adds	r3, #1
 800938c:	73fb      	strb	r3, [r7, #15]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	791b      	ldrb	r3, [r3, #4]
 8009392:	7bfa      	ldrb	r2, [r7, #15]
 8009394:	429a      	cmp	r2, r3
 8009396:	d3bb      	bcc.n	8009310 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009398:	2300      	movs	r3, #0
 800939a:	73fb      	strb	r3, [r7, #15]
 800939c:	e044      	b.n	8009428 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800939e:	7bfa      	ldrb	r2, [r7, #15]
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	440b      	add	r3, r1
 80093ac:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80093b0:	2200      	movs	r2, #0
 80093b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80093b4:	7bfa      	ldrb	r2, [r7, #15]
 80093b6:	6879      	ldr	r1, [r7, #4]
 80093b8:	4613      	mov	r3, r2
 80093ba:	009b      	lsls	r3, r3, #2
 80093bc:	4413      	add	r3, r2
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	440b      	add	r3, r1
 80093c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093c6:	7bfa      	ldrb	r2, [r7, #15]
 80093c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80093ca:	7bfa      	ldrb	r2, [r7, #15]
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	4613      	mov	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	440b      	add	r3, r1
 80093d8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80093e0:	7bfa      	ldrb	r2, [r7, #15]
 80093e2:	6879      	ldr	r1, [r7, #4]
 80093e4:	4613      	mov	r3, r2
 80093e6:	009b      	lsls	r3, r3, #2
 80093e8:	4413      	add	r3, r2
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	440b      	add	r3, r1
 80093ee:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80093f6:	7bfa      	ldrb	r2, [r7, #15]
 80093f8:	6879      	ldr	r1, [r7, #4]
 80093fa:	4613      	mov	r3, r2
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	4413      	add	r3, r2
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	440b      	add	r3, r1
 8009404:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009408:	2200      	movs	r2, #0
 800940a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800940c:	7bfa      	ldrb	r2, [r7, #15]
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	00db      	lsls	r3, r3, #3
 8009418:	440b      	add	r3, r1
 800941a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800941e:	2200      	movs	r2, #0
 8009420:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009422:	7bfb      	ldrb	r3, [r7, #15]
 8009424:	3301      	adds	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	791b      	ldrb	r3, [r3, #4]
 800942c:	7bfa      	ldrb	r2, [r7, #15]
 800942e:	429a      	cmp	r2, r3
 8009430:	d3b5      	bcc.n	800939e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6818      	ldr	r0, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	3304      	adds	r3, #4
 800943a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800943e:	f006 ff73 	bl	8010328 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	7a9b      	ldrb	r3, [r3, #10]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d102      	bne.n	800945e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f001 fc0e 	bl	800ac7a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009476:	2b01      	cmp	r3, #1
 8009478:	d101      	bne.n	800947e <HAL_PCD_Start+0x16>
 800947a:	2302      	movs	r3, #2
 800947c:	e012      	b.n	80094a4 <HAL_PCD_Start+0x3c>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f006 ff1a 	bl	80102c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4618      	mov	r0, r3
 8009496:	f008 fcf7 	bl	8011e88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4618      	mov	r0, r3
 80094ba:	f008 fcfc 	bl	8011eb6 <USB_ReadInterrupts>
 80094be:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fb06 	bl	8009adc <PCD_EP_ISR_Handler>

    return;
 80094d0:	e110      	b.n	80096f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d013      	beq.n	8009504 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094ee:	b292      	uxth	r2, r2
 80094f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f00b fcbc 	bl	8014e72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80094fa:	2100      	movs	r1, #0
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f8fc 	bl	80096fa <HAL_PCD_SetAddress>

    return;
 8009502:	e0f7      	b.n	80096f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00c      	beq.n	8009528 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009516:	b29a      	uxth	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009520:	b292      	uxth	r2, r2
 8009522:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8009526:	e0e5      	b.n	80096f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00c      	beq.n	800954c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800953a:	b29a      	uxth	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009544:	b292      	uxth	r2, r2
 8009546:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800954a:	e0d3      	b.n	80096f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d034      	beq.n	80095c0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800955e:	b29a      	uxth	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f022 0204 	bic.w	r2, r2, #4
 8009568:	b292      	uxth	r2, r2
 800956a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009576:	b29a      	uxth	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f022 0208 	bic.w	r2, r2, #8
 8009580:	b292      	uxth	r2, r2
 8009582:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800958c:	2b01      	cmp	r3, #1
 800958e:	d107      	bne.n	80095a0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2200      	movs	r2, #0
 8009594:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009598:	2100      	movs	r1, #0
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f00b fe5e 	bl	801525c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f00b fc9f 	bl	8014ee4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80095b8:	b292      	uxth	r2, r2
 80095ba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80095be:	e099      	b.n	80096f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d027      	beq.n	800961a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0208 	orr.w	r2, r2, #8
 80095dc:	b292      	uxth	r2, r2
 80095de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095f4:	b292      	uxth	r2, r2
 80095f6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009602:	b29a      	uxth	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f042 0204 	orr.w	r2, r2, #4
 800960c:	b292      	uxth	r2, r2
 800960e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f00b fc4c 	bl	8014eb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009618:	e06c      	b.n	80096f4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009620:	2b00      	cmp	r3, #0
 8009622:	d040      	beq.n	80096a6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800962c:	b29a      	uxth	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009636:	b292      	uxth	r2, r2
 8009638:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8009642:	2b00      	cmp	r3, #0
 8009644:	d12b      	bne.n	800969e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800964e:	b29a      	uxth	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f042 0204 	orr.w	r2, r2, #4
 8009658:	b292      	uxth	r2, r2
 800965a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009666:	b29a      	uxth	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f042 0208 	orr.w	r2, r2, #8
 8009670:	b292      	uxth	r2, r2
 8009672:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2201      	movs	r2, #1
 800967a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8009686:	b29b      	uxth	r3, r3
 8009688:	089b      	lsrs	r3, r3, #2
 800968a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009694:	2101      	movs	r1, #1
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f00b fde0 	bl	801525c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800969c:	e02a      	b.n	80096f4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f00b fc06 	bl	8014eb0 <HAL_PCD_SuspendCallback>
    return;
 80096a4:	e026      	b.n	80096f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00f      	beq.n	80096d0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80096c2:	b292      	uxth	r2, r2
 80096c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f00b fbc4 	bl	8014e56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80096ce:	e011      	b.n	80096f4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00c      	beq.n	80096f4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80096ec:	b292      	uxth	r2, r2
 80096ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80096f2:	bf00      	nop
  }
}
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	460b      	mov	r3, r1
 8009704:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <HAL_PCD_SetAddress+0x1a>
 8009710:	2302      	movs	r3, #2
 8009712:	e012      	b.n	800973a <HAL_PCD_SetAddress+0x40>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	78fa      	ldrb	r2, [r7, #3]
 8009720:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f008 fb98 	bl	8011e60 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	4608      	mov	r0, r1
 800974c:	4611      	mov	r1, r2
 800974e:	461a      	mov	r2, r3
 8009750:	4603      	mov	r3, r0
 8009752:	70fb      	strb	r3, [r7, #3]
 8009754:	460b      	mov	r3, r1
 8009756:	803b      	strh	r3, [r7, #0]
 8009758:	4613      	mov	r3, r2
 800975a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009764:	2b00      	cmp	r3, #0
 8009766:	da0e      	bge.n	8009786 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	f003 0207 	and.w	r2, r3, #7
 800976e:	4613      	mov	r3, r2
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	3310      	adds	r3, #16
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	4413      	add	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2201      	movs	r2, #1
 8009782:	705a      	strb	r2, [r3, #1]
 8009784:	e00e      	b.n	80097a4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009786:	78fb      	ldrb	r3, [r7, #3]
 8009788:	f003 0207 	and.w	r2, r3, #7
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	4413      	add	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80097a4:	78fb      	ldrb	r3, [r7, #3]
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80097b0:	883b      	ldrh	r3, [r7, #0]
 80097b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	78ba      	ldrb	r2, [r7, #2]
 80097be:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80097c0:	78bb      	ldrb	r3, [r7, #2]
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d102      	bne.n	80097cc <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d101      	bne.n	80097da <HAL_PCD_EP_Open+0x98>
 80097d6:	2302      	movs	r3, #2
 80097d8:	e00e      	b.n	80097f8 <HAL_PCD_EP_Open+0xb6>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f006 fdbb 	bl	8010364 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80097f6:	7afb      	ldrb	r3, [r7, #11]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3710      	adds	r7, #16
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	460b      	mov	r3, r1
 800980a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800980c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009810:	2b00      	cmp	r3, #0
 8009812:	da0e      	bge.n	8009832 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009814:	78fb      	ldrb	r3, [r7, #3]
 8009816:	f003 0207 	and.w	r2, r3, #7
 800981a:	4613      	mov	r3, r2
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	3310      	adds	r3, #16
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	4413      	add	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2201      	movs	r2, #1
 800982e:	705a      	strb	r2, [r3, #1]
 8009830:	e00e      	b.n	8009850 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	f003 0207 	and.w	r2, r3, #7
 8009838:	4613      	mov	r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4413      	add	r3, r2
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	4413      	add	r3, r2
 8009848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	f003 0307 	and.w	r3, r3, #7
 8009856:	b2da      	uxtb	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009862:	2b01      	cmp	r3, #1
 8009864:	d101      	bne.n	800986a <HAL_PCD_EP_Close+0x6a>
 8009866:	2302      	movs	r3, #2
 8009868:	e00e      	b.n	8009888 <HAL_PCD_EP_Close+0x88>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	68f9      	ldr	r1, [r7, #12]
 8009878:	4618      	mov	r0, r3
 800987a:	f007 fa5b 	bl	8010d34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	607a      	str	r2, [r7, #4]
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	460b      	mov	r3, r1
 800989e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80098a0:	7afb      	ldrb	r3, [r7, #11]
 80098a2:	f003 0207 	and.w	r2, r3, #7
 80098a6:	4613      	mov	r3, r2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	4413      	add	r3, r2
 80098ac:	00db      	lsls	r3, r3, #3
 80098ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	4413      	add	r3, r2
 80098b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	683a      	ldr	r2, [r7, #0]
 80098c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	2200      	movs	r2, #0
 80098c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	2200      	movs	r2, #0
 80098ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80098d0:	7afb      	ldrb	r3, [r7, #11]
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	b2da      	uxtb	r2, r3
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6979      	ldr	r1, [r7, #20]
 80098e2:	4618      	mov	r0, r3
 80098e4:	f007 fc13 	bl	801110e <USB_EPStartXfer>

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3718      	adds	r7, #24
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}

080098f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80098f2:	b480      	push	{r7}
 80098f4:	b083      	sub	sp, #12
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80098fe:	78fb      	ldrb	r3, [r7, #3]
 8009900:	f003 0207 	and.w	r2, r3, #7
 8009904:	6879      	ldr	r1, [r7, #4]
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	00db      	lsls	r3, r3, #3
 800990e:	440b      	add	r3, r1
 8009910:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8009914:	681b      	ldr	r3, [r3, #0]
}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr

08009922 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b086      	sub	sp, #24
 8009926:	af00      	add	r7, sp, #0
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	607a      	str	r2, [r7, #4]
 800992c:	603b      	str	r3, [r7, #0]
 800992e:	460b      	mov	r3, r1
 8009930:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009932:	7afb      	ldrb	r3, [r7, #11]
 8009934:	f003 0207 	and.w	r2, r3, #7
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	3310      	adds	r3, #16
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	4413      	add	r3, r2
 8009946:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	683a      	ldr	r2, [r7, #0]
 8009952:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2200      	movs	r2, #0
 8009966:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	2201      	movs	r2, #1
 800996c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800996e:	7afb      	ldrb	r3, [r7, #11]
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	b2da      	uxtb	r2, r3
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	6979      	ldr	r1, [r7, #20]
 8009980:	4618      	mov	r0, r3
 8009982:	f007 fbc4 	bl	801110e <USB_EPStartXfer>

  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	3718      	adds	r7, #24
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	f003 0307 	and.w	r3, r3, #7
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	7912      	ldrb	r2, [r2, #4]
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d901      	bls.n	80099ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	e03e      	b.n	8009a2c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80099ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	da0e      	bge.n	80099d4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	f003 0207 	and.w	r2, r3, #7
 80099bc:	4613      	mov	r3, r2
 80099be:	009b      	lsls	r3, r3, #2
 80099c0:	4413      	add	r3, r2
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	3310      	adds	r3, #16
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	4413      	add	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2201      	movs	r2, #1
 80099d0:	705a      	strb	r2, [r3, #1]
 80099d2:	e00c      	b.n	80099ee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80099d4:	78fa      	ldrb	r2, [r7, #3]
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	00db      	lsls	r3, r3, #3
 80099de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	4413      	add	r3, r2
 80099e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80099f4:	78fb      	ldrb	r3, [r7, #3]
 80099f6:	f003 0307 	and.w	r3, r3, #7
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d101      	bne.n	8009a0e <HAL_PCD_EP_SetStall+0x7e>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	e00e      	b.n	8009a2c <HAL_PCD_EP_SetStall+0x9c>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	68f9      	ldr	r1, [r7, #12]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f008 f925 	bl	8011c6c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	7912      	ldrb	r2, [r2, #4]
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d901      	bls.n	8009a52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e040      	b.n	8009ad4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	da0e      	bge.n	8009a78 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	f003 0207 	and.w	r2, r3, #7
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	00db      	lsls	r3, r3, #3
 8009a68:	3310      	adds	r3, #16
 8009a6a:	687a      	ldr	r2, [r7, #4]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2201      	movs	r2, #1
 8009a74:	705a      	strb	r2, [r3, #1]
 8009a76:	e00e      	b.n	8009a96 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a78:	78fb      	ldrb	r3, [r7, #3]
 8009a7a:	f003 0207 	and.w	r2, r3, #7
 8009a7e:	4613      	mov	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4413      	add	r3, r2
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a9c:	78fb      	ldrb	r3, [r7, #3]
 8009a9e:	f003 0307 	and.w	r3, r3, #7
 8009aa2:	b2da      	uxtb	r2, r3
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d101      	bne.n	8009ab6 <HAL_PCD_EP_ClrStall+0x82>
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	e00e      	b.n	8009ad4 <HAL_PCD_EP_ClrStall+0xa0>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68f9      	ldr	r1, [r7, #12]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f008 f922 	bl	8011d0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3710      	adds	r7, #16
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b092      	sub	sp, #72	@ 0x48
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009ae4:	e333      	b.n	800a14e <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009aee:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009af0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8009afc:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f040 8108 	bne.w	8009d16 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009b06:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009b08:	f003 0310 	and.w	r3, r3, #16
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d14c      	bne.n	8009baa <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b20:	813b      	strh	r3, [r7, #8]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	893b      	ldrh	r3, [r7, #8]
 8009b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	3310      	adds	r3, #16
 8009b38:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	461a      	mov	r2, r3
 8009b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	00db      	lsls	r3, r3, #3
 8009b4c:	4413      	add	r3, r2
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	6812      	ldr	r2, [r2, #0]
 8009b52:	4413      	add	r3, r2
 8009b54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b64:	695a      	ldr	r2, [r3, #20]
 8009b66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b68:	69db      	ldr	r3, [r3, #28]
 8009b6a:	441a      	add	r2, r3
 8009b6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b6e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009b70:	2100      	movs	r1, #0
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f00b f955 	bl	8014e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	7b1b      	ldrb	r3, [r3, #12]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 82e5 	beq.w	800a14e <PCD_EP_ISR_Handler+0x672>
 8009b84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f040 82e0 	bne.w	800a14e <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	7b1b      	ldrb	r3, [r3, #12]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	731a      	strb	r2, [r3, #12]
 8009ba8:	e2d1      	b.n	800a14e <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009bb0:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009bba:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d032      	beq.n	8009c2a <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	461a      	mov	r2, r3
 8009bd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	00db      	lsls	r3, r3, #3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	6812      	ldr	r2, [r2, #0]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009be2:	881b      	ldrh	r3, [r3, #0]
 8009be4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6818      	ldr	r0, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8009bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bf8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bfc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	f008 f9ab 	bl	8011f5a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009c10:	4013      	ands	r3, r2
 8009c12:	817b      	strh	r3, [r7, #10]
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	897a      	ldrh	r2, [r7, #10]
 8009c1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c1e:	b292      	uxth	r2, r2
 8009c20:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f00b f8d0 	bl	8014dc8 <HAL_PCD_SetupStageCallback>
 8009c28:	e291      	b.n	800a14e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009c2a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f280 828d 	bge.w	800a14e <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	881b      	ldrh	r3, [r3, #0]
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009c40:	4013      	ands	r3, r2
 8009c42:	81fb      	strh	r3, [r7, #14]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	89fa      	ldrh	r2, [r7, #14]
 8009c4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009c4e:	b292      	uxth	r2, r2
 8009c50:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	4413      	add	r3, r2
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	6812      	ldr	r2, [r2, #0]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009c76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c78:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009c7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d019      	beq.n	8009cb6 <PCD_EP_ISR_Handler+0x1da>
 8009c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d015      	beq.n	8009cb6 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c90:	6959      	ldr	r1, [r3, #20]
 8009c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c94:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c98:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	f008 f95d 	bl	8011f5a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ca2:	695a      	ldr	r2, [r3, #20]
 8009ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ca6:	69db      	ldr	r3, [r3, #28]
 8009ca8:	441a      	add	r2, r3
 8009caa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009cae:	2100      	movs	r1, #0
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f00b f89b 	bl	8014dec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	881b      	ldrh	r3, [r3, #0]
 8009cbc:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009cbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f040 8242 	bne.w	800a14e <PCD_EP_ISR_Handler+0x672>
 8009cca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009ccc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009cd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009cd4:	f000 823b 	beq.w	800a14e <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ce4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ce8:	81bb      	strh	r3, [r7, #12]
 8009cea:	89bb      	ldrh	r3, [r7, #12]
 8009cec:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009cf0:	81bb      	strh	r3, [r7, #12]
 8009cf2:	89bb      	ldrh	r3, [r7, #12]
 8009cf4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009cf8:	81bb      	strh	r3, [r7, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	89bb      	ldrh	r3, [r7, #12]
 8009d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	8013      	strh	r3, [r2, #0]
 8009d14:	e21b      	b.n	800a14e <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	881b      	ldrh	r3, [r3, #0]
 8009d26:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009d28:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	f280 80f1 	bge.w	8009f14 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	881b      	ldrh	r3, [r3, #0]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009d48:	4013      	ands	r3, r2
 8009d4a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	461a      	mov	r2, r3
 8009d52:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4413      	add	r3, r2
 8009d5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009d5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009d60:	b292      	uxth	r2, r2
 8009d62:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009d64:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8009d68:	4613      	mov	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	00db      	lsls	r3, r3, #3
 8009d70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	4413      	add	r3, r2
 8009d78:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8009d7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d7c:	7b1b      	ldrb	r3, [r3, #12]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d123      	bne.n	8009dca <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	4413      	add	r3, r2
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6812      	ldr	r2, [r2, #0]
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009da0:	881b      	ldrh	r3, [r3, #0]
 8009da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009da6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 8009daa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 808b 	beq.w	8009eca <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6818      	ldr	r0, [r3, #0]
 8009db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dba:	6959      	ldr	r1, [r3, #20]
 8009dbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dbe:	88da      	ldrh	r2, [r3, #6]
 8009dc0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009dc4:	f008 f8c9 	bl	8011f5a <USB_ReadPMA>
 8009dc8:	e07f      	b.n	8009eca <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8009dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dcc:	78db      	ldrb	r3, [r3, #3]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d109      	bne.n	8009de6 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009dd2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 f9c6 	bl	800a16a <HAL_PCD_EP_DB_Receive>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009de4:	e071      	b.n	8009eca <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4413      	add	r3, r2
 8009df4:	881b      	ldrh	r3, [r3, #0]
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	441a      	add	r2, r3
 8009e10:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d022      	beq.n	8009e86 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	00db      	lsls	r3, r3, #3
 8009e52:	4413      	add	r3, r2
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	6812      	ldr	r2, [r2, #0]
 8009e58:	4413      	add	r3, r2
 8009e5a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e64:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8009e68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d02c      	beq.n	8009eca <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6818      	ldr	r0, [r3, #0]
 8009e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e76:	6959      	ldr	r1, [r3, #20]
 8009e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e7a:	891a      	ldrh	r2, [r3, #8]
 8009e7c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009e80:	f008 f86b 	bl	8011f5a <USB_ReadPMA>
 8009e84:	e021      	b.n	8009eca <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	461a      	mov	r2, r3
 8009e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	4413      	add	r3, r2
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	6812      	ldr	r2, [r2, #0]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009eaa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8009eae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d009      	beq.n	8009eca <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ebc:	6959      	ldr	r1, [r3, #20]
 8009ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ec0:	895a      	ldrh	r2, [r3, #10]
 8009ec2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009ec6:	f008 f848 	bl	8011f5a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8009eca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ecc:	69da      	ldr	r2, [r3, #28]
 8009ece:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009ed2:	441a      	add	r2, r3
 8009ed4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ed6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8009ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009eda:	695a      	ldr	r2, [r3, #20]
 8009edc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009ee0:	441a      	add	r2, r3
 8009ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ee4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ee8:	699b      	ldr	r3, [r3, #24]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d005      	beq.n	8009efa <PCD_EP_ISR_Handler+0x41e>
 8009eee:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8009ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d206      	bcs.n	8009f08 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8009efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	4619      	mov	r1, r3
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f00a ff73 	bl	8014dec <HAL_PCD_DataOutStageCallback>
 8009f06:	e005      	b.n	8009f14 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f007 f8fd 	bl	801110e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009f14:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 8117 	beq.w	800a14e <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8009f20:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	3310      	adds	r3, #16
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	4413      	add	r3, r2
 8009f32:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	461a      	mov	r2, r3
 8009f3a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	4413      	add	r3, r2
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	461a      	mov	r2, r3
 8009f56:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	441a      	add	r2, r3
 8009f5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8009f6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f6e:	78db      	ldrb	r3, [r3, #3]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	f040 80a1 	bne.w	800a0b8 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8009f76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f78:	2200      	movs	r2, #0
 8009f7a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8009f7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f7e:	7b1b      	ldrb	r3, [r3, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	f000 8092 	beq.w	800a0aa <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009f86:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d046      	beq.n	800a01e <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009f90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f92:	785b      	ldrb	r3, [r3, #1]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d126      	bne.n	8009fe6 <PCD_EP_ISR_Handler+0x50a>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	617b      	str	r3, [r7, #20]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	461a      	mov	r2, r3
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	4413      	add	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]
 8009fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fb2:	781b      	ldrb	r3, [r3, #0]
 8009fb4:	00da      	lsls	r2, r3, #3
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	4413      	add	r3, r2
 8009fba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009fbe:	613b      	str	r3, [r7, #16]
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	881b      	ldrh	r3, [r3, #0]
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	801a      	strh	r2, [r3, #0]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	881b      	ldrh	r3, [r3, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	801a      	strh	r2, [r3, #0]
 8009fe4:	e061      	b.n	800a0aa <PCD_EP_ISR_Handler+0x5ce>
 8009fe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fe8:	785b      	ldrb	r3, [r3, #1]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d15d      	bne.n	800a0aa <PCD_EP_ISR_Handler+0x5ce>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	61fb      	str	r3, [r7, #28]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	461a      	mov	r2, r3
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	4413      	add	r3, r2
 800a004:	61fb      	str	r3, [r7, #28]
 800a006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	00da      	lsls	r2, r3, #3
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	4413      	add	r3, r2
 800a010:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a014:	61bb      	str	r3, [r7, #24]
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	2200      	movs	r2, #0
 800a01a:	801a      	strh	r2, [r3, #0]
 800a01c:	e045      	b.n	800a0aa <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a026:	785b      	ldrb	r3, [r3, #1]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d126      	bne.n	800a07a <PCD_EP_ISR_Handler+0x59e>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	627b      	str	r3, [r7, #36]	@ 0x24
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	461a      	mov	r2, r3
 800a03e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a040:	4413      	add	r3, r2
 800a042:	627b      	str	r3, [r7, #36]	@ 0x24
 800a044:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	00da      	lsls	r2, r3, #3
 800a04a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a04c:	4413      	add	r3, r2
 800a04e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a052:	623b      	str	r3, [r7, #32]
 800a054:	6a3b      	ldr	r3, [r7, #32]
 800a056:	881b      	ldrh	r3, [r3, #0]
 800a058:	b29b      	uxth	r3, r3
 800a05a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a05e:	b29a      	uxth	r2, r3
 800a060:	6a3b      	ldr	r3, [r7, #32]
 800a062:	801a      	strh	r2, [r3, #0]
 800a064:	6a3b      	ldr	r3, [r7, #32]
 800a066:	881b      	ldrh	r3, [r3, #0]
 800a068:	b29b      	uxth	r3, r3
 800a06a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a06e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a072:	b29a      	uxth	r2, r3
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	801a      	strh	r2, [r3, #0]
 800a078:	e017      	b.n	800a0aa <PCD_EP_ISR_Handler+0x5ce>
 800a07a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a07c:	785b      	ldrb	r3, [r3, #1]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d113      	bne.n	800a0aa <PCD_EP_ISR_Handler+0x5ce>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	461a      	mov	r2, r3
 800a08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a090:	4413      	add	r3, r2
 800a092:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a094:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	00da      	lsls	r2, r3, #3
 800a09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09c:	4413      	add	r3, r2
 800a09e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a0a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a0aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0ac:	781b      	ldrb	r3, [r3, #0]
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f00a feb6 	bl	8014e22 <HAL_PCD_DataInStageCallback>
 800a0b6:	e04a      	b.n	800a14e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a0b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a0ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d13f      	bne.n	800a142 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	00db      	lsls	r3, r3, #3
 800a0d4:	4413      	add	r3, r2
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a0e0:	881b      	ldrh	r3, [r3, #0]
 800a0e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0e6:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800a0e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0ea:	699a      	ldr	r2, [r3, #24]
 800a0ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d906      	bls.n	800a100 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 800a0f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0f4:	699a      	ldr	r2, [r3, #24]
 800a0f6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a0f8:	1ad2      	subs	r2, r2, r3
 800a0fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0fc:	619a      	str	r2, [r3, #24]
 800a0fe:	e002      	b.n	800a106 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 800a100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a102:	2200      	movs	r2, #0
 800a104:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a106:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a10e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	4619      	mov	r1, r3
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f00a fe84 	bl	8014e22 <HAL_PCD_DataInStageCallback>
 800a11a:	e018      	b.n	800a14e <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a11c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a11e:	695a      	ldr	r2, [r3, #20]
 800a120:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a122:	441a      	add	r2, r3
 800a124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a126:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a12e:	441a      	add	r2, r3
 800a130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a132:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a13a:	4618      	mov	r0, r3
 800a13c:	f006 ffe7 	bl	801110e <USB_EPStartXfer>
 800a140:	e005      	b.n	800a14e <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a142:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a144:	461a      	mov	r2, r3
 800a146:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 f917 	bl	800a37c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800a156:	b29b      	uxth	r3, r3
 800a158:	b21b      	sxth	r3, r3
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f6ff acc3 	blt.w	8009ae6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3748      	adds	r7, #72	@ 0x48
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b088      	sub	sp, #32
 800a16e:	af00      	add	r7, sp, #0
 800a170:	60f8      	str	r0, [r7, #12]
 800a172:	60b9      	str	r1, [r7, #8]
 800a174:	4613      	mov	r3, r2
 800a176:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a178:	88fb      	ldrh	r3, [r7, #6]
 800a17a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d07c      	beq.n	800a27c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	461a      	mov	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	00db      	lsls	r3, r3, #3
 800a194:	4413      	add	r3, r2
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	6812      	ldr	r2, [r2, #0]
 800a19a:	4413      	add	r3, r2
 800a19c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a1a0:	881b      	ldrh	r3, [r3, #0]
 800a1a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	699a      	ldr	r2, [r3, #24]
 800a1ac:	8b7b      	ldrh	r3, [r7, #26]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d306      	bcc.n	800a1c0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	699a      	ldr	r2, [r3, #24]
 800a1b6:	8b7b      	ldrh	r3, [r7, #26]
 800a1b8:	1ad2      	subs	r2, r2, r3
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	619a      	str	r2, [r3, #24]
 800a1be:	e002      	b.n	800a1c6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d123      	bne.n	800a216 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	009b      	lsls	r3, r3, #2
 800a1da:	4413      	add	r3, r2
 800a1dc:	881b      	ldrh	r3, [r3, #0]
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a1e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1e8:	833b      	strh	r3, [r7, #24]
 800a1ea:	8b3b      	ldrh	r3, [r7, #24]
 800a1ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a1f0:	833b      	strh	r3, [r7, #24]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	441a      	add	r2, r3
 800a200:	8b3b      	ldrh	r3, [r7, #24]
 800a202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a20a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a20e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a212:	b29b      	uxth	r3, r3
 800a214:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a216:	88fb      	ldrh	r3, [r7, #6]
 800a218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d01f      	beq.n	800a260 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	461a      	mov	r2, r3
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	009b      	lsls	r3, r3, #2
 800a22c:	4413      	add	r3, r2
 800a22e:	881b      	ldrh	r3, [r3, #0]
 800a230:	b29b      	uxth	r3, r3
 800a232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a23a:	82fb      	strh	r3, [r7, #22]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	009b      	lsls	r3, r3, #2
 800a248:	441a      	add	r2, r3
 800a24a:	8afb      	ldrh	r3, [r7, #22]
 800a24c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a250:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a258:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a260:	8b7b      	ldrh	r3, [r7, #26]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 8085 	beq.w	800a372 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6818      	ldr	r0, [r3, #0]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	6959      	ldr	r1, [r3, #20]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	891a      	ldrh	r2, [r3, #8]
 800a274:	8b7b      	ldrh	r3, [r7, #26]
 800a276:	f007 fe70 	bl	8011f5a <USB_ReadPMA>
 800a27a:	e07a      	b.n	800a372 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a284:	b29b      	uxth	r3, r3
 800a286:	461a      	mov	r2, r3
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	781b      	ldrb	r3, [r3, #0]
 800a28c:	00db      	lsls	r3, r3, #3
 800a28e:	4413      	add	r3, r2
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	6812      	ldr	r2, [r2, #0]
 800a294:	4413      	add	r3, r2
 800a296:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a29a:	881b      	ldrh	r3, [r3, #0]
 800a29c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2a0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	699a      	ldr	r2, [r3, #24]
 800a2a6:	8b7b      	ldrh	r3, [r7, #26]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d306      	bcc.n	800a2ba <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	699a      	ldr	r2, [r3, #24]
 800a2b0:	8b7b      	ldrh	r3, [r7, #26]
 800a2b2:	1ad2      	subs	r2, r2, r3
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	619a      	str	r2, [r3, #24]
 800a2b8:	e002      	b.n	800a2c0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d123      	bne.n	800a310 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	009b      	lsls	r3, r3, #2
 800a2d4:	4413      	add	r3, r2
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2e2:	83fb      	strh	r3, [r7, #30]
 800a2e4:	8bfb      	ldrh	r3, [r7, #30]
 800a2e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a2ea:	83fb      	strh	r3, [r7, #30]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	441a      	add	r2, r3
 800a2fa:	8bfb      	ldrh	r3, [r7, #30]
 800a2fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a310:	88fb      	ldrh	r3, [r7, #6]
 800a312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a316:	2b00      	cmp	r3, #0
 800a318:	d11f      	bne.n	800a35a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	461a      	mov	r2, r3
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	009b      	lsls	r3, r3, #2
 800a326:	4413      	add	r3, r2
 800a328:	881b      	ldrh	r3, [r3, #0]
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a334:	83bb      	strh	r3, [r7, #28]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	461a      	mov	r2, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	441a      	add	r2, r3
 800a344:	8bbb      	ldrh	r3, [r7, #28]
 800a346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a34a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a34e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a356:	b29b      	uxth	r3, r3
 800a358:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800a35a:	8b7b      	ldrh	r3, [r7, #26]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d008      	beq.n	800a372 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	6818      	ldr	r0, [r3, #0]
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	6959      	ldr	r1, [r3, #20]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	895a      	ldrh	r2, [r3, #10]
 800a36c:	8b7b      	ldrh	r3, [r7, #26]
 800a36e:	f007 fdf4 	bl	8011f5a <USB_ReadPMA>
    }
  }

  return count;
 800a372:	8b7b      	ldrh	r3, [r7, #26]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3720      	adds	r7, #32
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b0a6      	sub	sp, #152	@ 0x98
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a38a:	88fb      	ldrh	r3, [r7, #6]
 800a38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 81f7 	beq.w	800a784 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a39e:	b29b      	uxth	r3, r3
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	00db      	lsls	r3, r3, #3
 800a3a8:	4413      	add	r3, r2
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	6812      	ldr	r2, [r2, #0]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3ba:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	699a      	ldr	r2, [r3, #24]
 800a3c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d907      	bls.n	800a3da <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	699a      	ldr	r2, [r3, #24]
 800a3ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a3d2:	1ad2      	subs	r2, r2, r3
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	619a      	str	r2, [r3, #24]
 800a3d8:	e002      	b.n	800a3e0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f040 80e1 	bne.w	800a5ac <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	785b      	ldrb	r3, [r3, #1]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d126      	bne.n	800a440 <HAL_PCD_EP_DB_Transmit+0xc4>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a400:	b29b      	uxth	r3, r3
 800a402:	461a      	mov	r2, r3
 800a404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a406:	4413      	add	r3, r2
 800a408:	633b      	str	r3, [r7, #48]	@ 0x30
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	00da      	lsls	r2, r3, #3
 800a410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a412:	4413      	add	r3, r2
 800a414:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a41c:	881b      	ldrh	r3, [r3, #0]
 800a41e:	b29b      	uxth	r3, r3
 800a420:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a424:	b29a      	uxth	r2, r3
 800a426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a428:	801a      	strh	r2, [r3, #0]
 800a42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	b29b      	uxth	r3, r3
 800a430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a438:	b29a      	uxth	r2, r3
 800a43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a43c:	801a      	strh	r2, [r3, #0]
 800a43e:	e01a      	b.n	800a476 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	785b      	ldrb	r3, [r3, #1]
 800a444:	2b01      	cmp	r3, #1
 800a446:	d116      	bne.n	800a476 <HAL_PCD_EP_DB_Transmit+0xfa>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a456:	b29b      	uxth	r3, r3
 800a458:	461a      	mov	r2, r3
 800a45a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45c:	4413      	add	r3, r2
 800a45e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	00da      	lsls	r2, r3, #3
 800a466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a468:	4413      	add	r3, r2
 800a46a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a46e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a472:	2200      	movs	r2, #0
 800a474:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	785b      	ldrb	r3, [r3, #1]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d126      	bne.n	800a4d2 <HAL_PCD_EP_DB_Transmit+0x156>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	623b      	str	r3, [r7, #32]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a492:	b29b      	uxth	r3, r3
 800a494:	461a      	mov	r2, r3
 800a496:	6a3b      	ldr	r3, [r7, #32]
 800a498:	4413      	add	r3, r2
 800a49a:	623b      	str	r3, [r7, #32]
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	00da      	lsls	r2, r3, #3
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4aa:	61fb      	str	r3, [r7, #28]
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	881b      	ldrh	r3, [r3, #0]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	801a      	strh	r2, [r3, #0]
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	801a      	strh	r2, [r3, #0]
 800a4d0:	e017      	b.n	800a502 <HAL_PCD_EP_DB_Transmit+0x186>
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	785b      	ldrb	r3, [r3, #1]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d113      	bne.n	800a502 <HAL_PCD_EP_DB_Transmit+0x186>
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e8:	4413      	add	r3, r2
 800a4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	00da      	lsls	r2, r3, #3
 800a4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fe:	2200      	movs	r2, #0
 800a500:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	78db      	ldrb	r3, [r3, #3]
 800a506:	2b02      	cmp	r3, #2
 800a508:	d123      	bne.n	800a552 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	461a      	mov	r2, r3
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	4413      	add	r3, r2
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a520:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a524:	837b      	strh	r3, [r7, #26]
 800a526:	8b7b      	ldrh	r3, [r7, #26]
 800a528:	f083 0320 	eor.w	r3, r3, #32
 800a52c:	837b      	strh	r3, [r7, #26]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	781b      	ldrb	r3, [r3, #0]
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	441a      	add	r2, r3
 800a53c:	8b7b      	ldrh	r3, [r7, #26]
 800a53e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a54a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a54e:	b29b      	uxth	r3, r3
 800a550:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	4619      	mov	r1, r3
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f00a fc62 	bl	8014e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a55e:	88fb      	ldrh	r3, [r7, #6]
 800a560:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01f      	beq.n	800a5a8 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	461a      	mov	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a57e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a582:	833b      	strh	r3, [r7, #24]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	441a      	add	r2, r3
 800a592:	8b3b      	ldrh	r3, [r7, #24]
 800a594:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a598:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a59c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a5a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	e31f      	b.n	800abec <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a5ac:	88fb      	ldrh	r3, [r7, #6]
 800a5ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d021      	beq.n	800a5fa <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5d0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	441a      	add	r2, r3
 800a5e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a5e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a5f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a600:	2b01      	cmp	r3, #1
 800a602:	f040 82ca 	bne.w	800ab9a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	695a      	ldr	r2, [r3, #20]
 800a60a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a60e:	441a      	add	r2, r3
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	69da      	ldr	r2, [r3, #28]
 800a618:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a61c:	441a      	add	r2, r3
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	6a1a      	ldr	r2, [r3, #32]
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d309      	bcc.n	800a642 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	6a1a      	ldr	r2, [r3, #32]
 800a638:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a63a:	1ad2      	subs	r2, r2, r3
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	621a      	str	r2, [r3, #32]
 800a640:	e015      	b.n	800a66e <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	6a1b      	ldr	r3, [r3, #32]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d107      	bne.n	800a65a <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 800a64a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a64e:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a658:	e009      	b.n	800a66e <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2200      	movs	r2, #0
 800a66c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	785b      	ldrb	r3, [r3, #1]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d15f      	bne.n	800a736 <HAL_PCD_EP_DB_Transmit+0x3ba>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	643b      	str	r3, [r7, #64]	@ 0x40
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a684:	b29b      	uxth	r3, r3
 800a686:	461a      	mov	r2, r3
 800a688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a68a:	4413      	add	r3, r2
 800a68c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	00da      	lsls	r2, r3, #3
 800a694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a696:	4413      	add	r3, r2
 800a698:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a69e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ac:	801a      	strh	r2, [r3, #0]
 800a6ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10a      	bne.n	800a6ca <HAL_PCD_EP_DB_Transmit+0x34e>
 800a6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b6:	881b      	ldrh	r3, [r3, #0]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6c2:	b29a      	uxth	r2, r3
 800a6c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6c6:	801a      	strh	r2, [r3, #0]
 800a6c8:	e051      	b.n	800a76e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800a6ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6ce:	d816      	bhi.n	800a6fe <HAL_PCD_EP_DB_Transmit+0x382>
 800a6d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6d2:	085b      	lsrs	r3, r3, #1
 800a6d4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a6d8:	f003 0301 	and.w	r3, r3, #1
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <HAL_PCD_EP_DB_Transmit+0x36a>
 800a6e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	029b      	lsls	r3, r3, #10
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6fa:	801a      	strh	r2, [r3, #0]
 800a6fc:	e037      	b.n	800a76e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800a6fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a700:	095b      	lsrs	r3, r3, #5
 800a702:	653b      	str	r3, [r7, #80]	@ 0x50
 800a704:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a706:	f003 031f 	and.w	r3, r3, #31
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d102      	bne.n	800a714 <HAL_PCD_EP_DB_Transmit+0x398>
 800a70e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a710:	3b01      	subs	r3, #1
 800a712:	653b      	str	r3, [r7, #80]	@ 0x50
 800a714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	b29a      	uxth	r2, r3
 800a71a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a71c:	b29b      	uxth	r3, r3
 800a71e:	029b      	lsls	r3, r3, #10
 800a720:	b29b      	uxth	r3, r3
 800a722:	4313      	orrs	r3, r2
 800a724:	b29b      	uxth	r3, r3
 800a726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a72a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a72e:	b29a      	uxth	r2, r3
 800a730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a732:	801a      	strh	r2, [r3, #0]
 800a734:	e01b      	b.n	800a76e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	785b      	ldrb	r3, [r3, #1]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d117      	bne.n	800a76e <HAL_PCD_EP_DB_Transmit+0x3f2>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	461a      	mov	r2, r3
 800a750:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a752:	4413      	add	r3, r2
 800a754:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	00da      	lsls	r2, r3, #3
 800a75c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a75e:	4413      	add	r3, r2
 800a760:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a764:	647b      	str	r3, [r7, #68]	@ 0x44
 800a766:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a768:	b29a      	uxth	r2, r3
 800a76a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a76c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	6959      	ldr	r1, [r3, #20]
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	891a      	ldrh	r2, [r3, #8]
 800a77a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	f007 fbaa 	bl	8011ed6 <USB_WritePMA>
 800a782:	e20a      	b.n	800ab9a <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	00db      	lsls	r3, r3, #3
 800a796:	4413      	add	r3, r2
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	6812      	ldr	r2, [r2, #0]
 800a79c:	4413      	add	r3, r2
 800a79e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7a8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	699a      	ldr	r2, [r3, #24]
 800a7b0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d307      	bcc.n	800a7c8 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	699a      	ldr	r2, [r3, #24]
 800a7bc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a7c0:	1ad2      	subs	r2, r2, r3
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	619a      	str	r2, [r3, #24]
 800a7c6:	e002      	b.n	800a7ce <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f040 80f6 	bne.w	800a9c4 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	785b      	ldrb	r3, [r3, #1]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d126      	bne.n	800a82e <HAL_PCD_EP_DB_Transmit+0x4b2>
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	677b      	str	r3, [r7, #116]	@ 0x74
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7f4:	4413      	add	r3, r2
 800a7f6:	677b      	str	r3, [r7, #116]	@ 0x74
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	00da      	lsls	r2, r3, #3
 800a7fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a800:	4413      	add	r3, r2
 800a802:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a806:	673b      	str	r3, [r7, #112]	@ 0x70
 800a808:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a80a:	881b      	ldrh	r3, [r3, #0]
 800a80c:	b29b      	uxth	r3, r3
 800a80e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a812:	b29a      	uxth	r2, r3
 800a814:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a816:	801a      	strh	r2, [r3, #0]
 800a818:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a826:	b29a      	uxth	r2, r3
 800a828:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a82a:	801a      	strh	r2, [r3, #0]
 800a82c:	e01a      	b.n	800a864 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	785b      	ldrb	r3, [r3, #1]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d116      	bne.n	800a864 <HAL_PCD_EP_DB_Transmit+0x4e8>
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a844:	b29b      	uxth	r3, r3
 800a846:	461a      	mov	r2, r3
 800a848:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a84a:	4413      	add	r3, r2
 800a84c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	00da      	lsls	r2, r3, #3
 800a854:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a856:	4413      	add	r3, r2
 800a858:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a85c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a85e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a860:	2200      	movs	r2, #0
 800a862:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	785b      	ldrb	r3, [r3, #1]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d12f      	bne.n	800a8d4 <HAL_PCD_EP_DB_Transmit+0x558>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a884:	b29b      	uxth	r3, r3
 800a886:	461a      	mov	r2, r3
 800a888:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a88c:	4413      	add	r3, r2
 800a88e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	00da      	lsls	r2, r3, #3
 800a898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a89c:	4413      	add	r3, r2
 800a89e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a8a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a8a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8b8:	801a      	strh	r2, [r3, #0]
 800a8ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8be:	881b      	ldrh	r3, [r3, #0]
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	e01c      	b.n	800a90e <HAL_PCD_EP_DB_Transmit+0x592>
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	785b      	ldrb	r3, [r3, #1]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d118      	bne.n	800a90e <HAL_PCD_EP_DB_Transmit+0x592>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	781b      	ldrb	r3, [r3, #0]
 800a8f6:	00da      	lsls	r2, r3, #3
 800a8f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a902:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a906:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a90a:	2200      	movs	r2, #0
 800a90c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	78db      	ldrb	r3, [r3, #3]
 800a912:	2b02      	cmp	r3, #2
 800a914:	d127      	bne.n	800a966 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4413      	add	r3, r2
 800a924:	881b      	ldrh	r3, [r3, #0]
 800a926:	b29b      	uxth	r3, r3
 800a928:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a92c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a930:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a934:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a938:	f083 0320 	eor.w	r3, r3, #32
 800a93c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	461a      	mov	r2, r3
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	781b      	ldrb	r3, [r3, #0]
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	441a      	add	r2, r3
 800a94e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a95a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a95e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a962:	b29b      	uxth	r3, r3
 800a964:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	781b      	ldrb	r3, [r3, #0]
 800a96a:	4619      	mov	r1, r3
 800a96c:	68f8      	ldr	r0, [r7, #12]
 800a96e:	f00a fa58 	bl	8014e22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a972:	88fb      	ldrh	r3, [r7, #6]
 800a974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d121      	bne.n	800a9c0 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	461a      	mov	r2, r3
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4413      	add	r3, r2
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a996:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	461a      	mov	r2, r3
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	441a      	add	r2, r3
 800a9a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800a9ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a9b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e113      	b.n	800abec <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a9c4:	88fb      	ldrh	r3, [r7, #6]
 800a9c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d121      	bne.n	800aa12 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	4413      	add	r3, r2
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9e8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	441a      	add	r2, r3
 800a9fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a9fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aa0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	f040 80be 	bne.w	800ab9a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	695a      	ldr	r2, [r3, #20]
 800aa22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa26:	441a      	add	r2, r3
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	69da      	ldr	r2, [r3, #28]
 800aa30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa34:	441a      	add	r2, r3
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	6a1a      	ldr	r2, [r3, #32]
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d309      	bcc.n	800aa5a <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	6a1a      	ldr	r2, [r3, #32]
 800aa50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa52:	1ad2      	subs	r2, r2, r3
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	621a      	str	r2, [r3, #32]
 800aa58:	e015      	b.n	800aa86 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d107      	bne.n	800aa72 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 800aa62:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800aa66:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800aa70:	e009      	b.n	800aa86 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	6a1b      	ldr	r3, [r3, #32]
 800aa76:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	785b      	ldrb	r3, [r3, #1]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d15f      	bne.n	800ab54 <HAL_PCD_EP_DB_Transmit+0x7d8>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aaa2:	b29b      	uxth	r3, r3
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aaa8:	4413      	add	r3, r2
 800aaaa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	00da      	lsls	r2, r3, #3
 800aab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aab4:	4413      	add	r3, r2
 800aab6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aaba:	667b      	str	r3, [r7, #100]	@ 0x64
 800aabc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aaca:	801a      	strh	r2, [r3, #0]
 800aacc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10a      	bne.n	800aae8 <HAL_PCD_EP_DB_Transmit+0x76c>
 800aad2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aadc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aae4:	801a      	strh	r2, [r3, #0]
 800aae6:	e04e      	b.n	800ab86 <HAL_PCD_EP_DB_Transmit+0x80a>
 800aae8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aaea:	2b3e      	cmp	r3, #62	@ 0x3e
 800aaec:	d816      	bhi.n	800ab1c <HAL_PCD_EP_DB_Transmit+0x7a0>
 800aaee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aaf0:	085b      	lsrs	r3, r3, #1
 800aaf2:	663b      	str	r3, [r7, #96]	@ 0x60
 800aaf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aaf6:	f003 0301 	and.w	r3, r3, #1
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d002      	beq.n	800ab04 <HAL_PCD_EP_DB_Transmit+0x788>
 800aafe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab00:	3301      	adds	r3, #1
 800ab02:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	029b      	lsls	r3, r3, #10
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	4313      	orrs	r3, r2
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab18:	801a      	strh	r2, [r3, #0]
 800ab1a:	e034      	b.n	800ab86 <HAL_PCD_EP_DB_Transmit+0x80a>
 800ab1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab1e:	095b      	lsrs	r3, r3, #5
 800ab20:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab24:	f003 031f 	and.w	r3, r3, #31
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <HAL_PCD_EP_DB_Transmit+0x7b6>
 800ab2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab2e:	3b01      	subs	r3, #1
 800ab30:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	029b      	lsls	r3, r3, #10
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	4313      	orrs	r3, r2
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab50:	801a      	strh	r2, [r3, #0]
 800ab52:	e018      	b.n	800ab86 <HAL_PCD_EP_DB_Transmit+0x80a>
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	785b      	ldrb	r3, [r3, #1]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d114      	bne.n	800ab86 <HAL_PCD_EP_DB_Transmit+0x80a>
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	461a      	mov	r2, r3
 800ab68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab6a:	4413      	add	r3, r2
 800ab6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	00da      	lsls	r2, r3, #3
 800ab74:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab76:	4413      	add	r3, r2
 800ab78:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ab7e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab84:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6818      	ldr	r0, [r3, #0]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	6959      	ldr	r1, [r3, #20]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	895a      	ldrh	r2, [r3, #10]
 800ab92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	f007 f99e 	bl	8011ed6 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	461a      	mov	r2, r3
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abb4:	82fb      	strh	r3, [r7, #22]
 800abb6:	8afb      	ldrh	r3, [r7, #22]
 800abb8:	f083 0310 	eor.w	r3, r3, #16
 800abbc:	82fb      	strh	r3, [r7, #22]
 800abbe:	8afb      	ldrh	r3, [r7, #22]
 800abc0:	f083 0320 	eor.w	r3, r3, #32
 800abc4:	82fb      	strh	r3, [r7, #22]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	461a      	mov	r2, r3
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	441a      	add	r2, r3
 800abd4:	8afb      	ldrh	r3, [r7, #22]
 800abd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3798      	adds	r7, #152	@ 0x98
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b087      	sub	sp, #28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	607b      	str	r3, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	817b      	strh	r3, [r7, #10]
 800ac02:	4613      	mov	r3, r2
 800ac04:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ac06:	897b      	ldrh	r3, [r7, #10]
 800ac08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00b      	beq.n	800ac2a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ac12:	897b      	ldrh	r3, [r7, #10]
 800ac14:	f003 0207 	and.w	r2, r3, #7
 800ac18:	4613      	mov	r3, r2
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	4413      	add	r3, r2
 800ac1e:	00db      	lsls	r3, r3, #3
 800ac20:	3310      	adds	r3, #16
 800ac22:	68fa      	ldr	r2, [r7, #12]
 800ac24:	4413      	add	r3, r2
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	e009      	b.n	800ac3e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ac2a:	897a      	ldrh	r2, [r7, #10]
 800ac2c:	4613      	mov	r3, r2
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	4413      	add	r3, r2
 800ac32:	00db      	lsls	r3, r3, #3
 800ac34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ac3e:	893b      	ldrh	r3, [r7, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d107      	bne.n	800ac54 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	2200      	movs	r2, #0
 800ac48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	80da      	strh	r2, [r3, #6]
 800ac52:	e00b      	b.n	800ac6c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	2201      	movs	r2, #1
 800ac58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	0c1b      	lsrs	r3, r3, #16
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ac6c:	2300      	movs	r3, #0
}
 800ac6e:	4618      	mov	r0, r3
 800ac70:	371c      	adds	r7, #28
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b085      	sub	sp, #20
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	f043 0301 	orr.w	r3, r3, #1
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	f043 0302 	orr.w	r3, r3, #2
 800acb8:	b29a      	uxth	r2, r3
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800acc0:	2300      	movs	r3, #0
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
	...

0800acd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800acd0:	b480      	push	{r7}
 800acd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800acd4:	4b05      	ldr	r3, [pc, #20]	@ (800acec <HAL_PWR_EnableBkUpAccess+0x1c>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a04      	ldr	r2, [pc, #16]	@ (800acec <HAL_PWR_EnableBkUpAccess+0x1c>)
 800acda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acde:	6013      	str	r3, [r2, #0]
}
 800ace0:	bf00      	nop
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	58000400 	.word	0x58000400

0800acf0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800acf0:	b480      	push	{r7}
 800acf2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800acf4:	4b04      	ldr	r3, [pc, #16]	@ (800ad08 <HAL_PWREx_GetVoltageRange+0x18>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
 800ad06:	bf00      	nop
 800ad08:	58000400 	.word	0x58000400

0800ad0c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ad10:	4b05      	ldr	r3, [pc, #20]	@ (800ad28 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	4a04      	ldr	r2, [pc, #16]	@ (800ad28 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ad16:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ad1a:	6053      	str	r3, [r2, #4]
}
 800ad1c:	bf00      	nop
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	58000400 	.word	0x58000400

0800ad2c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800ad30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ad3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad3e:	d101      	bne.n	800ad44 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800ad40:	2301      	movs	r3, #1
 800ad42:	e000      	b.n	800ad46 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <LL_RCC_HSE_Enable>:
{
 800ad50:	b480      	push	{r7}
 800ad52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ad54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad62:	6013      	str	r3, [r2, #0]
}
 800ad64:	bf00      	nop
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <LL_RCC_HSE_Disable>:
{
 800ad6e:	b480      	push	{r7}
 800ad70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ad72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad80:	6013      	str	r3, [r2, #0]
}
 800ad82:	bf00      	nop
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <LL_RCC_HSE_IsReady>:
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800ad90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad9e:	d101      	bne.n	800ada4 <LL_RCC_HSE_IsReady+0x18>
 800ada0:	2301      	movs	r3, #1
 800ada2:	e000      	b.n	800ada6 <LL_RCC_HSE_IsReady+0x1a>
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <LL_RCC_HSI_Enable>:
{
 800adb0:	b480      	push	{r7}
 800adb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800adb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800adbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adc2:	6013      	str	r3, [r2, #0]
}
 800adc4:	bf00      	nop
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <LL_RCC_HSI_Disable>:
{
 800adce:	b480      	push	{r7}
 800add0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800add2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800addc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ade0:	6013      	str	r3, [r2, #0]
}
 800ade2:	bf00      	nop
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <LL_RCC_HSI_IsReady>:
{
 800adec:	b480      	push	{r7}
 800adee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800adf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800adfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800adfe:	d101      	bne.n	800ae04 <LL_RCC_HSI_IsReady+0x18>
 800ae00:	2301      	movs	r3, #1
 800ae02:	e000      	b.n	800ae06 <LL_RCC_HSI_IsReady+0x1a>
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <LL_RCC_HSI_SetCalibTrimming>:
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800ae18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	061b      	lsls	r3, r3, #24
 800ae26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	604b      	str	r3, [r1, #4]
}
 800ae2e:	bf00      	nop
 800ae30:	370c      	adds	r7, #12
 800ae32:	46bd      	mov	sp, r7
 800ae34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae38:	4770      	bx	lr

0800ae3a <LL_RCC_HSI48_Enable>:
{
 800ae3a:	b480      	push	{r7}
 800ae3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ae3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae4a:	f043 0301 	orr.w	r3, r3, #1
 800ae4e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ae52:	bf00      	nop
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <LL_RCC_HSI48_Disable>:
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800ae60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae6c:	f023 0301 	bic.w	r3, r3, #1
 800ae70:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800ae74:	bf00      	nop
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr

0800ae7e <LL_RCC_HSI48_IsReady>:
{
 800ae7e:	b480      	push	{r7}
 800ae80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800ae82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ae8a:	f003 0302 	and.w	r3, r3, #2
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d101      	bne.n	800ae96 <LL_RCC_HSI48_IsReady+0x18>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e000      	b.n	800ae98 <LL_RCC_HSI48_IsReady+0x1a>
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <LL_RCC_LSE_Enable>:
{
 800aea2:	b480      	push	{r7}
 800aea4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800aea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aeb2:	f043 0301 	orr.w	r3, r3, #1
 800aeb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800aeba:	bf00      	nop
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <LL_RCC_LSE_Disable>:
{
 800aec4:	b480      	push	{r7}
 800aec6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800aec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aed0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aed4:	f023 0301 	bic.w	r3, r3, #1
 800aed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800aedc:	bf00      	nop
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr

0800aee6 <LL_RCC_LSE_EnableBypass>:
{
 800aee6:	b480      	push	{r7}
 800aee8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800aeea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aeee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aef2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aef6:	f043 0304 	orr.w	r3, r3, #4
 800aefa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800aefe:	bf00      	nop
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <LL_RCC_LSE_DisableBypass>:
{
 800af08:	b480      	push	{r7}
 800af0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800af0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af18:	f023 0304 	bic.w	r3, r3, #4
 800af1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800af20:	bf00      	nop
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <LL_RCC_LSE_IsReady>:
{
 800af2a:	b480      	push	{r7}
 800af2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800af2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af36:	f003 0302 	and.w	r3, r3, #2
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	d101      	bne.n	800af42 <LL_RCC_LSE_IsReady+0x18>
 800af3e:	2301      	movs	r3, #1
 800af40:	e000      	b.n	800af44 <LL_RCC_LSE_IsReady+0x1a>
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	46bd      	mov	sp, r7
 800af48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <LL_RCC_LSI1_Enable>:
{
 800af4e:	b480      	push	{r7}
 800af50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800af52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af5e:	f043 0301 	orr.w	r3, r3, #1
 800af62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800af66:	bf00      	nop
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <LL_RCC_LSI1_Disable>:
{
 800af70:	b480      	push	{r7}
 800af72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800af74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af80:	f023 0301 	bic.w	r3, r3, #1
 800af84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800af88:	bf00      	nop
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <LL_RCC_LSI1_IsReady>:
{
 800af92:	b480      	push	{r7}
 800af94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800af96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800af9e:	f003 0302 	and.w	r3, r3, #2
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d101      	bne.n	800afaa <LL_RCC_LSI1_IsReady+0x18>
 800afa6:	2301      	movs	r3, #1
 800afa8:	e000      	b.n	800afac <LL_RCC_LSI1_IsReady+0x1a>
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <LL_RCC_LSI2_Enable>:
{
 800afb6:	b480      	push	{r7}
 800afb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800afba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800afc6:	f043 0304 	orr.w	r3, r3, #4
 800afca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800afce:	bf00      	nop
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <LL_RCC_LSI2_Disable>:
{
 800afd8:	b480      	push	{r7}
 800afda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800afdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800afe4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800afe8:	f023 0304 	bic.w	r3, r3, #4
 800afec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800aff0:	bf00      	nop
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <LL_RCC_LSI2_IsReady>:
{
 800affa:	b480      	push	{r7}
 800affc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800affe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b002:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b006:	f003 0308 	and.w	r3, r3, #8
 800b00a:	2b08      	cmp	r3, #8
 800b00c:	d101      	bne.n	800b012 <LL_RCC_LSI2_IsReady+0x18>
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <LL_RCC_LSI2_IsReady+0x1a>
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <LL_RCC_LSI2_SetTrimming>:
{
 800b01e:	b480      	push	{r7}
 800b020:	b083      	sub	sp, #12
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b02a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b02e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	021b      	lsls	r3, r3, #8
 800b036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b03a:	4313      	orrs	r3, r2
 800b03c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <LL_RCC_MSI_Enable>:
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b050:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b05a:	f043 0301 	orr.w	r3, r3, #1
 800b05e:	6013      	str	r3, [r2, #0]
}
 800b060:	bf00      	nop
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <LL_RCC_MSI_Disable>:
{
 800b06a:	b480      	push	{r7}
 800b06c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b06e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b078:	f023 0301 	bic.w	r3, r3, #1
 800b07c:	6013      	str	r3, [r2, #0]
}
 800b07e:	bf00      	nop
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <LL_RCC_MSI_IsReady>:
{
 800b088:	b480      	push	{r7}
 800b08a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b08c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	2b02      	cmp	r3, #2
 800b098:	d101      	bne.n	800b09e <LL_RCC_MSI_IsReady+0x16>
 800b09a:	2301      	movs	r3, #1
 800b09c:	e000      	b.n	800b0a0 <LL_RCC_MSI_IsReady+0x18>
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <LL_RCC_MSI_SetRange>:
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b083      	sub	sp, #12
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b0b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b0bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	600b      	str	r3, [r1, #0]
}
 800b0c6:	bf00      	nop
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr

0800b0d2 <LL_RCC_MSI_GetRange>:
{
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800b0d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b0e2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2bb0      	cmp	r3, #176	@ 0xb0
 800b0e8:	d901      	bls.n	800b0ee <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800b0ea:	23b0      	movs	r3, #176	@ 0xb0
 800b0ec:	607b      	str	r3, [r7, #4]
  return msiRange;
 800b0ee:	687b      	ldr	r3, [r7, #4]
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <LL_RCC_MSI_SetCalibTrimming>:
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b116:	4313      	orrs	r3, r2
 800b118:	604b      	str	r3, [r1, #4]
}
 800b11a:	bf00      	nop
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr

0800b126 <LL_RCC_SetSysClkSource>:
{
 800b126:	b480      	push	{r7}
 800b128:	b083      	sub	sp, #12
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b12e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	f023 0203 	bic.w	r2, r3, #3
 800b138:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	4313      	orrs	r3, r2
 800b140:	608b      	str	r3, [r1, #8]
}
 800b142:	bf00      	nop
 800b144:	370c      	adds	r7, #12
 800b146:	46bd      	mov	sp, r7
 800b148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14c:	4770      	bx	lr

0800b14e <LL_RCC_GetSysClkSource>:
{
 800b14e:	b480      	push	{r7}
 800b150:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	f003 030c 	and.w	r3, r3, #12
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr

0800b166 <LL_RCC_SetAHBPrescaler>:
{
 800b166:	b480      	push	{r7}
 800b168:	b083      	sub	sp, #12
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b16e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b178:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	4313      	orrs	r3, r2
 800b180:	608b      	str	r3, [r1, #8]
}
 800b182:	bf00      	nop
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <LL_C2_RCC_SetAHBPrescaler>:
{
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800b196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b19a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b19e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b1a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b1ae:	bf00      	nop
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <LL_RCC_SetAHB4Prescaler>:
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800b1c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b1ca:	f023 020f 	bic.w	r2, r3, #15
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	091b      	lsrs	r3, r3, #4
 800b1d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <LL_RCC_SetAPB1Prescaler>:
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b1f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b1fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4313      	orrs	r3, r2
 800b202:	608b      	str	r3, [r1, #8]
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <LL_RCC_SetAPB2Prescaler>:
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b222:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4313      	orrs	r3, r2
 800b22a:	608b      	str	r3, [r1, #8]
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <LL_RCC_GetAHBPrescaler>:
{
 800b238:	b480      	push	{r7}
 800b23a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b23c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b246:	4618      	mov	r0, r3
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <LL_RCC_GetAHB4Prescaler>:
{
 800b250:	b480      	push	{r7}
 800b252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b258:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b25c:	011b      	lsls	r3, r3, #4
 800b25e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b262:	4618      	mov	r0, r3
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr

0800b26c <LL_RCC_GetAPB1Prescaler>:
{
 800b26c:	b480      	push	{r7}
 800b26e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr

0800b284 <LL_RCC_GetAPB2Prescaler>:
{
 800b284:	b480      	push	{r7}
 800b286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800b292:	4618      	mov	r0, r3
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800b29c:	b480      	push	{r7}
 800b29e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b2a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b2aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b2ae:	6013      	str	r3, [r2, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b2be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b2c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b2cc:	6013      	str	r3, [r2, #0]
}
 800b2ce:	bf00      	nop
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b2dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b2ea:	d101      	bne.n	800b2f0 <LL_RCC_PLL_IsReady+0x18>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e000      	b.n	800b2f2 <LL_RCC_PLL_IsReady+0x1a>
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr

0800b2fc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	0a1b      	lsrs	r3, r3, #8
 800b308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800b316:	b480      	push	{r7}
 800b318:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b31a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800b324:	4618      	mov	r0, r3
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800b32e:	b480      	push	{r7}
 800b330:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800b346:	b480      	push	{r7}
 800b348:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b34a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	f003 0303 	and.w	r3, r3, #3
}
 800b354:	4618      	mov	r0, r3
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800b35e:	b480      	push	{r7}
 800b360:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800b362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b36c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b370:	d101      	bne.n	800b376 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800b372:	2301      	movs	r3, #1
 800b374:	e000      	b.n	800b378 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800b382:	b480      	push	{r7}
 800b384:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800b386:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b38a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b38e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b392:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b396:	d101      	bne.n	800b39c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800b398:	2301      	movs	r3, #1
 800b39a:	e000      	b.n	800b39e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800b3ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b3b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b3b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3bc:	d101      	bne.n	800b3c2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e000      	b.n	800b3c4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800b3d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3e0:	d101      	bne.n	800b3e6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e000      	b.n	800b3e8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800b3f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b400:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b404:	d101      	bne.n	800b40a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800b406:	2301      	movs	r3, #1
 800b408:	e000      	b.n	800b40c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
	...

0800b418 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b418:	b590      	push	{r4, r7, lr}
 800b41a:	b08d      	sub	sp, #52	@ 0x34
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d101      	bne.n	800b42a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e363      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 0320 	and.w	r3, r3, #32
 800b432:	2b00      	cmp	r3, #0
 800b434:	f000 808d 	beq.w	800b552 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b438:	f7ff fe89 	bl	800b14e <LL_RCC_GetSysClkSource>
 800b43c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b43e:	f7ff ff82 	bl	800b346 <LL_RCC_PLL_GetMainSource>
 800b442:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b446:	2b00      	cmp	r3, #0
 800b448:	d005      	beq.n	800b456 <HAL_RCC_OscConfig+0x3e>
 800b44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b44c:	2b0c      	cmp	r3, #12
 800b44e:	d147      	bne.n	800b4e0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b452:	2b01      	cmp	r3, #1
 800b454:	d144      	bne.n	800b4e0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	69db      	ldr	r3, [r3, #28]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d101      	bne.n	800b462 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e347      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b466:	f7ff fe34 	bl	800b0d2 <LL_RCC_MSI_GetRange>
 800b46a:	4603      	mov	r3, r0
 800b46c:	429c      	cmp	r4, r3
 800b46e:	d914      	bls.n	800b49a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b474:	4618      	mov	r0, r3
 800b476:	f000 fd2f 	bl	800bed8 <RCC_SetFlashLatencyFromMSIRange>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800b480:	2301      	movs	r3, #1
 800b482:	e336      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b488:	4618      	mov	r0, r3
 800b48a:	f7ff fe0e 	bl	800b0aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff fe32 	bl	800b0fc <LL_RCC_MSI_SetCalibTrimming>
 800b498:	e013      	b.n	800b4c2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7ff fe03 	bl	800b0aa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a1b      	ldr	r3, [r3, #32]
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f7ff fe27 	bl	800b0fc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 fd10 	bl	800bed8 <RCC_SetFlashLatencyFromMSIRange>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e317      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b4c2:	f000 fcc9 	bl	800be58 <HAL_RCC_GetHCLKFreq>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	4aa4      	ldr	r2, [pc, #656]	@ (800b75c <HAL_RCC_OscConfig+0x344>)
 800b4ca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b4cc:	4ba4      	ldr	r3, [pc, #656]	@ (800b760 <HAL_RCC_OscConfig+0x348>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fb f857 	bl	8006584 <HAL_InitTick>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d039      	beq.n	800b550 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e308      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	69db      	ldr	r3, [r3, #28]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d01e      	beq.n	800b526 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b4e8:	f7ff fdb0 	bl	800b04c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b4ec:	f7fb f898 	bl	8006620 <HAL_GetTick>
 800b4f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b4f2:	e008      	b.n	800b506 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b4f4:	f7fb f894 	bl	8006620 <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	2b02      	cmp	r3, #2
 800b500:	d901      	bls.n	800b506 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b502:	2303      	movs	r3, #3
 800b504:	e2f5      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b506:	f7ff fdbf 	bl	800b088 <LL_RCC_MSI_IsReady>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d0f1      	beq.n	800b4f4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b514:	4618      	mov	r0, r3
 800b516:	f7ff fdc8 	bl	800b0aa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	4618      	mov	r0, r3
 800b520:	f7ff fdec 	bl	800b0fc <LL_RCC_MSI_SetCalibTrimming>
 800b524:	e015      	b.n	800b552 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b526:	f7ff fda0 	bl	800b06a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b52a:	f7fb f879 	bl	8006620 <HAL_GetTick>
 800b52e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b530:	e008      	b.n	800b544 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b532:	f7fb f875 	bl	8006620 <HAL_GetTick>
 800b536:	4602      	mov	r2, r0
 800b538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d901      	bls.n	800b544 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e2d6      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b544:	f7ff fda0 	bl	800b088 <LL_RCC_MSI_IsReady>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d1f1      	bne.n	800b532 <HAL_RCC_OscConfig+0x11a>
 800b54e:	e000      	b.n	800b552 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b550:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d047      	beq.n	800b5ee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b55e:	f7ff fdf6 	bl	800b14e <LL_RCC_GetSysClkSource>
 800b562:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b564:	f7ff feef 	bl	800b346 <LL_RCC_PLL_GetMainSource>
 800b568:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b56a:	6a3b      	ldr	r3, [r7, #32]
 800b56c:	2b08      	cmp	r3, #8
 800b56e:	d005      	beq.n	800b57c <HAL_RCC_OscConfig+0x164>
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	2b0c      	cmp	r3, #12
 800b574:	d108      	bne.n	800b588 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	2b03      	cmp	r3, #3
 800b57a:	d105      	bne.n	800b588 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d134      	bne.n	800b5ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	e2b4      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b590:	d102      	bne.n	800b598 <HAL_RCC_OscConfig+0x180>
 800b592:	f7ff fbdd 	bl	800ad50 <LL_RCC_HSE_Enable>
 800b596:	e001      	b.n	800b59c <HAL_RCC_OscConfig+0x184>
 800b598:	f7ff fbe9 	bl	800ad6e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	685b      	ldr	r3, [r3, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d012      	beq.n	800b5ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5a4:	f7fb f83c 	bl	8006620 <HAL_GetTick>
 800b5a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b5aa:	e008      	b.n	800b5be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5ac:	f7fb f838 	bl	8006620 <HAL_GetTick>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	2b64      	cmp	r3, #100	@ 0x64
 800b5b8:	d901      	bls.n	800b5be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b5ba:	2303      	movs	r3, #3
 800b5bc:	e299      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b5be:	f7ff fbe5 	bl	800ad8c <LL_RCC_HSE_IsReady>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d0f1      	beq.n	800b5ac <HAL_RCC_OscConfig+0x194>
 800b5c8:	e011      	b.n	800b5ee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5ca:	f7fb f829 	bl	8006620 <HAL_GetTick>
 800b5ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b5d0:	e008      	b.n	800b5e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5d2:	f7fb f825 	bl	8006620 <HAL_GetTick>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	1ad3      	subs	r3, r2, r3
 800b5dc:	2b64      	cmp	r3, #100	@ 0x64
 800b5de:	d901      	bls.n	800b5e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e286      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b5e4:	f7ff fbd2 	bl	800ad8c <LL_RCC_HSE_IsReady>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d1f1      	bne.n	800b5d2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f003 0302 	and.w	r3, r3, #2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d04c      	beq.n	800b694 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5fa:	f7ff fda8 	bl	800b14e <LL_RCC_GetSysClkSource>
 800b5fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b600:	f7ff fea1 	bl	800b346 <LL_RCC_PLL_GetMainSource>
 800b604:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b606:	69bb      	ldr	r3, [r7, #24]
 800b608:	2b04      	cmp	r3, #4
 800b60a:	d005      	beq.n	800b618 <HAL_RCC_OscConfig+0x200>
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	2b0c      	cmp	r3, #12
 800b610:	d10e      	bne.n	800b630 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b02      	cmp	r3, #2
 800b616:	d10b      	bne.n	800b630 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d101      	bne.n	800b624 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800b620:	2301      	movs	r3, #1
 800b622:	e266      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	691b      	ldr	r3, [r3, #16]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7ff fbf1 	bl	800ae10 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b62e:	e031      	b.n	800b694 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d019      	beq.n	800b66c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b638:	f7ff fbba 	bl	800adb0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b63c:	f7fa fff0 	bl	8006620 <HAL_GetTick>
 800b640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b642:	e008      	b.n	800b656 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b644:	f7fa ffec 	bl	8006620 <HAL_GetTick>
 800b648:	4602      	mov	r2, r0
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	2b02      	cmp	r3, #2
 800b650:	d901      	bls.n	800b656 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e24d      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b656:	f7ff fbc9 	bl	800adec <LL_RCC_HSI_IsReady>
 800b65a:	4603      	mov	r3, r0
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d0f1      	beq.n	800b644 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	4618      	mov	r0, r3
 800b666:	f7ff fbd3 	bl	800ae10 <LL_RCC_HSI_SetCalibTrimming>
 800b66a:	e013      	b.n	800b694 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b66c:	f7ff fbaf 	bl	800adce <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b670:	f7fa ffd6 	bl	8006620 <HAL_GetTick>
 800b674:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b676:	e008      	b.n	800b68a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b678:	f7fa ffd2 	bl	8006620 <HAL_GetTick>
 800b67c:	4602      	mov	r2, r0
 800b67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	2b02      	cmp	r3, #2
 800b684:	d901      	bls.n	800b68a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e233      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b68a:	f7ff fbaf 	bl	800adec <LL_RCC_HSI_IsReady>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d1f1      	bne.n	800b678 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0308 	and.w	r3, r3, #8
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d106      	bne.n	800b6ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	f000 80a3 	beq.w	800b7f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	695b      	ldr	r3, [r3, #20]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d076      	beq.n	800b7a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f003 0310 	and.w	r3, r3, #16
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d046      	beq.n	800b750 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b6c2:	f7ff fc66 	bl	800af92 <LL_RCC_LSI1_IsReady>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d113      	bne.n	800b6f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b6cc:	f7ff fc3f 	bl	800af4e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b6d0:	f7fa ffa6 	bl	8006620 <HAL_GetTick>
 800b6d4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b6d6:	e008      	b.n	800b6ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b6d8:	f7fa ffa2 	bl	8006620 <HAL_GetTick>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d901      	bls.n	800b6ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e203      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b6ea:	f7ff fc52 	bl	800af92 <LL_RCC_LSI1_IsReady>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d0f1      	beq.n	800b6d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b6f4:	f7ff fc5f 	bl	800afb6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6f8:	f7fa ff92 	bl	8006620 <HAL_GetTick>
 800b6fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b6fe:	e008      	b.n	800b712 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b700:	f7fa ff8e 	bl	8006620 <HAL_GetTick>
 800b704:	4602      	mov	r2, r0
 800b706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	2b03      	cmp	r3, #3
 800b70c:	d901      	bls.n	800b712 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b70e:	2303      	movs	r3, #3
 800b710:	e1ef      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b712:	f7ff fc72 	bl	800affa <LL_RCC_LSI2_IsReady>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d0f1      	beq.n	800b700 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	4618      	mov	r0, r3
 800b722:	f7ff fc7c 	bl	800b01e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b726:	f7ff fc23 	bl	800af70 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b72a:	f7fa ff79 	bl	8006620 <HAL_GetTick>
 800b72e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b730:	e008      	b.n	800b744 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b732:	f7fa ff75 	bl	8006620 <HAL_GetTick>
 800b736:	4602      	mov	r2, r0
 800b738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d901      	bls.n	800b744 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b740:	2303      	movs	r3, #3
 800b742:	e1d6      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b744:	f7ff fc25 	bl	800af92 <LL_RCC_LSI1_IsReady>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d1f1      	bne.n	800b732 <HAL_RCC_OscConfig+0x31a>
 800b74e:	e051      	b.n	800b7f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b750:	f7ff fbfd 	bl	800af4e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b754:	f7fa ff64 	bl	8006620 <HAL_GetTick>
 800b758:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b75a:	e00c      	b.n	800b776 <HAL_RCC_OscConfig+0x35e>
 800b75c:	2000002c 	.word	0x2000002c
 800b760:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b764:	f7fa ff5c 	bl	8006620 <HAL_GetTick>
 800b768:	4602      	mov	r2, r0
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d901      	bls.n	800b776 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b772:	2303      	movs	r3, #3
 800b774:	e1bd      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b776:	f7ff fc0c 	bl	800af92 <LL_RCC_LSI1_IsReady>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d0f1      	beq.n	800b764 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b780:	f7ff fc2a 	bl	800afd8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b784:	e008      	b.n	800b798 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b786:	f7fa ff4b 	bl	8006620 <HAL_GetTick>
 800b78a:	4602      	mov	r2, r0
 800b78c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	2b03      	cmp	r3, #3
 800b792:	d901      	bls.n	800b798 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b794:	2303      	movs	r3, #3
 800b796:	e1ac      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b798:	f7ff fc2f 	bl	800affa <LL_RCC_LSI2_IsReady>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d1f1      	bne.n	800b786 <HAL_RCC_OscConfig+0x36e>
 800b7a2:	e027      	b.n	800b7f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b7a4:	f7ff fc18 	bl	800afd8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7a8:	f7fa ff3a 	bl	8006620 <HAL_GetTick>
 800b7ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b7ae:	e008      	b.n	800b7c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b7b0:	f7fa ff36 	bl	8006620 <HAL_GetTick>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7b8:	1ad3      	subs	r3, r2, r3
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d901      	bls.n	800b7c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	e197      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b7c2:	f7ff fc1a 	bl	800affa <LL_RCC_LSI2_IsReady>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1f1      	bne.n	800b7b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b7cc:	f7ff fbd0 	bl	800af70 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7d0:	f7fa ff26 	bl	8006620 <HAL_GetTick>
 800b7d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b7d6:	e008      	b.n	800b7ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b7d8:	f7fa ff22 	bl	8006620 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d901      	bls.n	800b7ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	e183      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b7ea:	f7ff fbd2 	bl	800af92 <LL_RCC_LSI1_IsReady>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d1f1      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f003 0304 	and.w	r3, r3, #4
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d05b      	beq.n	800b8b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b800:	4ba7      	ldr	r3, [pc, #668]	@ (800baa0 <HAL_RCC_OscConfig+0x688>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d114      	bne.n	800b836 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b80c:	f7ff fa60 	bl	800acd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b810:	f7fa ff06 	bl	8006620 <HAL_GetTick>
 800b814:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b816:	e008      	b.n	800b82a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b818:	f7fa ff02 	bl	8006620 <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	2b02      	cmp	r3, #2
 800b824:	d901      	bls.n	800b82a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b826:	2303      	movs	r3, #3
 800b828:	e163      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b82a:	4b9d      	ldr	r3, [pc, #628]	@ (800baa0 <HAL_RCC_OscConfig+0x688>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0f0      	beq.n	800b818 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d102      	bne.n	800b844 <HAL_RCC_OscConfig+0x42c>
 800b83e:	f7ff fb30 	bl	800aea2 <LL_RCC_LSE_Enable>
 800b842:	e00c      	b.n	800b85e <HAL_RCC_OscConfig+0x446>
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	689b      	ldr	r3, [r3, #8]
 800b848:	2b05      	cmp	r3, #5
 800b84a:	d104      	bne.n	800b856 <HAL_RCC_OscConfig+0x43e>
 800b84c:	f7ff fb4b 	bl	800aee6 <LL_RCC_LSE_EnableBypass>
 800b850:	f7ff fb27 	bl	800aea2 <LL_RCC_LSE_Enable>
 800b854:	e003      	b.n	800b85e <HAL_RCC_OscConfig+0x446>
 800b856:	f7ff fb35 	bl	800aec4 <LL_RCC_LSE_Disable>
 800b85a:	f7ff fb55 	bl	800af08 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d014      	beq.n	800b890 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b866:	f7fa fedb 	bl	8006620 <HAL_GetTick>
 800b86a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b86c:	e00a      	b.n	800b884 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b86e:	f7fa fed7 	bl	8006620 <HAL_GetTick>
 800b872:	4602      	mov	r2, r0
 800b874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d901      	bls.n	800b884 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b880:	2303      	movs	r3, #3
 800b882:	e136      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b884:	f7ff fb51 	bl	800af2a <LL_RCC_LSE_IsReady>
 800b888:	4603      	mov	r3, r0
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0ef      	beq.n	800b86e <HAL_RCC_OscConfig+0x456>
 800b88e:	e013      	b.n	800b8b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b890:	f7fa fec6 	bl	8006620 <HAL_GetTick>
 800b894:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b896:	e00a      	b.n	800b8ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b898:	f7fa fec2 	bl	8006620 <HAL_GetTick>
 800b89c:	4602      	mov	r2, r0
 800b89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a0:	1ad3      	subs	r3, r2, r3
 800b8a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d901      	bls.n	800b8ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e121      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b8ae:	f7ff fb3c 	bl	800af2a <LL_RCC_LSE_IsReady>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1ef      	bne.n	800b898 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d02c      	beq.n	800b91e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d014      	beq.n	800b8f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b8cc:	f7ff fab5 	bl	800ae3a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8d0:	f7fa fea6 	bl	8006620 <HAL_GetTick>
 800b8d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b8d6:	e008      	b.n	800b8ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b8d8:	f7fa fea2 	bl	8006620 <HAL_GetTick>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d901      	bls.n	800b8ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	e103      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b8ea:	f7ff fac8 	bl	800ae7e <LL_RCC_HSI48_IsReady>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d0f1      	beq.n	800b8d8 <HAL_RCC_OscConfig+0x4c0>
 800b8f4:	e013      	b.n	800b91e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b8f6:	f7ff fab1 	bl	800ae5c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8fa:	f7fa fe91 	bl	8006620 <HAL_GetTick>
 800b8fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b900:	e008      	b.n	800b914 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b902:	f7fa fe8d 	bl	8006620 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	2b02      	cmp	r3, #2
 800b90e:	d901      	bls.n	800b914 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800b910:	2303      	movs	r3, #3
 800b912:	e0ee      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b914:	f7ff fab3 	bl	800ae7e <LL_RCC_HSI48_IsReady>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d1f1      	bne.n	800b902 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b922:	2b00      	cmp	r3, #0
 800b924:	f000 80e4 	beq.w	800baf0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b928:	f7ff fc11 	bl	800b14e <LL_RCC_GetSysClkSource>
 800b92c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800b92e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	f040 80b4 	bne.w	800baa8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f003 0203 	and.w	r2, r3, #3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d123      	bne.n	800b996 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b958:	429a      	cmp	r2, r3
 800b95a:	d11c      	bne.n	800b996 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	0a1b      	lsrs	r3, r3, #8
 800b960:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b968:	429a      	cmp	r2, r3
 800b96a:	d114      	bne.n	800b996 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b976:	429a      	cmp	r2, r3
 800b978:	d10d      	bne.n	800b996 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b984:	429a      	cmp	r2, r3
 800b986:	d106      	bne.n	800b996 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b992:	429a      	cmp	r2, r3
 800b994:	d05d      	beq.n	800ba52 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	2b0c      	cmp	r3, #12
 800b99a:	d058      	beq.n	800ba4e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b99c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e0a1      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b9ae:	f7ff fc84 	bl	800b2ba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b9b2:	f7fa fe35 	bl	8006620 <HAL_GetTick>
 800b9b6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b9b8:	e008      	b.n	800b9cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9ba:	f7fa fe31 	bl	8006620 <HAL_GetTick>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c2:	1ad3      	subs	r3, r2, r3
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d901      	bls.n	800b9cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800b9c8:	2303      	movs	r3, #3
 800b9ca:	e092      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b9cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1ef      	bne.n	800b9ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b9da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9de:	68da      	ldr	r2, [r3, #12]
 800b9e0:	4b30      	ldr	r3, [pc, #192]	@ (800baa4 <HAL_RCC_OscConfig+0x68c>)
 800b9e2:	4013      	ands	r3, r2
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b9ec:	4311      	orrs	r1, r2
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b9f2:	0212      	lsls	r2, r2, #8
 800b9f4:	4311      	orrs	r1, r2
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b9fa:	4311      	orrs	r1, r2
 800b9fc:	687a      	ldr	r2, [r7, #4]
 800b9fe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ba00:	4311      	orrs	r1, r2
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ba06:	430a      	orrs	r2, r1
 800ba08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ba10:	f7ff fc44 	bl	800b29c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ba14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ba24:	f7fa fdfc 	bl	8006620 <HAL_GetTick>
 800ba28:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba2a:	e008      	b.n	800ba3e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba2c:	f7fa fdf8 	bl	8006620 <HAL_GetTick>
 800ba30:	4602      	mov	r2, r0
 800ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba34:	1ad3      	subs	r3, r2, r3
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d901      	bls.n	800ba3e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e059      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d0ef      	beq.n	800ba2c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ba4c:	e050      	b.n	800baf0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e04f      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d147      	bne.n	800baf0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ba60:	f7ff fc1c 	bl	800b29c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ba64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ba74:	f7fa fdd4 	bl	8006620 <HAL_GetTick>
 800ba78:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba7a:	e008      	b.n	800ba8e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba7c:	f7fa fdd0 	bl	8006620 <HAL_GetTick>
 800ba80:	4602      	mov	r2, r0
 800ba82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	2b02      	cmp	r3, #2
 800ba88:	d901      	bls.n	800ba8e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	e031      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ba8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d0ef      	beq.n	800ba7c <HAL_RCC_OscConfig+0x664>
 800ba9c:	e028      	b.n	800baf0 <HAL_RCC_OscConfig+0x6d8>
 800ba9e:	bf00      	nop
 800baa0:	58000400 	.word	0x58000400
 800baa4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	2b0c      	cmp	r3, #12
 800baac:	d01e      	beq.n	800baec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800baae:	f7ff fc04 	bl	800b2ba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bab2:	f7fa fdb5 	bl	8006620 <HAL_GetTick>
 800bab6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bab8:	e008      	b.n	800bacc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800baba:	f7fa fdb1 	bl	8006620 <HAL_GetTick>
 800babe:	4602      	mov	r2, r0
 800bac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d901      	bls.n	800bacc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800bac8:	2303      	movs	r3, #3
 800baca:	e012      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bacc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1ef      	bne.n	800baba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800bada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bade:	68da      	ldr	r2, [r3, #12]
 800bae0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bae4:	4b05      	ldr	r3, [pc, #20]	@ (800bafc <HAL_RCC_OscConfig+0x6e4>)
 800bae6:	4013      	ands	r3, r2
 800bae8:	60cb      	str	r3, [r1, #12]
 800baea:	e001      	b.n	800baf0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800baec:	2301      	movs	r3, #1
 800baee:	e000      	b.n	800baf2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3734      	adds	r7, #52	@ 0x34
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd90      	pop	{r4, r7, pc}
 800bafa:	bf00      	nop
 800bafc:	eefefffc 	.word	0xeefefffc

0800bb00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d101      	bne.n	800bb14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bb10:	2301      	movs	r3, #1
 800bb12:	e12d      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bb14:	4b98      	ldr	r3, [pc, #608]	@ (800bd78 <HAL_RCC_ClockConfig+0x278>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f003 0307 	and.w	r3, r3, #7
 800bb1c:	683a      	ldr	r2, [r7, #0]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d91b      	bls.n	800bb5a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb22:	4b95      	ldr	r3, [pc, #596]	@ (800bd78 <HAL_RCC_ClockConfig+0x278>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f023 0207 	bic.w	r2, r3, #7
 800bb2a:	4993      	ldr	r1, [pc, #588]	@ (800bd78 <HAL_RCC_ClockConfig+0x278>)
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb32:	f7fa fd75 	bl	8006620 <HAL_GetTick>
 800bb36:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb38:	e008      	b.n	800bb4c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bb3a:	f7fa fd71 	bl	8006620 <HAL_GetTick>
 800bb3e:	4602      	mov	r2, r0
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	1ad3      	subs	r3, r2, r3
 800bb44:	2b02      	cmp	r3, #2
 800bb46:	d901      	bls.n	800bb4c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e111      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb4c:	4b8a      	ldr	r3, [pc, #552]	@ (800bd78 <HAL_RCC_ClockConfig+0x278>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 0307 	and.w	r3, r3, #7
 800bb54:	683a      	ldr	r2, [r7, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d1ef      	bne.n	800bb3a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f003 0302 	and.w	r3, r3, #2
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d016      	beq.n	800bb94 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f7ff fafb 	bl	800b166 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bb70:	f7fa fd56 	bl	8006620 <HAL_GetTick>
 800bb74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800bb76:	e008      	b.n	800bb8a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bb78:	f7fa fd52 	bl	8006620 <HAL_GetTick>
 800bb7c:	4602      	mov	r2, r0
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	2b02      	cmp	r3, #2
 800bb84:	d901      	bls.n	800bb8a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800bb86:	2303      	movs	r3, #3
 800bb88:	e0f2      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800bb8a:	f7ff fbe8 	bl	800b35e <LL_RCC_IsActiveFlag_HPRE>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d0f1      	beq.n	800bb78 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 0320 	and.w	r3, r3, #32
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d016      	beq.n	800bbce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	695b      	ldr	r3, [r3, #20]
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7ff faf2 	bl	800b18e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bbaa:	f7fa fd39 	bl	8006620 <HAL_GetTick>
 800bbae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800bbb0:	e008      	b.n	800bbc4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bbb2:	f7fa fd35 	bl	8006620 <HAL_GetTick>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d901      	bls.n	800bbc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e0d5      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800bbc4:	f7ff fbdd 	bl	800b382 <LL_RCC_IsActiveFlag_C2HPRE>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d0f1      	beq.n	800bbb2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d016      	beq.n	800bc08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7ff faeb 	bl	800b1ba <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bbe4:	f7fa fd1c 	bl	8006620 <HAL_GetTick>
 800bbe8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800bbea:	e008      	b.n	800bbfe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bbec:	f7fa fd18 	bl	8006620 <HAL_GetTick>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	1ad3      	subs	r3, r2, r3
 800bbf6:	2b02      	cmp	r3, #2
 800bbf8:	d901      	bls.n	800bbfe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800bbfa:	2303      	movs	r3, #3
 800bbfc:	e0b8      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800bbfe:	f7ff fbd3 	bl	800b3a8 <LL_RCC_IsActiveFlag_SHDHPRE>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d0f1      	beq.n	800bbec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 0304 	and.w	r3, r3, #4
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d016      	beq.n	800bc42 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f7ff fae5 	bl	800b1e8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bc1e:	f7fa fcff 	bl	8006620 <HAL_GetTick>
 800bc22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bc24:	e008      	b.n	800bc38 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bc26:	f7fa fcfb 	bl	8006620 <HAL_GetTick>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d901      	bls.n	800bc38 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e09b      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bc38:	f7ff fbc9 	bl	800b3ce <LL_RCC_IsActiveFlag_PPRE1>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d0f1      	beq.n	800bc26 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 0308 	and.w	r3, r3, #8
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d017      	beq.n	800bc7e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	00db      	lsls	r3, r3, #3
 800bc54:	4618      	mov	r0, r3
 800bc56:	f7ff fadb 	bl	800b210 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bc5a:	f7fa fce1 	bl	8006620 <HAL_GetTick>
 800bc5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800bc60:	e008      	b.n	800bc74 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bc62:	f7fa fcdd 	bl	8006620 <HAL_GetTick>
 800bc66:	4602      	mov	r2, r0
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d901      	bls.n	800bc74 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800bc70:	2303      	movs	r3, #3
 800bc72:	e07d      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800bc74:	f7ff fbbd 	bl	800b3f2 <LL_RCC_IsActiveFlag_PPRE2>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d0f1      	beq.n	800bc62 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d043      	beq.n	800bd12 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	2b02      	cmp	r3, #2
 800bc90:	d106      	bne.n	800bca0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800bc92:	f7ff f87b 	bl	800ad8c <LL_RCC_HSE_IsReady>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d11e      	bne.n	800bcda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e067      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	2b03      	cmp	r3, #3
 800bca6:	d106      	bne.n	800bcb6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800bca8:	f7ff fb16 	bl	800b2d8 <LL_RCC_PLL_IsReady>
 800bcac:	4603      	mov	r3, r0
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d113      	bne.n	800bcda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bcb2:	2301      	movs	r3, #1
 800bcb4:	e05c      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800bcbe:	f7ff f9e3 	bl	800b088 <LL_RCC_MSI_IsReady>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d108      	bne.n	800bcda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e051      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800bccc:	f7ff f88e 	bl	800adec <LL_RCC_HSI_IsReady>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e04a      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff fa21 	bl	800b126 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bce4:	f7fa fc9c 	bl	8006620 <HAL_GetTick>
 800bce8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcea:	e00a      	b.n	800bd02 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bcec:	f7fa fc98 	bl	8006620 <HAL_GetTick>
 800bcf0:	4602      	mov	r2, r0
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	1ad3      	subs	r3, r2, r3
 800bcf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d901      	bls.n	800bd02 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800bcfe:	2303      	movs	r3, #3
 800bd00:	e036      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd02:	f7ff fa24 	bl	800b14e <LL_RCC_GetSysClkSource>
 800bd06:	4602      	mov	r2, r0
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d1ec      	bne.n	800bcec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bd12:	4b19      	ldr	r3, [pc, #100]	@ (800bd78 <HAL_RCC_ClockConfig+0x278>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	683a      	ldr	r2, [r7, #0]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d21b      	bcs.n	800bd58 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd20:	4b15      	ldr	r3, [pc, #84]	@ (800bd78 <HAL_RCC_ClockConfig+0x278>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f023 0207 	bic.w	r2, r3, #7
 800bd28:	4913      	ldr	r1, [pc, #76]	@ (800bd78 <HAL_RCC_ClockConfig+0x278>)
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd30:	f7fa fc76 	bl	8006620 <HAL_GetTick>
 800bd34:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd36:	e008      	b.n	800bd4a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bd38:	f7fa fc72 	bl	8006620 <HAL_GetTick>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d901      	bls.n	800bd4a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800bd46:	2303      	movs	r3, #3
 800bd48:	e012      	b.n	800bd70 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd78 <HAL_RCC_ClockConfig+0x278>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 0307 	and.w	r3, r3, #7
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	429a      	cmp	r2, r3
 800bd56:	d1ef      	bne.n	800bd38 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800bd58:	f000 f87e 	bl	800be58 <HAL_RCC_GetHCLKFreq>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	4a07      	ldr	r2, [pc, #28]	@ (800bd7c <HAL_RCC_ClockConfig+0x27c>)
 800bd60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800bd62:	f7fa fc69 	bl	8006638 <HAL_GetTickPrio>
 800bd66:	4603      	mov	r3, r0
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fa fc0b 	bl	8006584 <HAL_InitTick>
 800bd6e:	4603      	mov	r3, r0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	58004000 	.word	0x58004000
 800bd7c:	2000002c 	.word	0x2000002c

0800bd80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b085      	sub	sp, #20
 800bd84:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd86:	f7ff f9e2 	bl	800b14e <LL_RCC_GetSysClkSource>
 800bd8a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10a      	bne.n	800bda8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bd92:	f7ff f99e 	bl	800b0d2 <LL_RCC_MSI_GetRange>
 800bd96:	4603      	mov	r3, r0
 800bd98:	091b      	lsrs	r3, r3, #4
 800bd9a:	f003 030f 	and.w	r3, r3, #15
 800bd9e:	4a2b      	ldr	r2, [pc, #172]	@ (800be4c <HAL_RCC_GetSysClockFreq+0xcc>)
 800bda0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bda4:	60fb      	str	r3, [r7, #12]
 800bda6:	e04b      	b.n	800be40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2b04      	cmp	r3, #4
 800bdac:	d102      	bne.n	800bdb4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bdae:	4b28      	ldr	r3, [pc, #160]	@ (800be50 <HAL_RCC_GetSysClockFreq+0xd0>)
 800bdb0:	60fb      	str	r3, [r7, #12]
 800bdb2:	e045      	b.n	800be40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2b08      	cmp	r3, #8
 800bdb8:	d10a      	bne.n	800bdd0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bdba:	f7fe ffb7 	bl	800ad2c <LL_RCC_HSE_IsEnabledDiv2>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b01      	cmp	r3, #1
 800bdc2:	d102      	bne.n	800bdca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800bdc4:	4b22      	ldr	r3, [pc, #136]	@ (800be50 <HAL_RCC_GetSysClockFreq+0xd0>)
 800bdc6:	60fb      	str	r3, [r7, #12]
 800bdc8:	e03a      	b.n	800be40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800bdca:	4b22      	ldr	r3, [pc, #136]	@ (800be54 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bdcc:	60fb      	str	r3, [r7, #12]
 800bdce:	e037      	b.n	800be40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800bdd0:	f7ff fab9 	bl	800b346 <LL_RCC_PLL_GetMainSource>
 800bdd4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2b02      	cmp	r3, #2
 800bdda:	d003      	beq.n	800bde4 <HAL_RCC_GetSysClockFreq+0x64>
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2b03      	cmp	r3, #3
 800bde0:	d003      	beq.n	800bdea <HAL_RCC_GetSysClockFreq+0x6a>
 800bde2:	e00d      	b.n	800be00 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800bde4:	4b1a      	ldr	r3, [pc, #104]	@ (800be50 <HAL_RCC_GetSysClockFreq+0xd0>)
 800bde6:	60bb      	str	r3, [r7, #8]
        break;
 800bde8:	e015      	b.n	800be16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bdea:	f7fe ff9f 	bl	800ad2c <LL_RCC_HSE_IsEnabledDiv2>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d102      	bne.n	800bdfa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800bdf4:	4b16      	ldr	r3, [pc, #88]	@ (800be50 <HAL_RCC_GetSysClockFreq+0xd0>)
 800bdf6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800bdf8:	e00d      	b.n	800be16 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800bdfa:	4b16      	ldr	r3, [pc, #88]	@ (800be54 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bdfc:	60bb      	str	r3, [r7, #8]
        break;
 800bdfe:	e00a      	b.n	800be16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800be00:	f7ff f967 	bl	800b0d2 <LL_RCC_MSI_GetRange>
 800be04:	4603      	mov	r3, r0
 800be06:	091b      	lsrs	r3, r3, #4
 800be08:	f003 030f 	and.w	r3, r3, #15
 800be0c:	4a0f      	ldr	r2, [pc, #60]	@ (800be4c <HAL_RCC_GetSysClockFreq+0xcc>)
 800be0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be12:	60bb      	str	r3, [r7, #8]
        break;
 800be14:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800be16:	f7ff fa71 	bl	800b2fc <LL_RCC_PLL_GetN>
 800be1a:	4602      	mov	r2, r0
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	fb03 f402 	mul.w	r4, r3, r2
 800be22:	f7ff fa84 	bl	800b32e <LL_RCC_PLL_GetDivider>
 800be26:	4603      	mov	r3, r0
 800be28:	091b      	lsrs	r3, r3, #4
 800be2a:	3301      	adds	r3, #1
 800be2c:	fbb4 f4f3 	udiv	r4, r4, r3
 800be30:	f7ff fa71 	bl	800b316 <LL_RCC_PLL_GetR>
 800be34:	4603      	mov	r3, r0
 800be36:	0f5b      	lsrs	r3, r3, #29
 800be38:	3301      	adds	r3, #1
 800be3a:	fbb4 f3f3 	udiv	r3, r4, r3
 800be3e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800be40:	68fb      	ldr	r3, [r7, #12]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	bd90      	pop	{r4, r7, pc}
 800be4a:	bf00      	nop
 800be4c:	0801df54 	.word	0x0801df54
 800be50:	00f42400 	.word	0x00f42400
 800be54:	01e84800 	.word	0x01e84800

0800be58 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be58:	b598      	push	{r3, r4, r7, lr}
 800be5a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800be5c:	f7ff ff90 	bl	800bd80 <HAL_RCC_GetSysClockFreq>
 800be60:	4604      	mov	r4, r0
 800be62:	f7ff f9e9 	bl	800b238 <LL_RCC_GetAHBPrescaler>
 800be66:	4603      	mov	r3, r0
 800be68:	091b      	lsrs	r3, r3, #4
 800be6a:	f003 030f 	and.w	r3, r3, #15
 800be6e:	4a03      	ldr	r2, [pc, #12]	@ (800be7c <HAL_RCC_GetHCLKFreq+0x24>)
 800be70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be74:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800be78:	4618      	mov	r0, r3
 800be7a:	bd98      	pop	{r3, r4, r7, pc}
 800be7c:	0801def4 	.word	0x0801def4

0800be80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be80:	b598      	push	{r3, r4, r7, lr}
 800be82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800be84:	f7ff ffe8 	bl	800be58 <HAL_RCC_GetHCLKFreq>
 800be88:	4604      	mov	r4, r0
 800be8a:	f7ff f9ef 	bl	800b26c <LL_RCC_GetAPB1Prescaler>
 800be8e:	4603      	mov	r3, r0
 800be90:	0a1b      	lsrs	r3, r3, #8
 800be92:	f003 0307 	and.w	r3, r3, #7
 800be96:	4a04      	ldr	r2, [pc, #16]	@ (800bea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800be98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be9c:	f003 031f 	and.w	r3, r3, #31
 800bea0:	fa24 f303 	lsr.w	r3, r4, r3
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	bd98      	pop	{r3, r4, r7, pc}
 800bea8:	0801df34 	.word	0x0801df34

0800beac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800beac:	b598      	push	{r3, r4, r7, lr}
 800beae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800beb0:	f7ff ffd2 	bl	800be58 <HAL_RCC_GetHCLKFreq>
 800beb4:	4604      	mov	r4, r0
 800beb6:	f7ff f9e5 	bl	800b284 <LL_RCC_GetAPB2Prescaler>
 800beba:	4603      	mov	r3, r0
 800bebc:	0adb      	lsrs	r3, r3, #11
 800bebe:	f003 0307 	and.w	r3, r3, #7
 800bec2:	4a04      	ldr	r2, [pc, #16]	@ (800bed4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bec8:	f003 031f 	and.w	r3, r3, #31
 800becc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	bd98      	pop	{r3, r4, r7, pc}
 800bed4:	0801df34 	.word	0x0801df34

0800bed8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800bed8:	b590      	push	{r4, r7, lr}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2bb0      	cmp	r3, #176	@ 0xb0
 800bee4:	d903      	bls.n	800beee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800bee6:	4b15      	ldr	r3, [pc, #84]	@ (800bf3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	e007      	b.n	800befe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	091b      	lsrs	r3, r3, #4
 800bef2:	f003 030f 	and.w	r3, r3, #15
 800bef6:	4a11      	ldr	r2, [pc, #68]	@ (800bf3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800bef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800befc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800befe:	f7ff f9a7 	bl	800b250 <LL_RCC_GetAHB4Prescaler>
 800bf02:	4603      	mov	r3, r0
 800bf04:	091b      	lsrs	r3, r3, #4
 800bf06:	f003 030f 	and.w	r3, r3, #15
 800bf0a:	4a0d      	ldr	r2, [pc, #52]	@ (800bf40 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800bf0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf10:	68fa      	ldr	r2, [r7, #12]
 800bf12:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf16:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	4a0a      	ldr	r2, [pc, #40]	@ (800bf44 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800bf1c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf20:	0c9c      	lsrs	r4, r3, #18
 800bf22:	f7fe fee5 	bl	800acf0 <HAL_PWREx_GetVoltageRange>
 800bf26:	4603      	mov	r3, r0
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	f000 f80c 	bl	800bf48 <RCC_SetFlashLatency>
 800bf30:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3714      	adds	r7, #20
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd90      	pop	{r4, r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	0801df54 	.word	0x0801df54
 800bf40:	0801def4 	.word	0x0801def4
 800bf44:	431bde83 	.word	0x431bde83

0800bf48 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800bf48:	b590      	push	{r4, r7, lr}
 800bf4a:	b093      	sub	sp, #76	@ 0x4c
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800bf52:	4b37      	ldr	r3, [pc, #220]	@ (800c030 <RCC_SetFlashLatency+0xe8>)
 800bf54:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800bf58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800bf5e:	4a35      	ldr	r2, [pc, #212]	@ (800c034 <RCC_SetFlashLatency+0xec>)
 800bf60:	f107 031c 	add.w	r3, r7, #28
 800bf64:	ca07      	ldmia	r2, {r0, r1, r2}
 800bf66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800bf6a:	4b33      	ldr	r3, [pc, #204]	@ (800c038 <RCC_SetFlashLatency+0xf0>)
 800bf6c:	f107 040c 	add.w	r4, r7, #12
 800bf70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800bf76:	2300      	movs	r3, #0
 800bf78:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf80:	d11a      	bne.n	800bfb8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bf82:	2300      	movs	r3, #0
 800bf84:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf86:	e013      	b.n	800bfb0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800bf88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	3348      	adds	r3, #72	@ 0x48
 800bf8e:	443b      	add	r3, r7
 800bf90:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d807      	bhi.n	800bfaa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bf9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	3348      	adds	r3, #72	@ 0x48
 800bfa0:	443b      	add	r3, r7
 800bfa2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bfa6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bfa8:	e020      	b.n	800bfec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800bfaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfac:	3301      	adds	r3, #1
 800bfae:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bfb2:	2b03      	cmp	r3, #3
 800bfb4:	d9e8      	bls.n	800bf88 <RCC_SetFlashLatency+0x40>
 800bfb6:	e019      	b.n	800bfec <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfbc:	e013      	b.n	800bfe6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800bfbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	3348      	adds	r3, #72	@ 0x48
 800bfc4:	443b      	add	r3, r7
 800bfc6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d807      	bhi.n	800bfe0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800bfd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	3348      	adds	r3, #72	@ 0x48
 800bfd6:	443b      	add	r3, r7
 800bfd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800bfdc:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800bfde:	e005      	b.n	800bfec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bfe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d9e8      	bls.n	800bfbe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800bfec:	4b13      	ldr	r3, [pc, #76]	@ (800c03c <RCC_SetFlashLatency+0xf4>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f023 0207 	bic.w	r2, r3, #7
 800bff4:	4911      	ldr	r1, [pc, #68]	@ (800c03c <RCC_SetFlashLatency+0xf4>)
 800bff6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bff8:	4313      	orrs	r3, r2
 800bffa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bffc:	f7fa fb10 	bl	8006620 <HAL_GetTick>
 800c000:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c002:	e008      	b.n	800c016 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c004:	f7fa fb0c 	bl	8006620 <HAL_GetTick>
 800c008:	4602      	mov	r2, r0
 800c00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c00c:	1ad3      	subs	r3, r2, r3
 800c00e:	2b02      	cmp	r3, #2
 800c010:	d901      	bls.n	800c016 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800c012:	2303      	movs	r3, #3
 800c014:	e007      	b.n	800c026 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c016:	4b09      	ldr	r3, [pc, #36]	@ (800c03c <RCC_SetFlashLatency+0xf4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 0307 	and.w	r3, r3, #7
 800c01e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c020:	429a      	cmp	r2, r3
 800c022:	d1ef      	bne.n	800c004 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	374c      	adds	r7, #76	@ 0x4c
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd90      	pop	{r4, r7, pc}
 800c02e:	bf00      	nop
 800c030:	0801be54 	.word	0x0801be54
 800c034:	0801be64 	.word	0x0801be64
 800c038:	0801be70 	.word	0x0801be70
 800c03c:	58004000 	.word	0x58004000

0800c040 <LL_RCC_LSE_IsEnabled>:
{
 800c040:	b480      	push	{r7}
 800c042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800c044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <LL_RCC_LSE_IsEnabled+0x18>
 800c054:	2301      	movs	r3, #1
 800c056:	e000      	b.n	800c05a <LL_RCC_LSE_IsEnabled+0x1a>
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <LL_RCC_LSE_IsReady>:
{
 800c064:	b480      	push	{r7}
 800c066:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c070:	f003 0302 	and.w	r3, r3, #2
 800c074:	2b02      	cmp	r3, #2
 800c076:	d101      	bne.n	800c07c <LL_RCC_LSE_IsReady+0x18>
 800c078:	2301      	movs	r3, #1
 800c07a:	e000      	b.n	800c07e <LL_RCC_LSE_IsReady+0x1a>
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <LL_RCC_SetRFWKPClockSource>:
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800c090:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c098:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c09c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <LL_RCC_SetSMPSClockSource>:
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800c0bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0c2:	f023 0203 	bic.w	r2, r3, #3
 800c0c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c0d0:	bf00      	nop
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <LL_RCC_SetSMPSPrescaler>:
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800c0e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0ea:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c0ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr

0800c104 <LL_RCC_SetUSARTClockSource>:
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800c10c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c114:	f023 0203 	bic.w	r2, r3, #3
 800c118:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4313      	orrs	r3, r2
 800c120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <LL_RCC_SetLPUARTClockSource>:
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800c138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c13c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c140:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c144:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4313      	orrs	r3, r2
 800c14c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c150:	bf00      	nop
 800c152:	370c      	adds	r7, #12
 800c154:	46bd      	mov	sp, r7
 800c156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15a:	4770      	bx	lr

0800c15c <LL_RCC_SetI2CClockSource>:
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800c164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c168:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	091b      	lsrs	r3, r3, #4
 800c170:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c174:	43db      	mvns	r3, r3
 800c176:	401a      	ands	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	011b      	lsls	r3, r3, #4
 800c17c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c180:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c184:	4313      	orrs	r3, r2
 800c186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c18a:	bf00      	nop
 800c18c:	370c      	adds	r7, #12
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <LL_RCC_SetLPTIMClockSource>:
{
 800c196:	b480      	push	{r7}
 800c198:	b083      	sub	sp, #12
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800c19e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	0c1b      	lsrs	r3, r3, #16
 800c1aa:	041b      	lsls	r3, r3, #16
 800c1ac:	43db      	mvns	r3, r3
 800c1ae:	401a      	ands	r2, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	041b      	lsls	r3, r3, #16
 800c1b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c1be:	bf00      	nop
 800c1c0:	370c      	adds	r7, #12
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr

0800c1ca <LL_RCC_SetSAIClockSource>:
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800c1d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c1de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c1ea:	bf00      	nop
 800c1ec:	370c      	adds	r7, #12
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr

0800c1f6 <LL_RCC_SetRNGClockSource>:
{
 800c1f6:	b480      	push	{r7}
 800c1f8:	b083      	sub	sp, #12
 800c1fa:	af00      	add	r7, sp, #0
 800c1fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800c1fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c206:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c20a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4313      	orrs	r3, r2
 800c212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c216:	bf00      	nop
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <LL_RCC_SetCLK48ClockSource>:
{
 800c222:	b480      	push	{r7}
 800c224:	b083      	sub	sp, #12
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800c22a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c22e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c232:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c242:	bf00      	nop
 800c244:	370c      	adds	r7, #12
 800c246:	46bd      	mov	sp, r7
 800c248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24c:	4770      	bx	lr

0800c24e <LL_RCC_SetUSBClockSource>:
{
 800c24e:	b580      	push	{r7, lr}
 800c250:	b082      	sub	sp, #8
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff ffe3 	bl	800c222 <LL_RCC_SetCLK48ClockSource>
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <LL_RCC_SetADCClockSource>:
{
 800c264:	b480      	push	{r7}
 800c266:	b083      	sub	sp, #12
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800c26c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c274:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c278:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	4313      	orrs	r3, r2
 800c280:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c284:	bf00      	nop
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <LL_RCC_SetRTCClockSource>:
{
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c2a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <LL_RCC_GetRTCClockSource>:
{
 800c2bc:	b480      	push	{r7}
 800c2be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800c2c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr

0800c2d6 <LL_RCC_ForceBackupDomainReset>:
{
 800c2d6:	b480      	push	{r7}
 800c2d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c2da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c2e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c2e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c2ee:	bf00      	nop
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f6:	4770      	bx	lr

0800c2f8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c2fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c300:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c30c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c310:	bf00      	nop
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <LL_RCC_PLLSAI1_Enable>:
{
 800c31a:	b480      	push	{r7}
 800c31c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c31e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c328:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c32c:	6013      	str	r3, [r2, #0]
}
 800c32e:	bf00      	nop
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <LL_RCC_PLLSAI1_Disable>:
{
 800c338:	b480      	push	{r7}
 800c33a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c33c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c346:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c34a:	6013      	str	r3, [r2, #0]
}
 800c34c:	bf00      	nop
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <LL_RCC_PLLSAI1_IsReady>:
{
 800c356:	b480      	push	{r7}
 800c358:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800c35a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c368:	d101      	bne.n	800c36e <LL_RCC_PLLSAI1_IsReady+0x18>
 800c36a:	2301      	movs	r3, #1
 800c36c:	e000      	b.n	800c370 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	46bd      	mov	sp, r7
 800c374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c378:	4770      	bx	lr

0800c37a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b088      	sub	sp, #32
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800c382:	2300      	movs	r3, #0
 800c384:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800c386:	2300      	movs	r3, #0
 800c388:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	d034      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c39a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c39e:	d021      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800c3a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c3a4:	d81b      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c3a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3aa:	d01d      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800c3ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3b0:	d815      	bhi.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00b      	beq.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x54>
 800c3b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3ba:	d110      	bne.n	800c3de <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800c3bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c3c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3ca:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800c3cc:	e00d      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	3304      	adds	r3, #4
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f000 f947 	bl	800c666 <RCCEx_PLLSAI1_ConfigNP>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c3dc:	e005      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800c3de:	2301      	movs	r3, #1
 800c3e0:	77fb      	strb	r3, [r7, #31]
        break;
 800c3e2:	e002      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c3e4:	bf00      	nop
 800c3e6:	e000      	b.n	800c3ea <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3ea:	7ffb      	ldrb	r3, [r7, #31]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d105      	bne.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fee8 	bl	800c1ca <LL_RCC_SetSAIClockSource>
 800c3fa:	e001      	b.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3fc:	7ffb      	ldrb	r3, [r7, #31]
 800c3fe:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d046      	beq.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800c40c:	f7ff ff56 	bl	800c2bc <LL_RCC_GetRTCClockSource>
 800c410:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c416:	69ba      	ldr	r2, [r7, #24]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d03c      	beq.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c41c:	f7fe fc58 	bl	800acd0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d105      	bne.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7ff ff30 	bl	800c290 <LL_RCC_SetRTCClockSource>
 800c430:	e02e      	b.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800c432:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c43a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800c43c:	f7ff ff4b 	bl	800c2d6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800c440:	f7ff ff5a 	bl	800c2f8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c44e:	4313      	orrs	r3, r2
 800c450:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800c452:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800c45c:	f7ff fdf0 	bl	800c040 <LL_RCC_LSE_IsEnabled>
 800c460:	4603      	mov	r3, r0
 800c462:	2b01      	cmp	r3, #1
 800c464:	d114      	bne.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c466:	f7fa f8db 	bl	8006620 <HAL_GetTick>
 800c46a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800c46c:	e00b      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c46e:	f7fa f8d7 	bl	8006620 <HAL_GetTick>
 800c472:	4602      	mov	r2, r0
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	1ad3      	subs	r3, r2, r3
 800c478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d902      	bls.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800c480:	2303      	movs	r3, #3
 800c482:	77fb      	strb	r3, [r7, #31]
              break;
 800c484:	e004      	b.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800c486:	f7ff fded 	bl	800c064 <LL_RCC_LSE_IsReady>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d1ee      	bne.n	800c46e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800c490:	7ffb      	ldrb	r3, [r7, #31]
 800c492:	77bb      	strb	r3, [r7, #30]
 800c494:	e001      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c496:	7ffb      	ldrb	r3, [r7, #31]
 800c498:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d004      	beq.n	800c4b0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	699b      	ldr	r3, [r3, #24]
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7ff fe2a 	bl	800c104 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0302 	and.w	r3, r3, #2
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d004      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	69db      	ldr	r3, [r3, #28]
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f7ff fe35 	bl	800c130 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0310 	and.w	r3, r3, #16
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d004      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff fe5d 	bl	800c196 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f003 0320 	and.w	r3, r3, #32
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d004      	beq.n	800c4f2 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7ff fe52 	bl	800c196 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 0304 	and.w	r3, r3, #4
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d004      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a1b      	ldr	r3, [r3, #32]
 800c502:	4618      	mov	r0, r3
 800c504:	f7ff fe2a 	bl	800c15c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	f003 0308 	and.w	r3, r3, #8
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c518:	4618      	mov	r0, r3
 800c51a:	f7ff fe1f 	bl	800c15c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c526:	2b00      	cmp	r3, #0
 800c528:	d022      	beq.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff fe8d 	bl	800c24e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c538:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c53c:	d107      	bne.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c53e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c542:	68db      	ldr	r3, [r3, #12]
 800c544:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c548:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c54c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c552:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c556:	d10b      	bne.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	3304      	adds	r3, #4
 800c55c:	4618      	mov	r0, r3
 800c55e:	f000 f8dd 	bl	800c71c <RCCEx_PLLSAI1_ConfigNQ>
 800c562:	4603      	mov	r3, r0
 800c564:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c566:	7ffb      	ldrb	r3, [r7, #31]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d001      	beq.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800c56c:	7ffb      	ldrb	r3, [r7, #31]
 800c56e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d02b      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c584:	d008      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c58a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c58e:	d003      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c594:	2b00      	cmp	r3, #0
 800c596:	d105      	bne.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7ff fe2a 	bl	800c1f6 <LL_RCC_SetRNGClockSource>
 800c5a2:	e00a      	b.n	800c5ba <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c5ac:	60fb      	str	r3, [r7, #12]
 800c5ae:	2000      	movs	r0, #0
 800c5b0:	f7ff fe21 	bl	800c1f6 <LL_RCC_SetRNGClockSource>
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f7ff fe34 	bl	800c222 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5be:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800c5c2:	d107      	bne.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c5c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c5d2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d022      	beq.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff fe3d 	bl	800c264 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c5f2:	d107      	bne.n	800c604 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c5f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c602:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c60c:	d10b      	bne.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	3304      	adds	r3, #4
 800c612:	4618      	mov	r0, r3
 800c614:	f000 f8dd 	bl	800c7d2 <RCCEx_PLLSAI1_ConfigNR>
 800c618:	4603      	mov	r3, r0
 800c61a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c61c:	7ffb      	ldrb	r3, [r7, #31]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d001      	beq.n	800c626 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800c622:	7ffb      	ldrb	r3, [r7, #31]
 800c624:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d004      	beq.n	800c63c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff fd26 	bl	800c088 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c644:	2b00      	cmp	r3, #0
 800c646:	d009      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7ff fd45 	bl	800c0dc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c656:	4618      	mov	r0, r3
 800c658:	f7ff fd2c 	bl	800c0b4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c65c:	7fbb      	ldrb	r3, [r7, #30]
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3720      	adds	r7, #32
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c66e:	2300      	movs	r3, #0
 800c670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c672:	f7ff fe61 	bl	800c338 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c676:	f7f9 ffd3 	bl	8006620 <HAL_GetTick>
 800c67a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c67c:	e009      	b.n	800c692 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c67e:	f7f9 ffcf 	bl	8006620 <HAL_GetTick>
 800c682:	4602      	mov	r2, r0
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d902      	bls.n	800c692 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	73fb      	strb	r3, [r7, #15]
      break;
 800c690:	e004      	b.n	800c69c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c692:	f7ff fe60 	bl	800c356 <LL_RCC_PLLSAI1_IsReady>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1f0      	bne.n	800c67e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d137      	bne.n	800c712 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c6a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6a6:	691b      	ldr	r3, [r3, #16]
 800c6a8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	021b      	lsls	r3, r3, #8
 800c6b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c6ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c6be:	691b      	ldr	r3, [r3, #16]
 800c6c0:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c6d0:	f7ff fe23 	bl	800c31a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6d4:	f7f9 ffa4 	bl	8006620 <HAL_GetTick>
 800c6d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c6da:	e009      	b.n	800c6f0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c6dc:	f7f9 ffa0 	bl	8006620 <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d902      	bls.n	800c6f0 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	73fb      	strb	r3, [r7, #15]
        break;
 800c6ee:	e004      	b.n	800c6fa <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c6f0:	f7ff fe31 	bl	800c356 <LL_RCC_PLLSAI1_IsReady>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d1f0      	bne.n	800c6dc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c6fa:	7bfb      	ldrb	r3, [r7, #15]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d108      	bne.n	800c712 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c704:	691a      	ldr	r2, [r3, #16]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c70e:	4313      	orrs	r3, r2
 800c710:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c712:	7bfb      	ldrb	r3, [r7, #15]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3710      	adds	r7, #16
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c724:	2300      	movs	r3, #0
 800c726:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c728:	f7ff fe06 	bl	800c338 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c72c:	f7f9 ff78 	bl	8006620 <HAL_GetTick>
 800c730:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c732:	e009      	b.n	800c748 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c734:	f7f9 ff74 	bl	8006620 <HAL_GetTick>
 800c738:	4602      	mov	r2, r0
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d902      	bls.n	800c748 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c742:	2303      	movs	r3, #3
 800c744:	73fb      	strb	r3, [r7, #15]
      break;
 800c746:	e004      	b.n	800c752 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c748:	f7ff fe05 	bl	800c356 <LL_RCC_PLLSAI1_IsReady>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1f0      	bne.n	800c734 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c752:	7bfb      	ldrb	r3, [r7, #15]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d137      	bne.n	800c7c8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	021b      	lsls	r3, r3, #8
 800c768:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c76c:	4313      	orrs	r3, r2
 800c76e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c774:	691b      	ldr	r3, [r3, #16]
 800c776:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c782:	4313      	orrs	r3, r2
 800c784:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c786:	f7ff fdc8 	bl	800c31a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c78a:	f7f9 ff49 	bl	8006620 <HAL_GetTick>
 800c78e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c790:	e009      	b.n	800c7a6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c792:	f7f9 ff45 	bl	8006620 <HAL_GetTick>
 800c796:	4602      	mov	r2, r0
 800c798:	68bb      	ldr	r3, [r7, #8]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d902      	bls.n	800c7a6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	73fb      	strb	r3, [r7, #15]
        break;
 800c7a4:	e004      	b.n	800c7b0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c7a6:	f7ff fdd6 	bl	800c356 <LL_RCC_PLLSAI1_IsReady>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d1f0      	bne.n	800c792 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d108      	bne.n	800c7c8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c7b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7ba:	691a      	ldr	r2, [r3, #16]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	691b      	ldr	r3, [r3, #16]
 800c7c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b084      	sub	sp, #16
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c7de:	f7ff fdab 	bl	800c338 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c7e2:	f7f9 ff1d 	bl	8006620 <HAL_GetTick>
 800c7e6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c7e8:	e009      	b.n	800c7fe <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c7ea:	f7f9 ff19 	bl	8006620 <HAL_GetTick>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	1ad3      	subs	r3, r2, r3
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d902      	bls.n	800c7fe <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c7f8:	2303      	movs	r3, #3
 800c7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c7fc:	e004      	b.n	800c808 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c7fe:	f7ff fdaa 	bl	800c356 <LL_RCC_PLLSAI1_IsReady>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d1f0      	bne.n	800c7ea <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c808:	7bfb      	ldrb	r3, [r7, #15]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d137      	bne.n	800c87e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c80e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	021b      	lsls	r3, r3, #8
 800c81e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c822:	4313      	orrs	r3, r2
 800c824:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c838:	4313      	orrs	r3, r2
 800c83a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c83c:	f7ff fd6d 	bl	800c31a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c840:	f7f9 feee 	bl	8006620 <HAL_GetTick>
 800c844:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c846:	e009      	b.n	800c85c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c848:	f7f9 feea 	bl	8006620 <HAL_GetTick>
 800c84c:	4602      	mov	r2, r0
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	2b02      	cmp	r3, #2
 800c854:	d902      	bls.n	800c85c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c856:	2303      	movs	r3, #3
 800c858:	73fb      	strb	r3, [r7, #15]
        break;
 800c85a:	e004      	b.n	800c866 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c85c:	f7ff fd7b 	bl	800c356 <LL_RCC_PLLSAI1_IsReady>
 800c860:	4603      	mov	r3, r0
 800c862:	2b01      	cmp	r3, #1
 800c864:	d1f0      	bne.n	800c848 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c866:	7bfb      	ldrb	r3, [r7, #15]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d108      	bne.n	800c87e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c86c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c870:	691a      	ldr	r2, [r3, #16]
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c87a:	4313      	orrs	r3, r2
 800c87c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3710      	adds	r7, #16
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d101      	bne.n	800c89a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	e09f      	b.n	800c9da <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800c8a0:	b2db      	uxtb	r3, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d106      	bne.n	800c8b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7f5 ffc0 	bl	8002834 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2202      	movs	r2, #2
 800c8b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c8bc:	4b49      	ldr	r3, [pc, #292]	@ (800c9e4 <HAL_RTC_Init+0x15c>)
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f003 0310 	and.w	r3, r3, #16
 800c8c4:	2b10      	cmp	r3, #16
 800c8c6:	d07e      	beq.n	800c9c6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	22ca      	movs	r2, #202	@ 0xca
 800c8ce:	625a      	str	r2, [r3, #36]	@ 0x24
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	2253      	movs	r2, #83	@ 0x53
 800c8d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 fa1d 	bl	800cd18 <RTC_EnterInitMode>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d00a      	beq.n	800c8fa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	22ff      	movs	r2, #255	@ 0xff
 800c8ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2204      	movs	r2, #4
 800c8f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	73fb      	strb	r3, [r7, #15]
 800c8f8:	e067      	b.n	800c9ca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	687a      	ldr	r2, [r7, #4]
 800c902:	6812      	ldr	r2, [r2, #0]
 800c904:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c908:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c90c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	6899      	ldr	r1, [r3, #8]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685a      	ldr	r2, [r3, #4]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	431a      	orrs	r2, r3
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	699b      	ldr	r3, [r3, #24]
 800c922:	431a      	orrs	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	430a      	orrs	r2, r1
 800c92a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	687a      	ldr	r2, [r7, #4]
 800c932:	68d2      	ldr	r2, [r2, #12]
 800c934:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6919      	ldr	r1, [r3, #16]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	041a      	lsls	r2, r3, #16
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	430a      	orrs	r2, r1
 800c948:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	68da      	ldr	r2, [r3, #12]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c958:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f022 0203 	bic.w	r2, r2, #3
 800c968:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	69da      	ldr	r2, [r3, #28]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	695b      	ldr	r3, [r3, #20]
 800c978:	431a      	orrs	r2, r3
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	430a      	orrs	r2, r1
 800c980:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	f003 0320 	and.w	r3, r3, #32
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d113      	bne.n	800c9b8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 f99b 	bl	800cccc <HAL_RTC_WaitForSynchro>
 800c996:	4603      	mov	r3, r0
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00d      	beq.n	800c9b8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	22ff      	movs	r2, #255	@ 0xff
 800c9a2:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2204      	movs	r2, #4
 800c9a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e010      	b.n	800c9da <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	22ff      	movs	r2, #255	@ 0xff
 800c9be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73fb      	strb	r3, [r7, #15]
 800c9c4:	e001      	b.n	800c9ca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d103      	bne.n	800c9d8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3710      	adds	r7, #16
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	40002800 	.word	0x40002800

0800c9e8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c9e8:	b590      	push	{r4, r7, lr}
 800c9ea:	b087      	sub	sp, #28
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	60b9      	str	r1, [r7, #8]
 800c9f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d101      	bne.n	800ca02 <HAL_RTC_SetTime+0x1a>
 800c9fe:	2302      	movs	r3, #2
 800ca00:	e0b2      	b.n	800cb68 <HAL_RTC_SetTime+0x180>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2201      	movs	r2, #1
 800ca06:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2202      	movs	r2, #2
 800ca0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d126      	bne.n	800ca66 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d102      	bne.n	800ca2c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f000 f99b 	bl	800cd6c <RTC_ByteToBcd2>
 800ca36:	4603      	mov	r3, r0
 800ca38:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	785b      	ldrb	r3, [r3, #1]
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 f994 	bl	800cd6c <RTC_ByteToBcd2>
 800ca44:	4603      	mov	r3, r0
 800ca46:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ca48:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	789b      	ldrb	r3, [r3, #2]
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f000 f98c 	bl	800cd6c <RTC_ByteToBcd2>
 800ca54:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ca56:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	78db      	ldrb	r3, [r3, #3]
 800ca5e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ca60:	4313      	orrs	r3, r2
 800ca62:	617b      	str	r3, [r7, #20]
 800ca64:	e018      	b.n	800ca98 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d102      	bne.n	800ca7a <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	2200      	movs	r2, #0
 800ca78:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	785b      	ldrb	r3, [r3, #1]
 800ca84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ca86:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ca8c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	78db      	ldrb	r3, [r3, #3]
 800ca92:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ca94:	4313      	orrs	r3, r2
 800ca96:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	22ca      	movs	r2, #202	@ 0xca
 800ca9e:	625a      	str	r2, [r3, #36]	@ 0x24
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2253      	movs	r2, #83	@ 0x53
 800caa6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 f935 	bl	800cd18 <RTC_EnterInitMode>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00d      	beq.n	800cad0 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	22ff      	movs	r2, #255	@ 0xff
 800caba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2204      	movs	r2, #4
 800cac0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
 800cace:	e04b      	b.n	800cb68 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800cada:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800cade:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	689a      	ldr	r2, [r3, #8]
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800caee:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	6899      	ldr	r1, [r3, #8]
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	68da      	ldr	r2, [r3, #12]
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	691b      	ldr	r3, [r3, #16]
 800cafe:	431a      	orrs	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	430a      	orrs	r2, r1
 800cb06:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68da      	ldr	r2, [r3, #12]
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb16:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	f003 0320 	and.w	r3, r3, #32
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d113      	bne.n	800cb4e <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f000 f8d0 	bl	800cccc <HAL_RTC_WaitForSynchro>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d00d      	beq.n	800cb4e <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	22ff      	movs	r2, #255	@ 0xff
 800cb38:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2204      	movs	r2, #4
 800cb3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e00c      	b.n	800cb68 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	22ff      	movs	r2, #255	@ 0xff
 800cb54:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2201      	movs	r2, #1
 800cb5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    __HAL_UNLOCK(hrtc);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800cb66:	2300      	movs	r3, #0
  }
}
 800cb68:	4618      	mov	r0, r3
 800cb6a:	371c      	adds	r7, #28
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd90      	pop	{r4, r7, pc}

0800cb70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cb70:	b590      	push	{r4, r7, lr}
 800cb72:	b087      	sub	sp, #28
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cb82:	2b01      	cmp	r3, #1
 800cb84:	d101      	bne.n	800cb8a <HAL_RTC_SetDate+0x1a>
 800cb86:	2302      	movs	r3, #2
 800cb88:	e09c      	b.n	800ccc4 <HAL_RTC_SetDate+0x154>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2202      	movs	r2, #2
 800cb96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d10e      	bne.n	800cbbe <HAL_RTC_SetDate+0x4e>
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	785b      	ldrb	r3, [r3, #1]
 800cba4:	f003 0310 	and.w	r3, r3, #16
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d008      	beq.n	800cbbe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	785b      	ldrb	r3, [r3, #1]
 800cbb0:	f023 0310 	bic.w	r3, r3, #16
 800cbb4:	b2db      	uxtb	r3, r3
 800cbb6:	330a      	adds	r3, #10
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d11c      	bne.n	800cbfe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	78db      	ldrb	r3, [r3, #3]
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f000 f8cf 	bl	800cd6c <RTC_ByteToBcd2>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	785b      	ldrb	r3, [r3, #1]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f8c8 	bl	800cd6c <RTC_ByteToBcd2>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cbe0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	789b      	ldrb	r3, [r3, #2]
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f000 f8c0 	bl	800cd6c <RTC_ByteToBcd2>
 800cbec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800cbee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800cbf8:	4313      	orrs	r3, r2
 800cbfa:	617b      	str	r3, [r7, #20]
 800cbfc:	e00e      	b.n	800cc1c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	78db      	ldrb	r3, [r3, #3]
 800cc02:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	785b      	ldrb	r3, [r3, #1]
 800cc08:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cc0a:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800cc10:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	22ca      	movs	r2, #202	@ 0xca
 800cc22:	625a      	str	r2, [r3, #36]	@ 0x24
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2253      	movs	r2, #83	@ 0x53
 800cc2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f000 f873 	bl	800cd18 <RTC_EnterInitMode>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00d      	beq.n	800cc54 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	22ff      	movs	r2, #255	@ 0xff
 800cc3e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2204      	movs	r2, #4
 800cc44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	e037      	b.n	800ccc4 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800cc5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cc62:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68da      	ldr	r2, [r3, #12]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc72:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	689b      	ldr	r3, [r3, #8]
 800cc7a:	f003 0320 	and.w	r3, r3, #32
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d113      	bne.n	800ccaa <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f000 f822 	bl	800cccc <HAL_RTC_WaitForSynchro>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d00d      	beq.n	800ccaa <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	22ff      	movs	r2, #255	@ 0xff
 800cc94:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2204      	movs	r2, #4
 800cc9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e00c      	b.n	800ccc4 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	22ff      	movs	r2, #255	@ 0xff
 800ccb0:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800ccc2:	2300      	movs	r3, #0
  }
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	371c      	adds	r7, #28
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd90      	pop	{r4, r7, pc}

0800cccc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b084      	sub	sp, #16
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68da      	ldr	r2, [r3, #12]
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800cce2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800cce4:	f7f9 fc9c 	bl	8006620 <HAL_GetTick>
 800cce8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ccea:	e009      	b.n	800cd00 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ccec:	f7f9 fc98 	bl	8006620 <HAL_GetTick>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ccfa:	d901      	bls.n	800cd00 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ccfc:	2303      	movs	r3, #3
 800ccfe:	e007      	b.n	800cd10 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	f003 0320 	and.w	r3, r3, #32
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d0ee      	beq.n	800ccec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d119      	bne.n	800cd62 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f04f 32ff 	mov.w	r2, #4294967295
 800cd36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cd38:	f7f9 fc72 	bl	8006620 <HAL_GetTick>
 800cd3c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cd3e:	e009      	b.n	800cd54 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cd40:	f7f9 fc6e 	bl	8006620 <HAL_GetTick>
 800cd44:	4602      	mov	r2, r0
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd4e:	d901      	bls.n	800cd54 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800cd50:	2303      	movs	r3, #3
 800cd52:	e007      	b.n	800cd64 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d0ee      	beq.n	800cd40 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3710      	adds	r7, #16
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cd6c:	b480      	push	{r7}
 800cd6e:	b085      	sub	sp, #20
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	4603      	mov	r3, r0
 800cd74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800cd76:	2300      	movs	r3, #0
 800cd78:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800cd7a:	79fb      	ldrb	r3, [r7, #7]
 800cd7c:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800cd7e:	e005      	b.n	800cd8c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	3301      	adds	r3, #1
 800cd84:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800cd86:	7afb      	ldrb	r3, [r7, #11]
 800cd88:	3b0a      	subs	r3, #10
 800cd8a:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800cd8c:	7afb      	ldrb	r3, [r7, #11]
 800cd8e:	2b09      	cmp	r3, #9
 800cd90:	d8f6      	bhi.n	800cd80 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	011b      	lsls	r3, r3, #4
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	7afb      	ldrb	r3, [r7, #11]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	b2db      	uxtb	r3, r3
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3714      	adds	r7, #20
 800cda4:	46bd      	mov	sp, r7
 800cda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdaa:	4770      	bx	lr

0800cdac <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cdbe:	2b01      	cmp	r3, #1
 800cdc0:	d101      	bne.n	800cdc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800cdc2:	2302      	movs	r3, #2
 800cdc4:	e0a8      	b.n	800cf18 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	2202      	movs	r2, #2
 800cdd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	22ca      	movs	r2, #202	@ 0xca
 800cddc:	625a      	str	r2, [r3, #36]	@ 0x24
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2253      	movs	r2, #83	@ 0x53
 800cde4:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d020      	beq.n	800ce36 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800cdf4:	f7f9 fc14 	bl	8006620 <HAL_GetTick>
 800cdf8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800cdfa:	e015      	b.n	800ce28 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cdfc:	f7f9 fc10 	bl	8006620 <HAL_GetTick>
 800ce00:	4602      	mov	r2, r0
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	1ad3      	subs	r3, r2, r3
 800ce06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce0a:	d90d      	bls.n	800ce28 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	22ff      	movs	r2, #255	@ 0xff
 800ce12:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2203      	movs	r2, #3
 800ce18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ce24:	2303      	movs	r3, #3
 800ce26:	e077      	b.n	800cf18 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	f003 0304 	and.w	r3, r3, #4
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1e2      	bne.n	800cdfc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	689a      	ldr	r2, [r3, #8]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ce44:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800ce56:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ce58:	f7f9 fbe2 	bl	8006620 <HAL_GetTick>
 800ce5c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ce5e:	e015      	b.n	800ce8c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce60:	f7f9 fbde 	bl	8006620 <HAL_GetTick>
 800ce64:	4602      	mov	r2, r0
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	1ad3      	subs	r3, r2, r3
 800ce6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ce6e:	d90d      	bls.n	800ce8c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	22ff      	movs	r2, #255	@ 0xff
 800ce76:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2203      	movs	r2, #3
 800ce7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	e045      	b.n	800cf18 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	f003 0304 	and.w	r3, r3, #4
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d0e2      	beq.n	800ce60 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	68ba      	ldr	r2, [r7, #8]
 800cea0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	689a      	ldr	r2, [r3, #8]
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f022 0207 	bic.w	r2, r2, #7
 800ceb0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	6899      	ldr	r1, [r3, #8]
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800cec2:	4b17      	ldr	r3, [pc, #92]	@ (800cf20 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800cec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cec8:	4a15      	ldr	r2, [pc, #84]	@ (800cf20 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ceca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cece:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800ced2:	4b13      	ldr	r3, [pc, #76]	@ (800cf20 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	4a12      	ldr	r2, [pc, #72]	@ (800cf20 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800ced8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cedc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	689a      	ldr	r2, [r3, #8]
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ceec:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	689a      	ldr	r2, [r3, #8]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cefc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	22ff      	movs	r2, #255	@ 0xff
 800cf04:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	2201      	movs	r2, #1
 800cf0a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800cf16:	2300      	movs	r3, #0
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3718      	adds	r7, #24
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}
 800cf20:	58000800 	.word	0x58000800

0800cf24 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d00b      	beq.n	800cf52 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f818 	bl	800cf70 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	b2da      	uxtb	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800cf50:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800cf52:	4b06      	ldr	r3, [pc, #24]	@ (800cf6c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800cf54:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800cf58:	60da      	str	r2, [r3, #12]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800cf62:	bf00      	nop
 800cf64:	3708      	adds	r7, #8
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop
 800cf6c:	58000800 	.word	0x58000800

0800cf70 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800cf78:	bf00      	nop
 800cf7a:	370c      	adds	r7, #12
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr

0800cf84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d101      	bne.n	800cf96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cf92:	2301      	movs	r3, #1
 800cf94:	e095      	b.n	800d0c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d108      	bne.n	800cfb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cfa6:	d009      	beq.n	800cfbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	61da      	str	r2, [r3, #28]
 800cfae:	e005      	b.n	800cfbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d106      	bne.n	800cfdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f7f5 fcd4 	bl	8002984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2202      	movs	r2, #2
 800cfe0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cff2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cffc:	d902      	bls.n	800d004 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800cffe:	2300      	movs	r3, #0
 800d000:	60fb      	str	r3, [r7, #12]
 800d002:	e002      	b.n	800d00a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d008:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800d012:	d007      	beq.n	800d024 <HAL_SPI_Init+0xa0>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d01c:	d002      	beq.n	800d024 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d034:	431a      	orrs	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	691b      	ldr	r3, [r3, #16]
 800d03a:	f003 0302 	and.w	r3, r3, #2
 800d03e:	431a      	orrs	r2, r3
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	695b      	ldr	r3, [r3, #20]
 800d044:	f003 0301 	and.w	r3, r3, #1
 800d048:	431a      	orrs	r2, r3
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	699b      	ldr	r3, [r3, #24]
 800d04e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d052:	431a      	orrs	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	69db      	ldr	r3, [r3, #28]
 800d058:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d05c:	431a      	orrs	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d066:	ea42 0103 	orr.w	r1, r2, r3
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d06e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	699b      	ldr	r3, [r3, #24]
 800d07e:	0c1b      	lsrs	r3, r3, #16
 800d080:	f003 0204 	and.w	r2, r3, #4
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d088:	f003 0310 	and.w	r3, r3, #16
 800d08c:	431a      	orrs	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d092:	f003 0308 	and.w	r3, r3, #8
 800d096:	431a      	orrs	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800d0a0:	ea42 0103 	orr.w	r1, r2, r3
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	430a      	orrs	r2, r1
 800d0b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800d0c0:	2300      	movs	r3, #0
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b088      	sub	sp, #32
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	60f8      	str	r0, [r7, #12]
 800d0d2:	60b9      	str	r1, [r7, #8]
 800d0d4:	603b      	str	r3, [r7, #0]
 800d0d6:	4613      	mov	r3, r2
 800d0d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0da:	f7f9 faa1 	bl	8006620 <HAL_GetTick>
 800d0de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d0e0:	88fb      	ldrh	r3, [r7, #6]
 800d0e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d001      	beq.n	800d0f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	e15c      	b.n	800d3ae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d002      	beq.n	800d100 <HAL_SPI_Transmit+0x36>
 800d0fa:	88fb      	ldrh	r3, [r7, #6]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d101      	bne.n	800d104 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	e154      	b.n	800d3ae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d10a:	2b01      	cmp	r3, #1
 800d10c:	d101      	bne.n	800d112 <HAL_SPI_Transmit+0x48>
 800d10e:	2302      	movs	r3, #2
 800d110:	e14d      	b.n	800d3ae <HAL_SPI_Transmit+0x2e4>
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2201      	movs	r2, #1
 800d116:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2203      	movs	r2, #3
 800d11e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2200      	movs	r2, #0
 800d126:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	68ba      	ldr	r2, [r7, #8]
 800d12c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	88fa      	ldrh	r2, [r7, #6]
 800d132:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	88fa      	ldrh	r2, [r7, #6]
 800d138:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2200      	movs	r2, #0
 800d13e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2200      	movs	r2, #0
 800d144:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2200      	movs	r2, #0
 800d15a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d164:	d10f      	bne.n	800d186 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681a      	ldr	r2, [r3, #0]
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d174:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d184:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d190:	2b40      	cmp	r3, #64	@ 0x40
 800d192:	d007      	beq.n	800d1a4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d1ac:	d952      	bls.n	800d254 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d002      	beq.n	800d1bc <HAL_SPI_Transmit+0xf2>
 800d1b6:	8b7b      	ldrh	r3, [r7, #26]
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d145      	bne.n	800d248 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1c0:	881a      	ldrh	r2, [r3, #0]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1cc:	1c9a      	adds	r2, r3, #2
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d1e0:	e032      	b.n	800d248 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	f003 0302 	and.w	r3, r3, #2
 800d1ec:	2b02      	cmp	r3, #2
 800d1ee:	d112      	bne.n	800d216 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1f4:	881a      	ldrh	r2, [r3, #0]
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d200:	1c9a      	adds	r2, r3, #2
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	3b01      	subs	r3, #1
 800d20e:	b29a      	uxth	r2, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d214:	e018      	b.n	800d248 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d216:	f7f9 fa03 	bl	8006620 <HAL_GetTick>
 800d21a:	4602      	mov	r2, r0
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	683a      	ldr	r2, [r7, #0]
 800d222:	429a      	cmp	r2, r3
 800d224:	d803      	bhi.n	800d22e <HAL_SPI_Transmit+0x164>
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d22c:	d102      	bne.n	800d234 <HAL_SPI_Transmit+0x16a>
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d109      	bne.n	800d248 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2200      	movs	r2, #0
 800d240:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d244:	2303      	movs	r3, #3
 800d246:	e0b2      	b.n	800d3ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d1c7      	bne.n	800d1e2 <HAL_SPI_Transmit+0x118>
 800d252:	e083      	b.n	800d35c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d002      	beq.n	800d262 <HAL_SPI_Transmit+0x198>
 800d25c:	8b7b      	ldrh	r3, [r7, #26]
 800d25e:	2b01      	cmp	r3, #1
 800d260:	d177      	bne.n	800d352 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d266:	b29b      	uxth	r3, r3
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d912      	bls.n	800d292 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d270:	881a      	ldrh	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d27c:	1c9a      	adds	r2, r3, #2
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d286:	b29b      	uxth	r3, r3
 800d288:	3b02      	subs	r3, #2
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d290:	e05f      	b.n	800d352 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	330c      	adds	r3, #12
 800d29c:	7812      	ldrb	r2, [r2, #0]
 800d29e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	3b01      	subs	r3, #1
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800d2b8:	e04b      	b.n	800d352 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	f003 0302 	and.w	r3, r3, #2
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	d12b      	bne.n	800d320 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d912      	bls.n	800d2f8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2d6:	881a      	ldrh	r2, [r3, #0]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e2:	1c9a      	adds	r2, r3, #2
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	3b02      	subs	r3, #2
 800d2f0:	b29a      	uxth	r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d2f6:	e02c      	b.n	800d352 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	330c      	adds	r3, #12
 800d302:	7812      	ldrb	r2, [r2, #0]
 800d304:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30a:	1c5a      	adds	r2, r3, #1
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d314:	b29b      	uxth	r3, r3
 800d316:	3b01      	subs	r3, #1
 800d318:	b29a      	uxth	r2, r3
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d31e:	e018      	b.n	800d352 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d320:	f7f9 f97e 	bl	8006620 <HAL_GetTick>
 800d324:	4602      	mov	r2, r0
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	1ad3      	subs	r3, r2, r3
 800d32a:	683a      	ldr	r2, [r7, #0]
 800d32c:	429a      	cmp	r2, r3
 800d32e:	d803      	bhi.n	800d338 <HAL_SPI_Transmit+0x26e>
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d336:	d102      	bne.n	800d33e <HAL_SPI_Transmit+0x274>
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d109      	bne.n	800d352 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d34e:	2303      	movs	r3, #3
 800d350:	e02d      	b.n	800d3ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d356:	b29b      	uxth	r3, r3
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1ae      	bne.n	800d2ba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d35c:	69fa      	ldr	r2, [r7, #28]
 800d35e:	6839      	ldr	r1, [r7, #0]
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f000 fe09 	bl	800df78 <SPI_EndRxTxTransaction>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d002      	beq.n	800d372 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2220      	movs	r2, #32
 800d370:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d10a      	bne.n	800d390 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d37a:	2300      	movs	r3, #0
 800d37c:	617b      	str	r3, [r7, #20]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	68db      	ldr	r3, [r3, #12]
 800d384:	617b      	str	r3, [r7, #20]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	689b      	ldr	r3, [r3, #8]
 800d38c:	617b      	str	r3, [r7, #20]
 800d38e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2201      	movs	r2, #1
 800d394:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2200      	movs	r2, #0
 800d39c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d001      	beq.n	800d3ac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e000      	b.n	800d3ae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
  }
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3720      	adds	r7, #32
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b088      	sub	sp, #32
 800d3ba:	af02      	add	r7, sp, #8
 800d3bc:	60f8      	str	r0, [r7, #12]
 800d3be:	60b9      	str	r1, [r7, #8]
 800d3c0:	603b      	str	r3, [r7, #0]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d001      	beq.n	800d3d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800d3d2:	2302      	movs	r3, #2
 800d3d4:	e123      	b.n	800d61e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d002      	beq.n	800d3e2 <HAL_SPI_Receive+0x2c>
 800d3dc:	88fb      	ldrh	r3, [r7, #6]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d101      	bne.n	800d3e6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800d3e2:	2301      	movs	r3, #1
 800d3e4:	e11b      	b.n	800d61e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d3ee:	d112      	bne.n	800d416 <HAL_SPI_Receive+0x60>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10e      	bne.n	800d416 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	2204      	movs	r2, #4
 800d3fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d400:	88fa      	ldrh	r2, [r7, #6]
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	4613      	mov	r3, r2
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	68b9      	ldr	r1, [r7, #8]
 800d40c:	68f8      	ldr	r0, [r7, #12]
 800d40e:	f000 f90a 	bl	800d626 <HAL_SPI_TransmitReceive>
 800d412:	4603      	mov	r3, r0
 800d414:	e103      	b.n	800d61e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d416:	f7f9 f903 	bl	8006620 <HAL_GetTick>
 800d41a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d422:	2b01      	cmp	r3, #1
 800d424:	d101      	bne.n	800d42a <HAL_SPI_Receive+0x74>
 800d426:	2302      	movs	r3, #2
 800d428:	e0f9      	b.n	800d61e <HAL_SPI_Receive+0x268>
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2201      	movs	r2, #1
 800d42e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2204      	movs	r2, #4
 800d436:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2200      	movs	r2, #0
 800d43e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	68ba      	ldr	r2, [r7, #8]
 800d444:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	88fa      	ldrh	r2, [r7, #6]
 800d44a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	88fa      	ldrh	r2, [r7, #6]
 800d452:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	2200      	movs	r2, #0
 800d46c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d47c:	d908      	bls.n	800d490 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	685a      	ldr	r2, [r3, #4]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d48c:	605a      	str	r2, [r3, #4]
 800d48e:	e007      	b.n	800d4a0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	685a      	ldr	r2, [r3, #4]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d49e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	689b      	ldr	r3, [r3, #8]
 800d4a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d4a8:	d10f      	bne.n	800d4ca <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d4b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d4c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4d4:	2b40      	cmp	r3, #64	@ 0x40
 800d4d6:	d007      	beq.n	800d4e8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	681a      	ldr	r2, [r3, #0]
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	68db      	ldr	r3, [r3, #12]
 800d4ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d4f0:	d875      	bhi.n	800d5de <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d4f2:	e037      	b.n	800d564 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	f003 0301 	and.w	r3, r3, #1
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d117      	bne.n	800d532 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f103 020c 	add.w	r2, r3, #12
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d50e:	7812      	ldrb	r2, [r2, #0]
 800d510:	b2d2      	uxtb	r2, r2
 800d512:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d518:	1c5a      	adds	r2, r3, #1
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d524:	b29b      	uxth	r3, r3
 800d526:	3b01      	subs	r3, #1
 800d528:	b29a      	uxth	r2, r3
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d530:	e018      	b.n	800d564 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d532:	f7f9 f875 	bl	8006620 <HAL_GetTick>
 800d536:	4602      	mov	r2, r0
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	683a      	ldr	r2, [r7, #0]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d803      	bhi.n	800d54a <HAL_SPI_Receive+0x194>
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d548:	d102      	bne.n	800d550 <HAL_SPI_Receive+0x19a>
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d109      	bne.n	800d564 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d560:	2303      	movs	r3, #3
 800d562:	e05c      	b.n	800d61e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d1c1      	bne.n	800d4f4 <HAL_SPI_Receive+0x13e>
 800d570:	e03b      	b.n	800d5ea <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	689b      	ldr	r3, [r3, #8]
 800d578:	f003 0301 	and.w	r3, r3, #1
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d115      	bne.n	800d5ac <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	68da      	ldr	r2, [r3, #12]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d58a:	b292      	uxth	r2, r2
 800d58c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d592:	1c9a      	adds	r2, r3, #2
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800d5aa:	e018      	b.n	800d5de <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d5ac:	f7f9 f838 	bl	8006620 <HAL_GetTick>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	683a      	ldr	r2, [r7, #0]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d803      	bhi.n	800d5c4 <HAL_SPI_Receive+0x20e>
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5c2:	d102      	bne.n	800d5ca <HAL_SPI_Receive+0x214>
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d109      	bne.n	800d5de <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800d5da:	2303      	movs	r3, #3
 800d5dc:	e01f      	b.n	800d61e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d1c3      	bne.n	800d572 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d5ea:	697a      	ldr	r2, [r7, #20]
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f000 fc6a 	bl	800dec8 <SPI_EndRxTransaction>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d002      	beq.n	800d600 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	2220      	movs	r2, #32
 800d5fe:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2201      	movs	r2, #1
 800d604:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800d618:	2301      	movs	r3, #1
 800d61a:	e000      	b.n	800d61e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800d61c:	2300      	movs	r3, #0
  }
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3718      	adds	r7, #24
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b08a      	sub	sp, #40	@ 0x28
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	60f8      	str	r0, [r7, #12]
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	607a      	str	r2, [r7, #4]
 800d632:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d634:	2301      	movs	r3, #1
 800d636:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d638:	f7f8 fff2 	bl	8006620 <HAL_GetTick>
 800d63c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d644:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d64c:	887b      	ldrh	r3, [r7, #2]
 800d64e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800d650:	887b      	ldrh	r3, [r7, #2]
 800d652:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d654:	7ffb      	ldrb	r3, [r7, #31]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d00c      	beq.n	800d674 <HAL_SPI_TransmitReceive+0x4e>
 800d65a:	69bb      	ldr	r3, [r7, #24]
 800d65c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d660:	d106      	bne.n	800d670 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	689b      	ldr	r3, [r3, #8]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d102      	bne.n	800d670 <HAL_SPI_TransmitReceive+0x4a>
 800d66a:	7ffb      	ldrb	r3, [r7, #31]
 800d66c:	2b04      	cmp	r3, #4
 800d66e:	d001      	beq.n	800d674 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d670:	2302      	movs	r3, #2
 800d672:	e1f3      	b.n	800da5c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d005      	beq.n	800d686 <HAL_SPI_TransmitReceive+0x60>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <HAL_SPI_TransmitReceive+0x60>
 800d680:	887b      	ldrh	r3, [r7, #2]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d101      	bne.n	800d68a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e1e8      	b.n	800da5c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800d690:	2b01      	cmp	r3, #1
 800d692:	d101      	bne.n	800d698 <HAL_SPI_TransmitReceive+0x72>
 800d694:	2302      	movs	r3, #2
 800d696:	e1e1      	b.n	800da5c <HAL_SPI_TransmitReceive+0x436>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b04      	cmp	r3, #4
 800d6aa:	d003      	beq.n	800d6b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	2205      	movs	r2, #5
 800d6b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	887a      	ldrh	r2, [r7, #2]
 800d6c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	887a      	ldrh	r2, [r7, #2]
 800d6cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	887a      	ldrh	r2, [r7, #2]
 800d6da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	887a      	ldrh	r2, [r7, #2]
 800d6e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d6f6:	d802      	bhi.n	800d6fe <HAL_SPI_TransmitReceive+0xd8>
 800d6f8:	8abb      	ldrh	r3, [r7, #20]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	d908      	bls.n	800d710 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	685a      	ldr	r2, [r3, #4]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d70c:	605a      	str	r2, [r3, #4]
 800d70e:	e007      	b.n	800d720 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	685a      	ldr	r2, [r3, #4]
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d71e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d72a:	2b40      	cmp	r3, #64	@ 0x40
 800d72c:	d007      	beq.n	800d73e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d73c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800d746:	f240 8083 	bls.w	800d850 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	685b      	ldr	r3, [r3, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d002      	beq.n	800d758 <HAL_SPI_TransmitReceive+0x132>
 800d752:	8afb      	ldrh	r3, [r7, #22]
 800d754:	2b01      	cmp	r3, #1
 800d756:	d16f      	bne.n	800d838 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d75c:	881a      	ldrh	r2, [r3, #0]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d768:	1c9a      	adds	r2, r3, #2
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d772:	b29b      	uxth	r3, r3
 800d774:	3b01      	subs	r3, #1
 800d776:	b29a      	uxth	r2, r3
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d77c:	e05c      	b.n	800d838 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	f003 0302 	and.w	r3, r3, #2
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d11b      	bne.n	800d7c4 <HAL_SPI_TransmitReceive+0x19e>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d790:	b29b      	uxth	r3, r3
 800d792:	2b00      	cmp	r3, #0
 800d794:	d016      	beq.n	800d7c4 <HAL_SPI_TransmitReceive+0x19e>
 800d796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d798:	2b01      	cmp	r3, #1
 800d79a:	d113      	bne.n	800d7c4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7a0:	881a      	ldrh	r2, [r3, #0]
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ac:	1c9a      	adds	r2, r3, #2
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	f003 0301 	and.w	r3, r3, #1
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d11c      	bne.n	800d80c <HAL_SPI_TransmitReceive+0x1e6>
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d016      	beq.n	800d80c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	68da      	ldr	r2, [r3, #12]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7e8:	b292      	uxth	r2, r2
 800d7ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7f0:	1c9a      	adds	r2, r3, #2
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	3b01      	subs	r3, #1
 800d800:	b29a      	uxth	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d808:	2301      	movs	r3, #1
 800d80a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d80c:	f7f8 ff08 	bl	8006620 <HAL_GetTick>
 800d810:	4602      	mov	r2, r0
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d818:	429a      	cmp	r2, r3
 800d81a:	d80d      	bhi.n	800d838 <HAL_SPI_TransmitReceive+0x212>
 800d81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d822:	d009      	beq.n	800d838 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d834:	2303      	movs	r3, #3
 800d836:	e111      	b.n	800da5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d19d      	bne.n	800d77e <HAL_SPI_TransmitReceive+0x158>
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d848:	b29b      	uxth	r3, r3
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d197      	bne.n	800d77e <HAL_SPI_TransmitReceive+0x158>
 800d84e:	e0e5      	b.n	800da1c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	685b      	ldr	r3, [r3, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d003      	beq.n	800d860 <HAL_SPI_TransmitReceive+0x23a>
 800d858:	8afb      	ldrh	r3, [r7, #22]
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	f040 80d1 	bne.w	800da02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d864:	b29b      	uxth	r3, r3
 800d866:	2b01      	cmp	r3, #1
 800d868:	d912      	bls.n	800d890 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d86e:	881a      	ldrh	r2, [r3, #0]
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d87a:	1c9a      	adds	r2, r3, #2
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d884:	b29b      	uxth	r3, r3
 800d886:	3b02      	subs	r3, #2
 800d888:	b29a      	uxth	r2, r3
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d88e:	e0b8      	b.n	800da02 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	330c      	adds	r3, #12
 800d89a:	7812      	ldrb	r2, [r2, #0]
 800d89c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8a2:	1c5a      	adds	r2, r3, #1
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	3b01      	subs	r3, #1
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d8b6:	e0a4      	b.n	800da02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	f003 0302 	and.w	r3, r3, #2
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	d134      	bne.n	800d930 <HAL_SPI_TransmitReceive+0x30a>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8ca:	b29b      	uxth	r3, r3
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d02f      	beq.n	800d930 <HAL_SPI_TransmitReceive+0x30a>
 800d8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d12c      	bne.n	800d930 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d912      	bls.n	800d906 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8e4:	881a      	ldrh	r2, [r3, #0]
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f0:	1c9a      	adds	r2, r3, #2
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	3b02      	subs	r3, #2
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d904:	e012      	b.n	800d92c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	330c      	adds	r3, #12
 800d910:	7812      	ldrb	r2, [r2, #0]
 800d912:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d918:	1c5a      	adds	r2, r3, #1
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d922:	b29b      	uxth	r3, r3
 800d924:	3b01      	subs	r3, #1
 800d926:	b29a      	uxth	r2, r3
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d92c:	2300      	movs	r3, #0
 800d92e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	f003 0301 	and.w	r3, r3, #1
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d148      	bne.n	800d9d0 <HAL_SPI_TransmitReceive+0x3aa>
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d944:	b29b      	uxth	r3, r3
 800d946:	2b00      	cmp	r3, #0
 800d948:	d042      	beq.n	800d9d0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d950:	b29b      	uxth	r3, r3
 800d952:	2b01      	cmp	r3, #1
 800d954:	d923      	bls.n	800d99e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	68da      	ldr	r2, [r3, #12]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d960:	b292      	uxth	r2, r2
 800d962:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d968:	1c9a      	adds	r2, r3, #2
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d974:	b29b      	uxth	r3, r3
 800d976:	3b02      	subs	r3, #2
 800d978:	b29a      	uxth	r2, r3
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d986:	b29b      	uxth	r3, r3
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d81f      	bhi.n	800d9cc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	685a      	ldr	r2, [r3, #4]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d99a:	605a      	str	r2, [r3, #4]
 800d99c:	e016      	b.n	800d9cc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f103 020c 	add.w	r2, r3, #12
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9aa:	7812      	ldrb	r2, [r2, #0]
 800d9ac:	b2d2      	uxtb	r2, r2
 800d9ae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9b4:	1c5a      	adds	r2, r3, #1
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d9d0:	f7f8 fe26 	bl	8006620 <HAL_GetTick>
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	6a3b      	ldr	r3, [r7, #32]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d803      	bhi.n	800d9e8 <HAL_SPI_TransmitReceive+0x3c2>
 800d9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e6:	d102      	bne.n	800d9ee <HAL_SPI_TransmitReceive+0x3c8>
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d109      	bne.n	800da02 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800d9fe:	2303      	movs	r3, #3
 800da00:	e02c      	b.n	800da5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da06:	b29b      	uxth	r3, r3
 800da08:	2b00      	cmp	r3, #0
 800da0a:	f47f af55 	bne.w	800d8b8 <HAL_SPI_TransmitReceive+0x292>
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800da14:	b29b      	uxth	r3, r3
 800da16:	2b00      	cmp	r3, #0
 800da18:	f47f af4e 	bne.w	800d8b8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800da1c:	6a3a      	ldr	r2, [r7, #32]
 800da1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800da20:	68f8      	ldr	r0, [r7, #12]
 800da22:	f000 faa9 	bl	800df78 <SPI_EndRxTxTransaction>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d008      	beq.n	800da3e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	2220      	movs	r2, #32
 800da30:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2200      	movs	r2, #0
 800da36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800da3a:	2301      	movs	r3, #1
 800da3c:	e00e      	b.n	800da5c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2201      	movs	r2, #1
 800da42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2200      	movs	r2, #0
 800da4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da52:	2b00      	cmp	r3, #0
 800da54:	d001      	beq.n	800da5a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e000      	b.n	800da5c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800da5a:	2300      	movs	r3, #0
  }
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3728      	adds	r7, #40	@ 0x28
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b088      	sub	sp, #32
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da82:	2b00      	cmp	r3, #0
 800da84:	d10e      	bne.n	800daa4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800da86:	69bb      	ldr	r3, [r7, #24]
 800da88:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d009      	beq.n	800daa4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da96:	2b00      	cmp	r3, #0
 800da98:	d004      	beq.n	800daa4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	4798      	blx	r3
    return;
 800daa2:	e0ce      	b.n	800dc42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	f003 0302 	and.w	r3, r3, #2
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d009      	beq.n	800dac2 <HAL_SPI_IRQHandler+0x5e>
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d004      	beq.n	800dac2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	4798      	blx	r3
    return;
 800dac0:	e0bf      	b.n	800dc42 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	f003 0320 	and.w	r3, r3, #32
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10a      	bne.n	800dae2 <HAL_SPI_IRQHandler+0x7e>
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d105      	bne.n	800dae2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f000 80b0 	beq.w	800dc42 <HAL_SPI_IRQHandler+0x1de>
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	f003 0320 	and.w	r3, r3, #32
 800dae8:	2b00      	cmp	r3, #0
 800daea:	f000 80aa 	beq.w	800dc42 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d023      	beq.n	800db40 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b03      	cmp	r3, #3
 800db02:	d011      	beq.n	800db28 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db08:	f043 0204 	orr.w	r2, r3, #4
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db10:	2300      	movs	r3, #0
 800db12:	617b      	str	r3, [r7, #20]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68db      	ldr	r3, [r3, #12]
 800db1a:	617b      	str	r3, [r7, #20]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	617b      	str	r3, [r7, #20]
 800db24:	697b      	ldr	r3, [r7, #20]
 800db26:	e00b      	b.n	800db40 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db28:	2300      	movs	r3, #0
 800db2a:	613b      	str	r3, [r7, #16]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	613b      	str	r3, [r7, #16]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	689b      	ldr	r3, [r3, #8]
 800db3a:	613b      	str	r3, [r7, #16]
 800db3c:	693b      	ldr	r3, [r7, #16]
        return;
 800db3e:	e080      	b.n	800dc42 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800db40:	69bb      	ldr	r3, [r7, #24]
 800db42:	f003 0320 	and.w	r3, r3, #32
 800db46:	2b00      	cmp	r3, #0
 800db48:	d014      	beq.n	800db74 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db4e:	f043 0201 	orr.w	r2, r3, #1
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800db56:	2300      	movs	r3, #0
 800db58:	60fb      	str	r3, [r7, #12]
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	60fb      	str	r3, [r7, #12]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	681a      	ldr	r2, [r3, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db70:	601a      	str	r2, [r3, #0]
 800db72:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d00c      	beq.n	800db98 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db82:	f043 0208 	orr.w	r2, r3, #8
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800db8a:	2300      	movs	r3, #0
 800db8c:	60bb      	str	r3, [r7, #8]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	60bb      	str	r3, [r7, #8]
 800db96:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d04f      	beq.n	800dc40 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	685a      	ldr	r2, [r3, #4]
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dbae:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	f003 0302 	and.w	r3, r3, #2
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d104      	bne.n	800dbcc <HAL_SPI_IRQHandler+0x168>
 800dbc2:	69fb      	ldr	r3, [r7, #28]
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d034      	beq.n	800dc36 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	685a      	ldr	r2, [r3, #4]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f022 0203 	bic.w	r2, r2, #3
 800dbda:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d011      	beq.n	800dc08 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbe8:	4a17      	ldr	r2, [pc, #92]	@ (800dc48 <HAL_SPI_IRQHandler+0x1e4>)
 800dbea:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fa f863 	bl	8007cbc <HAL_DMA_Abort_IT>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d005      	beq.n	800dc08 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc00:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d016      	beq.n	800dc3e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc14:	4a0c      	ldr	r2, [pc, #48]	@ (800dc48 <HAL_SPI_IRQHandler+0x1e4>)
 800dc16:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7fa f84d 	bl	8007cbc <HAL_DMA_Abort_IT>
 800dc22:	4603      	mov	r3, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d00a      	beq.n	800dc3e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dc2c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800dc34:	e003      	b.n	800dc3e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 f808 	bl	800dc4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800dc3c:	e000      	b.n	800dc40 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800dc3e:	bf00      	nop
    return;
 800dc40:	bf00      	nop
  }
}
 800dc42:	3720      	adds	r7, #32
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	0800dc61 	.word	0x0800dc61

0800dc4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dc54:	bf00      	nop
 800dc56:	370c      	adds	r7, #12
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr

0800dc60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f7ff ffe5 	bl	800dc4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800dc82:	bf00      	nop
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
	...

0800dc8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b088      	sub	sp, #32
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	60f8      	str	r0, [r7, #12]
 800dc94:	60b9      	str	r1, [r7, #8]
 800dc96:	603b      	str	r3, [r7, #0]
 800dc98:	4613      	mov	r3, r2
 800dc9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dc9c:	f7f8 fcc0 	bl	8006620 <HAL_GetTick>
 800dca0:	4602      	mov	r2, r0
 800dca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dca4:	1a9b      	subs	r3, r3, r2
 800dca6:	683a      	ldr	r2, [r7, #0]
 800dca8:	4413      	add	r3, r2
 800dcaa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dcac:	f7f8 fcb8 	bl	8006620 <HAL_GetTick>
 800dcb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dcb2:	4b39      	ldr	r3, [pc, #228]	@ (800dd98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	015b      	lsls	r3, r3, #5
 800dcb8:	0d1b      	lsrs	r3, r3, #20
 800dcba:	69fa      	ldr	r2, [r7, #28]
 800dcbc:	fb02 f303 	mul.w	r3, r2, r3
 800dcc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dcc2:	e054      	b.n	800dd6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcca:	d050      	beq.n	800dd6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dccc:	f7f8 fca8 	bl	8006620 <HAL_GetTick>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	69bb      	ldr	r3, [r7, #24]
 800dcd4:	1ad3      	subs	r3, r2, r3
 800dcd6:	69fa      	ldr	r2, [r7, #28]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d902      	bls.n	800dce2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d13d      	bne.n	800dd5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	685a      	ldr	r2, [r3, #4]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dcf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dcfa:	d111      	bne.n	800dd20 <SPI_WaitFlagStateUntilTimeout+0x94>
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	689b      	ldr	r3, [r3, #8]
 800dd00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd04:	d004      	beq.n	800dd10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd0e:	d107      	bne.n	800dd20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dd28:	d10f      	bne.n	800dd4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dd48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	e017      	b.n	800dd8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d101      	bne.n	800dd68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dd64:	2300      	movs	r3, #0
 800dd66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	689a      	ldr	r2, [r3, #8]
 800dd74:	68bb      	ldr	r3, [r7, #8]
 800dd76:	4013      	ands	r3, r2
 800dd78:	68ba      	ldr	r2, [r7, #8]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	bf0c      	ite	eq
 800dd7e:	2301      	moveq	r3, #1
 800dd80:	2300      	movne	r3, #0
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	461a      	mov	r2, r3
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d19b      	bne.n	800dcc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dd8c:	2300      	movs	r3, #0
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3720      	adds	r7, #32
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	2000002c 	.word	0x2000002c

0800dd9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b08a      	sub	sp, #40	@ 0x28
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	60f8      	str	r0, [r7, #12]
 800dda4:	60b9      	str	r1, [r7, #8]
 800dda6:	607a      	str	r2, [r7, #4]
 800dda8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ddae:	f7f8 fc37 	bl	8006620 <HAL_GetTick>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb6:	1a9b      	subs	r3, r3, r2
 800ddb8:	683a      	ldr	r2, [r7, #0]
 800ddba:	4413      	add	r3, r2
 800ddbc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800ddbe:	f7f8 fc2f 	bl	8006620 <HAL_GetTick>
 800ddc2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	330c      	adds	r3, #12
 800ddca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ddcc:	4b3d      	ldr	r3, [pc, #244]	@ (800dec4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	009b      	lsls	r3, r3, #2
 800ddd4:	4413      	add	r3, r2
 800ddd6:	00da      	lsls	r2, r3, #3
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	0d1b      	lsrs	r3, r3, #20
 800dddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddde:	fb02 f303 	mul.w	r3, r2, r3
 800dde2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800dde4:	e060      	b.n	800dea8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800ddec:	d107      	bne.n	800ddfe <SPI_WaitFifoStateUntilTimeout+0x62>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d104      	bne.n	800ddfe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ddfc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de04:	d050      	beq.n	800dea8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800de06:	f7f8 fc0b 	bl	8006620 <HAL_GetTick>
 800de0a:	4602      	mov	r2, r0
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de12:	429a      	cmp	r2, r3
 800de14:	d902      	bls.n	800de1c <SPI_WaitFifoStateUntilTimeout+0x80>
 800de16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d13d      	bne.n	800de98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	685a      	ldr	r2, [r3, #4]
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800de2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800de34:	d111      	bne.n	800de5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	689b      	ldr	r3, [r3, #8]
 800de3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800de3e:	d004      	beq.n	800de4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800de48:	d107      	bne.n	800de5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800de58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800de62:	d10f      	bne.n	800de84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800de72:	601a      	str	r2, [r3, #0]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681a      	ldr	r2, [r3, #0]
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800de82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2201      	movs	r2, #1
 800de88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2200      	movs	r2, #0
 800de90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800de94:	2303      	movs	r3, #3
 800de96:	e010      	b.n	800deba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d101      	bne.n	800dea2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800de9e:	2300      	movs	r3, #0
 800dea0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800dea2:	69bb      	ldr	r3, [r7, #24]
 800dea4:	3b01      	subs	r3, #1
 800dea6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	689a      	ldr	r2, [r3, #8]
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	4013      	ands	r3, r2
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d196      	bne.n	800dde6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800deb8:	2300      	movs	r3, #0
}
 800deba:	4618      	mov	r0, r3
 800debc:	3728      	adds	r7, #40	@ 0x28
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	2000002c 	.word	0x2000002c

0800dec8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af02      	add	r7, sp, #8
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dedc:	d111      	bne.n	800df02 <SPI_EndRxTransaction+0x3a>
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	689b      	ldr	r3, [r3, #8]
 800dee2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dee6:	d004      	beq.n	800def2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	689b      	ldr	r3, [r3, #8]
 800deec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800def0:	d107      	bne.n	800df02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800df00:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	9300      	str	r3, [sp, #0]
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	2200      	movs	r2, #0
 800df0a:	2180      	movs	r1, #128	@ 0x80
 800df0c:	68f8      	ldr	r0, [r7, #12]
 800df0e:	f7ff febd 	bl	800dc8c <SPI_WaitFlagStateUntilTimeout>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d007      	beq.n	800df28 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df1c:	f043 0220 	orr.w	r2, r3, #32
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800df24:	2303      	movs	r3, #3
 800df26:	e023      	b.n	800df70 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800df30:	d11d      	bne.n	800df6e <SPI_EndRxTransaction+0xa6>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	689b      	ldr	r3, [r3, #8]
 800df36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800df3a:	d004      	beq.n	800df46 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800df44:	d113      	bne.n	800df6e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f7ff ff22 	bl	800dd9c <SPI_WaitFifoStateUntilTimeout>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d007      	beq.n	800df6e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df62:	f043 0220 	orr.w	r2, r3, #32
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800df6a:	2303      	movs	r3, #3
 800df6c:	e000      	b.n	800df70 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800df6e:	2300      	movs	r3, #0
}
 800df70:	4618      	mov	r0, r3
 800df72:	3710      	adds	r7, #16
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b086      	sub	sp, #24
 800df7c:	af02      	add	r7, sp, #8
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	2200      	movs	r2, #0
 800df8c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f7ff ff03 	bl	800dd9c <SPI_WaitFifoStateUntilTimeout>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d007      	beq.n	800dfac <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dfa0:	f043 0220 	orr.w	r2, r3, #32
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800dfa8:	2303      	movs	r3, #3
 800dfaa:	e027      	b.n	800dffc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	2180      	movs	r1, #128	@ 0x80
 800dfb6:	68f8      	ldr	r0, [r7, #12]
 800dfb8:	f7ff fe68 	bl	800dc8c <SPI_WaitFlagStateUntilTimeout>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d007      	beq.n	800dfd2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dfc6:	f043 0220 	orr.w	r2, r3, #32
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800dfce:	2303      	movs	r3, #3
 800dfd0:	e014      	b.n	800dffc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	9300      	str	r3, [sp, #0]
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f7ff fedc 	bl	800dd9c <SPI_WaitFifoStateUntilTimeout>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d007      	beq.n	800dffa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dfee:	f043 0220 	orr.w	r2, r3, #32
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800dff6:	2303      	movs	r3, #3
 800dff8:	e000      	b.n	800dffc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3710      	adds	r7, #16
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d101      	bne.n	800e016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e012:	2301      	movs	r3, #1
 800e014:	e049      	b.n	800e0aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d106      	bne.n	800e030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	2200      	movs	r2, #0
 800e026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f7f7 fdd8 	bl	8005be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2202      	movs	r2, #2
 800e034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	3304      	adds	r3, #4
 800e040:	4619      	mov	r1, r3
 800e042:	4610      	mov	r0, r2
 800e044:	f000 fafc 	bl	800e640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2201      	movs	r2, #1
 800e08c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2201      	movs	r2, #1
 800e094:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2201      	movs	r2, #1
 800e09c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
	...

0800e0b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d001      	beq.n	800e0cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e02e      	b.n	800e12a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2202      	movs	r2, #2
 800e0d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	4a17      	ldr	r2, [pc, #92]	@ (800e138 <HAL_TIM_Base_Start+0x84>)
 800e0da:	4293      	cmp	r3, r2
 800e0dc:	d004      	beq.n	800e0e8 <HAL_TIM_Base_Start+0x34>
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0e6:	d115      	bne.n	800e114 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	689a      	ldr	r2, [r3, #8]
 800e0ee:	4b13      	ldr	r3, [pc, #76]	@ (800e13c <HAL_TIM_Base_Start+0x88>)
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2b06      	cmp	r3, #6
 800e0f8:	d015      	beq.n	800e126 <HAL_TIM_Base_Start+0x72>
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e100:	d011      	beq.n	800e126 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f042 0201 	orr.w	r2, r2, #1
 800e110:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e112:	e008      	b.n	800e126 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f042 0201 	orr.w	r2, r2, #1
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	e000      	b.n	800e128 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e126:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3714      	adds	r7, #20
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	40012c00 	.word	0x40012c00
 800e13c:	00010007 	.word	0x00010007

0800e140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e140:	b480      	push	{r7}
 800e142:	b085      	sub	sp, #20
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e14e:	b2db      	uxtb	r3, r3
 800e150:	2b01      	cmp	r3, #1
 800e152:	d001      	beq.n	800e158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e154:	2301      	movs	r3, #1
 800e156:	e036      	b.n	800e1c6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2202      	movs	r2, #2
 800e15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	68da      	ldr	r2, [r3, #12]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	f042 0201 	orr.w	r2, r2, #1
 800e16e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	4a17      	ldr	r2, [pc, #92]	@ (800e1d4 <HAL_TIM_Base_Start_IT+0x94>)
 800e176:	4293      	cmp	r3, r2
 800e178:	d004      	beq.n	800e184 <HAL_TIM_Base_Start_IT+0x44>
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e182:	d115      	bne.n	800e1b0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	689a      	ldr	r2, [r3, #8]
 800e18a:	4b13      	ldr	r3, [pc, #76]	@ (800e1d8 <HAL_TIM_Base_Start_IT+0x98>)
 800e18c:	4013      	ands	r3, r2
 800e18e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b06      	cmp	r3, #6
 800e194:	d015      	beq.n	800e1c2 <HAL_TIM_Base_Start_IT+0x82>
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e19c:	d011      	beq.n	800e1c2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	f042 0201 	orr.w	r2, r2, #1
 800e1ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1ae:	e008      	b.n	800e1c2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	f042 0201 	orr.w	r2, r2, #1
 800e1be:	601a      	str	r2, [r3, #0]
 800e1c0:	e000      	b.n	800e1c4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	40012c00 	.word	0x40012c00
 800e1d8:	00010007 	.word	0x00010007

0800e1dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	68da      	ldr	r2, [r3, #12]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	f022 0201 	bic.w	r2, r2, #1
 800e1f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	6a1a      	ldr	r2, [r3, #32]
 800e1fa:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e1fe:	4013      	ands	r3, r2
 800e200:	2b00      	cmp	r3, #0
 800e202:	d10f      	bne.n	800e224 <HAL_TIM_Base_Stop_IT+0x48>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6a1a      	ldr	r2, [r3, #32]
 800e20a:	f240 4344 	movw	r3, #1092	@ 0x444
 800e20e:	4013      	ands	r3, r2
 800e210:	2b00      	cmp	r3, #0
 800e212:	d107      	bne.n	800e224 <HAL_TIM_Base_Stop_IT+0x48>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f022 0201 	bic.w	r2, r2, #1
 800e222:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	2201      	movs	r2, #1
 800e228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	370c      	adds	r7, #12
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr

0800e23a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e23a:	b580      	push	{r7, lr}
 800e23c:	b084      	sub	sp, #16
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	68db      	ldr	r3, [r3, #12]
 800e248:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	691b      	ldr	r3, [r3, #16]
 800e250:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	f003 0302 	and.w	r3, r3, #2
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d020      	beq.n	800e29e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f003 0302 	and.w	r3, r3, #2
 800e262:	2b00      	cmp	r3, #0
 800e264:	d01b      	beq.n	800e29e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f06f 0202 	mvn.w	r2, #2
 800e26e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2201      	movs	r2, #1
 800e274:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	699b      	ldr	r3, [r3, #24]
 800e27c:	f003 0303 	and.w	r3, r3, #3
 800e280:	2b00      	cmp	r3, #0
 800e282:	d003      	beq.n	800e28c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f000 f9bc 	bl	800e602 <HAL_TIM_IC_CaptureCallback>
 800e28a:	e005      	b.n	800e298 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f9ae 	bl	800e5ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f9bf 	bl	800e616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	f003 0304 	and.w	r3, r3, #4
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d020      	beq.n	800e2ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f003 0304 	and.w	r3, r3, #4
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d01b      	beq.n	800e2ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	f06f 0204 	mvn.w	r2, #4
 800e2ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2202      	movs	r2, #2
 800e2c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	699b      	ldr	r3, [r3, #24]
 800e2c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d003      	beq.n	800e2d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f000 f996 	bl	800e602 <HAL_TIM_IC_CaptureCallback>
 800e2d6:	e005      	b.n	800e2e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 f988 	bl	800e5ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 f999 	bl	800e616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e2ea:	68bb      	ldr	r3, [r7, #8]
 800e2ec:	f003 0308 	and.w	r3, r3, #8
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d020      	beq.n	800e336 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f003 0308 	and.w	r3, r3, #8
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d01b      	beq.n	800e336 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f06f 0208 	mvn.w	r2, #8
 800e306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2204      	movs	r2, #4
 800e30c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	69db      	ldr	r3, [r3, #28]
 800e314:	f003 0303 	and.w	r3, r3, #3
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 f970 	bl	800e602 <HAL_TIM_IC_CaptureCallback>
 800e322:	e005      	b.n	800e330 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 f962 	bl	800e5ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f973 	bl	800e616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2200      	movs	r2, #0
 800e334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	f003 0310 	and.w	r3, r3, #16
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d020      	beq.n	800e382 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	f003 0310 	and.w	r3, r3, #16
 800e346:	2b00      	cmp	r3, #0
 800e348:	d01b      	beq.n	800e382 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f06f 0210 	mvn.w	r2, #16
 800e352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2208      	movs	r2, #8
 800e358:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	69db      	ldr	r3, [r3, #28]
 800e360:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e364:	2b00      	cmp	r3, #0
 800e366:	d003      	beq.n	800e370 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 f94a 	bl	800e602 <HAL_TIM_IC_CaptureCallback>
 800e36e:	e005      	b.n	800e37c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 f93c 	bl	800e5ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 f94d 	bl	800e616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	f003 0301 	and.w	r3, r3, #1
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d00c      	beq.n	800e3a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f003 0301 	and.w	r3, r3, #1
 800e392:	2b00      	cmp	r3, #0
 800e394:	d007      	beq.n	800e3a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f06f 0201 	mvn.w	r2, #1
 800e39e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f91a 	bl	800e5da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d104      	bne.n	800e3ba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00c      	beq.n	800e3d4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d007      	beq.n	800e3d4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 faac 	bl	800e92c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00c      	beq.n	800e3f8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d007      	beq.n	800e3f8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 faa4 	bl	800e940 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00c      	beq.n	800e41c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d007      	beq.n	800e41c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f000 f907 	bl	800e62a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	f003 0320 	and.w	r3, r3, #32
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00c      	beq.n	800e440 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f003 0320 	and.w	r3, r3, #32
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d007      	beq.n	800e440 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f06f 0220 	mvn.w	r2, #32
 800e438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 fa6c 	bl	800e918 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e440:	bf00      	nop
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e452:	2300      	movs	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e45c:	2b01      	cmp	r3, #1
 800e45e:	d101      	bne.n	800e464 <HAL_TIM_ConfigClockSource+0x1c>
 800e460:	2302      	movs	r3, #2
 800e462:	e0b6      	b.n	800e5d2 <HAL_TIM_ConfigClockSource+0x18a>
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2202      	movs	r2, #2
 800e470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	689b      	ldr	r3, [r3, #8]
 800e47a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e482:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e48e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	68ba      	ldr	r2, [r7, #8]
 800e496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e4a0:	d03e      	beq.n	800e520 <HAL_TIM_ConfigClockSource+0xd8>
 800e4a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e4a6:	f200 8087 	bhi.w	800e5b8 <HAL_TIM_ConfigClockSource+0x170>
 800e4aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4ae:	f000 8086 	beq.w	800e5be <HAL_TIM_ConfigClockSource+0x176>
 800e4b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e4b6:	d87f      	bhi.n	800e5b8 <HAL_TIM_ConfigClockSource+0x170>
 800e4b8:	2b70      	cmp	r3, #112	@ 0x70
 800e4ba:	d01a      	beq.n	800e4f2 <HAL_TIM_ConfigClockSource+0xaa>
 800e4bc:	2b70      	cmp	r3, #112	@ 0x70
 800e4be:	d87b      	bhi.n	800e5b8 <HAL_TIM_ConfigClockSource+0x170>
 800e4c0:	2b60      	cmp	r3, #96	@ 0x60
 800e4c2:	d050      	beq.n	800e566 <HAL_TIM_ConfigClockSource+0x11e>
 800e4c4:	2b60      	cmp	r3, #96	@ 0x60
 800e4c6:	d877      	bhi.n	800e5b8 <HAL_TIM_ConfigClockSource+0x170>
 800e4c8:	2b50      	cmp	r3, #80	@ 0x50
 800e4ca:	d03c      	beq.n	800e546 <HAL_TIM_ConfigClockSource+0xfe>
 800e4cc:	2b50      	cmp	r3, #80	@ 0x50
 800e4ce:	d873      	bhi.n	800e5b8 <HAL_TIM_ConfigClockSource+0x170>
 800e4d0:	2b40      	cmp	r3, #64	@ 0x40
 800e4d2:	d058      	beq.n	800e586 <HAL_TIM_ConfigClockSource+0x13e>
 800e4d4:	2b40      	cmp	r3, #64	@ 0x40
 800e4d6:	d86f      	bhi.n	800e5b8 <HAL_TIM_ConfigClockSource+0x170>
 800e4d8:	2b30      	cmp	r3, #48	@ 0x30
 800e4da:	d064      	beq.n	800e5a6 <HAL_TIM_ConfigClockSource+0x15e>
 800e4dc:	2b30      	cmp	r3, #48	@ 0x30
 800e4de:	d86b      	bhi.n	800e5b8 <HAL_TIM_ConfigClockSource+0x170>
 800e4e0:	2b20      	cmp	r3, #32
 800e4e2:	d060      	beq.n	800e5a6 <HAL_TIM_ConfigClockSource+0x15e>
 800e4e4:	2b20      	cmp	r3, #32
 800e4e6:	d867      	bhi.n	800e5b8 <HAL_TIM_ConfigClockSource+0x170>
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d05c      	beq.n	800e5a6 <HAL_TIM_ConfigClockSource+0x15e>
 800e4ec:	2b10      	cmp	r3, #16
 800e4ee:	d05a      	beq.n	800e5a6 <HAL_TIM_ConfigClockSource+0x15e>
 800e4f0:	e062      	b.n	800e5b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e502:	f000 f989 	bl	800e818 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e514:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68ba      	ldr	r2, [r7, #8]
 800e51c:	609a      	str	r2, [r3, #8]
      break;
 800e51e:	e04f      	b.n	800e5c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e530:	f000 f972 	bl	800e818 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	689a      	ldr	r2, [r3, #8]
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e542:	609a      	str	r2, [r3, #8]
      break;
 800e544:	e03c      	b.n	800e5c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e552:	461a      	mov	r2, r3
 800e554:	f000 f8e4 	bl	800e720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2150      	movs	r1, #80	@ 0x50
 800e55e:	4618      	mov	r0, r3
 800e560:	f000 f93d 	bl	800e7de <TIM_ITRx_SetConfig>
      break;
 800e564:	e02c      	b.n	800e5c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e572:	461a      	mov	r2, r3
 800e574:	f000 f903 	bl	800e77e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2160      	movs	r1, #96	@ 0x60
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 f92d 	bl	800e7de <TIM_ITRx_SetConfig>
      break;
 800e584:	e01c      	b.n	800e5c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e592:	461a      	mov	r2, r3
 800e594:	f000 f8c4 	bl	800e720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	2140      	movs	r1, #64	@ 0x40
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 f91d 	bl	800e7de <TIM_ITRx_SetConfig>
      break;
 800e5a4:	e00c      	b.n	800e5c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	4610      	mov	r0, r2
 800e5b2:	f000 f914 	bl	800e7de <TIM_ITRx_SetConfig>
      break;
 800e5b6:	e003      	b.n	800e5c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	73fb      	strb	r3, [r7, #15]
      break;
 800e5bc:	e000      	b.n	800e5c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e5be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}

0800e5da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e5da:	b480      	push	{r7}
 800e5dc:	b083      	sub	sp, #12
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e5e2:	bf00      	nop
 800e5e4:	370c      	adds	r7, #12
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e5ee:	b480      	push	{r7}
 800e5f0:	b083      	sub	sp, #12
 800e5f2:	af00      	add	r7, sp, #0
 800e5f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e5f6:	bf00      	nop
 800e5f8:	370c      	adds	r7, #12
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e602:	b480      	push	{r7}
 800e604:	b083      	sub	sp, #12
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e60a:	bf00      	nop
 800e60c:	370c      	adds	r7, #12
 800e60e:	46bd      	mov	sp, r7
 800e610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e614:	4770      	bx	lr

0800e616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e616:	b480      	push	{r7}
 800e618:	b083      	sub	sp, #12
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e61e:	bf00      	nop
 800e620:	370c      	adds	r7, #12
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e62a:	b480      	push	{r7}
 800e62c:	b083      	sub	sp, #12
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e632:	bf00      	nop
 800e634:	370c      	adds	r7, #12
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
	...

0800e640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e640:	b480      	push	{r7}
 800e642:	b085      	sub	sp, #20
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a30      	ldr	r2, [pc, #192]	@ (800e714 <TIM_Base_SetConfig+0xd4>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d003      	beq.n	800e660 <TIM_Base_SetConfig+0x20>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e65e:	d108      	bne.n	800e672 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e666:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	4313      	orrs	r3, r2
 800e670:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4a27      	ldr	r2, [pc, #156]	@ (800e714 <TIM_Base_SetConfig+0xd4>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d00b      	beq.n	800e692 <TIM_Base_SetConfig+0x52>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e680:	d007      	beq.n	800e692 <TIM_Base_SetConfig+0x52>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	4a24      	ldr	r2, [pc, #144]	@ (800e718 <TIM_Base_SetConfig+0xd8>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d003      	beq.n	800e692 <TIM_Base_SetConfig+0x52>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	4a23      	ldr	r2, [pc, #140]	@ (800e71c <TIM_Base_SetConfig+0xdc>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d108      	bne.n	800e6a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	68fa      	ldr	r2, [r7, #12]
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	695b      	ldr	r3, [r3, #20]
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	68fa      	ldr	r2, [r7, #12]
 800e6b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	689a      	ldr	r2, [r3, #8]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4a12      	ldr	r2, [pc, #72]	@ (800e714 <TIM_Base_SetConfig+0xd4>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d007      	beq.n	800e6e0 <TIM_Base_SetConfig+0xa0>
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	4a11      	ldr	r2, [pc, #68]	@ (800e718 <TIM_Base_SetConfig+0xd8>)
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d003      	beq.n	800e6e0 <TIM_Base_SetConfig+0xa0>
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a10      	ldr	r2, [pc, #64]	@ (800e71c <TIM_Base_SetConfig+0xdc>)
 800e6dc:	4293      	cmp	r3, r2
 800e6de:	d103      	bne.n	800e6e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	691a      	ldr	r2, [r3, #16]
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	691b      	ldr	r3, [r3, #16]
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d105      	bne.n	800e706 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	f023 0201 	bic.w	r2, r3, #1
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	611a      	str	r2, [r3, #16]
  }
}
 800e706:	bf00      	nop
 800e708:	3714      	adds	r7, #20
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
 800e712:	bf00      	nop
 800e714:	40012c00 	.word	0x40012c00
 800e718:	40014400 	.word	0x40014400
 800e71c:	40014800 	.word	0x40014800

0800e720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e720:	b480      	push	{r7}
 800e722:	b087      	sub	sp, #28
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6a1b      	ldr	r3, [r3, #32]
 800e730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6a1b      	ldr	r3, [r3, #32]
 800e736:	f023 0201 	bic.w	r2, r3, #1
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	699b      	ldr	r3, [r3, #24]
 800e742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e74a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	011b      	lsls	r3, r3, #4
 800e750:	693a      	ldr	r2, [r7, #16]
 800e752:	4313      	orrs	r3, r2
 800e754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	f023 030a 	bic.w	r3, r3, #10
 800e75c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e75e:	697a      	ldr	r2, [r7, #20]
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	4313      	orrs	r3, r2
 800e764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	693a      	ldr	r2, [r7, #16]
 800e76a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	621a      	str	r2, [r3, #32]
}
 800e772:	bf00      	nop
 800e774:	371c      	adds	r7, #28
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr

0800e77e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e77e:	b480      	push	{r7}
 800e780:	b087      	sub	sp, #28
 800e782:	af00      	add	r7, sp, #0
 800e784:	60f8      	str	r0, [r7, #12]
 800e786:	60b9      	str	r1, [r7, #8]
 800e788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6a1b      	ldr	r3, [r3, #32]
 800e78e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	6a1b      	ldr	r3, [r3, #32]
 800e794:	f023 0210 	bic.w	r2, r3, #16
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	699b      	ldr	r3, [r3, #24]
 800e7a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e7a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	031b      	lsls	r3, r3, #12
 800e7ae:	693a      	ldr	r2, [r7, #16]
 800e7b0:	4313      	orrs	r3, r2
 800e7b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e7ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	011b      	lsls	r3, r3, #4
 800e7c0:	697a      	ldr	r2, [r7, #20]
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	693a      	ldr	r2, [r7, #16]
 800e7ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	697a      	ldr	r2, [r7, #20]
 800e7d0:	621a      	str	r2, [r3, #32]
}
 800e7d2:	bf00      	nop
 800e7d4:	371c      	adds	r7, #28
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b085      	sub	sp, #20
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	689b      	ldr	r3, [r3, #8]
 800e7ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800e7f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e7fa:	683a      	ldr	r2, [r7, #0]
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	4313      	orrs	r3, r2
 800e800:	f043 0307 	orr.w	r3, r3, #7
 800e804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	609a      	str	r2, [r3, #8]
}
 800e80c:	bf00      	nop
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e818:	b480      	push	{r7}
 800e81a:	b087      	sub	sp, #28
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
 800e824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	689b      	ldr	r3, [r3, #8]
 800e82a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	021a      	lsls	r2, r3, #8
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	431a      	orrs	r2, r3
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	4313      	orrs	r3, r2
 800e840:	697a      	ldr	r2, [r7, #20]
 800e842:	4313      	orrs	r3, r2
 800e844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	697a      	ldr	r2, [r7, #20]
 800e84a:	609a      	str	r2, [r3, #8]
}
 800e84c:	bf00      	nop
 800e84e:	371c      	adds	r7, #28
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr

0800e858 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e858:	b480      	push	{r7}
 800e85a:	b085      	sub	sp, #20
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e868:	2b01      	cmp	r3, #1
 800e86a:	d101      	bne.n	800e870 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e86c:	2302      	movs	r3, #2
 800e86e:	e04a      	b.n	800e906 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2201      	movs	r2, #1
 800e874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2202      	movs	r2, #2
 800e87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	689b      	ldr	r3, [r3, #8]
 800e88e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a1f      	ldr	r2, [pc, #124]	@ (800e914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d108      	bne.n	800e8ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800e8a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	68fa      	ldr	r2, [r7, #12]
 800e8a8:	4313      	orrs	r3, r2
 800e8aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e8b4:	683b      	ldr	r3, [r7, #0]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	68fa      	ldr	r2, [r7, #12]
 800e8ba:	4313      	orrs	r3, r2
 800e8bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	68fa      	ldr	r2, [r7, #12]
 800e8c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a12      	ldr	r2, [pc, #72]	@ (800e914 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	d004      	beq.n	800e8da <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8d8:	d10c      	bne.n	800e8f4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	68ba      	ldr	r2, [r7, #8]
 800e8e8:	4313      	orrs	r3, r2
 800e8ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e904:	2300      	movs	r3, #0
}
 800e906:	4618      	mov	r0, r3
 800e908:	3714      	adds	r7, #20
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr
 800e912:	bf00      	nop
 800e914:	40012c00 	.word	0x40012c00

0800e918 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e918:	b480      	push	{r7}
 800e91a:	b083      	sub	sp, #12
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr

0800e92c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e934:	bf00      	nop
 800e936:	370c      	adds	r7, #12
 800e938:	46bd      	mov	sp, r7
 800e93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93e:	4770      	bx	lr

0800e940 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e940:	b480      	push	{r7}
 800e942:	b083      	sub	sp, #12
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e948:	bf00      	nop
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <LL_RCC_GetUSARTClockSource>:
{
 800e954:	b480      	push	{r7}
 800e956:	b083      	sub	sp, #12
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800e95c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e960:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4013      	ands	r3, r2
}
 800e968:	4618      	mov	r0, r3
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <LL_RCC_GetLPUARTClockSource>:
{
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800e97c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e980:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4013      	ands	r3, r2
}
 800e988:	4618      	mov	r0, r3
 800e98a:	370c      	adds	r7, #12
 800e98c:	46bd      	mov	sp, r7
 800e98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e992:	4770      	bx	lr

0800e994 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b082      	sub	sp, #8
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d101      	bne.n	800e9a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e9a2:	2301      	movs	r3, #1
 800e9a4:	e042      	b.n	800ea2c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d106      	bne.n	800e9be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f7f7 fb4f 	bl	800605c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2224      	movs	r2, #36	@ 0x24
 800e9c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f022 0201 	bic.w	r2, r2, #1
 800e9d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d002      	beq.n	800e9e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f000 ff16 	bl	800f810 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 fceb 	bl	800f3c0 <UART_SetConfig>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b01      	cmp	r3, #1
 800e9ee:	d101      	bne.n	800e9f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e01b      	b.n	800ea2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	685a      	ldr	r2, [r3, #4]
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ea02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	689a      	ldr	r2, [r3, #8]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ea12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f042 0201 	orr.w	r2, r2, #1
 800ea22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f000 ff95 	bl	800f954 <UART_CheckIdleState>
 800ea2a:	4603      	mov	r3, r0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3708      	adds	r7, #8
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b08a      	sub	sp, #40	@ 0x28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	60f8      	str	r0, [r7, #12]
 800ea3c:	60b9      	str	r1, [r7, #8]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ea48:	2b20      	cmp	r3, #32
 800ea4a:	d137      	bne.n	800eabc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d002      	beq.n	800ea58 <HAL_UART_Receive_DMA+0x24>
 800ea52:	88fb      	ldrh	r3, [r7, #6]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d101      	bne.n	800ea5c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	e030      	b.n	800eabe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	4a18      	ldr	r2, [pc, #96]	@ (800eac8 <HAL_UART_Receive_DMA+0x94>)
 800ea68:	4293      	cmp	r3, r2
 800ea6a:	d01f      	beq.n	800eaac <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	685b      	ldr	r3, [r3, #4]
 800ea72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d018      	beq.n	800eaac <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	e853 3f00 	ldrex	r3, [r3]
 800ea86:	613b      	str	r3, [r7, #16]
   return(result);
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ea8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	461a      	mov	r2, r3
 800ea96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea98:	623b      	str	r3, [r7, #32]
 800ea9a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea9c:	69f9      	ldr	r1, [r7, #28]
 800ea9e:	6a3a      	ldr	r2, [r7, #32]
 800eaa0:	e841 2300 	strex	r3, r2, [r1]
 800eaa4:	61bb      	str	r3, [r7, #24]
   return(result);
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d1e6      	bne.n	800ea7a <HAL_UART_Receive_DMA+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800eaac:	88fb      	ldrh	r3, [r7, #6]
 800eaae:	461a      	mov	r2, r3
 800eab0:	68b9      	ldr	r1, [r7, #8]
 800eab2:	68f8      	ldr	r0, [r7, #12]
 800eab4:	f001 f866 	bl	800fb84 <UART_Start_Receive_DMA>
 800eab8:	4603      	mov	r3, r0
 800eaba:	e000      	b.n	800eabe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eabc:	2302      	movs	r3, #2
  }
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3728      	adds	r7, #40	@ 0x28
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop
 800eac8:	40008000 	.word	0x40008000

0800eacc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b0a0      	sub	sp, #128	@ 0x80
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eadc:	e853 3f00 	ldrex	r3, [r3]
 800eae0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800eae2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eae4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800eae8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800eaf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eaf4:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaf6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800eaf8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800eafa:	e841 2300 	strex	r3, r2, [r1]
 800eafe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800eb00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1e6      	bne.n	800ead4 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3308      	adds	r3, #8
 800eb0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800eb10:	e853 3f00 	ldrex	r3, [r3]
 800eb14:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800eb16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb18:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 800eb1c:	f023 0301 	bic.w	r3, r3, #1
 800eb20:	67bb      	str	r3, [r7, #120]	@ 0x78
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	3308      	adds	r3, #8
 800eb28:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800eb2a:	657a      	str	r2, [r7, #84]	@ 0x54
 800eb2c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800eb30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eb32:	e841 2300 	strex	r3, r2, [r1]
 800eb36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800eb38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d1e3      	bne.n	800eb06 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d118      	bne.n	800eb78 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb4e:	e853 3f00 	ldrex	r3, [r3]
 800eb52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800eb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb56:	f023 0310 	bic.w	r3, r3, #16
 800eb5a:	677b      	str	r3, [r7, #116]	@ 0x74
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	461a      	mov	r2, r3
 800eb62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800eb64:	643b      	str	r3, [r7, #64]	@ 0x40
 800eb66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800eb6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb6c:	e841 2300 	strex	r3, r2, [r1]
 800eb70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800eb72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d1e6      	bne.n	800eb46 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb82:	2b80      	cmp	r3, #128	@ 0x80
 800eb84:	d137      	bne.n	800ebf6 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	3308      	adds	r3, #8
 800eb8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb8e:	6a3b      	ldr	r3, [r7, #32]
 800eb90:	e853 3f00 	ldrex	r3, [r3]
 800eb94:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb9c:	673b      	str	r3, [r7, #112]	@ 0x70
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	3308      	adds	r3, #8
 800eba4:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800eba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800eba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ebac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ebae:	e841 2300 	strex	r3, r2, [r1]
 800ebb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d1e5      	bne.n	800eb86 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d019      	beq.n	800ebf6 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7f9 f815 	bl	8007bfe <HAL_DMA_Abort>
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d00d      	beq.n	800ebf6 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f9 f97a 	bl	8007ed8 <HAL_DMA_GetError>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b20      	cmp	r3, #32
 800ebe8:	d105      	bne.n	800ebf6 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2210      	movs	r2, #16
 800ebee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ebf2:	2303      	movs	r3, #3
 800ebf4:	e073      	b.n	800ecde <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec00:	2b40      	cmp	r3, #64	@ 0x40
 800ec02:	d13b      	bne.n	800ec7c <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	3308      	adds	r3, #8
 800ec0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	e853 3f00 	ldrex	r3, [r3]
 800ec12:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ec1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	3308      	adds	r3, #8
 800ec22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ec24:	61ba      	str	r2, [r7, #24]
 800ec26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec28:	6979      	ldr	r1, [r7, #20]
 800ec2a:	69ba      	ldr	r2, [r7, #24]
 800ec2c:	e841 2300 	strex	r3, r2, [r1]
 800ec30:	613b      	str	r3, [r7, #16]
   return(result);
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d1e5      	bne.n	800ec04 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d01c      	beq.n	800ec7c <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec48:	2200      	movs	r2, #0
 800ec4a:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec52:	4618      	mov	r0, r3
 800ec54:	f7f8 ffd3 	bl	8007bfe <HAL_DMA_Abort>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00e      	beq.n	800ec7c <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7f9 f937 	bl	8007ed8 <HAL_DMA_GetError>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	2b20      	cmp	r3, #32
 800ec6e:	d105      	bne.n	800ec7c <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2210      	movs	r2, #16
 800ec74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800ec78:	2303      	movs	r3, #3
 800ec7a:	e030      	b.n	800ecde <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2200      	movs	r2, #0
 800ec88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	220f      	movs	r2, #15
 800ec92:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec9c:	d107      	bne.n	800ecae <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	699a      	ldr	r2, [r3, #24]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f042 0210 	orr.w	r2, r2, #16
 800ecac:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	699a      	ldr	r2, [r3, #24]
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	f042 0208 	orr.w	r2, r2, #8
 800ecbc:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2220      	movs	r2, #32
 800ecc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2220      	movs	r2, #32
 800ecca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ecdc:	2300      	movs	r3, #0
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3780      	adds	r7, #128	@ 0x80
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
	...

0800ece8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b0ba      	sub	sp, #232	@ 0xe8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	69db      	ldr	r3, [r3, #28]
 800ecf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ed0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ed12:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ed16:	4013      	ands	r3, r2
 800ed18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ed1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d11b      	bne.n	800ed5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ed24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed28:	f003 0320 	and.w	r3, r3, #32
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d015      	beq.n	800ed5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ed30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed34:	f003 0320 	and.w	r3, r3, #32
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d105      	bne.n	800ed48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ed3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ed40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d009      	beq.n	800ed5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	f000 8300 	beq.w	800f352 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	4798      	blx	r3
      }
      return;
 800ed5a:	e2fa      	b.n	800f352 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ed5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f000 8123 	beq.w	800efac <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ed66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ed6a:	4b8d      	ldr	r3, [pc, #564]	@ (800efa0 <HAL_UART_IRQHandler+0x2b8>)
 800ed6c:	4013      	ands	r3, r2
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d106      	bne.n	800ed80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ed72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ed76:	4b8b      	ldr	r3, [pc, #556]	@ (800efa4 <HAL_UART_IRQHandler+0x2bc>)
 800ed78:	4013      	ands	r3, r2
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	f000 8116 	beq.w	800efac <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ed80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed84:	f003 0301 	and.w	r3, r3, #1
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d011      	beq.n	800edb0 <HAL_UART_IRQHandler+0xc8>
 800ed8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00b      	beq.n	800edb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2201      	movs	r2, #1
 800ed9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eda6:	f043 0201 	orr.w	r2, r3, #1
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800edb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800edb4:	f003 0302 	and.w	r3, r3, #2
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d011      	beq.n	800ede0 <HAL_UART_IRQHandler+0xf8>
 800edbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edc0:	f003 0301 	and.w	r3, r3, #1
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00b      	beq.n	800ede0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2202      	movs	r2, #2
 800edce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edd6:	f043 0204 	orr.w	r2, r3, #4
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ede0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ede4:	f003 0304 	and.w	r3, r3, #4
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d011      	beq.n	800ee10 <HAL_UART_IRQHandler+0x128>
 800edec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800edf0:	f003 0301 	and.w	r3, r3, #1
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00b      	beq.n	800ee10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	2204      	movs	r2, #4
 800edfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee06:	f043 0202 	orr.w	r2, r3, #2
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ee10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee14:	f003 0308 	and.w	r3, r3, #8
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d017      	beq.n	800ee4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ee1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee20:	f003 0320 	and.w	r3, r3, #32
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d105      	bne.n	800ee34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ee28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ee2c:	4b5c      	ldr	r3, [pc, #368]	@ (800efa0 <HAL_UART_IRQHandler+0x2b8>)
 800ee2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d00b      	beq.n	800ee4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	2208      	movs	r2, #8
 800ee3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee42:	f043 0208 	orr.w	r2, r3, #8
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ee4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d012      	beq.n	800ee7e <HAL_UART_IRQHandler+0x196>
 800ee58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00c      	beq.n	800ee7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ee6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee74:	f043 0220 	orr.w	r2, r3, #32
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	f000 8266 	beq.w	800f356 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ee8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ee8e:	f003 0320 	and.w	r3, r3, #32
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d013      	beq.n	800eebe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ee96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ee9a:	f003 0320 	and.w	r3, r3, #32
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d105      	bne.n	800eeae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800eea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800eea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d007      	beq.n	800eebe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d003      	beq.n	800eebe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eec4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689b      	ldr	r3, [r3, #8]
 800eece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eed2:	2b40      	cmp	r3, #64	@ 0x40
 800eed4:	d005      	beq.n	800eee2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800eed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eeda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d054      	beq.n	800ef8c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 ff35 	bl	800fd52 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eef2:	2b40      	cmp	r3, #64	@ 0x40
 800eef4:	d146      	bne.n	800ef84 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	3308      	adds	r3, #8
 800eefc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ef04:	e853 3f00 	ldrex	r3, [r3]
 800ef08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ef0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ef10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	3308      	adds	r3, #8
 800ef1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ef22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ef26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ef2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ef32:	e841 2300 	strex	r3, r2, [r1]
 800ef36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ef3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d1d9      	bne.n	800eef6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d017      	beq.n	800ef7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef52:	4a15      	ldr	r2, [pc, #84]	@ (800efa8 <HAL_UART_IRQHandler+0x2c0>)
 800ef54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f7f8 fead 	bl	8007cbc <HAL_DMA_Abort_IT>
 800ef62:	4603      	mov	r3, r0
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d019      	beq.n	800ef9c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ef6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ef76:	4610      	mov	r0, r2
 800ef78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef7a:	e00f      	b.n	800ef9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ef7c:	6878      	ldr	r0, [r7, #4]
 800ef7e:	f000 fa09 	bl	800f394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef82:	e00b      	b.n	800ef9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fa05 	bl	800f394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef8a:	e007      	b.n	800ef9c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f000 fa01 	bl	800f394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2200      	movs	r2, #0
 800ef96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ef9a:	e1dc      	b.n	800f356 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef9c:	bf00      	nop
    return;
 800ef9e:	e1da      	b.n	800f356 <HAL_UART_IRQHandler+0x66e>
 800efa0:	10000001 	.word	0x10000001
 800efa4:	04000120 	.word	0x04000120
 800efa8:	08010009 	.word	0x08010009

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	f040 8170 	bne.w	800f296 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800efb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800efba:	f003 0310 	and.w	r3, r3, #16
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	f000 8169 	beq.w	800f296 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800efc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800efc8:	f003 0310 	and.w	r3, r3, #16
 800efcc:	2b00      	cmp	r3, #0
 800efce:	f000 8162 	beq.w	800f296 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	2210      	movs	r2, #16
 800efd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efe4:	2b40      	cmp	r3, #64	@ 0x40
 800efe6:	f040 80d8 	bne.w	800f19a <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800eff8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800effc:	2b00      	cmp	r3, #0
 800effe:	f000 80af 	beq.w	800f160 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f008:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f00c:	429a      	cmp	r2, r3
 800f00e:	f080 80a7 	bcs.w	800f160 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f018:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f003 0320 	and.w	r3, r3, #32
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	f040 8087 	bne.w	800f13e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f038:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f03c:	e853 3f00 	ldrex	r3, [r3]
 800f040:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f044:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f04c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	461a      	mov	r2, r3
 800f056:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f05a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f05e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f062:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f066:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f06a:	e841 2300 	strex	r3, r2, [r1]
 800f06e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f072:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f076:	2b00      	cmp	r3, #0
 800f078:	d1da      	bne.n	800f030 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	3308      	adds	r3, #8
 800f080:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f084:	e853 3f00 	ldrex	r3, [r3]
 800f088:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f08a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f08c:	f023 0301 	bic.w	r3, r3, #1
 800f090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	3308      	adds	r3, #8
 800f09a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f09e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f0a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f0a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f0aa:	e841 2300 	strex	r3, r2, [r1]
 800f0ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f0b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d1e1      	bne.n	800f07a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f0c0:	e853 3f00 	ldrex	r3, [r3]
 800f0c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f0c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f0c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f0cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	3308      	adds	r3, #8
 800f0d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f0da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f0dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f0e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f0e2:	e841 2300 	strex	r3, r2, [r1]
 800f0e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f0e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d1e3      	bne.n	800f0b6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2220      	movs	r2, #32
 800f0f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f102:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f104:	e853 3f00 	ldrex	r3, [r3]
 800f108:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f10a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f10c:	f023 0310 	bic.w	r3, r3, #16
 800f110:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	461a      	mov	r2, r3
 800f11a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f11e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800f120:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f122:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f124:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f126:	e841 2300 	strex	r3, r2, [r1]
 800f12a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f12c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d1e4      	bne.n	800f0fc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f138:	4618      	mov	r0, r3
 800f13a:	f7f8 fd60 	bl	8007bfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2202      	movs	r2, #2
 800f142:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f150:	b29b      	uxth	r3, r3
 800f152:	1ad3      	subs	r3, r2, r3
 800f154:	b29b      	uxth	r3, r3
 800f156:	4619      	mov	r1, r3
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 f925 	bl	800f3a8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f15e:	e0fc      	b.n	800f35a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f16a:	429a      	cmp	r2, r3
 800f16c:	f040 80f5 	bne.w	800f35a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	f003 0320 	and.w	r3, r3, #32
 800f17e:	2b20      	cmp	r3, #32
 800f180:	f040 80eb 	bne.w	800f35a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2202      	movs	r2, #2
 800f188:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f190:	4619      	mov	r1, r3
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 f908 	bl	800f3a8 <HAL_UARTEx_RxEventCallback>
      return;
 800f198:	e0df      	b.n	800f35a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1a6:	b29b      	uxth	r3, r3
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f1b4:	b29b      	uxth	r3, r3
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 80d1 	beq.w	800f35e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800f1bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	f000 80cc 	beq.w	800f35e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ce:	e853 3f00 	ldrex	r3, [r3]
 800f1d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f1d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f1da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f1e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f1ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f1ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f1f0:	e841 2300 	strex	r3, r2, [r1]
 800f1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f1f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d1e4      	bne.n	800f1c6 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	3308      	adds	r3, #8
 800f202:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f206:	e853 3f00 	ldrex	r3, [r3]
 800f20a:	623b      	str	r3, [r7, #32]
   return(result);
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f212:	f023 0301 	bic.w	r3, r3, #1
 800f216:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	3308      	adds	r3, #8
 800f220:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f224:	633a      	str	r2, [r7, #48]	@ 0x30
 800f226:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f228:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f22a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f22c:	e841 2300 	strex	r3, r2, [r1]
 800f230:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f234:	2b00      	cmp	r3, #0
 800f236:	d1e1      	bne.n	800f1fc <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	2220      	movs	r2, #32
 800f23c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2200      	movs	r2, #0
 800f244:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2200      	movs	r2, #0
 800f24a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	e853 3f00 	ldrex	r3, [r3]
 800f258:	60fb      	str	r3, [r7, #12]
   return(result);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f023 0310 	bic.w	r3, r3, #16
 800f260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	461a      	mov	r2, r3
 800f26a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f26e:	61fb      	str	r3, [r7, #28]
 800f270:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f272:	69b9      	ldr	r1, [r7, #24]
 800f274:	69fa      	ldr	r2, [r7, #28]
 800f276:	e841 2300 	strex	r3, r2, [r1]
 800f27a:	617b      	str	r3, [r7, #20]
   return(result);
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d1e4      	bne.n	800f24c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2202      	movs	r2, #2
 800f286:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f88a 	bl	800f3a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f294:	e063      	b.n	800f35e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f29a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d00e      	beq.n	800f2c0 <HAL_UART_IRQHandler+0x5d8>
 800f2a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d008      	beq.n	800f2c0 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800f2b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 fee2 	bl	8010082 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f2be:	e051      	b.n	800f364 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f2c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d014      	beq.n	800f2f6 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f2cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d105      	bne.n	800f2e4 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f2d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d008      	beq.n	800f2f6 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d03a      	beq.n	800f362 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	4798      	blx	r3
    }
    return;
 800f2f4:	e035      	b.n	800f362 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f2f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d009      	beq.n	800f316 <HAL_UART_IRQHandler+0x62e>
 800f302:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d003      	beq.n	800f316 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 fe8c 	bl	801002c <UART_EndTransmit_IT>
    return;
 800f314:	e026      	b.n	800f364 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f31a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d009      	beq.n	800f336 <HAL_UART_IRQHandler+0x64e>
 800f322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f326:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d003      	beq.n	800f336 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 febb 	bl	80100aa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f334:	e016      	b.n	800f364 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f33a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d010      	beq.n	800f364 <HAL_UART_IRQHandler+0x67c>
 800f342:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f346:	2b00      	cmp	r3, #0
 800f348:	da0c      	bge.n	800f364 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fea3 	bl	8010096 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f350:	e008      	b.n	800f364 <HAL_UART_IRQHandler+0x67c>
      return;
 800f352:	bf00      	nop
 800f354:	e006      	b.n	800f364 <HAL_UART_IRQHandler+0x67c>
    return;
 800f356:	bf00      	nop
 800f358:	e004      	b.n	800f364 <HAL_UART_IRQHandler+0x67c>
      return;
 800f35a:	bf00      	nop
 800f35c:	e002      	b.n	800f364 <HAL_UART_IRQHandler+0x67c>
      return;
 800f35e:	bf00      	nop
 800f360:	e000      	b.n	800f364 <HAL_UART_IRQHandler+0x67c>
    return;
 800f362:	bf00      	nop
  }
}
 800f364:	37e8      	adds	r7, #232	@ 0xe8
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop

0800f36c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f374:	bf00      	nop
 800f376:	370c      	adds	r7, #12
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr

0800f380 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f388:	bf00      	nop
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f394:	b480      	push	{r7}
 800f396:	b083      	sub	sp, #12
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f39c:	bf00      	nop
 800f39e:	370c      	adds	r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a6:	4770      	bx	lr

0800f3a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f3b4:	bf00      	nop
 800f3b6:	370c      	adds	r7, #12
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f3c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f3c4:	b08c      	sub	sp, #48	@ 0x30
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	689a      	ldr	r2, [r3, #8]
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	431a      	orrs	r2, r3
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	695b      	ldr	r3, [r3, #20]
 800f3de:	431a      	orrs	r2, r3
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	69db      	ldr	r3, [r3, #28]
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	4baf      	ldr	r3, [pc, #700]	@ (800f6ac <UART_SetConfig+0x2ec>)
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	697a      	ldr	r2, [r7, #20]
 800f3f4:	6812      	ldr	r2, [r2, #0]
 800f3f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f3f8:	430b      	orrs	r3, r1
 800f3fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	685b      	ldr	r3, [r3, #4]
 800f402:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	68da      	ldr	r2, [r3, #12]
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	430a      	orrs	r2, r1
 800f410:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	699b      	ldr	r3, [r3, #24]
 800f416:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f418:	697b      	ldr	r3, [r7, #20]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	4aa4      	ldr	r2, [pc, #656]	@ (800f6b0 <UART_SetConfig+0x2f0>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d004      	beq.n	800f42c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	6a1b      	ldr	r3, [r3, #32]
 800f426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f428:	4313      	orrs	r3, r2
 800f42a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	689b      	ldr	r3, [r3, #8]
 800f432:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800f436:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800f43a:	697a      	ldr	r2, [r7, #20]
 800f43c:	6812      	ldr	r2, [r2, #0]
 800f43e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f440:	430b      	orrs	r3, r1
 800f442:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f44a:	f023 010f 	bic.w	r1, r3, #15
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	430a      	orrs	r2, r1
 800f458:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	4a95      	ldr	r2, [pc, #596]	@ (800f6b4 <UART_SetConfig+0x2f4>)
 800f460:	4293      	cmp	r3, r2
 800f462:	d125      	bne.n	800f4b0 <UART_SetConfig+0xf0>
 800f464:	2003      	movs	r0, #3
 800f466:	f7ff fa75 	bl	800e954 <LL_RCC_GetUSARTClockSource>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b03      	cmp	r3, #3
 800f46e:	d81b      	bhi.n	800f4a8 <UART_SetConfig+0xe8>
 800f470:	a201      	add	r2, pc, #4	@ (adr r2, 800f478 <UART_SetConfig+0xb8>)
 800f472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f476:	bf00      	nop
 800f478:	0800f489 	.word	0x0800f489
 800f47c:	0800f499 	.word	0x0800f499
 800f480:	0800f491 	.word	0x0800f491
 800f484:	0800f4a1 	.word	0x0800f4a1
 800f488:	2301      	movs	r3, #1
 800f48a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f48e:	e042      	b.n	800f516 <UART_SetConfig+0x156>
 800f490:	2302      	movs	r3, #2
 800f492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f496:	e03e      	b.n	800f516 <UART_SetConfig+0x156>
 800f498:	2304      	movs	r3, #4
 800f49a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f49e:	e03a      	b.n	800f516 <UART_SetConfig+0x156>
 800f4a0:	2308      	movs	r3, #8
 800f4a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4a6:	e036      	b.n	800f516 <UART_SetConfig+0x156>
 800f4a8:	2310      	movs	r3, #16
 800f4aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4ae:	e032      	b.n	800f516 <UART_SetConfig+0x156>
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a7e      	ldr	r2, [pc, #504]	@ (800f6b0 <UART_SetConfig+0x2f0>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d12a      	bne.n	800f510 <UART_SetConfig+0x150>
 800f4ba:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800f4be:	f7ff fa59 	bl	800e974 <LL_RCC_GetLPUARTClockSource>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f4c8:	d01a      	beq.n	800f500 <UART_SetConfig+0x140>
 800f4ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f4ce:	d81b      	bhi.n	800f508 <UART_SetConfig+0x148>
 800f4d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4d4:	d00c      	beq.n	800f4f0 <UART_SetConfig+0x130>
 800f4d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4da:	d815      	bhi.n	800f508 <UART_SetConfig+0x148>
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d003      	beq.n	800f4e8 <UART_SetConfig+0x128>
 800f4e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f4e4:	d008      	beq.n	800f4f8 <UART_SetConfig+0x138>
 800f4e6:	e00f      	b.n	800f508 <UART_SetConfig+0x148>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4ee:	e012      	b.n	800f516 <UART_SetConfig+0x156>
 800f4f0:	2302      	movs	r3, #2
 800f4f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4f6:	e00e      	b.n	800f516 <UART_SetConfig+0x156>
 800f4f8:	2304      	movs	r3, #4
 800f4fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f4fe:	e00a      	b.n	800f516 <UART_SetConfig+0x156>
 800f500:	2308      	movs	r3, #8
 800f502:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f506:	e006      	b.n	800f516 <UART_SetConfig+0x156>
 800f508:	2310      	movs	r3, #16
 800f50a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800f50e:	e002      	b.n	800f516 <UART_SetConfig+0x156>
 800f510:	2310      	movs	r3, #16
 800f512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	4a65      	ldr	r2, [pc, #404]	@ (800f6b0 <UART_SetConfig+0x2f0>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	f040 8097 	bne.w	800f650 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f522:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f526:	2b08      	cmp	r3, #8
 800f528:	d823      	bhi.n	800f572 <UART_SetConfig+0x1b2>
 800f52a:	a201      	add	r2, pc, #4	@ (adr r2, 800f530 <UART_SetConfig+0x170>)
 800f52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f530:	0800f555 	.word	0x0800f555
 800f534:	0800f573 	.word	0x0800f573
 800f538:	0800f55d 	.word	0x0800f55d
 800f53c:	0800f573 	.word	0x0800f573
 800f540:	0800f563 	.word	0x0800f563
 800f544:	0800f573 	.word	0x0800f573
 800f548:	0800f573 	.word	0x0800f573
 800f54c:	0800f573 	.word	0x0800f573
 800f550:	0800f56b 	.word	0x0800f56b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f554:	f7fc fc94 	bl	800be80 <HAL_RCC_GetPCLK1Freq>
 800f558:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f55a:	e010      	b.n	800f57e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f55c:	4b56      	ldr	r3, [pc, #344]	@ (800f6b8 <UART_SetConfig+0x2f8>)
 800f55e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f560:	e00d      	b.n	800f57e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f562:	f7fc fc0d 	bl	800bd80 <HAL_RCC_GetSysClockFreq>
 800f566:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f568:	e009      	b.n	800f57e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f56a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f56e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f570:	e005      	b.n	800f57e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800f572:	2300      	movs	r3, #0
 800f574:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f576:	2301      	movs	r3, #1
 800f578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f57c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f580:	2b00      	cmp	r3, #0
 800f582:	f000 812b 	beq.w	800f7dc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f58a:	4a4c      	ldr	r2, [pc, #304]	@ (800f6bc <UART_SetConfig+0x2fc>)
 800f58c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f590:	461a      	mov	r2, r3
 800f592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f594:	fbb3 f3f2 	udiv	r3, r3, r2
 800f598:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	685a      	ldr	r2, [r3, #4]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	005b      	lsls	r3, r3, #1
 800f5a2:	4413      	add	r3, r2
 800f5a4:	69ba      	ldr	r2, [r7, #24]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d305      	bcc.n	800f5b6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f5b0:	69ba      	ldr	r2, [r7, #24]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d903      	bls.n	800f5be <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f5bc:	e10e      	b.n	800f7dc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	60bb      	str	r3, [r7, #8]
 800f5c4:	60fa      	str	r2, [r7, #12]
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5ca:	4a3c      	ldr	r2, [pc, #240]	@ (800f6bc <UART_SetConfig+0x2fc>)
 800f5cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	603b      	str	r3, [r7, #0]
 800f5d6:	607a      	str	r2, [r7, #4]
 800f5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f5e0:	f7f1 fb2a 	bl	8000c38 <__aeabi_uldivmod>
 800f5e4:	4602      	mov	r2, r0
 800f5e6:	460b      	mov	r3, r1
 800f5e8:	4610      	mov	r0, r2
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	f04f 0200 	mov.w	r2, #0
 800f5f0:	f04f 0300 	mov.w	r3, #0
 800f5f4:	020b      	lsls	r3, r1, #8
 800f5f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f5fa:	0202      	lsls	r2, r0, #8
 800f5fc:	6979      	ldr	r1, [r7, #20]
 800f5fe:	6849      	ldr	r1, [r1, #4]
 800f600:	0849      	lsrs	r1, r1, #1
 800f602:	2000      	movs	r0, #0
 800f604:	460c      	mov	r4, r1
 800f606:	4605      	mov	r5, r0
 800f608:	eb12 0804 	adds.w	r8, r2, r4
 800f60c:	eb43 0905 	adc.w	r9, r3, r5
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	2200      	movs	r2, #0
 800f616:	469a      	mov	sl, r3
 800f618:	4693      	mov	fp, r2
 800f61a:	4652      	mov	r2, sl
 800f61c:	465b      	mov	r3, fp
 800f61e:	4640      	mov	r0, r8
 800f620:	4649      	mov	r1, r9
 800f622:	f7f1 fb09 	bl	8000c38 <__aeabi_uldivmod>
 800f626:	4602      	mov	r2, r0
 800f628:	460b      	mov	r3, r1
 800f62a:	4613      	mov	r3, r2
 800f62c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f62e:	6a3b      	ldr	r3, [r7, #32]
 800f630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f634:	d308      	bcc.n	800f648 <UART_SetConfig+0x288>
 800f636:	6a3b      	ldr	r3, [r7, #32]
 800f638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f63c:	d204      	bcs.n	800f648 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	6a3a      	ldr	r2, [r7, #32]
 800f644:	60da      	str	r2, [r3, #12]
 800f646:	e0c9      	b.n	800f7dc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800f648:	2301      	movs	r3, #1
 800f64a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f64e:	e0c5      	b.n	800f7dc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	69db      	ldr	r3, [r3, #28]
 800f654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f658:	d16d      	bne.n	800f736 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800f65a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f65e:	3b01      	subs	r3, #1
 800f660:	2b07      	cmp	r3, #7
 800f662:	d82d      	bhi.n	800f6c0 <UART_SetConfig+0x300>
 800f664:	a201      	add	r2, pc, #4	@ (adr r2, 800f66c <UART_SetConfig+0x2ac>)
 800f666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f66a:	bf00      	nop
 800f66c:	0800f68d 	.word	0x0800f68d
 800f670:	0800f695 	.word	0x0800f695
 800f674:	0800f6c1 	.word	0x0800f6c1
 800f678:	0800f69b 	.word	0x0800f69b
 800f67c:	0800f6c1 	.word	0x0800f6c1
 800f680:	0800f6c1 	.word	0x0800f6c1
 800f684:	0800f6c1 	.word	0x0800f6c1
 800f688:	0800f6a3 	.word	0x0800f6a3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f68c:	f7fc fc0e 	bl	800beac <HAL_RCC_GetPCLK2Freq>
 800f690:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f692:	e01b      	b.n	800f6cc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f694:	4b08      	ldr	r3, [pc, #32]	@ (800f6b8 <UART_SetConfig+0x2f8>)
 800f696:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f698:	e018      	b.n	800f6cc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f69a:	f7fc fb71 	bl	800bd80 <HAL_RCC_GetSysClockFreq>
 800f69e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f6a0:	e014      	b.n	800f6cc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f6a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f6a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f6a8:	e010      	b.n	800f6cc <UART_SetConfig+0x30c>
 800f6aa:	bf00      	nop
 800f6ac:	cfff69f3 	.word	0xcfff69f3
 800f6b0:	40008000 	.word	0x40008000
 800f6b4:	40013800 	.word	0x40013800
 800f6b8:	00f42400 	.word	0x00f42400
 800f6bc:	0801df94 	.word	0x0801df94
      default:
        pclk = 0U;
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f6ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f000 8084 	beq.w	800f7dc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f6d8:	4a4b      	ldr	r2, [pc, #300]	@ (800f808 <UART_SetConfig+0x448>)
 800f6da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6de:	461a      	mov	r2, r3
 800f6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6e6:	005a      	lsls	r2, r3, #1
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	085b      	lsrs	r3, r3, #1
 800f6ee:	441a      	add	r2, r3
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800f6f8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f6fa:	6a3b      	ldr	r3, [r7, #32]
 800f6fc:	2b0f      	cmp	r3, #15
 800f6fe:	d916      	bls.n	800f72e <UART_SetConfig+0x36e>
 800f700:	6a3b      	ldr	r3, [r7, #32]
 800f702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f706:	d212      	bcs.n	800f72e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f708:	6a3b      	ldr	r3, [r7, #32]
 800f70a:	b29b      	uxth	r3, r3
 800f70c:	f023 030f 	bic.w	r3, r3, #15
 800f710:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f712:	6a3b      	ldr	r3, [r7, #32]
 800f714:	085b      	lsrs	r3, r3, #1
 800f716:	b29b      	uxth	r3, r3
 800f718:	f003 0307 	and.w	r3, r3, #7
 800f71c:	b29a      	uxth	r2, r3
 800f71e:	8bfb      	ldrh	r3, [r7, #30]
 800f720:	4313      	orrs	r3, r2
 800f722:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	8bfa      	ldrh	r2, [r7, #30]
 800f72a:	60da      	str	r2, [r3, #12]
 800f72c:	e056      	b.n	800f7dc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800f734:	e052      	b.n	800f7dc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f736:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f73a:	3b01      	subs	r3, #1
 800f73c:	2b07      	cmp	r3, #7
 800f73e:	d822      	bhi.n	800f786 <UART_SetConfig+0x3c6>
 800f740:	a201      	add	r2, pc, #4	@ (adr r2, 800f748 <UART_SetConfig+0x388>)
 800f742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f746:	bf00      	nop
 800f748:	0800f769 	.word	0x0800f769
 800f74c:	0800f771 	.word	0x0800f771
 800f750:	0800f787 	.word	0x0800f787
 800f754:	0800f777 	.word	0x0800f777
 800f758:	0800f787 	.word	0x0800f787
 800f75c:	0800f787 	.word	0x0800f787
 800f760:	0800f787 	.word	0x0800f787
 800f764:	0800f77f 	.word	0x0800f77f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f768:	f7fc fba0 	bl	800beac <HAL_RCC_GetPCLK2Freq>
 800f76c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f76e:	e010      	b.n	800f792 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f770:	4b26      	ldr	r3, [pc, #152]	@ (800f80c <UART_SetConfig+0x44c>)
 800f772:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f774:	e00d      	b.n	800f792 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f776:	f7fc fb03 	bl	800bd80 <HAL_RCC_GetSysClockFreq>
 800f77a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800f77c:	e009      	b.n	800f792 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f77e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f782:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800f784:	e005      	b.n	800f792 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800f786:	2300      	movs	r3, #0
 800f788:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800f78a:	2301      	movs	r3, #1
 800f78c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800f790:	bf00      	nop
    }

    if (pclk != 0U)
 800f792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f794:	2b00      	cmp	r3, #0
 800f796:	d021      	beq.n	800f7dc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f79c:	4a1a      	ldr	r2, [pc, #104]	@ (800f808 <UART_SetConfig+0x448>)
 800f79e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f7a2:	461a      	mov	r2, r3
 800f7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	085b      	lsrs	r3, r3, #1
 800f7b0:	441a      	add	r2, r3
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f7bc:	6a3b      	ldr	r3, [r7, #32]
 800f7be:	2b0f      	cmp	r3, #15
 800f7c0:	d909      	bls.n	800f7d6 <UART_SetConfig+0x416>
 800f7c2:	6a3b      	ldr	r3, [r7, #32]
 800f7c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f7c8:	d205      	bcs.n	800f7d6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f7ca:	6a3b      	ldr	r3, [r7, #32]
 800f7cc:	b29a      	uxth	r2, r3
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	60da      	str	r2, [r3, #12]
 800f7d4:	e002      	b.n	800f7dc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800f7d6:	2301      	movs	r3, #1
 800f7d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	2201      	movs	r2, #1
 800f7e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800f7f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	3730      	adds	r7, #48	@ 0x30
 800f800:	46bd      	mov	sp, r7
 800f802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f806:	bf00      	nop
 800f808:	0801df94 	.word	0x0801df94
 800f80c:	00f42400 	.word	0x00f42400

0800f810 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f810:	b480      	push	{r7}
 800f812:	b083      	sub	sp, #12
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f81c:	f003 0308 	and.w	r3, r3, #8
 800f820:	2b00      	cmp	r3, #0
 800f822:	d00a      	beq.n	800f83a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	430a      	orrs	r2, r1
 800f838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f83e:	f003 0301 	and.w	r3, r3, #1
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00a      	beq.n	800f85c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	430a      	orrs	r2, r1
 800f85a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f860:	f003 0302 	and.w	r3, r3, #2
 800f864:	2b00      	cmp	r3, #0
 800f866:	d00a      	beq.n	800f87e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	685b      	ldr	r3, [r3, #4]
 800f86e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	430a      	orrs	r2, r1
 800f87c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f882:	f003 0304 	and.w	r3, r3, #4
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00a      	beq.n	800f8a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	430a      	orrs	r2, r1
 800f89e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8a4:	f003 0310 	and.w	r3, r3, #16
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d00a      	beq.n	800f8c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	430a      	orrs	r2, r1
 800f8c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8c6:	f003 0320 	and.w	r3, r3, #32
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00a      	beq.n	800f8e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	689b      	ldr	r3, [r3, #8]
 800f8d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	430a      	orrs	r2, r1
 800f8e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d01a      	beq.n	800f926 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	430a      	orrs	r2, r1
 800f904:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f90a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f90e:	d10a      	bne.n	800f926 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	430a      	orrs	r2, r1
 800f924:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f92a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d00a      	beq.n	800f948 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	685b      	ldr	r3, [r3, #4]
 800f938:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	430a      	orrs	r2, r1
 800f946:	605a      	str	r2, [r3, #4]
  }
}
 800f948:	bf00      	nop
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b098      	sub	sp, #96	@ 0x60
 800f958:	af02      	add	r7, sp, #8
 800f95a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2200      	movs	r2, #0
 800f960:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f964:	f7f6 fe5c 	bl	8006620 <HAL_GetTick>
 800f968:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f003 0308 	and.w	r3, r3, #8
 800f974:	2b08      	cmp	r3, #8
 800f976:	d12f      	bne.n	800f9d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f978:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f97c:	9300      	str	r3, [sp, #0]
 800f97e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f980:	2200      	movs	r2, #0
 800f982:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 f88e 	bl	800faa8 <UART_WaitOnFlagUntilTimeout>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d022      	beq.n	800f9d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f99a:	e853 3f00 	ldrex	r3, [r3]
 800f99e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9a6:	653b      	str	r3, [r7, #80]	@ 0x50
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f9b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f9b2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f9b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f9b8:	e841 2300 	strex	r3, r2, [r1]
 800f9bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f9be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d1e6      	bne.n	800f992 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2220      	movs	r2, #32
 800f9c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f9d4:	2303      	movs	r3, #3
 800f9d6:	e063      	b.n	800faa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f003 0304 	and.w	r3, r3, #4
 800f9e2:	2b04      	cmp	r3, #4
 800f9e4:	d149      	bne.n	800fa7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f9e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f9ea:	9300      	str	r3, [sp, #0]
 800f9ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	f000 f857 	bl	800faa8 <UART_WaitOnFlagUntilTimeout>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d03c      	beq.n	800fa7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa08:	e853 3f00 	ldrex	r3, [r3]
 800fa0c:	623b      	str	r3, [r7, #32]
   return(result);
 800fa0e:	6a3b      	ldr	r3, [r7, #32]
 800fa10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa1e:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fa24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fa26:	e841 2300 	strex	r3, r2, [r1]
 800fa2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fa2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d1e6      	bne.n	800fa00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	3308      	adds	r3, #8
 800fa38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	e853 3f00 	ldrex	r3, [r3]
 800fa40:	60fb      	str	r3, [r7, #12]
   return(result);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f023 0301 	bic.w	r3, r3, #1
 800fa48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	3308      	adds	r3, #8
 800fa50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fa52:	61fa      	str	r2, [r7, #28]
 800fa54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa56:	69b9      	ldr	r1, [r7, #24]
 800fa58:	69fa      	ldr	r2, [r7, #28]
 800fa5a:	e841 2300 	strex	r3, r2, [r1]
 800fa5e:	617b      	str	r3, [r7, #20]
   return(result);
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d1e5      	bne.n	800fa32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2220      	movs	r2, #32
 800fa6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fa76:	2303      	movs	r3, #3
 800fa78:	e012      	b.n	800faa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	2220      	movs	r2, #32
 800fa7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2220      	movs	r2, #32
 800fa86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2200      	movs	r2, #0
 800fa94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3758      	adds	r7, #88	@ 0x58
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	603b      	str	r3, [r7, #0]
 800fab4:	4613      	mov	r3, r2
 800fab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fab8:	e04f      	b.n	800fb5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fac0:	d04b      	beq.n	800fb5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fac2:	f7f6 fdad 	bl	8006620 <HAL_GetTick>
 800fac6:	4602      	mov	r2, r0
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	1ad3      	subs	r3, r2, r3
 800facc:	69ba      	ldr	r2, [r7, #24]
 800face:	429a      	cmp	r2, r3
 800fad0:	d302      	bcc.n	800fad8 <UART_WaitOnFlagUntilTimeout+0x30>
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d101      	bne.n	800fadc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fad8:	2303      	movs	r3, #3
 800fada:	e04e      	b.n	800fb7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f003 0304 	and.w	r3, r3, #4
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d037      	beq.n	800fb5a <UART_WaitOnFlagUntilTimeout+0xb2>
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2b80      	cmp	r3, #128	@ 0x80
 800faee:	d034      	beq.n	800fb5a <UART_WaitOnFlagUntilTimeout+0xb2>
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	2b40      	cmp	r3, #64	@ 0x40
 800faf4:	d031      	beq.n	800fb5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	69db      	ldr	r3, [r3, #28]
 800fafc:	f003 0308 	and.w	r3, r3, #8
 800fb00:	2b08      	cmp	r3, #8
 800fb02:	d110      	bne.n	800fb26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	2208      	movs	r2, #8
 800fb0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f000 f920 	bl	800fd52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	2208      	movs	r2, #8
 800fb16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800fb22:	2301      	movs	r3, #1
 800fb24:	e029      	b.n	800fb7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	69db      	ldr	r3, [r3, #28]
 800fb2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fb30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fb34:	d111      	bne.n	800fb5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fb3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f000 f906 	bl	800fd52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2220      	movs	r2, #32
 800fb4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800fb56:	2303      	movs	r3, #3
 800fb58:	e00f      	b.n	800fb7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	69da      	ldr	r2, [r3, #28]
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	4013      	ands	r3, r2
 800fb64:	68ba      	ldr	r2, [r7, #8]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	bf0c      	ite	eq
 800fb6a:	2301      	moveq	r3, #1
 800fb6c:	2300      	movne	r3, #0
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	461a      	mov	r2, r3
 800fb72:	79fb      	ldrb	r3, [r7, #7]
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d0a0      	beq.n	800faba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3710      	adds	r7, #16
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b096      	sub	sp, #88	@ 0x58
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	60f8      	str	r0, [r7, #12]
 800fb8c:	60b9      	str	r1, [r7, #8]
 800fb8e:	4613      	mov	r3, r2
 800fb90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	68ba      	ldr	r2, [r7, #8]
 800fb96:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	88fa      	ldrh	r2, [r7, #6]
 800fb9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2200      	movs	r2, #0
 800fba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2222      	movs	r2, #34	@ 0x22
 800fbac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d02d      	beq.n	800fc16 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbc0:	4a40      	ldr	r2, [pc, #256]	@ (800fcc4 <UART_Start_Receive_DMA+0x140>)
 800fbc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbca:	4a3f      	ldr	r2, [pc, #252]	@ (800fcc8 <UART_Start_Receive_DMA+0x144>)
 800fbcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbd4:	4a3d      	ldr	r2, [pc, #244]	@ (800fccc <UART_Start_Receive_DMA+0x148>)
 800fbd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbde:	2200      	movs	r2, #0
 800fbe0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	3324      	adds	r3, #36	@ 0x24
 800fbee:	4619      	mov	r1, r3
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	88fb      	ldrh	r3, [r7, #6]
 800fbf8:	f7f7 ff86 	bl	8007b08 <HAL_DMA_Start_IT>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d009      	beq.n	800fc16 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	2210      	movs	r2, #16
 800fc06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2220      	movs	r2, #32
 800fc0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800fc12:	2301      	movs	r3, #1
 800fc14:	e051      	b.n	800fcba <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	691b      	ldr	r3, [r3, #16]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d018      	beq.n	800fc50 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc26:	e853 3f00 	ldrex	r3, [r3]
 800fc2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fc32:	657b      	str	r3, [r7, #84]	@ 0x54
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	461a      	mov	r2, r3
 800fc3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fc3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc3e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800fc42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc44:	e841 2300 	strex	r3, r2, [r1]
 800fc48:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800fc4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d1e6      	bne.n	800fc1e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	3308      	adds	r3, #8
 800fc56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc5a:	e853 3f00 	ldrex	r3, [r3]
 800fc5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fc60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc62:	f043 0301 	orr.w	r3, r3, #1
 800fc66:	653b      	str	r3, [r7, #80]	@ 0x50
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	3308      	adds	r3, #8
 800fc6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fc70:	637a      	str	r2, [r7, #52]	@ 0x34
 800fc72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800fc76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc78:	e841 2300 	strex	r3, r2, [r1]
 800fc7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800fc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d1e5      	bne.n	800fc50 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3308      	adds	r3, #8
 800fc8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	e853 3f00 	ldrex	r3, [r3]
 800fc92:	613b      	str	r3, [r7, #16]
   return(result);
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	3308      	adds	r3, #8
 800fca2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fca4:	623a      	str	r2, [r7, #32]
 800fca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca8:	69f9      	ldr	r1, [r7, #28]
 800fcaa:	6a3a      	ldr	r2, [r7, #32]
 800fcac:	e841 2300 	strex	r3, r2, [r1]
 800fcb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d1e5      	bne.n	800fc84 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800fcb8:	2300      	movs	r3, #0
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	3758      	adds	r7, #88	@ 0x58
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bd80      	pop	{r7, pc}
 800fcc2:	bf00      	nop
 800fcc4:	0800fe1f 	.word	0x0800fe1f
 800fcc8:	0800ff4b 	.word	0x0800ff4b
 800fccc:	0800ff89 	.word	0x0800ff89

0800fcd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b08f      	sub	sp, #60	@ 0x3c
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcde:	6a3b      	ldr	r3, [r7, #32]
 800fce0:	e853 3f00 	ldrex	r3, [r3]
 800fce4:	61fb      	str	r3, [r7, #28]
   return(result);
 800fce6:	69fb      	ldr	r3, [r7, #28]
 800fce8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fcec:	637b      	str	r3, [r7, #52]	@ 0x34
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fcf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fcf8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fcfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fcfe:	e841 2300 	strex	r3, r2, [r1]
 800fd02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d1e6      	bne.n	800fcd8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	3308      	adds	r3, #8
 800fd10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	e853 3f00 	ldrex	r3, [r3]
 800fd18:	60bb      	str	r3, [r7, #8]
   return(result);
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800fd20:	633b      	str	r3, [r7, #48]	@ 0x30
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	3308      	adds	r3, #8
 800fd28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd2a:	61ba      	str	r2, [r7, #24]
 800fd2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd2e:	6979      	ldr	r1, [r7, #20]
 800fd30:	69ba      	ldr	r2, [r7, #24]
 800fd32:	e841 2300 	strex	r3, r2, [r1]
 800fd36:	613b      	str	r3, [r7, #16]
   return(result);
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d1e5      	bne.n	800fd0a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2220      	movs	r2, #32
 800fd42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800fd46:	bf00      	nop
 800fd48:	373c      	adds	r7, #60	@ 0x3c
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr

0800fd52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fd52:	b480      	push	{r7}
 800fd54:	b095      	sub	sp, #84	@ 0x54
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd62:	e853 3f00 	ldrex	r3, [r3]
 800fd66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fd6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	461a      	mov	r2, r3
 800fd76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd78:	643b      	str	r3, [r7, #64]	@ 0x40
 800fd7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fd7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fd80:	e841 2300 	strex	r3, r2, [r1]
 800fd84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fd86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d1e6      	bne.n	800fd5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	3308      	adds	r3, #8
 800fd92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd94:	6a3b      	ldr	r3, [r7, #32]
 800fd96:	e853 3f00 	ldrex	r3, [r3]
 800fd9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800fd9c:	69fb      	ldr	r3, [r7, #28]
 800fd9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fda2:	f023 0301 	bic.w	r3, r3, #1
 800fda6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	3308      	adds	r3, #8
 800fdae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fdb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fdb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fdb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdb8:	e841 2300 	strex	r3, r2, [r1]
 800fdbc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d1e3      	bne.n	800fd8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d118      	bne.n	800fdfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	e853 3f00 	ldrex	r3, [r3]
 800fdd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	f023 0310 	bic.w	r3, r3, #16
 800fde0:	647b      	str	r3, [r7, #68]	@ 0x44
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	461a      	mov	r2, r3
 800fde8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fdea:	61bb      	str	r3, [r7, #24]
 800fdec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdee:	6979      	ldr	r1, [r7, #20]
 800fdf0:	69ba      	ldr	r2, [r7, #24]
 800fdf2:	e841 2300 	strex	r3, r2, [r1]
 800fdf6:	613b      	str	r3, [r7, #16]
   return(result);
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d1e6      	bne.n	800fdcc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2220      	movs	r2, #32
 800fe02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800fe12:	bf00      	nop
 800fe14:	3754      	adds	r7, #84	@ 0x54
 800fe16:	46bd      	mov	sp, r7
 800fe18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1c:	4770      	bx	lr

0800fe1e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b09c      	sub	sp, #112	@ 0x70
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f003 0320 	and.w	r3, r3, #32
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d171      	bne.n	800ff1e <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800fe3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fe4a:	e853 3f00 	ldrex	r3, [r3]
 800fe4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fe50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fe56:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fe58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	461a      	mov	r2, r3
 800fe5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fe60:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fe62:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fe66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fe68:	e841 2300 	strex	r3, r2, [r1]
 800fe6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fe6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d1e6      	bne.n	800fe42 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	3308      	adds	r3, #8
 800fe7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe7e:	e853 3f00 	ldrex	r3, [r3]
 800fe82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fe84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe86:	f023 0301 	bic.w	r3, r3, #1
 800fe8a:	667b      	str	r3, [r7, #100]	@ 0x64
 800fe8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	3308      	adds	r3, #8
 800fe92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fe94:	647a      	str	r2, [r7, #68]	@ 0x44
 800fe96:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fe9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fe9c:	e841 2300 	strex	r3, r2, [r1]
 800fea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d1e5      	bne.n	800fe74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fea8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	3308      	adds	r3, #8
 800feae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feb2:	e853 3f00 	ldrex	r3, [r3]
 800feb6:	623b      	str	r3, [r7, #32]
   return(result);
 800feb8:	6a3b      	ldr	r3, [r7, #32]
 800feba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800febe:	663b      	str	r3, [r7, #96]	@ 0x60
 800fec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	3308      	adds	r3, #8
 800fec6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fec8:	633a      	str	r2, [r7, #48]	@ 0x30
 800feca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fecc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fed0:	e841 2300 	strex	r3, r2, [r1]
 800fed4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d1e5      	bne.n	800fea8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fedc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fede:	2220      	movs	r2, #32
 800fee0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d118      	bne.n	800ff1e <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	e853 3f00 	ldrex	r3, [r3]
 800fef8:	60fb      	str	r3, [r7, #12]
   return(result);
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	f023 0310 	bic.w	r3, r3, #16
 800ff00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ff02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	461a      	mov	r2, r3
 800ff08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ff0a:	61fb      	str	r3, [r7, #28]
 800ff0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff0e:	69b9      	ldr	r1, [r7, #24]
 800ff10:	69fa      	ldr	r2, [r7, #28]
 800ff12:	e841 2300 	strex	r3, r2, [r1]
 800ff16:	617b      	str	r3, [r7, #20]
   return(result);
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d1e6      	bne.n	800feec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ff1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ff20:	2200      	movs	r2, #0
 800ff22:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ff26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d107      	bne.n	800ff3c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ff2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff32:	4619      	mov	r1, r3
 800ff34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ff36:	f7ff fa37 	bl	800f3a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ff3a:	e002      	b.n	800ff42 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ff3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ff3e:	f7f6 f907 	bl	8006150 <HAL_UART_RxCpltCallback>
}
 800ff42:	bf00      	nop
 800ff44:	3770      	adds	r7, #112	@ 0x70
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}

0800ff4a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b084      	sub	sp, #16
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	2201      	movs	r2, #1
 800ff5c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d109      	bne.n	800ff7a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ff6c:	085b      	lsrs	r3, r3, #1
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	4619      	mov	r1, r3
 800ff72:	68f8      	ldr	r0, [r7, #12]
 800ff74:	f7ff fa18 	bl	800f3a8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ff78:	e002      	b.n	800ff80 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800ff7a:	68f8      	ldr	r0, [r7, #12]
 800ff7c:	f7ff fa00 	bl	800f380 <HAL_UART_RxHalfCpltCallback>
}
 800ff80:	bf00      	nop
 800ff82:	3710      	adds	r7, #16
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b086      	sub	sp, #24
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ff94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ff96:	697b      	ldr	r3, [r7, #20]
 800ff98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff9c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ffa4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	689b      	ldr	r3, [r3, #8]
 800ffac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ffb0:	2b80      	cmp	r3, #128	@ 0x80
 800ffb2:	d109      	bne.n	800ffc8 <UART_DMAError+0x40>
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	2b21      	cmp	r3, #33	@ 0x21
 800ffb8:	d106      	bne.n	800ffc8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ffc2:	6978      	ldr	r0, [r7, #20]
 800ffc4:	f7ff fe84 	bl	800fcd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffd2:	2b40      	cmp	r3, #64	@ 0x40
 800ffd4:	d109      	bne.n	800ffea <UART_DMAError+0x62>
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	2b22      	cmp	r3, #34	@ 0x22
 800ffda:	d106      	bne.n	800ffea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ffe4:	6978      	ldr	r0, [r7, #20]
 800ffe6:	f7ff feb4 	bl	800fd52 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fff0:	f043 0210 	orr.w	r2, r3, #16
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fffa:	6978      	ldr	r0, [r7, #20]
 800fffc:	f7ff f9ca 	bl	800f394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010000:	bf00      	nop
 8010002:	3718      	adds	r7, #24
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010014:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	2200      	movs	r2, #0
 801001a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	f7ff f9b8 	bl	800f394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010024:	bf00      	nop
 8010026:	3710      	adds	r7, #16
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}

0801002c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b088      	sub	sp, #32
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	e853 3f00 	ldrex	r3, [r3]
 8010040:	60bb      	str	r3, [r7, #8]
   return(result);
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010048:	61fb      	str	r3, [r7, #28]
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	461a      	mov	r2, r3
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	61bb      	str	r3, [r7, #24]
 8010054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010056:	6979      	ldr	r1, [r7, #20]
 8010058:	69ba      	ldr	r2, [r7, #24]
 801005a:	e841 2300 	strex	r3, r2, [r1]
 801005e:	613b      	str	r3, [r7, #16]
   return(result);
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d1e6      	bne.n	8010034 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2220      	movs	r2, #32
 801006a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7ff f979 	bl	800f36c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801007a:	bf00      	nop
 801007c:	3720      	adds	r7, #32
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010082:	b480      	push	{r7}
 8010084:	b083      	sub	sp, #12
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801008a:	bf00      	nop
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr

08010096 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010096:	b480      	push	{r7}
 8010098:	b083      	sub	sp, #12
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801009e:	bf00      	nop
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80100aa:	b480      	push	{r7}
 80100ac:	b083      	sub	sp, #12
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80100b2:	bf00      	nop
 80100b4:	370c      	adds	r7, #12
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr

080100be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80100be:	b480      	push	{r7}
 80100c0:	b085      	sub	sp, #20
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d101      	bne.n	80100d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80100d0:	2302      	movs	r3, #2
 80100d2:	e027      	b.n	8010124 <HAL_UARTEx_DisableFifoMode+0x66>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2224      	movs	r2, #36	@ 0x24
 80100e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	f022 0201 	bic.w	r2, r2, #1
 80100fa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010102:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2200      	movs	r2, #0
 8010108:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68fa      	ldr	r2, [r7, #12]
 8010110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2220      	movs	r2, #32
 8010116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	2200      	movs	r2, #0
 801011e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010122:	2300      	movs	r3, #0
}
 8010124:	4618      	mov	r0, r3
 8010126:	3714      	adds	r7, #20
 8010128:	46bd      	mov	sp, r7
 801012a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012e:	4770      	bx	lr

08010130 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010140:	2b01      	cmp	r3, #1
 8010142:	d101      	bne.n	8010148 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010144:	2302      	movs	r3, #2
 8010146:	e02d      	b.n	80101a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2201      	movs	r2, #1
 801014c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2224      	movs	r2, #36	@ 0x24
 8010154:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f022 0201 	bic.w	r2, r2, #1
 801016e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	430a      	orrs	r2, r1
 8010182:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 f84f 	bl	8010228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	2220      	movs	r2, #32
 8010196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	2200      	movs	r2, #0
 801019e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80101a2:	2300      	movs	r3, #0
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3710      	adds	r7, #16
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d101      	bne.n	80101c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80101c0:	2302      	movs	r3, #2
 80101c2:	e02d      	b.n	8010220 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2224      	movs	r2, #36	@ 0x24
 80101d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	f022 0201 	bic.w	r2, r2, #1
 80101ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	683a      	ldr	r2, [r7, #0]
 80101fc:	430a      	orrs	r2, r1
 80101fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 f811 	bl	8010228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	2220      	movs	r2, #32
 8010212:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2200      	movs	r2, #0
 801021a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801021e:	2300      	movs	r3, #0
}
 8010220:	4618      	mov	r0, r3
 8010222:	3710      	adds	r7, #16
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010228:	b480      	push	{r7}
 801022a:	b085      	sub	sp, #20
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010234:	2b00      	cmp	r3, #0
 8010236:	d108      	bne.n	801024a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2201      	movs	r2, #1
 801023c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2201      	movs	r2, #1
 8010244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010248:	e031      	b.n	80102ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801024a:	2308      	movs	r3, #8
 801024c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801024e:	2308      	movs	r3, #8
 8010250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	689b      	ldr	r3, [r3, #8]
 8010258:	0e5b      	lsrs	r3, r3, #25
 801025a:	b2db      	uxtb	r3, r3
 801025c:	f003 0307 	and.w	r3, r3, #7
 8010260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	689b      	ldr	r3, [r3, #8]
 8010268:	0f5b      	lsrs	r3, r3, #29
 801026a:	b2db      	uxtb	r3, r3
 801026c:	f003 0307 	and.w	r3, r3, #7
 8010270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010272:	7bbb      	ldrb	r3, [r7, #14]
 8010274:	7b3a      	ldrb	r2, [r7, #12]
 8010276:	4911      	ldr	r1, [pc, #68]	@ (80102bc <UARTEx_SetNbDataToProcess+0x94>)
 8010278:	5c8a      	ldrb	r2, [r1, r2]
 801027a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801027e:	7b3a      	ldrb	r2, [r7, #12]
 8010280:	490f      	ldr	r1, [pc, #60]	@ (80102c0 <UARTEx_SetNbDataToProcess+0x98>)
 8010282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010284:	fb93 f3f2 	sdiv	r3, r3, r2
 8010288:	b29a      	uxth	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010290:	7bfb      	ldrb	r3, [r7, #15]
 8010292:	7b7a      	ldrb	r2, [r7, #13]
 8010294:	4909      	ldr	r1, [pc, #36]	@ (80102bc <UARTEx_SetNbDataToProcess+0x94>)
 8010296:	5c8a      	ldrb	r2, [r1, r2]
 8010298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801029c:	7b7a      	ldrb	r2, [r7, #13]
 801029e:	4908      	ldr	r1, [pc, #32]	@ (80102c0 <UARTEx_SetNbDataToProcess+0x98>)
 80102a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80102a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80102a6:	b29a      	uxth	r2, r3
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80102ae:	bf00      	nop
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr
 80102ba:	bf00      	nop
 80102bc:	0801dfac 	.word	0x0801dfac
 80102c0:	0801dfb4 	.word	0x0801dfb4

080102c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80102c4:	b480      	push	{r7}
 80102c6:	b085      	sub	sp, #20
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80102d4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80102d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	b29a      	uxth	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80102e4:	2300      	movs	r3, #0
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3714      	adds	r7, #20
 80102ea:	46bd      	mov	sp, r7
 80102ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f0:	4770      	bx	lr

080102f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80102f2:	b480      	push	{r7}
 80102f4:	b085      	sub	sp, #20
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80102fa:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80102fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8010306:	b29a      	uxth	r2, r3
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	b29b      	uxth	r3, r3
 801030c:	43db      	mvns	r3, r3
 801030e:	b29b      	uxth	r3, r3
 8010310:	4013      	ands	r3, r2
 8010312:	b29a      	uxth	r2, r3
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 801031a:	2300      	movs	r3, #0
}
 801031c:	4618      	mov	r0, r3
 801031e:	3714      	adds	r7, #20
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr

08010328 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8010328:	b480      	push	{r7}
 801032a:	b085      	sub	sp, #20
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	1d3b      	adds	r3, r7, #4
 8010332:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2201      	movs	r2, #1
 801033a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2200      	movs	r2, #0
 8010342:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2200      	movs	r2, #0
 801034a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8010356:	2300      	movs	r3, #0
}
 8010358:	4618      	mov	r0, r3
 801035a:	3714      	adds	r7, #20
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr

08010364 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010364:	b480      	push	{r7}
 8010366:	b0a7      	sub	sp, #156	@ 0x9c
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801036e:	2300      	movs	r3, #0
 8010370:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	4413      	add	r3, r2
 801037e:	881b      	ldrh	r3, [r3, #0]
 8010380:	b29b      	uxth	r3, r3
 8010382:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8010386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801038a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	78db      	ldrb	r3, [r3, #3]
 8010392:	2b03      	cmp	r3, #3
 8010394:	d81f      	bhi.n	80103d6 <USB_ActivateEndpoint+0x72>
 8010396:	a201      	add	r2, pc, #4	@ (adr r2, 801039c <USB_ActivateEndpoint+0x38>)
 8010398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801039c:	080103ad 	.word	0x080103ad
 80103a0:	080103c9 	.word	0x080103c9
 80103a4:	080103df 	.word	0x080103df
 80103a8:	080103bb 	.word	0x080103bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80103ac:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80103b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80103b4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80103b8:	e012      	b.n	80103e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80103ba:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80103be:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80103c2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80103c6:	e00b      	b.n	80103e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80103c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80103cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80103d0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 80103d4:	e004      	b.n	80103e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80103d6:	2301      	movs	r3, #1
 80103d8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 80103dc:	e000      	b.n	80103e0 <USB_ActivateEndpoint+0x7c>
      break;
 80103de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	441a      	add	r2, r3
 80103ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80103ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80103f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80103f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80103fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80103fe:	b29b      	uxth	r3, r3
 8010400:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	009b      	lsls	r3, r3, #2
 801040a:	4413      	add	r3, r2
 801040c:	881b      	ldrh	r3, [r3, #0]
 801040e:	b29b      	uxth	r3, r3
 8010410:	b21b      	sxth	r3, r3
 8010412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801041a:	b21a      	sxth	r2, r3
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	781b      	ldrb	r3, [r3, #0]
 8010420:	b21b      	sxth	r3, r3
 8010422:	4313      	orrs	r3, r2
 8010424:	b21b      	sxth	r3, r3
 8010426:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	683b      	ldr	r3, [r7, #0]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	009b      	lsls	r3, r3, #2
 8010432:	441a      	add	r2, r3
 8010434:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8010438:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801043c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010440:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010444:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010448:	b29b      	uxth	r3, r3
 801044a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	7b1b      	ldrb	r3, [r3, #12]
 8010450:	2b00      	cmp	r3, #0
 8010452:	f040 8180 	bne.w	8010756 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	785b      	ldrb	r3, [r3, #1]
 801045a:	2b00      	cmp	r3, #0
 801045c:	f000 8084 	beq.w	8010568 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	61bb      	str	r3, [r7, #24]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801046a:	b29b      	uxth	r3, r3
 801046c:	461a      	mov	r2, r3
 801046e:	69bb      	ldr	r3, [r7, #24]
 8010470:	4413      	add	r3, r2
 8010472:	61bb      	str	r3, [r7, #24]
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	781b      	ldrb	r3, [r3, #0]
 8010478:	00da      	lsls	r2, r3, #3
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	4413      	add	r3, r2
 801047e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8010482:	617b      	str	r3, [r7, #20]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	88db      	ldrh	r3, [r3, #6]
 8010488:	085b      	lsrs	r3, r3, #1
 801048a:	b29b      	uxth	r3, r3
 801048c:	005b      	lsls	r3, r3, #1
 801048e:	b29a      	uxth	r2, r3
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	781b      	ldrb	r3, [r3, #0]
 801049a:	009b      	lsls	r3, r3, #2
 801049c:	4413      	add	r3, r2
 801049e:	881b      	ldrh	r3, [r3, #0]
 80104a0:	827b      	strh	r3, [r7, #18]
 80104a2:	8a7b      	ldrh	r3, [r7, #18]
 80104a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d01b      	beq.n	80104e4 <USB_ActivateEndpoint+0x180>
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	009b      	lsls	r3, r3, #2
 80104b4:	4413      	add	r3, r2
 80104b6:	881b      	ldrh	r3, [r3, #0]
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104c2:	823b      	strh	r3, [r7, #16]
 80104c4:	687a      	ldr	r2, [r7, #4]
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	781b      	ldrb	r3, [r3, #0]
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	441a      	add	r2, r3
 80104ce:	8a3b      	ldrh	r3, [r7, #16]
 80104d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80104d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80104d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80104dc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80104e4:	683b      	ldr	r3, [r7, #0]
 80104e6:	78db      	ldrb	r3, [r3, #3]
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d020      	beq.n	801052e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	683b      	ldr	r3, [r7, #0]
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	009b      	lsls	r3, r3, #2
 80104f4:	4413      	add	r3, r2
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80104fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010502:	81bb      	strh	r3, [r7, #12]
 8010504:	89bb      	ldrh	r3, [r7, #12]
 8010506:	f083 0320 	eor.w	r3, r3, #32
 801050a:	81bb      	strh	r3, [r7, #12]
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	009b      	lsls	r3, r3, #2
 8010514:	441a      	add	r2, r3
 8010516:	89bb      	ldrh	r3, [r7, #12]
 8010518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801051c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010528:	b29b      	uxth	r3, r3
 801052a:	8013      	strh	r3, [r2, #0]
 801052c:	e3f9      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801052e:	687a      	ldr	r2, [r7, #4]
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	009b      	lsls	r3, r3, #2
 8010536:	4413      	add	r3, r2
 8010538:	881b      	ldrh	r3, [r3, #0]
 801053a:	b29b      	uxth	r3, r3
 801053c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010540:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010544:	81fb      	strh	r3, [r7, #14]
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	009b      	lsls	r3, r3, #2
 801054e:	441a      	add	r2, r3
 8010550:	89fb      	ldrh	r3, [r7, #14]
 8010552:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010556:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801055a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801055e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010562:	b29b      	uxth	r3, r3
 8010564:	8013      	strh	r3, [r2, #0]
 8010566:	e3dc      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	633b      	str	r3, [r7, #48]	@ 0x30
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010572:	b29b      	uxth	r3, r3
 8010574:	461a      	mov	r2, r3
 8010576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010578:	4413      	add	r3, r2
 801057a:	633b      	str	r3, [r7, #48]	@ 0x30
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	00da      	lsls	r2, r3, #3
 8010582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010584:	4413      	add	r3, r2
 8010586:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801058a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	88db      	ldrh	r3, [r3, #6]
 8010590:	085b      	lsrs	r3, r3, #1
 8010592:	b29b      	uxth	r3, r3
 8010594:	005b      	lsls	r3, r3, #1
 8010596:	b29a      	uxth	r2, r3
 8010598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801059a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	461a      	mov	r2, r3
 80105aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ac:	4413      	add	r3, r2
 80105ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	00da      	lsls	r2, r3, #3
 80105b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b8:	4413      	add	r3, r2
 80105ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80105be:	627b      	str	r3, [r7, #36]	@ 0x24
 80105c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c2:	881b      	ldrh	r3, [r3, #0]
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80105ca:	b29a      	uxth	r2, r3
 80105cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ce:	801a      	strh	r2, [r3, #0]
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	691b      	ldr	r3, [r3, #16]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d10a      	bne.n	80105ee <USB_ActivateEndpoint+0x28a>
 80105d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105da:	881b      	ldrh	r3, [r3, #0]
 80105dc:	b29b      	uxth	r3, r3
 80105de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80105e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80105e6:	b29a      	uxth	r2, r3
 80105e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ea:	801a      	strh	r2, [r3, #0]
 80105ec:	e041      	b.n	8010672 <USB_ActivateEndpoint+0x30e>
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80105f4:	d81c      	bhi.n	8010630 <USB_ActivateEndpoint+0x2cc>
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	691b      	ldr	r3, [r3, #16]
 80105fa:	085b      	lsrs	r3, r3, #1
 80105fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010600:	683b      	ldr	r3, [r7, #0]
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	f003 0301 	and.w	r3, r3, #1
 8010608:	2b00      	cmp	r3, #0
 801060a:	d004      	beq.n	8010616 <USB_ActivateEndpoint+0x2b2>
 801060c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010610:	3301      	adds	r3, #1
 8010612:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010618:	881b      	ldrh	r3, [r3, #0]
 801061a:	b29a      	uxth	r2, r3
 801061c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8010620:	b29b      	uxth	r3, r3
 8010622:	029b      	lsls	r3, r3, #10
 8010624:	b29b      	uxth	r3, r3
 8010626:	4313      	orrs	r3, r2
 8010628:	b29a      	uxth	r2, r3
 801062a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801062c:	801a      	strh	r2, [r3, #0]
 801062e:	e020      	b.n	8010672 <USB_ActivateEndpoint+0x30e>
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	691b      	ldr	r3, [r3, #16]
 8010634:	095b      	lsrs	r3, r3, #5
 8010636:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	691b      	ldr	r3, [r3, #16]
 801063e:	f003 031f 	and.w	r3, r3, #31
 8010642:	2b00      	cmp	r3, #0
 8010644:	d104      	bne.n	8010650 <USB_ActivateEndpoint+0x2ec>
 8010646:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801064a:	3b01      	subs	r3, #1
 801064c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010652:	881b      	ldrh	r3, [r3, #0]
 8010654:	b29a      	uxth	r2, r3
 8010656:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801065a:	b29b      	uxth	r3, r3
 801065c:	029b      	lsls	r3, r3, #10
 801065e:	b29b      	uxth	r3, r3
 8010660:	4313      	orrs	r3, r2
 8010662:	b29b      	uxth	r3, r3
 8010664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801066c:	b29a      	uxth	r2, r3
 801066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010670:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4413      	add	r3, r2
 801067c:	881b      	ldrh	r3, [r3, #0]
 801067e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8010680:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010686:	2b00      	cmp	r3, #0
 8010688:	d01b      	beq.n	80106c2 <USB_ActivateEndpoint+0x35e>
 801068a:	687a      	ldr	r2, [r7, #4]
 801068c:	683b      	ldr	r3, [r7, #0]
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	009b      	lsls	r3, r3, #2
 8010692:	4413      	add	r3, r2
 8010694:	881b      	ldrh	r3, [r3, #0]
 8010696:	b29b      	uxth	r3, r3
 8010698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801069c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106a0:	843b      	strh	r3, [r7, #32]
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	009b      	lsls	r3, r3, #2
 80106aa:	441a      	add	r2, r3
 80106ac:	8c3b      	ldrh	r3, [r7, #32]
 80106ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80106b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80106b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80106ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106be:	b29b      	uxth	r3, r3
 80106c0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d124      	bne.n	8010714 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	4413      	add	r3, r2
 80106d4:	881b      	ldrh	r3, [r3, #0]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80106dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80106e0:	83bb      	strh	r3, [r7, #28]
 80106e2:	8bbb      	ldrh	r3, [r7, #28]
 80106e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80106e8:	83bb      	strh	r3, [r7, #28]
 80106ea:	8bbb      	ldrh	r3, [r7, #28]
 80106ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80106f0:	83bb      	strh	r3, [r7, #28]
 80106f2:	687a      	ldr	r2, [r7, #4]
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	441a      	add	r2, r3
 80106fc:	8bbb      	ldrh	r3, [r7, #28]
 80106fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801070a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801070e:	b29b      	uxth	r3, r3
 8010710:	8013      	strh	r3, [r2, #0]
 8010712:	e306      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8010714:	687a      	ldr	r2, [r7, #4]
 8010716:	683b      	ldr	r3, [r7, #0]
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	4413      	add	r3, r2
 801071e:	881b      	ldrh	r3, [r3, #0]
 8010720:	b29b      	uxth	r3, r3
 8010722:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010726:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801072a:	83fb      	strh	r3, [r7, #30]
 801072c:	8bfb      	ldrh	r3, [r7, #30]
 801072e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010732:	83fb      	strh	r3, [r7, #30]
 8010734:	687a      	ldr	r2, [r7, #4]
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	009b      	lsls	r3, r3, #2
 801073c:	441a      	add	r2, r3
 801073e:	8bfb      	ldrh	r3, [r7, #30]
 8010740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801074c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010750:	b29b      	uxth	r3, r3
 8010752:	8013      	strh	r3, [r2, #0]
 8010754:	e2e5      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	78db      	ldrb	r3, [r3, #3]
 801075a:	2b02      	cmp	r3, #2
 801075c:	d11e      	bne.n	801079c <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801075e:	687a      	ldr	r2, [r7, #4]
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	009b      	lsls	r3, r3, #2
 8010766:	4413      	add	r3, r2
 8010768:	881b      	ldrh	r3, [r3, #0]
 801076a:	b29b      	uxth	r3, r3
 801076c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010774:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	441a      	add	r2, r3
 8010782:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8010786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 801078a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801078e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8010792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010796:	b29b      	uxth	r3, r3
 8010798:	8013      	strh	r3, [r2, #0]
 801079a:	e01d      	b.n	80107d8 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	683b      	ldr	r3, [r7, #0]
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	4413      	add	r3, r2
 80107a6:	881b      	ldrh	r3, [r3, #0]
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80107ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80107b2:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	781b      	ldrb	r3, [r3, #0]
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	441a      	add	r2, r3
 80107c0:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80107c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80107c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80107cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80107d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107d4:	b29b      	uxth	r3, r3
 80107d6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80107e2:	b29b      	uxth	r3, r3
 80107e4:	461a      	mov	r2, r3
 80107e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107e8:	4413      	add	r3, r2
 80107ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	781b      	ldrb	r3, [r3, #0]
 80107f0:	00da      	lsls	r2, r3, #3
 80107f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80107f4:	4413      	add	r3, r2
 80107f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80107fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80107fc:	683b      	ldr	r3, [r7, #0]
 80107fe:	891b      	ldrh	r3, [r3, #8]
 8010800:	085b      	lsrs	r3, r3, #1
 8010802:	b29b      	uxth	r3, r3
 8010804:	005b      	lsls	r3, r3, #1
 8010806:	b29a      	uxth	r2, r3
 8010808:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801080a:	801a      	strh	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010816:	b29b      	uxth	r3, r3
 8010818:	461a      	mov	r2, r3
 801081a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801081c:	4413      	add	r3, r2
 801081e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	00da      	lsls	r2, r3, #3
 8010826:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010828:	4413      	add	r3, r2
 801082a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 801082e:	673b      	str	r3, [r7, #112]	@ 0x70
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	895b      	ldrh	r3, [r3, #10]
 8010834:	085b      	lsrs	r3, r3, #1
 8010836:	b29b      	uxth	r3, r3
 8010838:	005b      	lsls	r3, r3, #1
 801083a:	b29a      	uxth	r2, r3
 801083c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801083e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	785b      	ldrb	r3, [r3, #1]
 8010844:	2b00      	cmp	r3, #0
 8010846:	f040 81af 	bne.w	8010ba8 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801084a:	687a      	ldr	r2, [r7, #4]
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	781b      	ldrb	r3, [r3, #0]
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	4413      	add	r3, r2
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801085a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 801085e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010862:	2b00      	cmp	r3, #0
 8010864:	d01d      	beq.n	80108a2 <USB_ActivateEndpoint+0x53e>
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	009b      	lsls	r3, r3, #2
 801086e:	4413      	add	r3, r2
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	b29b      	uxth	r3, r3
 8010874:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010878:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801087c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8010880:	687a      	ldr	r2, [r7, #4]
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	781b      	ldrb	r3, [r3, #0]
 8010886:	009b      	lsls	r3, r3, #2
 8010888:	441a      	add	r2, r3
 801088a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801088e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010892:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010896:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 801089a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801089e:	b29b      	uxth	r3, r3
 80108a0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80108a2:	687a      	ldr	r2, [r7, #4]
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	009b      	lsls	r3, r3, #2
 80108aa:	4413      	add	r3, r2
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80108b2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80108b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d01d      	beq.n	80108fa <USB_ActivateEndpoint+0x596>
 80108be:	687a      	ldr	r2, [r7, #4]
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	4413      	add	r3, r2
 80108c8:	881b      	ldrh	r3, [r3, #0]
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80108d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80108d4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	009b      	lsls	r3, r3, #2
 80108e0:	441a      	add	r2, r3
 80108e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80108e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80108ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80108ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80108f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80108f6:	b29b      	uxth	r3, r3
 80108f8:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	785b      	ldrb	r3, [r3, #1]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d16b      	bne.n	80109da <USB_ActivateEndpoint+0x676>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801090c:	b29b      	uxth	r3, r3
 801090e:	461a      	mov	r2, r3
 8010910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010912:	4413      	add	r3, r2
 8010914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	00da      	lsls	r2, r3, #3
 801091c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801091e:	4413      	add	r3, r2
 8010920:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010924:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010928:	881b      	ldrh	r3, [r3, #0]
 801092a:	b29b      	uxth	r3, r3
 801092c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010930:	b29a      	uxth	r2, r3
 8010932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010934:	801a      	strh	r2, [r3, #0]
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	691b      	ldr	r3, [r3, #16]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d10a      	bne.n	8010954 <USB_ActivateEndpoint+0x5f0>
 801093e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010940:	881b      	ldrh	r3, [r3, #0]
 8010942:	b29b      	uxth	r3, r3
 8010944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801094c:	b29a      	uxth	r2, r3
 801094e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010950:	801a      	strh	r2, [r3, #0]
 8010952:	e05d      	b.n	8010a10 <USB_ActivateEndpoint+0x6ac>
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	2b3e      	cmp	r3, #62	@ 0x3e
 801095a:	d81c      	bhi.n	8010996 <USB_ActivateEndpoint+0x632>
 801095c:	683b      	ldr	r3, [r7, #0]
 801095e:	691b      	ldr	r3, [r3, #16]
 8010960:	085b      	lsrs	r3, r3, #1
 8010962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	691b      	ldr	r3, [r3, #16]
 801096a:	f003 0301 	and.w	r3, r3, #1
 801096e:	2b00      	cmp	r3, #0
 8010970:	d004      	beq.n	801097c <USB_ActivateEndpoint+0x618>
 8010972:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010976:	3301      	adds	r3, #1
 8010978:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801097c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801097e:	881b      	ldrh	r3, [r3, #0]
 8010980:	b29a      	uxth	r2, r3
 8010982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010986:	b29b      	uxth	r3, r3
 8010988:	029b      	lsls	r3, r3, #10
 801098a:	b29b      	uxth	r3, r3
 801098c:	4313      	orrs	r3, r2
 801098e:	b29a      	uxth	r2, r3
 8010990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010992:	801a      	strh	r2, [r3, #0]
 8010994:	e03c      	b.n	8010a10 <USB_ActivateEndpoint+0x6ac>
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	691b      	ldr	r3, [r3, #16]
 801099a:	095b      	lsrs	r3, r3, #5
 801099c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	691b      	ldr	r3, [r3, #16]
 80109a4:	f003 031f 	and.w	r3, r3, #31
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d104      	bne.n	80109b6 <USB_ActivateEndpoint+0x652>
 80109ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80109b0:	3b01      	subs	r3, #1
 80109b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80109b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109b8:	881b      	ldrh	r3, [r3, #0]
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	029b      	lsls	r3, r3, #10
 80109c4:	b29b      	uxth	r3, r3
 80109c6:	4313      	orrs	r3, r2
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80109ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80109d2:	b29a      	uxth	r2, r3
 80109d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80109d6:	801a      	strh	r2, [r3, #0]
 80109d8:	e01a      	b.n	8010a10 <USB_ActivateEndpoint+0x6ac>
 80109da:	683b      	ldr	r3, [r7, #0]
 80109dc:	785b      	ldrb	r3, [r3, #1]
 80109de:	2b01      	cmp	r3, #1
 80109e0:	d116      	bne.n	8010a10 <USB_ActivateEndpoint+0x6ac>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80109ec:	b29b      	uxth	r3, r3
 80109ee:	461a      	mov	r2, r3
 80109f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109f2:	4413      	add	r3, r2
 80109f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80109f6:	683b      	ldr	r3, [r7, #0]
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	00da      	lsls	r2, r3, #3
 80109fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109fe:	4413      	add	r3, r2
 8010a00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8010a04:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a06:	683b      	ldr	r3, [r7, #0]
 8010a08:	691b      	ldr	r3, [r3, #16]
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a0e:	801a      	strh	r2, [r3, #0]
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a14:	683b      	ldr	r3, [r7, #0]
 8010a16:	785b      	ldrb	r3, [r3, #1]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d16b      	bne.n	8010af4 <USB_ActivateEndpoint+0x790>
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	461a      	mov	r2, r3
 8010a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a2c:	4413      	add	r3, r2
 8010a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010a30:	683b      	ldr	r3, [r7, #0]
 8010a32:	781b      	ldrb	r3, [r3, #0]
 8010a34:	00da      	lsls	r2, r3, #3
 8010a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a38:	4413      	add	r3, r2
 8010a3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a42:	881b      	ldrh	r3, [r3, #0]
 8010a44:	b29b      	uxth	r3, r3
 8010a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a4a:	b29a      	uxth	r2, r3
 8010a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a4e:	801a      	strh	r2, [r3, #0]
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	691b      	ldr	r3, [r3, #16]
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d10a      	bne.n	8010a6e <USB_ActivateEndpoint+0x70a>
 8010a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a5a:	881b      	ldrh	r3, [r3, #0]
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6a:	801a      	strh	r2, [r3, #0]
 8010a6c:	e05b      	b.n	8010b26 <USB_ActivateEndpoint+0x7c2>
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	691b      	ldr	r3, [r3, #16]
 8010a72:	2b3e      	cmp	r3, #62	@ 0x3e
 8010a74:	d81c      	bhi.n	8010ab0 <USB_ActivateEndpoint+0x74c>
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	691b      	ldr	r3, [r3, #16]
 8010a7a:	085b      	lsrs	r3, r3, #1
 8010a7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	691b      	ldr	r3, [r3, #16]
 8010a84:	f003 0301 	and.w	r3, r3, #1
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d004      	beq.n	8010a96 <USB_ActivateEndpoint+0x732>
 8010a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010a90:	3301      	adds	r3, #1
 8010a92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	029b      	lsls	r3, r3, #10
 8010aa4:	b29b      	uxth	r3, r3
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	b29a      	uxth	r2, r3
 8010aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aac:	801a      	strh	r2, [r3, #0]
 8010aae:	e03a      	b.n	8010b26 <USB_ActivateEndpoint+0x7c2>
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	095b      	lsrs	r3, r3, #5
 8010ab6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	691b      	ldr	r3, [r3, #16]
 8010abe:	f003 031f 	and.w	r3, r3, #31
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d104      	bne.n	8010ad0 <USB_ActivateEndpoint+0x76c>
 8010ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010aca:	3b01      	subs	r3, #1
 8010acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ad2:	881b      	ldrh	r3, [r3, #0]
 8010ad4:	b29a      	uxth	r2, r3
 8010ad6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	029b      	lsls	r3, r3, #10
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010aec:	b29a      	uxth	r2, r3
 8010aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010af0:	801a      	strh	r2, [r3, #0]
 8010af2:	e018      	b.n	8010b26 <USB_ActivateEndpoint+0x7c2>
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	785b      	ldrb	r3, [r3, #1]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d114      	bne.n	8010b26 <USB_ActivateEndpoint+0x7c2>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	461a      	mov	r2, r3
 8010b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b08:	4413      	add	r3, r2
 8010b0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	781b      	ldrb	r3, [r3, #0]
 8010b10:	00da      	lsls	r2, r3, #3
 8010b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b14:	4413      	add	r3, r2
 8010b16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8010b1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	691b      	ldr	r3, [r3, #16]
 8010b20:	b29a      	uxth	r2, r3
 8010b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b24:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8010b26:	687a      	ldr	r2, [r7, #4]
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	009b      	lsls	r3, r3, #2
 8010b2e:	4413      	add	r3, r2
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	b29b      	uxth	r3, r3
 8010b34:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010b38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010b3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010b3e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b40:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8010b44:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010b46:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b48:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8010b4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010b4e:	687a      	ldr	r2, [r7, #4]
 8010b50:	683b      	ldr	r3, [r7, #0]
 8010b52:	781b      	ldrb	r3, [r3, #0]
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	441a      	add	r2, r3
 8010b58:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010b5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010b62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	683b      	ldr	r3, [r7, #0]
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	4413      	add	r3, r2
 8010b78:	881b      	ldrh	r3, [r3, #0]
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010b80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b84:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8010b86:	687a      	ldr	r2, [r7, #4]
 8010b88:	683b      	ldr	r3, [r7, #0]
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	441a      	add	r2, r3
 8010b90:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010b92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	8013      	strh	r3, [r2, #0]
 8010ba6:	e0bc      	b.n	8010d22 <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	781b      	ldrb	r3, [r3, #0]
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	4413      	add	r3, r2
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8010bb8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8010bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d01d      	beq.n	8010c00 <USB_ActivateEndpoint+0x89c>
 8010bc4:	687a      	ldr	r2, [r7, #4]
 8010bc6:	683b      	ldr	r3, [r7, #0]
 8010bc8:	781b      	ldrb	r3, [r3, #0]
 8010bca:	009b      	lsls	r3, r3, #2
 8010bcc:	4413      	add	r3, r2
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010bda:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	441a      	add	r2, r3
 8010be8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8010bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010bf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010bfc:	b29b      	uxth	r3, r3
 8010bfe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010c00:	687a      	ldr	r2, [r7, #4]
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	4413      	add	r3, r2
 8010c0a:	881b      	ldrh	r3, [r3, #0]
 8010c0c:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8010c10:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8010c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d01d      	beq.n	8010c58 <USB_ActivateEndpoint+0x8f4>
 8010c1c:	687a      	ldr	r2, [r7, #4]
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	009b      	lsls	r3, r3, #2
 8010c24:	4413      	add	r3, r2
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010c32:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8010c36:	687a      	ldr	r2, [r7, #4]
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	009b      	lsls	r3, r3, #2
 8010c3e:	441a      	add	r2, r3
 8010c40:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8010c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c50:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	78db      	ldrb	r3, [r3, #3]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	d024      	beq.n	8010caa <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8010c60:	687a      	ldr	r2, [r7, #4]
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	781b      	ldrb	r3, [r3, #0]
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	4413      	add	r3, r2
 8010c6a:	881b      	ldrh	r3, [r3, #0]
 8010c6c:	b29b      	uxth	r3, r3
 8010c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010c76:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010c7a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010c7e:	f083 0320 	eor.w	r3, r3, #32
 8010c82:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8010c86:	687a      	ldr	r2, [r7, #4]
 8010c88:	683b      	ldr	r3, [r7, #0]
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	009b      	lsls	r3, r3, #2
 8010c8e:	441a      	add	r2, r3
 8010c90:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8010c94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010c98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010ca0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	8013      	strh	r3, [r2, #0]
 8010ca8:	e01d      	b.n	8010ce6 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	683b      	ldr	r3, [r7, #0]
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	4413      	add	r3, r2
 8010cb4:	881b      	ldrh	r3, [r3, #0]
 8010cb6:	b29b      	uxth	r3, r3
 8010cb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010cc0:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	441a      	add	r2, r3
 8010cce:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8010cd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010cd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010cda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010cde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010ce2:	b29b      	uxth	r3, r3
 8010ce4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010ce6:	687a      	ldr	r2, [r7, #4]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	781b      	ldrb	r3, [r3, #0]
 8010cec:	009b      	lsls	r3, r3, #2
 8010cee:	4413      	add	r3, r2
 8010cf0:	881b      	ldrh	r3, [r3, #0]
 8010cf2:	b29b      	uxth	r3, r3
 8010cf4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010cfc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	781b      	ldrb	r3, [r3, #0]
 8010d06:	009b      	lsls	r3, r3, #2
 8010d08:	441a      	add	r2, r3
 8010d0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8010d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8010d22:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	379c      	adds	r7, #156	@ 0x9c
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d30:	4770      	bx	lr
 8010d32:	bf00      	nop

08010d34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010d34:	b480      	push	{r7}
 8010d36:	b08d      	sub	sp, #52	@ 0x34
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
 8010d3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	7b1b      	ldrb	r3, [r3, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	f040 808e 	bne.w	8010e64 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	785b      	ldrb	r3, [r3, #1]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d044      	beq.n	8010dda <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	781b      	ldrb	r3, [r3, #0]
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	4413      	add	r3, r2
 8010d5a:	881b      	ldrh	r3, [r3, #0]
 8010d5c:	81bb      	strh	r3, [r7, #12]
 8010d5e:	89bb      	ldrh	r3, [r7, #12]
 8010d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d01b      	beq.n	8010da0 <USB_DeactivateEndpoint+0x6c>
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	009b      	lsls	r3, r3, #2
 8010d70:	4413      	add	r3, r2
 8010d72:	881b      	ldrh	r3, [r3, #0]
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010d7e:	817b      	strh	r3, [r7, #10]
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	009b      	lsls	r3, r3, #2
 8010d88:	441a      	add	r2, r3
 8010d8a:	897b      	ldrh	r3, [r7, #10]
 8010d8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010d90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010d94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010d98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010d9c:	b29b      	uxth	r3, r3
 8010d9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010da0:	687a      	ldr	r2, [r7, #4]
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	4413      	add	r3, r2
 8010daa:	881b      	ldrh	r3, [r3, #0]
 8010dac:	b29b      	uxth	r3, r3
 8010dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010db2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010db6:	813b      	strh	r3, [r7, #8]
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	441a      	add	r2, r3
 8010dc2:	893b      	ldrh	r3, [r7, #8]
 8010dc4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010dc8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010dcc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010dd4:	b29b      	uxth	r3, r3
 8010dd6:	8013      	strh	r3, [r2, #0]
 8010dd8:	e192      	b.n	8011100 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010dda:	687a      	ldr	r2, [r7, #4]
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	009b      	lsls	r3, r3, #2
 8010de2:	4413      	add	r3, r2
 8010de4:	881b      	ldrh	r3, [r3, #0]
 8010de6:	827b      	strh	r3, [r7, #18]
 8010de8:	8a7b      	ldrh	r3, [r7, #18]
 8010dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d01b      	beq.n	8010e2a <USB_DeactivateEndpoint+0xf6>
 8010df2:	687a      	ldr	r2, [r7, #4]
 8010df4:	683b      	ldr	r3, [r7, #0]
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	009b      	lsls	r3, r3, #2
 8010dfa:	4413      	add	r3, r2
 8010dfc:	881b      	ldrh	r3, [r3, #0]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e08:	823b      	strh	r3, [r7, #16]
 8010e0a:	687a      	ldr	r2, [r7, #4]
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	441a      	add	r2, r3
 8010e14:	8a3b      	ldrh	r3, [r7, #16]
 8010e16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010e1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	781b      	ldrb	r3, [r3, #0]
 8010e30:	009b      	lsls	r3, r3, #2
 8010e32:	4413      	add	r3, r2
 8010e34:	881b      	ldrh	r3, [r3, #0]
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010e3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e40:	81fb      	strh	r3, [r7, #14]
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	781b      	ldrb	r3, [r3, #0]
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	441a      	add	r2, r3
 8010e4c:	89fb      	ldrh	r3, [r7, #14]
 8010e4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010e52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e5e:	b29b      	uxth	r3, r3
 8010e60:	8013      	strh	r3, [r2, #0]
 8010e62:	e14d      	b.n	8011100 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	785b      	ldrb	r3, [r3, #1]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f040 80a5 	bne.w	8010fb8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	683b      	ldr	r3, [r7, #0]
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	009b      	lsls	r3, r3, #2
 8010e76:	4413      	add	r3, r2
 8010e78:	881b      	ldrh	r3, [r3, #0]
 8010e7a:	843b      	strh	r3, [r7, #32]
 8010e7c:	8c3b      	ldrh	r3, [r7, #32]
 8010e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d01b      	beq.n	8010ebe <USB_DeactivateEndpoint+0x18a>
 8010e86:	687a      	ldr	r2, [r7, #4]
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	009b      	lsls	r3, r3, #2
 8010e8e:	4413      	add	r3, r2
 8010e90:	881b      	ldrh	r3, [r3, #0]
 8010e92:	b29b      	uxth	r3, r3
 8010e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010e9c:	83fb      	strh	r3, [r7, #30]
 8010e9e:	687a      	ldr	r2, [r7, #4]
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	009b      	lsls	r3, r3, #2
 8010ea6:	441a      	add	r2, r3
 8010ea8:	8bfb      	ldrh	r3, [r7, #30]
 8010eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010eb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8010eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	009b      	lsls	r3, r3, #2
 8010ec6:	4413      	add	r3, r2
 8010ec8:	881b      	ldrh	r3, [r3, #0]
 8010eca:	83bb      	strh	r3, [r7, #28]
 8010ecc:	8bbb      	ldrh	r3, [r7, #28]
 8010ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d01b      	beq.n	8010f0e <USB_DeactivateEndpoint+0x1da>
 8010ed6:	687a      	ldr	r2, [r7, #4]
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	009b      	lsls	r3, r3, #2
 8010ede:	4413      	add	r3, r2
 8010ee0:	881b      	ldrh	r3, [r3, #0]
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010ee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010eec:	837b      	strh	r3, [r7, #26]
 8010eee:	687a      	ldr	r2, [r7, #4]
 8010ef0:	683b      	ldr	r3, [r7, #0]
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	009b      	lsls	r3, r3, #2
 8010ef6:	441a      	add	r2, r3
 8010ef8:	8b7b      	ldrh	r3, [r7, #26]
 8010efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f06:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	009b      	lsls	r3, r3, #2
 8010f16:	4413      	add	r3, r2
 8010f18:	881b      	ldrh	r3, [r3, #0]
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f24:	833b      	strh	r3, [r7, #24]
 8010f26:	687a      	ldr	r2, [r7, #4]
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	781b      	ldrb	r3, [r3, #0]
 8010f2c:	009b      	lsls	r3, r3, #2
 8010f2e:	441a      	add	r2, r3
 8010f30:	8b3b      	ldrh	r3, [r7, #24]
 8010f32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f3e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	683b      	ldr	r3, [r7, #0]
 8010f4a:	781b      	ldrb	r3, [r3, #0]
 8010f4c:	009b      	lsls	r3, r3, #2
 8010f4e:	4413      	add	r3, r2
 8010f50:	881b      	ldrh	r3, [r3, #0]
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8010f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010f5c:	82fb      	strh	r3, [r7, #22]
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	781b      	ldrb	r3, [r3, #0]
 8010f64:	009b      	lsls	r3, r3, #2
 8010f66:	441a      	add	r2, r3
 8010f68:	8afb      	ldrh	r3, [r7, #22]
 8010f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010f72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f7a:	b29b      	uxth	r3, r3
 8010f7c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010f7e:	687a      	ldr	r2, [r7, #4]
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	781b      	ldrb	r3, [r3, #0]
 8010f84:	009b      	lsls	r3, r3, #2
 8010f86:	4413      	add	r3, r2
 8010f88:	881b      	ldrh	r3, [r3, #0]
 8010f8a:	b29b      	uxth	r3, r3
 8010f8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010f90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010f94:	82bb      	strh	r3, [r7, #20]
 8010f96:	687a      	ldr	r2, [r7, #4]
 8010f98:	683b      	ldr	r3, [r7, #0]
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	009b      	lsls	r3, r3, #2
 8010f9e:	441a      	add	r2, r3
 8010fa0:	8abb      	ldrh	r3, [r7, #20]
 8010fa2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010fa6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010faa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	8013      	strh	r3, [r2, #0]
 8010fb6:	e0a3      	b.n	8011100 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	683b      	ldr	r3, [r7, #0]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4413      	add	r3, r2
 8010fc2:	881b      	ldrh	r3, [r3, #0]
 8010fc4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010fc6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d01b      	beq.n	8011008 <USB_DeactivateEndpoint+0x2d4>
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	781b      	ldrb	r3, [r3, #0]
 8010fd6:	009b      	lsls	r3, r3, #2
 8010fd8:	4413      	add	r3, r2
 8010fda:	881b      	ldrh	r3, [r3, #0]
 8010fdc:	b29b      	uxth	r3, r3
 8010fde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8010fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010fe6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	781b      	ldrb	r3, [r3, #0]
 8010fee:	009b      	lsls	r3, r3, #2
 8010ff0:	441a      	add	r2, r3
 8010ff2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010ff4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8010ff8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8010ffc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011000:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011004:	b29b      	uxth	r3, r3
 8011006:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011008:	687a      	ldr	r2, [r7, #4]
 801100a:	683b      	ldr	r3, [r7, #0]
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	4413      	add	r3, r2
 8011012:	881b      	ldrh	r3, [r3, #0]
 8011014:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8011016:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801101c:	2b00      	cmp	r3, #0
 801101e:	d01b      	beq.n	8011058 <USB_DeactivateEndpoint+0x324>
 8011020:	687a      	ldr	r2, [r7, #4]
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	781b      	ldrb	r3, [r3, #0]
 8011026:	009b      	lsls	r3, r3, #2
 8011028:	4413      	add	r3, r2
 801102a:	881b      	ldrh	r3, [r3, #0]
 801102c:	b29b      	uxth	r3, r3
 801102e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011036:	853b      	strh	r3, [r7, #40]	@ 0x28
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	781b      	ldrb	r3, [r3, #0]
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	441a      	add	r2, r3
 8011042:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8011044:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011048:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801104c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011050:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011054:	b29b      	uxth	r3, r3
 8011056:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	683b      	ldr	r3, [r7, #0]
 801105c:	781b      	ldrb	r3, [r3, #0]
 801105e:	009b      	lsls	r3, r3, #2
 8011060:	4413      	add	r3, r2
 8011062:	881b      	ldrh	r3, [r3, #0]
 8011064:	b29b      	uxth	r3, r3
 8011066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801106a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801106e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011070:	687a      	ldr	r2, [r7, #4]
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	781b      	ldrb	r3, [r3, #0]
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	441a      	add	r2, r3
 801107a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801107c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011080:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011084:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801108c:	b29b      	uxth	r3, r3
 801108e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011090:	687a      	ldr	r2, [r7, #4]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	781b      	ldrb	r3, [r3, #0]
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	4413      	add	r3, r2
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	b29b      	uxth	r3, r3
 801109e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80110a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80110a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	009b      	lsls	r3, r3, #2
 80110b0:	441a      	add	r2, r3
 80110b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80110b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	009b      	lsls	r3, r3, #2
 80110d0:	4413      	add	r3, r2
 80110d2:	881b      	ldrh	r3, [r3, #0]
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80110da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80110de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80110e0:	687a      	ldr	r2, [r7, #4]
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	441a      	add	r2, r3
 80110ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80110ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80110f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80110f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80110f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8011100:	2300      	movs	r3, #0
}
 8011102:	4618      	mov	r0, r3
 8011104:	3734      	adds	r7, #52	@ 0x34
 8011106:	46bd      	mov	sp, r7
 8011108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801110c:	4770      	bx	lr

0801110e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b0ac      	sub	sp, #176	@ 0xb0
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
 8011116:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	785b      	ldrb	r3, [r3, #1]
 801111c:	2b01      	cmp	r3, #1
 801111e:	f040 84ca 	bne.w	8011ab6 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	699a      	ldr	r2, [r3, #24]
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	691b      	ldr	r3, [r3, #16]
 801112a:	429a      	cmp	r2, r3
 801112c:	d904      	bls.n	8011138 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	691b      	ldr	r3, [r3, #16]
 8011132:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011136:	e003      	b.n	8011140 <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	699b      	ldr	r3, [r3, #24]
 801113c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	7b1b      	ldrb	r3, [r3, #12]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d122      	bne.n	801118e <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8011148:	683b      	ldr	r3, [r7, #0]
 801114a:	6959      	ldr	r1, [r3, #20]
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	88da      	ldrh	r2, [r3, #6]
 8011150:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011154:	b29b      	uxth	r3, r3
 8011156:	6878      	ldr	r0, [r7, #4]
 8011158:	f000 febd 	bl	8011ed6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	613b      	str	r3, [r7, #16]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011166:	b29b      	uxth	r3, r3
 8011168:	461a      	mov	r2, r3
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	4413      	add	r3, r2
 801116e:	613b      	str	r3, [r7, #16]
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	00da      	lsls	r2, r3, #3
 8011176:	693b      	ldr	r3, [r7, #16]
 8011178:	4413      	add	r3, r2
 801117a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801117e:	60fb      	str	r3, [r7, #12]
 8011180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011184:	b29a      	uxth	r2, r3
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	801a      	strh	r2, [r3, #0]
 801118a:	f000 bc6f 	b.w	8011a6c <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	78db      	ldrb	r3, [r3, #3]
 8011192:	2b02      	cmp	r3, #2
 8011194:	f040 831e 	bne.w	80117d4 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	6a1a      	ldr	r2, [r3, #32]
 801119c:	683b      	ldr	r3, [r7, #0]
 801119e:	691b      	ldr	r3, [r3, #16]
 80111a0:	429a      	cmp	r2, r3
 80111a2:	f240 82cf 	bls.w	8011744 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80111a6:	687a      	ldr	r2, [r7, #4]
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	781b      	ldrb	r3, [r3, #0]
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4413      	add	r3, r2
 80111b0:	881b      	ldrh	r3, [r3, #0]
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80111b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80111bc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80111c0:	687a      	ldr	r2, [r7, #4]
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	781b      	ldrb	r3, [r3, #0]
 80111c6:	009b      	lsls	r3, r3, #2
 80111c8:	441a      	add	r2, r3
 80111ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80111ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80111d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80111d6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80111da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80111de:	b29b      	uxth	r3, r3
 80111e0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	6a1a      	ldr	r2, [r3, #32]
 80111e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80111ea:	1ad2      	subs	r2, r2, r3
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80111f0:	687a      	ldr	r2, [r7, #4]
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	781b      	ldrb	r3, [r3, #0]
 80111f6:	009b      	lsls	r3, r3, #2
 80111f8:	4413      	add	r3, r2
 80111fa:	881b      	ldrh	r3, [r3, #0]
 80111fc:	b29b      	uxth	r3, r3
 80111fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011202:	2b00      	cmp	r3, #0
 8011204:	f000 814f 	beq.w	80114a6 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	633b      	str	r3, [r7, #48]	@ 0x30
 801120c:	683b      	ldr	r3, [r7, #0]
 801120e:	785b      	ldrb	r3, [r3, #1]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d16b      	bne.n	80112ec <USB_EPStartXfer+0x1de>
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 801121e:	b29b      	uxth	r3, r3
 8011220:	461a      	mov	r2, r3
 8011222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011224:	4413      	add	r3, r2
 8011226:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	00da      	lsls	r2, r3, #3
 801122e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011230:	4413      	add	r3, r2
 8011232:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011236:	627b      	str	r3, [r7, #36]	@ 0x24
 8011238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	b29b      	uxth	r3, r3
 801123e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011242:	b29a      	uxth	r2, r3
 8011244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011246:	801a      	strh	r2, [r3, #0]
 8011248:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801124c:	2b00      	cmp	r3, #0
 801124e:	d10a      	bne.n	8011266 <USB_EPStartXfer+0x158>
 8011250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011252:	881b      	ldrh	r3, [r3, #0]
 8011254:	b29b      	uxth	r3, r3
 8011256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801125a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801125e:	b29a      	uxth	r2, r3
 8011260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011262:	801a      	strh	r2, [r3, #0]
 8011264:	e05b      	b.n	801131e <USB_EPStartXfer+0x210>
 8011266:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801126a:	2b3e      	cmp	r3, #62	@ 0x3e
 801126c:	d81c      	bhi.n	80112a8 <USB_EPStartXfer+0x19a>
 801126e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011272:	085b      	lsrs	r3, r3, #1
 8011274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011278:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801127c:	f003 0301 	and.w	r3, r3, #1
 8011280:	2b00      	cmp	r3, #0
 8011282:	d004      	beq.n	801128e <USB_EPStartXfer+0x180>
 8011284:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011288:	3301      	adds	r3, #1
 801128a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011290:	881b      	ldrh	r3, [r3, #0]
 8011292:	b29a      	uxth	r2, r3
 8011294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011298:	b29b      	uxth	r3, r3
 801129a:	029b      	lsls	r3, r3, #10
 801129c:	b29b      	uxth	r3, r3
 801129e:	4313      	orrs	r3, r2
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a4:	801a      	strh	r2, [r3, #0]
 80112a6:	e03a      	b.n	801131e <USB_EPStartXfer+0x210>
 80112a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112ac:	095b      	lsrs	r3, r3, #5
 80112ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80112b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112b6:	f003 031f 	and.w	r3, r3, #31
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d104      	bne.n	80112c8 <USB_EPStartXfer+0x1ba>
 80112be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80112c2:	3b01      	subs	r3, #1
 80112c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80112c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ca:	881b      	ldrh	r3, [r3, #0]
 80112cc:	b29a      	uxth	r2, r3
 80112ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	029b      	lsls	r3, r3, #10
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	4313      	orrs	r3, r2
 80112da:	b29b      	uxth	r3, r3
 80112dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80112e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112e8:	801a      	strh	r2, [r3, #0]
 80112ea:	e018      	b.n	801131e <USB_EPStartXfer+0x210>
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	785b      	ldrb	r3, [r3, #1]
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d114      	bne.n	801131e <USB_EPStartXfer+0x210>
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	461a      	mov	r2, r3
 80112fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011300:	4413      	add	r3, r2
 8011302:	633b      	str	r3, [r7, #48]	@ 0x30
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	781b      	ldrb	r3, [r3, #0]
 8011308:	00da      	lsls	r2, r3, #3
 801130a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801130c:	4413      	add	r3, r2
 801130e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011318:	b29a      	uxth	r2, r3
 801131a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801131c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	895b      	ldrh	r3, [r3, #10]
 8011322:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	6959      	ldr	r1, [r3, #20]
 801132a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801132e:	b29b      	uxth	r3, r3
 8011330:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 fdce 	bl	8011ed6 <USB_WritePMA>
            ep->xfer_buff += len;
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	695a      	ldr	r2, [r3, #20]
 801133e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011342:	441a      	add	r2, r3
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	6a1a      	ldr	r2, [r3, #32]
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	691b      	ldr	r3, [r3, #16]
 8011350:	429a      	cmp	r2, r3
 8011352:	d907      	bls.n	8011364 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	6a1a      	ldr	r2, [r3, #32]
 8011358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801135c:	1ad2      	subs	r2, r2, r3
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	621a      	str	r2, [r3, #32]
 8011362:	e006      	b.n	8011372 <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	6a1b      	ldr	r3, [r3, #32]
 8011368:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	2200      	movs	r2, #0
 8011370:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	785b      	ldrb	r3, [r3, #1]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d16b      	bne.n	8011452 <USB_EPStartXfer+0x344>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	61bb      	str	r3, [r7, #24]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011384:	b29b      	uxth	r3, r3
 8011386:	461a      	mov	r2, r3
 8011388:	69bb      	ldr	r3, [r7, #24]
 801138a:	4413      	add	r3, r2
 801138c:	61bb      	str	r3, [r7, #24]
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	00da      	lsls	r2, r3, #3
 8011394:	69bb      	ldr	r3, [r7, #24]
 8011396:	4413      	add	r3, r2
 8011398:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801139c:	617b      	str	r3, [r7, #20]
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	881b      	ldrh	r3, [r3, #0]
 80113a2:	b29b      	uxth	r3, r3
 80113a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80113a8:	b29a      	uxth	r2, r3
 80113aa:	697b      	ldr	r3, [r7, #20]
 80113ac:	801a      	strh	r2, [r3, #0]
 80113ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d10a      	bne.n	80113cc <USB_EPStartXfer+0x2be>
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	881b      	ldrh	r3, [r3, #0]
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80113c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	697b      	ldr	r3, [r7, #20]
 80113c8:	801a      	strh	r2, [r3, #0]
 80113ca:	e05d      	b.n	8011488 <USB_EPStartXfer+0x37a>
 80113cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80113d2:	d81c      	bhi.n	801140e <USB_EPStartXfer+0x300>
 80113d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113d8:	085b      	lsrs	r3, r3, #1
 80113da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80113de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80113e2:	f003 0301 	and.w	r3, r3, #1
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d004      	beq.n	80113f4 <USB_EPStartXfer+0x2e6>
 80113ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80113ee:	3301      	adds	r3, #1
 80113f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	881b      	ldrh	r3, [r3, #0]
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80113fe:	b29b      	uxth	r3, r3
 8011400:	029b      	lsls	r3, r3, #10
 8011402:	b29b      	uxth	r3, r3
 8011404:	4313      	orrs	r3, r2
 8011406:	b29a      	uxth	r2, r3
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	801a      	strh	r2, [r3, #0]
 801140c:	e03c      	b.n	8011488 <USB_EPStartXfer+0x37a>
 801140e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011412:	095b      	lsrs	r3, r3, #5
 8011414:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011418:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801141c:	f003 031f 	and.w	r3, r3, #31
 8011420:	2b00      	cmp	r3, #0
 8011422:	d104      	bne.n	801142e <USB_EPStartXfer+0x320>
 8011424:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011428:	3b01      	subs	r3, #1
 801142a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	881b      	ldrh	r3, [r3, #0]
 8011432:	b29a      	uxth	r2, r3
 8011434:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011438:	b29b      	uxth	r3, r3
 801143a:	029b      	lsls	r3, r3, #10
 801143c:	b29b      	uxth	r3, r3
 801143e:	4313      	orrs	r3, r2
 8011440:	b29b      	uxth	r3, r3
 8011442:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011446:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801144a:	b29a      	uxth	r2, r3
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	801a      	strh	r2, [r3, #0]
 8011450:	e01a      	b.n	8011488 <USB_EPStartXfer+0x37a>
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	785b      	ldrb	r3, [r3, #1]
 8011456:	2b01      	cmp	r3, #1
 8011458:	d116      	bne.n	8011488 <USB_EPStartXfer+0x37a>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	623b      	str	r3, [r7, #32]
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011464:	b29b      	uxth	r3, r3
 8011466:	461a      	mov	r2, r3
 8011468:	6a3b      	ldr	r3, [r7, #32]
 801146a:	4413      	add	r3, r2
 801146c:	623b      	str	r3, [r7, #32]
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	781b      	ldrb	r3, [r3, #0]
 8011472:	00da      	lsls	r2, r3, #3
 8011474:	6a3b      	ldr	r3, [r7, #32]
 8011476:	4413      	add	r3, r2
 8011478:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 801147c:	61fb      	str	r3, [r7, #28]
 801147e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011482:	b29a      	uxth	r2, r3
 8011484:	69fb      	ldr	r3, [r7, #28]
 8011486:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	891b      	ldrh	r3, [r3, #8]
 801148c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	6959      	ldr	r1, [r3, #20]
 8011494:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011498:	b29b      	uxth	r3, r3
 801149a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f000 fd19 	bl	8011ed6 <USB_WritePMA>
 80114a4:	e2e2      	b.n	8011a6c <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	785b      	ldrb	r3, [r3, #1]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d16b      	bne.n	8011586 <USB_EPStartXfer+0x478>
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80114b8:	b29b      	uxth	r3, r3
 80114ba:	461a      	mov	r2, r3
 80114bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114be:	4413      	add	r3, r2
 80114c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	781b      	ldrb	r3, [r3, #0]
 80114c6:	00da      	lsls	r2, r3, #3
 80114c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114ca:	4413      	add	r3, r2
 80114cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80114d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80114d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114d4:	881b      	ldrh	r3, [r3, #0]
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80114dc:	b29a      	uxth	r2, r3
 80114de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114e0:	801a      	strh	r2, [r3, #0]
 80114e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d10a      	bne.n	8011500 <USB_EPStartXfer+0x3f2>
 80114ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114ec:	881b      	ldrh	r3, [r3, #0]
 80114ee:	b29b      	uxth	r3, r3
 80114f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80114fc:	801a      	strh	r2, [r3, #0]
 80114fe:	e05d      	b.n	80115bc <USB_EPStartXfer+0x4ae>
 8011500:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011504:	2b3e      	cmp	r3, #62	@ 0x3e
 8011506:	d81c      	bhi.n	8011542 <USB_EPStartXfer+0x434>
 8011508:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801150c:	085b      	lsrs	r3, r3, #1
 801150e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011512:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011516:	f003 0301 	and.w	r3, r3, #1
 801151a:	2b00      	cmp	r3, #0
 801151c:	d004      	beq.n	8011528 <USB_EPStartXfer+0x41a>
 801151e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011522:	3301      	adds	r3, #1
 8011524:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011528:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801152a:	881b      	ldrh	r3, [r3, #0]
 801152c:	b29a      	uxth	r2, r3
 801152e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011532:	b29b      	uxth	r3, r3
 8011534:	029b      	lsls	r3, r3, #10
 8011536:	b29b      	uxth	r3, r3
 8011538:	4313      	orrs	r3, r2
 801153a:	b29a      	uxth	r2, r3
 801153c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801153e:	801a      	strh	r2, [r3, #0]
 8011540:	e03c      	b.n	80115bc <USB_EPStartXfer+0x4ae>
 8011542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011546:	095b      	lsrs	r3, r3, #5
 8011548:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801154c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011550:	f003 031f 	and.w	r3, r3, #31
 8011554:	2b00      	cmp	r3, #0
 8011556:	d104      	bne.n	8011562 <USB_EPStartXfer+0x454>
 8011558:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801155c:	3b01      	subs	r3, #1
 801155e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011564:	881b      	ldrh	r3, [r3, #0]
 8011566:	b29a      	uxth	r2, r3
 8011568:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801156c:	b29b      	uxth	r3, r3
 801156e:	029b      	lsls	r3, r3, #10
 8011570:	b29b      	uxth	r3, r3
 8011572:	4313      	orrs	r3, r2
 8011574:	b29b      	uxth	r3, r3
 8011576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801157a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801157e:	b29a      	uxth	r2, r3
 8011580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011582:	801a      	strh	r2, [r3, #0]
 8011584:	e01a      	b.n	80115bc <USB_EPStartXfer+0x4ae>
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	785b      	ldrb	r3, [r3, #1]
 801158a:	2b01      	cmp	r3, #1
 801158c:	d116      	bne.n	80115bc <USB_EPStartXfer+0x4ae>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	653b      	str	r3, [r7, #80]	@ 0x50
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011598:	b29b      	uxth	r3, r3
 801159a:	461a      	mov	r2, r3
 801159c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801159e:	4413      	add	r3, r2
 80115a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	781b      	ldrb	r3, [r3, #0]
 80115a6:	00da      	lsls	r2, r3, #3
 80115a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115aa:	4413      	add	r3, r2
 80115ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80115b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80115b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	891b      	ldrh	r3, [r3, #8]
 80115c0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	6959      	ldr	r1, [r3, #20]
 80115c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 fc7f 	bl	8011ed6 <USB_WritePMA>
            ep->xfer_buff += len;
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	695a      	ldr	r2, [r3, #20]
 80115dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115e0:	441a      	add	r2, r3
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	6a1a      	ldr	r2, [r3, #32]
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	691b      	ldr	r3, [r3, #16]
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d907      	bls.n	8011602 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	6a1a      	ldr	r2, [r3, #32]
 80115f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80115fa:	1ad2      	subs	r2, r2, r3
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	621a      	str	r2, [r3, #32]
 8011600:	e006      	b.n	8011610 <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	6a1b      	ldr	r3, [r3, #32]
 8011606:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	2200      	movs	r2, #0
 801160e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	643b      	str	r3, [r7, #64]	@ 0x40
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	785b      	ldrb	r3, [r3, #1]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d16b      	bne.n	80116f4 <USB_EPStartXfer+0x5e6>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011626:	b29b      	uxth	r3, r3
 8011628:	461a      	mov	r2, r3
 801162a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801162c:	4413      	add	r3, r2
 801162e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	781b      	ldrb	r3, [r3, #0]
 8011634:	00da      	lsls	r2, r3, #3
 8011636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011638:	4413      	add	r3, r2
 801163a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801163e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011642:	881b      	ldrh	r3, [r3, #0]
 8011644:	b29b      	uxth	r3, r3
 8011646:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801164a:	b29a      	uxth	r2, r3
 801164c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801164e:	801a      	strh	r2, [r3, #0]
 8011650:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011654:	2b00      	cmp	r3, #0
 8011656:	d10a      	bne.n	801166e <USB_EPStartXfer+0x560>
 8011658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801165a:	881b      	ldrh	r3, [r3, #0]
 801165c:	b29b      	uxth	r3, r3
 801165e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011666:	b29a      	uxth	r2, r3
 8011668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801166a:	801a      	strh	r2, [r3, #0]
 801166c:	e05b      	b.n	8011726 <USB_EPStartXfer+0x618>
 801166e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011672:	2b3e      	cmp	r3, #62	@ 0x3e
 8011674:	d81c      	bhi.n	80116b0 <USB_EPStartXfer+0x5a2>
 8011676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801167a:	085b      	lsrs	r3, r3, #1
 801167c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011680:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011684:	f003 0301 	and.w	r3, r3, #1
 8011688:	2b00      	cmp	r3, #0
 801168a:	d004      	beq.n	8011696 <USB_EPStartXfer+0x588>
 801168c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011690:	3301      	adds	r3, #1
 8011692:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	b29a      	uxth	r2, r3
 801169c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	029b      	lsls	r3, r3, #10
 80116a4:	b29b      	uxth	r3, r3
 80116a6:	4313      	orrs	r3, r2
 80116a8:	b29a      	uxth	r2, r3
 80116aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116ac:	801a      	strh	r2, [r3, #0]
 80116ae:	e03a      	b.n	8011726 <USB_EPStartXfer+0x618>
 80116b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116b4:	095b      	lsrs	r3, r3, #5
 80116b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80116ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80116be:	f003 031f 	and.w	r3, r3, #31
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d104      	bne.n	80116d0 <USB_EPStartXfer+0x5c2>
 80116c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80116ca:	3b01      	subs	r3, #1
 80116cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80116d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116d2:	881b      	ldrh	r3, [r3, #0]
 80116d4:	b29a      	uxth	r2, r3
 80116d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80116da:	b29b      	uxth	r3, r3
 80116dc:	029b      	lsls	r3, r3, #10
 80116de:	b29b      	uxth	r3, r3
 80116e0:	4313      	orrs	r3, r2
 80116e2:	b29b      	uxth	r3, r3
 80116e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80116e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80116ec:	b29a      	uxth	r2, r3
 80116ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116f0:	801a      	strh	r2, [r3, #0]
 80116f2:	e018      	b.n	8011726 <USB_EPStartXfer+0x618>
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	785b      	ldrb	r3, [r3, #1]
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d114      	bne.n	8011726 <USB_EPStartXfer+0x618>
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011702:	b29b      	uxth	r3, r3
 8011704:	461a      	mov	r2, r3
 8011706:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011708:	4413      	add	r3, r2
 801170a:	643b      	str	r3, [r7, #64]	@ 0x40
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	00da      	lsls	r2, r3, #3
 8011712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011714:	4413      	add	r3, r2
 8011716:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 801171a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801171c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011720:	b29a      	uxth	r2, r3
 8011722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011724:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	895b      	ldrh	r3, [r3, #10]
 801172a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	6959      	ldr	r1, [r3, #20]
 8011732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011736:	b29b      	uxth	r3, r3
 8011738:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 801173c:	6878      	ldr	r0, [r7, #4]
 801173e:	f000 fbca 	bl	8011ed6 <USB_WritePMA>
 8011742:	e193      	b.n	8011a6c <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	6a1b      	ldr	r3, [r3, #32]
 8011748:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	4413      	add	r3, r2
 8011756:	881b      	ldrh	r3, [r3, #0]
 8011758:	b29b      	uxth	r3, r3
 801175a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 801175e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011762:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	009b      	lsls	r3, r3, #2
 801176e:	441a      	add	r2, r3
 8011770:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8011774:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011778:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 801177c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011784:	b29b      	uxth	r3, r3
 8011786:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011792:	b29b      	uxth	r3, r3
 8011794:	461a      	mov	r2, r3
 8011796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011798:	4413      	add	r3, r2
 801179a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	00da      	lsls	r2, r3, #3
 80117a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117a4:	4413      	add	r3, r2
 80117a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80117aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80117ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117b0:	b29a      	uxth	r2, r3
 80117b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117b4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	891b      	ldrh	r3, [r3, #8]
 80117ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	6959      	ldr	r1, [r3, #20]
 80117c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f000 fb82 	bl	8011ed6 <USB_WritePMA>
 80117d2:	e14b      	b.n	8011a6c <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	6a1a      	ldr	r2, [r3, #32]
 80117d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117dc:	1ad2      	subs	r2, r2, r3
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80117e2:	687a      	ldr	r2, [r7, #4]
 80117e4:	683b      	ldr	r3, [r7, #0]
 80117e6:	781b      	ldrb	r3, [r3, #0]
 80117e8:	009b      	lsls	r3, r3, #2
 80117ea:	4413      	add	r3, r2
 80117ec:	881b      	ldrh	r3, [r3, #0]
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	f000 809a 	beq.w	801192e <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	785b      	ldrb	r3, [r3, #1]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d16b      	bne.n	80118de <USB_EPStartXfer+0x7d0>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	66bb      	str	r3, [r7, #104]	@ 0x68
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011810:	b29b      	uxth	r3, r3
 8011812:	461a      	mov	r2, r3
 8011814:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011816:	4413      	add	r3, r2
 8011818:	66bb      	str	r3, [r7, #104]	@ 0x68
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	00da      	lsls	r2, r3, #3
 8011820:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011822:	4413      	add	r3, r2
 8011824:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011828:	667b      	str	r3, [r7, #100]	@ 0x64
 801182a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801182c:	881b      	ldrh	r3, [r3, #0]
 801182e:	b29b      	uxth	r3, r3
 8011830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011834:	b29a      	uxth	r2, r3
 8011836:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011838:	801a      	strh	r2, [r3, #0]
 801183a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801183e:	2b00      	cmp	r3, #0
 8011840:	d10a      	bne.n	8011858 <USB_EPStartXfer+0x74a>
 8011842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011844:	881b      	ldrh	r3, [r3, #0]
 8011846:	b29b      	uxth	r3, r3
 8011848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801184c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011850:	b29a      	uxth	r2, r3
 8011852:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011854:	801a      	strh	r2, [r3, #0]
 8011856:	e05b      	b.n	8011910 <USB_EPStartXfer+0x802>
 8011858:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801185c:	2b3e      	cmp	r3, #62	@ 0x3e
 801185e:	d81c      	bhi.n	801189a <USB_EPStartXfer+0x78c>
 8011860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011864:	085b      	lsrs	r3, r3, #1
 8011866:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801186a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801186e:	f003 0301 	and.w	r3, r3, #1
 8011872:	2b00      	cmp	r3, #0
 8011874:	d004      	beq.n	8011880 <USB_EPStartXfer+0x772>
 8011876:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801187a:	3301      	adds	r3, #1
 801187c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011882:	881b      	ldrh	r3, [r3, #0]
 8011884:	b29a      	uxth	r2, r3
 8011886:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801188a:	b29b      	uxth	r3, r3
 801188c:	029b      	lsls	r3, r3, #10
 801188e:	b29b      	uxth	r3, r3
 8011890:	4313      	orrs	r3, r2
 8011892:	b29a      	uxth	r2, r3
 8011894:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011896:	801a      	strh	r2, [r3, #0]
 8011898:	e03a      	b.n	8011910 <USB_EPStartXfer+0x802>
 801189a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801189e:	095b      	lsrs	r3, r3, #5
 80118a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80118a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118a8:	f003 031f 	and.w	r3, r3, #31
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d104      	bne.n	80118ba <USB_EPStartXfer+0x7ac>
 80118b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80118b4:	3b01      	subs	r3, #1
 80118b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80118ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118bc:	881b      	ldrh	r3, [r3, #0]
 80118be:	b29a      	uxth	r2, r3
 80118c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	029b      	lsls	r3, r3, #10
 80118c8:	b29b      	uxth	r3, r3
 80118ca:	4313      	orrs	r3, r2
 80118cc:	b29b      	uxth	r3, r3
 80118ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80118d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80118d6:	b29a      	uxth	r2, r3
 80118d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80118da:	801a      	strh	r2, [r3, #0]
 80118dc:	e018      	b.n	8011910 <USB_EPStartXfer+0x802>
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	785b      	ldrb	r3, [r3, #1]
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d114      	bne.n	8011910 <USB_EPStartXfer+0x802>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	461a      	mov	r2, r3
 80118f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80118f2:	4413      	add	r3, r2
 80118f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	00da      	lsls	r2, r3, #3
 80118fc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80118fe:	4413      	add	r3, r2
 8011900:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8011904:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801190a:	b29a      	uxth	r2, r3
 801190c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801190e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	895b      	ldrh	r3, [r3, #10]
 8011914:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	6959      	ldr	r1, [r3, #20]
 801191c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011920:	b29b      	uxth	r3, r3
 8011922:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f000 fad5 	bl	8011ed6 <USB_WritePMA>
 801192c:	e09e      	b.n	8011a6c <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801192e:	683b      	ldr	r3, [r7, #0]
 8011930:	785b      	ldrb	r3, [r3, #1]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d16b      	bne.n	8011a0e <USB_EPStartXfer+0x900>
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011940:	b29b      	uxth	r3, r3
 8011942:	461a      	mov	r2, r3
 8011944:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011946:	4413      	add	r3, r2
 8011948:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801194a:	683b      	ldr	r3, [r7, #0]
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	00da      	lsls	r2, r3, #3
 8011950:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011952:	4413      	add	r3, r2
 8011954:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011958:	67bb      	str	r3, [r7, #120]	@ 0x78
 801195a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801195c:	881b      	ldrh	r3, [r3, #0]
 801195e:	b29b      	uxth	r3, r3
 8011960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011964:	b29a      	uxth	r2, r3
 8011966:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011968:	801a      	strh	r2, [r3, #0]
 801196a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801196e:	2b00      	cmp	r3, #0
 8011970:	d10a      	bne.n	8011988 <USB_EPStartXfer+0x87a>
 8011972:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011974:	881b      	ldrh	r3, [r3, #0]
 8011976:	b29b      	uxth	r3, r3
 8011978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801197c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011980:	b29a      	uxth	r2, r3
 8011982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011984:	801a      	strh	r2, [r3, #0]
 8011986:	e063      	b.n	8011a50 <USB_EPStartXfer+0x942>
 8011988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801198c:	2b3e      	cmp	r3, #62	@ 0x3e
 801198e:	d81c      	bhi.n	80119ca <USB_EPStartXfer+0x8bc>
 8011990:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011994:	085b      	lsrs	r3, r3, #1
 8011996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801199a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801199e:	f003 0301 	and.w	r3, r3, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d004      	beq.n	80119b0 <USB_EPStartXfer+0x8a2>
 80119a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80119aa:	3301      	adds	r3, #1
 80119ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80119b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80119b2:	881b      	ldrh	r3, [r3, #0]
 80119b4:	b29a      	uxth	r2, r3
 80119b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	029b      	lsls	r3, r3, #10
 80119be:	b29b      	uxth	r3, r3
 80119c0:	4313      	orrs	r3, r2
 80119c2:	b29a      	uxth	r2, r3
 80119c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80119c6:	801a      	strh	r2, [r3, #0]
 80119c8:	e042      	b.n	8011a50 <USB_EPStartXfer+0x942>
 80119ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80119ce:	095b      	lsrs	r3, r3, #5
 80119d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80119d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80119d8:	f003 031f 	and.w	r3, r3, #31
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d104      	bne.n	80119ea <USB_EPStartXfer+0x8dc>
 80119e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80119e4:	3b01      	subs	r3, #1
 80119e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80119ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80119ec:	881b      	ldrh	r3, [r3, #0]
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80119f4:	b29b      	uxth	r3, r3
 80119f6:	029b      	lsls	r3, r3, #10
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	4313      	orrs	r3, r2
 80119fc:	b29b      	uxth	r3, r3
 80119fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011a02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011a06:	b29a      	uxth	r2, r3
 8011a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011a0a:	801a      	strh	r2, [r3, #0]
 8011a0c:	e020      	b.n	8011a50 <USB_EPStartXfer+0x942>
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	785b      	ldrb	r3, [r3, #1]
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	d11c      	bne.n	8011a50 <USB_EPStartXfer+0x942>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8011a22:	b29b      	uxth	r3, r3
 8011a24:	461a      	mov	r2, r3
 8011a26:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011a2a:	4413      	add	r3, r2
 8011a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	00da      	lsls	r2, r3, #3
 8011a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011a3a:	4413      	add	r3, r2
 8011a3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8011a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011a44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a48:	b29a      	uxth	r2, r3
 8011a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011a4e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	891b      	ldrh	r3, [r3, #8]
 8011a54:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	6959      	ldr	r1, [r3, #20]
 8011a5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f000 fa35 	bl	8011ed6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8011a6c:	687a      	ldr	r2, [r7, #4]
 8011a6e:	683b      	ldr	r3, [r7, #0]
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	009b      	lsls	r3, r3, #2
 8011a74:	4413      	add	r3, r2
 8011a76:	881b      	ldrh	r3, [r3, #0]
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011a82:	817b      	strh	r3, [r7, #10]
 8011a84:	897b      	ldrh	r3, [r7, #10]
 8011a86:	f083 0310 	eor.w	r3, r3, #16
 8011a8a:	817b      	strh	r3, [r7, #10]
 8011a8c:	897b      	ldrh	r3, [r7, #10]
 8011a8e:	f083 0320 	eor.w	r3, r3, #32
 8011a92:	817b      	strh	r3, [r7, #10]
 8011a94:	687a      	ldr	r2, [r7, #4]
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	441a      	add	r2, r3
 8011a9e:	897b      	ldrh	r3, [r7, #10]
 8011aa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011aa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011aa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011aac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	8013      	strh	r3, [r2, #0]
 8011ab4:	e0d5      	b.n	8011c62 <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011ab6:	683b      	ldr	r3, [r7, #0]
 8011ab8:	7b1b      	ldrb	r3, [r3, #12]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d156      	bne.n	8011b6c <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	699b      	ldr	r3, [r3, #24]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d122      	bne.n	8011b0c <USB_EPStartXfer+0x9fe>
 8011ac6:	683b      	ldr	r3, [r7, #0]
 8011ac8:	78db      	ldrb	r3, [r3, #3]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d11e      	bne.n	8011b0c <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 8011ace:	687a      	ldr	r2, [r7, #4]
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	781b      	ldrb	r3, [r3, #0]
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	4413      	add	r3, r2
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	b29b      	uxth	r3, r3
 8011adc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011ae4:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8011ae8:	687a      	ldr	r2, [r7, #4]
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	781b      	ldrb	r3, [r3, #0]
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	441a      	add	r2, r3
 8011af2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011afe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8011b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b06:	b29b      	uxth	r3, r3
 8011b08:	8013      	strh	r3, [r2, #0]
 8011b0a:	e01d      	b.n	8011b48 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	4413      	add	r3, r2
 8011b16:	881b      	ldrh	r3, [r3, #0]
 8011b18:	b29b      	uxth	r3, r3
 8011b1a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8011b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011b22:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8011b26:	687a      	ldr	r2, [r7, #4]
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	441a      	add	r2, r3
 8011b30:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8011b34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011b38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011b3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	699a      	ldr	r2, [r3, #24]
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	691b      	ldr	r3, [r3, #16]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d907      	bls.n	8011b64 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8011b54:	683b      	ldr	r3, [r7, #0]
 8011b56:	699a      	ldr	r2, [r3, #24]
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	1ad2      	subs	r2, r2, r3
 8011b5e:	683b      	ldr	r3, [r7, #0]
 8011b60:	619a      	str	r2, [r3, #24]
 8011b62:	e054      	b.n	8011c0e <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	2200      	movs	r2, #0
 8011b68:	619a      	str	r2, [r3, #24]
 8011b6a:	e050      	b.n	8011c0e <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	78db      	ldrb	r3, [r3, #3]
 8011b70:	2b02      	cmp	r3, #2
 8011b72:	d142      	bne.n	8011bfa <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	69db      	ldr	r3, [r3, #28]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d048      	beq.n	8011c0e <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	781b      	ldrb	r3, [r3, #0]
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	4413      	add	r3, r2
 8011b86:	881b      	ldrh	r3, [r3, #0]
 8011b88:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011b8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011b90:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d005      	beq.n	8011ba4 <USB_EPStartXfer+0xa96>
 8011b98:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d10b      	bne.n	8011bbc <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011ba4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d12e      	bne.n	8011c0e <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011bb0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8011bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d128      	bne.n	8011c0e <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8011bbc:	687a      	ldr	r2, [r7, #4]
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	781b      	ldrb	r3, [r3, #0]
 8011bc2:	009b      	lsls	r3, r3, #2
 8011bc4:	4413      	add	r3, r2
 8011bc6:	881b      	ldrh	r3, [r3, #0]
 8011bc8:	b29b      	uxth	r3, r3
 8011bca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011bd2:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	009b      	lsls	r3, r3, #2
 8011bde:	441a      	add	r2, r3
 8011be0:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8011be4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011be8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011bec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011bf0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	8013      	strh	r3, [r2, #0]
 8011bf8:	e009      	b.n	8011c0e <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	78db      	ldrb	r3, [r3, #3]
 8011bfe:	2b01      	cmp	r3, #1
 8011c00:	d103      	bne.n	8011c0a <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	2200      	movs	r2, #0
 8011c06:	619a      	str	r2, [r3, #24]
 8011c08:	e001      	b.n	8011c0e <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e02a      	b.n	8011c64 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	781b      	ldrb	r3, [r3, #0]
 8011c14:	009b      	lsls	r3, r3, #2
 8011c16:	4413      	add	r3, r2
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	b29b      	uxth	r3, r3
 8011c1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011c24:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011c28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011c2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011c30:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011c34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011c3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8011c40:	687a      	ldr	r2, [r7, #4]
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	441a      	add	r2, r3
 8011c4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011c62:	2300      	movs	r3, #0
}
 8011c64:	4618      	mov	r0, r3
 8011c66:	37b0      	adds	r7, #176	@ 0xb0
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b085      	sub	sp, #20
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
 8011c74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	785b      	ldrb	r3, [r3, #1]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d020      	beq.n	8011cc0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	781b      	ldrb	r3, [r3, #0]
 8011c84:	009b      	lsls	r3, r3, #2
 8011c86:	4413      	add	r3, r2
 8011c88:	881b      	ldrh	r3, [r3, #0]
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011c90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011c94:	81bb      	strh	r3, [r7, #12]
 8011c96:	89bb      	ldrh	r3, [r7, #12]
 8011c98:	f083 0310 	eor.w	r3, r3, #16
 8011c9c:	81bb      	strh	r3, [r7, #12]
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	683b      	ldr	r3, [r7, #0]
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	441a      	add	r2, r3
 8011ca8:	89bb      	ldrh	r3, [r7, #12]
 8011caa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cba:	b29b      	uxth	r3, r3
 8011cbc:	8013      	strh	r3, [r2, #0]
 8011cbe:	e01f      	b.n	8011d00 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	4413      	add	r3, r2
 8011cca:	881b      	ldrh	r3, [r3, #0]
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011cd6:	81fb      	strh	r3, [r7, #14]
 8011cd8:	89fb      	ldrh	r3, [r7, #14]
 8011cda:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011cde:	81fb      	strh	r3, [r7, #14]
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	441a      	add	r2, r3
 8011cea:	89fb      	ldrh	r3, [r7, #14]
 8011cec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011cf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011cf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011d00:	2300      	movs	r3, #0
}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3714      	adds	r7, #20
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr

08011d0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011d0e:	b480      	push	{r7}
 8011d10:	b087      	sub	sp, #28
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	6078      	str	r0, [r7, #4]
 8011d16:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	785b      	ldrb	r3, [r3, #1]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d04c      	beq.n	8011dba <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011d20:	687a      	ldr	r2, [r7, #4]
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	781b      	ldrb	r3, [r3, #0]
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4413      	add	r3, r2
 8011d2a:	881b      	ldrh	r3, [r3, #0]
 8011d2c:	823b      	strh	r3, [r7, #16]
 8011d2e:	8a3b      	ldrh	r3, [r7, #16]
 8011d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d01b      	beq.n	8011d70 <USB_EPClearStall+0x62>
 8011d38:	687a      	ldr	r2, [r7, #4]
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	009b      	lsls	r3, r3, #2
 8011d40:	4413      	add	r3, r2
 8011d42:	881b      	ldrh	r3, [r3, #0]
 8011d44:	b29b      	uxth	r3, r3
 8011d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011d4e:	81fb      	strh	r3, [r7, #14]
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	781b      	ldrb	r3, [r3, #0]
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	441a      	add	r2, r3
 8011d5a:	89fb      	ldrh	r3, [r7, #14]
 8011d5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011d60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011d64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011d68:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8011d6c:	b29b      	uxth	r3, r3
 8011d6e:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	78db      	ldrb	r3, [r3, #3]
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	d06c      	beq.n	8011e52 <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011d78:	687a      	ldr	r2, [r7, #4]
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	4413      	add	r3, r2
 8011d82:	881b      	ldrh	r3, [r3, #0]
 8011d84:	b29b      	uxth	r3, r3
 8011d86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011d8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d8e:	81bb      	strh	r3, [r7, #12]
 8011d90:	89bb      	ldrh	r3, [r7, #12]
 8011d92:	f083 0320 	eor.w	r3, r3, #32
 8011d96:	81bb      	strh	r3, [r7, #12]
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	009b      	lsls	r3, r3, #2
 8011da0:	441a      	add	r2, r3
 8011da2:	89bb      	ldrh	r3, [r7, #12]
 8011da4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011da8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011dac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011db0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	8013      	strh	r3, [r2, #0]
 8011db8:	e04b      	b.n	8011e52 <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011dba:	687a      	ldr	r2, [r7, #4]
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	009b      	lsls	r3, r3, #2
 8011dc2:	4413      	add	r3, r2
 8011dc4:	881b      	ldrh	r3, [r3, #0]
 8011dc6:	82fb      	strh	r3, [r7, #22]
 8011dc8:	8afb      	ldrh	r3, [r7, #22]
 8011dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d01b      	beq.n	8011e0a <USB_EPClearStall+0xfc>
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	683b      	ldr	r3, [r7, #0]
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	009b      	lsls	r3, r3, #2
 8011dda:	4413      	add	r3, r2
 8011ddc:	881b      	ldrh	r3, [r3, #0]
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8011de4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011de8:	82bb      	strh	r3, [r7, #20]
 8011dea:	687a      	ldr	r2, [r7, #4]
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	781b      	ldrb	r3, [r3, #0]
 8011df0:	009b      	lsls	r3, r3, #2
 8011df2:	441a      	add	r2, r3
 8011df4:	8abb      	ldrh	r3, [r7, #20]
 8011df6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011dfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011dfe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011e02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	683b      	ldr	r3, [r7, #0]
 8011e0e:	781b      	ldrb	r3, [r3, #0]
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	4413      	add	r3, r2
 8011e14:	881b      	ldrh	r3, [r3, #0]
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8011e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8011e20:	827b      	strh	r3, [r7, #18]
 8011e22:	8a7b      	ldrh	r3, [r7, #18]
 8011e24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8011e28:	827b      	strh	r3, [r7, #18]
 8011e2a:	8a7b      	ldrh	r3, [r7, #18]
 8011e2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8011e30:	827b      	strh	r3, [r7, #18]
 8011e32:	687a      	ldr	r2, [r7, #4]
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	441a      	add	r2, r3
 8011e3c:	8a7b      	ldrh	r3, [r7, #18]
 8011e3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011e42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011e4e:	b29b      	uxth	r3, r3
 8011e50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011e52:	2300      	movs	r3, #0
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	371c      	adds	r7, #28
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011e60:	b480      	push	{r7}
 8011e62:	b083      	sub	sp, #12
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	460b      	mov	r3, r1
 8011e6a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011e6c:	78fb      	ldrb	r3, [r7, #3]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d103      	bne.n	8011e7a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2280      	movs	r2, #128	@ 0x80
 8011e76:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8011e7a:	2300      	movs	r3, #0
}
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	370c      	adds	r7, #12
 8011e80:	46bd      	mov	sp, r7
 8011e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e86:	4770      	bx	lr

08011e88 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b083      	sub	sp, #12
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ea0:	b29a      	uxth	r2, r3
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8011ea8:	2300      	movs	r3, #0
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	370c      	adds	r7, #12
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr

08011eb6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011eb6:	b480      	push	{r7}
 8011eb8:	b085      	sub	sp, #20
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8011ec4:	b29b      	uxth	r3, r3
 8011ec6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3714      	adds	r7, #20
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011ed6:	b480      	push	{r7}
 8011ed8:	b08b      	sub	sp, #44	@ 0x2c
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	60f8      	str	r0, [r7, #12]
 8011ede:	60b9      	str	r1, [r7, #8]
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	461a      	mov	r2, r3
 8011ee4:	460b      	mov	r3, r1
 8011ee6:	80fb      	strh	r3, [r7, #6]
 8011ee8:	4613      	mov	r3, r2
 8011eea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011eec:	88bb      	ldrh	r3, [r7, #4]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	085b      	lsrs	r3, r3, #1
 8011ef2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011efc:	88fa      	ldrh	r2, [r7, #6]
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	4413      	add	r3, r2
 8011f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f06:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011f08:	69bb      	ldr	r3, [r7, #24]
 8011f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f0c:	e01b      	b.n	8011f46 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011f0e:	69fb      	ldr	r3, [r7, #28]
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	3301      	adds	r3, #1
 8011f18:	781b      	ldrb	r3, [r3, #0]
 8011f1a:	021b      	lsls	r3, r3, #8
 8011f1c:	b21a      	sxth	r2, r3
 8011f1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011f22:	4313      	orrs	r3, r2
 8011f24:	b21b      	sxth	r3, r3
 8011f26:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011f28:	6a3b      	ldr	r3, [r7, #32]
 8011f2a:	8a7a      	ldrh	r2, [r7, #18]
 8011f2c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011f2e:	6a3b      	ldr	r3, [r7, #32]
 8011f30:	3302      	adds	r3, #2
 8011f32:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011f34:	69fb      	ldr	r3, [r7, #28]
 8011f36:	3301      	adds	r3, #1
 8011f38:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011f3a:	69fb      	ldr	r3, [r7, #28]
 8011f3c:	3301      	adds	r3, #1
 8011f3e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f42:	3b01      	subs	r3, #1
 8011f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d1e0      	bne.n	8011f0e <USB_WritePMA+0x38>
  }
}
 8011f4c:	bf00      	nop
 8011f4e:	bf00      	nop
 8011f50:	372c      	adds	r7, #44	@ 0x2c
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011f5a:	b480      	push	{r7}
 8011f5c:	b08b      	sub	sp, #44	@ 0x2c
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	60f8      	str	r0, [r7, #12]
 8011f62:	60b9      	str	r1, [r7, #8]
 8011f64:	4611      	mov	r1, r2
 8011f66:	461a      	mov	r2, r3
 8011f68:	460b      	mov	r3, r1
 8011f6a:	80fb      	strh	r3, [r7, #6]
 8011f6c:	4613      	mov	r3, r2
 8011f6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011f70:	88bb      	ldrh	r3, [r7, #4]
 8011f72:	085b      	lsrs	r3, r3, #1
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011f80:	88fa      	ldrh	r2, [r7, #6]
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	4413      	add	r3, r2
 8011f86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8011f8a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011f8c:	69bb      	ldr	r3, [r7, #24]
 8011f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f90:	e018      	b.n	8011fc4 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8011f92:	6a3b      	ldr	r3, [r7, #32]
 8011f94:	881b      	ldrh	r3, [r3, #0]
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011f9a:	6a3b      	ldr	r3, [r7, #32]
 8011f9c:	3302      	adds	r3, #2
 8011f9e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	b2da      	uxtb	r2, r3
 8011fa4:	69fb      	ldr	r3, [r7, #28]
 8011fa6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	3301      	adds	r3, #1
 8011fac:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	0a1b      	lsrs	r3, r3, #8
 8011fb2:	b2da      	uxtb	r2, r3
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d1e3      	bne.n	8011f92 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011fca:	88bb      	ldrh	r3, [r7, #4]
 8011fcc:	f003 0301 	and.w	r3, r3, #1
 8011fd0:	b29b      	uxth	r3, r3
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d007      	beq.n	8011fe6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011fd6:	6a3b      	ldr	r3, [r7, #32]
 8011fd8:	881b      	ldrh	r3, [r3, #0]
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011fde:	693b      	ldr	r3, [r7, #16]
 8011fe0:	b2da      	uxtb	r2, r3
 8011fe2:	69fb      	ldr	r3, [r7, #28]
 8011fe4:	701a      	strb	r2, [r3, #0]
  }
}
 8011fe6:	bf00      	nop
 8011fe8:	372c      	adds	r7, #44	@ 0x2c
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr
	...

08011ff4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b084      	sub	sp, #16
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	6078      	str	r0, [r7, #4]
 8011ffc:	460b      	mov	r3, r1
 8011ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012000:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8012004:	f003 f960 	bl	80152c8 <USBD_static_malloc>
 8012008:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d109      	bne.n	8012024 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	32b0      	adds	r2, #176	@ 0xb0
 801201a:	2100      	movs	r1, #0
 801201c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012020:	2302      	movs	r3, #2
 8012022:	e0d4      	b.n	80121ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012024:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012028:	2100      	movs	r1, #0
 801202a:	68f8      	ldr	r0, [r7, #12]
 801202c:	f005 f911 	bl	8017252 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	32b0      	adds	r2, #176	@ 0xb0
 801203a:	68f9      	ldr	r1, [r7, #12]
 801203c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	32b0      	adds	r2, #176	@ 0xb0
 801204a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	7c1b      	ldrb	r3, [r3, #16]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d138      	bne.n	80120ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801205c:	4b5e      	ldr	r3, [pc, #376]	@ (80121d8 <USBD_CDC_Init+0x1e4>)
 801205e:	7819      	ldrb	r1, [r3, #0]
 8012060:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012064:	2202      	movs	r2, #2
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f002 ffd5 	bl	8015016 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801206c:	4b5a      	ldr	r3, [pc, #360]	@ (80121d8 <USBD_CDC_Init+0x1e4>)
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	f003 020f 	and.w	r2, r3, #15
 8012074:	6879      	ldr	r1, [r7, #4]
 8012076:	4613      	mov	r3, r2
 8012078:	009b      	lsls	r3, r3, #2
 801207a:	4413      	add	r3, r2
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	440b      	add	r3, r1
 8012080:	3324      	adds	r3, #36	@ 0x24
 8012082:	2201      	movs	r2, #1
 8012084:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012086:	4b55      	ldr	r3, [pc, #340]	@ (80121dc <USBD_CDC_Init+0x1e8>)
 8012088:	7819      	ldrb	r1, [r3, #0]
 801208a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801208e:	2202      	movs	r2, #2
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f002 ffc0 	bl	8015016 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012096:	4b51      	ldr	r3, [pc, #324]	@ (80121dc <USBD_CDC_Init+0x1e8>)
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	f003 020f 	and.w	r2, r3, #15
 801209e:	6879      	ldr	r1, [r7, #4]
 80120a0:	4613      	mov	r3, r2
 80120a2:	009b      	lsls	r3, r3, #2
 80120a4:	4413      	add	r3, r2
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	440b      	add	r3, r1
 80120aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80120ae:	2201      	movs	r2, #1
 80120b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80120b2:	4b4b      	ldr	r3, [pc, #300]	@ (80121e0 <USBD_CDC_Init+0x1ec>)
 80120b4:	781b      	ldrb	r3, [r3, #0]
 80120b6:	f003 020f 	and.w	r2, r3, #15
 80120ba:	6879      	ldr	r1, [r7, #4]
 80120bc:	4613      	mov	r3, r2
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	4413      	add	r3, r2
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	440b      	add	r3, r1
 80120c6:	3326      	adds	r3, #38	@ 0x26
 80120c8:	2210      	movs	r2, #16
 80120ca:	801a      	strh	r2, [r3, #0]
 80120cc:	e035      	b.n	801213a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80120ce:	4b42      	ldr	r3, [pc, #264]	@ (80121d8 <USBD_CDC_Init+0x1e4>)
 80120d0:	7819      	ldrb	r1, [r3, #0]
 80120d2:	2340      	movs	r3, #64	@ 0x40
 80120d4:	2202      	movs	r2, #2
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f002 ff9d 	bl	8015016 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80120dc:	4b3e      	ldr	r3, [pc, #248]	@ (80121d8 <USBD_CDC_Init+0x1e4>)
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	f003 020f 	and.w	r2, r3, #15
 80120e4:	6879      	ldr	r1, [r7, #4]
 80120e6:	4613      	mov	r3, r2
 80120e8:	009b      	lsls	r3, r3, #2
 80120ea:	4413      	add	r3, r2
 80120ec:	009b      	lsls	r3, r3, #2
 80120ee:	440b      	add	r3, r1
 80120f0:	3324      	adds	r3, #36	@ 0x24
 80120f2:	2201      	movs	r2, #1
 80120f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80120f6:	4b39      	ldr	r3, [pc, #228]	@ (80121dc <USBD_CDC_Init+0x1e8>)
 80120f8:	7819      	ldrb	r1, [r3, #0]
 80120fa:	2340      	movs	r3, #64	@ 0x40
 80120fc:	2202      	movs	r2, #2
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f002 ff89 	bl	8015016 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012104:	4b35      	ldr	r3, [pc, #212]	@ (80121dc <USBD_CDC_Init+0x1e8>)
 8012106:	781b      	ldrb	r3, [r3, #0]
 8012108:	f003 020f 	and.w	r2, r3, #15
 801210c:	6879      	ldr	r1, [r7, #4]
 801210e:	4613      	mov	r3, r2
 8012110:	009b      	lsls	r3, r3, #2
 8012112:	4413      	add	r3, r2
 8012114:	009b      	lsls	r3, r3, #2
 8012116:	440b      	add	r3, r1
 8012118:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801211c:	2201      	movs	r2, #1
 801211e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012120:	4b2f      	ldr	r3, [pc, #188]	@ (80121e0 <USBD_CDC_Init+0x1ec>)
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	f003 020f 	and.w	r2, r3, #15
 8012128:	6879      	ldr	r1, [r7, #4]
 801212a:	4613      	mov	r3, r2
 801212c:	009b      	lsls	r3, r3, #2
 801212e:	4413      	add	r3, r2
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	440b      	add	r3, r1
 8012134:	3326      	adds	r3, #38	@ 0x26
 8012136:	2210      	movs	r2, #16
 8012138:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801213a:	4b29      	ldr	r3, [pc, #164]	@ (80121e0 <USBD_CDC_Init+0x1ec>)
 801213c:	7819      	ldrb	r1, [r3, #0]
 801213e:	2308      	movs	r3, #8
 8012140:	2203      	movs	r2, #3
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f002 ff67 	bl	8015016 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012148:	4b25      	ldr	r3, [pc, #148]	@ (80121e0 <USBD_CDC_Init+0x1ec>)
 801214a:	781b      	ldrb	r3, [r3, #0]
 801214c:	f003 020f 	and.w	r2, r3, #15
 8012150:	6879      	ldr	r1, [r7, #4]
 8012152:	4613      	mov	r3, r2
 8012154:	009b      	lsls	r3, r3, #2
 8012156:	4413      	add	r3, r2
 8012158:	009b      	lsls	r3, r3, #2
 801215a:	440b      	add	r3, r1
 801215c:	3324      	adds	r3, #36	@ 0x24
 801215e:	2201      	movs	r2, #1
 8012160:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2200      	movs	r2, #0
 8012166:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012170:	687a      	ldr	r2, [r7, #4]
 8012172:	33b0      	adds	r3, #176	@ 0xb0
 8012174:	009b      	lsls	r3, r3, #2
 8012176:	4413      	add	r3, r2
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2200      	movs	r2, #0
 8012182:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	2200      	movs	r2, #0
 801218a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012194:	2b00      	cmp	r3, #0
 8012196:	d101      	bne.n	801219c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012198:	2302      	movs	r3, #2
 801219a:	e018      	b.n	80121ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	7c1b      	ldrb	r3, [r3, #16]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d10a      	bne.n	80121ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80121a4:	4b0d      	ldr	r3, [pc, #52]	@ (80121dc <USBD_CDC_Init+0x1e8>)
 80121a6:	7819      	ldrb	r1, [r3, #0]
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80121ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f003 f81e 	bl	80151f4 <USBD_LL_PrepareReceive>
 80121b8:	e008      	b.n	80121cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80121ba:	4b08      	ldr	r3, [pc, #32]	@ (80121dc <USBD_CDC_Init+0x1e8>)
 80121bc:	7819      	ldrb	r1, [r3, #0]
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80121c4:	2340      	movs	r3, #64	@ 0x40
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f003 f814 	bl	80151f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80121cc:	2300      	movs	r3, #0
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	200000bf 	.word	0x200000bf
 80121dc:	200000c0 	.word	0x200000c0
 80121e0:	200000c1 	.word	0x200000c1

080121e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	460b      	mov	r3, r1
 80121ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80121f0:	4b3a      	ldr	r3, [pc, #232]	@ (80122dc <USBD_CDC_DeInit+0xf8>)
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	4619      	mov	r1, r3
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f002 ff33 	bl	8015062 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80121fc:	4b37      	ldr	r3, [pc, #220]	@ (80122dc <USBD_CDC_DeInit+0xf8>)
 80121fe:	781b      	ldrb	r3, [r3, #0]
 8012200:	f003 020f 	and.w	r2, r3, #15
 8012204:	6879      	ldr	r1, [r7, #4]
 8012206:	4613      	mov	r3, r2
 8012208:	009b      	lsls	r3, r3, #2
 801220a:	4413      	add	r3, r2
 801220c:	009b      	lsls	r3, r3, #2
 801220e:	440b      	add	r3, r1
 8012210:	3324      	adds	r3, #36	@ 0x24
 8012212:	2200      	movs	r2, #0
 8012214:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8012216:	4b32      	ldr	r3, [pc, #200]	@ (80122e0 <USBD_CDC_DeInit+0xfc>)
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	4619      	mov	r1, r3
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f002 ff20 	bl	8015062 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8012222:	4b2f      	ldr	r3, [pc, #188]	@ (80122e0 <USBD_CDC_DeInit+0xfc>)
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	f003 020f 	and.w	r2, r3, #15
 801222a:	6879      	ldr	r1, [r7, #4]
 801222c:	4613      	mov	r3, r2
 801222e:	009b      	lsls	r3, r3, #2
 8012230:	4413      	add	r3, r2
 8012232:	009b      	lsls	r3, r3, #2
 8012234:	440b      	add	r3, r1
 8012236:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801223a:	2200      	movs	r2, #0
 801223c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801223e:	4b29      	ldr	r3, [pc, #164]	@ (80122e4 <USBD_CDC_DeInit+0x100>)
 8012240:	781b      	ldrb	r3, [r3, #0]
 8012242:	4619      	mov	r1, r3
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f002 ff0c 	bl	8015062 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801224a:	4b26      	ldr	r3, [pc, #152]	@ (80122e4 <USBD_CDC_DeInit+0x100>)
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	f003 020f 	and.w	r2, r3, #15
 8012252:	6879      	ldr	r1, [r7, #4]
 8012254:	4613      	mov	r3, r2
 8012256:	009b      	lsls	r3, r3, #2
 8012258:	4413      	add	r3, r2
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	440b      	add	r3, r1
 801225e:	3324      	adds	r3, #36	@ 0x24
 8012260:	2200      	movs	r2, #0
 8012262:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012264:	4b1f      	ldr	r3, [pc, #124]	@ (80122e4 <USBD_CDC_DeInit+0x100>)
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	f003 020f 	and.w	r2, r3, #15
 801226c:	6879      	ldr	r1, [r7, #4]
 801226e:	4613      	mov	r3, r2
 8012270:	009b      	lsls	r3, r3, #2
 8012272:	4413      	add	r3, r2
 8012274:	009b      	lsls	r3, r3, #2
 8012276:	440b      	add	r3, r1
 8012278:	3326      	adds	r3, #38	@ 0x26
 801227a:	2200      	movs	r2, #0
 801227c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	32b0      	adds	r2, #176	@ 0xb0
 8012288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d01f      	beq.n	80122d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	33b0      	adds	r3, #176	@ 0xb0
 801229a:	009b      	lsls	r3, r3, #2
 801229c:	4413      	add	r3, r2
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	32b0      	adds	r2, #176	@ 0xb0
 80122ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122b2:	4618      	mov	r0, r3
 80122b4:	f003 f816 	bl	80152e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	32b0      	adds	r2, #176	@ 0xb0
 80122c2:	2100      	movs	r1, #0
 80122c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	2200      	movs	r2, #0
 80122cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80122d0:	2300      	movs	r3, #0
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3708      	adds	r7, #8
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	200000bf 	.word	0x200000bf
 80122e0:	200000c0 	.word	0x200000c0
 80122e4:	200000c1 	.word	0x200000c1

080122e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b086      	sub	sp, #24
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
 80122f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	32b0      	adds	r2, #176	@ 0xb0
 80122fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012300:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012302:	2300      	movs	r3, #0
 8012304:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8012306:	2300      	movs	r3, #0
 8012308:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801230a:	2300      	movs	r3, #0
 801230c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d101      	bne.n	8012318 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8012314:	2303      	movs	r3, #3
 8012316:	e0bf      	b.n	8012498 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012320:	2b00      	cmp	r3, #0
 8012322:	d050      	beq.n	80123c6 <USBD_CDC_Setup+0xde>
 8012324:	2b20      	cmp	r3, #32
 8012326:	f040 80af 	bne.w	8012488 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	88db      	ldrh	r3, [r3, #6]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d03a      	beq.n	80123a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	781b      	ldrb	r3, [r3, #0]
 8012336:	b25b      	sxtb	r3, r3
 8012338:	2b00      	cmp	r3, #0
 801233a:	da1b      	bge.n	8012374 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012342:	687a      	ldr	r2, [r7, #4]
 8012344:	33b0      	adds	r3, #176	@ 0xb0
 8012346:	009b      	lsls	r3, r3, #2
 8012348:	4413      	add	r3, r2
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	689b      	ldr	r3, [r3, #8]
 801234e:	683a      	ldr	r2, [r7, #0]
 8012350:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012352:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012354:	683a      	ldr	r2, [r7, #0]
 8012356:	88d2      	ldrh	r2, [r2, #6]
 8012358:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	88db      	ldrh	r3, [r3, #6]
 801235e:	2b07      	cmp	r3, #7
 8012360:	bf28      	it	cs
 8012362:	2307      	movcs	r3, #7
 8012364:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012366:	693b      	ldr	r3, [r7, #16]
 8012368:	89fa      	ldrh	r2, [r7, #14]
 801236a:	4619      	mov	r1, r3
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f001 fd2b 	bl	8013dc8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012372:	e090      	b.n	8012496 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	785a      	ldrb	r2, [r3, #1]
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	88db      	ldrh	r3, [r3, #6]
 8012382:	2b3f      	cmp	r3, #63	@ 0x3f
 8012384:	d803      	bhi.n	801238e <USBD_CDC_Setup+0xa6>
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	88db      	ldrh	r3, [r3, #6]
 801238a:	b2da      	uxtb	r2, r3
 801238c:	e000      	b.n	8012390 <USBD_CDC_Setup+0xa8>
 801238e:	2240      	movs	r2, #64	@ 0x40
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012396:	6939      	ldr	r1, [r7, #16]
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801239e:	461a      	mov	r2, r3
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f001 fd3d 	bl	8013e20 <USBD_CtlPrepareRx>
      break;
 80123a6:	e076      	b.n	8012496 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80123ae:	687a      	ldr	r2, [r7, #4]
 80123b0:	33b0      	adds	r3, #176	@ 0xb0
 80123b2:	009b      	lsls	r3, r3, #2
 80123b4:	4413      	add	r3, r2
 80123b6:	685b      	ldr	r3, [r3, #4]
 80123b8:	689b      	ldr	r3, [r3, #8]
 80123ba:	683a      	ldr	r2, [r7, #0]
 80123bc:	7850      	ldrb	r0, [r2, #1]
 80123be:	2200      	movs	r2, #0
 80123c0:	6839      	ldr	r1, [r7, #0]
 80123c2:	4798      	blx	r3
      break;
 80123c4:	e067      	b.n	8012496 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	785b      	ldrb	r3, [r3, #1]
 80123ca:	2b0b      	cmp	r3, #11
 80123cc:	d851      	bhi.n	8012472 <USBD_CDC_Setup+0x18a>
 80123ce:	a201      	add	r2, pc, #4	@ (adr r2, 80123d4 <USBD_CDC_Setup+0xec>)
 80123d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123d4:	08012405 	.word	0x08012405
 80123d8:	08012481 	.word	0x08012481
 80123dc:	08012473 	.word	0x08012473
 80123e0:	08012473 	.word	0x08012473
 80123e4:	08012473 	.word	0x08012473
 80123e8:	08012473 	.word	0x08012473
 80123ec:	08012473 	.word	0x08012473
 80123f0:	08012473 	.word	0x08012473
 80123f4:	08012473 	.word	0x08012473
 80123f8:	08012473 	.word	0x08012473
 80123fc:	0801242f 	.word	0x0801242f
 8012400:	08012459 	.word	0x08012459
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801240a:	b2db      	uxtb	r3, r3
 801240c:	2b03      	cmp	r3, #3
 801240e:	d107      	bne.n	8012420 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012410:	f107 030a 	add.w	r3, r7, #10
 8012414:	2202      	movs	r2, #2
 8012416:	4619      	mov	r1, r3
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f001 fcd5 	bl	8013dc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801241e:	e032      	b.n	8012486 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012420:	6839      	ldr	r1, [r7, #0]
 8012422:	6878      	ldr	r0, [r7, #4]
 8012424:	f001 fc53 	bl	8013cce <USBD_CtlError>
            ret = USBD_FAIL;
 8012428:	2303      	movs	r3, #3
 801242a:	75fb      	strb	r3, [r7, #23]
          break;
 801242c:	e02b      	b.n	8012486 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012434:	b2db      	uxtb	r3, r3
 8012436:	2b03      	cmp	r3, #3
 8012438:	d107      	bne.n	801244a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801243a:	f107 030d 	add.w	r3, r7, #13
 801243e:	2201      	movs	r2, #1
 8012440:	4619      	mov	r1, r3
 8012442:	6878      	ldr	r0, [r7, #4]
 8012444:	f001 fcc0 	bl	8013dc8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012448:	e01d      	b.n	8012486 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801244a:	6839      	ldr	r1, [r7, #0]
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f001 fc3e 	bl	8013cce <USBD_CtlError>
            ret = USBD_FAIL;
 8012452:	2303      	movs	r3, #3
 8012454:	75fb      	strb	r3, [r7, #23]
          break;
 8012456:	e016      	b.n	8012486 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801245e:	b2db      	uxtb	r3, r3
 8012460:	2b03      	cmp	r3, #3
 8012462:	d00f      	beq.n	8012484 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012464:	6839      	ldr	r1, [r7, #0]
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f001 fc31 	bl	8013cce <USBD_CtlError>
            ret = USBD_FAIL;
 801246c:	2303      	movs	r3, #3
 801246e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012470:	e008      	b.n	8012484 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012472:	6839      	ldr	r1, [r7, #0]
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f001 fc2a 	bl	8013cce <USBD_CtlError>
          ret = USBD_FAIL;
 801247a:	2303      	movs	r3, #3
 801247c:	75fb      	strb	r3, [r7, #23]
          break;
 801247e:	e002      	b.n	8012486 <USBD_CDC_Setup+0x19e>
          break;
 8012480:	bf00      	nop
 8012482:	e008      	b.n	8012496 <USBD_CDC_Setup+0x1ae>
          break;
 8012484:	bf00      	nop
      }
      break;
 8012486:	e006      	b.n	8012496 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012488:	6839      	ldr	r1, [r7, #0]
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f001 fc1f 	bl	8013cce <USBD_CtlError>
      ret = USBD_FAIL;
 8012490:	2303      	movs	r3, #3
 8012492:	75fb      	strb	r3, [r7, #23]
      break;
 8012494:	bf00      	nop
  }

  return (uint8_t)ret;
 8012496:	7dfb      	ldrb	r3, [r7, #23]
}
 8012498:	4618      	mov	r0, r3
 801249a:	3718      	adds	r7, #24
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}

080124a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b084      	sub	sp, #16
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
 80124a8:	460b      	mov	r3, r1
 80124aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80124b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	32b0      	adds	r2, #176	@ 0xb0
 80124be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d101      	bne.n	80124ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80124c6:	2303      	movs	r3, #3
 80124c8:	e065      	b.n	8012596 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	32b0      	adds	r2, #176	@ 0xb0
 80124d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80124da:	78fb      	ldrb	r3, [r7, #3]
 80124dc:	f003 020f 	and.w	r2, r3, #15
 80124e0:	6879      	ldr	r1, [r7, #4]
 80124e2:	4613      	mov	r3, r2
 80124e4:	009b      	lsls	r3, r3, #2
 80124e6:	4413      	add	r3, r2
 80124e8:	009b      	lsls	r3, r3, #2
 80124ea:	440b      	add	r3, r1
 80124ec:	3318      	adds	r3, #24
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d02f      	beq.n	8012554 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80124f4:	78fb      	ldrb	r3, [r7, #3]
 80124f6:	f003 020f 	and.w	r2, r3, #15
 80124fa:	6879      	ldr	r1, [r7, #4]
 80124fc:	4613      	mov	r3, r2
 80124fe:	009b      	lsls	r3, r3, #2
 8012500:	4413      	add	r3, r2
 8012502:	009b      	lsls	r3, r3, #2
 8012504:	440b      	add	r3, r1
 8012506:	3318      	adds	r3, #24
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	78fb      	ldrb	r3, [r7, #3]
 801250c:	f003 010f 	and.w	r1, r3, #15
 8012510:	68f8      	ldr	r0, [r7, #12]
 8012512:	460b      	mov	r3, r1
 8012514:	009b      	lsls	r3, r3, #2
 8012516:	440b      	add	r3, r1
 8012518:	00db      	lsls	r3, r3, #3
 801251a:	4403      	add	r3, r0
 801251c:	3320      	adds	r3, #32
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	fbb2 f1f3 	udiv	r1, r2, r3
 8012524:	fb01 f303 	mul.w	r3, r1, r3
 8012528:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801252a:	2b00      	cmp	r3, #0
 801252c:	d112      	bne.n	8012554 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801252e:	78fb      	ldrb	r3, [r7, #3]
 8012530:	f003 020f 	and.w	r2, r3, #15
 8012534:	6879      	ldr	r1, [r7, #4]
 8012536:	4613      	mov	r3, r2
 8012538:	009b      	lsls	r3, r3, #2
 801253a:	4413      	add	r3, r2
 801253c:	009b      	lsls	r3, r3, #2
 801253e:	440b      	add	r3, r1
 8012540:	3318      	adds	r3, #24
 8012542:	2200      	movs	r2, #0
 8012544:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012546:	78f9      	ldrb	r1, [r7, #3]
 8012548:	2300      	movs	r3, #0
 801254a:	2200      	movs	r2, #0
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f002 fe30 	bl	80151b2 <USBD_LL_Transmit>
 8012552:	e01f      	b.n	8012594 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012554:	68bb      	ldr	r3, [r7, #8]
 8012556:	2200      	movs	r2, #0
 8012558:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012562:	687a      	ldr	r2, [r7, #4]
 8012564:	33b0      	adds	r3, #176	@ 0xb0
 8012566:	009b      	lsls	r3, r3, #2
 8012568:	4413      	add	r3, r2
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	691b      	ldr	r3, [r3, #16]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d010      	beq.n	8012594 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012578:	687a      	ldr	r2, [r7, #4]
 801257a:	33b0      	adds	r3, #176	@ 0xb0
 801257c:	009b      	lsls	r3, r3, #2
 801257e:	4413      	add	r3, r2
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	691b      	ldr	r3, [r3, #16]
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801258a:	68ba      	ldr	r2, [r7, #8]
 801258c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012590:	78fa      	ldrb	r2, [r7, #3]
 8012592:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012594:	2300      	movs	r3, #0
}
 8012596:	4618      	mov	r0, r3
 8012598:	3710      	adds	r7, #16
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}

0801259e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801259e:	b580      	push	{r7, lr}
 80125a0:	b084      	sub	sp, #16
 80125a2:	af00      	add	r7, sp, #0
 80125a4:	6078      	str	r0, [r7, #4]
 80125a6:	460b      	mov	r3, r1
 80125a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	32b0      	adds	r2, #176	@ 0xb0
 80125b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	32b0      	adds	r2, #176	@ 0xb0
 80125c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d101      	bne.n	80125d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80125cc:	2303      	movs	r3, #3
 80125ce:	e01a      	b.n	8012606 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80125d0:	78fb      	ldrb	r3, [r7, #3]
 80125d2:	4619      	mov	r1, r3
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f002 fe2e 	bl	8015236 <USBD_LL_GetRxDataSize>
 80125da:	4602      	mov	r2, r0
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80125e8:	687a      	ldr	r2, [r7, #4]
 80125ea:	33b0      	adds	r3, #176	@ 0xb0
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	4413      	add	r3, r2
 80125f0:	685b      	ldr	r3, [r3, #4]
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	68fa      	ldr	r2, [r7, #12]
 80125f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80125fa:	68fa      	ldr	r2, [r7, #12]
 80125fc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012600:	4611      	mov	r1, r2
 8012602:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012604:	2300      	movs	r3, #0
}
 8012606:	4618      	mov	r0, r3
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801260e:	b580      	push	{r7, lr}
 8012610:	b084      	sub	sp, #16
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	32b0      	adds	r2, #176	@ 0xb0
 8012620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012624:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d101      	bne.n	8012630 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801262c:	2303      	movs	r3, #3
 801262e:	e024      	b.n	801267a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012636:	687a      	ldr	r2, [r7, #4]
 8012638:	33b0      	adds	r3, #176	@ 0xb0
 801263a:	009b      	lsls	r3, r3, #2
 801263c:	4413      	add	r3, r2
 801263e:	685b      	ldr	r3, [r3, #4]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d019      	beq.n	8012678 <USBD_CDC_EP0_RxReady+0x6a>
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801264a:	2bff      	cmp	r3, #255	@ 0xff
 801264c:	d014      	beq.n	8012678 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	33b0      	adds	r3, #176	@ 0xb0
 8012658:	009b      	lsls	r3, r3, #2
 801265a:	4413      	add	r3, r2
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	689b      	ldr	r3, [r3, #8]
 8012660:	68fa      	ldr	r2, [r7, #12]
 8012662:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8012666:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012668:	68fa      	ldr	r2, [r7, #12]
 801266a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801266e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	22ff      	movs	r2, #255	@ 0xff
 8012674:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8012678:	2300      	movs	r3, #0
}
 801267a:	4618      	mov	r0, r3
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
	...

08012684 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b086      	sub	sp, #24
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801268c:	2182      	movs	r1, #130	@ 0x82
 801268e:	4818      	ldr	r0, [pc, #96]	@ (80126f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012690:	f000 fcbd 	bl	801300e <USBD_GetEpDesc>
 8012694:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012696:	2101      	movs	r1, #1
 8012698:	4815      	ldr	r0, [pc, #84]	@ (80126f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801269a:	f000 fcb8 	bl	801300e <USBD_GetEpDesc>
 801269e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80126a0:	2181      	movs	r1, #129	@ 0x81
 80126a2:	4813      	ldr	r0, [pc, #76]	@ (80126f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80126a4:	f000 fcb3 	bl	801300e <USBD_GetEpDesc>
 80126a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d002      	beq.n	80126b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	2210      	movs	r2, #16
 80126b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80126b6:	693b      	ldr	r3, [r7, #16]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d006      	beq.n	80126ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80126bc:	693b      	ldr	r3, [r7, #16]
 80126be:	2200      	movs	r2, #0
 80126c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80126c4:	711a      	strb	r2, [r3, #4]
 80126c6:	2200      	movs	r2, #0
 80126c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d006      	beq.n	80126de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2200      	movs	r2, #0
 80126d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80126d8:	711a      	strb	r2, [r3, #4]
 80126da:	2200      	movs	r2, #0
 80126dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	2243      	movs	r2, #67	@ 0x43
 80126e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80126e4:	4b02      	ldr	r3, [pc, #8]	@ (80126f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3718      	adds	r7, #24
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	2000007c 	.word	0x2000007c

080126f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b086      	sub	sp, #24
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80126fc:	2182      	movs	r1, #130	@ 0x82
 80126fe:	4818      	ldr	r0, [pc, #96]	@ (8012760 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012700:	f000 fc85 	bl	801300e <USBD_GetEpDesc>
 8012704:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012706:	2101      	movs	r1, #1
 8012708:	4815      	ldr	r0, [pc, #84]	@ (8012760 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801270a:	f000 fc80 	bl	801300e <USBD_GetEpDesc>
 801270e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012710:	2181      	movs	r1, #129	@ 0x81
 8012712:	4813      	ldr	r0, [pc, #76]	@ (8012760 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012714:	f000 fc7b 	bl	801300e <USBD_GetEpDesc>
 8012718:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801271a:	697b      	ldr	r3, [r7, #20]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d002      	beq.n	8012726 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	2210      	movs	r2, #16
 8012724:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012726:	693b      	ldr	r3, [r7, #16]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d006      	beq.n	801273a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	2200      	movs	r2, #0
 8012730:	711a      	strb	r2, [r3, #4]
 8012732:	2200      	movs	r2, #0
 8012734:	f042 0202 	orr.w	r2, r2, #2
 8012738:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d006      	beq.n	801274e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	2200      	movs	r2, #0
 8012744:	711a      	strb	r2, [r3, #4]
 8012746:	2200      	movs	r2, #0
 8012748:	f042 0202 	orr.w	r2, r2, #2
 801274c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	2243      	movs	r2, #67	@ 0x43
 8012752:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012754:	4b02      	ldr	r3, [pc, #8]	@ (8012760 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012756:	4618      	mov	r0, r3
 8012758:	3718      	adds	r7, #24
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
 801275e:	bf00      	nop
 8012760:	2000007c 	.word	0x2000007c

08012764 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012764:	b580      	push	{r7, lr}
 8012766:	b086      	sub	sp, #24
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801276c:	2182      	movs	r1, #130	@ 0x82
 801276e:	4818      	ldr	r0, [pc, #96]	@ (80127d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012770:	f000 fc4d 	bl	801300e <USBD_GetEpDesc>
 8012774:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012776:	2101      	movs	r1, #1
 8012778:	4815      	ldr	r0, [pc, #84]	@ (80127d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801277a:	f000 fc48 	bl	801300e <USBD_GetEpDesc>
 801277e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012780:	2181      	movs	r1, #129	@ 0x81
 8012782:	4813      	ldr	r0, [pc, #76]	@ (80127d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012784:	f000 fc43 	bl	801300e <USBD_GetEpDesc>
 8012788:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801278a:	697b      	ldr	r3, [r7, #20]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d002      	beq.n	8012796 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	2210      	movs	r2, #16
 8012794:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d006      	beq.n	80127aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	2200      	movs	r2, #0
 80127a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80127a4:	711a      	strb	r2, [r3, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d006      	beq.n	80127be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	2200      	movs	r2, #0
 80127b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80127b8:	711a      	strb	r2, [r3, #4]
 80127ba:	2200      	movs	r2, #0
 80127bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	2243      	movs	r2, #67	@ 0x43
 80127c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80127c4:	4b02      	ldr	r3, [pc, #8]	@ (80127d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80127c6:	4618      	mov	r0, r3
 80127c8:	3718      	adds	r7, #24
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
 80127ce:	bf00      	nop
 80127d0:	2000007c 	.word	0x2000007c

080127d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80127d4:	b480      	push	{r7}
 80127d6:	b083      	sub	sp, #12
 80127d8:	af00      	add	r7, sp, #0
 80127da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	220a      	movs	r2, #10
 80127e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80127e2:	4b03      	ldr	r3, [pc, #12]	@ (80127f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80127e4:	4618      	mov	r0, r3
 80127e6:	370c      	adds	r7, #12
 80127e8:	46bd      	mov	sp, r7
 80127ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ee:	4770      	bx	lr
 80127f0:	20000038 	.word	0x20000038

080127f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d101      	bne.n	8012808 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012804:	2303      	movs	r3, #3
 8012806:	e009      	b.n	801281c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801280e:	687a      	ldr	r2, [r7, #4]
 8012810:	33b0      	adds	r3, #176	@ 0xb0
 8012812:	009b      	lsls	r3, r3, #2
 8012814:	4413      	add	r3, r2
 8012816:	683a      	ldr	r2, [r7, #0]
 8012818:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801281a:	2300      	movs	r3, #0
}
 801281c:	4618      	mov	r0, r3
 801281e:	370c      	adds	r7, #12
 8012820:	46bd      	mov	sp, r7
 8012822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012826:	4770      	bx	lr

08012828 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012828:	b480      	push	{r7}
 801282a:	b087      	sub	sp, #28
 801282c:	af00      	add	r7, sp, #0
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	60b9      	str	r1, [r7, #8]
 8012832:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	32b0      	adds	r2, #176	@ 0xb0
 801283e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012842:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d101      	bne.n	801284e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801284a:	2303      	movs	r3, #3
 801284c:	e008      	b.n	8012860 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	68ba      	ldr	r2, [r7, #8]
 8012852:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801285e:	2300      	movs	r3, #0
}
 8012860:	4618      	mov	r0, r3
 8012862:	371c      	adds	r7, #28
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr

0801286c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801286c:	b480      	push	{r7}
 801286e:	b085      	sub	sp, #20
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	32b0      	adds	r2, #176	@ 0xb0
 8012880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012884:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d101      	bne.n	8012890 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801288c:	2303      	movs	r3, #3
 801288e:	e004      	b.n	801289a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	683a      	ldr	r2, [r7, #0]
 8012894:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012898:	2300      	movs	r3, #0
}
 801289a:	4618      	mov	r0, r3
 801289c:	3714      	adds	r7, #20
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr
	...

080128a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b084      	sub	sp, #16
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	32b0      	adds	r2, #176	@ 0xb0
 80128ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80128c0:	2301      	movs	r3, #1
 80128c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80128c4:	68bb      	ldr	r3, [r7, #8]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d101      	bne.n	80128ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80128ca:	2303      	movs	r3, #3
 80128cc:	e025      	b.n	801291a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d11f      	bne.n	8012918 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	2201      	movs	r2, #1
 80128dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80128e0:	4b10      	ldr	r3, [pc, #64]	@ (8012924 <USBD_CDC_TransmitPacket+0x7c>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	f003 020f 	and.w	r2, r3, #15
 80128e8:	68bb      	ldr	r3, [r7, #8]
 80128ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	4613      	mov	r3, r2
 80128f2:	009b      	lsls	r3, r3, #2
 80128f4:	4413      	add	r3, r2
 80128f6:	009b      	lsls	r3, r3, #2
 80128f8:	4403      	add	r3, r0
 80128fa:	3318      	adds	r3, #24
 80128fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80128fe:	4b09      	ldr	r3, [pc, #36]	@ (8012924 <USBD_CDC_TransmitPacket+0x7c>)
 8012900:	7819      	ldrb	r1, [r3, #0]
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f002 fc4f 	bl	80151b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8012914:	2300      	movs	r3, #0
 8012916:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012918:	7bfb      	ldrb	r3, [r7, #15]
}
 801291a:	4618      	mov	r0, r3
 801291c:	3710      	adds	r7, #16
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	200000bf 	.word	0x200000bf

08012928 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	32b0      	adds	r2, #176	@ 0xb0
 801293a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801293e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	32b0      	adds	r2, #176	@ 0xb0
 801294a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d101      	bne.n	8012956 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8012952:	2303      	movs	r3, #3
 8012954:	e018      	b.n	8012988 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	7c1b      	ldrb	r3, [r3, #16]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d10a      	bne.n	8012974 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801295e:	4b0c      	ldr	r3, [pc, #48]	@ (8012990 <USBD_CDC_ReceivePacket+0x68>)
 8012960:	7819      	ldrb	r1, [r3, #0]
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012968:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f002 fc41 	bl	80151f4 <USBD_LL_PrepareReceive>
 8012972:	e008      	b.n	8012986 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012974:	4b06      	ldr	r3, [pc, #24]	@ (8012990 <USBD_CDC_ReceivePacket+0x68>)
 8012976:	7819      	ldrb	r1, [r3, #0]
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801297e:	2340      	movs	r3, #64	@ 0x40
 8012980:	6878      	ldr	r0, [r7, #4]
 8012982:	f002 fc37 	bl	80151f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012986:	2300      	movs	r3, #0
}
 8012988:	4618      	mov	r0, r3
 801298a:	3710      	adds	r7, #16
 801298c:	46bd      	mov	sp, r7
 801298e:	bd80      	pop	{r7, pc}
 8012990:	200000c0 	.word	0x200000c0

08012994 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b086      	sub	sp, #24
 8012998:	af00      	add	r7, sp, #0
 801299a:	60f8      	str	r0, [r7, #12]
 801299c:	60b9      	str	r1, [r7, #8]
 801299e:	4613      	mov	r3, r2
 80129a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d101      	bne.n	80129ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80129a8:	2303      	movs	r3, #3
 80129aa:	e01f      	b.n	80129ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	2200      	movs	r2, #0
 80129b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2200      	movs	r2, #0
 80129b8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	2200      	movs	r2, #0
 80129c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d003      	beq.n	80129d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	68ba      	ldr	r2, [r7, #8]
 80129ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2201      	movs	r2, #1
 80129d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	79fa      	ldrb	r2, [r7, #7]
 80129de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80129e0:	68f8      	ldr	r0, [r7, #12]
 80129e2:	f002 fa9b 	bl	8014f1c <USBD_LL_Init>
 80129e6:	4603      	mov	r3, r0
 80129e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80129ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3718      	adds	r7, #24
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}

080129f4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b084      	sub	sp, #16
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
 80129fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80129fe:	2300      	movs	r3, #0
 8012a00:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d101      	bne.n	8012a0c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012a08:	2303      	movs	r3, #3
 8012a0a:	e025      	b.n	8012a58 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	683a      	ldr	r2, [r7, #0]
 8012a10:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	32ae      	adds	r2, #174	@ 0xae
 8012a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d00f      	beq.n	8012a48 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	32ae      	adds	r2, #174	@ 0xae
 8012a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a38:	f107 020e 	add.w	r2, r7, #14
 8012a3c:	4610      	mov	r0, r2
 8012a3e:	4798      	blx	r3
 8012a40:	4602      	mov	r2, r0
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012a4e:	1c5a      	adds	r2, r3, #1
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012a56:	2300      	movs	r3, #0
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3710      	adds	r7, #16
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b082      	sub	sp, #8
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f002 fab9 	bl	8014fe0 <USBD_LL_Start>
 8012a6e:	4603      	mov	r3, r0
}
 8012a70:	4618      	mov	r0, r3
 8012a72:	3708      	adds	r7, #8
 8012a74:	46bd      	mov	sp, r7
 8012a76:	bd80      	pop	{r7, pc}

08012a78 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b083      	sub	sp, #12
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012a80:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	370c      	adds	r7, #12
 8012a86:	46bd      	mov	sp, r7
 8012a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8c:	4770      	bx	lr

08012a8e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012a8e:	b580      	push	{r7, lr}
 8012a90:	b084      	sub	sp, #16
 8012a92:	af00      	add	r7, sp, #0
 8012a94:	6078      	str	r0, [r7, #4]
 8012a96:	460b      	mov	r3, r1
 8012a98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d009      	beq.n	8012abc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	78fa      	ldrb	r2, [r7, #3]
 8012ab2:	4611      	mov	r1, r2
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	4798      	blx	r3
 8012ab8:	4603      	mov	r3, r0
 8012aba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b084      	sub	sp, #16
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	6078      	str	r0, [r7, #4]
 8012ace:	460b      	mov	r3, r1
 8012ad0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	78fa      	ldrb	r2, [r7, #3]
 8012ae0:	4611      	mov	r1, r2
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	4798      	blx	r3
 8012ae6:	4603      	mov	r3, r0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d001      	beq.n	8012af0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012aec:	2303      	movs	r3, #3
 8012aee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3710      	adds	r7, #16
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}

08012afa <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012afa:	b580      	push	{r7, lr}
 8012afc:	b084      	sub	sp, #16
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
 8012b02:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012b0a:	6839      	ldr	r1, [r7, #0]
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f001 f8a4 	bl	8013c5a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2201      	movs	r2, #1
 8012b16:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012b20:	461a      	mov	r2, r3
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012b2e:	f003 031f 	and.w	r3, r3, #31
 8012b32:	2b02      	cmp	r3, #2
 8012b34:	d01a      	beq.n	8012b6c <USBD_LL_SetupStage+0x72>
 8012b36:	2b02      	cmp	r3, #2
 8012b38:	d822      	bhi.n	8012b80 <USBD_LL_SetupStage+0x86>
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d002      	beq.n	8012b44 <USBD_LL_SetupStage+0x4a>
 8012b3e:	2b01      	cmp	r3, #1
 8012b40:	d00a      	beq.n	8012b58 <USBD_LL_SetupStage+0x5e>
 8012b42:	e01d      	b.n	8012b80 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f000 fad1 	bl	80130f4 <USBD_StdDevReq>
 8012b52:	4603      	mov	r3, r0
 8012b54:	73fb      	strb	r3, [r7, #15]
      break;
 8012b56:	e020      	b.n	8012b9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012b5e:	4619      	mov	r1, r3
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 fb39 	bl	80131d8 <USBD_StdItfReq>
 8012b66:	4603      	mov	r3, r0
 8012b68:	73fb      	strb	r3, [r7, #15]
      break;
 8012b6a:	e016      	b.n	8012b9a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012b72:	4619      	mov	r1, r3
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f000 fb9b 	bl	80132b0 <USBD_StdEPReq>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8012b7e:	e00c      	b.n	8012b9a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012b86:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012b8a:	b2db      	uxtb	r3, r3
 8012b8c:	4619      	mov	r1, r3
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f002 fa86 	bl	80150a0 <USBD_LL_StallEP>
 8012b94:	4603      	mov	r3, r0
 8012b96:	73fb      	strb	r3, [r7, #15]
      break;
 8012b98:	bf00      	nop
  }

  return ret;
 8012b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3710      	adds	r7, #16
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b086      	sub	sp, #24
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	460b      	mov	r3, r1
 8012bae:	607a      	str	r2, [r7, #4]
 8012bb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8012bb6:	7afb      	ldrb	r3, [r7, #11]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d16e      	bne.n	8012c9a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012bc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012bca:	2b03      	cmp	r3, #3
 8012bcc:	f040 8098 	bne.w	8012d00 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012bd0:	693b      	ldr	r3, [r7, #16]
 8012bd2:	689a      	ldr	r2, [r3, #8]
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	68db      	ldr	r3, [r3, #12]
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d913      	bls.n	8012c04 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	689a      	ldr	r2, [r3, #8]
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	1ad2      	subs	r2, r2, r3
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	68da      	ldr	r2, [r3, #12]
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	689b      	ldr	r3, [r3, #8]
 8012bf2:	4293      	cmp	r3, r2
 8012bf4:	bf28      	it	cs
 8012bf6:	4613      	movcs	r3, r2
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	6879      	ldr	r1, [r7, #4]
 8012bfc:	68f8      	ldr	r0, [r7, #12]
 8012bfe:	f001 f92c 	bl	8013e5a <USBD_CtlContinueRx>
 8012c02:	e07d      	b.n	8012d00 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012c0a:	f003 031f 	and.w	r3, r3, #31
 8012c0e:	2b02      	cmp	r3, #2
 8012c10:	d014      	beq.n	8012c3c <USBD_LL_DataOutStage+0x98>
 8012c12:	2b02      	cmp	r3, #2
 8012c14:	d81d      	bhi.n	8012c52 <USBD_LL_DataOutStage+0xae>
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d002      	beq.n	8012c20 <USBD_LL_DataOutStage+0x7c>
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	d003      	beq.n	8012c26 <USBD_LL_DataOutStage+0x82>
 8012c1e:	e018      	b.n	8012c52 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012c20:	2300      	movs	r3, #0
 8012c22:	75bb      	strb	r3, [r7, #22]
            break;
 8012c24:	e018      	b.n	8012c58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012c2c:	b2db      	uxtb	r3, r3
 8012c2e:	4619      	mov	r1, r3
 8012c30:	68f8      	ldr	r0, [r7, #12]
 8012c32:	f000 f9d2 	bl	8012fda <USBD_CoreFindIF>
 8012c36:	4603      	mov	r3, r0
 8012c38:	75bb      	strb	r3, [r7, #22]
            break;
 8012c3a:	e00d      	b.n	8012c58 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012c42:	b2db      	uxtb	r3, r3
 8012c44:	4619      	mov	r1, r3
 8012c46:	68f8      	ldr	r0, [r7, #12]
 8012c48:	f000 f9d4 	bl	8012ff4 <USBD_CoreFindEP>
 8012c4c:	4603      	mov	r3, r0
 8012c4e:	75bb      	strb	r3, [r7, #22]
            break;
 8012c50:	e002      	b.n	8012c58 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012c52:	2300      	movs	r3, #0
 8012c54:	75bb      	strb	r3, [r7, #22]
            break;
 8012c56:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012c58:	7dbb      	ldrb	r3, [r7, #22]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d119      	bne.n	8012c92 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	2b03      	cmp	r3, #3
 8012c68:	d113      	bne.n	8012c92 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012c6a:	7dba      	ldrb	r2, [r7, #22]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	32ae      	adds	r2, #174	@ 0xae
 8012c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c74:	691b      	ldr	r3, [r3, #16]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d00b      	beq.n	8012c92 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012c7a:	7dba      	ldrb	r2, [r7, #22]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012c82:	7dba      	ldrb	r2, [r7, #22]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	32ae      	adds	r2, #174	@ 0xae
 8012c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c8c:	691b      	ldr	r3, [r3, #16]
 8012c8e:	68f8      	ldr	r0, [r7, #12]
 8012c90:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	f001 f8f2 	bl	8013e7c <USBD_CtlSendStatus>
 8012c98:	e032      	b.n	8012d00 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012c9a:	7afb      	ldrb	r3, [r7, #11]
 8012c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012ca0:	b2db      	uxtb	r3, r3
 8012ca2:	4619      	mov	r1, r3
 8012ca4:	68f8      	ldr	r0, [r7, #12]
 8012ca6:	f000 f9a5 	bl	8012ff4 <USBD_CoreFindEP>
 8012caa:	4603      	mov	r3, r0
 8012cac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012cae:	7dbb      	ldrb	r3, [r7, #22]
 8012cb0:	2bff      	cmp	r3, #255	@ 0xff
 8012cb2:	d025      	beq.n	8012d00 <USBD_LL_DataOutStage+0x15c>
 8012cb4:	7dbb      	ldrb	r3, [r7, #22]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d122      	bne.n	8012d00 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	2b03      	cmp	r3, #3
 8012cc4:	d117      	bne.n	8012cf6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012cc6:	7dba      	ldrb	r2, [r7, #22]
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	32ae      	adds	r2, #174	@ 0xae
 8012ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cd0:	699b      	ldr	r3, [r3, #24]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d00f      	beq.n	8012cf6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012cd6:	7dba      	ldrb	r2, [r7, #22]
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012cde:	7dba      	ldrb	r2, [r7, #22]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	32ae      	adds	r2, #174	@ 0xae
 8012ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ce8:	699b      	ldr	r3, [r3, #24]
 8012cea:	7afa      	ldrb	r2, [r7, #11]
 8012cec:	4611      	mov	r1, r2
 8012cee:	68f8      	ldr	r0, [r7, #12]
 8012cf0:	4798      	blx	r3
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012cf6:	7dfb      	ldrb	r3, [r7, #23]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d001      	beq.n	8012d00 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012cfc:	7dfb      	ldrb	r3, [r7, #23]
 8012cfe:	e000      	b.n	8012d02 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012d00:	2300      	movs	r3, #0
}
 8012d02:	4618      	mov	r0, r3
 8012d04:	3718      	adds	r7, #24
 8012d06:	46bd      	mov	sp, r7
 8012d08:	bd80      	pop	{r7, pc}

08012d0a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b086      	sub	sp, #24
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	60f8      	str	r0, [r7, #12]
 8012d12:	460b      	mov	r3, r1
 8012d14:	607a      	str	r2, [r7, #4]
 8012d16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012d18:	7afb      	ldrb	r3, [r7, #11]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d16f      	bne.n	8012dfe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	3314      	adds	r3, #20
 8012d22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012d2a:	2b02      	cmp	r3, #2
 8012d2c:	d15a      	bne.n	8012de4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	689a      	ldr	r2, [r3, #8]
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	68db      	ldr	r3, [r3, #12]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d914      	bls.n	8012d64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	689a      	ldr	r2, [r3, #8]
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	68db      	ldr	r3, [r3, #12]
 8012d42:	1ad2      	subs	r2, r2, r3
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012d48:	693b      	ldr	r3, [r7, #16]
 8012d4a:	689b      	ldr	r3, [r3, #8]
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	6879      	ldr	r1, [r7, #4]
 8012d50:	68f8      	ldr	r0, [r7, #12]
 8012d52:	f001 f854 	bl	8013dfe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012d56:	2300      	movs	r3, #0
 8012d58:	2200      	movs	r2, #0
 8012d5a:	2100      	movs	r1, #0
 8012d5c:	68f8      	ldr	r0, [r7, #12]
 8012d5e:	f002 fa49 	bl	80151f4 <USBD_LL_PrepareReceive>
 8012d62:	e03f      	b.n	8012de4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012d64:	693b      	ldr	r3, [r7, #16]
 8012d66:	68da      	ldr	r2, [r3, #12]
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	689b      	ldr	r3, [r3, #8]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d11c      	bne.n	8012daa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	685a      	ldr	r2, [r3, #4]
 8012d74:	693b      	ldr	r3, [r7, #16]
 8012d76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	d316      	bcc.n	8012daa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012d7c:	693b      	ldr	r3, [r7, #16]
 8012d7e:	685a      	ldr	r2, [r3, #4]
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d20f      	bcs.n	8012daa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	2100      	movs	r1, #0
 8012d8e:	68f8      	ldr	r0, [r7, #12]
 8012d90:	f001 f835 	bl	8013dfe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2200      	movs	r2, #0
 8012d98:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	2200      	movs	r2, #0
 8012da0:	2100      	movs	r1, #0
 8012da2:	68f8      	ldr	r0, [r7, #12]
 8012da4:	f002 fa26 	bl	80151f4 <USBD_LL_PrepareReceive>
 8012da8:	e01c      	b.n	8012de4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012db0:	b2db      	uxtb	r3, r3
 8012db2:	2b03      	cmp	r3, #3
 8012db4:	d10f      	bne.n	8012dd6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012dbc:	68db      	ldr	r3, [r3, #12]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d009      	beq.n	8012dd6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012dd0:	68db      	ldr	r3, [r3, #12]
 8012dd2:	68f8      	ldr	r0, [r7, #12]
 8012dd4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012dd6:	2180      	movs	r1, #128	@ 0x80
 8012dd8:	68f8      	ldr	r0, [r7, #12]
 8012dda:	f002 f961 	bl	80150a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012dde:	68f8      	ldr	r0, [r7, #12]
 8012de0:	f001 f85f 	bl	8013ea2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d03a      	beq.n	8012e64 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012dee:	68f8      	ldr	r0, [r7, #12]
 8012df0:	f7ff fe42 	bl	8012a78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2200      	movs	r2, #0
 8012df8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012dfc:	e032      	b.n	8012e64 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012dfe:	7afb      	ldrb	r3, [r7, #11]
 8012e00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012e04:	b2db      	uxtb	r3, r3
 8012e06:	4619      	mov	r1, r3
 8012e08:	68f8      	ldr	r0, [r7, #12]
 8012e0a:	f000 f8f3 	bl	8012ff4 <USBD_CoreFindEP>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012e12:	7dfb      	ldrb	r3, [r7, #23]
 8012e14:	2bff      	cmp	r3, #255	@ 0xff
 8012e16:	d025      	beq.n	8012e64 <USBD_LL_DataInStage+0x15a>
 8012e18:	7dfb      	ldrb	r3, [r7, #23]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d122      	bne.n	8012e64 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e24:	b2db      	uxtb	r3, r3
 8012e26:	2b03      	cmp	r3, #3
 8012e28:	d11c      	bne.n	8012e64 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012e2a:	7dfa      	ldrb	r2, [r7, #23]
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	32ae      	adds	r2, #174	@ 0xae
 8012e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e34:	695b      	ldr	r3, [r3, #20]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d014      	beq.n	8012e64 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012e3a:	7dfa      	ldrb	r2, [r7, #23]
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012e42:	7dfa      	ldrb	r2, [r7, #23]
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	32ae      	adds	r2, #174	@ 0xae
 8012e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e4c:	695b      	ldr	r3, [r3, #20]
 8012e4e:	7afa      	ldrb	r2, [r7, #11]
 8012e50:	4611      	mov	r1, r2
 8012e52:	68f8      	ldr	r0, [r7, #12]
 8012e54:	4798      	blx	r3
 8012e56:	4603      	mov	r3, r0
 8012e58:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012e5a:	7dbb      	ldrb	r3, [r7, #22]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d001      	beq.n	8012e64 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012e60:	7dbb      	ldrb	r3, [r7, #22]
 8012e62:	e000      	b.n	8012e66 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012e64:	2300      	movs	r3, #0
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3718      	adds	r7, #24
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012e6e:	b580      	push	{r7, lr}
 8012e70:	b084      	sub	sp, #16
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e76:	2300      	movs	r3, #0
 8012e78:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2201      	movs	r2, #1
 8012e7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2200      	movs	r2, #0
 8012e86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2200      	movs	r2, #0
 8012e94:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d014      	beq.n	8012ed4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012eb0:	685b      	ldr	r3, [r3, #4]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d00e      	beq.n	8012ed4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	687a      	ldr	r2, [r7, #4]
 8012ec0:	6852      	ldr	r2, [r2, #4]
 8012ec2:	b2d2      	uxtb	r2, r2
 8012ec4:	4611      	mov	r1, r2
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	4798      	blx	r3
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d001      	beq.n	8012ed4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012ed0:	2303      	movs	r3, #3
 8012ed2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012ed4:	2340      	movs	r3, #64	@ 0x40
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	2100      	movs	r1, #0
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f002 f89b 	bl	8015016 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2240      	movs	r2, #64	@ 0x40
 8012eec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012ef0:	2340      	movs	r3, #64	@ 0x40
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	2180      	movs	r1, #128	@ 0x80
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f002 f88d 	bl	8015016 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	2201      	movs	r2, #1
 8012f00:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2240      	movs	r2, #64	@ 0x40
 8012f06:	621a      	str	r2, [r3, #32]

  return ret;
 8012f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3710      	adds	r7, #16
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}

08012f12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012f12:	b480      	push	{r7}
 8012f14:	b083      	sub	sp, #12
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	6078      	str	r0, [r7, #4]
 8012f1a:	460b      	mov	r3, r1
 8012f1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	78fa      	ldrb	r2, [r7, #3]
 8012f22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012f24:	2300      	movs	r3, #0
}
 8012f26:	4618      	mov	r0, r3
 8012f28:	370c      	adds	r7, #12
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f30:	4770      	bx	lr

08012f32 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012f32:	b480      	push	{r7}
 8012f34:	b083      	sub	sp, #12
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	2b04      	cmp	r3, #4
 8012f44:	d006      	beq.n	8012f54 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f4c:	b2da      	uxtb	r2, r3
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2204      	movs	r2, #4
 8012f58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012f5c:	2300      	movs	r3, #0
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	370c      	adds	r7, #12
 8012f62:	46bd      	mov	sp, r7
 8012f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f68:	4770      	bx	lr

08012f6a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012f6a:	b480      	push	{r7}
 8012f6c:	b083      	sub	sp, #12
 8012f6e:	af00      	add	r7, sp, #0
 8012f70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	2b04      	cmp	r3, #4
 8012f7c:	d106      	bne.n	8012f8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012f84:	b2da      	uxtb	r2, r3
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012f8c:	2300      	movs	r3, #0
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	370c      	adds	r7, #12
 8012f92:	46bd      	mov	sp, r7
 8012f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f98:	4770      	bx	lr

08012f9a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b082      	sub	sp, #8
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fa8:	b2db      	uxtb	r3, r3
 8012faa:	2b03      	cmp	r3, #3
 8012fac:	d110      	bne.n	8012fd0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d00b      	beq.n	8012fd0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012fbe:	69db      	ldr	r3, [r3, #28]
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d005      	beq.n	8012fd0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012fca:	69db      	ldr	r3, [r3, #28]
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012fd0:	2300      	movs	r3, #0
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3708      	adds	r7, #8
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}

08012fda <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012fda:	b480      	push	{r7}
 8012fdc:	b083      	sub	sp, #12
 8012fde:	af00      	add	r7, sp, #0
 8012fe0:	6078      	str	r0, [r7, #4]
 8012fe2:	460b      	mov	r3, r1
 8012fe4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012fe6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012fe8:	4618      	mov	r0, r3
 8012fea:	370c      	adds	r7, #12
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr

08012ff4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b083      	sub	sp, #12
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
 8012ffc:	460b      	mov	r3, r1
 8012ffe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013000:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013002:	4618      	mov	r0, r3
 8013004:	370c      	adds	r7, #12
 8013006:	46bd      	mov	sp, r7
 8013008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300c:	4770      	bx	lr

0801300e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801300e:	b580      	push	{r7, lr}
 8013010:	b086      	sub	sp, #24
 8013012:	af00      	add	r7, sp, #0
 8013014:	6078      	str	r0, [r7, #4]
 8013016:	460b      	mov	r3, r1
 8013018:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013022:	2300      	movs	r3, #0
 8013024:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	885b      	ldrh	r3, [r3, #2]
 801302a:	b29b      	uxth	r3, r3
 801302c:	68fa      	ldr	r2, [r7, #12]
 801302e:	7812      	ldrb	r2, [r2, #0]
 8013030:	4293      	cmp	r3, r2
 8013032:	d91f      	bls.n	8013074 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801303a:	e013      	b.n	8013064 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801303c:	f107 030a 	add.w	r3, r7, #10
 8013040:	4619      	mov	r1, r3
 8013042:	6978      	ldr	r0, [r7, #20]
 8013044:	f000 f81b 	bl	801307e <USBD_GetNextDesc>
 8013048:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	785b      	ldrb	r3, [r3, #1]
 801304e:	2b05      	cmp	r3, #5
 8013050:	d108      	bne.n	8013064 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	789b      	ldrb	r3, [r3, #2]
 801305a:	78fa      	ldrb	r2, [r7, #3]
 801305c:	429a      	cmp	r2, r3
 801305e:	d008      	beq.n	8013072 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013060:	2300      	movs	r3, #0
 8013062:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	885b      	ldrh	r3, [r3, #2]
 8013068:	b29a      	uxth	r2, r3
 801306a:	897b      	ldrh	r3, [r7, #10]
 801306c:	429a      	cmp	r2, r3
 801306e:	d8e5      	bhi.n	801303c <USBD_GetEpDesc+0x2e>
 8013070:	e000      	b.n	8013074 <USBD_GetEpDesc+0x66>
          break;
 8013072:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013074:	693b      	ldr	r3, [r7, #16]
}
 8013076:	4618      	mov	r0, r3
 8013078:	3718      	adds	r7, #24
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}

0801307e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801307e:	b480      	push	{r7}
 8013080:	b085      	sub	sp, #20
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
 8013086:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	68fa      	ldr	r2, [r7, #12]
 8013092:	7812      	ldrb	r2, [r2, #0]
 8013094:	4413      	add	r3, r2
 8013096:	b29a      	uxth	r2, r3
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	461a      	mov	r2, r3
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	4413      	add	r3, r2
 80130a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80130a8:	68fb      	ldr	r3, [r7, #12]
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3714      	adds	r7, #20
 80130ae:	46bd      	mov	sp, r7
 80130b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b4:	4770      	bx	lr

080130b6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80130b6:	b480      	push	{r7}
 80130b8:	b087      	sub	sp, #28
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80130c2:	697b      	ldr	r3, [r7, #20]
 80130c4:	781b      	ldrb	r3, [r3, #0]
 80130c6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80130c8:	697b      	ldr	r3, [r7, #20]
 80130ca:	3301      	adds	r3, #1
 80130cc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	781b      	ldrb	r3, [r3, #0]
 80130d2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80130d4:	8a3b      	ldrh	r3, [r7, #16]
 80130d6:	021b      	lsls	r3, r3, #8
 80130d8:	b21a      	sxth	r2, r3
 80130da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80130de:	4313      	orrs	r3, r2
 80130e0:	b21b      	sxth	r3, r3
 80130e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80130e4:	89fb      	ldrh	r3, [r7, #14]
}
 80130e6:	4618      	mov	r0, r3
 80130e8:	371c      	adds	r7, #28
 80130ea:	46bd      	mov	sp, r7
 80130ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f0:	4770      	bx	lr
	...

080130f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b084      	sub	sp, #16
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	6078      	str	r0, [r7, #4]
 80130fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80130fe:	2300      	movs	r3, #0
 8013100:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801310a:	2b40      	cmp	r3, #64	@ 0x40
 801310c:	d005      	beq.n	801311a <USBD_StdDevReq+0x26>
 801310e:	2b40      	cmp	r3, #64	@ 0x40
 8013110:	d857      	bhi.n	80131c2 <USBD_StdDevReq+0xce>
 8013112:	2b00      	cmp	r3, #0
 8013114:	d00f      	beq.n	8013136 <USBD_StdDevReq+0x42>
 8013116:	2b20      	cmp	r3, #32
 8013118:	d153      	bne.n	80131c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	32ae      	adds	r2, #174	@ 0xae
 8013124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013128:	689b      	ldr	r3, [r3, #8]
 801312a:	6839      	ldr	r1, [r7, #0]
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	4798      	blx	r3
 8013130:	4603      	mov	r3, r0
 8013132:	73fb      	strb	r3, [r7, #15]
      break;
 8013134:	e04a      	b.n	80131cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013136:	683b      	ldr	r3, [r7, #0]
 8013138:	785b      	ldrb	r3, [r3, #1]
 801313a:	2b09      	cmp	r3, #9
 801313c:	d83b      	bhi.n	80131b6 <USBD_StdDevReq+0xc2>
 801313e:	a201      	add	r2, pc, #4	@ (adr r2, 8013144 <USBD_StdDevReq+0x50>)
 8013140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013144:	08013199 	.word	0x08013199
 8013148:	080131ad 	.word	0x080131ad
 801314c:	080131b7 	.word	0x080131b7
 8013150:	080131a3 	.word	0x080131a3
 8013154:	080131b7 	.word	0x080131b7
 8013158:	08013177 	.word	0x08013177
 801315c:	0801316d 	.word	0x0801316d
 8013160:	080131b7 	.word	0x080131b7
 8013164:	0801318f 	.word	0x0801318f
 8013168:	08013181 	.word	0x08013181
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801316c:	6839      	ldr	r1, [r7, #0]
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f000 fa3c 	bl	80135ec <USBD_GetDescriptor>
          break;
 8013174:	e024      	b.n	80131c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013176:	6839      	ldr	r1, [r7, #0]
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f000 fbcb 	bl	8013914 <USBD_SetAddress>
          break;
 801317e:	e01f      	b.n	80131c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013180:	6839      	ldr	r1, [r7, #0]
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f000 fc0a 	bl	801399c <USBD_SetConfig>
 8013188:	4603      	mov	r3, r0
 801318a:	73fb      	strb	r3, [r7, #15]
          break;
 801318c:	e018      	b.n	80131c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801318e:	6839      	ldr	r1, [r7, #0]
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f000 fcad 	bl	8013af0 <USBD_GetConfig>
          break;
 8013196:	e013      	b.n	80131c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013198:	6839      	ldr	r1, [r7, #0]
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f000 fcde 	bl	8013b5c <USBD_GetStatus>
          break;
 80131a0:	e00e      	b.n	80131c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80131a2:	6839      	ldr	r1, [r7, #0]
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 fd0d 	bl	8013bc4 <USBD_SetFeature>
          break;
 80131aa:	e009      	b.n	80131c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80131ac:	6839      	ldr	r1, [r7, #0]
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f000 fd31 	bl	8013c16 <USBD_ClrFeature>
          break;
 80131b4:	e004      	b.n	80131c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80131b6:	6839      	ldr	r1, [r7, #0]
 80131b8:	6878      	ldr	r0, [r7, #4]
 80131ba:	f000 fd88 	bl	8013cce <USBD_CtlError>
          break;
 80131be:	bf00      	nop
      }
      break;
 80131c0:	e004      	b.n	80131cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80131c2:	6839      	ldr	r1, [r7, #0]
 80131c4:	6878      	ldr	r0, [r7, #4]
 80131c6:	f000 fd82 	bl	8013cce <USBD_CtlError>
      break;
 80131ca:	bf00      	nop
  }

  return ret;
 80131cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3710      	adds	r7, #16
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd80      	pop	{r7, pc}
 80131d6:	bf00      	nop

080131d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b084      	sub	sp, #16
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80131e2:	2300      	movs	r3, #0
 80131e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80131ee:	2b40      	cmp	r3, #64	@ 0x40
 80131f0:	d005      	beq.n	80131fe <USBD_StdItfReq+0x26>
 80131f2:	2b40      	cmp	r3, #64	@ 0x40
 80131f4:	d852      	bhi.n	801329c <USBD_StdItfReq+0xc4>
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d001      	beq.n	80131fe <USBD_StdItfReq+0x26>
 80131fa:	2b20      	cmp	r3, #32
 80131fc:	d14e      	bne.n	801329c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013204:	b2db      	uxtb	r3, r3
 8013206:	3b01      	subs	r3, #1
 8013208:	2b02      	cmp	r3, #2
 801320a:	d840      	bhi.n	801328e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	889b      	ldrh	r3, [r3, #4]
 8013210:	b2db      	uxtb	r3, r3
 8013212:	2b01      	cmp	r3, #1
 8013214:	d836      	bhi.n	8013284 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	889b      	ldrh	r3, [r3, #4]
 801321a:	b2db      	uxtb	r3, r3
 801321c:	4619      	mov	r1, r3
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f7ff fedb 	bl	8012fda <USBD_CoreFindIF>
 8013224:	4603      	mov	r3, r0
 8013226:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013228:	7bbb      	ldrb	r3, [r7, #14]
 801322a:	2bff      	cmp	r3, #255	@ 0xff
 801322c:	d01d      	beq.n	801326a <USBD_StdItfReq+0x92>
 801322e:	7bbb      	ldrb	r3, [r7, #14]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d11a      	bne.n	801326a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013234:	7bba      	ldrb	r2, [r7, #14]
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	32ae      	adds	r2, #174	@ 0xae
 801323a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801323e:	689b      	ldr	r3, [r3, #8]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d00f      	beq.n	8013264 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013244:	7bba      	ldrb	r2, [r7, #14]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801324c:	7bba      	ldrb	r2, [r7, #14]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	32ae      	adds	r2, #174	@ 0xae
 8013252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013256:	689b      	ldr	r3, [r3, #8]
 8013258:	6839      	ldr	r1, [r7, #0]
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	4798      	blx	r3
 801325e:	4603      	mov	r3, r0
 8013260:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013262:	e004      	b.n	801326e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013264:	2303      	movs	r3, #3
 8013266:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013268:	e001      	b.n	801326e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801326a:	2303      	movs	r3, #3
 801326c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801326e:	683b      	ldr	r3, [r7, #0]
 8013270:	88db      	ldrh	r3, [r3, #6]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d110      	bne.n	8013298 <USBD_StdItfReq+0xc0>
 8013276:	7bfb      	ldrb	r3, [r7, #15]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d10d      	bne.n	8013298 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f000 fdfd 	bl	8013e7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013282:	e009      	b.n	8013298 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013284:	6839      	ldr	r1, [r7, #0]
 8013286:	6878      	ldr	r0, [r7, #4]
 8013288:	f000 fd21 	bl	8013cce <USBD_CtlError>
          break;
 801328c:	e004      	b.n	8013298 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801328e:	6839      	ldr	r1, [r7, #0]
 8013290:	6878      	ldr	r0, [r7, #4]
 8013292:	f000 fd1c 	bl	8013cce <USBD_CtlError>
          break;
 8013296:	e000      	b.n	801329a <USBD_StdItfReq+0xc2>
          break;
 8013298:	bf00      	nop
      }
      break;
 801329a:	e004      	b.n	80132a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801329c:	6839      	ldr	r1, [r7, #0]
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f000 fd15 	bl	8013cce <USBD_CtlError>
      break;
 80132a4:	bf00      	nop
  }

  return ret;
 80132a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3710      	adds	r7, #16
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}

080132b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b084      	sub	sp, #16
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
 80132b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80132ba:	2300      	movs	r3, #0
 80132bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	889b      	ldrh	r3, [r3, #4]
 80132c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80132cc:	2b40      	cmp	r3, #64	@ 0x40
 80132ce:	d007      	beq.n	80132e0 <USBD_StdEPReq+0x30>
 80132d0:	2b40      	cmp	r3, #64	@ 0x40
 80132d2:	f200 817f 	bhi.w	80135d4 <USBD_StdEPReq+0x324>
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d02a      	beq.n	8013330 <USBD_StdEPReq+0x80>
 80132da:	2b20      	cmp	r3, #32
 80132dc:	f040 817a 	bne.w	80135d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80132e0:	7bbb      	ldrb	r3, [r7, #14]
 80132e2:	4619      	mov	r1, r3
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f7ff fe85 	bl	8012ff4 <USBD_CoreFindEP>
 80132ea:	4603      	mov	r3, r0
 80132ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80132ee:	7b7b      	ldrb	r3, [r7, #13]
 80132f0:	2bff      	cmp	r3, #255	@ 0xff
 80132f2:	f000 8174 	beq.w	80135de <USBD_StdEPReq+0x32e>
 80132f6:	7b7b      	ldrb	r3, [r7, #13]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f040 8170 	bne.w	80135de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80132fe:	7b7a      	ldrb	r2, [r7, #13]
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013306:	7b7a      	ldrb	r2, [r7, #13]
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	32ae      	adds	r2, #174	@ 0xae
 801330c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013310:	689b      	ldr	r3, [r3, #8]
 8013312:	2b00      	cmp	r3, #0
 8013314:	f000 8163 	beq.w	80135de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013318:	7b7a      	ldrb	r2, [r7, #13]
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	32ae      	adds	r2, #174	@ 0xae
 801331e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013322:	689b      	ldr	r3, [r3, #8]
 8013324:	6839      	ldr	r1, [r7, #0]
 8013326:	6878      	ldr	r0, [r7, #4]
 8013328:	4798      	blx	r3
 801332a:	4603      	mov	r3, r0
 801332c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801332e:	e156      	b.n	80135de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	785b      	ldrb	r3, [r3, #1]
 8013334:	2b03      	cmp	r3, #3
 8013336:	d008      	beq.n	801334a <USBD_StdEPReq+0x9a>
 8013338:	2b03      	cmp	r3, #3
 801333a:	f300 8145 	bgt.w	80135c8 <USBD_StdEPReq+0x318>
 801333e:	2b00      	cmp	r3, #0
 8013340:	f000 809b 	beq.w	801347a <USBD_StdEPReq+0x1ca>
 8013344:	2b01      	cmp	r3, #1
 8013346:	d03c      	beq.n	80133c2 <USBD_StdEPReq+0x112>
 8013348:	e13e      	b.n	80135c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013350:	b2db      	uxtb	r3, r3
 8013352:	2b02      	cmp	r3, #2
 8013354:	d002      	beq.n	801335c <USBD_StdEPReq+0xac>
 8013356:	2b03      	cmp	r3, #3
 8013358:	d016      	beq.n	8013388 <USBD_StdEPReq+0xd8>
 801335a:	e02c      	b.n	80133b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801335c:	7bbb      	ldrb	r3, [r7, #14]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d00d      	beq.n	801337e <USBD_StdEPReq+0xce>
 8013362:	7bbb      	ldrb	r3, [r7, #14]
 8013364:	2b80      	cmp	r3, #128	@ 0x80
 8013366:	d00a      	beq.n	801337e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013368:	7bbb      	ldrb	r3, [r7, #14]
 801336a:	4619      	mov	r1, r3
 801336c:	6878      	ldr	r0, [r7, #4]
 801336e:	f001 fe97 	bl	80150a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013372:	2180      	movs	r1, #128	@ 0x80
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f001 fe93 	bl	80150a0 <USBD_LL_StallEP>
 801337a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801337c:	e020      	b.n	80133c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801337e:	6839      	ldr	r1, [r7, #0]
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 fca4 	bl	8013cce <USBD_CtlError>
              break;
 8013386:	e01b      	b.n	80133c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	885b      	ldrh	r3, [r3, #2]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d10e      	bne.n	80133ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013390:	7bbb      	ldrb	r3, [r7, #14]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d00b      	beq.n	80133ae <USBD_StdEPReq+0xfe>
 8013396:	7bbb      	ldrb	r3, [r7, #14]
 8013398:	2b80      	cmp	r3, #128	@ 0x80
 801339a:	d008      	beq.n	80133ae <USBD_StdEPReq+0xfe>
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	88db      	ldrh	r3, [r3, #6]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d104      	bne.n	80133ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80133a4:	7bbb      	ldrb	r3, [r7, #14]
 80133a6:	4619      	mov	r1, r3
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f001 fe79 	bl	80150a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80133ae:	6878      	ldr	r0, [r7, #4]
 80133b0:	f000 fd64 	bl	8013e7c <USBD_CtlSendStatus>

              break;
 80133b4:	e004      	b.n	80133c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80133b6:	6839      	ldr	r1, [r7, #0]
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f000 fc88 	bl	8013cce <USBD_CtlError>
              break;
 80133be:	bf00      	nop
          }
          break;
 80133c0:	e107      	b.n	80135d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133c8:	b2db      	uxtb	r3, r3
 80133ca:	2b02      	cmp	r3, #2
 80133cc:	d002      	beq.n	80133d4 <USBD_StdEPReq+0x124>
 80133ce:	2b03      	cmp	r3, #3
 80133d0:	d016      	beq.n	8013400 <USBD_StdEPReq+0x150>
 80133d2:	e04b      	b.n	801346c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80133d4:	7bbb      	ldrb	r3, [r7, #14]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d00d      	beq.n	80133f6 <USBD_StdEPReq+0x146>
 80133da:	7bbb      	ldrb	r3, [r7, #14]
 80133dc:	2b80      	cmp	r3, #128	@ 0x80
 80133de:	d00a      	beq.n	80133f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80133e0:	7bbb      	ldrb	r3, [r7, #14]
 80133e2:	4619      	mov	r1, r3
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f001 fe5b 	bl	80150a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80133ea:	2180      	movs	r1, #128	@ 0x80
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f001 fe57 	bl	80150a0 <USBD_LL_StallEP>
 80133f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80133f4:	e040      	b.n	8013478 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80133f6:	6839      	ldr	r1, [r7, #0]
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f000 fc68 	bl	8013cce <USBD_CtlError>
              break;
 80133fe:	e03b      	b.n	8013478 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	885b      	ldrh	r3, [r3, #2]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d136      	bne.n	8013476 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013408:	7bbb      	ldrb	r3, [r7, #14]
 801340a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801340e:	2b00      	cmp	r3, #0
 8013410:	d004      	beq.n	801341c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013412:	7bbb      	ldrb	r3, [r7, #14]
 8013414:	4619      	mov	r1, r3
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	f001 fe61 	bl	80150de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f000 fd2d 	bl	8013e7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013422:	7bbb      	ldrb	r3, [r7, #14]
 8013424:	4619      	mov	r1, r3
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f7ff fde4 	bl	8012ff4 <USBD_CoreFindEP>
 801342c:	4603      	mov	r3, r0
 801342e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013430:	7b7b      	ldrb	r3, [r7, #13]
 8013432:	2bff      	cmp	r3, #255	@ 0xff
 8013434:	d01f      	beq.n	8013476 <USBD_StdEPReq+0x1c6>
 8013436:	7b7b      	ldrb	r3, [r7, #13]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d11c      	bne.n	8013476 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801343c:	7b7a      	ldrb	r2, [r7, #13]
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013444:	7b7a      	ldrb	r2, [r7, #13]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	32ae      	adds	r2, #174	@ 0xae
 801344a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801344e:	689b      	ldr	r3, [r3, #8]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d010      	beq.n	8013476 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013454:	7b7a      	ldrb	r2, [r7, #13]
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	32ae      	adds	r2, #174	@ 0xae
 801345a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801345e:	689b      	ldr	r3, [r3, #8]
 8013460:	6839      	ldr	r1, [r7, #0]
 8013462:	6878      	ldr	r0, [r7, #4]
 8013464:	4798      	blx	r3
 8013466:	4603      	mov	r3, r0
 8013468:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801346a:	e004      	b.n	8013476 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801346c:	6839      	ldr	r1, [r7, #0]
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f000 fc2d 	bl	8013cce <USBD_CtlError>
              break;
 8013474:	e000      	b.n	8013478 <USBD_StdEPReq+0x1c8>
              break;
 8013476:	bf00      	nop
          }
          break;
 8013478:	e0ab      	b.n	80135d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013480:	b2db      	uxtb	r3, r3
 8013482:	2b02      	cmp	r3, #2
 8013484:	d002      	beq.n	801348c <USBD_StdEPReq+0x1dc>
 8013486:	2b03      	cmp	r3, #3
 8013488:	d032      	beq.n	80134f0 <USBD_StdEPReq+0x240>
 801348a:	e097      	b.n	80135bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801348c:	7bbb      	ldrb	r3, [r7, #14]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d007      	beq.n	80134a2 <USBD_StdEPReq+0x1f2>
 8013492:	7bbb      	ldrb	r3, [r7, #14]
 8013494:	2b80      	cmp	r3, #128	@ 0x80
 8013496:	d004      	beq.n	80134a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013498:	6839      	ldr	r1, [r7, #0]
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f000 fc17 	bl	8013cce <USBD_CtlError>
                break;
 80134a0:	e091      	b.n	80135c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80134a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	da0b      	bge.n	80134c2 <USBD_StdEPReq+0x212>
 80134aa:	7bbb      	ldrb	r3, [r7, #14]
 80134ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80134b0:	4613      	mov	r3, r2
 80134b2:	009b      	lsls	r3, r3, #2
 80134b4:	4413      	add	r3, r2
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	3310      	adds	r3, #16
 80134ba:	687a      	ldr	r2, [r7, #4]
 80134bc:	4413      	add	r3, r2
 80134be:	3304      	adds	r3, #4
 80134c0:	e00b      	b.n	80134da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80134c2:	7bbb      	ldrb	r3, [r7, #14]
 80134c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80134c8:	4613      	mov	r3, r2
 80134ca:	009b      	lsls	r3, r3, #2
 80134cc:	4413      	add	r3, r2
 80134ce:	009b      	lsls	r3, r3, #2
 80134d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80134d4:	687a      	ldr	r2, [r7, #4]
 80134d6:	4413      	add	r3, r2
 80134d8:	3304      	adds	r3, #4
 80134da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80134dc:	68bb      	ldr	r3, [r7, #8]
 80134de:	2200      	movs	r2, #0
 80134e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80134e2:	68bb      	ldr	r3, [r7, #8]
 80134e4:	2202      	movs	r2, #2
 80134e6:	4619      	mov	r1, r3
 80134e8:	6878      	ldr	r0, [r7, #4]
 80134ea:	f000 fc6d 	bl	8013dc8 <USBD_CtlSendData>
              break;
 80134ee:	e06a      	b.n	80135c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80134f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	da11      	bge.n	801351c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80134f8:	7bbb      	ldrb	r3, [r7, #14]
 80134fa:	f003 020f 	and.w	r2, r3, #15
 80134fe:	6879      	ldr	r1, [r7, #4]
 8013500:	4613      	mov	r3, r2
 8013502:	009b      	lsls	r3, r3, #2
 8013504:	4413      	add	r3, r2
 8013506:	009b      	lsls	r3, r3, #2
 8013508:	440b      	add	r3, r1
 801350a:	3324      	adds	r3, #36	@ 0x24
 801350c:	881b      	ldrh	r3, [r3, #0]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d117      	bne.n	8013542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013512:	6839      	ldr	r1, [r7, #0]
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f000 fbda 	bl	8013cce <USBD_CtlError>
                  break;
 801351a:	e054      	b.n	80135c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801351c:	7bbb      	ldrb	r3, [r7, #14]
 801351e:	f003 020f 	and.w	r2, r3, #15
 8013522:	6879      	ldr	r1, [r7, #4]
 8013524:	4613      	mov	r3, r2
 8013526:	009b      	lsls	r3, r3, #2
 8013528:	4413      	add	r3, r2
 801352a:	009b      	lsls	r3, r3, #2
 801352c:	440b      	add	r3, r1
 801352e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013532:	881b      	ldrh	r3, [r3, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d104      	bne.n	8013542 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013538:	6839      	ldr	r1, [r7, #0]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 fbc7 	bl	8013cce <USBD_CtlError>
                  break;
 8013540:	e041      	b.n	80135c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013546:	2b00      	cmp	r3, #0
 8013548:	da0b      	bge.n	8013562 <USBD_StdEPReq+0x2b2>
 801354a:	7bbb      	ldrb	r3, [r7, #14]
 801354c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013550:	4613      	mov	r3, r2
 8013552:	009b      	lsls	r3, r3, #2
 8013554:	4413      	add	r3, r2
 8013556:	009b      	lsls	r3, r3, #2
 8013558:	3310      	adds	r3, #16
 801355a:	687a      	ldr	r2, [r7, #4]
 801355c:	4413      	add	r3, r2
 801355e:	3304      	adds	r3, #4
 8013560:	e00b      	b.n	801357a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013562:	7bbb      	ldrb	r3, [r7, #14]
 8013564:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013568:	4613      	mov	r3, r2
 801356a:	009b      	lsls	r3, r3, #2
 801356c:	4413      	add	r3, r2
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013574:	687a      	ldr	r2, [r7, #4]
 8013576:	4413      	add	r3, r2
 8013578:	3304      	adds	r3, #4
 801357a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801357c:	7bbb      	ldrb	r3, [r7, #14]
 801357e:	2b00      	cmp	r3, #0
 8013580:	d002      	beq.n	8013588 <USBD_StdEPReq+0x2d8>
 8013582:	7bbb      	ldrb	r3, [r7, #14]
 8013584:	2b80      	cmp	r3, #128	@ 0x80
 8013586:	d103      	bne.n	8013590 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013588:	68bb      	ldr	r3, [r7, #8]
 801358a:	2200      	movs	r2, #0
 801358c:	601a      	str	r2, [r3, #0]
 801358e:	e00e      	b.n	80135ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013590:	7bbb      	ldrb	r3, [r7, #14]
 8013592:	4619      	mov	r1, r3
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f001 fdc1 	bl	801511c <USBD_LL_IsStallEP>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d003      	beq.n	80135a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	2201      	movs	r2, #1
 80135a4:	601a      	str	r2, [r3, #0]
 80135a6:	e002      	b.n	80135ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	2200      	movs	r2, #0
 80135ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	2202      	movs	r2, #2
 80135b2:	4619      	mov	r1, r3
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f000 fc07 	bl	8013dc8 <USBD_CtlSendData>
              break;
 80135ba:	e004      	b.n	80135c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80135bc:	6839      	ldr	r1, [r7, #0]
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f000 fb85 	bl	8013cce <USBD_CtlError>
              break;
 80135c4:	bf00      	nop
          }
          break;
 80135c6:	e004      	b.n	80135d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80135c8:	6839      	ldr	r1, [r7, #0]
 80135ca:	6878      	ldr	r0, [r7, #4]
 80135cc:	f000 fb7f 	bl	8013cce <USBD_CtlError>
          break;
 80135d0:	bf00      	nop
      }
      break;
 80135d2:	e005      	b.n	80135e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80135d4:	6839      	ldr	r1, [r7, #0]
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f000 fb79 	bl	8013cce <USBD_CtlError>
      break;
 80135dc:	e000      	b.n	80135e0 <USBD_StdEPReq+0x330>
      break;
 80135de:	bf00      	nop
  }

  return ret;
 80135e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3710      	adds	r7, #16
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
	...

080135ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b084      	sub	sp, #16
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
 80135f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80135f6:	2300      	movs	r3, #0
 80135f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80135fa:	2300      	movs	r3, #0
 80135fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80135fe:	2300      	movs	r3, #0
 8013600:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	885b      	ldrh	r3, [r3, #2]
 8013606:	0a1b      	lsrs	r3, r3, #8
 8013608:	b29b      	uxth	r3, r3
 801360a:	3b01      	subs	r3, #1
 801360c:	2b0e      	cmp	r3, #14
 801360e:	f200 8152 	bhi.w	80138b6 <USBD_GetDescriptor+0x2ca>
 8013612:	a201      	add	r2, pc, #4	@ (adr r2, 8013618 <USBD_GetDescriptor+0x2c>)
 8013614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013618:	08013689 	.word	0x08013689
 801361c:	080136a1 	.word	0x080136a1
 8013620:	080136e1 	.word	0x080136e1
 8013624:	080138b7 	.word	0x080138b7
 8013628:	080138b7 	.word	0x080138b7
 801362c:	08013857 	.word	0x08013857
 8013630:	08013883 	.word	0x08013883
 8013634:	080138b7 	.word	0x080138b7
 8013638:	080138b7 	.word	0x080138b7
 801363c:	080138b7 	.word	0x080138b7
 8013640:	080138b7 	.word	0x080138b7
 8013644:	080138b7 	.word	0x080138b7
 8013648:	080138b7 	.word	0x080138b7
 801364c:	080138b7 	.word	0x080138b7
 8013650:	08013655 	.word	0x08013655
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801365a:	69db      	ldr	r3, [r3, #28]
 801365c:	2b00      	cmp	r3, #0
 801365e:	d00b      	beq.n	8013678 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013666:	69db      	ldr	r3, [r3, #28]
 8013668:	687a      	ldr	r2, [r7, #4]
 801366a:	7c12      	ldrb	r2, [r2, #16]
 801366c:	f107 0108 	add.w	r1, r7, #8
 8013670:	4610      	mov	r0, r2
 8013672:	4798      	blx	r3
 8013674:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013676:	e126      	b.n	80138c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013678:	6839      	ldr	r1, [r7, #0]
 801367a:	6878      	ldr	r0, [r7, #4]
 801367c:	f000 fb27 	bl	8013cce <USBD_CtlError>
        err++;
 8013680:	7afb      	ldrb	r3, [r7, #11]
 8013682:	3301      	adds	r3, #1
 8013684:	72fb      	strb	r3, [r7, #11]
      break;
 8013686:	e11e      	b.n	80138c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	7c12      	ldrb	r2, [r2, #16]
 8013694:	f107 0108 	add.w	r1, r7, #8
 8013698:	4610      	mov	r0, r2
 801369a:	4798      	blx	r3
 801369c:	60f8      	str	r0, [r7, #12]
      break;
 801369e:	e112      	b.n	80138c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	7c1b      	ldrb	r3, [r3, #16]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d10d      	bne.n	80136c4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80136ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80136b0:	f107 0208 	add.w	r2, r7, #8
 80136b4:	4610      	mov	r0, r2
 80136b6:	4798      	blx	r3
 80136b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	3301      	adds	r3, #1
 80136be:	2202      	movs	r2, #2
 80136c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80136c2:	e100      	b.n	80138c6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80136ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80136cc:	f107 0208 	add.w	r2, r7, #8
 80136d0:	4610      	mov	r0, r2
 80136d2:	4798      	blx	r3
 80136d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	3301      	adds	r3, #1
 80136da:	2202      	movs	r2, #2
 80136dc:	701a      	strb	r2, [r3, #0]
      break;
 80136de:	e0f2      	b.n	80138c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	885b      	ldrh	r3, [r3, #2]
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	2b05      	cmp	r3, #5
 80136e8:	f200 80ac 	bhi.w	8013844 <USBD_GetDescriptor+0x258>
 80136ec:	a201      	add	r2, pc, #4	@ (adr r2, 80136f4 <USBD_GetDescriptor+0x108>)
 80136ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136f2:	bf00      	nop
 80136f4:	0801370d 	.word	0x0801370d
 80136f8:	08013741 	.word	0x08013741
 80136fc:	08013775 	.word	0x08013775
 8013700:	080137a9 	.word	0x080137a9
 8013704:	080137dd 	.word	0x080137dd
 8013708:	08013811 	.word	0x08013811
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d00b      	beq.n	8013730 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	687a      	ldr	r2, [r7, #4]
 8013722:	7c12      	ldrb	r2, [r2, #16]
 8013724:	f107 0108 	add.w	r1, r7, #8
 8013728:	4610      	mov	r0, r2
 801372a:	4798      	blx	r3
 801372c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801372e:	e091      	b.n	8013854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013730:	6839      	ldr	r1, [r7, #0]
 8013732:	6878      	ldr	r0, [r7, #4]
 8013734:	f000 facb 	bl	8013cce <USBD_CtlError>
            err++;
 8013738:	7afb      	ldrb	r3, [r7, #11]
 801373a:	3301      	adds	r3, #1
 801373c:	72fb      	strb	r3, [r7, #11]
          break;
 801373e:	e089      	b.n	8013854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013746:	689b      	ldr	r3, [r3, #8]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d00b      	beq.n	8013764 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013752:	689b      	ldr	r3, [r3, #8]
 8013754:	687a      	ldr	r2, [r7, #4]
 8013756:	7c12      	ldrb	r2, [r2, #16]
 8013758:	f107 0108 	add.w	r1, r7, #8
 801375c:	4610      	mov	r0, r2
 801375e:	4798      	blx	r3
 8013760:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013762:	e077      	b.n	8013854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013764:	6839      	ldr	r1, [r7, #0]
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f000 fab1 	bl	8013cce <USBD_CtlError>
            err++;
 801376c:	7afb      	ldrb	r3, [r7, #11]
 801376e:	3301      	adds	r3, #1
 8013770:	72fb      	strb	r3, [r7, #11]
          break;
 8013772:	e06f      	b.n	8013854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801377a:	68db      	ldr	r3, [r3, #12]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d00b      	beq.n	8013798 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013786:	68db      	ldr	r3, [r3, #12]
 8013788:	687a      	ldr	r2, [r7, #4]
 801378a:	7c12      	ldrb	r2, [r2, #16]
 801378c:	f107 0108 	add.w	r1, r7, #8
 8013790:	4610      	mov	r0, r2
 8013792:	4798      	blx	r3
 8013794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013796:	e05d      	b.n	8013854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013798:	6839      	ldr	r1, [r7, #0]
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 fa97 	bl	8013cce <USBD_CtlError>
            err++;
 80137a0:	7afb      	ldrb	r3, [r7, #11]
 80137a2:	3301      	adds	r3, #1
 80137a4:	72fb      	strb	r3, [r7, #11]
          break;
 80137a6:	e055      	b.n	8013854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137ae:	691b      	ldr	r3, [r3, #16]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d00b      	beq.n	80137cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137ba:	691b      	ldr	r3, [r3, #16]
 80137bc:	687a      	ldr	r2, [r7, #4]
 80137be:	7c12      	ldrb	r2, [r2, #16]
 80137c0:	f107 0108 	add.w	r1, r7, #8
 80137c4:	4610      	mov	r0, r2
 80137c6:	4798      	blx	r3
 80137c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137ca:	e043      	b.n	8013854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80137cc:	6839      	ldr	r1, [r7, #0]
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f000 fa7d 	bl	8013cce <USBD_CtlError>
            err++;
 80137d4:	7afb      	ldrb	r3, [r7, #11]
 80137d6:	3301      	adds	r3, #1
 80137d8:	72fb      	strb	r3, [r7, #11]
          break;
 80137da:	e03b      	b.n	8013854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137e2:	695b      	ldr	r3, [r3, #20]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d00b      	beq.n	8013800 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80137ee:	695b      	ldr	r3, [r3, #20]
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	7c12      	ldrb	r2, [r2, #16]
 80137f4:	f107 0108 	add.w	r1, r7, #8
 80137f8:	4610      	mov	r0, r2
 80137fa:	4798      	blx	r3
 80137fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137fe:	e029      	b.n	8013854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013800:	6839      	ldr	r1, [r7, #0]
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f000 fa63 	bl	8013cce <USBD_CtlError>
            err++;
 8013808:	7afb      	ldrb	r3, [r7, #11]
 801380a:	3301      	adds	r3, #1
 801380c:	72fb      	strb	r3, [r7, #11]
          break;
 801380e:	e021      	b.n	8013854 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013816:	699b      	ldr	r3, [r3, #24]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d00b      	beq.n	8013834 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013822:	699b      	ldr	r3, [r3, #24]
 8013824:	687a      	ldr	r2, [r7, #4]
 8013826:	7c12      	ldrb	r2, [r2, #16]
 8013828:	f107 0108 	add.w	r1, r7, #8
 801382c:	4610      	mov	r0, r2
 801382e:	4798      	blx	r3
 8013830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013832:	e00f      	b.n	8013854 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013834:	6839      	ldr	r1, [r7, #0]
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f000 fa49 	bl	8013cce <USBD_CtlError>
            err++;
 801383c:	7afb      	ldrb	r3, [r7, #11]
 801383e:	3301      	adds	r3, #1
 8013840:	72fb      	strb	r3, [r7, #11]
          break;
 8013842:	e007      	b.n	8013854 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013844:	6839      	ldr	r1, [r7, #0]
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f000 fa41 	bl	8013cce <USBD_CtlError>
          err++;
 801384c:	7afb      	ldrb	r3, [r7, #11]
 801384e:	3301      	adds	r3, #1
 8013850:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013852:	bf00      	nop
      }
      break;
 8013854:	e037      	b.n	80138c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	7c1b      	ldrb	r3, [r3, #16]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d109      	bne.n	8013872 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013866:	f107 0208 	add.w	r2, r7, #8
 801386a:	4610      	mov	r0, r2
 801386c:	4798      	blx	r3
 801386e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013870:	e029      	b.n	80138c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013872:	6839      	ldr	r1, [r7, #0]
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f000 fa2a 	bl	8013cce <USBD_CtlError>
        err++;
 801387a:	7afb      	ldrb	r3, [r7, #11]
 801387c:	3301      	adds	r3, #1
 801387e:	72fb      	strb	r3, [r7, #11]
      break;
 8013880:	e021      	b.n	80138c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	7c1b      	ldrb	r3, [r3, #16]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d10d      	bne.n	80138a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013892:	f107 0208 	add.w	r2, r7, #8
 8013896:	4610      	mov	r0, r2
 8013898:	4798      	blx	r3
 801389a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	3301      	adds	r3, #1
 80138a0:	2207      	movs	r2, #7
 80138a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80138a4:	e00f      	b.n	80138c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80138a6:	6839      	ldr	r1, [r7, #0]
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f000 fa10 	bl	8013cce <USBD_CtlError>
        err++;
 80138ae:	7afb      	ldrb	r3, [r7, #11]
 80138b0:	3301      	adds	r3, #1
 80138b2:	72fb      	strb	r3, [r7, #11]
      break;
 80138b4:	e007      	b.n	80138c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80138b6:	6839      	ldr	r1, [r7, #0]
 80138b8:	6878      	ldr	r0, [r7, #4]
 80138ba:	f000 fa08 	bl	8013cce <USBD_CtlError>
      err++;
 80138be:	7afb      	ldrb	r3, [r7, #11]
 80138c0:	3301      	adds	r3, #1
 80138c2:	72fb      	strb	r3, [r7, #11]
      break;
 80138c4:	bf00      	nop
  }

  if (err != 0U)
 80138c6:	7afb      	ldrb	r3, [r7, #11]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d11e      	bne.n	801390a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	88db      	ldrh	r3, [r3, #6]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d016      	beq.n	8013902 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80138d4:	893b      	ldrh	r3, [r7, #8]
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d00e      	beq.n	80138f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80138da:	683b      	ldr	r3, [r7, #0]
 80138dc:	88da      	ldrh	r2, [r3, #6]
 80138de:	893b      	ldrh	r3, [r7, #8]
 80138e0:	4293      	cmp	r3, r2
 80138e2:	bf28      	it	cs
 80138e4:	4613      	movcs	r3, r2
 80138e6:	b29b      	uxth	r3, r3
 80138e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80138ea:	893b      	ldrh	r3, [r7, #8]
 80138ec:	461a      	mov	r2, r3
 80138ee:	68f9      	ldr	r1, [r7, #12]
 80138f0:	6878      	ldr	r0, [r7, #4]
 80138f2:	f000 fa69 	bl	8013dc8 <USBD_CtlSendData>
 80138f6:	e009      	b.n	801390c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80138f8:	6839      	ldr	r1, [r7, #0]
 80138fa:	6878      	ldr	r0, [r7, #4]
 80138fc:	f000 f9e7 	bl	8013cce <USBD_CtlError>
 8013900:	e004      	b.n	801390c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f000 faba 	bl	8013e7c <USBD_CtlSendStatus>
 8013908:	e000      	b.n	801390c <USBD_GetDescriptor+0x320>
    return;
 801390a:	bf00      	nop
  }
}
 801390c:	3710      	adds	r7, #16
 801390e:	46bd      	mov	sp, r7
 8013910:	bd80      	pop	{r7, pc}
 8013912:	bf00      	nop

08013914 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013914:	b580      	push	{r7, lr}
 8013916:	b084      	sub	sp, #16
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
 801391c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	889b      	ldrh	r3, [r3, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d131      	bne.n	801398a <USBD_SetAddress+0x76>
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	88db      	ldrh	r3, [r3, #6]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d12d      	bne.n	801398a <USBD_SetAddress+0x76>
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	885b      	ldrh	r3, [r3, #2]
 8013932:	2b7f      	cmp	r3, #127	@ 0x7f
 8013934:	d829      	bhi.n	801398a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	885b      	ldrh	r3, [r3, #2]
 801393a:	b2db      	uxtb	r3, r3
 801393c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013940:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013948:	b2db      	uxtb	r3, r3
 801394a:	2b03      	cmp	r3, #3
 801394c:	d104      	bne.n	8013958 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801394e:	6839      	ldr	r1, [r7, #0]
 8013950:	6878      	ldr	r0, [r7, #4]
 8013952:	f000 f9bc 	bl	8013cce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013956:	e01d      	b.n	8013994 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	7bfa      	ldrb	r2, [r7, #15]
 801395c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013960:	7bfb      	ldrb	r3, [r7, #15]
 8013962:	4619      	mov	r1, r3
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f001 fc05 	bl	8015174 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f000 fa86 	bl	8013e7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013970:	7bfb      	ldrb	r3, [r7, #15]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d004      	beq.n	8013980 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	2202      	movs	r2, #2
 801397a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801397e:	e009      	b.n	8013994 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	2201      	movs	r2, #1
 8013984:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013988:	e004      	b.n	8013994 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801398a:	6839      	ldr	r1, [r7, #0]
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f000 f99e 	bl	8013cce <USBD_CtlError>
  }
}
 8013992:	bf00      	nop
 8013994:	bf00      	nop
 8013996:	3710      	adds	r7, #16
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b084      	sub	sp, #16
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
 80139a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80139a6:	2300      	movs	r3, #0
 80139a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	885b      	ldrh	r3, [r3, #2]
 80139ae:	b2da      	uxtb	r2, r3
 80139b0:	4b4e      	ldr	r3, [pc, #312]	@ (8013aec <USBD_SetConfig+0x150>)
 80139b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80139b4:	4b4d      	ldr	r3, [pc, #308]	@ (8013aec <USBD_SetConfig+0x150>)
 80139b6:	781b      	ldrb	r3, [r3, #0]
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d905      	bls.n	80139c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80139bc:	6839      	ldr	r1, [r7, #0]
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	f000 f985 	bl	8013cce <USBD_CtlError>
    return USBD_FAIL;
 80139c4:	2303      	movs	r3, #3
 80139c6:	e08c      	b.n	8013ae2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80139ce:	b2db      	uxtb	r3, r3
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d002      	beq.n	80139da <USBD_SetConfig+0x3e>
 80139d4:	2b03      	cmp	r3, #3
 80139d6:	d029      	beq.n	8013a2c <USBD_SetConfig+0x90>
 80139d8:	e075      	b.n	8013ac6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80139da:	4b44      	ldr	r3, [pc, #272]	@ (8013aec <USBD_SetConfig+0x150>)
 80139dc:	781b      	ldrb	r3, [r3, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d020      	beq.n	8013a24 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80139e2:	4b42      	ldr	r3, [pc, #264]	@ (8013aec <USBD_SetConfig+0x150>)
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	461a      	mov	r2, r3
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80139ec:	4b3f      	ldr	r3, [pc, #252]	@ (8013aec <USBD_SetConfig+0x150>)
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	4619      	mov	r1, r3
 80139f2:	6878      	ldr	r0, [r7, #4]
 80139f4:	f7ff f84b 	bl	8012a8e <USBD_SetClassConfig>
 80139f8:	4603      	mov	r3, r0
 80139fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80139fc:	7bfb      	ldrb	r3, [r7, #15]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d008      	beq.n	8013a14 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013a02:	6839      	ldr	r1, [r7, #0]
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f000 f962 	bl	8013cce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2202      	movs	r2, #2
 8013a0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013a12:	e065      	b.n	8013ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f000 fa31 	bl	8013e7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	2203      	movs	r2, #3
 8013a1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013a22:	e05d      	b.n	8013ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013a24:	6878      	ldr	r0, [r7, #4]
 8013a26:	f000 fa29 	bl	8013e7c <USBD_CtlSendStatus>
      break;
 8013a2a:	e059      	b.n	8013ae0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8013aec <USBD_SetConfig+0x150>)
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d112      	bne.n	8013a5a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2202      	movs	r2, #2
 8013a38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8013aec <USBD_SetConfig+0x150>)
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	461a      	mov	r2, r3
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013a46:	4b29      	ldr	r3, [pc, #164]	@ (8013aec <USBD_SetConfig+0x150>)
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	4619      	mov	r1, r3
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f7ff f83a 	bl	8012ac6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f000 fa12 	bl	8013e7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013a58:	e042      	b.n	8013ae0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8013a5a:	4b24      	ldr	r3, [pc, #144]	@ (8013aec <USBD_SetConfig+0x150>)
 8013a5c:	781b      	ldrb	r3, [r3, #0]
 8013a5e:	461a      	mov	r2, r3
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	429a      	cmp	r2, r3
 8013a66:	d02a      	beq.n	8013abe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	685b      	ldr	r3, [r3, #4]
 8013a6c:	b2db      	uxtb	r3, r3
 8013a6e:	4619      	mov	r1, r3
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f7ff f828 	bl	8012ac6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013a76:	4b1d      	ldr	r3, [pc, #116]	@ (8013aec <USBD_SetConfig+0x150>)
 8013a78:	781b      	ldrb	r3, [r3, #0]
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013a80:	4b1a      	ldr	r3, [pc, #104]	@ (8013aec <USBD_SetConfig+0x150>)
 8013a82:	781b      	ldrb	r3, [r3, #0]
 8013a84:	4619      	mov	r1, r3
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f7ff f801 	bl	8012a8e <USBD_SetClassConfig>
 8013a8c:	4603      	mov	r3, r0
 8013a8e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013a90:	7bfb      	ldrb	r3, [r7, #15]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d00f      	beq.n	8013ab6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8013a96:	6839      	ldr	r1, [r7, #0]
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f000 f918 	bl	8013cce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	685b      	ldr	r3, [r3, #4]
 8013aa2:	b2db      	uxtb	r3, r3
 8013aa4:	4619      	mov	r1, r3
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7ff f80d 	bl	8012ac6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2202      	movs	r2, #2
 8013ab0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013ab4:	e014      	b.n	8013ae0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013ab6:	6878      	ldr	r0, [r7, #4]
 8013ab8:	f000 f9e0 	bl	8013e7c <USBD_CtlSendStatus>
      break;
 8013abc:	e010      	b.n	8013ae0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013abe:	6878      	ldr	r0, [r7, #4]
 8013ac0:	f000 f9dc 	bl	8013e7c <USBD_CtlSendStatus>
      break;
 8013ac4:	e00c      	b.n	8013ae0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8013ac6:	6839      	ldr	r1, [r7, #0]
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f000 f900 	bl	8013cce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013ace:	4b07      	ldr	r3, [pc, #28]	@ (8013aec <USBD_SetConfig+0x150>)
 8013ad0:	781b      	ldrb	r3, [r3, #0]
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f7fe fff6 	bl	8012ac6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013ada:	2303      	movs	r3, #3
 8013adc:	73fb      	strb	r3, [r7, #15]
      break;
 8013ade:	bf00      	nop
  }

  return ret;
 8013ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3710      	adds	r7, #16
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	200012e0 	.word	0x200012e0

08013af0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b082      	sub	sp, #8
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013afa:	683b      	ldr	r3, [r7, #0]
 8013afc:	88db      	ldrh	r3, [r3, #6]
 8013afe:	2b01      	cmp	r3, #1
 8013b00:	d004      	beq.n	8013b0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013b02:	6839      	ldr	r1, [r7, #0]
 8013b04:	6878      	ldr	r0, [r7, #4]
 8013b06:	f000 f8e2 	bl	8013cce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013b0a:	e023      	b.n	8013b54 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b12:	b2db      	uxtb	r3, r3
 8013b14:	2b02      	cmp	r3, #2
 8013b16:	dc02      	bgt.n	8013b1e <USBD_GetConfig+0x2e>
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	dc03      	bgt.n	8013b24 <USBD_GetConfig+0x34>
 8013b1c:	e015      	b.n	8013b4a <USBD_GetConfig+0x5a>
 8013b1e:	2b03      	cmp	r3, #3
 8013b20:	d00b      	beq.n	8013b3a <USBD_GetConfig+0x4a>
 8013b22:	e012      	b.n	8013b4a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	2200      	movs	r2, #0
 8013b28:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	3308      	adds	r3, #8
 8013b2e:	2201      	movs	r2, #1
 8013b30:	4619      	mov	r1, r3
 8013b32:	6878      	ldr	r0, [r7, #4]
 8013b34:	f000 f948 	bl	8013dc8 <USBD_CtlSendData>
        break;
 8013b38:	e00c      	b.n	8013b54 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	3304      	adds	r3, #4
 8013b3e:	2201      	movs	r2, #1
 8013b40:	4619      	mov	r1, r3
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f000 f940 	bl	8013dc8 <USBD_CtlSendData>
        break;
 8013b48:	e004      	b.n	8013b54 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013b4a:	6839      	ldr	r1, [r7, #0]
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f000 f8be 	bl	8013cce <USBD_CtlError>
        break;
 8013b52:	bf00      	nop
}
 8013b54:	bf00      	nop
 8013b56:	3708      	adds	r7, #8
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}

08013b5c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b082      	sub	sp, #8
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	3b01      	subs	r3, #1
 8013b70:	2b02      	cmp	r3, #2
 8013b72:	d81e      	bhi.n	8013bb2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	88db      	ldrh	r3, [r3, #6]
 8013b78:	2b02      	cmp	r3, #2
 8013b7a:	d004      	beq.n	8013b86 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013b7c:	6839      	ldr	r1, [r7, #0]
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 f8a5 	bl	8013cce <USBD_CtlError>
        break;
 8013b84:	e01a      	b.n	8013bbc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	2201      	movs	r2, #1
 8013b8a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d005      	beq.n	8013ba2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	f043 0202 	orr.w	r2, r3, #2
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	330c      	adds	r3, #12
 8013ba6:	2202      	movs	r2, #2
 8013ba8:	4619      	mov	r1, r3
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f000 f90c 	bl	8013dc8 <USBD_CtlSendData>
      break;
 8013bb0:	e004      	b.n	8013bbc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013bb2:	6839      	ldr	r1, [r7, #0]
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f000 f88a 	bl	8013cce <USBD_CtlError>
      break;
 8013bba:	bf00      	nop
  }
}
 8013bbc:	bf00      	nop
 8013bbe:	3708      	adds	r7, #8
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd80      	pop	{r7, pc}

08013bc4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b082      	sub	sp, #8
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013bce:	683b      	ldr	r3, [r7, #0]
 8013bd0:	885b      	ldrh	r3, [r3, #2]
 8013bd2:	2b01      	cmp	r3, #1
 8013bd4:	d107      	bne.n	8013be6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2201      	movs	r2, #1
 8013bda:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013bde:	6878      	ldr	r0, [r7, #4]
 8013be0:	f000 f94c 	bl	8013e7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013be4:	e013      	b.n	8013c0e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	885b      	ldrh	r3, [r3, #2]
 8013bea:	2b02      	cmp	r3, #2
 8013bec:	d10b      	bne.n	8013c06 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	889b      	ldrh	r3, [r3, #4]
 8013bf2:	0a1b      	lsrs	r3, r3, #8
 8013bf4:	b29b      	uxth	r3, r3
 8013bf6:	b2da      	uxtb	r2, r3
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013bfe:	6878      	ldr	r0, [r7, #4]
 8013c00:	f000 f93c 	bl	8013e7c <USBD_CtlSendStatus>
}
 8013c04:	e003      	b.n	8013c0e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013c06:	6839      	ldr	r1, [r7, #0]
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f000 f860 	bl	8013cce <USBD_CtlError>
}
 8013c0e:	bf00      	nop
 8013c10:	3708      	adds	r7, #8
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}

08013c16 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c16:	b580      	push	{r7, lr}
 8013c18:	b082      	sub	sp, #8
 8013c1a:	af00      	add	r7, sp, #0
 8013c1c:	6078      	str	r0, [r7, #4]
 8013c1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c26:	b2db      	uxtb	r3, r3
 8013c28:	3b01      	subs	r3, #1
 8013c2a:	2b02      	cmp	r3, #2
 8013c2c:	d80b      	bhi.n	8013c46 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	885b      	ldrh	r3, [r3, #2]
 8013c32:	2b01      	cmp	r3, #1
 8013c34:	d10c      	bne.n	8013c50 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2200      	movs	r2, #0
 8013c3a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013c3e:	6878      	ldr	r0, [r7, #4]
 8013c40:	f000 f91c 	bl	8013e7c <USBD_CtlSendStatus>
      }
      break;
 8013c44:	e004      	b.n	8013c50 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013c46:	6839      	ldr	r1, [r7, #0]
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	f000 f840 	bl	8013cce <USBD_CtlError>
      break;
 8013c4e:	e000      	b.n	8013c52 <USBD_ClrFeature+0x3c>
      break;
 8013c50:	bf00      	nop
  }
}
 8013c52:	bf00      	nop
 8013c54:	3708      	adds	r7, #8
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}

08013c5a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013c5a:	b580      	push	{r7, lr}
 8013c5c:	b084      	sub	sp, #16
 8013c5e:	af00      	add	r7, sp, #0
 8013c60:	6078      	str	r0, [r7, #4]
 8013c62:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	781a      	ldrb	r2, [r3, #0]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	3301      	adds	r3, #1
 8013c74:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	781a      	ldrb	r2, [r3, #0]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	3301      	adds	r3, #1
 8013c82:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013c84:	68f8      	ldr	r0, [r7, #12]
 8013c86:	f7ff fa16 	bl	80130b6 <SWAPBYTE>
 8013c8a:	4603      	mov	r3, r0
 8013c8c:	461a      	mov	r2, r3
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	3301      	adds	r3, #1
 8013c96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013c9e:	68f8      	ldr	r0, [r7, #12]
 8013ca0:	f7ff fa09 	bl	80130b6 <SWAPBYTE>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	3301      	adds	r3, #1
 8013cb0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	3301      	adds	r3, #1
 8013cb6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013cb8:	68f8      	ldr	r0, [r7, #12]
 8013cba:	f7ff f9fc 	bl	80130b6 <SWAPBYTE>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	80da      	strh	r2, [r3, #6]
}
 8013cc6:	bf00      	nop
 8013cc8:	3710      	adds	r7, #16
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}

08013cce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013cce:	b580      	push	{r7, lr}
 8013cd0:	b082      	sub	sp, #8
 8013cd2:	af00      	add	r7, sp, #0
 8013cd4:	6078      	str	r0, [r7, #4]
 8013cd6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013cd8:	2180      	movs	r1, #128	@ 0x80
 8013cda:	6878      	ldr	r0, [r7, #4]
 8013cdc:	f001 f9e0 	bl	80150a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013ce0:	2100      	movs	r1, #0
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f001 f9dc 	bl	80150a0 <USBD_LL_StallEP>
}
 8013ce8:	bf00      	nop
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d042      	beq.n	8013d8c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013d0a:	6938      	ldr	r0, [r7, #16]
 8013d0c:	f000 f842 	bl	8013d94 <USBD_GetLen>
 8013d10:	4603      	mov	r3, r0
 8013d12:	3301      	adds	r3, #1
 8013d14:	005b      	lsls	r3, r3, #1
 8013d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d1a:	d808      	bhi.n	8013d2e <USBD_GetString+0x3e>
 8013d1c:	6938      	ldr	r0, [r7, #16]
 8013d1e:	f000 f839 	bl	8013d94 <USBD_GetLen>
 8013d22:	4603      	mov	r3, r0
 8013d24:	3301      	adds	r3, #1
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	005b      	lsls	r3, r3, #1
 8013d2a:	b29a      	uxth	r2, r3
 8013d2c:	e001      	b.n	8013d32 <USBD_GetString+0x42>
 8013d2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013d36:	7dfb      	ldrb	r3, [r7, #23]
 8013d38:	68ba      	ldr	r2, [r7, #8]
 8013d3a:	4413      	add	r3, r2
 8013d3c:	687a      	ldr	r2, [r7, #4]
 8013d3e:	7812      	ldrb	r2, [r2, #0]
 8013d40:	701a      	strb	r2, [r3, #0]
  idx++;
 8013d42:	7dfb      	ldrb	r3, [r7, #23]
 8013d44:	3301      	adds	r3, #1
 8013d46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013d48:	7dfb      	ldrb	r3, [r7, #23]
 8013d4a:	68ba      	ldr	r2, [r7, #8]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	2203      	movs	r2, #3
 8013d50:	701a      	strb	r2, [r3, #0]
  idx++;
 8013d52:	7dfb      	ldrb	r3, [r7, #23]
 8013d54:	3301      	adds	r3, #1
 8013d56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013d58:	e013      	b.n	8013d82 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8013d5a:	7dfb      	ldrb	r3, [r7, #23]
 8013d5c:	68ba      	ldr	r2, [r7, #8]
 8013d5e:	4413      	add	r3, r2
 8013d60:	693a      	ldr	r2, [r7, #16]
 8013d62:	7812      	ldrb	r2, [r2, #0]
 8013d64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013d66:	693b      	ldr	r3, [r7, #16]
 8013d68:	3301      	adds	r3, #1
 8013d6a:	613b      	str	r3, [r7, #16]
    idx++;
 8013d6c:	7dfb      	ldrb	r3, [r7, #23]
 8013d6e:	3301      	adds	r3, #1
 8013d70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013d72:	7dfb      	ldrb	r3, [r7, #23]
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	4413      	add	r3, r2
 8013d78:	2200      	movs	r2, #0
 8013d7a:	701a      	strb	r2, [r3, #0]
    idx++;
 8013d7c:	7dfb      	ldrb	r3, [r7, #23]
 8013d7e:	3301      	adds	r3, #1
 8013d80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	781b      	ldrb	r3, [r3, #0]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d1e7      	bne.n	8013d5a <USBD_GetString+0x6a>
 8013d8a:	e000      	b.n	8013d8e <USBD_GetString+0x9e>
    return;
 8013d8c:	bf00      	nop
  }
}
 8013d8e:	3718      	adds	r7, #24
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}

08013d94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013d94:	b480      	push	{r7}
 8013d96:	b085      	sub	sp, #20
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013da4:	e005      	b.n	8013db2 <USBD_GetLen+0x1e>
  {
    len++;
 8013da6:	7bfb      	ldrb	r3, [r7, #15]
 8013da8:	3301      	adds	r3, #1
 8013daa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	3301      	adds	r3, #1
 8013db0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d1f5      	bne.n	8013da6 <USBD_GetLen+0x12>
  }

  return len;
 8013dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3714      	adds	r7, #20
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr

08013dc8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b084      	sub	sp, #16
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	60f8      	str	r0, [r7, #12]
 8013dd0:	60b9      	str	r1, [r7, #8]
 8013dd2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	2202      	movs	r2, #2
 8013dd8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	687a      	ldr	r2, [r7, #4]
 8013de0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	687a      	ldr	r2, [r7, #4]
 8013de6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	68ba      	ldr	r2, [r7, #8]
 8013dec:	2100      	movs	r1, #0
 8013dee:	68f8      	ldr	r0, [r7, #12]
 8013df0:	f001 f9df 	bl	80151b2 <USBD_LL_Transmit>

  return USBD_OK;
 8013df4:	2300      	movs	r3, #0
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3710      	adds	r7, #16
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}

08013dfe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013dfe:	b580      	push	{r7, lr}
 8013e00:	b084      	sub	sp, #16
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	60f8      	str	r0, [r7, #12]
 8013e06:	60b9      	str	r1, [r7, #8]
 8013e08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	68ba      	ldr	r2, [r7, #8]
 8013e0e:	2100      	movs	r1, #0
 8013e10:	68f8      	ldr	r0, [r7, #12]
 8013e12:	f001 f9ce 	bl	80151b2 <USBD_LL_Transmit>

  return USBD_OK;
 8013e16:	2300      	movs	r3, #0
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3710      	adds	r7, #16
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b084      	sub	sp, #16
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	60f8      	str	r0, [r7, #12]
 8013e28:	60b9      	str	r1, [r7, #8]
 8013e2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2203      	movs	r2, #3
 8013e30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	687a      	ldr	r2, [r7, #4]
 8013e38:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	68ba      	ldr	r2, [r7, #8]
 8013e48:	2100      	movs	r1, #0
 8013e4a:	68f8      	ldr	r0, [r7, #12]
 8013e4c:	f001 f9d2 	bl	80151f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013e50:	2300      	movs	r3, #0
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	3710      	adds	r7, #16
 8013e56:	46bd      	mov	sp, r7
 8013e58:	bd80      	pop	{r7, pc}

08013e5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013e5a:	b580      	push	{r7, lr}
 8013e5c:	b084      	sub	sp, #16
 8013e5e:	af00      	add	r7, sp, #0
 8013e60:	60f8      	str	r0, [r7, #12]
 8013e62:	60b9      	str	r1, [r7, #8]
 8013e64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	68ba      	ldr	r2, [r7, #8]
 8013e6a:	2100      	movs	r1, #0
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f001 f9c1 	bl	80151f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3710      	adds	r7, #16
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b082      	sub	sp, #8
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2204      	movs	r2, #4
 8013e88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013e8c:	2300      	movs	r3, #0
 8013e8e:	2200      	movs	r2, #0
 8013e90:	2100      	movs	r1, #0
 8013e92:	6878      	ldr	r0, [r7, #4]
 8013e94:	f001 f98d 	bl	80151b2 <USBD_LL_Transmit>

  return USBD_OK;
 8013e98:	2300      	movs	r3, #0
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3708      	adds	r7, #8
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}

08013ea2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013ea2:	b580      	push	{r7, lr}
 8013ea4:	b082      	sub	sp, #8
 8013ea6:	af00      	add	r7, sp, #0
 8013ea8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	2205      	movs	r2, #5
 8013eae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	2100      	movs	r1, #0
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f001 f99b 	bl	80151f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013ebe:	2300      	movs	r3, #0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3708      	adds	r7, #8
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <SPIF_Delay>:
bool     SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size);

/***********************************************************************************************************/

void SPIF_Delay(uint32_t Delay)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
#if SPIF_RTOS == SPIF_RTOS_DISABLE
  HAL_Delay(Delay);
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f7f2 fbbd 	bl	8006650 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8013ed6:	bf00      	nop
 8013ed8:	3708      	adds	r7, #8
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}

08013ede <SPIF_Lock>:

/***********************************************************************************************************/

void SPIF_Lock(SPIF_HandleTypeDef *Handle)
{
 8013ede:	b580      	push	{r7, lr}
 8013ee0:	b082      	sub	sp, #8
 8013ee2:	af00      	add	r7, sp, #0
 8013ee4:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8013ee6:	e002      	b.n	8013eee <SPIF_Lock+0x10>
  {
    SPIF_Delay(1);
 8013ee8:	2001      	movs	r0, #1
 8013eea:	f7ff ffed 	bl	8013ec8 <SPIF_Delay>
  while (Handle->Lock)
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	7b1b      	ldrb	r3, [r3, #12]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d1f8      	bne.n	8013ee8 <SPIF_Lock+0xa>
  }
  Handle->Lock = 1;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	2201      	movs	r2, #1
 8013efa:	731a      	strb	r2, [r3, #12]
}
 8013efc:	bf00      	nop
 8013efe:	3708      	adds	r7, #8
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd80      	pop	{r7, pc}

08013f04 <SPIF_UnLock>:

/***********************************************************************************************************/

void SPIF_UnLock(SPIF_HandleTypeDef *Handle)
{
 8013f04:	b480      	push	{r7}
 8013f06:	b083      	sub	sp, #12
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	731a      	strb	r2, [r3, #12]
}
 8013f12:	bf00      	nop
 8013f14:	370c      	adds	r7, #12
 8013f16:	46bd      	mov	sp, r7
 8013f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1c:	4770      	bx	lr

08013f1e <SPIF_CsPin>:

/***********************************************************************************************************/

void SPIF_CsPin(SPIF_HandleTypeDef *Handle, bool Select)
{
 8013f1e:	b580      	push	{r7, lr}
 8013f20:	b084      	sub	sp, #16
 8013f22:	af00      	add	r7, sp, #0
 8013f24:	6078      	str	r0, [r7, #4]
 8013f26:	460b      	mov	r3, r1
 8013f28:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(Handle->Gpio, Handle->Pin, (GPIO_PinState)Select);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6858      	ldr	r0, [r3, #4]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	691b      	ldr	r3, [r3, #16]
 8013f32:	b29b      	uxth	r3, r3
 8013f34:	78fa      	ldrb	r2, [r7, #3]
 8013f36:	4619      	mov	r1, r3
 8013f38:	f7f4 fa04 	bl	8008344 <HAL_GPIO_WritePin>
  for (int i = 0; i < 10; i++);
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	60fb      	str	r3, [r7, #12]
 8013f40:	e002      	b.n	8013f48 <SPIF_CsPin+0x2a>
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	3301      	adds	r3, #1
 8013f46:	60fb      	str	r3, [r7, #12]
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	2b09      	cmp	r3, #9
 8013f4c:	ddf9      	ble.n	8013f42 <SPIF_CsPin+0x24>
}
 8013f4e:	bf00      	nop
 8013f50:	bf00      	nop
 8013f52:	3710      	adds	r7, #16
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}

08013f58 <SPIF_TransmitReceive>:

/***********************************************************************************************************/

bool SPIF_TransmitReceive(SPIF_HandleTypeDef *Handle, uint8_t *Tx, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b088      	sub	sp, #32
 8013f5c:	af02      	add	r7, sp, #8
 8013f5e:	60f8      	str	r0, [r7, #12]
 8013f60:	60b9      	str	r1, [r7, #8]
 8013f62:	607a      	str	r2, [r7, #4]
 8013f64:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013f66:	2300      	movs	r3, #0
 8013f68:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_TransmitReceive(Handle->HSpi, Tx, Rx, Size, Timeout) == HAL_OK)
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	6818      	ldr	r0, [r3, #0]
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	b29a      	uxth	r2, r3
 8013f72:	6a3b      	ldr	r3, [r7, #32]
 8013f74:	9300      	str	r3, [sp, #0]
 8013f76:	4613      	mov	r3, r2
 8013f78:	687a      	ldr	r2, [r7, #4]
 8013f7a:	68b9      	ldr	r1, [r7, #8]
 8013f7c:	f7f9 fb53 	bl	800d626 <HAL_SPI_TransmitReceive>
 8013f80:	4603      	mov	r3, r0
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d101      	bne.n	8013f8a <SPIF_TransmitReceive+0x32>
  {
    retVal = true;
 8013f86:	2301      	movs	r3, #1
 8013f88:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3718      	adds	r7, #24
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}

08013f94 <SPIF_Transmit>:

/***********************************************************************************************************/

bool SPIF_Transmit(SPIF_HandleTypeDef *Handle, uint8_t *Tx, size_t Size, uint32_t Timeout)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b086      	sub	sp, #24
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	60f8      	str	r0, [r7, #12]
 8013f9c:	60b9      	str	r1, [r7, #8]
 8013f9e:	607a      	str	r2, [r7, #4]
 8013fa0:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Transmit(Handle->HSpi, Tx, Size, Timeout) == HAL_OK)
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	6818      	ldr	r0, [r3, #0]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	b29a      	uxth	r2, r3
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	68b9      	ldr	r1, [r7, #8]
 8013fb2:	f7f9 f88a 	bl	800d0ca <HAL_SPI_Transmit>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d101      	bne.n	8013fc0 <SPIF_Transmit+0x2c>
  {
    retVal = true;
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fc2:	4618      	mov	r0, r3
 8013fc4:	3718      	adds	r7, #24
 8013fc6:	46bd      	mov	sp, r7
 8013fc8:	bd80      	pop	{r7, pc}

08013fca <SPIF_Receive>:

/***********************************************************************************************************/

bool SPIF_Receive(SPIF_HandleTypeDef *Handle, uint8_t *Rx, size_t Size, uint32_t Timeout)
{
 8013fca:	b580      	push	{r7, lr}
 8013fcc:	b086      	sub	sp, #24
 8013fce:	af00      	add	r7, sp, #0
 8013fd0:	60f8      	str	r0, [r7, #12]
 8013fd2:	60b9      	str	r1, [r7, #8]
 8013fd4:	607a      	str	r2, [r7, #4]
 8013fd6:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8013fd8:	2300      	movs	r3, #0
 8013fda:	75fb      	strb	r3, [r7, #23]
#if (SPIF_PLATFORM == SPIF_PLATFORM_HAL)
  if (HAL_SPI_Receive(Handle->HSpi, Rx, Size, Timeout) == HAL_OK)
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	6818      	ldr	r0, [r3, #0]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	b29a      	uxth	r2, r3
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	68b9      	ldr	r1, [r7, #8]
 8013fe8:	f7f9 f9e5 	bl	800d3b6 <HAL_SPI_Receive>
 8013fec:	4603      	mov	r3, r0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d101      	bne.n	8013ff6 <SPIF_Receive+0x2c>
  {
    retVal = true;
 8013ff2:	2301      	movs	r3, #1
 8013ff4:	75fb      	strb	r3, [r7, #23]
        break;
      }
    }
  }
#endif
  return retVal;
 8013ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	3718      	adds	r7, #24
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}

08014000 <SPIF_WriteEnable>:

/***********************************************************************************************************/

bool SPIF_WriteEnable(SPIF_HandleTypeDef *Handle)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b084      	sub	sp, #16
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8014008:	2301      	movs	r3, #1
 801400a:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEENABLE};
 801400c:	2306      	movs	r3, #6
 801400e:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8014010:	2100      	movs	r1, #0
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f7ff ff83 	bl	8013f1e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8014018:	f107 010c 	add.w	r1, r7, #12
 801401c:	2364      	movs	r3, #100	@ 0x64
 801401e:	2201      	movs	r2, #1
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f7ff ffb7 	bl	8013f94 <SPIF_Transmit>
 8014026:	4603      	mov	r3, r0
 8014028:	f083 0301 	eor.w	r3, r3, #1
 801402c:	b2db      	uxtb	r3, r3
 801402e:	2b00      	cmp	r3, #0
 8014030:	d001      	beq.n	8014036 <SPIF_WriteEnable+0x36>
  {
    retVal = false;
 8014032:	2300      	movs	r3, #0
 8014034:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteEnable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 8014036:	2101      	movs	r1, #1
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f7ff ff70 	bl	8013f1e <SPIF_CsPin>
  return retVal;
 801403e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014040:	4618      	mov	r0, r3
 8014042:	3710      	adds	r7, #16
 8014044:	46bd      	mov	sp, r7
 8014046:	bd80      	pop	{r7, pc}

08014048 <SPIF_WriteDisable>:

/***********************************************************************************************************/

bool SPIF_WriteDisable(SPIF_HandleTypeDef *Handle)
{
 8014048:	b580      	push	{r7, lr}
 801404a:	b084      	sub	sp, #16
 801404c:	af00      	add	r7, sp, #0
 801404e:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 8014050:	2301      	movs	r3, #1
 8014052:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[1] = {SPIF_CMD_WRITEDISABLE};
 8014054:	2304      	movs	r3, #4
 8014056:	733b      	strb	r3, [r7, #12]
  SPIF_CsPin(Handle, 0);
 8014058:	2100      	movs	r1, #0
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f7ff ff5f 	bl	8013f1e <SPIF_CsPin>
  if (SPIF_Transmit(Handle, tx, 1, 100) == false)
 8014060:	f107 010c 	add.w	r1, r7, #12
 8014064:	2364      	movs	r3, #100	@ 0x64
 8014066:	2201      	movs	r2, #1
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f7ff ff93 	bl	8013f94 <SPIF_Transmit>
 801406e:	4603      	mov	r3, r0
 8014070:	f083 0301 	eor.w	r3, r3, #1
 8014074:	b2db      	uxtb	r3, r3
 8014076:	2b00      	cmp	r3, #0
 8014078:	d001      	beq.n	801407e <SPIF_WriteDisable+0x36>
  {
    retVal = false;
 801407a:	2300      	movs	r3, #0
 801407c:	73fb      	strb	r3, [r7, #15]
    dprintf("SPIF_WriteDisable() Error\r\n");
  }
  SPIF_CsPin(Handle, 1);
 801407e:	2101      	movs	r1, #1
 8014080:	6878      	ldr	r0, [r7, #4]
 8014082:	f7ff ff4c 	bl	8013f1e <SPIF_CsPin>
  return retVal;
 8014086:	7bfb      	ldrb	r3, [r7, #15]
}
 8014088:	4618      	mov	r0, r3
 801408a:	3710      	adds	r7, #16
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}

08014090 <SPIF_ReadReg1>:

/***********************************************************************************************************/

uint8_t SPIF_ReadReg1(SPIF_HandleTypeDef *Handle)
{
 8014090:	b580      	push	{r7, lr}
 8014092:	b086      	sub	sp, #24
 8014094:	af02      	add	r7, sp, #8
 8014096:	6078      	str	r0, [r7, #4]
  uint8_t retVal = 0;
 8014098:	2300      	movs	r3, #0
 801409a:	73fb      	strb	r3, [r7, #15]
  uint8_t tx[2] = {SPIF_CMD_READSTATUS1, SPIF_DUMMY_BYTE};
 801409c:	f24a 5305 	movw	r3, #42245	@ 0xa505
 80140a0:	81bb      	strh	r3, [r7, #12]
  uint8_t rx[2];
  SPIF_CsPin(Handle, 0);
 80140a2:	2100      	movs	r1, #0
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f7ff ff3a 	bl	8013f1e <SPIF_CsPin>
  if (SPIF_TransmitReceive(Handle, tx, rx, 2, 100) == true)
 80140aa:	f107 0208 	add.w	r2, r7, #8
 80140ae:	f107 010c 	add.w	r1, r7, #12
 80140b2:	2364      	movs	r3, #100	@ 0x64
 80140b4:	9300      	str	r3, [sp, #0]
 80140b6:	2302      	movs	r3, #2
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f7ff ff4d 	bl	8013f58 <SPIF_TransmitReceive>
 80140be:	4603      	mov	r3, r0
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d001      	beq.n	80140c8 <SPIF_ReadReg1+0x38>
  {
    retVal = rx[1];
 80140c4:	7a7b      	ldrb	r3, [r7, #9]
 80140c6:	73fb      	strb	r3, [r7, #15]
  }
  SPIF_CsPin(Handle, 1);
 80140c8:	2101      	movs	r1, #1
 80140ca:	6878      	ldr	r0, [r7, #4]
 80140cc:	f7ff ff27 	bl	8013f1e <SPIF_CsPin>
  return retVal;
 80140d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3710      	adds	r7, #16
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bd80      	pop	{r7, pc}

080140da <SPIF_WaitForWriting>:
}

/***********************************************************************************************************/

bool SPIF_WaitForWriting(SPIF_HandleTypeDef *Handle, uint32_t Timeout)
{
 80140da:	b580      	push	{r7, lr}
 80140dc:	b084      	sub	sp, #16
 80140de:	af00      	add	r7, sp, #0
 80140e0:	6078      	str	r0, [r7, #4]
 80140e2:	6039      	str	r1, [r7, #0]
  bool retVal = false;
 80140e4:	2300      	movs	r3, #0
 80140e6:	73fb      	strb	r3, [r7, #15]
  uint32_t startTime = HAL_GetTick();
 80140e8:	f7f2 fa9a 	bl	8006620 <HAL_GetTick>
 80140ec:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    SPIF_Delay(1);
 80140ee:	2001      	movs	r0, #1
 80140f0:	f7ff feea 	bl	8013ec8 <SPIF_Delay>
    if (HAL_GetTick() - startTime >= Timeout)
 80140f4:	f7f2 fa94 	bl	8006620 <HAL_GetTick>
 80140f8:	4602      	mov	r2, r0
 80140fa:	68bb      	ldr	r3, [r7, #8]
 80140fc:	1ad3      	subs	r3, r2, r3
 80140fe:	683a      	ldr	r2, [r7, #0]
 8014100:	429a      	cmp	r2, r3
 8014102:	d90a      	bls.n	801411a <SPIF_WaitForWriting+0x40>
    {
      dprintf("SPIF_WaitForWriting() TIMEOUT\r\n");
      break;
    }
    if ((SPIF_ReadReg1(Handle) & SPIF_STATUS1_BUSY) == 0)
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f7ff ffc3 	bl	8014090 <SPIF_ReadReg1>
 801410a:	4603      	mov	r3, r0
 801410c:	f003 0301 	and.w	r3, r3, #1
 8014110:	2b00      	cmp	r3, #0
 8014112:	d1ec      	bne.n	80140ee <SPIF_WaitForWriting+0x14>
    {
      retVal = true;
 8014114:	2301      	movs	r3, #1
 8014116:	73fb      	strb	r3, [r7, #15]
      break;
 8014118:	e000      	b.n	801411c <SPIF_WaitForWriting+0x42>
      break;
 801411a:	bf00      	nop
    }
  }
  return retVal;
 801411c:	7bfb      	ldrb	r3, [r7, #15]
}
 801411e:	4618      	mov	r0, r3
 8014120:	3710      	adds	r7, #16
 8014122:	46bd      	mov	sp, r7
 8014124:	bd80      	pop	{r7, pc}
	...

08014128 <SPIF_FindChip>:

/***********************************************************************************************************/

bool SPIF_FindChip(SPIF_HandleTypeDef *Handle)
{
 8014128:	b580      	push	{r7, lr}
 801412a:	b088      	sub	sp, #32
 801412c:	af02      	add	r7, sp, #8
 801412e:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = {SPIF_CMD_JEDECID, 0xFF, 0xFF, 0xFF};
 8014130:	f06f 0360 	mvn.w	r3, #96	@ 0x60
 8014134:	613b      	str	r3, [r7, #16]
  uint8_t rx[4];
  bool retVal = false;
 8014136:	2300      	movs	r3, #0
 8014138:	75fb      	strb	r3, [r7, #23]
  do
  {
    dprintf("SPIF_FindChip()\r\n");
    SPIF_CsPin(Handle, 0);
 801413a:	2100      	movs	r1, #0
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f7ff feee 	bl	8013f1e <SPIF_CsPin>
    if (SPIF_TransmitReceive(Handle, tx, rx, 4, 100) == false)
 8014142:	f107 020c 	add.w	r2, r7, #12
 8014146:	f107 0110 	add.w	r1, r7, #16
 801414a:	2364      	movs	r3, #100	@ 0x64
 801414c:	9300      	str	r3, [sp, #0]
 801414e:	2304      	movs	r3, #4
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f7ff ff01 	bl	8013f58 <SPIF_TransmitReceive>
 8014156:	4603      	mov	r3, r0
 8014158:	f083 0301 	eor.w	r3, r3, #1
 801415c:	b2db      	uxtb	r3, r3
 801415e:	2b00      	cmp	r3, #0
 8014160:	d004      	beq.n	801416c <SPIF_FindChip+0x44>
    {
      SPIF_CsPin(Handle, 1);
 8014162:	2101      	movs	r1, #1
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f7ff feda 	bl	8013f1e <SPIF_CsPin>
      break;
 801416a:	e16f      	b.n	801444c <SPIF_FindChip+0x324>
    }
    SPIF_CsPin(Handle, 1);
 801416c:	2101      	movs	r1, #1
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f7ff fed5 	bl	8013f1e <SPIF_CsPin>
    dprintf("CHIP ID: 0x%02X%02X%02X\r\n", rx[1], rx[2], rx[3]);
    Handle->Manufactor = rx[1];
 8014174:	7b7a      	ldrb	r2, [r7, #13]
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	721a      	strb	r2, [r3, #8]
    Handle->MemType = rx[2];
 801417a:	7bba      	ldrb	r2, [r7, #14]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	72da      	strb	r2, [r3, #11]
    Handle->Size = rx[3];
 8014180:	7bfa      	ldrb	r2, [r7, #15]
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	725a      	strb	r2, [r3, #9]

    dprintf("SPIF MANUFACTURE: ");
    switch (Handle->Manufactor)
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	7a1b      	ldrb	r3, [r3, #8]
 801418a:	2bef      	cmp	r3, #239	@ 0xef
 801418c:	f000 80f0 	beq.w	8014370 <SPIF_FindChip+0x248>
 8014190:	2bef      	cmp	r3, #239	@ 0xef
 8014192:	f300 80e9 	bgt.w	8014368 <SPIF_FindChip+0x240>
 8014196:	2bc8      	cmp	r3, #200	@ 0xc8
 8014198:	f300 80e6 	bgt.w	8014368 <SPIF_FindChip+0x240>
 801419c:	2b85      	cmp	r3, #133	@ 0x85
 801419e:	da0c      	bge.n	80141ba <SPIF_FindChip+0x92>
 80141a0:	2b62      	cmp	r3, #98	@ 0x62
 80141a2:	f000 80e7 	beq.w	8014374 <SPIF_FindChip+0x24c>
 80141a6:	2b62      	cmp	r3, #98	@ 0x62
 80141a8:	f300 80de 	bgt.w	8014368 <SPIF_FindChip+0x240>
 80141ac:	2b20      	cmp	r3, #32
 80141ae:	f300 80d9 	bgt.w	8014364 <SPIF_FindChip+0x23c>
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	f300 8090 	bgt.w	80142d8 <SPIF_FindChip+0x1b0>
 80141b8:	e0d6      	b.n	8014368 <SPIF_FindChip+0x240>
 80141ba:	3b85      	subs	r3, #133	@ 0x85
 80141bc:	2b43      	cmp	r3, #67	@ 0x43
 80141be:	f200 80d3 	bhi.w	8014368 <SPIF_FindChip+0x240>
 80141c2:	a201      	add	r2, pc, #4	@ (adr r2, 80141c8 <SPIF_FindChip+0xa0>)
 80141c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141c8:	08014379 	.word	0x08014379
 80141cc:	08014369 	.word	0x08014369
 80141d0:	08014369 	.word	0x08014369
 80141d4:	08014369 	.word	0x08014369
 80141d8:	08014379 	.word	0x08014379
 80141dc:	08014369 	.word	0x08014369
 80141e0:	08014369 	.word	0x08014369
 80141e4:	08014379 	.word	0x08014379
 80141e8:	08014369 	.word	0x08014369
 80141ec:	08014369 	.word	0x08014369
 80141f0:	08014369 	.word	0x08014369
 80141f4:	08014369 	.word	0x08014369
 80141f8:	08014369 	.word	0x08014369
 80141fc:	08014369 	.word	0x08014369
 8014200:	08014369 	.word	0x08014369
 8014204:	08014369 	.word	0x08014369
 8014208:	08014369 	.word	0x08014369
 801420c:	08014369 	.word	0x08014369
 8014210:	08014369 	.word	0x08014369
 8014214:	08014369 	.word	0x08014369
 8014218:	08014369 	.word	0x08014369
 801421c:	08014369 	.word	0x08014369
 8014220:	08014369 	.word	0x08014369
 8014224:	08014369 	.word	0x08014369
 8014228:	08014379 	.word	0x08014379
 801422c:	08014369 	.word	0x08014369
 8014230:	08014369 	.word	0x08014369
 8014234:	08014369 	.word	0x08014369
 8014238:	08014379 	.word	0x08014379
 801423c:	08014369 	.word	0x08014369
 8014240:	08014369 	.word	0x08014369
 8014244:	08014369 	.word	0x08014369
 8014248:	08014369 	.word	0x08014369
 801424c:	08014369 	.word	0x08014369
 8014250:	08014369 	.word	0x08014369
 8014254:	08014369 	.word	0x08014369
 8014258:	08014369 	.word	0x08014369
 801425c:	08014369 	.word	0x08014369
 8014260:	08014369 	.word	0x08014369
 8014264:	08014369 	.word	0x08014369
 8014268:	08014379 	.word	0x08014379
 801426c:	08014369 	.word	0x08014369
 8014270:	08014369 	.word	0x08014369
 8014274:	08014369 	.word	0x08014369
 8014278:	08014369 	.word	0x08014369
 801427c:	08014369 	.word	0x08014369
 8014280:	08014369 	.word	0x08014369
 8014284:	08014369 	.word	0x08014369
 8014288:	08014369 	.word	0x08014369
 801428c:	08014369 	.word	0x08014369
 8014290:	08014369 	.word	0x08014369
 8014294:	08014369 	.word	0x08014369
 8014298:	08014369 	.word	0x08014369
 801429c:	08014369 	.word	0x08014369
 80142a0:	08014369 	.word	0x08014369
 80142a4:	08014369 	.word	0x08014369
 80142a8:	08014369 	.word	0x08014369
 80142ac:	08014369 	.word	0x08014369
 80142b0:	08014379 	.word	0x08014379
 80142b4:	08014369 	.word	0x08014369
 80142b8:	08014369 	.word	0x08014369
 80142bc:	08014379 	.word	0x08014379
 80142c0:	08014369 	.word	0x08014369
 80142c4:	08014369 	.word	0x08014369
 80142c8:	08014369 	.word	0x08014369
 80142cc:	08014369 	.word	0x08014369
 80142d0:	08014369 	.word	0x08014369
 80142d4:	08014379 	.word	0x08014379
 80142d8:	3b01      	subs	r3, #1
 80142da:	2b1f      	cmp	r3, #31
 80142dc:	d844      	bhi.n	8014368 <SPIF_FindChip+0x240>
 80142de:	a201      	add	r2, pc, #4	@ (adr r2, 80142e4 <SPIF_FindChip+0x1bc>)
 80142e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142e4:	0801437d 	.word	0x0801437d
 80142e8:	08014369 	.word	0x08014369
 80142ec:	08014369 	.word	0x08014369
 80142f0:	0801437d 	.word	0x0801437d
 80142f4:	08014369 	.word	0x08014369
 80142f8:	08014369 	.word	0x08014369
 80142fc:	08014369 	.word	0x08014369
 8014300:	08014369 	.word	0x08014369
 8014304:	08014369 	.word	0x08014369
 8014308:	08014369 	.word	0x08014369
 801430c:	08014369 	.word	0x08014369
 8014310:	08014369 	.word	0x08014369
 8014314:	08014369 	.word	0x08014369
 8014318:	08014369 	.word	0x08014369
 801431c:	08014369 	.word	0x08014369
 8014320:	08014369 	.word	0x08014369
 8014324:	08014369 	.word	0x08014369
 8014328:	08014369 	.word	0x08014369
 801432c:	08014369 	.word	0x08014369
 8014330:	08014369 	.word	0x08014369
 8014334:	08014369 	.word	0x08014369
 8014338:	08014369 	.word	0x08014369
 801433c:	08014369 	.word	0x08014369
 8014340:	08014369 	.word	0x08014369
 8014344:	08014369 	.word	0x08014369
 8014348:	08014369 	.word	0x08014369
 801434c:	08014369 	.word	0x08014369
 8014350:	0801437d 	.word	0x0801437d
 8014354:	08014369 	.word	0x08014369
 8014358:	08014369 	.word	0x08014369
 801435c:	08014369 	.word	0x08014369
 8014360:	0801437d 	.word	0x0801437d
 8014364:	2b37      	cmp	r3, #55	@ 0x37
 8014366:	d00b      	beq.n	8014380 <SPIF_FindChip+0x258>
      break;
    case SPIF_MANUFACTOR_PUYA:
      dprintf("PUYA");
      break;
    default:
      Handle->Manufactor = SPIF_MANUFACTOR_ERROR;
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2200      	movs	r2, #0
 801436c:	721a      	strb	r2, [r3, #8]
      dprintf("ERROR");
      break;
 801436e:	e008      	b.n	8014382 <SPIF_FindChip+0x25a>
      break;
 8014370:	bf00      	nop
 8014372:	e006      	b.n	8014382 <SPIF_FindChip+0x25a>
      break;
 8014374:	bf00      	nop
 8014376:	e004      	b.n	8014382 <SPIF_FindChip+0x25a>
      break;
 8014378:	bf00      	nop
 801437a:	e002      	b.n	8014382 <SPIF_FindChip+0x25a>
      break;
 801437c:	bf00      	nop
 801437e:	e000      	b.n	8014382 <SPIF_FindChip+0x25a>
      break;
 8014380:	bf00      	nop
    }
    dprintf(" - MEMTYPE: 0x%02X", Handle->MemType);
    dprintf(" - SIZE: ");
    switch (Handle->Size)
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	7a5b      	ldrb	r3, [r3, #9]
 8014386:	3b11      	subs	r3, #17
 8014388:	2b0f      	cmp	r3, #15
 801438a:	d84e      	bhi.n	801442a <SPIF_FindChip+0x302>
 801438c:	a201      	add	r2, pc, #4	@ (adr r2, 8014394 <SPIF_FindChip+0x26c>)
 801438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014392:	bf00      	nop
 8014394:	080143d5 	.word	0x080143d5
 8014398:	080143dd 	.word	0x080143dd
 801439c:	080143e5 	.word	0x080143e5
 80143a0:	080143ed 	.word	0x080143ed
 80143a4:	080143f5 	.word	0x080143f5
 80143a8:	080143fd 	.word	0x080143fd
 80143ac:	08014405 	.word	0x08014405
 80143b0:	0801440d 	.word	0x0801440d
 80143b4:	08014417 	.word	0x08014417
 80143b8:	0801442b 	.word	0x0801442b
 80143bc:	0801442b 	.word	0x0801442b
 80143c0:	0801442b 	.word	0x0801442b
 80143c4:	0801442b 	.word	0x0801442b
 80143c8:	0801442b 	.word	0x0801442b
 80143cc:	0801442b 	.word	0x0801442b
 80143d0:	08014421 	.word	0x08014421
    {
    case SPIF_SIZE_1MBIT:
      Handle->BlockCnt = 2;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2202      	movs	r2, #2
 80143d8:	61da      	str	r2, [r3, #28]
      dprintf("1 MBIT\r\n");
      break;
 80143da:	e02a      	b.n	8014432 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_2MBIT:
      Handle->BlockCnt = 4;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2204      	movs	r2, #4
 80143e0:	61da      	str	r2, [r3, #28]
      dprintf("2 MBIT\r\n");
      break;
 80143e2:	e026      	b.n	8014432 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_4MBIT:
      Handle->BlockCnt = 8;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	2208      	movs	r2, #8
 80143e8:	61da      	str	r2, [r3, #28]
      dprintf("4 MBIT\r\n");
      break;
 80143ea:	e022      	b.n	8014432 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_8MBIT:
      Handle->BlockCnt = 16;
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	2210      	movs	r2, #16
 80143f0:	61da      	str	r2, [r3, #28]
      dprintf("8 MBIT\r\n");
      break;
 80143f2:	e01e      	b.n	8014432 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_16MBIT:
      Handle->BlockCnt = 32;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2220      	movs	r2, #32
 80143f8:	61da      	str	r2, [r3, #28]
      dprintf("16 MBIT\r\n");
      break;
 80143fa:	e01a      	b.n	8014432 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_32MBIT:
      Handle->BlockCnt = 64;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2240      	movs	r2, #64	@ 0x40
 8014400:	61da      	str	r2, [r3, #28]
      dprintf("32 MBIT\r\n");
      break;
 8014402:	e016      	b.n	8014432 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_64MBIT:
      Handle->BlockCnt = 128;
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	2280      	movs	r2, #128	@ 0x80
 8014408:	61da      	str	r2, [r3, #28]
      dprintf("64 MBIT\r\n");
      break;
 801440a:	e012      	b.n	8014432 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_128MBIT:
      Handle->BlockCnt = 256;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014412:	61da      	str	r2, [r3, #28]
      dprintf("128 MBIT\r\n");
      break;
 8014414:	e00d      	b.n	8014432 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_256MBIT:
      Handle->BlockCnt = 512;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801441c:	61da      	str	r2, [r3, #28]
      dprintf("256 MBIT\r\n");
      break;
 801441e:	e008      	b.n	8014432 <SPIF_FindChip+0x30a>
    case SPIF_SIZE_512MBIT:
      Handle->BlockCnt = 1024;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8014426:	61da      	str	r2, [r3, #28]
      dprintf("512 MBIT\r\n");
      break;
 8014428:	e003      	b.n	8014432 <SPIF_FindChip+0x30a>
    default:
      Handle->Size = SPIF_SIZE_ERROR;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	2200      	movs	r2, #0
 801442e:	725a      	strb	r2, [r3, #9]
      dprintf("ERROR\r\n");
      break;
 8014430:	bf00      	nop
    }

    Handle->SectorCnt = Handle->BlockCnt * 16;
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	69db      	ldr	r3, [r3, #28]
 8014436:	011a      	lsls	r2, r3, #4
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	619a      	str	r2, [r3, #24]
    Handle->PageCnt = (Handle->SectorCnt * SPIF_SECTOR_SIZE) / SPIF_PAGE_SIZE;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	699b      	ldr	r3, [r3, #24]
 8014440:	031b      	lsls	r3, r3, #12
 8014442:	0a1a      	lsrs	r2, r3, #8
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	615a      	str	r2, [r3, #20]
    dprintf("SPIF SECTOR CNT: %ld\r\n", Handle->SectorCnt);
    dprintf("SPIF PAGE CNT: %ld\r\n", Handle->PageCnt);
    dprintf("SPIF STATUS1: 0x%02X\r\n", SPIF_ReadReg1(Handle));
    dprintf("SPIF STATUS2: 0x%02X\r\n", SPIF_ReadReg2(Handle));
    dprintf("SPIF STATUS3: 0x%02X\r\n", SPIF_ReadReg3(Handle));
    retVal = true;
 8014448:	2301      	movs	r3, #1
 801444a:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 801444c:	7dfb      	ldrb	r3, [r7, #23]
}
 801444e:	4618      	mov	r0, r3
 8014450:	3718      	adds	r7, #24
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop

08014458 <SPIF_WriteFn>:

/***********************************************************************************************************/

bool SPIF_WriteFn(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b08a      	sub	sp, #40	@ 0x28
 801445c:	af00      	add	r7, sp, #0
 801445e:	60f8      	str	r0, [r7, #12]
 8014460:	60b9      	str	r1, [r7, #8]
 8014462:	607a      	str	r2, [r7, #4]
 8014464:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 8014466:	2300      	movs	r3, #0
 8014468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t address = 0, maximum = SPIF_PAGE_SIZE - Offset;
 801446c:	2300      	movs	r3, #0
 801446e:	623b      	str	r3, [r7, #32]
 8014470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014472:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8014476:	61fb      	str	r3, [r7, #28]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_WritePage() START PAGE %ld\r\n", PageNumber);
    if (PageNumber >= Handle->PageCnt)
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	695b      	ldr	r3, [r3, #20]
 801447c:	68ba      	ldr	r2, [r7, #8]
 801447e:	429a      	cmp	r2, r3
 8014480:	f080 8084 	bcs.w	801458c <SPIF_WriteFn+0x134>
    {
      dprintf("SPIF_WritePage() ERROR PageNumber\r\n");
      break;
    }
    if (Offset >= SPIF_PAGE_SIZE)
 8014484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014486:	2bff      	cmp	r3, #255	@ 0xff
 8014488:	f200 8082 	bhi.w	8014590 <SPIF_WriteFn+0x138>
    {
      dprintf("SPIF_WritePage() ERROR Offset\r\n");
      break;
    }
    if (Size > maximum)
 801448c:	683a      	ldr	r2, [r7, #0]
 801448e:	69fb      	ldr	r3, [r7, #28]
 8014490:	429a      	cmp	r2, r3
 8014492:	d901      	bls.n	8014498 <SPIF_WriteFn+0x40>
    {
      Size = maximum;
 8014494:	69fb      	ldr	r3, [r7, #28]
 8014496:	603b      	str	r3, [r7, #0]
    }
    address = SPIF_PageToAddress(PageNumber) + Offset;
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	021b      	lsls	r3, r3, #8
 801449c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801449e:	4413      	add	r3, r2
 80144a0:	623b      	str	r3, [r7, #32]
        }
        dprintf(", 0x%02X", Data[i]);
      }
      dprintf("\r\n}\r\n");
#endif
    if (SPIF_WriteEnable(Handle) == false)
 80144a2:	68f8      	ldr	r0, [r7, #12]
 80144a4:	f7ff fdac 	bl	8014000 <SPIF_WriteEnable>
 80144a8:	4603      	mov	r3, r0
 80144aa:	f083 0301 	eor.w	r3, r3, #1
 80144ae:	b2db      	uxtb	r3, r3
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d16f      	bne.n	8014594 <SPIF_WriteFn+0x13c>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 80144b4:	2100      	movs	r1, #0
 80144b6:	68f8      	ldr	r0, [r7, #12]
 80144b8:	f7ff fd31 	bl	8013f1e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	69db      	ldr	r3, [r3, #28]
 80144c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144c4:	d322      	bcc.n	801450c <SPIF_WriteFn+0xb4>
    {
      tx[0] = SPIF_CMD_PAGEPROG4ADD;
 80144c6:	2312      	movs	r3, #18
 80144c8:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0xFF000000) >> 24;
 80144ca:	6a3b      	ldr	r3, [r7, #32]
 80144cc:	0e1b      	lsrs	r3, r3, #24
 80144ce:	b2db      	uxtb	r3, r3
 80144d0:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x00FF0000) >> 16;
 80144d2:	6a3b      	ldr	r3, [r7, #32]
 80144d4:	0c1b      	lsrs	r3, r3, #16
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x0000FF00) >> 8;
 80144da:	6a3b      	ldr	r3, [r7, #32]
 80144dc:	0a1b      	lsrs	r3, r3, #8
 80144de:	b2db      	uxtb	r3, r3
 80144e0:	75fb      	strb	r3, [r7, #23]
      tx[4] = (address & 0x000000FF);
 80144e2:	6a3b      	ldr	r3, [r7, #32]
 80144e4:	b2db      	uxtb	r3, r3
 80144e6:	763b      	strb	r3, [r7, #24]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80144e8:	f107 0114 	add.w	r1, r7, #20
 80144ec:	2364      	movs	r3, #100	@ 0x64
 80144ee:	2205      	movs	r2, #5
 80144f0:	68f8      	ldr	r0, [r7, #12]
 80144f2:	f7ff fd4f 	bl	8013f94 <SPIF_Transmit>
 80144f6:	4603      	mov	r3, r0
 80144f8:	f083 0301 	eor.w	r3, r3, #1
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d023      	beq.n	801454a <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8014502:	2101      	movs	r1, #1
 8014504:	68f8      	ldr	r0, [r7, #12]
 8014506:	f7ff fd0a 	bl	8013f1e <SPIF_CsPin>
        break;
 801450a:	e044      	b.n	8014596 <SPIF_WriteFn+0x13e>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_PAGEPROG3ADD;
 801450c:	2302      	movs	r3, #2
 801450e:	753b      	strb	r3, [r7, #20]
      tx[1] = (address & 0x00FF0000) >> 16;
 8014510:	6a3b      	ldr	r3, [r7, #32]
 8014512:	0c1b      	lsrs	r3, r3, #16
 8014514:	b2db      	uxtb	r3, r3
 8014516:	757b      	strb	r3, [r7, #21]
      tx[2] = (address & 0x0000FF00) >> 8;
 8014518:	6a3b      	ldr	r3, [r7, #32]
 801451a:	0a1b      	lsrs	r3, r3, #8
 801451c:	b2db      	uxtb	r3, r3
 801451e:	75bb      	strb	r3, [r7, #22]
      tx[3] = (address & 0x000000FF);
 8014520:	6a3b      	ldr	r3, [r7, #32]
 8014522:	b2db      	uxtb	r3, r3
 8014524:	75fb      	strb	r3, [r7, #23]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 8014526:	f107 0114 	add.w	r1, r7, #20
 801452a:	2364      	movs	r3, #100	@ 0x64
 801452c:	2204      	movs	r2, #4
 801452e:	68f8      	ldr	r0, [r7, #12]
 8014530:	f7ff fd30 	bl	8013f94 <SPIF_Transmit>
 8014534:	4603      	mov	r3, r0
 8014536:	f083 0301 	eor.w	r3, r3, #1
 801453a:	b2db      	uxtb	r3, r3
 801453c:	2b00      	cmp	r3, #0
 801453e:	d004      	beq.n	801454a <SPIF_WriteFn+0xf2>
      {
        SPIF_CsPin(Handle, 1);
 8014540:	2101      	movs	r1, #1
 8014542:	68f8      	ldr	r0, [r7, #12]
 8014544:	f7ff fceb 	bl	8013f1e <SPIF_CsPin>
        break;
 8014548:	e025      	b.n	8014596 <SPIF_WriteFn+0x13e>
      }
    }
    if (SPIF_Transmit(Handle, Data, Size, 1000) == false)
 801454a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801454e:	683a      	ldr	r2, [r7, #0]
 8014550:	6879      	ldr	r1, [r7, #4]
 8014552:	68f8      	ldr	r0, [r7, #12]
 8014554:	f7ff fd1e 	bl	8013f94 <SPIF_Transmit>
 8014558:	4603      	mov	r3, r0
 801455a:	f083 0301 	eor.w	r3, r3, #1
 801455e:	b2db      	uxtb	r3, r3
 8014560:	2b00      	cmp	r3, #0
 8014562:	d004      	beq.n	801456e <SPIF_WriteFn+0x116>
    {
      SPIF_CsPin(Handle, 1);
 8014564:	2101      	movs	r1, #1
 8014566:	68f8      	ldr	r0, [r7, #12]
 8014568:	f7ff fcd9 	bl	8013f1e <SPIF_CsPin>
      break;
 801456c:	e013      	b.n	8014596 <SPIF_WriteFn+0x13e>
    }
    SPIF_CsPin(Handle, 1);
 801456e:	2101      	movs	r1, #1
 8014570:	68f8      	ldr	r0, [r7, #12]
 8014572:	f7ff fcd4 	bl	8013f1e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 100))
 8014576:	2164      	movs	r1, #100	@ 0x64
 8014578:	68f8      	ldr	r0, [r7, #12]
 801457a:	f7ff fdae 	bl	80140da <SPIF_WaitForWriting>
 801457e:	4603      	mov	r3, r0
 8014580:	2b00      	cmp	r3, #0
 8014582:	d008      	beq.n	8014596 <SPIF_WriteFn+0x13e>
    {
      dprintf("SPIF_WritePage() %d BYTES WITERN DONE AFTER %ld ms\r\n", (uint16_t)Size, HAL_GetTick() - dbgTime);
      retVal = true;
 8014584:	2301      	movs	r3, #1
 8014586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801458a:	e004      	b.n	8014596 <SPIF_WriteFn+0x13e>
      break;
 801458c:	bf00      	nop
 801458e:	e002      	b.n	8014596 <SPIF_WriteFn+0x13e>
      break;
 8014590:	bf00      	nop
 8014592:	e000      	b.n	8014596 <SPIF_WriteFn+0x13e>
      break;
 8014594:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f7ff fd56 	bl	8014048 <SPIF_WriteDisable>
  return retVal;
 801459c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3728      	adds	r7, #40	@ 0x28
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}

080145a8 <SPIF_ReadFn>:

/***********************************************************************************************************/

bool SPIF_ReadFn(SPIF_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, uint32_t Size)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b086      	sub	sp, #24
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	60f8      	str	r0, [r7, #12]
 80145b0:	60b9      	str	r1, [r7, #8]
 80145b2:	607a      	str	r2, [r7, #4]
 80145b4:	603b      	str	r3, [r7, #0]
  bool retVal = false;
 80145b6:	2300      	movs	r3, #0
 80145b8:	75fb      	strb	r3, [r7, #23]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_ReadAddress() START ADDRESS %ld\r\n", Address);
    SPIF_CsPin(Handle, 0);
 80145ba:	2100      	movs	r1, #0
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	f7ff fcae 	bl	8013f1e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	69db      	ldr	r3, [r3, #28]
 80145c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80145ca:	d322      	bcc.n	8014612 <SPIF_ReadFn+0x6a>
    {
      tx[0] = SPIF_CMD_READDATA4ADD;
 80145cc:	2313      	movs	r3, #19
 80145ce:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0xFF000000) >> 24;
 80145d0:	68bb      	ldr	r3, [r7, #8]
 80145d2:	0e1b      	lsrs	r3, r3, #24
 80145d4:	b2db      	uxtb	r3, r3
 80145d6:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x00FF0000) >> 16;
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	0c1b      	lsrs	r3, r3, #16
 80145dc:	b2db      	uxtb	r3, r3
 80145de:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x0000FF00) >> 8;
 80145e0:	68bb      	ldr	r3, [r7, #8]
 80145e2:	0a1b      	lsrs	r3, r3, #8
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	74fb      	strb	r3, [r7, #19]
      tx[4] = (Address & 0x000000FF);
 80145e8:	68bb      	ldr	r3, [r7, #8]
 80145ea:	b2db      	uxtb	r3, r3
 80145ec:	753b      	strb	r3, [r7, #20]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 80145ee:	f107 0110 	add.w	r1, r7, #16
 80145f2:	2364      	movs	r3, #100	@ 0x64
 80145f4:	2205      	movs	r2, #5
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f7ff fccc 	bl	8013f94 <SPIF_Transmit>
 80145fc:	4603      	mov	r3, r0
 80145fe:	f083 0301 	eor.w	r3, r3, #1
 8014602:	b2db      	uxtb	r3, r3
 8014604:	2b00      	cmp	r3, #0
 8014606:	d023      	beq.n	8014650 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8014608:	2101      	movs	r1, #1
 801460a:	68f8      	ldr	r0, [r7, #12]
 801460c:	f7ff fc87 	bl	8013f1e <SPIF_CsPin>
        break;
 8014610:	e036      	b.n	8014680 <SPIF_ReadFn+0xd8>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_READDATA3ADD;
 8014612:	2303      	movs	r3, #3
 8014614:	743b      	strb	r3, [r7, #16]
      tx[1] = (Address & 0x00FF0000) >> 16;
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	0c1b      	lsrs	r3, r3, #16
 801461a:	b2db      	uxtb	r3, r3
 801461c:	747b      	strb	r3, [r7, #17]
      tx[2] = (Address & 0x0000FF00) >> 8;
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	0a1b      	lsrs	r3, r3, #8
 8014622:	b2db      	uxtb	r3, r3
 8014624:	74bb      	strb	r3, [r7, #18]
      tx[3] = (Address & 0x000000FF);
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	b2db      	uxtb	r3, r3
 801462a:	74fb      	strb	r3, [r7, #19]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 801462c:	f107 0110 	add.w	r1, r7, #16
 8014630:	2364      	movs	r3, #100	@ 0x64
 8014632:	2204      	movs	r2, #4
 8014634:	68f8      	ldr	r0, [r7, #12]
 8014636:	f7ff fcad 	bl	8013f94 <SPIF_Transmit>
 801463a:	4603      	mov	r3, r0
 801463c:	f083 0301 	eor.w	r3, r3, #1
 8014640:	b2db      	uxtb	r3, r3
 8014642:	2b00      	cmp	r3, #0
 8014644:	d004      	beq.n	8014650 <SPIF_ReadFn+0xa8>
      {
        SPIF_CsPin(Handle, 1);
 8014646:	2101      	movs	r1, #1
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f7ff fc68 	bl	8013f1e <SPIF_CsPin>
        break;
 801464e:	e017      	b.n	8014680 <SPIF_ReadFn+0xd8>
      }
    }
    if (SPIF_Receive(Handle, Data, Size, 2000) == false)
 8014650:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8014654:	683a      	ldr	r2, [r7, #0]
 8014656:	6879      	ldr	r1, [r7, #4]
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f7ff fcb6 	bl	8013fca <SPIF_Receive>
 801465e:	4603      	mov	r3, r0
 8014660:	f083 0301 	eor.w	r3, r3, #1
 8014664:	b2db      	uxtb	r3, r3
 8014666:	2b00      	cmp	r3, #0
 8014668:	d004      	beq.n	8014674 <SPIF_ReadFn+0xcc>
    {
      SPIF_CsPin(Handle, 1);
 801466a:	2101      	movs	r1, #1
 801466c:	68f8      	ldr	r0, [r7, #12]
 801466e:	f7ff fc56 	bl	8013f1e <SPIF_CsPin>
      break;
 8014672:	e005      	b.n	8014680 <SPIF_ReadFn+0xd8>
    }
    SPIF_CsPin(Handle, 1);
 8014674:	2101      	movs	r1, #1
 8014676:	68f8      	ldr	r0, [r7, #12]
 8014678:	f7ff fc51 	bl	8013f1e <SPIF_CsPin>
      }
      dprintf(", 0x%02X", Data[i]);
    }
    dprintf("\r\n}\r\n");
#endif
    retVal = true;
 801467c:	2301      	movs	r3, #1
 801467e:	75fb      	strb	r3, [r7, #23]

  } while (0);

  return retVal;
 8014680:	7dfb      	ldrb	r3, [r7, #23]
}
 8014682:	4618      	mov	r0, r3
 8014684:	3718      	adds	r7, #24
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}

0801468a <SPIF_Init>:
  * @param  Pin: Pin of CS
  *
  * @retval bool: true or false
  */
bool SPIF_Init(SPIF_HandleTypeDef *Handle, SPI_HandleTypeDef *HSpi, GPIO_TypeDef *Gpio, uint16_t Pin)
{
 801468a:	b580      	push	{r7, lr}
 801468c:	b086      	sub	sp, #24
 801468e:	af00      	add	r7, sp, #0
 8014690:	60f8      	str	r0, [r7, #12]
 8014692:	60b9      	str	r1, [r7, #8]
 8014694:	607a      	str	r2, [r7, #4]
 8014696:	807b      	strh	r3, [r7, #2]
  bool retVal = false;
 8014698:	2300      	movs	r3, #0
 801469a:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HSpi == NULL) || (Gpio == NULL) || (Handle->Inited == 1))
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d03a      	beq.n	8014718 <SPIF_Init+0x8e>
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d037      	beq.n	8014718 <SPIF_Init+0x8e>
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d034      	beq.n	8014718 <SPIF_Init+0x8e>
 80146ae:	68fb      	ldr	r3, [r7, #12]
 80146b0:	7a9b      	ldrb	r3, [r3, #10]
 80146b2:	2b01      	cmp	r3, #1
 80146b4:	d030      	beq.n	8014718 <SPIF_Init+0x8e>
    {
      dprintf("SPIF_Init() Error, Wrong Parameter\r\n");
      break;
    }
    memset(Handle, 0, sizeof(SPIF_HandleTypeDef));
 80146b6:	2220      	movs	r2, #32
 80146b8:	2100      	movs	r1, #0
 80146ba:	68f8      	ldr	r0, [r7, #12]
 80146bc:	f002 fdc9 	bl	8017252 <memset>
    Handle->HSpi = HSpi;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	68ba      	ldr	r2, [r7, #8]
 80146c4:	601a      	str	r2, [r3, #0]
    Handle->Gpio = Gpio;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	687a      	ldr	r2, [r7, #4]
 80146ca:	605a      	str	r2, [r3, #4]
    Handle->Pin = Pin;
 80146cc:	887a      	ldrh	r2, [r7, #2]
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	611a      	str	r2, [r3, #16]
    SPIF_CsPin(Handle, 1);
 80146d2:	2101      	movs	r1, #1
 80146d4:	68f8      	ldr	r0, [r7, #12]
 80146d6:	f7ff fc22 	bl	8013f1e <SPIF_CsPin>
    /* wait for stable VCC */
    while (HAL_GetTick() < 20)
 80146da:	e002      	b.n	80146e2 <SPIF_Init+0x58>
    {
      SPIF_Delay(1);
 80146dc:	2001      	movs	r0, #1
 80146de:	f7ff fbf3 	bl	8013ec8 <SPIF_Delay>
    while (HAL_GetTick() < 20)
 80146e2:	f7f1 ff9d 	bl	8006620 <HAL_GetTick>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b13      	cmp	r3, #19
 80146ea:	d9f7      	bls.n	80146dc <SPIF_Init+0x52>
    }
    if (SPIF_WriteDisable(Handle) == false)
 80146ec:	68f8      	ldr	r0, [r7, #12]
 80146ee:	f7ff fcab 	bl	8014048 <SPIF_WriteDisable>
 80146f2:	4603      	mov	r3, r0
 80146f4:	f083 0301 	eor.w	r3, r3, #1
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d10b      	bne.n	8014716 <SPIF_Init+0x8c>
    {
      break;
    }
    retVal = SPIF_FindChip(Handle);
 80146fe:	68f8      	ldr	r0, [r7, #12]
 8014700:	f7ff fd12 	bl	8014128 <SPIF_FindChip>
 8014704:	4603      	mov	r3, r0
 8014706:	75fb      	strb	r3, [r7, #23]
    if (retVal)
 8014708:	7dfb      	ldrb	r3, [r7, #23]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d004      	beq.n	8014718 <SPIF_Init+0x8e>
    {
      Handle->Inited = 1;
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	2201      	movs	r2, #1
 8014712:	729a      	strb	r2, [r3, #10]
 8014714:	e000      	b.n	8014718 <SPIF_Init+0x8e>
      break;
 8014716:	bf00      	nop
      dprintf("SPIF_Init() Done\r\n");
    }

  } while (0);

  return retVal;
 8014718:	7dfb      	ldrb	r3, [r7, #23]
}
 801471a:	4618      	mov	r0, r3
 801471c:	3718      	adds	r7, #24
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <SPIF_EraseSector>:
  * @param  Sector: Selected Sector
  *
  * @retval bool: true or false
  */
bool SPIF_EraseSector(SPIF_HandleTypeDef *Handle, uint32_t Sector)
{
 8014722:	b580      	push	{r7, lr}
 8014724:	b086      	sub	sp, #24
 8014726:	af00      	add	r7, sp, #0
 8014728:	6078      	str	r0, [r7, #4]
 801472a:	6039      	str	r1, [r7, #0]
  SPIF_Lock(Handle);
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f7ff fbd6 	bl	8013ede <SPIF_Lock>
  bool retVal = false;
 8014732:	2300      	movs	r3, #0
 8014734:	75fb      	strb	r3, [r7, #23]
  uint32_t address = Sector * SPIF_SECTOR_SIZE;
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	031b      	lsls	r3, r3, #12
 801473a:	613b      	str	r3, [r7, #16]
  {
#if SPIF_DEBUG != SPIF_DEBUG_DISABLE
    uint32_t dbgTime = HAL_GetTick();
#endif
    dprintf("SPIF_EraseSector() START SECTOR %ld\r\n", Sector);
    if (Sector >= Handle->SectorCnt)
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	699b      	ldr	r3, [r3, #24]
 8014740:	683a      	ldr	r2, [r7, #0]
 8014742:	429a      	cmp	r2, r3
 8014744:	d262      	bcs.n	801480c <SPIF_EraseSector+0xea>
    {
      dprintf("SPIF_EraseSector() ERROR Sector NUMBER\r\n");
      break;
    }
    if (SPIF_WriteEnable(Handle) == false)
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f7ff fc5a 	bl	8014000 <SPIF_WriteEnable>
 801474c:	4603      	mov	r3, r0
 801474e:	f083 0301 	eor.w	r3, r3, #1
 8014752:	b2db      	uxtb	r3, r3
 8014754:	2b00      	cmp	r3, #0
 8014756:	d15b      	bne.n	8014810 <SPIF_EraseSector+0xee>
    {
      break;
    }
    SPIF_CsPin(Handle, 0);
 8014758:	2100      	movs	r1, #0
 801475a:	6878      	ldr	r0, [r7, #4]
 801475c:	f7ff fbdf 	bl	8013f1e <SPIF_CsPin>
    if (Handle->BlockCnt >= 512)
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	69db      	ldr	r3, [r3, #28]
 8014764:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014768:	d322      	bcc.n	80147b0 <SPIF_EraseSector+0x8e>
    {
      tx[0] = SPIF_CMD_SECTORERASE4ADD;
 801476a:	2321      	movs	r3, #33	@ 0x21
 801476c:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0xFF000000) >> 24;
 801476e:	693b      	ldr	r3, [r7, #16]
 8014770:	0e1b      	lsrs	r3, r3, #24
 8014772:	b2db      	uxtb	r3, r3
 8014774:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x00FF0000) >> 16;
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	0c1b      	lsrs	r3, r3, #16
 801477a:	b2db      	uxtb	r3, r3
 801477c:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x0000FF00) >> 8;
 801477e:	693b      	ldr	r3, [r7, #16]
 8014780:	0a1b      	lsrs	r3, r3, #8
 8014782:	b2db      	uxtb	r3, r3
 8014784:	72fb      	strb	r3, [r7, #11]
      tx[4] = (address & 0x000000FF);
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	b2db      	uxtb	r3, r3
 801478a:	733b      	strb	r3, [r7, #12]
      if (SPIF_Transmit(Handle, tx, 5, 100) == false)
 801478c:	f107 0108 	add.w	r1, r7, #8
 8014790:	2364      	movs	r3, #100	@ 0x64
 8014792:	2205      	movs	r2, #5
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f7ff fbfd 	bl	8013f94 <SPIF_Transmit>
 801479a:	4603      	mov	r3, r0
 801479c:	f083 0301 	eor.w	r3, r3, #1
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d023      	beq.n	80147ee <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80147a6:	2101      	movs	r1, #1
 80147a8:	6878      	ldr	r0, [r7, #4]
 80147aa:	f7ff fbb8 	bl	8013f1e <SPIF_CsPin>
        break;
 80147ae:	e030      	b.n	8014812 <SPIF_EraseSector+0xf0>
      }
    }
    else
    {
      tx[0] = SPIF_CMD_SECTORERASE3ADD;
 80147b0:	2320      	movs	r3, #32
 80147b2:	723b      	strb	r3, [r7, #8]
      tx[1] = (address & 0x00FF0000) >> 16;
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	0c1b      	lsrs	r3, r3, #16
 80147b8:	b2db      	uxtb	r3, r3
 80147ba:	727b      	strb	r3, [r7, #9]
      tx[2] = (address & 0x0000FF00) >> 8;
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	0a1b      	lsrs	r3, r3, #8
 80147c0:	b2db      	uxtb	r3, r3
 80147c2:	72bb      	strb	r3, [r7, #10]
      tx[3] = (address & 0x000000FF);
 80147c4:	693b      	ldr	r3, [r7, #16]
 80147c6:	b2db      	uxtb	r3, r3
 80147c8:	72fb      	strb	r3, [r7, #11]
      if (SPIF_Transmit(Handle, tx, 4, 100) == false)
 80147ca:	f107 0108 	add.w	r1, r7, #8
 80147ce:	2364      	movs	r3, #100	@ 0x64
 80147d0:	2204      	movs	r2, #4
 80147d2:	6878      	ldr	r0, [r7, #4]
 80147d4:	f7ff fbde 	bl	8013f94 <SPIF_Transmit>
 80147d8:	4603      	mov	r3, r0
 80147da:	f083 0301 	eor.w	r3, r3, #1
 80147de:	b2db      	uxtb	r3, r3
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d004      	beq.n	80147ee <SPIF_EraseSector+0xcc>
      {
        SPIF_CsPin(Handle, 1);
 80147e4:	2101      	movs	r1, #1
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f7ff fb99 	bl	8013f1e <SPIF_CsPin>
        break;
 80147ec:	e011      	b.n	8014812 <SPIF_EraseSector+0xf0>
      }
    }
    SPIF_CsPin(Handle, 1);
 80147ee:	2101      	movs	r1, #1
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7ff fb94 	bl	8013f1e <SPIF_CsPin>
    if (SPIF_WaitForWriting(Handle, 1000))
 80147f6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f7ff fc6d 	bl	80140da <SPIF_WaitForWriting>
 8014800:	4603      	mov	r3, r0
 8014802:	2b00      	cmp	r3, #0
 8014804:	d005      	beq.n	8014812 <SPIF_EraseSector+0xf0>
    {
      dprintf("SPIF_EraseSector() DONE AFTER %ld ms\r\n", HAL_GetTick() - dbgTime);
      retVal = true;
 8014806:	2301      	movs	r3, #1
 8014808:	75fb      	strb	r3, [r7, #23]
 801480a:	e002      	b.n	8014812 <SPIF_EraseSector+0xf0>
      break;
 801480c:	bf00      	nop
 801480e:	e000      	b.n	8014812 <SPIF_EraseSector+0xf0>
      break;
 8014810:	bf00      	nop
    }

  } while (0);

  SPIF_WriteDisable(Handle);
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	f7ff fc18 	bl	8014048 <SPIF_WriteDisable>
  SPIF_UnLock(Handle);
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f7ff fb73 	bl	8013f04 <SPIF_UnLock>
  return retVal;
 801481e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3718      	adds	r7, #24
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <SPIF_WritePage>:
  * @param  Offset: The start point for writing data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_WritePage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b088      	sub	sp, #32
 801482c:	af02      	add	r7, sp, #8
 801482e:	60f8      	str	r0, [r7, #12]
 8014830:	60b9      	str	r1, [r7, #8]
 8014832:	607a      	str	r2, [r7, #4]
 8014834:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8014836:	68f8      	ldr	r0, [r7, #12]
 8014838:	f7ff fb51 	bl	8013ede <SPIF_Lock>
  bool retVal = false;
 801483c:	2300      	movs	r3, #0
 801483e:	75fb      	strb	r3, [r7, #23]
  retVal = SPIF_WriteFn(Handle, PageNumber, Data, Size, Offset);
 8014840:	6a3b      	ldr	r3, [r7, #32]
 8014842:	9300      	str	r3, [sp, #0]
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	687a      	ldr	r2, [r7, #4]
 8014848:	68b9      	ldr	r1, [r7, #8]
 801484a:	68f8      	ldr	r0, [r7, #12]
 801484c:	f7ff fe04 	bl	8014458 <SPIF_WriteFn>
 8014850:	4603      	mov	r3, r0
 8014852:	75fb      	strb	r3, [r7, #23]
  SPIF_UnLock(Handle);
 8014854:	68f8      	ldr	r0, [r7, #12]
 8014856:	f7ff fb55 	bl	8013f04 <SPIF_UnLock>
  return retVal;
 801485a:	7dfb      	ldrb	r3, [r7, #23]
}
 801485c:	4618      	mov	r0, r3
 801485e:	3718      	adds	r7, #24
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <SPIF_ReadPage>:
  * @param  Offset: The start point for Reading data. (in byte)
  *
  * @retval bool: true or false
  */
bool SPIF_ReadPage(SPIF_HandleTypeDef *Handle, uint32_t PageNumber, uint8_t *Data, uint32_t Size, uint32_t Offset)
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b088      	sub	sp, #32
 8014868:	af00      	add	r7, sp, #0
 801486a:	60f8      	str	r0, [r7, #12]
 801486c:	60b9      	str	r1, [r7, #8]
 801486e:	607a      	str	r2, [r7, #4]
 8014870:	603b      	str	r3, [r7, #0]
  SPIF_Lock(Handle);
 8014872:	68f8      	ldr	r0, [r7, #12]
 8014874:	f7ff fb33 	bl	8013ede <SPIF_Lock>
  bool retVal = false;
 8014878:	2300      	movs	r3, #0
 801487a:	77fb      	strb	r3, [r7, #31]
  uint32_t address = SPIF_PageToAddress(PageNumber) + Offset;
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	021b      	lsls	r3, r3, #8
 8014880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014882:	4413      	add	r3, r2
 8014884:	61bb      	str	r3, [r7, #24]
  uint32_t maximum = SPIF_PAGE_SIZE - Offset;
 8014886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014888:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801488c:	617b      	str	r3, [r7, #20]
  if (Size > maximum)
 801488e:	683a      	ldr	r2, [r7, #0]
 8014890:	697b      	ldr	r3, [r7, #20]
 8014892:	429a      	cmp	r2, r3
 8014894:	d901      	bls.n	801489a <SPIF_ReadPage+0x36>
  {
    Size = maximum;
 8014896:	697b      	ldr	r3, [r7, #20]
 8014898:	603b      	str	r3, [r7, #0]
  }
  retVal = SPIF_ReadFn(Handle, address, Data, Size);
 801489a:	683b      	ldr	r3, [r7, #0]
 801489c:	687a      	ldr	r2, [r7, #4]
 801489e:	69b9      	ldr	r1, [r7, #24]
 80148a0:	68f8      	ldr	r0, [r7, #12]
 80148a2:	f7ff fe81 	bl	80145a8 <SPIF_ReadFn>
 80148a6:	4603      	mov	r3, r0
 80148a8:	77fb      	strb	r3, [r7, #31]
  SPIF_UnLock(Handle);
 80148aa:	68f8      	ldr	r0, [r7, #12]
 80148ac:	f7ff fb2a 	bl	8013f04 <SPIF_UnLock>
  return retVal;
 80148b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3720      	adds	r7, #32
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
	...

080148bc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80148bc:	b580      	push	{r7, lr}
 80148be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80148c0:	2200      	movs	r2, #0
 80148c2:	4912      	ldr	r1, [pc, #72]	@ (801490c <MX_USB_Device_Init+0x50>)
 80148c4:	4812      	ldr	r0, [pc, #72]	@ (8014910 <MX_USB_Device_Init+0x54>)
 80148c6:	f7fe f865 	bl	8012994 <USBD_Init>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d001      	beq.n	80148d4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80148d0:	f7ed faef 	bl	8001eb2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80148d4:	490f      	ldr	r1, [pc, #60]	@ (8014914 <MX_USB_Device_Init+0x58>)
 80148d6:	480e      	ldr	r0, [pc, #56]	@ (8014910 <MX_USB_Device_Init+0x54>)
 80148d8:	f7fe f88c 	bl	80129f4 <USBD_RegisterClass>
 80148dc:	4603      	mov	r3, r0
 80148de:	2b00      	cmp	r3, #0
 80148e0:	d001      	beq.n	80148e6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80148e2:	f7ed fae6 	bl	8001eb2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80148e6:	490c      	ldr	r1, [pc, #48]	@ (8014918 <MX_USB_Device_Init+0x5c>)
 80148e8:	4809      	ldr	r0, [pc, #36]	@ (8014910 <MX_USB_Device_Init+0x54>)
 80148ea:	f7fd ff83 	bl	80127f4 <USBD_CDC_RegisterInterface>
 80148ee:	4603      	mov	r3, r0
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d001      	beq.n	80148f8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80148f4:	f7ed fadd 	bl	8001eb2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80148f8:	4805      	ldr	r0, [pc, #20]	@ (8014910 <MX_USB_Device_Init+0x54>)
 80148fa:	f7fe f8b1 	bl	8012a60 <USBD_Start>
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	d001      	beq.n	8014908 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014904:	f7ed fad5 	bl	8001eb2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014908:	bf00      	nop
 801490a:	bd80      	pop	{r7, pc}
 801490c:	200000d8 	.word	0x200000d8
 8014910:	200012e4 	.word	0x200012e4
 8014914:	20000044 	.word	0x20000044
 8014918:	200000c4 	.word	0x200000c4

0801491c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014920:	2200      	movs	r2, #0
 8014922:	4905      	ldr	r1, [pc, #20]	@ (8014938 <CDC_Init_FS+0x1c>)
 8014924:	4805      	ldr	r0, [pc, #20]	@ (801493c <CDC_Init_FS+0x20>)
 8014926:	f7fd ff7f 	bl	8012828 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801492a:	4905      	ldr	r1, [pc, #20]	@ (8014940 <CDC_Init_FS+0x24>)
 801492c:	4803      	ldr	r0, [pc, #12]	@ (801493c <CDC_Init_FS+0x20>)
 801492e:	f7fd ff9d 	bl	801286c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014932:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014934:	4618      	mov	r0, r3
 8014936:	bd80      	pop	{r7, pc}
 8014938:	20001dc0 	.word	0x20001dc0
 801493c:	200012e4 	.word	0x200012e4
 8014940:	200015c0 	.word	0x200015c0

08014944 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014944:	b480      	push	{r7}
 8014946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014948:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801494a:	4618      	mov	r0, r3
 801494c:	46bd      	mov	sp, r7
 801494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014952:	4770      	bx	lr

08014954 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014954:	b480      	push	{r7}
 8014956:	b083      	sub	sp, #12
 8014958:	af00      	add	r7, sp, #0
 801495a:	4603      	mov	r3, r0
 801495c:	6039      	str	r1, [r7, #0]
 801495e:	71fb      	strb	r3, [r7, #7]
 8014960:	4613      	mov	r3, r2
 8014962:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014964:	79fb      	ldrb	r3, [r7, #7]
 8014966:	2b23      	cmp	r3, #35	@ 0x23
 8014968:	d84a      	bhi.n	8014a00 <CDC_Control_FS+0xac>
 801496a:	a201      	add	r2, pc, #4	@ (adr r2, 8014970 <CDC_Control_FS+0x1c>)
 801496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014970:	08014a01 	.word	0x08014a01
 8014974:	08014a01 	.word	0x08014a01
 8014978:	08014a01 	.word	0x08014a01
 801497c:	08014a01 	.word	0x08014a01
 8014980:	08014a01 	.word	0x08014a01
 8014984:	08014a01 	.word	0x08014a01
 8014988:	08014a01 	.word	0x08014a01
 801498c:	08014a01 	.word	0x08014a01
 8014990:	08014a01 	.word	0x08014a01
 8014994:	08014a01 	.word	0x08014a01
 8014998:	08014a01 	.word	0x08014a01
 801499c:	08014a01 	.word	0x08014a01
 80149a0:	08014a01 	.word	0x08014a01
 80149a4:	08014a01 	.word	0x08014a01
 80149a8:	08014a01 	.word	0x08014a01
 80149ac:	08014a01 	.word	0x08014a01
 80149b0:	08014a01 	.word	0x08014a01
 80149b4:	08014a01 	.word	0x08014a01
 80149b8:	08014a01 	.word	0x08014a01
 80149bc:	08014a01 	.word	0x08014a01
 80149c0:	08014a01 	.word	0x08014a01
 80149c4:	08014a01 	.word	0x08014a01
 80149c8:	08014a01 	.word	0x08014a01
 80149cc:	08014a01 	.word	0x08014a01
 80149d0:	08014a01 	.word	0x08014a01
 80149d4:	08014a01 	.word	0x08014a01
 80149d8:	08014a01 	.word	0x08014a01
 80149dc:	08014a01 	.word	0x08014a01
 80149e0:	08014a01 	.word	0x08014a01
 80149e4:	08014a01 	.word	0x08014a01
 80149e8:	08014a01 	.word	0x08014a01
 80149ec:	08014a01 	.word	0x08014a01
 80149f0:	08014a01 	.word	0x08014a01
 80149f4:	08014a01 	.word	0x08014a01
 80149f8:	08014a01 	.word	0x08014a01
 80149fc:	08014a01 	.word	0x08014a01
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014a00:	bf00      	nop
  }

  return (USBD_OK);
 8014a02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	370c      	adds	r7, #12
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr

08014a10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b084      	sub	sp, #16
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
 8014a18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014a1a:	6879      	ldr	r1, [r7, #4]
 8014a1c:	480f      	ldr	r0, [pc, #60]	@ (8014a5c <CDC_Receive_FS+0x4c>)
 8014a1e:	f7fd ff25 	bl	801286c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014a22:	480e      	ldr	r0, [pc, #56]	@ (8014a5c <CDC_Receive_FS+0x4c>)
 8014a24:	f7fd ff80 	bl	8012928 <USBD_CDC_ReceivePacket>

  memset (usbbuffer, '\0', 64);  // clear the buffer
 8014a28:	2240      	movs	r2, #64	@ 0x40
 8014a2a:	2100      	movs	r1, #0
 8014a2c:	480c      	ldr	r0, [pc, #48]	@ (8014a60 <CDC_Receive_FS+0x50>)
 8014a2e:	f002 fc10 	bl	8017252 <memset>
  uint8_t len = (uint8_t)*Len;
 8014a32:	683b      	ldr	r3, [r7, #0]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	73fb      	strb	r3, [r7, #15]
  memcpy((uint8_t *) usbbuffer,(uint8_t *) Buf, len);  // copy the data to the buffer
 8014a38:	7bfb      	ldrb	r3, [r7, #15]
 8014a3a:	461a      	mov	r2, r3
 8014a3c:	6879      	ldr	r1, [r7, #4]
 8014a3e:	4808      	ldr	r0, [pc, #32]	@ (8014a60 <CDC_Receive_FS+0x50>)
 8014a40:	f002 fd23 	bl	801748a <memcpy>
  memset(Buf, '\0', len);
 8014a44:	7bfb      	ldrb	r3, [r7, #15]
 8014a46:	461a      	mov	r2, r3
 8014a48:	2100      	movs	r1, #0
 8014a4a:	6878      	ldr	r0, [r7, #4]
 8014a4c:	f002 fc01 	bl	8017252 <memset>
  return (USBD_OK);
 8014a50:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}
 8014a5a:	bf00      	nop
 8014a5c:	200012e4 	.word	0x200012e4
 8014a60:	20000a0c 	.word	0x20000a0c

08014a64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b084      	sub	sp, #16
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
 8014a6c:	460b      	mov	r3, r1
 8014a6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014a70:	2300      	movs	r3, #0
 8014a72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014a74:	4b0d      	ldr	r3, [pc, #52]	@ (8014aac <CDC_Transmit_FS+0x48>)
 8014a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014a7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d001      	beq.n	8014a8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014a86:	2301      	movs	r3, #1
 8014a88:	e00b      	b.n	8014aa2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014a8a:	887b      	ldrh	r3, [r7, #2]
 8014a8c:	461a      	mov	r2, r3
 8014a8e:	6879      	ldr	r1, [r7, #4]
 8014a90:	4806      	ldr	r0, [pc, #24]	@ (8014aac <CDC_Transmit_FS+0x48>)
 8014a92:	f7fd fec9 	bl	8012828 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014a96:	4805      	ldr	r0, [pc, #20]	@ (8014aac <CDC_Transmit_FS+0x48>)
 8014a98:	f7fd ff06 	bl	80128a8 <USBD_CDC_TransmitPacket>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3710      	adds	r7, #16
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd80      	pop	{r7, pc}
 8014aaa:	bf00      	nop
 8014aac:	200012e4 	.word	0x200012e4

08014ab0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	b087      	sub	sp, #28
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	60b9      	str	r1, [r7, #8]
 8014aba:	4613      	mov	r3, r2
 8014abc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014ac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	371c      	adds	r7, #28
 8014aca:	46bd      	mov	sp, r7
 8014acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ad0:	4770      	bx	lr
	...

08014ad4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ad4:	b480      	push	{r7}
 8014ad6:	b083      	sub	sp, #12
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	4603      	mov	r3, r0
 8014adc:	6039      	str	r1, [r7, #0]
 8014ade:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014ae0:	683b      	ldr	r3, [r7, #0]
 8014ae2:	2212      	movs	r2, #18
 8014ae4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8014ae6:	4b03      	ldr	r3, [pc, #12]	@ (8014af4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	370c      	adds	r7, #12
 8014aec:	46bd      	mov	sp, r7
 8014aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af2:	4770      	bx	lr
 8014af4:	200000f8 	.word	0x200000f8

08014af8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014af8:	b480      	push	{r7}
 8014afa:	b083      	sub	sp, #12
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	4603      	mov	r3, r0
 8014b00:	6039      	str	r1, [r7, #0]
 8014b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014b04:	683b      	ldr	r3, [r7, #0]
 8014b06:	2204      	movs	r2, #4
 8014b08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014b0a:	4b03      	ldr	r3, [pc, #12]	@ (8014b18 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	370c      	adds	r7, #12
 8014b10:	46bd      	mov	sp, r7
 8014b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b16:	4770      	bx	lr
 8014b18:	2000010c 	.word	0x2000010c

08014b1c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b082      	sub	sp, #8
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	4603      	mov	r3, r0
 8014b24:	6039      	str	r1, [r7, #0]
 8014b26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014b28:	79fb      	ldrb	r3, [r7, #7]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	d105      	bne.n	8014b3a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014b2e:	683a      	ldr	r2, [r7, #0]
 8014b30:	4907      	ldr	r1, [pc, #28]	@ (8014b50 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014b32:	4808      	ldr	r0, [pc, #32]	@ (8014b54 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014b34:	f7ff f8dc 	bl	8013cf0 <USBD_GetString>
 8014b38:	e004      	b.n	8014b44 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014b3a:	683a      	ldr	r2, [r7, #0]
 8014b3c:	4904      	ldr	r1, [pc, #16]	@ (8014b50 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014b3e:	4805      	ldr	r0, [pc, #20]	@ (8014b54 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014b40:	f7ff f8d6 	bl	8013cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014b44:	4b02      	ldr	r3, [pc, #8]	@ (8014b50 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3708      	adds	r7, #8
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}
 8014b4e:	bf00      	nop
 8014b50:	200025c0 	.word	0x200025c0
 8014b54:	0801be80 	.word	0x0801be80

08014b58 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b082      	sub	sp, #8
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	4603      	mov	r3, r0
 8014b60:	6039      	str	r1, [r7, #0]
 8014b62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014b64:	683a      	ldr	r2, [r7, #0]
 8014b66:	4904      	ldr	r1, [pc, #16]	@ (8014b78 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8014b68:	4804      	ldr	r0, [pc, #16]	@ (8014b7c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8014b6a:	f7ff f8c1 	bl	8013cf0 <USBD_GetString>
  return USBD_StrDesc;
 8014b6e:	4b02      	ldr	r3, [pc, #8]	@ (8014b78 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	200025c0 	.word	0x200025c0
 8014b7c:	0801be98 	.word	0x0801be98

08014b80 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	4603      	mov	r3, r0
 8014b88:	6039      	str	r1, [r7, #0]
 8014b8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014b8c:	683b      	ldr	r3, [r7, #0]
 8014b8e:	221a      	movs	r2, #26
 8014b90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014b92:	f000 f843 	bl	8014c1c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014b96:	4b02      	ldr	r3, [pc, #8]	@ (8014ba0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3708      	adds	r7, #8
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}
 8014ba0:	20000110 	.word	0x20000110

08014ba4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	4603      	mov	r3, r0
 8014bac:	6039      	str	r1, [r7, #0]
 8014bae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014bb0:	79fb      	ldrb	r3, [r7, #7]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d105      	bne.n	8014bc2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014bb6:	683a      	ldr	r2, [r7, #0]
 8014bb8:	4907      	ldr	r1, [pc, #28]	@ (8014bd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014bba:	4808      	ldr	r0, [pc, #32]	@ (8014bdc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014bbc:	f7ff f898 	bl	8013cf0 <USBD_GetString>
 8014bc0:	e004      	b.n	8014bcc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014bc2:	683a      	ldr	r2, [r7, #0]
 8014bc4:	4904      	ldr	r1, [pc, #16]	@ (8014bd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014bc6:	4805      	ldr	r0, [pc, #20]	@ (8014bdc <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014bc8:	f7ff f892 	bl	8013cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014bcc:	4b02      	ldr	r3, [pc, #8]	@ (8014bd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8014bce:	4618      	mov	r0, r3
 8014bd0:	3708      	adds	r7, #8
 8014bd2:	46bd      	mov	sp, r7
 8014bd4:	bd80      	pop	{r7, pc}
 8014bd6:	bf00      	nop
 8014bd8:	200025c0 	.word	0x200025c0
 8014bdc:	0801beac 	.word	0x0801beac

08014be0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b082      	sub	sp, #8
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	4603      	mov	r3, r0
 8014be8:	6039      	str	r1, [r7, #0]
 8014bea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014bec:	79fb      	ldrb	r3, [r7, #7]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d105      	bne.n	8014bfe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014bf2:	683a      	ldr	r2, [r7, #0]
 8014bf4:	4907      	ldr	r1, [pc, #28]	@ (8014c14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014bf6:	4808      	ldr	r0, [pc, #32]	@ (8014c18 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014bf8:	f7ff f87a 	bl	8013cf0 <USBD_GetString>
 8014bfc:	e004      	b.n	8014c08 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014bfe:	683a      	ldr	r2, [r7, #0]
 8014c00:	4904      	ldr	r1, [pc, #16]	@ (8014c14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014c02:	4805      	ldr	r0, [pc, #20]	@ (8014c18 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014c04:	f7ff f874 	bl	8013cf0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014c08:	4b02      	ldr	r3, [pc, #8]	@ (8014c14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8014c0a:	4618      	mov	r0, r3
 8014c0c:	3708      	adds	r7, #8
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}
 8014c12:	bf00      	nop
 8014c14:	200025c0 	.word	0x200025c0
 8014c18:	0801beb8 	.word	0x0801beb8

08014c1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b084      	sub	sp, #16
 8014c20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014c22:	4b0f      	ldr	r3, [pc, #60]	@ (8014c60 <Get_SerialNum+0x44>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014c28:	4b0e      	ldr	r3, [pc, #56]	@ (8014c64 <Get_SerialNum+0x48>)
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8014c68 <Get_SerialNum+0x4c>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014c34:	68fa      	ldr	r2, [r7, #12]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	4413      	add	r3, r2
 8014c3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d009      	beq.n	8014c56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014c42:	2208      	movs	r2, #8
 8014c44:	4909      	ldr	r1, [pc, #36]	@ (8014c6c <Get_SerialNum+0x50>)
 8014c46:	68f8      	ldr	r0, [r7, #12]
 8014c48:	f000 f814 	bl	8014c74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014c4c:	2204      	movs	r2, #4
 8014c4e:	4908      	ldr	r1, [pc, #32]	@ (8014c70 <Get_SerialNum+0x54>)
 8014c50:	68b8      	ldr	r0, [r7, #8]
 8014c52:	f000 f80f 	bl	8014c74 <IntToUnicode>
  }
}
 8014c56:	bf00      	nop
 8014c58:	3710      	adds	r7, #16
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
 8014c5e:	bf00      	nop
 8014c60:	1fff7590 	.word	0x1fff7590
 8014c64:	1fff7594 	.word	0x1fff7594
 8014c68:	1fff7598 	.word	0x1fff7598
 8014c6c:	20000112 	.word	0x20000112
 8014c70:	20000122 	.word	0x20000122

08014c74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014c74:	b480      	push	{r7}
 8014c76:	b087      	sub	sp, #28
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	60f8      	str	r0, [r7, #12]
 8014c7c:	60b9      	str	r1, [r7, #8]
 8014c7e:	4613      	mov	r3, r2
 8014c80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014c82:	2300      	movs	r3, #0
 8014c84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014c86:	2300      	movs	r3, #0
 8014c88:	75fb      	strb	r3, [r7, #23]
 8014c8a:	e027      	b.n	8014cdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	0f1b      	lsrs	r3, r3, #28
 8014c90:	2b09      	cmp	r3, #9
 8014c92:	d80b      	bhi.n	8014cac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	0f1b      	lsrs	r3, r3, #28
 8014c98:	b2da      	uxtb	r2, r3
 8014c9a:	7dfb      	ldrb	r3, [r7, #23]
 8014c9c:	005b      	lsls	r3, r3, #1
 8014c9e:	4619      	mov	r1, r3
 8014ca0:	68bb      	ldr	r3, [r7, #8]
 8014ca2:	440b      	add	r3, r1
 8014ca4:	3230      	adds	r2, #48	@ 0x30
 8014ca6:	b2d2      	uxtb	r2, r2
 8014ca8:	701a      	strb	r2, [r3, #0]
 8014caa:	e00a      	b.n	8014cc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	0f1b      	lsrs	r3, r3, #28
 8014cb0:	b2da      	uxtb	r2, r3
 8014cb2:	7dfb      	ldrb	r3, [r7, #23]
 8014cb4:	005b      	lsls	r3, r3, #1
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	68bb      	ldr	r3, [r7, #8]
 8014cba:	440b      	add	r3, r1
 8014cbc:	3237      	adds	r2, #55	@ 0x37
 8014cbe:	b2d2      	uxtb	r2, r2
 8014cc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	011b      	lsls	r3, r3, #4
 8014cc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014cc8:	7dfb      	ldrb	r3, [r7, #23]
 8014cca:	005b      	lsls	r3, r3, #1
 8014ccc:	3301      	adds	r3, #1
 8014cce:	68ba      	ldr	r2, [r7, #8]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014cd6:	7dfb      	ldrb	r3, [r7, #23]
 8014cd8:	3301      	adds	r3, #1
 8014cda:	75fb      	strb	r3, [r7, #23]
 8014cdc:	7dfa      	ldrb	r2, [r7, #23]
 8014cde:	79fb      	ldrb	r3, [r7, #7]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d3d3      	bcc.n	8014c8c <IntToUnicode+0x18>
  }
}
 8014ce4:	bf00      	nop
 8014ce6:	bf00      	nop
 8014ce8:	371c      	adds	r7, #28
 8014cea:	46bd      	mov	sp, r7
 8014cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf0:	4770      	bx	lr

08014cf2 <LL_AHB2_GRP1_EnableClock>:
{
 8014cf2:	b480      	push	{r7}
 8014cf4:	b085      	sub	sp, #20
 8014cf6:	af00      	add	r7, sp, #0
 8014cf8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8014cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	4313      	orrs	r3, r2
 8014d08:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8014d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	4013      	ands	r3, r2
 8014d14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014d16:	68fb      	ldr	r3, [r7, #12]
}
 8014d18:	bf00      	nop
 8014d1a:	3714      	adds	r7, #20
 8014d1c:	46bd      	mov	sp, r7
 8014d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d22:	4770      	bx	lr

08014d24 <LL_APB1_GRP1_EnableClock>:
{
 8014d24:	b480      	push	{r7}
 8014d26:	b085      	sub	sp, #20
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8014d2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014d32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	4313      	orrs	r3, r2
 8014d3a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8014d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	4013      	ands	r3, r2
 8014d46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014d48:	68fb      	ldr	r3, [r7, #12]
}
 8014d4a:	bf00      	nop
 8014d4c:	3714      	adds	r7, #20
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d54:	4770      	bx	lr
	...

08014d58 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b088      	sub	sp, #32
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d60:	f107 030c 	add.w	r3, r7, #12
 8014d64:	2200      	movs	r2, #0
 8014d66:	601a      	str	r2, [r3, #0]
 8014d68:	605a      	str	r2, [r3, #4]
 8014d6a:	609a      	str	r2, [r3, #8]
 8014d6c:	60da      	str	r2, [r3, #12]
 8014d6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	4a13      	ldr	r2, [pc, #76]	@ (8014dc4 <HAL_PCD_MspInit+0x6c>)
 8014d76:	4293      	cmp	r3, r2
 8014d78:	d120      	bne.n	8014dbc <HAL_PCD_MspInit+0x64>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d7a:	2001      	movs	r0, #1
 8014d7c:	f7ff ffb9 	bl	8014cf2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014d80:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014d84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d86:	2302      	movs	r3, #2
 8014d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d8e:	2300      	movs	r3, #0
 8014d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8014d92:	230a      	movs	r3, #10
 8014d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d96:	f107 030c 	add.w	r3, r7, #12
 8014d9a:	4619      	mov	r1, r3
 8014d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8014da0:	f7f3 f948 	bl	8008034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014da4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8014da8:	f7ff ffbc 	bl	8014d24 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8014dac:	2200      	movs	r2, #0
 8014dae:	2105      	movs	r1, #5
 8014db0:	2014      	movs	r0, #20
 8014db2:	f7f2 fdcc 	bl	800794e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8014db6:	2014      	movs	r0, #20
 8014db8:	f7f2 fde3 	bl	8007982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014dbc:	bf00      	nop
 8014dbe:	3720      	adds	r7, #32
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}
 8014dc4:	40006800 	.word	0x40006800

08014dc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dc8:	b580      	push	{r7, lr}
 8014dca:	b082      	sub	sp, #8
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8014ddc:	4619      	mov	r1, r3
 8014dde:	4610      	mov	r0, r2
 8014de0:	f7fd fe8b 	bl	8012afa <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014de4:	bf00      	nop
 8014de6:	3708      	adds	r7, #8
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}

08014dec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b082      	sub	sp, #8
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
 8014df4:	460b      	mov	r3, r1
 8014df6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014dfe:	78fa      	ldrb	r2, [r7, #3]
 8014e00:	6879      	ldr	r1, [r7, #4]
 8014e02:	4613      	mov	r3, r2
 8014e04:	009b      	lsls	r3, r3, #2
 8014e06:	4413      	add	r3, r2
 8014e08:	00db      	lsls	r3, r3, #3
 8014e0a:	440b      	add	r3, r1
 8014e0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	78fb      	ldrb	r3, [r7, #3]
 8014e14:	4619      	mov	r1, r3
 8014e16:	f7fd fec5 	bl	8012ba4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014e1a:	bf00      	nop
 8014e1c:	3708      	adds	r7, #8
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}

08014e22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e22:	b580      	push	{r7, lr}
 8014e24:	b082      	sub	sp, #8
 8014e26:	af00      	add	r7, sp, #0
 8014e28:	6078      	str	r0, [r7, #4]
 8014e2a:	460b      	mov	r3, r1
 8014e2c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014e34:	78fa      	ldrb	r2, [r7, #3]
 8014e36:	6879      	ldr	r1, [r7, #4]
 8014e38:	4613      	mov	r3, r2
 8014e3a:	009b      	lsls	r3, r3, #2
 8014e3c:	4413      	add	r3, r2
 8014e3e:	00db      	lsls	r3, r3, #3
 8014e40:	440b      	add	r3, r1
 8014e42:	3324      	adds	r3, #36	@ 0x24
 8014e44:	681a      	ldr	r2, [r3, #0]
 8014e46:	78fb      	ldrb	r3, [r7, #3]
 8014e48:	4619      	mov	r1, r3
 8014e4a:	f7fd ff5e 	bl	8012d0a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8014e4e:	bf00      	nop
 8014e50:	3708      	adds	r7, #8
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}

08014e56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e56:	b580      	push	{r7, lr}
 8014e58:	b082      	sub	sp, #8
 8014e5a:	af00      	add	r7, sp, #0
 8014e5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7fe f898 	bl	8012f9a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8014e6a:	bf00      	nop
 8014e6c:	3708      	adds	r7, #8
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}

08014e72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e72:	b580      	push	{r7, lr}
 8014e74:	b084      	sub	sp, #16
 8014e76:	af00      	add	r7, sp, #0
 8014e78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	795b      	ldrb	r3, [r3, #5]
 8014e82:	2b02      	cmp	r3, #2
 8014e84:	d001      	beq.n	8014e8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014e86:	f7ed f814 	bl	8001eb2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014e90:	7bfa      	ldrb	r2, [r7, #15]
 8014e92:	4611      	mov	r1, r2
 8014e94:	4618      	mov	r0, r3
 8014e96:	f7fe f83c 	bl	8012f12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	f7fd ffe4 	bl	8012e6e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014ea6:	bf00      	nop
 8014ea8:	3710      	adds	r7, #16
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
	...

08014eb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f7fe f837 	bl	8012f32 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	7a5b      	ldrb	r3, [r3, #9]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d005      	beq.n	8014ed8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ecc:	4b04      	ldr	r3, [pc, #16]	@ (8014ee0 <HAL_PCD_SuspendCallback+0x30>)
 8014ece:	691b      	ldr	r3, [r3, #16]
 8014ed0:	4a03      	ldr	r2, [pc, #12]	@ (8014ee0 <HAL_PCD_SuspendCallback+0x30>)
 8014ed2:	f043 0306 	orr.w	r3, r3, #6
 8014ed6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014ed8:	bf00      	nop
 8014eda:	3708      	adds	r7, #8
 8014edc:	46bd      	mov	sp, r7
 8014ede:	bd80      	pop	{r7, pc}
 8014ee0:	e000ed00 	.word	0xe000ed00

08014ee4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b082      	sub	sp, #8
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	7a5b      	ldrb	r3, [r3, #9]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d007      	beq.n	8014f04 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ef4:	4b08      	ldr	r3, [pc, #32]	@ (8014f18 <HAL_PCD_ResumeCallback+0x34>)
 8014ef6:	691b      	ldr	r3, [r3, #16]
 8014ef8:	4a07      	ldr	r2, [pc, #28]	@ (8014f18 <HAL_PCD_ResumeCallback+0x34>)
 8014efa:	f023 0306 	bic.w	r3, r3, #6
 8014efe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014f00:	f000 f9fa 	bl	80152f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7fe f82d 	bl	8012f6a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8014f10:	bf00      	nop
 8014f12:	3708      	adds	r7, #8
 8014f14:	46bd      	mov	sp, r7
 8014f16:	bd80      	pop	{r7, pc}
 8014f18:	e000ed00 	.word	0xe000ed00

08014f1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b082      	sub	sp, #8
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8014f24:	4a2c      	ldr	r2, [pc, #176]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f30:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8014f34:	f7f5 feea 	bl	800ad0c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8014f38:	4b27      	ldr	r3, [pc, #156]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f3a:	4a28      	ldr	r2, [pc, #160]	@ (8014fdc <USBD_LL_Init+0xc0>)
 8014f3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014f3e:	4b26      	ldr	r3, [pc, #152]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f40:	2208      	movs	r2, #8
 8014f42:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014f44:	4b24      	ldr	r3, [pc, #144]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f46:	2202      	movs	r2, #2
 8014f48:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014f4a:	4b23      	ldr	r3, [pc, #140]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f4c:	2202      	movs	r2, #2
 8014f4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014f50:	4b21      	ldr	r3, [pc, #132]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f52:	2200      	movs	r2, #0
 8014f54:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014f56:	4b20      	ldr	r3, [pc, #128]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f58:	2200      	movs	r2, #0
 8014f5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f5e:	2200      	movs	r2, #0
 8014f60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014f62:	4b1d      	ldr	r3, [pc, #116]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f64:	2200      	movs	r2, #0
 8014f66:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014f68:	481b      	ldr	r0, [pc, #108]	@ (8014fd8 <USBD_LL_Init+0xbc>)
 8014f6a:	f7f4 f9af 	bl	80092cc <HAL_PCD_Init>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d001      	beq.n	8014f78 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8014f74:	f7ec ff9d 	bl	8001eb2 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f7e:	2318      	movs	r3, #24
 8014f80:	2200      	movs	r2, #0
 8014f82:	2100      	movs	r1, #0
 8014f84:	f7f5 fe36 	bl	800abf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f8e:	2358      	movs	r3, #88	@ 0x58
 8014f90:	2200      	movs	r2, #0
 8014f92:	2180      	movs	r1, #128	@ 0x80
 8014f94:	f7f5 fe2e 	bl	800abf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f9e:	23c0      	movs	r3, #192	@ 0xc0
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	2181      	movs	r1, #129	@ 0x81
 8014fa4:	f7f5 fe26 	bl	800abf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014fae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	2101      	movs	r1, #1
 8014fb6:	f7f5 fe1d 	bl	800abf4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014fc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	2182      	movs	r1, #130	@ 0x82
 8014fc8:	f7f5 fe14 	bl	800abf4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014fcc:	2300      	movs	r3, #0
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3708      	adds	r7, #8
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	200027c0 	.word	0x200027c0
 8014fdc:	40006800 	.word	0x40006800

08014fe0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b084      	sub	sp, #16
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fe8:	2300      	movs	r3, #0
 8014fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fec:	2300      	movs	r3, #0
 8014fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014ff6:	4618      	mov	r0, r3
 8014ff8:	f7f4 fa36 	bl	8009468 <HAL_PCD_Start>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015000:	7bfb      	ldrb	r3, [r7, #15]
 8015002:	4618      	mov	r0, r3
 8015004:	f000 f97e 	bl	8015304 <USBD_Get_USB_Status>
 8015008:	4603      	mov	r3, r0
 801500a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801500c:	7bbb      	ldrb	r3, [r7, #14]
}
 801500e:	4618      	mov	r0, r3
 8015010:	3710      	adds	r7, #16
 8015012:	46bd      	mov	sp, r7
 8015014:	bd80      	pop	{r7, pc}

08015016 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015016:	b580      	push	{r7, lr}
 8015018:	b084      	sub	sp, #16
 801501a:	af00      	add	r7, sp, #0
 801501c:	6078      	str	r0, [r7, #4]
 801501e:	4608      	mov	r0, r1
 8015020:	4611      	mov	r1, r2
 8015022:	461a      	mov	r2, r3
 8015024:	4603      	mov	r3, r0
 8015026:	70fb      	strb	r3, [r7, #3]
 8015028:	460b      	mov	r3, r1
 801502a:	70bb      	strb	r3, [r7, #2]
 801502c:	4613      	mov	r3, r2
 801502e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015030:	2300      	movs	r3, #0
 8015032:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015034:	2300      	movs	r3, #0
 8015036:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801503e:	78bb      	ldrb	r3, [r7, #2]
 8015040:	883a      	ldrh	r2, [r7, #0]
 8015042:	78f9      	ldrb	r1, [r7, #3]
 8015044:	f7f4 fb7d 	bl	8009742 <HAL_PCD_EP_Open>
 8015048:	4603      	mov	r3, r0
 801504a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801504c:	7bfb      	ldrb	r3, [r7, #15]
 801504e:	4618      	mov	r0, r3
 8015050:	f000 f958 	bl	8015304 <USBD_Get_USB_Status>
 8015054:	4603      	mov	r3, r0
 8015056:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015058:	7bbb      	ldrb	r3, [r7, #14]
}
 801505a:	4618      	mov	r0, r3
 801505c:	3710      	adds	r7, #16
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}

08015062 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015062:	b580      	push	{r7, lr}
 8015064:	b084      	sub	sp, #16
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]
 801506a:	460b      	mov	r3, r1
 801506c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801506e:	2300      	movs	r3, #0
 8015070:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015072:	2300      	movs	r3, #0
 8015074:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801507c:	78fa      	ldrb	r2, [r7, #3]
 801507e:	4611      	mov	r1, r2
 8015080:	4618      	mov	r0, r3
 8015082:	f7f4 fbbd 	bl	8009800 <HAL_PCD_EP_Close>
 8015086:	4603      	mov	r3, r0
 8015088:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801508a:	7bfb      	ldrb	r3, [r7, #15]
 801508c:	4618      	mov	r0, r3
 801508e:	f000 f939 	bl	8015304 <USBD_Get_USB_Status>
 8015092:	4603      	mov	r3, r0
 8015094:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015096:	7bbb      	ldrb	r3, [r7, #14]
}
 8015098:	4618      	mov	r0, r3
 801509a:	3710      	adds	r7, #16
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}

080150a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b084      	sub	sp, #16
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
 80150a8:	460b      	mov	r3, r1
 80150aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150ac:	2300      	movs	r3, #0
 80150ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150b0:	2300      	movs	r3, #0
 80150b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80150ba:	78fa      	ldrb	r2, [r7, #3]
 80150bc:	4611      	mov	r1, r2
 80150be:	4618      	mov	r0, r3
 80150c0:	f7f4 fc66 	bl	8009990 <HAL_PCD_EP_SetStall>
 80150c4:	4603      	mov	r3, r0
 80150c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150c8:	7bfb      	ldrb	r3, [r7, #15]
 80150ca:	4618      	mov	r0, r3
 80150cc:	f000 f91a 	bl	8015304 <USBD_Get_USB_Status>
 80150d0:	4603      	mov	r3, r0
 80150d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80150d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3710      	adds	r7, #16
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}

080150de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150de:	b580      	push	{r7, lr}
 80150e0:	b084      	sub	sp, #16
 80150e2:	af00      	add	r7, sp, #0
 80150e4:	6078      	str	r0, [r7, #4]
 80150e6:	460b      	mov	r3, r1
 80150e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150ea:	2300      	movs	r3, #0
 80150ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150ee:	2300      	movs	r3, #0
 80150f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80150f8:	78fa      	ldrb	r2, [r7, #3]
 80150fa:	4611      	mov	r1, r2
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7f4 fc99 	bl	8009a34 <HAL_PCD_EP_ClrStall>
 8015102:	4603      	mov	r3, r0
 8015104:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015106:	7bfb      	ldrb	r3, [r7, #15]
 8015108:	4618      	mov	r0, r3
 801510a:	f000 f8fb 	bl	8015304 <USBD_Get_USB_Status>
 801510e:	4603      	mov	r3, r0
 8015110:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015112:	7bbb      	ldrb	r3, [r7, #14]
}
 8015114:	4618      	mov	r0, r3
 8015116:	3710      	adds	r7, #16
 8015118:	46bd      	mov	sp, r7
 801511a:	bd80      	pop	{r7, pc}

0801511c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801511c:	b480      	push	{r7}
 801511e:	b085      	sub	sp, #20
 8015120:	af00      	add	r7, sp, #0
 8015122:	6078      	str	r0, [r7, #4]
 8015124:	460b      	mov	r3, r1
 8015126:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801512e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015134:	2b00      	cmp	r3, #0
 8015136:	da0b      	bge.n	8015150 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015138:	78fb      	ldrb	r3, [r7, #3]
 801513a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801513e:	68f9      	ldr	r1, [r7, #12]
 8015140:	4613      	mov	r3, r2
 8015142:	009b      	lsls	r3, r3, #2
 8015144:	4413      	add	r3, r2
 8015146:	00db      	lsls	r3, r3, #3
 8015148:	440b      	add	r3, r1
 801514a:	3312      	adds	r3, #18
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	e00b      	b.n	8015168 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015150:	78fb      	ldrb	r3, [r7, #3]
 8015152:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015156:	68f9      	ldr	r1, [r7, #12]
 8015158:	4613      	mov	r3, r2
 801515a:	009b      	lsls	r3, r3, #2
 801515c:	4413      	add	r3, r2
 801515e:	00db      	lsls	r3, r3, #3
 8015160:	440b      	add	r3, r1
 8015162:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8015166:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015168:	4618      	mov	r0, r3
 801516a:	3714      	adds	r7, #20
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr

08015174 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b084      	sub	sp, #16
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	460b      	mov	r3, r1
 801517e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015180:	2300      	movs	r3, #0
 8015182:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015184:	2300      	movs	r3, #0
 8015186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801518e:	78fa      	ldrb	r2, [r7, #3]
 8015190:	4611      	mov	r1, r2
 8015192:	4618      	mov	r0, r3
 8015194:	f7f4 fab1 	bl	80096fa <HAL_PCD_SetAddress>
 8015198:	4603      	mov	r3, r0
 801519a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801519c:	7bfb      	ldrb	r3, [r7, #15]
 801519e:	4618      	mov	r0, r3
 80151a0:	f000 f8b0 	bl	8015304 <USBD_Get_USB_Status>
 80151a4:	4603      	mov	r3, r0
 80151a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	3710      	adds	r7, #16
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}

080151b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80151b2:	b580      	push	{r7, lr}
 80151b4:	b086      	sub	sp, #24
 80151b6:	af00      	add	r7, sp, #0
 80151b8:	60f8      	str	r0, [r7, #12]
 80151ba:	607a      	str	r2, [r7, #4]
 80151bc:	603b      	str	r3, [r7, #0]
 80151be:	460b      	mov	r3, r1
 80151c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151c2:	2300      	movs	r3, #0
 80151c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151c6:	2300      	movs	r3, #0
 80151c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80151ca:	68fb      	ldr	r3, [r7, #12]
 80151cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80151d0:	7af9      	ldrb	r1, [r7, #11]
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	f7f4 fba4 	bl	8009922 <HAL_PCD_EP_Transmit>
 80151da:	4603      	mov	r3, r0
 80151dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151de:	7dfb      	ldrb	r3, [r7, #23]
 80151e0:	4618      	mov	r0, r3
 80151e2:	f000 f88f 	bl	8015304 <USBD_Get_USB_Status>
 80151e6:	4603      	mov	r3, r0
 80151e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80151ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80151ec:	4618      	mov	r0, r3
 80151ee:	3718      	adds	r7, #24
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bd80      	pop	{r7, pc}

080151f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b086      	sub	sp, #24
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	60f8      	str	r0, [r7, #12]
 80151fc:	607a      	str	r2, [r7, #4]
 80151fe:	603b      	str	r3, [r7, #0]
 8015200:	460b      	mov	r3, r1
 8015202:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015204:	2300      	movs	r3, #0
 8015206:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015208:	2300      	movs	r3, #0
 801520a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015212:	7af9      	ldrb	r1, [r7, #11]
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	687a      	ldr	r2, [r7, #4]
 8015218:	f7f4 fb3a 	bl	8009890 <HAL_PCD_EP_Receive>
 801521c:	4603      	mov	r3, r0
 801521e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015220:	7dfb      	ldrb	r3, [r7, #23]
 8015222:	4618      	mov	r0, r3
 8015224:	f000 f86e 	bl	8015304 <USBD_Get_USB_Status>
 8015228:	4603      	mov	r3, r0
 801522a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801522c:	7dbb      	ldrb	r3, [r7, #22]
}
 801522e:	4618      	mov	r0, r3
 8015230:	3718      	adds	r7, #24
 8015232:	46bd      	mov	sp, r7
 8015234:	bd80      	pop	{r7, pc}

08015236 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015236:	b580      	push	{r7, lr}
 8015238:	b082      	sub	sp, #8
 801523a:	af00      	add	r7, sp, #0
 801523c:	6078      	str	r0, [r7, #4]
 801523e:	460b      	mov	r3, r1
 8015240:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015248:	78fa      	ldrb	r2, [r7, #3]
 801524a:	4611      	mov	r1, r2
 801524c:	4618      	mov	r0, r3
 801524e:	f7f4 fb50 	bl	80098f2 <HAL_PCD_EP_GetRxCount>
 8015252:	4603      	mov	r3, r0
}
 8015254:	4618      	mov	r0, r3
 8015256:	3708      	adds	r7, #8
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}

0801525c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b082      	sub	sp, #8
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
 8015264:	460b      	mov	r3, r1
 8015266:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015268:	78fb      	ldrb	r3, [r7, #3]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d002      	beq.n	8015274 <HAL_PCDEx_LPM_Callback+0x18>
 801526e:	2b01      	cmp	r3, #1
 8015270:	d013      	beq.n	801529a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015272:	e023      	b.n	80152bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	7a5b      	ldrb	r3, [r3, #9]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d007      	beq.n	801528c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801527c:	f000 f83c 	bl	80152f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015280:	4b10      	ldr	r3, [pc, #64]	@ (80152c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8015282:	691b      	ldr	r3, [r3, #16]
 8015284:	4a0f      	ldr	r2, [pc, #60]	@ (80152c4 <HAL_PCDEx_LPM_Callback+0x68>)
 8015286:	f023 0306 	bic.w	r3, r3, #6
 801528a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015292:	4618      	mov	r0, r3
 8015294:	f7fd fe69 	bl	8012f6a <USBD_LL_Resume>
    break;
 8015298:	e010      	b.n	80152bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7fd fe46 	bl	8012f32 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	7a5b      	ldrb	r3, [r3, #9]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d005      	beq.n	80152ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80152ae:	4b05      	ldr	r3, [pc, #20]	@ (80152c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80152b0:	691b      	ldr	r3, [r3, #16]
 80152b2:	4a04      	ldr	r2, [pc, #16]	@ (80152c4 <HAL_PCDEx_LPM_Callback+0x68>)
 80152b4:	f043 0306 	orr.w	r3, r3, #6
 80152b8:	6113      	str	r3, [r2, #16]
    break;
 80152ba:	bf00      	nop
}
 80152bc:	bf00      	nop
 80152be:	3708      	adds	r7, #8
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}
 80152c4:	e000ed00 	.word	0xe000ed00

080152c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80152c8:	b480      	push	{r7}
 80152ca:	b083      	sub	sp, #12
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80152d0:	4b03      	ldr	r3, [pc, #12]	@ (80152e0 <USBD_static_malloc+0x18>)
}
 80152d2:	4618      	mov	r0, r3
 80152d4:	370c      	adds	r7, #12
 80152d6:	46bd      	mov	sp, r7
 80152d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152dc:	4770      	bx	lr
 80152de:	bf00      	nop
 80152e0:	20002a9c 	.word	0x20002a9c

080152e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b083      	sub	sp, #12
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80152ec:	bf00      	nop
 80152ee:	370c      	adds	r7, #12
 80152f0:	46bd      	mov	sp, r7
 80152f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f6:	4770      	bx	lr

080152f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80152fc:	f7ec fd44 	bl	8001d88 <SystemClock_Config>
}
 8015300:	bf00      	nop
 8015302:	bd80      	pop	{r7, pc}

08015304 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015304:	b480      	push	{r7}
 8015306:	b085      	sub	sp, #20
 8015308:	af00      	add	r7, sp, #0
 801530a:	4603      	mov	r3, r0
 801530c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801530e:	2300      	movs	r3, #0
 8015310:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015312:	79fb      	ldrb	r3, [r7, #7]
 8015314:	2b03      	cmp	r3, #3
 8015316:	d817      	bhi.n	8015348 <USBD_Get_USB_Status+0x44>
 8015318:	a201      	add	r2, pc, #4	@ (adr r2, 8015320 <USBD_Get_USB_Status+0x1c>)
 801531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801531e:	bf00      	nop
 8015320:	08015331 	.word	0x08015331
 8015324:	08015337 	.word	0x08015337
 8015328:	0801533d 	.word	0x0801533d
 801532c:	08015343 	.word	0x08015343
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015330:	2300      	movs	r3, #0
 8015332:	73fb      	strb	r3, [r7, #15]
    break;
 8015334:	e00b      	b.n	801534e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015336:	2303      	movs	r3, #3
 8015338:	73fb      	strb	r3, [r7, #15]
    break;
 801533a:	e008      	b.n	801534e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801533c:	2301      	movs	r3, #1
 801533e:	73fb      	strb	r3, [r7, #15]
    break;
 8015340:	e005      	b.n	801534e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015342:	2303      	movs	r3, #3
 8015344:	73fb      	strb	r3, [r7, #15]
    break;
 8015346:	e002      	b.n	801534e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015348:	2303      	movs	r3, #3
 801534a:	73fb      	strb	r3, [r7, #15]
    break;
 801534c:	bf00      	nop
  }
  return usb_status;
 801534e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015350:	4618      	mov	r0, r3
 8015352:	3714      	adds	r7, #20
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr

0801535c <atoi>:
 801535c:	220a      	movs	r2, #10
 801535e:	2100      	movs	r1, #0
 8015360:	f000 bfa8 	b.w	80162b4 <strtol>

08015364 <malloc>:
 8015364:	4b02      	ldr	r3, [pc, #8]	@ (8015370 <malloc+0xc>)
 8015366:	4601      	mov	r1, r0
 8015368:	6818      	ldr	r0, [r3, #0]
 801536a:	f000 b82d 	b.w	80153c8 <_malloc_r>
 801536e:	bf00      	nop
 8015370:	200002a4 	.word	0x200002a4

08015374 <free>:
 8015374:	4b02      	ldr	r3, [pc, #8]	@ (8015380 <free+0xc>)
 8015376:	4601      	mov	r1, r0
 8015378:	6818      	ldr	r0, [r3, #0]
 801537a:	f002 bf0d 	b.w	8018198 <_free_r>
 801537e:	bf00      	nop
 8015380:	200002a4 	.word	0x200002a4

08015384 <sbrk_aligned>:
 8015384:	b570      	push	{r4, r5, r6, lr}
 8015386:	4e0f      	ldr	r6, [pc, #60]	@ (80153c4 <sbrk_aligned+0x40>)
 8015388:	460c      	mov	r4, r1
 801538a:	6831      	ldr	r1, [r6, #0]
 801538c:	4605      	mov	r5, r0
 801538e:	b911      	cbnz	r1, 8015396 <sbrk_aligned+0x12>
 8015390:	f002 f824 	bl	80173dc <_sbrk_r>
 8015394:	6030      	str	r0, [r6, #0]
 8015396:	4621      	mov	r1, r4
 8015398:	4628      	mov	r0, r5
 801539a:	f002 f81f 	bl	80173dc <_sbrk_r>
 801539e:	1c43      	adds	r3, r0, #1
 80153a0:	d103      	bne.n	80153aa <sbrk_aligned+0x26>
 80153a2:	f04f 34ff 	mov.w	r4, #4294967295
 80153a6:	4620      	mov	r0, r4
 80153a8:	bd70      	pop	{r4, r5, r6, pc}
 80153aa:	1cc4      	adds	r4, r0, #3
 80153ac:	f024 0403 	bic.w	r4, r4, #3
 80153b0:	42a0      	cmp	r0, r4
 80153b2:	d0f8      	beq.n	80153a6 <sbrk_aligned+0x22>
 80153b4:	1a21      	subs	r1, r4, r0
 80153b6:	4628      	mov	r0, r5
 80153b8:	f002 f810 	bl	80173dc <_sbrk_r>
 80153bc:	3001      	adds	r0, #1
 80153be:	d1f2      	bne.n	80153a6 <sbrk_aligned+0x22>
 80153c0:	e7ef      	b.n	80153a2 <sbrk_aligned+0x1e>
 80153c2:	bf00      	nop
 80153c4:	20002cbc 	.word	0x20002cbc

080153c8 <_malloc_r>:
 80153c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153cc:	1ccd      	adds	r5, r1, #3
 80153ce:	f025 0503 	bic.w	r5, r5, #3
 80153d2:	3508      	adds	r5, #8
 80153d4:	2d0c      	cmp	r5, #12
 80153d6:	bf38      	it	cc
 80153d8:	250c      	movcc	r5, #12
 80153da:	2d00      	cmp	r5, #0
 80153dc:	4606      	mov	r6, r0
 80153de:	db01      	blt.n	80153e4 <_malloc_r+0x1c>
 80153e0:	42a9      	cmp	r1, r5
 80153e2:	d904      	bls.n	80153ee <_malloc_r+0x26>
 80153e4:	230c      	movs	r3, #12
 80153e6:	6033      	str	r3, [r6, #0]
 80153e8:	2000      	movs	r0, #0
 80153ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80154c4 <_malloc_r+0xfc>
 80153f2:	f000 f869 	bl	80154c8 <__malloc_lock>
 80153f6:	f8d8 3000 	ldr.w	r3, [r8]
 80153fa:	461c      	mov	r4, r3
 80153fc:	bb44      	cbnz	r4, 8015450 <_malloc_r+0x88>
 80153fe:	4629      	mov	r1, r5
 8015400:	4630      	mov	r0, r6
 8015402:	f7ff ffbf 	bl	8015384 <sbrk_aligned>
 8015406:	1c43      	adds	r3, r0, #1
 8015408:	4604      	mov	r4, r0
 801540a:	d158      	bne.n	80154be <_malloc_r+0xf6>
 801540c:	f8d8 4000 	ldr.w	r4, [r8]
 8015410:	4627      	mov	r7, r4
 8015412:	2f00      	cmp	r7, #0
 8015414:	d143      	bne.n	801549e <_malloc_r+0xd6>
 8015416:	2c00      	cmp	r4, #0
 8015418:	d04b      	beq.n	80154b2 <_malloc_r+0xea>
 801541a:	6823      	ldr	r3, [r4, #0]
 801541c:	4639      	mov	r1, r7
 801541e:	4630      	mov	r0, r6
 8015420:	eb04 0903 	add.w	r9, r4, r3
 8015424:	f001 ffda 	bl	80173dc <_sbrk_r>
 8015428:	4581      	cmp	r9, r0
 801542a:	d142      	bne.n	80154b2 <_malloc_r+0xea>
 801542c:	6821      	ldr	r1, [r4, #0]
 801542e:	1a6d      	subs	r5, r5, r1
 8015430:	4629      	mov	r1, r5
 8015432:	4630      	mov	r0, r6
 8015434:	f7ff ffa6 	bl	8015384 <sbrk_aligned>
 8015438:	3001      	adds	r0, #1
 801543a:	d03a      	beq.n	80154b2 <_malloc_r+0xea>
 801543c:	6823      	ldr	r3, [r4, #0]
 801543e:	442b      	add	r3, r5
 8015440:	6023      	str	r3, [r4, #0]
 8015442:	f8d8 3000 	ldr.w	r3, [r8]
 8015446:	685a      	ldr	r2, [r3, #4]
 8015448:	bb62      	cbnz	r2, 80154a4 <_malloc_r+0xdc>
 801544a:	f8c8 7000 	str.w	r7, [r8]
 801544e:	e00f      	b.n	8015470 <_malloc_r+0xa8>
 8015450:	6822      	ldr	r2, [r4, #0]
 8015452:	1b52      	subs	r2, r2, r5
 8015454:	d420      	bmi.n	8015498 <_malloc_r+0xd0>
 8015456:	2a0b      	cmp	r2, #11
 8015458:	d917      	bls.n	801548a <_malloc_r+0xc2>
 801545a:	1961      	adds	r1, r4, r5
 801545c:	42a3      	cmp	r3, r4
 801545e:	6025      	str	r5, [r4, #0]
 8015460:	bf18      	it	ne
 8015462:	6059      	strne	r1, [r3, #4]
 8015464:	6863      	ldr	r3, [r4, #4]
 8015466:	bf08      	it	eq
 8015468:	f8c8 1000 	streq.w	r1, [r8]
 801546c:	5162      	str	r2, [r4, r5]
 801546e:	604b      	str	r3, [r1, #4]
 8015470:	4630      	mov	r0, r6
 8015472:	f000 f82f 	bl	80154d4 <__malloc_unlock>
 8015476:	f104 000b 	add.w	r0, r4, #11
 801547a:	1d23      	adds	r3, r4, #4
 801547c:	f020 0007 	bic.w	r0, r0, #7
 8015480:	1ac2      	subs	r2, r0, r3
 8015482:	bf1c      	itt	ne
 8015484:	1a1b      	subne	r3, r3, r0
 8015486:	50a3      	strne	r3, [r4, r2]
 8015488:	e7af      	b.n	80153ea <_malloc_r+0x22>
 801548a:	6862      	ldr	r2, [r4, #4]
 801548c:	42a3      	cmp	r3, r4
 801548e:	bf0c      	ite	eq
 8015490:	f8c8 2000 	streq.w	r2, [r8]
 8015494:	605a      	strne	r2, [r3, #4]
 8015496:	e7eb      	b.n	8015470 <_malloc_r+0xa8>
 8015498:	4623      	mov	r3, r4
 801549a:	6864      	ldr	r4, [r4, #4]
 801549c:	e7ae      	b.n	80153fc <_malloc_r+0x34>
 801549e:	463c      	mov	r4, r7
 80154a0:	687f      	ldr	r7, [r7, #4]
 80154a2:	e7b6      	b.n	8015412 <_malloc_r+0x4a>
 80154a4:	461a      	mov	r2, r3
 80154a6:	685b      	ldr	r3, [r3, #4]
 80154a8:	42a3      	cmp	r3, r4
 80154aa:	d1fb      	bne.n	80154a4 <_malloc_r+0xdc>
 80154ac:	2300      	movs	r3, #0
 80154ae:	6053      	str	r3, [r2, #4]
 80154b0:	e7de      	b.n	8015470 <_malloc_r+0xa8>
 80154b2:	230c      	movs	r3, #12
 80154b4:	6033      	str	r3, [r6, #0]
 80154b6:	4630      	mov	r0, r6
 80154b8:	f000 f80c 	bl	80154d4 <__malloc_unlock>
 80154bc:	e794      	b.n	80153e8 <_malloc_r+0x20>
 80154be:	6005      	str	r5, [r0, #0]
 80154c0:	e7d6      	b.n	8015470 <_malloc_r+0xa8>
 80154c2:	bf00      	nop
 80154c4:	20002cc0 	.word	0x20002cc0

080154c8 <__malloc_lock>:
 80154c8:	4801      	ldr	r0, [pc, #4]	@ (80154d0 <__malloc_lock+0x8>)
 80154ca:	f001 bfd4 	b.w	8017476 <__retarget_lock_acquire_recursive>
 80154ce:	bf00      	nop
 80154d0:	20002e04 	.word	0x20002e04

080154d4 <__malloc_unlock>:
 80154d4:	4801      	ldr	r0, [pc, #4]	@ (80154dc <__malloc_unlock+0x8>)
 80154d6:	f001 bfcf 	b.w	8017478 <__retarget_lock_release_recursive>
 80154da:	bf00      	nop
 80154dc:	20002e04 	.word	0x20002e04

080154e0 <sulp>:
 80154e0:	b570      	push	{r4, r5, r6, lr}
 80154e2:	4604      	mov	r4, r0
 80154e4:	460d      	mov	r5, r1
 80154e6:	ec45 4b10 	vmov	d0, r4, r5
 80154ea:	4616      	mov	r6, r2
 80154ec:	f003 fd5e 	bl	8018fac <__ulp>
 80154f0:	ec51 0b10 	vmov	r0, r1, d0
 80154f4:	b17e      	cbz	r6, 8015516 <sulp+0x36>
 80154f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80154fa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80154fe:	2b00      	cmp	r3, #0
 8015500:	dd09      	ble.n	8015516 <sulp+0x36>
 8015502:	051b      	lsls	r3, r3, #20
 8015504:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8015508:	2400      	movs	r4, #0
 801550a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801550e:	4622      	mov	r2, r4
 8015510:	462b      	mov	r3, r5
 8015512:	f7eb f849 	bl	80005a8 <__aeabi_dmul>
 8015516:	ec41 0b10 	vmov	d0, r0, r1
 801551a:	bd70      	pop	{r4, r5, r6, pc}
 801551c:	0000      	movs	r0, r0
	...

08015520 <_strtod_l>:
 8015520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015524:	b09f      	sub	sp, #124	@ 0x7c
 8015526:	460c      	mov	r4, r1
 8015528:	9217      	str	r2, [sp, #92]	@ 0x5c
 801552a:	2200      	movs	r2, #0
 801552c:	921a      	str	r2, [sp, #104]	@ 0x68
 801552e:	9005      	str	r0, [sp, #20]
 8015530:	f04f 0a00 	mov.w	sl, #0
 8015534:	f04f 0b00 	mov.w	fp, #0
 8015538:	460a      	mov	r2, r1
 801553a:	9219      	str	r2, [sp, #100]	@ 0x64
 801553c:	7811      	ldrb	r1, [r2, #0]
 801553e:	292b      	cmp	r1, #43	@ 0x2b
 8015540:	d04a      	beq.n	80155d8 <_strtod_l+0xb8>
 8015542:	d838      	bhi.n	80155b6 <_strtod_l+0x96>
 8015544:	290d      	cmp	r1, #13
 8015546:	d832      	bhi.n	80155ae <_strtod_l+0x8e>
 8015548:	2908      	cmp	r1, #8
 801554a:	d832      	bhi.n	80155b2 <_strtod_l+0x92>
 801554c:	2900      	cmp	r1, #0
 801554e:	d03b      	beq.n	80155c8 <_strtod_l+0xa8>
 8015550:	2200      	movs	r2, #0
 8015552:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015554:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8015556:	782a      	ldrb	r2, [r5, #0]
 8015558:	2a30      	cmp	r2, #48	@ 0x30
 801555a:	f040 80b3 	bne.w	80156c4 <_strtod_l+0x1a4>
 801555e:	786a      	ldrb	r2, [r5, #1]
 8015560:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015564:	2a58      	cmp	r2, #88	@ 0x58
 8015566:	d16e      	bne.n	8015646 <_strtod_l+0x126>
 8015568:	9302      	str	r3, [sp, #8]
 801556a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801556c:	9301      	str	r3, [sp, #4]
 801556e:	ab1a      	add	r3, sp, #104	@ 0x68
 8015570:	9300      	str	r3, [sp, #0]
 8015572:	4a8e      	ldr	r2, [pc, #568]	@ (80157ac <_strtod_l+0x28c>)
 8015574:	9805      	ldr	r0, [sp, #20]
 8015576:	ab1b      	add	r3, sp, #108	@ 0x6c
 8015578:	a919      	add	r1, sp, #100	@ 0x64
 801557a:	f002 febf 	bl	80182fc <__gethex>
 801557e:	f010 060f 	ands.w	r6, r0, #15
 8015582:	4604      	mov	r4, r0
 8015584:	d005      	beq.n	8015592 <_strtod_l+0x72>
 8015586:	2e06      	cmp	r6, #6
 8015588:	d128      	bne.n	80155dc <_strtod_l+0xbc>
 801558a:	3501      	adds	r5, #1
 801558c:	2300      	movs	r3, #0
 801558e:	9519      	str	r5, [sp, #100]	@ 0x64
 8015590:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015594:	2b00      	cmp	r3, #0
 8015596:	f040 858e 	bne.w	80160b6 <_strtod_l+0xb96>
 801559a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801559c:	b1cb      	cbz	r3, 80155d2 <_strtod_l+0xb2>
 801559e:	4652      	mov	r2, sl
 80155a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80155a4:	ec43 2b10 	vmov	d0, r2, r3
 80155a8:	b01f      	add	sp, #124	@ 0x7c
 80155aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155ae:	2920      	cmp	r1, #32
 80155b0:	d1ce      	bne.n	8015550 <_strtod_l+0x30>
 80155b2:	3201      	adds	r2, #1
 80155b4:	e7c1      	b.n	801553a <_strtod_l+0x1a>
 80155b6:	292d      	cmp	r1, #45	@ 0x2d
 80155b8:	d1ca      	bne.n	8015550 <_strtod_l+0x30>
 80155ba:	2101      	movs	r1, #1
 80155bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80155be:	1c51      	adds	r1, r2, #1
 80155c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80155c2:	7852      	ldrb	r2, [r2, #1]
 80155c4:	2a00      	cmp	r2, #0
 80155c6:	d1c5      	bne.n	8015554 <_strtod_l+0x34>
 80155c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80155ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	f040 8570 	bne.w	80160b2 <_strtod_l+0xb92>
 80155d2:	4652      	mov	r2, sl
 80155d4:	465b      	mov	r3, fp
 80155d6:	e7e5      	b.n	80155a4 <_strtod_l+0x84>
 80155d8:	2100      	movs	r1, #0
 80155da:	e7ef      	b.n	80155bc <_strtod_l+0x9c>
 80155dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80155de:	b13a      	cbz	r2, 80155f0 <_strtod_l+0xd0>
 80155e0:	2135      	movs	r1, #53	@ 0x35
 80155e2:	a81c      	add	r0, sp, #112	@ 0x70
 80155e4:	f003 fddc 	bl	80191a0 <__copybits>
 80155e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80155ea:	9805      	ldr	r0, [sp, #20]
 80155ec:	f003 f9aa 	bl	8018944 <_Bfree>
 80155f0:	3e01      	subs	r6, #1
 80155f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80155f4:	2e04      	cmp	r6, #4
 80155f6:	d806      	bhi.n	8015606 <_strtod_l+0xe6>
 80155f8:	e8df f006 	tbb	[pc, r6]
 80155fc:	201d0314 	.word	0x201d0314
 8015600:	14          	.byte	0x14
 8015601:	00          	.byte	0x00
 8015602:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8015606:	05e1      	lsls	r1, r4, #23
 8015608:	bf48      	it	mi
 801560a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801560e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015612:	0d1b      	lsrs	r3, r3, #20
 8015614:	051b      	lsls	r3, r3, #20
 8015616:	2b00      	cmp	r3, #0
 8015618:	d1bb      	bne.n	8015592 <_strtod_l+0x72>
 801561a:	f001 ff01 	bl	8017420 <__errno>
 801561e:	2322      	movs	r3, #34	@ 0x22
 8015620:	6003      	str	r3, [r0, #0]
 8015622:	e7b6      	b.n	8015592 <_strtod_l+0x72>
 8015624:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8015628:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801562c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015630:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015634:	e7e7      	b.n	8015606 <_strtod_l+0xe6>
 8015636:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80157b4 <_strtod_l+0x294>
 801563a:	e7e4      	b.n	8015606 <_strtod_l+0xe6>
 801563c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015640:	f04f 3aff 	mov.w	sl, #4294967295
 8015644:	e7df      	b.n	8015606 <_strtod_l+0xe6>
 8015646:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015648:	1c5a      	adds	r2, r3, #1
 801564a:	9219      	str	r2, [sp, #100]	@ 0x64
 801564c:	785b      	ldrb	r3, [r3, #1]
 801564e:	2b30      	cmp	r3, #48	@ 0x30
 8015650:	d0f9      	beq.n	8015646 <_strtod_l+0x126>
 8015652:	2b00      	cmp	r3, #0
 8015654:	d09d      	beq.n	8015592 <_strtod_l+0x72>
 8015656:	2301      	movs	r3, #1
 8015658:	9309      	str	r3, [sp, #36]	@ 0x24
 801565a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801565c:	930c      	str	r3, [sp, #48]	@ 0x30
 801565e:	2300      	movs	r3, #0
 8015660:	9308      	str	r3, [sp, #32]
 8015662:	930a      	str	r3, [sp, #40]	@ 0x28
 8015664:	461f      	mov	r7, r3
 8015666:	220a      	movs	r2, #10
 8015668:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801566a:	7805      	ldrb	r5, [r0, #0]
 801566c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8015670:	b2d9      	uxtb	r1, r3
 8015672:	2909      	cmp	r1, #9
 8015674:	d928      	bls.n	80156c8 <_strtod_l+0x1a8>
 8015676:	494e      	ldr	r1, [pc, #312]	@ (80157b0 <_strtod_l+0x290>)
 8015678:	2201      	movs	r2, #1
 801567a:	f001 fdf2 	bl	8017262 <strncmp>
 801567e:	2800      	cmp	r0, #0
 8015680:	d032      	beq.n	80156e8 <_strtod_l+0x1c8>
 8015682:	2000      	movs	r0, #0
 8015684:	462a      	mov	r2, r5
 8015686:	4681      	mov	r9, r0
 8015688:	463d      	mov	r5, r7
 801568a:	4603      	mov	r3, r0
 801568c:	2a65      	cmp	r2, #101	@ 0x65
 801568e:	d001      	beq.n	8015694 <_strtod_l+0x174>
 8015690:	2a45      	cmp	r2, #69	@ 0x45
 8015692:	d114      	bne.n	80156be <_strtod_l+0x19e>
 8015694:	b91d      	cbnz	r5, 801569e <_strtod_l+0x17e>
 8015696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015698:	4302      	orrs	r2, r0
 801569a:	d095      	beq.n	80155c8 <_strtod_l+0xa8>
 801569c:	2500      	movs	r5, #0
 801569e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80156a0:	1c62      	adds	r2, r4, #1
 80156a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80156a4:	7862      	ldrb	r2, [r4, #1]
 80156a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80156a8:	d077      	beq.n	801579a <_strtod_l+0x27a>
 80156aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80156ac:	d07b      	beq.n	80157a6 <_strtod_l+0x286>
 80156ae:	f04f 0c00 	mov.w	ip, #0
 80156b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80156b6:	2909      	cmp	r1, #9
 80156b8:	f240 8082 	bls.w	80157c0 <_strtod_l+0x2a0>
 80156bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80156be:	f04f 0800 	mov.w	r8, #0
 80156c2:	e0a2      	b.n	801580a <_strtod_l+0x2ea>
 80156c4:	2300      	movs	r3, #0
 80156c6:	e7c7      	b.n	8015658 <_strtod_l+0x138>
 80156c8:	2f08      	cmp	r7, #8
 80156ca:	bfd5      	itete	le
 80156cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80156ce:	9908      	ldrgt	r1, [sp, #32]
 80156d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80156d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80156d8:	f100 0001 	add.w	r0, r0, #1
 80156dc:	bfd4      	ite	le
 80156de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80156e0:	9308      	strgt	r3, [sp, #32]
 80156e2:	3701      	adds	r7, #1
 80156e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80156e6:	e7bf      	b.n	8015668 <_strtod_l+0x148>
 80156e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80156ea:	1c5a      	adds	r2, r3, #1
 80156ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80156ee:	785a      	ldrb	r2, [r3, #1]
 80156f0:	b37f      	cbz	r7, 8015752 <_strtod_l+0x232>
 80156f2:	4681      	mov	r9, r0
 80156f4:	463d      	mov	r5, r7
 80156f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80156fa:	2b09      	cmp	r3, #9
 80156fc:	d912      	bls.n	8015724 <_strtod_l+0x204>
 80156fe:	2301      	movs	r3, #1
 8015700:	e7c4      	b.n	801568c <_strtod_l+0x16c>
 8015702:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015704:	1c5a      	adds	r2, r3, #1
 8015706:	9219      	str	r2, [sp, #100]	@ 0x64
 8015708:	785a      	ldrb	r2, [r3, #1]
 801570a:	3001      	adds	r0, #1
 801570c:	2a30      	cmp	r2, #48	@ 0x30
 801570e:	d0f8      	beq.n	8015702 <_strtod_l+0x1e2>
 8015710:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015714:	2b08      	cmp	r3, #8
 8015716:	f200 84d3 	bhi.w	80160c0 <_strtod_l+0xba0>
 801571a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801571c:	930c      	str	r3, [sp, #48]	@ 0x30
 801571e:	4681      	mov	r9, r0
 8015720:	2000      	movs	r0, #0
 8015722:	4605      	mov	r5, r0
 8015724:	3a30      	subs	r2, #48	@ 0x30
 8015726:	f100 0301 	add.w	r3, r0, #1
 801572a:	d02a      	beq.n	8015782 <_strtod_l+0x262>
 801572c:	4499      	add	r9, r3
 801572e:	eb00 0c05 	add.w	ip, r0, r5
 8015732:	462b      	mov	r3, r5
 8015734:	210a      	movs	r1, #10
 8015736:	4563      	cmp	r3, ip
 8015738:	d10d      	bne.n	8015756 <_strtod_l+0x236>
 801573a:	1c69      	adds	r1, r5, #1
 801573c:	4401      	add	r1, r0
 801573e:	4428      	add	r0, r5
 8015740:	2808      	cmp	r0, #8
 8015742:	dc16      	bgt.n	8015772 <_strtod_l+0x252>
 8015744:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015746:	230a      	movs	r3, #10
 8015748:	fb03 2300 	mla	r3, r3, r0, r2
 801574c:	930a      	str	r3, [sp, #40]	@ 0x28
 801574e:	2300      	movs	r3, #0
 8015750:	e018      	b.n	8015784 <_strtod_l+0x264>
 8015752:	4638      	mov	r0, r7
 8015754:	e7da      	b.n	801570c <_strtod_l+0x1ec>
 8015756:	2b08      	cmp	r3, #8
 8015758:	f103 0301 	add.w	r3, r3, #1
 801575c:	dc03      	bgt.n	8015766 <_strtod_l+0x246>
 801575e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8015760:	434e      	muls	r6, r1
 8015762:	960a      	str	r6, [sp, #40]	@ 0x28
 8015764:	e7e7      	b.n	8015736 <_strtod_l+0x216>
 8015766:	2b10      	cmp	r3, #16
 8015768:	bfde      	ittt	le
 801576a:	9e08      	ldrle	r6, [sp, #32]
 801576c:	434e      	mulle	r6, r1
 801576e:	9608      	strle	r6, [sp, #32]
 8015770:	e7e1      	b.n	8015736 <_strtod_l+0x216>
 8015772:	280f      	cmp	r0, #15
 8015774:	dceb      	bgt.n	801574e <_strtod_l+0x22e>
 8015776:	9808      	ldr	r0, [sp, #32]
 8015778:	230a      	movs	r3, #10
 801577a:	fb03 2300 	mla	r3, r3, r0, r2
 801577e:	9308      	str	r3, [sp, #32]
 8015780:	e7e5      	b.n	801574e <_strtod_l+0x22e>
 8015782:	4629      	mov	r1, r5
 8015784:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015786:	1c50      	adds	r0, r2, #1
 8015788:	9019      	str	r0, [sp, #100]	@ 0x64
 801578a:	7852      	ldrb	r2, [r2, #1]
 801578c:	4618      	mov	r0, r3
 801578e:	460d      	mov	r5, r1
 8015790:	e7b1      	b.n	80156f6 <_strtod_l+0x1d6>
 8015792:	f04f 0900 	mov.w	r9, #0
 8015796:	2301      	movs	r3, #1
 8015798:	e77d      	b.n	8015696 <_strtod_l+0x176>
 801579a:	f04f 0c00 	mov.w	ip, #0
 801579e:	1ca2      	adds	r2, r4, #2
 80157a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80157a2:	78a2      	ldrb	r2, [r4, #2]
 80157a4:	e785      	b.n	80156b2 <_strtod_l+0x192>
 80157a6:	f04f 0c01 	mov.w	ip, #1
 80157aa:	e7f8      	b.n	801579e <_strtod_l+0x27e>
 80157ac:	0801dfd4 	.word	0x0801dfd4
 80157b0:	0801dfbc 	.word	0x0801dfbc
 80157b4:	7ff00000 	.word	0x7ff00000
 80157b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80157ba:	1c51      	adds	r1, r2, #1
 80157bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80157be:	7852      	ldrb	r2, [r2, #1]
 80157c0:	2a30      	cmp	r2, #48	@ 0x30
 80157c2:	d0f9      	beq.n	80157b8 <_strtod_l+0x298>
 80157c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80157c8:	2908      	cmp	r1, #8
 80157ca:	f63f af78 	bhi.w	80156be <_strtod_l+0x19e>
 80157ce:	3a30      	subs	r2, #48	@ 0x30
 80157d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80157d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80157d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80157d6:	f04f 080a 	mov.w	r8, #10
 80157da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80157dc:	1c56      	adds	r6, r2, #1
 80157de:	9619      	str	r6, [sp, #100]	@ 0x64
 80157e0:	7852      	ldrb	r2, [r2, #1]
 80157e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80157e6:	f1be 0f09 	cmp.w	lr, #9
 80157ea:	d939      	bls.n	8015860 <_strtod_l+0x340>
 80157ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80157ee:	1a76      	subs	r6, r6, r1
 80157f0:	2e08      	cmp	r6, #8
 80157f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80157f6:	dc03      	bgt.n	8015800 <_strtod_l+0x2e0>
 80157f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80157fa:	4588      	cmp	r8, r1
 80157fc:	bfa8      	it	ge
 80157fe:	4688      	movge	r8, r1
 8015800:	f1bc 0f00 	cmp.w	ip, #0
 8015804:	d001      	beq.n	801580a <_strtod_l+0x2ea>
 8015806:	f1c8 0800 	rsb	r8, r8, #0
 801580a:	2d00      	cmp	r5, #0
 801580c:	d14e      	bne.n	80158ac <_strtod_l+0x38c>
 801580e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015810:	4308      	orrs	r0, r1
 8015812:	f47f aebe 	bne.w	8015592 <_strtod_l+0x72>
 8015816:	2b00      	cmp	r3, #0
 8015818:	f47f aed6 	bne.w	80155c8 <_strtod_l+0xa8>
 801581c:	2a69      	cmp	r2, #105	@ 0x69
 801581e:	d028      	beq.n	8015872 <_strtod_l+0x352>
 8015820:	dc25      	bgt.n	801586e <_strtod_l+0x34e>
 8015822:	2a49      	cmp	r2, #73	@ 0x49
 8015824:	d025      	beq.n	8015872 <_strtod_l+0x352>
 8015826:	2a4e      	cmp	r2, #78	@ 0x4e
 8015828:	f47f aece 	bne.w	80155c8 <_strtod_l+0xa8>
 801582c:	499b      	ldr	r1, [pc, #620]	@ (8015a9c <_strtod_l+0x57c>)
 801582e:	a819      	add	r0, sp, #100	@ 0x64
 8015830:	f002 ff86 	bl	8018740 <__match>
 8015834:	2800      	cmp	r0, #0
 8015836:	f43f aec7 	beq.w	80155c8 <_strtod_l+0xa8>
 801583a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	2b28      	cmp	r3, #40	@ 0x28
 8015840:	d12e      	bne.n	80158a0 <_strtod_l+0x380>
 8015842:	4997      	ldr	r1, [pc, #604]	@ (8015aa0 <_strtod_l+0x580>)
 8015844:	aa1c      	add	r2, sp, #112	@ 0x70
 8015846:	a819      	add	r0, sp, #100	@ 0x64
 8015848:	f002 ff8e 	bl	8018768 <__hexnan>
 801584c:	2805      	cmp	r0, #5
 801584e:	d127      	bne.n	80158a0 <_strtod_l+0x380>
 8015850:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015852:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8015856:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801585a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801585e:	e698      	b.n	8015592 <_strtod_l+0x72>
 8015860:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015862:	fb08 2101 	mla	r1, r8, r1, r2
 8015866:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801586a:	920e      	str	r2, [sp, #56]	@ 0x38
 801586c:	e7b5      	b.n	80157da <_strtod_l+0x2ba>
 801586e:	2a6e      	cmp	r2, #110	@ 0x6e
 8015870:	e7da      	b.n	8015828 <_strtod_l+0x308>
 8015872:	498c      	ldr	r1, [pc, #560]	@ (8015aa4 <_strtod_l+0x584>)
 8015874:	a819      	add	r0, sp, #100	@ 0x64
 8015876:	f002 ff63 	bl	8018740 <__match>
 801587a:	2800      	cmp	r0, #0
 801587c:	f43f aea4 	beq.w	80155c8 <_strtod_l+0xa8>
 8015880:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015882:	4989      	ldr	r1, [pc, #548]	@ (8015aa8 <_strtod_l+0x588>)
 8015884:	3b01      	subs	r3, #1
 8015886:	a819      	add	r0, sp, #100	@ 0x64
 8015888:	9319      	str	r3, [sp, #100]	@ 0x64
 801588a:	f002 ff59 	bl	8018740 <__match>
 801588e:	b910      	cbnz	r0, 8015896 <_strtod_l+0x376>
 8015890:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015892:	3301      	adds	r3, #1
 8015894:	9319      	str	r3, [sp, #100]	@ 0x64
 8015896:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8015ab8 <_strtod_l+0x598>
 801589a:	f04f 0a00 	mov.w	sl, #0
 801589e:	e678      	b.n	8015592 <_strtod_l+0x72>
 80158a0:	4882      	ldr	r0, [pc, #520]	@ (8015aac <_strtod_l+0x58c>)
 80158a2:	f001 fe01 	bl	80174a8 <nan>
 80158a6:	ec5b ab10 	vmov	sl, fp, d0
 80158aa:	e672      	b.n	8015592 <_strtod_l+0x72>
 80158ac:	eba8 0309 	sub.w	r3, r8, r9
 80158b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80158b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80158b4:	2f00      	cmp	r7, #0
 80158b6:	bf08      	it	eq
 80158b8:	462f      	moveq	r7, r5
 80158ba:	2d10      	cmp	r5, #16
 80158bc:	462c      	mov	r4, r5
 80158be:	bfa8      	it	ge
 80158c0:	2410      	movge	r4, #16
 80158c2:	f7ea fdf7 	bl	80004b4 <__aeabi_ui2d>
 80158c6:	2d09      	cmp	r5, #9
 80158c8:	4682      	mov	sl, r0
 80158ca:	468b      	mov	fp, r1
 80158cc:	dc13      	bgt.n	80158f6 <_strtod_l+0x3d6>
 80158ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	f43f ae5e 	beq.w	8015592 <_strtod_l+0x72>
 80158d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158d8:	dd78      	ble.n	80159cc <_strtod_l+0x4ac>
 80158da:	2b16      	cmp	r3, #22
 80158dc:	dc5f      	bgt.n	801599e <_strtod_l+0x47e>
 80158de:	4974      	ldr	r1, [pc, #464]	@ (8015ab0 <_strtod_l+0x590>)
 80158e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80158e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158e8:	4652      	mov	r2, sl
 80158ea:	465b      	mov	r3, fp
 80158ec:	f7ea fe5c 	bl	80005a8 <__aeabi_dmul>
 80158f0:	4682      	mov	sl, r0
 80158f2:	468b      	mov	fp, r1
 80158f4:	e64d      	b.n	8015592 <_strtod_l+0x72>
 80158f6:	4b6e      	ldr	r3, [pc, #440]	@ (8015ab0 <_strtod_l+0x590>)
 80158f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80158fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015900:	f7ea fe52 	bl	80005a8 <__aeabi_dmul>
 8015904:	4682      	mov	sl, r0
 8015906:	9808      	ldr	r0, [sp, #32]
 8015908:	468b      	mov	fp, r1
 801590a:	f7ea fdd3 	bl	80004b4 <__aeabi_ui2d>
 801590e:	4602      	mov	r2, r0
 8015910:	460b      	mov	r3, r1
 8015912:	4650      	mov	r0, sl
 8015914:	4659      	mov	r1, fp
 8015916:	f7ea fc91 	bl	800023c <__adddf3>
 801591a:	2d0f      	cmp	r5, #15
 801591c:	4682      	mov	sl, r0
 801591e:	468b      	mov	fp, r1
 8015920:	ddd5      	ble.n	80158ce <_strtod_l+0x3ae>
 8015922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015924:	1b2c      	subs	r4, r5, r4
 8015926:	441c      	add	r4, r3
 8015928:	2c00      	cmp	r4, #0
 801592a:	f340 8096 	ble.w	8015a5a <_strtod_l+0x53a>
 801592e:	f014 030f 	ands.w	r3, r4, #15
 8015932:	d00a      	beq.n	801594a <_strtod_l+0x42a>
 8015934:	495e      	ldr	r1, [pc, #376]	@ (8015ab0 <_strtod_l+0x590>)
 8015936:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801593a:	4652      	mov	r2, sl
 801593c:	465b      	mov	r3, fp
 801593e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015942:	f7ea fe31 	bl	80005a8 <__aeabi_dmul>
 8015946:	4682      	mov	sl, r0
 8015948:	468b      	mov	fp, r1
 801594a:	f034 040f 	bics.w	r4, r4, #15
 801594e:	d073      	beq.n	8015a38 <_strtod_l+0x518>
 8015950:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8015954:	dd48      	ble.n	80159e8 <_strtod_l+0x4c8>
 8015956:	2400      	movs	r4, #0
 8015958:	46a0      	mov	r8, r4
 801595a:	940a      	str	r4, [sp, #40]	@ 0x28
 801595c:	46a1      	mov	r9, r4
 801595e:	9a05      	ldr	r2, [sp, #20]
 8015960:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015ab8 <_strtod_l+0x598>
 8015964:	2322      	movs	r3, #34	@ 0x22
 8015966:	6013      	str	r3, [r2, #0]
 8015968:	f04f 0a00 	mov.w	sl, #0
 801596c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801596e:	2b00      	cmp	r3, #0
 8015970:	f43f ae0f 	beq.w	8015592 <_strtod_l+0x72>
 8015974:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015976:	9805      	ldr	r0, [sp, #20]
 8015978:	f002 ffe4 	bl	8018944 <_Bfree>
 801597c:	9805      	ldr	r0, [sp, #20]
 801597e:	4649      	mov	r1, r9
 8015980:	f002 ffe0 	bl	8018944 <_Bfree>
 8015984:	9805      	ldr	r0, [sp, #20]
 8015986:	4641      	mov	r1, r8
 8015988:	f002 ffdc 	bl	8018944 <_Bfree>
 801598c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801598e:	9805      	ldr	r0, [sp, #20]
 8015990:	f002 ffd8 	bl	8018944 <_Bfree>
 8015994:	9805      	ldr	r0, [sp, #20]
 8015996:	4621      	mov	r1, r4
 8015998:	f002 ffd4 	bl	8018944 <_Bfree>
 801599c:	e5f9      	b.n	8015592 <_strtod_l+0x72>
 801599e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80159a4:	4293      	cmp	r3, r2
 80159a6:	dbbc      	blt.n	8015922 <_strtod_l+0x402>
 80159a8:	4c41      	ldr	r4, [pc, #260]	@ (8015ab0 <_strtod_l+0x590>)
 80159aa:	f1c5 050f 	rsb	r5, r5, #15
 80159ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80159b2:	4652      	mov	r2, sl
 80159b4:	465b      	mov	r3, fp
 80159b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159ba:	f7ea fdf5 	bl	80005a8 <__aeabi_dmul>
 80159be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80159c0:	1b5d      	subs	r5, r3, r5
 80159c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80159c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80159ca:	e78f      	b.n	80158ec <_strtod_l+0x3cc>
 80159cc:	3316      	adds	r3, #22
 80159ce:	dba8      	blt.n	8015922 <_strtod_l+0x402>
 80159d0:	4b37      	ldr	r3, [pc, #220]	@ (8015ab0 <_strtod_l+0x590>)
 80159d2:	eba9 0808 	sub.w	r8, r9, r8
 80159d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80159da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80159de:	4650      	mov	r0, sl
 80159e0:	4659      	mov	r1, fp
 80159e2:	f7ea ff0b 	bl	80007fc <__aeabi_ddiv>
 80159e6:	e783      	b.n	80158f0 <_strtod_l+0x3d0>
 80159e8:	4b32      	ldr	r3, [pc, #200]	@ (8015ab4 <_strtod_l+0x594>)
 80159ea:	9308      	str	r3, [sp, #32]
 80159ec:	2300      	movs	r3, #0
 80159ee:	1124      	asrs	r4, r4, #4
 80159f0:	4650      	mov	r0, sl
 80159f2:	4659      	mov	r1, fp
 80159f4:	461e      	mov	r6, r3
 80159f6:	2c01      	cmp	r4, #1
 80159f8:	dc21      	bgt.n	8015a3e <_strtod_l+0x51e>
 80159fa:	b10b      	cbz	r3, 8015a00 <_strtod_l+0x4e0>
 80159fc:	4682      	mov	sl, r0
 80159fe:	468b      	mov	fp, r1
 8015a00:	492c      	ldr	r1, [pc, #176]	@ (8015ab4 <_strtod_l+0x594>)
 8015a02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015a06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8015a0a:	4652      	mov	r2, sl
 8015a0c:	465b      	mov	r3, fp
 8015a0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a12:	f7ea fdc9 	bl	80005a8 <__aeabi_dmul>
 8015a16:	4b28      	ldr	r3, [pc, #160]	@ (8015ab8 <_strtod_l+0x598>)
 8015a18:	460a      	mov	r2, r1
 8015a1a:	400b      	ands	r3, r1
 8015a1c:	4927      	ldr	r1, [pc, #156]	@ (8015abc <_strtod_l+0x59c>)
 8015a1e:	428b      	cmp	r3, r1
 8015a20:	4682      	mov	sl, r0
 8015a22:	d898      	bhi.n	8015956 <_strtod_l+0x436>
 8015a24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8015a28:	428b      	cmp	r3, r1
 8015a2a:	bf86      	itte	hi
 8015a2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8015ac0 <_strtod_l+0x5a0>
 8015a30:	f04f 3aff 	movhi.w	sl, #4294967295
 8015a34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8015a38:	2300      	movs	r3, #0
 8015a3a:	9308      	str	r3, [sp, #32]
 8015a3c:	e07a      	b.n	8015b34 <_strtod_l+0x614>
 8015a3e:	07e2      	lsls	r2, r4, #31
 8015a40:	d505      	bpl.n	8015a4e <_strtod_l+0x52e>
 8015a42:	9b08      	ldr	r3, [sp, #32]
 8015a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a48:	f7ea fdae 	bl	80005a8 <__aeabi_dmul>
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	9a08      	ldr	r2, [sp, #32]
 8015a50:	3208      	adds	r2, #8
 8015a52:	3601      	adds	r6, #1
 8015a54:	1064      	asrs	r4, r4, #1
 8015a56:	9208      	str	r2, [sp, #32]
 8015a58:	e7cd      	b.n	80159f6 <_strtod_l+0x4d6>
 8015a5a:	d0ed      	beq.n	8015a38 <_strtod_l+0x518>
 8015a5c:	4264      	negs	r4, r4
 8015a5e:	f014 020f 	ands.w	r2, r4, #15
 8015a62:	d00a      	beq.n	8015a7a <_strtod_l+0x55a>
 8015a64:	4b12      	ldr	r3, [pc, #72]	@ (8015ab0 <_strtod_l+0x590>)
 8015a66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a6a:	4650      	mov	r0, sl
 8015a6c:	4659      	mov	r1, fp
 8015a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a72:	f7ea fec3 	bl	80007fc <__aeabi_ddiv>
 8015a76:	4682      	mov	sl, r0
 8015a78:	468b      	mov	fp, r1
 8015a7a:	1124      	asrs	r4, r4, #4
 8015a7c:	d0dc      	beq.n	8015a38 <_strtod_l+0x518>
 8015a7e:	2c1f      	cmp	r4, #31
 8015a80:	dd20      	ble.n	8015ac4 <_strtod_l+0x5a4>
 8015a82:	2400      	movs	r4, #0
 8015a84:	46a0      	mov	r8, r4
 8015a86:	940a      	str	r4, [sp, #40]	@ 0x28
 8015a88:	46a1      	mov	r9, r4
 8015a8a:	9a05      	ldr	r2, [sp, #20]
 8015a8c:	2322      	movs	r3, #34	@ 0x22
 8015a8e:	f04f 0a00 	mov.w	sl, #0
 8015a92:	f04f 0b00 	mov.w	fp, #0
 8015a96:	6013      	str	r3, [r2, #0]
 8015a98:	e768      	b.n	801596c <_strtod_l+0x44c>
 8015a9a:	bf00      	nop
 8015a9c:	0801e11e 	.word	0x0801e11e
 8015aa0:	0801dfc0 	.word	0x0801dfc0
 8015aa4:	0801e116 	.word	0x0801e116
 8015aa8:	0801e202 	.word	0x0801e202
 8015aac:	0801e1fe 	.word	0x0801e1fe
 8015ab0:	0801e368 	.word	0x0801e368
 8015ab4:	0801e340 	.word	0x0801e340
 8015ab8:	7ff00000 	.word	0x7ff00000
 8015abc:	7ca00000 	.word	0x7ca00000
 8015ac0:	7fefffff 	.word	0x7fefffff
 8015ac4:	f014 0310 	ands.w	r3, r4, #16
 8015ac8:	bf18      	it	ne
 8015aca:	236a      	movne	r3, #106	@ 0x6a
 8015acc:	4ea9      	ldr	r6, [pc, #676]	@ (8015d74 <_strtod_l+0x854>)
 8015ace:	9308      	str	r3, [sp, #32]
 8015ad0:	4650      	mov	r0, sl
 8015ad2:	4659      	mov	r1, fp
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	07e2      	lsls	r2, r4, #31
 8015ad8:	d504      	bpl.n	8015ae4 <_strtod_l+0x5c4>
 8015ada:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015ade:	f7ea fd63 	bl	80005a8 <__aeabi_dmul>
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	1064      	asrs	r4, r4, #1
 8015ae6:	f106 0608 	add.w	r6, r6, #8
 8015aea:	d1f4      	bne.n	8015ad6 <_strtod_l+0x5b6>
 8015aec:	b10b      	cbz	r3, 8015af2 <_strtod_l+0x5d2>
 8015aee:	4682      	mov	sl, r0
 8015af0:	468b      	mov	fp, r1
 8015af2:	9b08      	ldr	r3, [sp, #32]
 8015af4:	b1b3      	cbz	r3, 8015b24 <_strtod_l+0x604>
 8015af6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8015afa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	4659      	mov	r1, fp
 8015b02:	dd0f      	ble.n	8015b24 <_strtod_l+0x604>
 8015b04:	2b1f      	cmp	r3, #31
 8015b06:	dd55      	ble.n	8015bb4 <_strtod_l+0x694>
 8015b08:	2b34      	cmp	r3, #52	@ 0x34
 8015b0a:	bfde      	ittt	le
 8015b0c:	f04f 33ff 	movle.w	r3, #4294967295
 8015b10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8015b14:	4093      	lslle	r3, r2
 8015b16:	f04f 0a00 	mov.w	sl, #0
 8015b1a:	bfcc      	ite	gt
 8015b1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015b20:	ea03 0b01 	andle.w	fp, r3, r1
 8015b24:	2200      	movs	r2, #0
 8015b26:	2300      	movs	r3, #0
 8015b28:	4650      	mov	r0, sl
 8015b2a:	4659      	mov	r1, fp
 8015b2c:	f7ea ffa4 	bl	8000a78 <__aeabi_dcmpeq>
 8015b30:	2800      	cmp	r0, #0
 8015b32:	d1a6      	bne.n	8015a82 <_strtod_l+0x562>
 8015b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b36:	9300      	str	r3, [sp, #0]
 8015b38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015b3a:	9805      	ldr	r0, [sp, #20]
 8015b3c:	462b      	mov	r3, r5
 8015b3e:	463a      	mov	r2, r7
 8015b40:	f002 ff68 	bl	8018a14 <__s2b>
 8015b44:	900a      	str	r0, [sp, #40]	@ 0x28
 8015b46:	2800      	cmp	r0, #0
 8015b48:	f43f af05 	beq.w	8015956 <_strtod_l+0x436>
 8015b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015b4e:	2a00      	cmp	r2, #0
 8015b50:	eba9 0308 	sub.w	r3, r9, r8
 8015b54:	bfa8      	it	ge
 8015b56:	2300      	movge	r3, #0
 8015b58:	9312      	str	r3, [sp, #72]	@ 0x48
 8015b5a:	2400      	movs	r4, #0
 8015b5c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015b60:	9316      	str	r3, [sp, #88]	@ 0x58
 8015b62:	46a0      	mov	r8, r4
 8015b64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b66:	9805      	ldr	r0, [sp, #20]
 8015b68:	6859      	ldr	r1, [r3, #4]
 8015b6a:	f002 feab 	bl	80188c4 <_Balloc>
 8015b6e:	4681      	mov	r9, r0
 8015b70:	2800      	cmp	r0, #0
 8015b72:	f43f aef4 	beq.w	801595e <_strtod_l+0x43e>
 8015b76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b78:	691a      	ldr	r2, [r3, #16]
 8015b7a:	3202      	adds	r2, #2
 8015b7c:	f103 010c 	add.w	r1, r3, #12
 8015b80:	0092      	lsls	r2, r2, #2
 8015b82:	300c      	adds	r0, #12
 8015b84:	f001 fc81 	bl	801748a <memcpy>
 8015b88:	ec4b ab10 	vmov	d0, sl, fp
 8015b8c:	9805      	ldr	r0, [sp, #20]
 8015b8e:	aa1c      	add	r2, sp, #112	@ 0x70
 8015b90:	a91b      	add	r1, sp, #108	@ 0x6c
 8015b92:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015b96:	f003 fa79 	bl	801908c <__d2b>
 8015b9a:	901a      	str	r0, [sp, #104]	@ 0x68
 8015b9c:	2800      	cmp	r0, #0
 8015b9e:	f43f aede 	beq.w	801595e <_strtod_l+0x43e>
 8015ba2:	9805      	ldr	r0, [sp, #20]
 8015ba4:	2101      	movs	r1, #1
 8015ba6:	f002 ffcb 	bl	8018b40 <__i2b>
 8015baa:	4680      	mov	r8, r0
 8015bac:	b948      	cbnz	r0, 8015bc2 <_strtod_l+0x6a2>
 8015bae:	f04f 0800 	mov.w	r8, #0
 8015bb2:	e6d4      	b.n	801595e <_strtod_l+0x43e>
 8015bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8015bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8015bbc:	ea03 0a0a 	and.w	sl, r3, sl
 8015bc0:	e7b0      	b.n	8015b24 <_strtod_l+0x604>
 8015bc2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8015bc4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015bc6:	2d00      	cmp	r5, #0
 8015bc8:	bfab      	itete	ge
 8015bca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8015bcc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8015bce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015bd0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015bd2:	bfac      	ite	ge
 8015bd4:	18ef      	addge	r7, r5, r3
 8015bd6:	1b5e      	sublt	r6, r3, r5
 8015bd8:	9b08      	ldr	r3, [sp, #32]
 8015bda:	1aed      	subs	r5, r5, r3
 8015bdc:	4415      	add	r5, r2
 8015bde:	4b66      	ldr	r3, [pc, #408]	@ (8015d78 <_strtod_l+0x858>)
 8015be0:	3d01      	subs	r5, #1
 8015be2:	429d      	cmp	r5, r3
 8015be4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015be8:	da50      	bge.n	8015c8c <_strtod_l+0x76c>
 8015bea:	1b5b      	subs	r3, r3, r5
 8015bec:	2b1f      	cmp	r3, #31
 8015bee:	eba2 0203 	sub.w	r2, r2, r3
 8015bf2:	f04f 0101 	mov.w	r1, #1
 8015bf6:	dc3d      	bgt.n	8015c74 <_strtod_l+0x754>
 8015bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8015bfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015bfe:	2300      	movs	r3, #0
 8015c00:	9310      	str	r3, [sp, #64]	@ 0x40
 8015c02:	18bd      	adds	r5, r7, r2
 8015c04:	9b08      	ldr	r3, [sp, #32]
 8015c06:	42af      	cmp	r7, r5
 8015c08:	4416      	add	r6, r2
 8015c0a:	441e      	add	r6, r3
 8015c0c:	463b      	mov	r3, r7
 8015c0e:	bfa8      	it	ge
 8015c10:	462b      	movge	r3, r5
 8015c12:	42b3      	cmp	r3, r6
 8015c14:	bfa8      	it	ge
 8015c16:	4633      	movge	r3, r6
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	bfc2      	ittt	gt
 8015c1c:	1aed      	subgt	r5, r5, r3
 8015c1e:	1af6      	subgt	r6, r6, r3
 8015c20:	1aff      	subgt	r7, r7, r3
 8015c22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	dd16      	ble.n	8015c56 <_strtod_l+0x736>
 8015c28:	4641      	mov	r1, r8
 8015c2a:	9805      	ldr	r0, [sp, #20]
 8015c2c:	461a      	mov	r2, r3
 8015c2e:	f003 f847 	bl	8018cc0 <__pow5mult>
 8015c32:	4680      	mov	r8, r0
 8015c34:	2800      	cmp	r0, #0
 8015c36:	d0ba      	beq.n	8015bae <_strtod_l+0x68e>
 8015c38:	4601      	mov	r1, r0
 8015c3a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015c3c:	9805      	ldr	r0, [sp, #20]
 8015c3e:	f002 ff95 	bl	8018b6c <__multiply>
 8015c42:	900e      	str	r0, [sp, #56]	@ 0x38
 8015c44:	2800      	cmp	r0, #0
 8015c46:	f43f ae8a 	beq.w	801595e <_strtod_l+0x43e>
 8015c4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015c4c:	9805      	ldr	r0, [sp, #20]
 8015c4e:	f002 fe79 	bl	8018944 <_Bfree>
 8015c52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c54:	931a      	str	r3, [sp, #104]	@ 0x68
 8015c56:	2d00      	cmp	r5, #0
 8015c58:	dc1d      	bgt.n	8015c96 <_strtod_l+0x776>
 8015c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	dd23      	ble.n	8015ca8 <_strtod_l+0x788>
 8015c60:	4649      	mov	r1, r9
 8015c62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015c64:	9805      	ldr	r0, [sp, #20]
 8015c66:	f003 f82b 	bl	8018cc0 <__pow5mult>
 8015c6a:	4681      	mov	r9, r0
 8015c6c:	b9e0      	cbnz	r0, 8015ca8 <_strtod_l+0x788>
 8015c6e:	f04f 0900 	mov.w	r9, #0
 8015c72:	e674      	b.n	801595e <_strtod_l+0x43e>
 8015c74:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8015c78:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8015c7c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8015c80:	35e2      	adds	r5, #226	@ 0xe2
 8015c82:	fa01 f305 	lsl.w	r3, r1, r5
 8015c86:	9310      	str	r3, [sp, #64]	@ 0x40
 8015c88:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015c8a:	e7ba      	b.n	8015c02 <_strtod_l+0x6e2>
 8015c8c:	2300      	movs	r3, #0
 8015c8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015c90:	2301      	movs	r3, #1
 8015c92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015c94:	e7b5      	b.n	8015c02 <_strtod_l+0x6e2>
 8015c96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015c98:	9805      	ldr	r0, [sp, #20]
 8015c9a:	462a      	mov	r2, r5
 8015c9c:	f003 f86a 	bl	8018d74 <__lshift>
 8015ca0:	901a      	str	r0, [sp, #104]	@ 0x68
 8015ca2:	2800      	cmp	r0, #0
 8015ca4:	d1d9      	bne.n	8015c5a <_strtod_l+0x73a>
 8015ca6:	e65a      	b.n	801595e <_strtod_l+0x43e>
 8015ca8:	2e00      	cmp	r6, #0
 8015caa:	dd07      	ble.n	8015cbc <_strtod_l+0x79c>
 8015cac:	4649      	mov	r1, r9
 8015cae:	9805      	ldr	r0, [sp, #20]
 8015cb0:	4632      	mov	r2, r6
 8015cb2:	f003 f85f 	bl	8018d74 <__lshift>
 8015cb6:	4681      	mov	r9, r0
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d0d8      	beq.n	8015c6e <_strtod_l+0x74e>
 8015cbc:	2f00      	cmp	r7, #0
 8015cbe:	dd08      	ble.n	8015cd2 <_strtod_l+0x7b2>
 8015cc0:	4641      	mov	r1, r8
 8015cc2:	9805      	ldr	r0, [sp, #20]
 8015cc4:	463a      	mov	r2, r7
 8015cc6:	f003 f855 	bl	8018d74 <__lshift>
 8015cca:	4680      	mov	r8, r0
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	f43f ae46 	beq.w	801595e <_strtod_l+0x43e>
 8015cd2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015cd4:	9805      	ldr	r0, [sp, #20]
 8015cd6:	464a      	mov	r2, r9
 8015cd8:	f003 f8d4 	bl	8018e84 <__mdiff>
 8015cdc:	4604      	mov	r4, r0
 8015cde:	2800      	cmp	r0, #0
 8015ce0:	f43f ae3d 	beq.w	801595e <_strtod_l+0x43e>
 8015ce4:	68c3      	ldr	r3, [r0, #12]
 8015ce6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015ce8:	2300      	movs	r3, #0
 8015cea:	60c3      	str	r3, [r0, #12]
 8015cec:	4641      	mov	r1, r8
 8015cee:	f003 f8ad 	bl	8018e4c <__mcmp>
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	da46      	bge.n	8015d84 <_strtod_l+0x864>
 8015cf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015cf8:	ea53 030a 	orrs.w	r3, r3, sl
 8015cfc:	d16c      	bne.n	8015dd8 <_strtod_l+0x8b8>
 8015cfe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d168      	bne.n	8015dd8 <_strtod_l+0x8b8>
 8015d06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015d0a:	0d1b      	lsrs	r3, r3, #20
 8015d0c:	051b      	lsls	r3, r3, #20
 8015d0e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015d12:	d961      	bls.n	8015dd8 <_strtod_l+0x8b8>
 8015d14:	6963      	ldr	r3, [r4, #20]
 8015d16:	b913      	cbnz	r3, 8015d1e <_strtod_l+0x7fe>
 8015d18:	6923      	ldr	r3, [r4, #16]
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	dd5c      	ble.n	8015dd8 <_strtod_l+0x8b8>
 8015d1e:	4621      	mov	r1, r4
 8015d20:	2201      	movs	r2, #1
 8015d22:	9805      	ldr	r0, [sp, #20]
 8015d24:	f003 f826 	bl	8018d74 <__lshift>
 8015d28:	4641      	mov	r1, r8
 8015d2a:	4604      	mov	r4, r0
 8015d2c:	f003 f88e 	bl	8018e4c <__mcmp>
 8015d30:	2800      	cmp	r0, #0
 8015d32:	dd51      	ble.n	8015dd8 <_strtod_l+0x8b8>
 8015d34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015d38:	9a08      	ldr	r2, [sp, #32]
 8015d3a:	0d1b      	lsrs	r3, r3, #20
 8015d3c:	051b      	lsls	r3, r3, #20
 8015d3e:	2a00      	cmp	r2, #0
 8015d40:	d06b      	beq.n	8015e1a <_strtod_l+0x8fa>
 8015d42:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015d46:	d868      	bhi.n	8015e1a <_strtod_l+0x8fa>
 8015d48:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015d4c:	f67f ae9d 	bls.w	8015a8a <_strtod_l+0x56a>
 8015d50:	4b0a      	ldr	r3, [pc, #40]	@ (8015d7c <_strtod_l+0x85c>)
 8015d52:	4650      	mov	r0, sl
 8015d54:	4659      	mov	r1, fp
 8015d56:	2200      	movs	r2, #0
 8015d58:	f7ea fc26 	bl	80005a8 <__aeabi_dmul>
 8015d5c:	4b08      	ldr	r3, [pc, #32]	@ (8015d80 <_strtod_l+0x860>)
 8015d5e:	400b      	ands	r3, r1
 8015d60:	4682      	mov	sl, r0
 8015d62:	468b      	mov	fp, r1
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	f47f ae05 	bne.w	8015974 <_strtod_l+0x454>
 8015d6a:	9a05      	ldr	r2, [sp, #20]
 8015d6c:	2322      	movs	r3, #34	@ 0x22
 8015d6e:	6013      	str	r3, [r2, #0]
 8015d70:	e600      	b.n	8015974 <_strtod_l+0x454>
 8015d72:	bf00      	nop
 8015d74:	0801dfe8 	.word	0x0801dfe8
 8015d78:	fffffc02 	.word	0xfffffc02
 8015d7c:	39500000 	.word	0x39500000
 8015d80:	7ff00000 	.word	0x7ff00000
 8015d84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015d88:	d165      	bne.n	8015e56 <_strtod_l+0x936>
 8015d8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015d8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d90:	b35a      	cbz	r2, 8015dea <_strtod_l+0x8ca>
 8015d92:	4a9f      	ldr	r2, [pc, #636]	@ (8016010 <_strtod_l+0xaf0>)
 8015d94:	4293      	cmp	r3, r2
 8015d96:	d12b      	bne.n	8015df0 <_strtod_l+0x8d0>
 8015d98:	9b08      	ldr	r3, [sp, #32]
 8015d9a:	4651      	mov	r1, sl
 8015d9c:	b303      	cbz	r3, 8015de0 <_strtod_l+0x8c0>
 8015d9e:	4b9d      	ldr	r3, [pc, #628]	@ (8016014 <_strtod_l+0xaf4>)
 8015da0:	465a      	mov	r2, fp
 8015da2:	4013      	ands	r3, r2
 8015da4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015da8:	f04f 32ff 	mov.w	r2, #4294967295
 8015dac:	d81b      	bhi.n	8015de6 <_strtod_l+0x8c6>
 8015dae:	0d1b      	lsrs	r3, r3, #20
 8015db0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015db4:	fa02 f303 	lsl.w	r3, r2, r3
 8015db8:	4299      	cmp	r1, r3
 8015dba:	d119      	bne.n	8015df0 <_strtod_l+0x8d0>
 8015dbc:	4b96      	ldr	r3, [pc, #600]	@ (8016018 <_strtod_l+0xaf8>)
 8015dbe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015dc0:	429a      	cmp	r2, r3
 8015dc2:	d102      	bne.n	8015dca <_strtod_l+0x8aa>
 8015dc4:	3101      	adds	r1, #1
 8015dc6:	f43f adca 	beq.w	801595e <_strtod_l+0x43e>
 8015dca:	4b92      	ldr	r3, [pc, #584]	@ (8016014 <_strtod_l+0xaf4>)
 8015dcc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015dce:	401a      	ands	r2, r3
 8015dd0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015dd4:	f04f 0a00 	mov.w	sl, #0
 8015dd8:	9b08      	ldr	r3, [sp, #32]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d1b8      	bne.n	8015d50 <_strtod_l+0x830>
 8015dde:	e5c9      	b.n	8015974 <_strtod_l+0x454>
 8015de0:	f04f 33ff 	mov.w	r3, #4294967295
 8015de4:	e7e8      	b.n	8015db8 <_strtod_l+0x898>
 8015de6:	4613      	mov	r3, r2
 8015de8:	e7e6      	b.n	8015db8 <_strtod_l+0x898>
 8015dea:	ea53 030a 	orrs.w	r3, r3, sl
 8015dee:	d0a1      	beq.n	8015d34 <_strtod_l+0x814>
 8015df0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015df2:	b1db      	cbz	r3, 8015e2c <_strtod_l+0x90c>
 8015df4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015df6:	4213      	tst	r3, r2
 8015df8:	d0ee      	beq.n	8015dd8 <_strtod_l+0x8b8>
 8015dfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015dfc:	9a08      	ldr	r2, [sp, #32]
 8015dfe:	4650      	mov	r0, sl
 8015e00:	4659      	mov	r1, fp
 8015e02:	b1bb      	cbz	r3, 8015e34 <_strtod_l+0x914>
 8015e04:	f7ff fb6c 	bl	80154e0 <sulp>
 8015e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015e0c:	ec53 2b10 	vmov	r2, r3, d0
 8015e10:	f7ea fa14 	bl	800023c <__adddf3>
 8015e14:	4682      	mov	sl, r0
 8015e16:	468b      	mov	fp, r1
 8015e18:	e7de      	b.n	8015dd8 <_strtod_l+0x8b8>
 8015e1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015e1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015e22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015e26:	f04f 3aff 	mov.w	sl, #4294967295
 8015e2a:	e7d5      	b.n	8015dd8 <_strtod_l+0x8b8>
 8015e2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015e2e:	ea13 0f0a 	tst.w	r3, sl
 8015e32:	e7e1      	b.n	8015df8 <_strtod_l+0x8d8>
 8015e34:	f7ff fb54 	bl	80154e0 <sulp>
 8015e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015e3c:	ec53 2b10 	vmov	r2, r3, d0
 8015e40:	f7ea f9fa 	bl	8000238 <__aeabi_dsub>
 8015e44:	2200      	movs	r2, #0
 8015e46:	2300      	movs	r3, #0
 8015e48:	4682      	mov	sl, r0
 8015e4a:	468b      	mov	fp, r1
 8015e4c:	f7ea fe14 	bl	8000a78 <__aeabi_dcmpeq>
 8015e50:	2800      	cmp	r0, #0
 8015e52:	d0c1      	beq.n	8015dd8 <_strtod_l+0x8b8>
 8015e54:	e619      	b.n	8015a8a <_strtod_l+0x56a>
 8015e56:	4641      	mov	r1, r8
 8015e58:	4620      	mov	r0, r4
 8015e5a:	f003 f96f 	bl	801913c <__ratio>
 8015e5e:	ec57 6b10 	vmov	r6, r7, d0
 8015e62:	2200      	movs	r2, #0
 8015e64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015e68:	4630      	mov	r0, r6
 8015e6a:	4639      	mov	r1, r7
 8015e6c:	f7ea fe18 	bl	8000aa0 <__aeabi_dcmple>
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d06f      	beq.n	8015f54 <_strtod_l+0xa34>
 8015e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d17a      	bne.n	8015f70 <_strtod_l+0xa50>
 8015e7a:	f1ba 0f00 	cmp.w	sl, #0
 8015e7e:	d158      	bne.n	8015f32 <_strtod_l+0xa12>
 8015e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d15a      	bne.n	8015f40 <_strtod_l+0xa20>
 8015e8a:	4b64      	ldr	r3, [pc, #400]	@ (801601c <_strtod_l+0xafc>)
 8015e8c:	2200      	movs	r2, #0
 8015e8e:	4630      	mov	r0, r6
 8015e90:	4639      	mov	r1, r7
 8015e92:	f7ea fdfb 	bl	8000a8c <__aeabi_dcmplt>
 8015e96:	2800      	cmp	r0, #0
 8015e98:	d159      	bne.n	8015f4e <_strtod_l+0xa2e>
 8015e9a:	4630      	mov	r0, r6
 8015e9c:	4639      	mov	r1, r7
 8015e9e:	4b60      	ldr	r3, [pc, #384]	@ (8016020 <_strtod_l+0xb00>)
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	f7ea fb81 	bl	80005a8 <__aeabi_dmul>
 8015ea6:	4606      	mov	r6, r0
 8015ea8:	460f      	mov	r7, r1
 8015eaa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015eae:	9606      	str	r6, [sp, #24]
 8015eb0:	9307      	str	r3, [sp, #28]
 8015eb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015eb6:	4d57      	ldr	r5, [pc, #348]	@ (8016014 <_strtod_l+0xaf4>)
 8015eb8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015ebc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ebe:	401d      	ands	r5, r3
 8015ec0:	4b58      	ldr	r3, [pc, #352]	@ (8016024 <_strtod_l+0xb04>)
 8015ec2:	429d      	cmp	r5, r3
 8015ec4:	f040 80b2 	bne.w	801602c <_strtod_l+0xb0c>
 8015ec8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015eca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015ece:	ec4b ab10 	vmov	d0, sl, fp
 8015ed2:	f003 f86b 	bl	8018fac <__ulp>
 8015ed6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015eda:	ec51 0b10 	vmov	r0, r1, d0
 8015ede:	f7ea fb63 	bl	80005a8 <__aeabi_dmul>
 8015ee2:	4652      	mov	r2, sl
 8015ee4:	465b      	mov	r3, fp
 8015ee6:	f7ea f9a9 	bl	800023c <__adddf3>
 8015eea:	460b      	mov	r3, r1
 8015eec:	4949      	ldr	r1, [pc, #292]	@ (8016014 <_strtod_l+0xaf4>)
 8015eee:	4a4e      	ldr	r2, [pc, #312]	@ (8016028 <_strtod_l+0xb08>)
 8015ef0:	4019      	ands	r1, r3
 8015ef2:	4291      	cmp	r1, r2
 8015ef4:	4682      	mov	sl, r0
 8015ef6:	d942      	bls.n	8015f7e <_strtod_l+0xa5e>
 8015ef8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015efa:	4b47      	ldr	r3, [pc, #284]	@ (8016018 <_strtod_l+0xaf8>)
 8015efc:	429a      	cmp	r2, r3
 8015efe:	d103      	bne.n	8015f08 <_strtod_l+0x9e8>
 8015f00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f02:	3301      	adds	r3, #1
 8015f04:	f43f ad2b 	beq.w	801595e <_strtod_l+0x43e>
 8015f08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016018 <_strtod_l+0xaf8>
 8015f0c:	f04f 3aff 	mov.w	sl, #4294967295
 8015f10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015f12:	9805      	ldr	r0, [sp, #20]
 8015f14:	f002 fd16 	bl	8018944 <_Bfree>
 8015f18:	9805      	ldr	r0, [sp, #20]
 8015f1a:	4649      	mov	r1, r9
 8015f1c:	f002 fd12 	bl	8018944 <_Bfree>
 8015f20:	9805      	ldr	r0, [sp, #20]
 8015f22:	4641      	mov	r1, r8
 8015f24:	f002 fd0e 	bl	8018944 <_Bfree>
 8015f28:	9805      	ldr	r0, [sp, #20]
 8015f2a:	4621      	mov	r1, r4
 8015f2c:	f002 fd0a 	bl	8018944 <_Bfree>
 8015f30:	e618      	b.n	8015b64 <_strtod_l+0x644>
 8015f32:	f1ba 0f01 	cmp.w	sl, #1
 8015f36:	d103      	bne.n	8015f40 <_strtod_l+0xa20>
 8015f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	f43f ada5 	beq.w	8015a8a <_strtod_l+0x56a>
 8015f40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015ff0 <_strtod_l+0xad0>
 8015f44:	4f35      	ldr	r7, [pc, #212]	@ (801601c <_strtod_l+0xafc>)
 8015f46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f4a:	2600      	movs	r6, #0
 8015f4c:	e7b1      	b.n	8015eb2 <_strtod_l+0x992>
 8015f4e:	4f34      	ldr	r7, [pc, #208]	@ (8016020 <_strtod_l+0xb00>)
 8015f50:	2600      	movs	r6, #0
 8015f52:	e7aa      	b.n	8015eaa <_strtod_l+0x98a>
 8015f54:	4b32      	ldr	r3, [pc, #200]	@ (8016020 <_strtod_l+0xb00>)
 8015f56:	4630      	mov	r0, r6
 8015f58:	4639      	mov	r1, r7
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f7ea fb24 	bl	80005a8 <__aeabi_dmul>
 8015f60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f62:	4606      	mov	r6, r0
 8015f64:	460f      	mov	r7, r1
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d09f      	beq.n	8015eaa <_strtod_l+0x98a>
 8015f6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015f6e:	e7a0      	b.n	8015eb2 <_strtod_l+0x992>
 8015f70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015ff8 <_strtod_l+0xad8>
 8015f74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f78:	ec57 6b17 	vmov	r6, r7, d7
 8015f7c:	e799      	b.n	8015eb2 <_strtod_l+0x992>
 8015f7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015f82:	9b08      	ldr	r3, [sp, #32]
 8015f84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1c1      	bne.n	8015f10 <_strtod_l+0x9f0>
 8015f8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015f90:	0d1b      	lsrs	r3, r3, #20
 8015f92:	051b      	lsls	r3, r3, #20
 8015f94:	429d      	cmp	r5, r3
 8015f96:	d1bb      	bne.n	8015f10 <_strtod_l+0x9f0>
 8015f98:	4630      	mov	r0, r6
 8015f9a:	4639      	mov	r1, r7
 8015f9c:	f7ea fe64 	bl	8000c68 <__aeabi_d2lz>
 8015fa0:	f7ea fad4 	bl	800054c <__aeabi_l2d>
 8015fa4:	4602      	mov	r2, r0
 8015fa6:	460b      	mov	r3, r1
 8015fa8:	4630      	mov	r0, r6
 8015faa:	4639      	mov	r1, r7
 8015fac:	f7ea f944 	bl	8000238 <__aeabi_dsub>
 8015fb0:	460b      	mov	r3, r1
 8015fb2:	4602      	mov	r2, r0
 8015fb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015fb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fbe:	ea46 060a 	orr.w	r6, r6, sl
 8015fc2:	431e      	orrs	r6, r3
 8015fc4:	d06f      	beq.n	80160a6 <_strtod_l+0xb86>
 8015fc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8016000 <_strtod_l+0xae0>)
 8015fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fcc:	f7ea fd5e 	bl	8000a8c <__aeabi_dcmplt>
 8015fd0:	2800      	cmp	r0, #0
 8015fd2:	f47f accf 	bne.w	8015974 <_strtod_l+0x454>
 8015fd6:	a30c      	add	r3, pc, #48	@ (adr r3, 8016008 <_strtod_l+0xae8>)
 8015fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015fe0:	f7ea fd72 	bl	8000ac8 <__aeabi_dcmpgt>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	d093      	beq.n	8015f10 <_strtod_l+0x9f0>
 8015fe8:	e4c4      	b.n	8015974 <_strtod_l+0x454>
 8015fea:	bf00      	nop
 8015fec:	f3af 8000 	nop.w
 8015ff0:	00000000 	.word	0x00000000
 8015ff4:	bff00000 	.word	0xbff00000
 8015ff8:	00000000 	.word	0x00000000
 8015ffc:	3ff00000 	.word	0x3ff00000
 8016000:	94a03595 	.word	0x94a03595
 8016004:	3fdfffff 	.word	0x3fdfffff
 8016008:	35afe535 	.word	0x35afe535
 801600c:	3fe00000 	.word	0x3fe00000
 8016010:	000fffff 	.word	0x000fffff
 8016014:	7ff00000 	.word	0x7ff00000
 8016018:	7fefffff 	.word	0x7fefffff
 801601c:	3ff00000 	.word	0x3ff00000
 8016020:	3fe00000 	.word	0x3fe00000
 8016024:	7fe00000 	.word	0x7fe00000
 8016028:	7c9fffff 	.word	0x7c9fffff
 801602c:	9b08      	ldr	r3, [sp, #32]
 801602e:	b323      	cbz	r3, 801607a <_strtod_l+0xb5a>
 8016030:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016034:	d821      	bhi.n	801607a <_strtod_l+0xb5a>
 8016036:	a328      	add	r3, pc, #160	@ (adr r3, 80160d8 <_strtod_l+0xbb8>)
 8016038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801603c:	4630      	mov	r0, r6
 801603e:	4639      	mov	r1, r7
 8016040:	f7ea fd2e 	bl	8000aa0 <__aeabi_dcmple>
 8016044:	b1a0      	cbz	r0, 8016070 <_strtod_l+0xb50>
 8016046:	4639      	mov	r1, r7
 8016048:	4630      	mov	r0, r6
 801604a:	f7ea fd85 	bl	8000b58 <__aeabi_d2uiz>
 801604e:	2801      	cmp	r0, #1
 8016050:	bf38      	it	cc
 8016052:	2001      	movcc	r0, #1
 8016054:	f7ea fa2e 	bl	80004b4 <__aeabi_ui2d>
 8016058:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801605a:	4606      	mov	r6, r0
 801605c:	460f      	mov	r7, r1
 801605e:	b9fb      	cbnz	r3, 80160a0 <_strtod_l+0xb80>
 8016060:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016064:	9014      	str	r0, [sp, #80]	@ 0x50
 8016066:	9315      	str	r3, [sp, #84]	@ 0x54
 8016068:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801606c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016070:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016072:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016076:	1b5b      	subs	r3, r3, r5
 8016078:	9311      	str	r3, [sp, #68]	@ 0x44
 801607a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801607e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016082:	f002 ff93 	bl	8018fac <__ulp>
 8016086:	4650      	mov	r0, sl
 8016088:	ec53 2b10 	vmov	r2, r3, d0
 801608c:	4659      	mov	r1, fp
 801608e:	f7ea fa8b 	bl	80005a8 <__aeabi_dmul>
 8016092:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016096:	f7ea f8d1 	bl	800023c <__adddf3>
 801609a:	4682      	mov	sl, r0
 801609c:	468b      	mov	fp, r1
 801609e:	e770      	b.n	8015f82 <_strtod_l+0xa62>
 80160a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80160a4:	e7e0      	b.n	8016068 <_strtod_l+0xb48>
 80160a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80160e0 <_strtod_l+0xbc0>)
 80160a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160ac:	f7ea fcee 	bl	8000a8c <__aeabi_dcmplt>
 80160b0:	e798      	b.n	8015fe4 <_strtod_l+0xac4>
 80160b2:	2300      	movs	r3, #0
 80160b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80160b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80160b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80160ba:	6013      	str	r3, [r2, #0]
 80160bc:	f7ff ba6d 	b.w	801559a <_strtod_l+0x7a>
 80160c0:	2a65      	cmp	r2, #101	@ 0x65
 80160c2:	f43f ab66 	beq.w	8015792 <_strtod_l+0x272>
 80160c6:	2a45      	cmp	r2, #69	@ 0x45
 80160c8:	f43f ab63 	beq.w	8015792 <_strtod_l+0x272>
 80160cc:	2301      	movs	r3, #1
 80160ce:	f7ff bb9e 	b.w	801580e <_strtod_l+0x2ee>
 80160d2:	bf00      	nop
 80160d4:	f3af 8000 	nop.w
 80160d8:	ffc00000 	.word	0xffc00000
 80160dc:	41dfffff 	.word	0x41dfffff
 80160e0:	94a03595 	.word	0x94a03595
 80160e4:	3fcfffff 	.word	0x3fcfffff

080160e8 <_strtod_r>:
 80160e8:	4b01      	ldr	r3, [pc, #4]	@ (80160f0 <_strtod_r+0x8>)
 80160ea:	f7ff ba19 	b.w	8015520 <_strtod_l>
 80160ee:	bf00      	nop
 80160f0:	20000138 	.word	0x20000138

080160f4 <strtof>:
 80160f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 80161b8 <strtof+0xc4>
 80160fc:	4b29      	ldr	r3, [pc, #164]	@ (80161a4 <strtof+0xb0>)
 80160fe:	460a      	mov	r2, r1
 8016100:	ed2d 8b02 	vpush	{d8}
 8016104:	4601      	mov	r1, r0
 8016106:	f8d8 0000 	ldr.w	r0, [r8]
 801610a:	f7ff fa09 	bl	8015520 <_strtod_l>
 801610e:	ec55 4b10 	vmov	r4, r5, d0
 8016112:	4622      	mov	r2, r4
 8016114:	462b      	mov	r3, r5
 8016116:	4620      	mov	r0, r4
 8016118:	4629      	mov	r1, r5
 801611a:	f7ea fcdf 	bl	8000adc <__aeabi_dcmpun>
 801611e:	b190      	cbz	r0, 8016146 <strtof+0x52>
 8016120:	2d00      	cmp	r5, #0
 8016122:	4821      	ldr	r0, [pc, #132]	@ (80161a8 <strtof+0xb4>)
 8016124:	da09      	bge.n	801613a <strtof+0x46>
 8016126:	f001 f9c7 	bl	80174b8 <nanf>
 801612a:	eeb1 8a40 	vneg.f32	s16, s0
 801612e:	eeb0 0a48 	vmov.f32	s0, s16
 8016132:	ecbd 8b02 	vpop	{d8}
 8016136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801613a:	ecbd 8b02 	vpop	{d8}
 801613e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016142:	f001 b9b9 	b.w	80174b8 <nanf>
 8016146:	4620      	mov	r0, r4
 8016148:	4629      	mov	r1, r5
 801614a:	f7ea fd25 	bl	8000b98 <__aeabi_d2f>
 801614e:	ee08 0a10 	vmov	s16, r0
 8016152:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80161ac <strtof+0xb8>
 8016156:	eeb0 7ac8 	vabs.f32	s14, s16
 801615a:	eeb4 7a67 	vcmp.f32	s14, s15
 801615e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016162:	dd11      	ble.n	8016188 <strtof+0x94>
 8016164:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8016168:	4b11      	ldr	r3, [pc, #68]	@ (80161b0 <strtof+0xbc>)
 801616a:	f04f 32ff 	mov.w	r2, #4294967295
 801616e:	4620      	mov	r0, r4
 8016170:	4639      	mov	r1, r7
 8016172:	f7ea fcb3 	bl	8000adc <__aeabi_dcmpun>
 8016176:	b980      	cbnz	r0, 801619a <strtof+0xa6>
 8016178:	4b0d      	ldr	r3, [pc, #52]	@ (80161b0 <strtof+0xbc>)
 801617a:	f04f 32ff 	mov.w	r2, #4294967295
 801617e:	4620      	mov	r0, r4
 8016180:	4639      	mov	r1, r7
 8016182:	f7ea fc8d 	bl	8000aa0 <__aeabi_dcmple>
 8016186:	b940      	cbnz	r0, 801619a <strtof+0xa6>
 8016188:	ee18 3a10 	vmov	r3, s16
 801618c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8016190:	d1cd      	bne.n	801612e <strtof+0x3a>
 8016192:	4b08      	ldr	r3, [pc, #32]	@ (80161b4 <strtof+0xc0>)
 8016194:	402b      	ands	r3, r5
 8016196:	2b00      	cmp	r3, #0
 8016198:	d0c9      	beq.n	801612e <strtof+0x3a>
 801619a:	f8d8 3000 	ldr.w	r3, [r8]
 801619e:	2222      	movs	r2, #34	@ 0x22
 80161a0:	601a      	str	r2, [r3, #0]
 80161a2:	e7c4      	b.n	801612e <strtof+0x3a>
 80161a4:	20000138 	.word	0x20000138
 80161a8:	0801e1fe 	.word	0x0801e1fe
 80161ac:	7f7fffff 	.word	0x7f7fffff
 80161b0:	7fefffff 	.word	0x7fefffff
 80161b4:	7ff00000 	.word	0x7ff00000
 80161b8:	200002a4 	.word	0x200002a4

080161bc <_strtol_l.constprop.0>:
 80161bc:	2b24      	cmp	r3, #36	@ 0x24
 80161be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80161c2:	4686      	mov	lr, r0
 80161c4:	4690      	mov	r8, r2
 80161c6:	d801      	bhi.n	80161cc <_strtol_l.constprop.0+0x10>
 80161c8:	2b01      	cmp	r3, #1
 80161ca:	d106      	bne.n	80161da <_strtol_l.constprop.0+0x1e>
 80161cc:	f001 f928 	bl	8017420 <__errno>
 80161d0:	2316      	movs	r3, #22
 80161d2:	6003      	str	r3, [r0, #0]
 80161d4:	2000      	movs	r0, #0
 80161d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161da:	4834      	ldr	r0, [pc, #208]	@ (80162ac <_strtol_l.constprop.0+0xf0>)
 80161dc:	460d      	mov	r5, r1
 80161de:	462a      	mov	r2, r5
 80161e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80161e4:	5d06      	ldrb	r6, [r0, r4]
 80161e6:	f016 0608 	ands.w	r6, r6, #8
 80161ea:	d1f8      	bne.n	80161de <_strtol_l.constprop.0+0x22>
 80161ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80161ee:	d12d      	bne.n	801624c <_strtol_l.constprop.0+0x90>
 80161f0:	782c      	ldrb	r4, [r5, #0]
 80161f2:	2601      	movs	r6, #1
 80161f4:	1c95      	adds	r5, r2, #2
 80161f6:	f033 0210 	bics.w	r2, r3, #16
 80161fa:	d109      	bne.n	8016210 <_strtol_l.constprop.0+0x54>
 80161fc:	2c30      	cmp	r4, #48	@ 0x30
 80161fe:	d12a      	bne.n	8016256 <_strtol_l.constprop.0+0x9a>
 8016200:	782a      	ldrb	r2, [r5, #0]
 8016202:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016206:	2a58      	cmp	r2, #88	@ 0x58
 8016208:	d125      	bne.n	8016256 <_strtol_l.constprop.0+0x9a>
 801620a:	786c      	ldrb	r4, [r5, #1]
 801620c:	2310      	movs	r3, #16
 801620e:	3502      	adds	r5, #2
 8016210:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016214:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016218:	2200      	movs	r2, #0
 801621a:	fbbc f9f3 	udiv	r9, ip, r3
 801621e:	4610      	mov	r0, r2
 8016220:	fb03 ca19 	mls	sl, r3, r9, ip
 8016224:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016228:	2f09      	cmp	r7, #9
 801622a:	d81b      	bhi.n	8016264 <_strtol_l.constprop.0+0xa8>
 801622c:	463c      	mov	r4, r7
 801622e:	42a3      	cmp	r3, r4
 8016230:	dd27      	ble.n	8016282 <_strtol_l.constprop.0+0xc6>
 8016232:	1c57      	adds	r7, r2, #1
 8016234:	d007      	beq.n	8016246 <_strtol_l.constprop.0+0x8a>
 8016236:	4581      	cmp	r9, r0
 8016238:	d320      	bcc.n	801627c <_strtol_l.constprop.0+0xc0>
 801623a:	d101      	bne.n	8016240 <_strtol_l.constprop.0+0x84>
 801623c:	45a2      	cmp	sl, r4
 801623e:	db1d      	blt.n	801627c <_strtol_l.constprop.0+0xc0>
 8016240:	fb00 4003 	mla	r0, r0, r3, r4
 8016244:	2201      	movs	r2, #1
 8016246:	f815 4b01 	ldrb.w	r4, [r5], #1
 801624a:	e7eb      	b.n	8016224 <_strtol_l.constprop.0+0x68>
 801624c:	2c2b      	cmp	r4, #43	@ 0x2b
 801624e:	bf04      	itt	eq
 8016250:	782c      	ldrbeq	r4, [r5, #0]
 8016252:	1c95      	addeq	r5, r2, #2
 8016254:	e7cf      	b.n	80161f6 <_strtol_l.constprop.0+0x3a>
 8016256:	2b00      	cmp	r3, #0
 8016258:	d1da      	bne.n	8016210 <_strtol_l.constprop.0+0x54>
 801625a:	2c30      	cmp	r4, #48	@ 0x30
 801625c:	bf0c      	ite	eq
 801625e:	2308      	moveq	r3, #8
 8016260:	230a      	movne	r3, #10
 8016262:	e7d5      	b.n	8016210 <_strtol_l.constprop.0+0x54>
 8016264:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016268:	2f19      	cmp	r7, #25
 801626a:	d801      	bhi.n	8016270 <_strtol_l.constprop.0+0xb4>
 801626c:	3c37      	subs	r4, #55	@ 0x37
 801626e:	e7de      	b.n	801622e <_strtol_l.constprop.0+0x72>
 8016270:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016274:	2f19      	cmp	r7, #25
 8016276:	d804      	bhi.n	8016282 <_strtol_l.constprop.0+0xc6>
 8016278:	3c57      	subs	r4, #87	@ 0x57
 801627a:	e7d8      	b.n	801622e <_strtol_l.constprop.0+0x72>
 801627c:	f04f 32ff 	mov.w	r2, #4294967295
 8016280:	e7e1      	b.n	8016246 <_strtol_l.constprop.0+0x8a>
 8016282:	1c53      	adds	r3, r2, #1
 8016284:	d108      	bne.n	8016298 <_strtol_l.constprop.0+0xdc>
 8016286:	2322      	movs	r3, #34	@ 0x22
 8016288:	f8ce 3000 	str.w	r3, [lr]
 801628c:	4660      	mov	r0, ip
 801628e:	f1b8 0f00 	cmp.w	r8, #0
 8016292:	d0a0      	beq.n	80161d6 <_strtol_l.constprop.0+0x1a>
 8016294:	1e69      	subs	r1, r5, #1
 8016296:	e006      	b.n	80162a6 <_strtol_l.constprop.0+0xea>
 8016298:	b106      	cbz	r6, 801629c <_strtol_l.constprop.0+0xe0>
 801629a:	4240      	negs	r0, r0
 801629c:	f1b8 0f00 	cmp.w	r8, #0
 80162a0:	d099      	beq.n	80161d6 <_strtol_l.constprop.0+0x1a>
 80162a2:	2a00      	cmp	r2, #0
 80162a4:	d1f6      	bne.n	8016294 <_strtol_l.constprop.0+0xd8>
 80162a6:	f8c8 1000 	str.w	r1, [r8]
 80162aa:	e794      	b.n	80161d6 <_strtol_l.constprop.0+0x1a>
 80162ac:	0801e011 	.word	0x0801e011

080162b0 <_strtol_r>:
 80162b0:	f7ff bf84 	b.w	80161bc <_strtol_l.constprop.0>

080162b4 <strtol>:
 80162b4:	4613      	mov	r3, r2
 80162b6:	460a      	mov	r2, r1
 80162b8:	4601      	mov	r1, r0
 80162ba:	4802      	ldr	r0, [pc, #8]	@ (80162c4 <strtol+0x10>)
 80162bc:	6800      	ldr	r0, [r0, #0]
 80162be:	f7ff bf7d 	b.w	80161bc <_strtol_l.constprop.0>
 80162c2:	bf00      	nop
 80162c4:	200002a4 	.word	0x200002a4

080162c8 <__cvt>:
 80162c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80162cc:	ec57 6b10 	vmov	r6, r7, d0
 80162d0:	2f00      	cmp	r7, #0
 80162d2:	460c      	mov	r4, r1
 80162d4:	4619      	mov	r1, r3
 80162d6:	463b      	mov	r3, r7
 80162d8:	bfbb      	ittet	lt
 80162da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80162de:	461f      	movlt	r7, r3
 80162e0:	2300      	movge	r3, #0
 80162e2:	232d      	movlt	r3, #45	@ 0x2d
 80162e4:	700b      	strb	r3, [r1, #0]
 80162e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80162e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80162ec:	4691      	mov	r9, r2
 80162ee:	f023 0820 	bic.w	r8, r3, #32
 80162f2:	bfbc      	itt	lt
 80162f4:	4632      	movlt	r2, r6
 80162f6:	4616      	movlt	r6, r2
 80162f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80162fc:	d005      	beq.n	801630a <__cvt+0x42>
 80162fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016302:	d100      	bne.n	8016306 <__cvt+0x3e>
 8016304:	3401      	adds	r4, #1
 8016306:	2102      	movs	r1, #2
 8016308:	e000      	b.n	801630c <__cvt+0x44>
 801630a:	2103      	movs	r1, #3
 801630c:	ab03      	add	r3, sp, #12
 801630e:	9301      	str	r3, [sp, #4]
 8016310:	ab02      	add	r3, sp, #8
 8016312:	9300      	str	r3, [sp, #0]
 8016314:	ec47 6b10 	vmov	d0, r6, r7
 8016318:	4653      	mov	r3, sl
 801631a:	4622      	mov	r2, r4
 801631c:	f001 f978 	bl	8017610 <_dtoa_r>
 8016320:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8016324:	4605      	mov	r5, r0
 8016326:	d119      	bne.n	801635c <__cvt+0x94>
 8016328:	f019 0f01 	tst.w	r9, #1
 801632c:	d00e      	beq.n	801634c <__cvt+0x84>
 801632e:	eb00 0904 	add.w	r9, r0, r4
 8016332:	2200      	movs	r2, #0
 8016334:	2300      	movs	r3, #0
 8016336:	4630      	mov	r0, r6
 8016338:	4639      	mov	r1, r7
 801633a:	f7ea fb9d 	bl	8000a78 <__aeabi_dcmpeq>
 801633e:	b108      	cbz	r0, 8016344 <__cvt+0x7c>
 8016340:	f8cd 900c 	str.w	r9, [sp, #12]
 8016344:	2230      	movs	r2, #48	@ 0x30
 8016346:	9b03      	ldr	r3, [sp, #12]
 8016348:	454b      	cmp	r3, r9
 801634a:	d31e      	bcc.n	801638a <__cvt+0xc2>
 801634c:	9b03      	ldr	r3, [sp, #12]
 801634e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016350:	1b5b      	subs	r3, r3, r5
 8016352:	4628      	mov	r0, r5
 8016354:	6013      	str	r3, [r2, #0]
 8016356:	b004      	add	sp, #16
 8016358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801635c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016360:	eb00 0904 	add.w	r9, r0, r4
 8016364:	d1e5      	bne.n	8016332 <__cvt+0x6a>
 8016366:	7803      	ldrb	r3, [r0, #0]
 8016368:	2b30      	cmp	r3, #48	@ 0x30
 801636a:	d10a      	bne.n	8016382 <__cvt+0xba>
 801636c:	2200      	movs	r2, #0
 801636e:	2300      	movs	r3, #0
 8016370:	4630      	mov	r0, r6
 8016372:	4639      	mov	r1, r7
 8016374:	f7ea fb80 	bl	8000a78 <__aeabi_dcmpeq>
 8016378:	b918      	cbnz	r0, 8016382 <__cvt+0xba>
 801637a:	f1c4 0401 	rsb	r4, r4, #1
 801637e:	f8ca 4000 	str.w	r4, [sl]
 8016382:	f8da 3000 	ldr.w	r3, [sl]
 8016386:	4499      	add	r9, r3
 8016388:	e7d3      	b.n	8016332 <__cvt+0x6a>
 801638a:	1c59      	adds	r1, r3, #1
 801638c:	9103      	str	r1, [sp, #12]
 801638e:	701a      	strb	r2, [r3, #0]
 8016390:	e7d9      	b.n	8016346 <__cvt+0x7e>

08016392 <__exponent>:
 8016392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016394:	2900      	cmp	r1, #0
 8016396:	bfba      	itte	lt
 8016398:	4249      	neglt	r1, r1
 801639a:	232d      	movlt	r3, #45	@ 0x2d
 801639c:	232b      	movge	r3, #43	@ 0x2b
 801639e:	2909      	cmp	r1, #9
 80163a0:	7002      	strb	r2, [r0, #0]
 80163a2:	7043      	strb	r3, [r0, #1]
 80163a4:	dd29      	ble.n	80163fa <__exponent+0x68>
 80163a6:	f10d 0307 	add.w	r3, sp, #7
 80163aa:	461d      	mov	r5, r3
 80163ac:	270a      	movs	r7, #10
 80163ae:	461a      	mov	r2, r3
 80163b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80163b4:	fb07 1416 	mls	r4, r7, r6, r1
 80163b8:	3430      	adds	r4, #48	@ 0x30
 80163ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80163be:	460c      	mov	r4, r1
 80163c0:	2c63      	cmp	r4, #99	@ 0x63
 80163c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80163c6:	4631      	mov	r1, r6
 80163c8:	dcf1      	bgt.n	80163ae <__exponent+0x1c>
 80163ca:	3130      	adds	r1, #48	@ 0x30
 80163cc:	1e94      	subs	r4, r2, #2
 80163ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80163d2:	1c41      	adds	r1, r0, #1
 80163d4:	4623      	mov	r3, r4
 80163d6:	42ab      	cmp	r3, r5
 80163d8:	d30a      	bcc.n	80163f0 <__exponent+0x5e>
 80163da:	f10d 0309 	add.w	r3, sp, #9
 80163de:	1a9b      	subs	r3, r3, r2
 80163e0:	42ac      	cmp	r4, r5
 80163e2:	bf88      	it	hi
 80163e4:	2300      	movhi	r3, #0
 80163e6:	3302      	adds	r3, #2
 80163e8:	4403      	add	r3, r0
 80163ea:	1a18      	subs	r0, r3, r0
 80163ec:	b003      	add	sp, #12
 80163ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80163f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80163f8:	e7ed      	b.n	80163d6 <__exponent+0x44>
 80163fa:	2330      	movs	r3, #48	@ 0x30
 80163fc:	3130      	adds	r1, #48	@ 0x30
 80163fe:	7083      	strb	r3, [r0, #2]
 8016400:	70c1      	strb	r1, [r0, #3]
 8016402:	1d03      	adds	r3, r0, #4
 8016404:	e7f1      	b.n	80163ea <__exponent+0x58>
	...

08016408 <_printf_float>:
 8016408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801640c:	b08d      	sub	sp, #52	@ 0x34
 801640e:	460c      	mov	r4, r1
 8016410:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8016414:	4616      	mov	r6, r2
 8016416:	461f      	mov	r7, r3
 8016418:	4605      	mov	r5, r0
 801641a:	f000 ffa7 	bl	801736c <_localeconv_r>
 801641e:	6803      	ldr	r3, [r0, #0]
 8016420:	9304      	str	r3, [sp, #16]
 8016422:	4618      	mov	r0, r3
 8016424:	f7e9 fefc 	bl	8000220 <strlen>
 8016428:	2300      	movs	r3, #0
 801642a:	930a      	str	r3, [sp, #40]	@ 0x28
 801642c:	f8d8 3000 	ldr.w	r3, [r8]
 8016430:	9005      	str	r0, [sp, #20]
 8016432:	3307      	adds	r3, #7
 8016434:	f023 0307 	bic.w	r3, r3, #7
 8016438:	f103 0208 	add.w	r2, r3, #8
 801643c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8016440:	f8d4 b000 	ldr.w	fp, [r4]
 8016444:	f8c8 2000 	str.w	r2, [r8]
 8016448:	e9d3 8900 	ldrd	r8, r9, [r3]
 801644c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8016450:	9307      	str	r3, [sp, #28]
 8016452:	f8cd 8018 	str.w	r8, [sp, #24]
 8016456:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801645a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801645e:	4b9c      	ldr	r3, [pc, #624]	@ (80166d0 <_printf_float+0x2c8>)
 8016460:	f04f 32ff 	mov.w	r2, #4294967295
 8016464:	f7ea fb3a 	bl	8000adc <__aeabi_dcmpun>
 8016468:	bb70      	cbnz	r0, 80164c8 <_printf_float+0xc0>
 801646a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801646e:	4b98      	ldr	r3, [pc, #608]	@ (80166d0 <_printf_float+0x2c8>)
 8016470:	f04f 32ff 	mov.w	r2, #4294967295
 8016474:	f7ea fb14 	bl	8000aa0 <__aeabi_dcmple>
 8016478:	bb30      	cbnz	r0, 80164c8 <_printf_float+0xc0>
 801647a:	2200      	movs	r2, #0
 801647c:	2300      	movs	r3, #0
 801647e:	4640      	mov	r0, r8
 8016480:	4649      	mov	r1, r9
 8016482:	f7ea fb03 	bl	8000a8c <__aeabi_dcmplt>
 8016486:	b110      	cbz	r0, 801648e <_printf_float+0x86>
 8016488:	232d      	movs	r3, #45	@ 0x2d
 801648a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801648e:	4a91      	ldr	r2, [pc, #580]	@ (80166d4 <_printf_float+0x2cc>)
 8016490:	4b91      	ldr	r3, [pc, #580]	@ (80166d8 <_printf_float+0x2d0>)
 8016492:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8016496:	bf94      	ite	ls
 8016498:	4690      	movls	r8, r2
 801649a:	4698      	movhi	r8, r3
 801649c:	2303      	movs	r3, #3
 801649e:	6123      	str	r3, [r4, #16]
 80164a0:	f02b 0304 	bic.w	r3, fp, #4
 80164a4:	6023      	str	r3, [r4, #0]
 80164a6:	f04f 0900 	mov.w	r9, #0
 80164aa:	9700      	str	r7, [sp, #0]
 80164ac:	4633      	mov	r3, r6
 80164ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80164b0:	4621      	mov	r1, r4
 80164b2:	4628      	mov	r0, r5
 80164b4:	f000 f9d2 	bl	801685c <_printf_common>
 80164b8:	3001      	adds	r0, #1
 80164ba:	f040 808d 	bne.w	80165d8 <_printf_float+0x1d0>
 80164be:	f04f 30ff 	mov.w	r0, #4294967295
 80164c2:	b00d      	add	sp, #52	@ 0x34
 80164c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164c8:	4642      	mov	r2, r8
 80164ca:	464b      	mov	r3, r9
 80164cc:	4640      	mov	r0, r8
 80164ce:	4649      	mov	r1, r9
 80164d0:	f7ea fb04 	bl	8000adc <__aeabi_dcmpun>
 80164d4:	b140      	cbz	r0, 80164e8 <_printf_float+0xe0>
 80164d6:	464b      	mov	r3, r9
 80164d8:	2b00      	cmp	r3, #0
 80164da:	bfbc      	itt	lt
 80164dc:	232d      	movlt	r3, #45	@ 0x2d
 80164de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80164e2:	4a7e      	ldr	r2, [pc, #504]	@ (80166dc <_printf_float+0x2d4>)
 80164e4:	4b7e      	ldr	r3, [pc, #504]	@ (80166e0 <_printf_float+0x2d8>)
 80164e6:	e7d4      	b.n	8016492 <_printf_float+0x8a>
 80164e8:	6863      	ldr	r3, [r4, #4]
 80164ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80164ee:	9206      	str	r2, [sp, #24]
 80164f0:	1c5a      	adds	r2, r3, #1
 80164f2:	d13b      	bne.n	801656c <_printf_float+0x164>
 80164f4:	2306      	movs	r3, #6
 80164f6:	6063      	str	r3, [r4, #4]
 80164f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80164fc:	2300      	movs	r3, #0
 80164fe:	6022      	str	r2, [r4, #0]
 8016500:	9303      	str	r3, [sp, #12]
 8016502:	ab0a      	add	r3, sp, #40	@ 0x28
 8016504:	e9cd a301 	strd	sl, r3, [sp, #4]
 8016508:	ab09      	add	r3, sp, #36	@ 0x24
 801650a:	9300      	str	r3, [sp, #0]
 801650c:	6861      	ldr	r1, [r4, #4]
 801650e:	ec49 8b10 	vmov	d0, r8, r9
 8016512:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8016516:	4628      	mov	r0, r5
 8016518:	f7ff fed6 	bl	80162c8 <__cvt>
 801651c:	9b06      	ldr	r3, [sp, #24]
 801651e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016520:	2b47      	cmp	r3, #71	@ 0x47
 8016522:	4680      	mov	r8, r0
 8016524:	d129      	bne.n	801657a <_printf_float+0x172>
 8016526:	1cc8      	adds	r0, r1, #3
 8016528:	db02      	blt.n	8016530 <_printf_float+0x128>
 801652a:	6863      	ldr	r3, [r4, #4]
 801652c:	4299      	cmp	r1, r3
 801652e:	dd41      	ble.n	80165b4 <_printf_float+0x1ac>
 8016530:	f1aa 0a02 	sub.w	sl, sl, #2
 8016534:	fa5f fa8a 	uxtb.w	sl, sl
 8016538:	3901      	subs	r1, #1
 801653a:	4652      	mov	r2, sl
 801653c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8016540:	9109      	str	r1, [sp, #36]	@ 0x24
 8016542:	f7ff ff26 	bl	8016392 <__exponent>
 8016546:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016548:	1813      	adds	r3, r2, r0
 801654a:	2a01      	cmp	r2, #1
 801654c:	4681      	mov	r9, r0
 801654e:	6123      	str	r3, [r4, #16]
 8016550:	dc02      	bgt.n	8016558 <_printf_float+0x150>
 8016552:	6822      	ldr	r2, [r4, #0]
 8016554:	07d2      	lsls	r2, r2, #31
 8016556:	d501      	bpl.n	801655c <_printf_float+0x154>
 8016558:	3301      	adds	r3, #1
 801655a:	6123      	str	r3, [r4, #16]
 801655c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8016560:	2b00      	cmp	r3, #0
 8016562:	d0a2      	beq.n	80164aa <_printf_float+0xa2>
 8016564:	232d      	movs	r3, #45	@ 0x2d
 8016566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801656a:	e79e      	b.n	80164aa <_printf_float+0xa2>
 801656c:	9a06      	ldr	r2, [sp, #24]
 801656e:	2a47      	cmp	r2, #71	@ 0x47
 8016570:	d1c2      	bne.n	80164f8 <_printf_float+0xf0>
 8016572:	2b00      	cmp	r3, #0
 8016574:	d1c0      	bne.n	80164f8 <_printf_float+0xf0>
 8016576:	2301      	movs	r3, #1
 8016578:	e7bd      	b.n	80164f6 <_printf_float+0xee>
 801657a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801657e:	d9db      	bls.n	8016538 <_printf_float+0x130>
 8016580:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8016584:	d118      	bne.n	80165b8 <_printf_float+0x1b0>
 8016586:	2900      	cmp	r1, #0
 8016588:	6863      	ldr	r3, [r4, #4]
 801658a:	dd0b      	ble.n	80165a4 <_printf_float+0x19c>
 801658c:	6121      	str	r1, [r4, #16]
 801658e:	b913      	cbnz	r3, 8016596 <_printf_float+0x18e>
 8016590:	6822      	ldr	r2, [r4, #0]
 8016592:	07d0      	lsls	r0, r2, #31
 8016594:	d502      	bpl.n	801659c <_printf_float+0x194>
 8016596:	3301      	adds	r3, #1
 8016598:	440b      	add	r3, r1
 801659a:	6123      	str	r3, [r4, #16]
 801659c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801659e:	f04f 0900 	mov.w	r9, #0
 80165a2:	e7db      	b.n	801655c <_printf_float+0x154>
 80165a4:	b913      	cbnz	r3, 80165ac <_printf_float+0x1a4>
 80165a6:	6822      	ldr	r2, [r4, #0]
 80165a8:	07d2      	lsls	r2, r2, #31
 80165aa:	d501      	bpl.n	80165b0 <_printf_float+0x1a8>
 80165ac:	3302      	adds	r3, #2
 80165ae:	e7f4      	b.n	801659a <_printf_float+0x192>
 80165b0:	2301      	movs	r3, #1
 80165b2:	e7f2      	b.n	801659a <_printf_float+0x192>
 80165b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80165b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80165ba:	4299      	cmp	r1, r3
 80165bc:	db05      	blt.n	80165ca <_printf_float+0x1c2>
 80165be:	6823      	ldr	r3, [r4, #0]
 80165c0:	6121      	str	r1, [r4, #16]
 80165c2:	07d8      	lsls	r0, r3, #31
 80165c4:	d5ea      	bpl.n	801659c <_printf_float+0x194>
 80165c6:	1c4b      	adds	r3, r1, #1
 80165c8:	e7e7      	b.n	801659a <_printf_float+0x192>
 80165ca:	2900      	cmp	r1, #0
 80165cc:	bfd4      	ite	le
 80165ce:	f1c1 0202 	rsble	r2, r1, #2
 80165d2:	2201      	movgt	r2, #1
 80165d4:	4413      	add	r3, r2
 80165d6:	e7e0      	b.n	801659a <_printf_float+0x192>
 80165d8:	6823      	ldr	r3, [r4, #0]
 80165da:	055a      	lsls	r2, r3, #21
 80165dc:	d407      	bmi.n	80165ee <_printf_float+0x1e6>
 80165de:	6923      	ldr	r3, [r4, #16]
 80165e0:	4642      	mov	r2, r8
 80165e2:	4631      	mov	r1, r6
 80165e4:	4628      	mov	r0, r5
 80165e6:	47b8      	blx	r7
 80165e8:	3001      	adds	r0, #1
 80165ea:	d12b      	bne.n	8016644 <_printf_float+0x23c>
 80165ec:	e767      	b.n	80164be <_printf_float+0xb6>
 80165ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80165f2:	f240 80dd 	bls.w	80167b0 <_printf_float+0x3a8>
 80165f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80165fa:	2200      	movs	r2, #0
 80165fc:	2300      	movs	r3, #0
 80165fe:	f7ea fa3b 	bl	8000a78 <__aeabi_dcmpeq>
 8016602:	2800      	cmp	r0, #0
 8016604:	d033      	beq.n	801666e <_printf_float+0x266>
 8016606:	4a37      	ldr	r2, [pc, #220]	@ (80166e4 <_printf_float+0x2dc>)
 8016608:	2301      	movs	r3, #1
 801660a:	4631      	mov	r1, r6
 801660c:	4628      	mov	r0, r5
 801660e:	47b8      	blx	r7
 8016610:	3001      	adds	r0, #1
 8016612:	f43f af54 	beq.w	80164be <_printf_float+0xb6>
 8016616:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801661a:	4543      	cmp	r3, r8
 801661c:	db02      	blt.n	8016624 <_printf_float+0x21c>
 801661e:	6823      	ldr	r3, [r4, #0]
 8016620:	07d8      	lsls	r0, r3, #31
 8016622:	d50f      	bpl.n	8016644 <_printf_float+0x23c>
 8016624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016628:	4631      	mov	r1, r6
 801662a:	4628      	mov	r0, r5
 801662c:	47b8      	blx	r7
 801662e:	3001      	adds	r0, #1
 8016630:	f43f af45 	beq.w	80164be <_printf_float+0xb6>
 8016634:	f04f 0900 	mov.w	r9, #0
 8016638:	f108 38ff 	add.w	r8, r8, #4294967295
 801663c:	f104 0a1a 	add.w	sl, r4, #26
 8016640:	45c8      	cmp	r8, r9
 8016642:	dc09      	bgt.n	8016658 <_printf_float+0x250>
 8016644:	6823      	ldr	r3, [r4, #0]
 8016646:	079b      	lsls	r3, r3, #30
 8016648:	f100 8103 	bmi.w	8016852 <_printf_float+0x44a>
 801664c:	68e0      	ldr	r0, [r4, #12]
 801664e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016650:	4298      	cmp	r0, r3
 8016652:	bfb8      	it	lt
 8016654:	4618      	movlt	r0, r3
 8016656:	e734      	b.n	80164c2 <_printf_float+0xba>
 8016658:	2301      	movs	r3, #1
 801665a:	4652      	mov	r2, sl
 801665c:	4631      	mov	r1, r6
 801665e:	4628      	mov	r0, r5
 8016660:	47b8      	blx	r7
 8016662:	3001      	adds	r0, #1
 8016664:	f43f af2b 	beq.w	80164be <_printf_float+0xb6>
 8016668:	f109 0901 	add.w	r9, r9, #1
 801666c:	e7e8      	b.n	8016640 <_printf_float+0x238>
 801666e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016670:	2b00      	cmp	r3, #0
 8016672:	dc39      	bgt.n	80166e8 <_printf_float+0x2e0>
 8016674:	4a1b      	ldr	r2, [pc, #108]	@ (80166e4 <_printf_float+0x2dc>)
 8016676:	2301      	movs	r3, #1
 8016678:	4631      	mov	r1, r6
 801667a:	4628      	mov	r0, r5
 801667c:	47b8      	blx	r7
 801667e:	3001      	adds	r0, #1
 8016680:	f43f af1d 	beq.w	80164be <_printf_float+0xb6>
 8016684:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8016688:	ea59 0303 	orrs.w	r3, r9, r3
 801668c:	d102      	bne.n	8016694 <_printf_float+0x28c>
 801668e:	6823      	ldr	r3, [r4, #0]
 8016690:	07d9      	lsls	r1, r3, #31
 8016692:	d5d7      	bpl.n	8016644 <_printf_float+0x23c>
 8016694:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016698:	4631      	mov	r1, r6
 801669a:	4628      	mov	r0, r5
 801669c:	47b8      	blx	r7
 801669e:	3001      	adds	r0, #1
 80166a0:	f43f af0d 	beq.w	80164be <_printf_float+0xb6>
 80166a4:	f04f 0a00 	mov.w	sl, #0
 80166a8:	f104 0b1a 	add.w	fp, r4, #26
 80166ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166ae:	425b      	negs	r3, r3
 80166b0:	4553      	cmp	r3, sl
 80166b2:	dc01      	bgt.n	80166b8 <_printf_float+0x2b0>
 80166b4:	464b      	mov	r3, r9
 80166b6:	e793      	b.n	80165e0 <_printf_float+0x1d8>
 80166b8:	2301      	movs	r3, #1
 80166ba:	465a      	mov	r2, fp
 80166bc:	4631      	mov	r1, r6
 80166be:	4628      	mov	r0, r5
 80166c0:	47b8      	blx	r7
 80166c2:	3001      	adds	r0, #1
 80166c4:	f43f aefb 	beq.w	80164be <_printf_float+0xb6>
 80166c8:	f10a 0a01 	add.w	sl, sl, #1
 80166cc:	e7ee      	b.n	80166ac <_printf_float+0x2a4>
 80166ce:	bf00      	nop
 80166d0:	7fefffff 	.word	0x7fefffff
 80166d4:	0801e111 	.word	0x0801e111
 80166d8:	0801e115 	.word	0x0801e115
 80166dc:	0801e119 	.word	0x0801e119
 80166e0:	0801e11d 	.word	0x0801e11d
 80166e4:	0801e121 	.word	0x0801e121
 80166e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80166ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80166ee:	4553      	cmp	r3, sl
 80166f0:	bfa8      	it	ge
 80166f2:	4653      	movge	r3, sl
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	4699      	mov	r9, r3
 80166f8:	dc36      	bgt.n	8016768 <_printf_float+0x360>
 80166fa:	f04f 0b00 	mov.w	fp, #0
 80166fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016702:	f104 021a 	add.w	r2, r4, #26
 8016706:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8016708:	9306      	str	r3, [sp, #24]
 801670a:	eba3 0309 	sub.w	r3, r3, r9
 801670e:	455b      	cmp	r3, fp
 8016710:	dc31      	bgt.n	8016776 <_printf_float+0x36e>
 8016712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016714:	459a      	cmp	sl, r3
 8016716:	dc3a      	bgt.n	801678e <_printf_float+0x386>
 8016718:	6823      	ldr	r3, [r4, #0]
 801671a:	07da      	lsls	r2, r3, #31
 801671c:	d437      	bmi.n	801678e <_printf_float+0x386>
 801671e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016720:	ebaa 0903 	sub.w	r9, sl, r3
 8016724:	9b06      	ldr	r3, [sp, #24]
 8016726:	ebaa 0303 	sub.w	r3, sl, r3
 801672a:	4599      	cmp	r9, r3
 801672c:	bfa8      	it	ge
 801672e:	4699      	movge	r9, r3
 8016730:	f1b9 0f00 	cmp.w	r9, #0
 8016734:	dc33      	bgt.n	801679e <_printf_float+0x396>
 8016736:	f04f 0800 	mov.w	r8, #0
 801673a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801673e:	f104 0b1a 	add.w	fp, r4, #26
 8016742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016744:	ebaa 0303 	sub.w	r3, sl, r3
 8016748:	eba3 0309 	sub.w	r3, r3, r9
 801674c:	4543      	cmp	r3, r8
 801674e:	f77f af79 	ble.w	8016644 <_printf_float+0x23c>
 8016752:	2301      	movs	r3, #1
 8016754:	465a      	mov	r2, fp
 8016756:	4631      	mov	r1, r6
 8016758:	4628      	mov	r0, r5
 801675a:	47b8      	blx	r7
 801675c:	3001      	adds	r0, #1
 801675e:	f43f aeae 	beq.w	80164be <_printf_float+0xb6>
 8016762:	f108 0801 	add.w	r8, r8, #1
 8016766:	e7ec      	b.n	8016742 <_printf_float+0x33a>
 8016768:	4642      	mov	r2, r8
 801676a:	4631      	mov	r1, r6
 801676c:	4628      	mov	r0, r5
 801676e:	47b8      	blx	r7
 8016770:	3001      	adds	r0, #1
 8016772:	d1c2      	bne.n	80166fa <_printf_float+0x2f2>
 8016774:	e6a3      	b.n	80164be <_printf_float+0xb6>
 8016776:	2301      	movs	r3, #1
 8016778:	4631      	mov	r1, r6
 801677a:	4628      	mov	r0, r5
 801677c:	9206      	str	r2, [sp, #24]
 801677e:	47b8      	blx	r7
 8016780:	3001      	adds	r0, #1
 8016782:	f43f ae9c 	beq.w	80164be <_printf_float+0xb6>
 8016786:	9a06      	ldr	r2, [sp, #24]
 8016788:	f10b 0b01 	add.w	fp, fp, #1
 801678c:	e7bb      	b.n	8016706 <_printf_float+0x2fe>
 801678e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016792:	4631      	mov	r1, r6
 8016794:	4628      	mov	r0, r5
 8016796:	47b8      	blx	r7
 8016798:	3001      	adds	r0, #1
 801679a:	d1c0      	bne.n	801671e <_printf_float+0x316>
 801679c:	e68f      	b.n	80164be <_printf_float+0xb6>
 801679e:	9a06      	ldr	r2, [sp, #24]
 80167a0:	464b      	mov	r3, r9
 80167a2:	4442      	add	r2, r8
 80167a4:	4631      	mov	r1, r6
 80167a6:	4628      	mov	r0, r5
 80167a8:	47b8      	blx	r7
 80167aa:	3001      	adds	r0, #1
 80167ac:	d1c3      	bne.n	8016736 <_printf_float+0x32e>
 80167ae:	e686      	b.n	80164be <_printf_float+0xb6>
 80167b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80167b4:	f1ba 0f01 	cmp.w	sl, #1
 80167b8:	dc01      	bgt.n	80167be <_printf_float+0x3b6>
 80167ba:	07db      	lsls	r3, r3, #31
 80167bc:	d536      	bpl.n	801682c <_printf_float+0x424>
 80167be:	2301      	movs	r3, #1
 80167c0:	4642      	mov	r2, r8
 80167c2:	4631      	mov	r1, r6
 80167c4:	4628      	mov	r0, r5
 80167c6:	47b8      	blx	r7
 80167c8:	3001      	adds	r0, #1
 80167ca:	f43f ae78 	beq.w	80164be <_printf_float+0xb6>
 80167ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80167d2:	4631      	mov	r1, r6
 80167d4:	4628      	mov	r0, r5
 80167d6:	47b8      	blx	r7
 80167d8:	3001      	adds	r0, #1
 80167da:	f43f ae70 	beq.w	80164be <_printf_float+0xb6>
 80167de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80167e2:	2200      	movs	r2, #0
 80167e4:	2300      	movs	r3, #0
 80167e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80167ea:	f7ea f945 	bl	8000a78 <__aeabi_dcmpeq>
 80167ee:	b9c0      	cbnz	r0, 8016822 <_printf_float+0x41a>
 80167f0:	4653      	mov	r3, sl
 80167f2:	f108 0201 	add.w	r2, r8, #1
 80167f6:	4631      	mov	r1, r6
 80167f8:	4628      	mov	r0, r5
 80167fa:	47b8      	blx	r7
 80167fc:	3001      	adds	r0, #1
 80167fe:	d10c      	bne.n	801681a <_printf_float+0x412>
 8016800:	e65d      	b.n	80164be <_printf_float+0xb6>
 8016802:	2301      	movs	r3, #1
 8016804:	465a      	mov	r2, fp
 8016806:	4631      	mov	r1, r6
 8016808:	4628      	mov	r0, r5
 801680a:	47b8      	blx	r7
 801680c:	3001      	adds	r0, #1
 801680e:	f43f ae56 	beq.w	80164be <_printf_float+0xb6>
 8016812:	f108 0801 	add.w	r8, r8, #1
 8016816:	45d0      	cmp	r8, sl
 8016818:	dbf3      	blt.n	8016802 <_printf_float+0x3fa>
 801681a:	464b      	mov	r3, r9
 801681c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8016820:	e6df      	b.n	80165e2 <_printf_float+0x1da>
 8016822:	f04f 0800 	mov.w	r8, #0
 8016826:	f104 0b1a 	add.w	fp, r4, #26
 801682a:	e7f4      	b.n	8016816 <_printf_float+0x40e>
 801682c:	2301      	movs	r3, #1
 801682e:	4642      	mov	r2, r8
 8016830:	e7e1      	b.n	80167f6 <_printf_float+0x3ee>
 8016832:	2301      	movs	r3, #1
 8016834:	464a      	mov	r2, r9
 8016836:	4631      	mov	r1, r6
 8016838:	4628      	mov	r0, r5
 801683a:	47b8      	blx	r7
 801683c:	3001      	adds	r0, #1
 801683e:	f43f ae3e 	beq.w	80164be <_printf_float+0xb6>
 8016842:	f108 0801 	add.w	r8, r8, #1
 8016846:	68e3      	ldr	r3, [r4, #12]
 8016848:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801684a:	1a5b      	subs	r3, r3, r1
 801684c:	4543      	cmp	r3, r8
 801684e:	dcf0      	bgt.n	8016832 <_printf_float+0x42a>
 8016850:	e6fc      	b.n	801664c <_printf_float+0x244>
 8016852:	f04f 0800 	mov.w	r8, #0
 8016856:	f104 0919 	add.w	r9, r4, #25
 801685a:	e7f4      	b.n	8016846 <_printf_float+0x43e>

0801685c <_printf_common>:
 801685c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016860:	4616      	mov	r6, r2
 8016862:	4698      	mov	r8, r3
 8016864:	688a      	ldr	r2, [r1, #8]
 8016866:	690b      	ldr	r3, [r1, #16]
 8016868:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801686c:	4293      	cmp	r3, r2
 801686e:	bfb8      	it	lt
 8016870:	4613      	movlt	r3, r2
 8016872:	6033      	str	r3, [r6, #0]
 8016874:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016878:	4607      	mov	r7, r0
 801687a:	460c      	mov	r4, r1
 801687c:	b10a      	cbz	r2, 8016882 <_printf_common+0x26>
 801687e:	3301      	adds	r3, #1
 8016880:	6033      	str	r3, [r6, #0]
 8016882:	6823      	ldr	r3, [r4, #0]
 8016884:	0699      	lsls	r1, r3, #26
 8016886:	bf42      	ittt	mi
 8016888:	6833      	ldrmi	r3, [r6, #0]
 801688a:	3302      	addmi	r3, #2
 801688c:	6033      	strmi	r3, [r6, #0]
 801688e:	6825      	ldr	r5, [r4, #0]
 8016890:	f015 0506 	ands.w	r5, r5, #6
 8016894:	d106      	bne.n	80168a4 <_printf_common+0x48>
 8016896:	f104 0a19 	add.w	sl, r4, #25
 801689a:	68e3      	ldr	r3, [r4, #12]
 801689c:	6832      	ldr	r2, [r6, #0]
 801689e:	1a9b      	subs	r3, r3, r2
 80168a0:	42ab      	cmp	r3, r5
 80168a2:	dc26      	bgt.n	80168f2 <_printf_common+0x96>
 80168a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80168a8:	6822      	ldr	r2, [r4, #0]
 80168aa:	3b00      	subs	r3, #0
 80168ac:	bf18      	it	ne
 80168ae:	2301      	movne	r3, #1
 80168b0:	0692      	lsls	r2, r2, #26
 80168b2:	d42b      	bmi.n	801690c <_printf_common+0xb0>
 80168b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80168b8:	4641      	mov	r1, r8
 80168ba:	4638      	mov	r0, r7
 80168bc:	47c8      	blx	r9
 80168be:	3001      	adds	r0, #1
 80168c0:	d01e      	beq.n	8016900 <_printf_common+0xa4>
 80168c2:	6823      	ldr	r3, [r4, #0]
 80168c4:	6922      	ldr	r2, [r4, #16]
 80168c6:	f003 0306 	and.w	r3, r3, #6
 80168ca:	2b04      	cmp	r3, #4
 80168cc:	bf02      	ittt	eq
 80168ce:	68e5      	ldreq	r5, [r4, #12]
 80168d0:	6833      	ldreq	r3, [r6, #0]
 80168d2:	1aed      	subeq	r5, r5, r3
 80168d4:	68a3      	ldr	r3, [r4, #8]
 80168d6:	bf0c      	ite	eq
 80168d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80168dc:	2500      	movne	r5, #0
 80168de:	4293      	cmp	r3, r2
 80168e0:	bfc4      	itt	gt
 80168e2:	1a9b      	subgt	r3, r3, r2
 80168e4:	18ed      	addgt	r5, r5, r3
 80168e6:	2600      	movs	r6, #0
 80168e8:	341a      	adds	r4, #26
 80168ea:	42b5      	cmp	r5, r6
 80168ec:	d11a      	bne.n	8016924 <_printf_common+0xc8>
 80168ee:	2000      	movs	r0, #0
 80168f0:	e008      	b.n	8016904 <_printf_common+0xa8>
 80168f2:	2301      	movs	r3, #1
 80168f4:	4652      	mov	r2, sl
 80168f6:	4641      	mov	r1, r8
 80168f8:	4638      	mov	r0, r7
 80168fa:	47c8      	blx	r9
 80168fc:	3001      	adds	r0, #1
 80168fe:	d103      	bne.n	8016908 <_printf_common+0xac>
 8016900:	f04f 30ff 	mov.w	r0, #4294967295
 8016904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016908:	3501      	adds	r5, #1
 801690a:	e7c6      	b.n	801689a <_printf_common+0x3e>
 801690c:	18e1      	adds	r1, r4, r3
 801690e:	1c5a      	adds	r2, r3, #1
 8016910:	2030      	movs	r0, #48	@ 0x30
 8016912:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016916:	4422      	add	r2, r4
 8016918:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801691c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016920:	3302      	adds	r3, #2
 8016922:	e7c7      	b.n	80168b4 <_printf_common+0x58>
 8016924:	2301      	movs	r3, #1
 8016926:	4622      	mov	r2, r4
 8016928:	4641      	mov	r1, r8
 801692a:	4638      	mov	r0, r7
 801692c:	47c8      	blx	r9
 801692e:	3001      	adds	r0, #1
 8016930:	d0e6      	beq.n	8016900 <_printf_common+0xa4>
 8016932:	3601      	adds	r6, #1
 8016934:	e7d9      	b.n	80168ea <_printf_common+0x8e>
	...

08016938 <_printf_i>:
 8016938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801693c:	7e0f      	ldrb	r7, [r1, #24]
 801693e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016940:	2f78      	cmp	r7, #120	@ 0x78
 8016942:	4691      	mov	r9, r2
 8016944:	4680      	mov	r8, r0
 8016946:	460c      	mov	r4, r1
 8016948:	469a      	mov	sl, r3
 801694a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801694e:	d807      	bhi.n	8016960 <_printf_i+0x28>
 8016950:	2f62      	cmp	r7, #98	@ 0x62
 8016952:	d80a      	bhi.n	801696a <_printf_i+0x32>
 8016954:	2f00      	cmp	r7, #0
 8016956:	f000 80d2 	beq.w	8016afe <_printf_i+0x1c6>
 801695a:	2f58      	cmp	r7, #88	@ 0x58
 801695c:	f000 80b9 	beq.w	8016ad2 <_printf_i+0x19a>
 8016960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016964:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016968:	e03a      	b.n	80169e0 <_printf_i+0xa8>
 801696a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801696e:	2b15      	cmp	r3, #21
 8016970:	d8f6      	bhi.n	8016960 <_printf_i+0x28>
 8016972:	a101      	add	r1, pc, #4	@ (adr r1, 8016978 <_printf_i+0x40>)
 8016974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016978:	080169d1 	.word	0x080169d1
 801697c:	080169e5 	.word	0x080169e5
 8016980:	08016961 	.word	0x08016961
 8016984:	08016961 	.word	0x08016961
 8016988:	08016961 	.word	0x08016961
 801698c:	08016961 	.word	0x08016961
 8016990:	080169e5 	.word	0x080169e5
 8016994:	08016961 	.word	0x08016961
 8016998:	08016961 	.word	0x08016961
 801699c:	08016961 	.word	0x08016961
 80169a0:	08016961 	.word	0x08016961
 80169a4:	08016ae5 	.word	0x08016ae5
 80169a8:	08016a0f 	.word	0x08016a0f
 80169ac:	08016a9f 	.word	0x08016a9f
 80169b0:	08016961 	.word	0x08016961
 80169b4:	08016961 	.word	0x08016961
 80169b8:	08016b07 	.word	0x08016b07
 80169bc:	08016961 	.word	0x08016961
 80169c0:	08016a0f 	.word	0x08016a0f
 80169c4:	08016961 	.word	0x08016961
 80169c8:	08016961 	.word	0x08016961
 80169cc:	08016aa7 	.word	0x08016aa7
 80169d0:	6833      	ldr	r3, [r6, #0]
 80169d2:	1d1a      	adds	r2, r3, #4
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	6032      	str	r2, [r6, #0]
 80169d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80169dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80169e0:	2301      	movs	r3, #1
 80169e2:	e09d      	b.n	8016b20 <_printf_i+0x1e8>
 80169e4:	6833      	ldr	r3, [r6, #0]
 80169e6:	6820      	ldr	r0, [r4, #0]
 80169e8:	1d19      	adds	r1, r3, #4
 80169ea:	6031      	str	r1, [r6, #0]
 80169ec:	0606      	lsls	r6, r0, #24
 80169ee:	d501      	bpl.n	80169f4 <_printf_i+0xbc>
 80169f0:	681d      	ldr	r5, [r3, #0]
 80169f2:	e003      	b.n	80169fc <_printf_i+0xc4>
 80169f4:	0645      	lsls	r5, r0, #25
 80169f6:	d5fb      	bpl.n	80169f0 <_printf_i+0xb8>
 80169f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80169fc:	2d00      	cmp	r5, #0
 80169fe:	da03      	bge.n	8016a08 <_printf_i+0xd0>
 8016a00:	232d      	movs	r3, #45	@ 0x2d
 8016a02:	426d      	negs	r5, r5
 8016a04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016a08:	4859      	ldr	r0, [pc, #356]	@ (8016b70 <_printf_i+0x238>)
 8016a0a:	230a      	movs	r3, #10
 8016a0c:	e011      	b.n	8016a32 <_printf_i+0xfa>
 8016a0e:	6821      	ldr	r1, [r4, #0]
 8016a10:	6833      	ldr	r3, [r6, #0]
 8016a12:	0608      	lsls	r0, r1, #24
 8016a14:	f853 5b04 	ldr.w	r5, [r3], #4
 8016a18:	d402      	bmi.n	8016a20 <_printf_i+0xe8>
 8016a1a:	0649      	lsls	r1, r1, #25
 8016a1c:	bf48      	it	mi
 8016a1e:	b2ad      	uxthmi	r5, r5
 8016a20:	2f6f      	cmp	r7, #111	@ 0x6f
 8016a22:	4853      	ldr	r0, [pc, #332]	@ (8016b70 <_printf_i+0x238>)
 8016a24:	6033      	str	r3, [r6, #0]
 8016a26:	bf14      	ite	ne
 8016a28:	230a      	movne	r3, #10
 8016a2a:	2308      	moveq	r3, #8
 8016a2c:	2100      	movs	r1, #0
 8016a2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016a32:	6866      	ldr	r6, [r4, #4]
 8016a34:	60a6      	str	r6, [r4, #8]
 8016a36:	2e00      	cmp	r6, #0
 8016a38:	bfa2      	ittt	ge
 8016a3a:	6821      	ldrge	r1, [r4, #0]
 8016a3c:	f021 0104 	bicge.w	r1, r1, #4
 8016a40:	6021      	strge	r1, [r4, #0]
 8016a42:	b90d      	cbnz	r5, 8016a48 <_printf_i+0x110>
 8016a44:	2e00      	cmp	r6, #0
 8016a46:	d04b      	beq.n	8016ae0 <_printf_i+0x1a8>
 8016a48:	4616      	mov	r6, r2
 8016a4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8016a4e:	fb03 5711 	mls	r7, r3, r1, r5
 8016a52:	5dc7      	ldrb	r7, [r0, r7]
 8016a54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016a58:	462f      	mov	r7, r5
 8016a5a:	42bb      	cmp	r3, r7
 8016a5c:	460d      	mov	r5, r1
 8016a5e:	d9f4      	bls.n	8016a4a <_printf_i+0x112>
 8016a60:	2b08      	cmp	r3, #8
 8016a62:	d10b      	bne.n	8016a7c <_printf_i+0x144>
 8016a64:	6823      	ldr	r3, [r4, #0]
 8016a66:	07df      	lsls	r7, r3, #31
 8016a68:	d508      	bpl.n	8016a7c <_printf_i+0x144>
 8016a6a:	6923      	ldr	r3, [r4, #16]
 8016a6c:	6861      	ldr	r1, [r4, #4]
 8016a6e:	4299      	cmp	r1, r3
 8016a70:	bfde      	ittt	le
 8016a72:	2330      	movle	r3, #48	@ 0x30
 8016a74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016a78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016a7c:	1b92      	subs	r2, r2, r6
 8016a7e:	6122      	str	r2, [r4, #16]
 8016a80:	f8cd a000 	str.w	sl, [sp]
 8016a84:	464b      	mov	r3, r9
 8016a86:	aa03      	add	r2, sp, #12
 8016a88:	4621      	mov	r1, r4
 8016a8a:	4640      	mov	r0, r8
 8016a8c:	f7ff fee6 	bl	801685c <_printf_common>
 8016a90:	3001      	adds	r0, #1
 8016a92:	d14a      	bne.n	8016b2a <_printf_i+0x1f2>
 8016a94:	f04f 30ff 	mov.w	r0, #4294967295
 8016a98:	b004      	add	sp, #16
 8016a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a9e:	6823      	ldr	r3, [r4, #0]
 8016aa0:	f043 0320 	orr.w	r3, r3, #32
 8016aa4:	6023      	str	r3, [r4, #0]
 8016aa6:	4833      	ldr	r0, [pc, #204]	@ (8016b74 <_printf_i+0x23c>)
 8016aa8:	2778      	movs	r7, #120	@ 0x78
 8016aaa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016aae:	6823      	ldr	r3, [r4, #0]
 8016ab0:	6831      	ldr	r1, [r6, #0]
 8016ab2:	061f      	lsls	r7, r3, #24
 8016ab4:	f851 5b04 	ldr.w	r5, [r1], #4
 8016ab8:	d402      	bmi.n	8016ac0 <_printf_i+0x188>
 8016aba:	065f      	lsls	r7, r3, #25
 8016abc:	bf48      	it	mi
 8016abe:	b2ad      	uxthmi	r5, r5
 8016ac0:	6031      	str	r1, [r6, #0]
 8016ac2:	07d9      	lsls	r1, r3, #31
 8016ac4:	bf44      	itt	mi
 8016ac6:	f043 0320 	orrmi.w	r3, r3, #32
 8016aca:	6023      	strmi	r3, [r4, #0]
 8016acc:	b11d      	cbz	r5, 8016ad6 <_printf_i+0x19e>
 8016ace:	2310      	movs	r3, #16
 8016ad0:	e7ac      	b.n	8016a2c <_printf_i+0xf4>
 8016ad2:	4827      	ldr	r0, [pc, #156]	@ (8016b70 <_printf_i+0x238>)
 8016ad4:	e7e9      	b.n	8016aaa <_printf_i+0x172>
 8016ad6:	6823      	ldr	r3, [r4, #0]
 8016ad8:	f023 0320 	bic.w	r3, r3, #32
 8016adc:	6023      	str	r3, [r4, #0]
 8016ade:	e7f6      	b.n	8016ace <_printf_i+0x196>
 8016ae0:	4616      	mov	r6, r2
 8016ae2:	e7bd      	b.n	8016a60 <_printf_i+0x128>
 8016ae4:	6833      	ldr	r3, [r6, #0]
 8016ae6:	6825      	ldr	r5, [r4, #0]
 8016ae8:	6961      	ldr	r1, [r4, #20]
 8016aea:	1d18      	adds	r0, r3, #4
 8016aec:	6030      	str	r0, [r6, #0]
 8016aee:	062e      	lsls	r6, r5, #24
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	d501      	bpl.n	8016af8 <_printf_i+0x1c0>
 8016af4:	6019      	str	r1, [r3, #0]
 8016af6:	e002      	b.n	8016afe <_printf_i+0x1c6>
 8016af8:	0668      	lsls	r0, r5, #25
 8016afa:	d5fb      	bpl.n	8016af4 <_printf_i+0x1bc>
 8016afc:	8019      	strh	r1, [r3, #0]
 8016afe:	2300      	movs	r3, #0
 8016b00:	6123      	str	r3, [r4, #16]
 8016b02:	4616      	mov	r6, r2
 8016b04:	e7bc      	b.n	8016a80 <_printf_i+0x148>
 8016b06:	6833      	ldr	r3, [r6, #0]
 8016b08:	1d1a      	adds	r2, r3, #4
 8016b0a:	6032      	str	r2, [r6, #0]
 8016b0c:	681e      	ldr	r6, [r3, #0]
 8016b0e:	6862      	ldr	r2, [r4, #4]
 8016b10:	2100      	movs	r1, #0
 8016b12:	4630      	mov	r0, r6
 8016b14:	f7e9 fb34 	bl	8000180 <memchr>
 8016b18:	b108      	cbz	r0, 8016b1e <_printf_i+0x1e6>
 8016b1a:	1b80      	subs	r0, r0, r6
 8016b1c:	6060      	str	r0, [r4, #4]
 8016b1e:	6863      	ldr	r3, [r4, #4]
 8016b20:	6123      	str	r3, [r4, #16]
 8016b22:	2300      	movs	r3, #0
 8016b24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8016b28:	e7aa      	b.n	8016a80 <_printf_i+0x148>
 8016b2a:	6923      	ldr	r3, [r4, #16]
 8016b2c:	4632      	mov	r2, r6
 8016b2e:	4649      	mov	r1, r9
 8016b30:	4640      	mov	r0, r8
 8016b32:	47d0      	blx	sl
 8016b34:	3001      	adds	r0, #1
 8016b36:	d0ad      	beq.n	8016a94 <_printf_i+0x15c>
 8016b38:	6823      	ldr	r3, [r4, #0]
 8016b3a:	079b      	lsls	r3, r3, #30
 8016b3c:	d413      	bmi.n	8016b66 <_printf_i+0x22e>
 8016b3e:	68e0      	ldr	r0, [r4, #12]
 8016b40:	9b03      	ldr	r3, [sp, #12]
 8016b42:	4298      	cmp	r0, r3
 8016b44:	bfb8      	it	lt
 8016b46:	4618      	movlt	r0, r3
 8016b48:	e7a6      	b.n	8016a98 <_printf_i+0x160>
 8016b4a:	2301      	movs	r3, #1
 8016b4c:	4632      	mov	r2, r6
 8016b4e:	4649      	mov	r1, r9
 8016b50:	4640      	mov	r0, r8
 8016b52:	47d0      	blx	sl
 8016b54:	3001      	adds	r0, #1
 8016b56:	d09d      	beq.n	8016a94 <_printf_i+0x15c>
 8016b58:	3501      	adds	r5, #1
 8016b5a:	68e3      	ldr	r3, [r4, #12]
 8016b5c:	9903      	ldr	r1, [sp, #12]
 8016b5e:	1a5b      	subs	r3, r3, r1
 8016b60:	42ab      	cmp	r3, r5
 8016b62:	dcf2      	bgt.n	8016b4a <_printf_i+0x212>
 8016b64:	e7eb      	b.n	8016b3e <_printf_i+0x206>
 8016b66:	2500      	movs	r5, #0
 8016b68:	f104 0619 	add.w	r6, r4, #25
 8016b6c:	e7f5      	b.n	8016b5a <_printf_i+0x222>
 8016b6e:	bf00      	nop
 8016b70:	0801e123 	.word	0x0801e123
 8016b74:	0801e134 	.word	0x0801e134

08016b78 <_scanf_float>:
 8016b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b7c:	b087      	sub	sp, #28
 8016b7e:	4617      	mov	r7, r2
 8016b80:	9303      	str	r3, [sp, #12]
 8016b82:	688b      	ldr	r3, [r1, #8]
 8016b84:	1e5a      	subs	r2, r3, #1
 8016b86:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8016b8a:	bf81      	itttt	hi
 8016b8c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8016b90:	eb03 0b05 	addhi.w	fp, r3, r5
 8016b94:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8016b98:	608b      	strhi	r3, [r1, #8]
 8016b9a:	680b      	ldr	r3, [r1, #0]
 8016b9c:	460a      	mov	r2, r1
 8016b9e:	f04f 0500 	mov.w	r5, #0
 8016ba2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8016ba6:	f842 3b1c 	str.w	r3, [r2], #28
 8016baa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016bae:	4680      	mov	r8, r0
 8016bb0:	460c      	mov	r4, r1
 8016bb2:	bf98      	it	ls
 8016bb4:	f04f 0b00 	movls.w	fp, #0
 8016bb8:	9201      	str	r2, [sp, #4]
 8016bba:	4616      	mov	r6, r2
 8016bbc:	46aa      	mov	sl, r5
 8016bbe:	46a9      	mov	r9, r5
 8016bc0:	9502      	str	r5, [sp, #8]
 8016bc2:	68a2      	ldr	r2, [r4, #8]
 8016bc4:	b152      	cbz	r2, 8016bdc <_scanf_float+0x64>
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	781b      	ldrb	r3, [r3, #0]
 8016bca:	2b4e      	cmp	r3, #78	@ 0x4e
 8016bcc:	d864      	bhi.n	8016c98 <_scanf_float+0x120>
 8016bce:	2b40      	cmp	r3, #64	@ 0x40
 8016bd0:	d83c      	bhi.n	8016c4c <_scanf_float+0xd4>
 8016bd2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8016bd6:	b2c8      	uxtb	r0, r1
 8016bd8:	280e      	cmp	r0, #14
 8016bda:	d93a      	bls.n	8016c52 <_scanf_float+0xda>
 8016bdc:	f1b9 0f00 	cmp.w	r9, #0
 8016be0:	d003      	beq.n	8016bea <_scanf_float+0x72>
 8016be2:	6823      	ldr	r3, [r4, #0]
 8016be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016be8:	6023      	str	r3, [r4, #0]
 8016bea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016bee:	f1ba 0f01 	cmp.w	sl, #1
 8016bf2:	f200 8117 	bhi.w	8016e24 <_scanf_float+0x2ac>
 8016bf6:	9b01      	ldr	r3, [sp, #4]
 8016bf8:	429e      	cmp	r6, r3
 8016bfa:	f200 8108 	bhi.w	8016e0e <_scanf_float+0x296>
 8016bfe:	2001      	movs	r0, #1
 8016c00:	b007      	add	sp, #28
 8016c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8016c0a:	2a0d      	cmp	r2, #13
 8016c0c:	d8e6      	bhi.n	8016bdc <_scanf_float+0x64>
 8016c0e:	a101      	add	r1, pc, #4	@ (adr r1, 8016c14 <_scanf_float+0x9c>)
 8016c10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016c14:	08016d5b 	.word	0x08016d5b
 8016c18:	08016bdd 	.word	0x08016bdd
 8016c1c:	08016bdd 	.word	0x08016bdd
 8016c20:	08016bdd 	.word	0x08016bdd
 8016c24:	08016dbb 	.word	0x08016dbb
 8016c28:	08016d93 	.word	0x08016d93
 8016c2c:	08016bdd 	.word	0x08016bdd
 8016c30:	08016bdd 	.word	0x08016bdd
 8016c34:	08016d69 	.word	0x08016d69
 8016c38:	08016bdd 	.word	0x08016bdd
 8016c3c:	08016bdd 	.word	0x08016bdd
 8016c40:	08016bdd 	.word	0x08016bdd
 8016c44:	08016bdd 	.word	0x08016bdd
 8016c48:	08016d21 	.word	0x08016d21
 8016c4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8016c50:	e7db      	b.n	8016c0a <_scanf_float+0x92>
 8016c52:	290e      	cmp	r1, #14
 8016c54:	d8c2      	bhi.n	8016bdc <_scanf_float+0x64>
 8016c56:	a001      	add	r0, pc, #4	@ (adr r0, 8016c5c <_scanf_float+0xe4>)
 8016c58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016c5c:	08016d11 	.word	0x08016d11
 8016c60:	08016bdd 	.word	0x08016bdd
 8016c64:	08016d11 	.word	0x08016d11
 8016c68:	08016da7 	.word	0x08016da7
 8016c6c:	08016bdd 	.word	0x08016bdd
 8016c70:	08016cb9 	.word	0x08016cb9
 8016c74:	08016cf7 	.word	0x08016cf7
 8016c78:	08016cf7 	.word	0x08016cf7
 8016c7c:	08016cf7 	.word	0x08016cf7
 8016c80:	08016cf7 	.word	0x08016cf7
 8016c84:	08016cf7 	.word	0x08016cf7
 8016c88:	08016cf7 	.word	0x08016cf7
 8016c8c:	08016cf7 	.word	0x08016cf7
 8016c90:	08016cf7 	.word	0x08016cf7
 8016c94:	08016cf7 	.word	0x08016cf7
 8016c98:	2b6e      	cmp	r3, #110	@ 0x6e
 8016c9a:	d809      	bhi.n	8016cb0 <_scanf_float+0x138>
 8016c9c:	2b60      	cmp	r3, #96	@ 0x60
 8016c9e:	d8b2      	bhi.n	8016c06 <_scanf_float+0x8e>
 8016ca0:	2b54      	cmp	r3, #84	@ 0x54
 8016ca2:	d07b      	beq.n	8016d9c <_scanf_float+0x224>
 8016ca4:	2b59      	cmp	r3, #89	@ 0x59
 8016ca6:	d199      	bne.n	8016bdc <_scanf_float+0x64>
 8016ca8:	2d07      	cmp	r5, #7
 8016caa:	d197      	bne.n	8016bdc <_scanf_float+0x64>
 8016cac:	2508      	movs	r5, #8
 8016cae:	e02c      	b.n	8016d0a <_scanf_float+0x192>
 8016cb0:	2b74      	cmp	r3, #116	@ 0x74
 8016cb2:	d073      	beq.n	8016d9c <_scanf_float+0x224>
 8016cb4:	2b79      	cmp	r3, #121	@ 0x79
 8016cb6:	e7f6      	b.n	8016ca6 <_scanf_float+0x12e>
 8016cb8:	6821      	ldr	r1, [r4, #0]
 8016cba:	05c8      	lsls	r0, r1, #23
 8016cbc:	d51b      	bpl.n	8016cf6 <_scanf_float+0x17e>
 8016cbe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8016cc2:	6021      	str	r1, [r4, #0]
 8016cc4:	f109 0901 	add.w	r9, r9, #1
 8016cc8:	f1bb 0f00 	cmp.w	fp, #0
 8016ccc:	d003      	beq.n	8016cd6 <_scanf_float+0x15e>
 8016cce:	3201      	adds	r2, #1
 8016cd0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016cd4:	60a2      	str	r2, [r4, #8]
 8016cd6:	68a3      	ldr	r3, [r4, #8]
 8016cd8:	3b01      	subs	r3, #1
 8016cda:	60a3      	str	r3, [r4, #8]
 8016cdc:	6923      	ldr	r3, [r4, #16]
 8016cde:	3301      	adds	r3, #1
 8016ce0:	6123      	str	r3, [r4, #16]
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	3b01      	subs	r3, #1
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	607b      	str	r3, [r7, #4]
 8016cea:	f340 8087 	ble.w	8016dfc <_scanf_float+0x284>
 8016cee:	683b      	ldr	r3, [r7, #0]
 8016cf0:	3301      	adds	r3, #1
 8016cf2:	603b      	str	r3, [r7, #0]
 8016cf4:	e765      	b.n	8016bc2 <_scanf_float+0x4a>
 8016cf6:	eb1a 0105 	adds.w	r1, sl, r5
 8016cfa:	f47f af6f 	bne.w	8016bdc <_scanf_float+0x64>
 8016cfe:	6822      	ldr	r2, [r4, #0]
 8016d00:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8016d04:	6022      	str	r2, [r4, #0]
 8016d06:	460d      	mov	r5, r1
 8016d08:	468a      	mov	sl, r1
 8016d0a:	f806 3b01 	strb.w	r3, [r6], #1
 8016d0e:	e7e2      	b.n	8016cd6 <_scanf_float+0x15e>
 8016d10:	6822      	ldr	r2, [r4, #0]
 8016d12:	0610      	lsls	r0, r2, #24
 8016d14:	f57f af62 	bpl.w	8016bdc <_scanf_float+0x64>
 8016d18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8016d1c:	6022      	str	r2, [r4, #0]
 8016d1e:	e7f4      	b.n	8016d0a <_scanf_float+0x192>
 8016d20:	f1ba 0f00 	cmp.w	sl, #0
 8016d24:	d10e      	bne.n	8016d44 <_scanf_float+0x1cc>
 8016d26:	f1b9 0f00 	cmp.w	r9, #0
 8016d2a:	d10e      	bne.n	8016d4a <_scanf_float+0x1d2>
 8016d2c:	6822      	ldr	r2, [r4, #0]
 8016d2e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8016d32:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8016d36:	d108      	bne.n	8016d4a <_scanf_float+0x1d2>
 8016d38:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8016d3c:	6022      	str	r2, [r4, #0]
 8016d3e:	f04f 0a01 	mov.w	sl, #1
 8016d42:	e7e2      	b.n	8016d0a <_scanf_float+0x192>
 8016d44:	f1ba 0f02 	cmp.w	sl, #2
 8016d48:	d055      	beq.n	8016df6 <_scanf_float+0x27e>
 8016d4a:	2d01      	cmp	r5, #1
 8016d4c:	d002      	beq.n	8016d54 <_scanf_float+0x1dc>
 8016d4e:	2d04      	cmp	r5, #4
 8016d50:	f47f af44 	bne.w	8016bdc <_scanf_float+0x64>
 8016d54:	3501      	adds	r5, #1
 8016d56:	b2ed      	uxtb	r5, r5
 8016d58:	e7d7      	b.n	8016d0a <_scanf_float+0x192>
 8016d5a:	f1ba 0f01 	cmp.w	sl, #1
 8016d5e:	f47f af3d 	bne.w	8016bdc <_scanf_float+0x64>
 8016d62:	f04f 0a02 	mov.w	sl, #2
 8016d66:	e7d0      	b.n	8016d0a <_scanf_float+0x192>
 8016d68:	b97d      	cbnz	r5, 8016d8a <_scanf_float+0x212>
 8016d6a:	f1b9 0f00 	cmp.w	r9, #0
 8016d6e:	f47f af38 	bne.w	8016be2 <_scanf_float+0x6a>
 8016d72:	6822      	ldr	r2, [r4, #0]
 8016d74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8016d78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8016d7c:	f040 8108 	bne.w	8016f90 <_scanf_float+0x418>
 8016d80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8016d84:	6022      	str	r2, [r4, #0]
 8016d86:	2501      	movs	r5, #1
 8016d88:	e7bf      	b.n	8016d0a <_scanf_float+0x192>
 8016d8a:	2d03      	cmp	r5, #3
 8016d8c:	d0e2      	beq.n	8016d54 <_scanf_float+0x1dc>
 8016d8e:	2d05      	cmp	r5, #5
 8016d90:	e7de      	b.n	8016d50 <_scanf_float+0x1d8>
 8016d92:	2d02      	cmp	r5, #2
 8016d94:	f47f af22 	bne.w	8016bdc <_scanf_float+0x64>
 8016d98:	2503      	movs	r5, #3
 8016d9a:	e7b6      	b.n	8016d0a <_scanf_float+0x192>
 8016d9c:	2d06      	cmp	r5, #6
 8016d9e:	f47f af1d 	bne.w	8016bdc <_scanf_float+0x64>
 8016da2:	2507      	movs	r5, #7
 8016da4:	e7b1      	b.n	8016d0a <_scanf_float+0x192>
 8016da6:	6822      	ldr	r2, [r4, #0]
 8016da8:	0591      	lsls	r1, r2, #22
 8016daa:	f57f af17 	bpl.w	8016bdc <_scanf_float+0x64>
 8016dae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8016db2:	6022      	str	r2, [r4, #0]
 8016db4:	f8cd 9008 	str.w	r9, [sp, #8]
 8016db8:	e7a7      	b.n	8016d0a <_scanf_float+0x192>
 8016dba:	6822      	ldr	r2, [r4, #0]
 8016dbc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8016dc0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8016dc4:	d006      	beq.n	8016dd4 <_scanf_float+0x25c>
 8016dc6:	0550      	lsls	r0, r2, #21
 8016dc8:	f57f af08 	bpl.w	8016bdc <_scanf_float+0x64>
 8016dcc:	f1b9 0f00 	cmp.w	r9, #0
 8016dd0:	f000 80de 	beq.w	8016f90 <_scanf_float+0x418>
 8016dd4:	0591      	lsls	r1, r2, #22
 8016dd6:	bf58      	it	pl
 8016dd8:	9902      	ldrpl	r1, [sp, #8]
 8016dda:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8016dde:	bf58      	it	pl
 8016de0:	eba9 0101 	subpl.w	r1, r9, r1
 8016de4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8016de8:	bf58      	it	pl
 8016dea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016dee:	6022      	str	r2, [r4, #0]
 8016df0:	f04f 0900 	mov.w	r9, #0
 8016df4:	e789      	b.n	8016d0a <_scanf_float+0x192>
 8016df6:	f04f 0a03 	mov.w	sl, #3
 8016dfa:	e786      	b.n	8016d0a <_scanf_float+0x192>
 8016dfc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016e00:	4639      	mov	r1, r7
 8016e02:	4640      	mov	r0, r8
 8016e04:	4798      	blx	r3
 8016e06:	2800      	cmp	r0, #0
 8016e08:	f43f aedb 	beq.w	8016bc2 <_scanf_float+0x4a>
 8016e0c:	e6e6      	b.n	8016bdc <_scanf_float+0x64>
 8016e0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016e12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016e16:	463a      	mov	r2, r7
 8016e18:	4640      	mov	r0, r8
 8016e1a:	4798      	blx	r3
 8016e1c:	6923      	ldr	r3, [r4, #16]
 8016e1e:	3b01      	subs	r3, #1
 8016e20:	6123      	str	r3, [r4, #16]
 8016e22:	e6e8      	b.n	8016bf6 <_scanf_float+0x7e>
 8016e24:	1e6b      	subs	r3, r5, #1
 8016e26:	2b06      	cmp	r3, #6
 8016e28:	d824      	bhi.n	8016e74 <_scanf_float+0x2fc>
 8016e2a:	2d02      	cmp	r5, #2
 8016e2c:	d836      	bhi.n	8016e9c <_scanf_float+0x324>
 8016e2e:	9b01      	ldr	r3, [sp, #4]
 8016e30:	429e      	cmp	r6, r3
 8016e32:	f67f aee4 	bls.w	8016bfe <_scanf_float+0x86>
 8016e36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016e3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016e3e:	463a      	mov	r2, r7
 8016e40:	4640      	mov	r0, r8
 8016e42:	4798      	blx	r3
 8016e44:	6923      	ldr	r3, [r4, #16]
 8016e46:	3b01      	subs	r3, #1
 8016e48:	6123      	str	r3, [r4, #16]
 8016e4a:	e7f0      	b.n	8016e2e <_scanf_float+0x2b6>
 8016e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016e50:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8016e54:	463a      	mov	r2, r7
 8016e56:	4640      	mov	r0, r8
 8016e58:	4798      	blx	r3
 8016e5a:	6923      	ldr	r3, [r4, #16]
 8016e5c:	3b01      	subs	r3, #1
 8016e5e:	6123      	str	r3, [r4, #16]
 8016e60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e64:	fa5f fa8a 	uxtb.w	sl, sl
 8016e68:	f1ba 0f02 	cmp.w	sl, #2
 8016e6c:	d1ee      	bne.n	8016e4c <_scanf_float+0x2d4>
 8016e6e:	3d03      	subs	r5, #3
 8016e70:	b2ed      	uxtb	r5, r5
 8016e72:	1b76      	subs	r6, r6, r5
 8016e74:	6823      	ldr	r3, [r4, #0]
 8016e76:	05da      	lsls	r2, r3, #23
 8016e78:	d530      	bpl.n	8016edc <_scanf_float+0x364>
 8016e7a:	055b      	lsls	r3, r3, #21
 8016e7c:	d511      	bpl.n	8016ea2 <_scanf_float+0x32a>
 8016e7e:	9b01      	ldr	r3, [sp, #4]
 8016e80:	429e      	cmp	r6, r3
 8016e82:	f67f aebc 	bls.w	8016bfe <_scanf_float+0x86>
 8016e86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016e8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016e8e:	463a      	mov	r2, r7
 8016e90:	4640      	mov	r0, r8
 8016e92:	4798      	blx	r3
 8016e94:	6923      	ldr	r3, [r4, #16]
 8016e96:	3b01      	subs	r3, #1
 8016e98:	6123      	str	r3, [r4, #16]
 8016e9a:	e7f0      	b.n	8016e7e <_scanf_float+0x306>
 8016e9c:	46aa      	mov	sl, r5
 8016e9e:	46b3      	mov	fp, r6
 8016ea0:	e7de      	b.n	8016e60 <_scanf_float+0x2e8>
 8016ea2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016ea6:	6923      	ldr	r3, [r4, #16]
 8016ea8:	2965      	cmp	r1, #101	@ 0x65
 8016eaa:	f103 33ff 	add.w	r3, r3, #4294967295
 8016eae:	f106 35ff 	add.w	r5, r6, #4294967295
 8016eb2:	6123      	str	r3, [r4, #16]
 8016eb4:	d00c      	beq.n	8016ed0 <_scanf_float+0x358>
 8016eb6:	2945      	cmp	r1, #69	@ 0x45
 8016eb8:	d00a      	beq.n	8016ed0 <_scanf_float+0x358>
 8016eba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016ebe:	463a      	mov	r2, r7
 8016ec0:	4640      	mov	r0, r8
 8016ec2:	4798      	blx	r3
 8016ec4:	6923      	ldr	r3, [r4, #16]
 8016ec6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016eca:	3b01      	subs	r3, #1
 8016ecc:	1eb5      	subs	r5, r6, #2
 8016ece:	6123      	str	r3, [r4, #16]
 8016ed0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016ed4:	463a      	mov	r2, r7
 8016ed6:	4640      	mov	r0, r8
 8016ed8:	4798      	blx	r3
 8016eda:	462e      	mov	r6, r5
 8016edc:	6822      	ldr	r2, [r4, #0]
 8016ede:	f012 0210 	ands.w	r2, r2, #16
 8016ee2:	d001      	beq.n	8016ee8 <_scanf_float+0x370>
 8016ee4:	2000      	movs	r0, #0
 8016ee6:	e68b      	b.n	8016c00 <_scanf_float+0x88>
 8016ee8:	7032      	strb	r2, [r6, #0]
 8016eea:	6823      	ldr	r3, [r4, #0]
 8016eec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8016ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016ef4:	d11c      	bne.n	8016f30 <_scanf_float+0x3b8>
 8016ef6:	9b02      	ldr	r3, [sp, #8]
 8016ef8:	454b      	cmp	r3, r9
 8016efa:	eba3 0209 	sub.w	r2, r3, r9
 8016efe:	d123      	bne.n	8016f48 <_scanf_float+0x3d0>
 8016f00:	9901      	ldr	r1, [sp, #4]
 8016f02:	2200      	movs	r2, #0
 8016f04:	4640      	mov	r0, r8
 8016f06:	f7ff f8ef 	bl	80160e8 <_strtod_r>
 8016f0a:	9b03      	ldr	r3, [sp, #12]
 8016f0c:	6821      	ldr	r1, [r4, #0]
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	f011 0f02 	tst.w	r1, #2
 8016f14:	ec57 6b10 	vmov	r6, r7, d0
 8016f18:	f103 0204 	add.w	r2, r3, #4
 8016f1c:	d01f      	beq.n	8016f5e <_scanf_float+0x3e6>
 8016f1e:	9903      	ldr	r1, [sp, #12]
 8016f20:	600a      	str	r2, [r1, #0]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	e9c3 6700 	strd	r6, r7, [r3]
 8016f28:	68e3      	ldr	r3, [r4, #12]
 8016f2a:	3301      	adds	r3, #1
 8016f2c:	60e3      	str	r3, [r4, #12]
 8016f2e:	e7d9      	b.n	8016ee4 <_scanf_float+0x36c>
 8016f30:	9b04      	ldr	r3, [sp, #16]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d0e4      	beq.n	8016f00 <_scanf_float+0x388>
 8016f36:	9905      	ldr	r1, [sp, #20]
 8016f38:	230a      	movs	r3, #10
 8016f3a:	3101      	adds	r1, #1
 8016f3c:	4640      	mov	r0, r8
 8016f3e:	f7ff f9b7 	bl	80162b0 <_strtol_r>
 8016f42:	9b04      	ldr	r3, [sp, #16]
 8016f44:	9e05      	ldr	r6, [sp, #20]
 8016f46:	1ac2      	subs	r2, r0, r3
 8016f48:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8016f4c:	429e      	cmp	r6, r3
 8016f4e:	bf28      	it	cs
 8016f50:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8016f54:	4910      	ldr	r1, [pc, #64]	@ (8016f98 <_scanf_float+0x420>)
 8016f56:	4630      	mov	r0, r6
 8016f58:	f000 f918 	bl	801718c <siprintf>
 8016f5c:	e7d0      	b.n	8016f00 <_scanf_float+0x388>
 8016f5e:	f011 0f04 	tst.w	r1, #4
 8016f62:	9903      	ldr	r1, [sp, #12]
 8016f64:	600a      	str	r2, [r1, #0]
 8016f66:	d1dc      	bne.n	8016f22 <_scanf_float+0x3aa>
 8016f68:	681d      	ldr	r5, [r3, #0]
 8016f6a:	4632      	mov	r2, r6
 8016f6c:	463b      	mov	r3, r7
 8016f6e:	4630      	mov	r0, r6
 8016f70:	4639      	mov	r1, r7
 8016f72:	f7e9 fdb3 	bl	8000adc <__aeabi_dcmpun>
 8016f76:	b128      	cbz	r0, 8016f84 <_scanf_float+0x40c>
 8016f78:	4808      	ldr	r0, [pc, #32]	@ (8016f9c <_scanf_float+0x424>)
 8016f7a:	f000 fa9d 	bl	80174b8 <nanf>
 8016f7e:	ed85 0a00 	vstr	s0, [r5]
 8016f82:	e7d1      	b.n	8016f28 <_scanf_float+0x3b0>
 8016f84:	4630      	mov	r0, r6
 8016f86:	4639      	mov	r1, r7
 8016f88:	f7e9 fe06 	bl	8000b98 <__aeabi_d2f>
 8016f8c:	6028      	str	r0, [r5, #0]
 8016f8e:	e7cb      	b.n	8016f28 <_scanf_float+0x3b0>
 8016f90:	f04f 0900 	mov.w	r9, #0
 8016f94:	e629      	b.n	8016bea <_scanf_float+0x72>
 8016f96:	bf00      	nop
 8016f98:	0801e145 	.word	0x0801e145
 8016f9c:	0801e1fe 	.word	0x0801e1fe

08016fa0 <std>:
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	b510      	push	{r4, lr}
 8016fa4:	4604      	mov	r4, r0
 8016fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8016faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016fae:	6083      	str	r3, [r0, #8]
 8016fb0:	8181      	strh	r1, [r0, #12]
 8016fb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8016fb4:	81c2      	strh	r2, [r0, #14]
 8016fb6:	6183      	str	r3, [r0, #24]
 8016fb8:	4619      	mov	r1, r3
 8016fba:	2208      	movs	r2, #8
 8016fbc:	305c      	adds	r0, #92	@ 0x5c
 8016fbe:	f000 f948 	bl	8017252 <memset>
 8016fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8016ff8 <std+0x58>)
 8016fc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8016fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8016ffc <std+0x5c>)
 8016fc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016fca:	4b0d      	ldr	r3, [pc, #52]	@ (8017000 <std+0x60>)
 8016fcc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016fce:	4b0d      	ldr	r3, [pc, #52]	@ (8017004 <std+0x64>)
 8016fd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8016fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8017008 <std+0x68>)
 8016fd4:	6224      	str	r4, [r4, #32]
 8016fd6:	429c      	cmp	r4, r3
 8016fd8:	d006      	beq.n	8016fe8 <std+0x48>
 8016fda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016fde:	4294      	cmp	r4, r2
 8016fe0:	d002      	beq.n	8016fe8 <std+0x48>
 8016fe2:	33d0      	adds	r3, #208	@ 0xd0
 8016fe4:	429c      	cmp	r4, r3
 8016fe6:	d105      	bne.n	8016ff4 <std+0x54>
 8016fe8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ff0:	f000 ba40 	b.w	8017474 <__retarget_lock_init_recursive>
 8016ff4:	bd10      	pop	{r4, pc}
 8016ff6:	bf00      	nop
 8016ff8:	080171cd 	.word	0x080171cd
 8016ffc:	080171ef 	.word	0x080171ef
 8017000:	08017227 	.word	0x08017227
 8017004:	0801724b 	.word	0x0801724b
 8017008:	20002cc4 	.word	0x20002cc4

0801700c <stdio_exit_handler>:
 801700c:	4a02      	ldr	r2, [pc, #8]	@ (8017018 <stdio_exit_handler+0xc>)
 801700e:	4903      	ldr	r1, [pc, #12]	@ (801701c <stdio_exit_handler+0x10>)
 8017010:	4803      	ldr	r0, [pc, #12]	@ (8017020 <stdio_exit_handler+0x14>)
 8017012:	f000 b869 	b.w	80170e8 <_fwalk_sglue>
 8017016:	bf00      	nop
 8017018:	2000012c 	.word	0x2000012c
 801701c:	080195f9 	.word	0x080195f9
 8017020:	200002a8 	.word	0x200002a8

08017024 <cleanup_stdio>:
 8017024:	6841      	ldr	r1, [r0, #4]
 8017026:	4b0c      	ldr	r3, [pc, #48]	@ (8017058 <cleanup_stdio+0x34>)
 8017028:	4299      	cmp	r1, r3
 801702a:	b510      	push	{r4, lr}
 801702c:	4604      	mov	r4, r0
 801702e:	d001      	beq.n	8017034 <cleanup_stdio+0x10>
 8017030:	f002 fae2 	bl	80195f8 <_fflush_r>
 8017034:	68a1      	ldr	r1, [r4, #8]
 8017036:	4b09      	ldr	r3, [pc, #36]	@ (801705c <cleanup_stdio+0x38>)
 8017038:	4299      	cmp	r1, r3
 801703a:	d002      	beq.n	8017042 <cleanup_stdio+0x1e>
 801703c:	4620      	mov	r0, r4
 801703e:	f002 fadb 	bl	80195f8 <_fflush_r>
 8017042:	68e1      	ldr	r1, [r4, #12]
 8017044:	4b06      	ldr	r3, [pc, #24]	@ (8017060 <cleanup_stdio+0x3c>)
 8017046:	4299      	cmp	r1, r3
 8017048:	d004      	beq.n	8017054 <cleanup_stdio+0x30>
 801704a:	4620      	mov	r0, r4
 801704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017050:	f002 bad2 	b.w	80195f8 <_fflush_r>
 8017054:	bd10      	pop	{r4, pc}
 8017056:	bf00      	nop
 8017058:	20002cc4 	.word	0x20002cc4
 801705c:	20002d2c 	.word	0x20002d2c
 8017060:	20002d94 	.word	0x20002d94

08017064 <global_stdio_init.part.0>:
 8017064:	b510      	push	{r4, lr}
 8017066:	4b0b      	ldr	r3, [pc, #44]	@ (8017094 <global_stdio_init.part.0+0x30>)
 8017068:	4c0b      	ldr	r4, [pc, #44]	@ (8017098 <global_stdio_init.part.0+0x34>)
 801706a:	4a0c      	ldr	r2, [pc, #48]	@ (801709c <global_stdio_init.part.0+0x38>)
 801706c:	601a      	str	r2, [r3, #0]
 801706e:	4620      	mov	r0, r4
 8017070:	2200      	movs	r2, #0
 8017072:	2104      	movs	r1, #4
 8017074:	f7ff ff94 	bl	8016fa0 <std>
 8017078:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801707c:	2201      	movs	r2, #1
 801707e:	2109      	movs	r1, #9
 8017080:	f7ff ff8e 	bl	8016fa0 <std>
 8017084:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017088:	2202      	movs	r2, #2
 801708a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801708e:	2112      	movs	r1, #18
 8017090:	f7ff bf86 	b.w	8016fa0 <std>
 8017094:	20002dfc 	.word	0x20002dfc
 8017098:	20002cc4 	.word	0x20002cc4
 801709c:	0801700d 	.word	0x0801700d

080170a0 <__sfp_lock_acquire>:
 80170a0:	4801      	ldr	r0, [pc, #4]	@ (80170a8 <__sfp_lock_acquire+0x8>)
 80170a2:	f000 b9e8 	b.w	8017476 <__retarget_lock_acquire_recursive>
 80170a6:	bf00      	nop
 80170a8:	20002e05 	.word	0x20002e05

080170ac <__sfp_lock_release>:
 80170ac:	4801      	ldr	r0, [pc, #4]	@ (80170b4 <__sfp_lock_release+0x8>)
 80170ae:	f000 b9e3 	b.w	8017478 <__retarget_lock_release_recursive>
 80170b2:	bf00      	nop
 80170b4:	20002e05 	.word	0x20002e05

080170b8 <__sinit>:
 80170b8:	b510      	push	{r4, lr}
 80170ba:	4604      	mov	r4, r0
 80170bc:	f7ff fff0 	bl	80170a0 <__sfp_lock_acquire>
 80170c0:	6a23      	ldr	r3, [r4, #32]
 80170c2:	b11b      	cbz	r3, 80170cc <__sinit+0x14>
 80170c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170c8:	f7ff bff0 	b.w	80170ac <__sfp_lock_release>
 80170cc:	4b04      	ldr	r3, [pc, #16]	@ (80170e0 <__sinit+0x28>)
 80170ce:	6223      	str	r3, [r4, #32]
 80170d0:	4b04      	ldr	r3, [pc, #16]	@ (80170e4 <__sinit+0x2c>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d1f5      	bne.n	80170c4 <__sinit+0xc>
 80170d8:	f7ff ffc4 	bl	8017064 <global_stdio_init.part.0>
 80170dc:	e7f2      	b.n	80170c4 <__sinit+0xc>
 80170de:	bf00      	nop
 80170e0:	08017025 	.word	0x08017025
 80170e4:	20002dfc 	.word	0x20002dfc

080170e8 <_fwalk_sglue>:
 80170e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170ec:	4607      	mov	r7, r0
 80170ee:	4688      	mov	r8, r1
 80170f0:	4614      	mov	r4, r2
 80170f2:	2600      	movs	r6, #0
 80170f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80170f8:	f1b9 0901 	subs.w	r9, r9, #1
 80170fc:	d505      	bpl.n	801710a <_fwalk_sglue+0x22>
 80170fe:	6824      	ldr	r4, [r4, #0]
 8017100:	2c00      	cmp	r4, #0
 8017102:	d1f7      	bne.n	80170f4 <_fwalk_sglue+0xc>
 8017104:	4630      	mov	r0, r6
 8017106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801710a:	89ab      	ldrh	r3, [r5, #12]
 801710c:	2b01      	cmp	r3, #1
 801710e:	d907      	bls.n	8017120 <_fwalk_sglue+0x38>
 8017110:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017114:	3301      	adds	r3, #1
 8017116:	d003      	beq.n	8017120 <_fwalk_sglue+0x38>
 8017118:	4629      	mov	r1, r5
 801711a:	4638      	mov	r0, r7
 801711c:	47c0      	blx	r8
 801711e:	4306      	orrs	r6, r0
 8017120:	3568      	adds	r5, #104	@ 0x68
 8017122:	e7e9      	b.n	80170f8 <_fwalk_sglue+0x10>

08017124 <sniprintf>:
 8017124:	b40c      	push	{r2, r3}
 8017126:	b530      	push	{r4, r5, lr}
 8017128:	4b17      	ldr	r3, [pc, #92]	@ (8017188 <sniprintf+0x64>)
 801712a:	1e0c      	subs	r4, r1, #0
 801712c:	681d      	ldr	r5, [r3, #0]
 801712e:	b09d      	sub	sp, #116	@ 0x74
 8017130:	da08      	bge.n	8017144 <sniprintf+0x20>
 8017132:	238b      	movs	r3, #139	@ 0x8b
 8017134:	602b      	str	r3, [r5, #0]
 8017136:	f04f 30ff 	mov.w	r0, #4294967295
 801713a:	b01d      	add	sp, #116	@ 0x74
 801713c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017140:	b002      	add	sp, #8
 8017142:	4770      	bx	lr
 8017144:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017148:	f8ad 3014 	strh.w	r3, [sp, #20]
 801714c:	bf14      	ite	ne
 801714e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017152:	4623      	moveq	r3, r4
 8017154:	9304      	str	r3, [sp, #16]
 8017156:	9307      	str	r3, [sp, #28]
 8017158:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801715c:	9002      	str	r0, [sp, #8]
 801715e:	9006      	str	r0, [sp, #24]
 8017160:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017164:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017166:	ab21      	add	r3, sp, #132	@ 0x84
 8017168:	a902      	add	r1, sp, #8
 801716a:	4628      	mov	r0, r5
 801716c:	9301      	str	r3, [sp, #4]
 801716e:	f002 f8c3 	bl	80192f8 <_svfiprintf_r>
 8017172:	1c43      	adds	r3, r0, #1
 8017174:	bfbc      	itt	lt
 8017176:	238b      	movlt	r3, #139	@ 0x8b
 8017178:	602b      	strlt	r3, [r5, #0]
 801717a:	2c00      	cmp	r4, #0
 801717c:	d0dd      	beq.n	801713a <sniprintf+0x16>
 801717e:	9b02      	ldr	r3, [sp, #8]
 8017180:	2200      	movs	r2, #0
 8017182:	701a      	strb	r2, [r3, #0]
 8017184:	e7d9      	b.n	801713a <sniprintf+0x16>
 8017186:	bf00      	nop
 8017188:	200002a4 	.word	0x200002a4

0801718c <siprintf>:
 801718c:	b40e      	push	{r1, r2, r3}
 801718e:	b500      	push	{lr}
 8017190:	b09c      	sub	sp, #112	@ 0x70
 8017192:	ab1d      	add	r3, sp, #116	@ 0x74
 8017194:	9002      	str	r0, [sp, #8]
 8017196:	9006      	str	r0, [sp, #24]
 8017198:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801719c:	4809      	ldr	r0, [pc, #36]	@ (80171c4 <siprintf+0x38>)
 801719e:	9107      	str	r1, [sp, #28]
 80171a0:	9104      	str	r1, [sp, #16]
 80171a2:	4909      	ldr	r1, [pc, #36]	@ (80171c8 <siprintf+0x3c>)
 80171a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80171a8:	9105      	str	r1, [sp, #20]
 80171aa:	6800      	ldr	r0, [r0, #0]
 80171ac:	9301      	str	r3, [sp, #4]
 80171ae:	a902      	add	r1, sp, #8
 80171b0:	f002 f8a2 	bl	80192f8 <_svfiprintf_r>
 80171b4:	9b02      	ldr	r3, [sp, #8]
 80171b6:	2200      	movs	r2, #0
 80171b8:	701a      	strb	r2, [r3, #0]
 80171ba:	b01c      	add	sp, #112	@ 0x70
 80171bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80171c0:	b003      	add	sp, #12
 80171c2:	4770      	bx	lr
 80171c4:	200002a4 	.word	0x200002a4
 80171c8:	ffff0208 	.word	0xffff0208

080171cc <__sread>:
 80171cc:	b510      	push	{r4, lr}
 80171ce:	460c      	mov	r4, r1
 80171d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80171d4:	f000 f8f0 	bl	80173b8 <_read_r>
 80171d8:	2800      	cmp	r0, #0
 80171da:	bfab      	itete	ge
 80171dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80171de:	89a3      	ldrhlt	r3, [r4, #12]
 80171e0:	181b      	addge	r3, r3, r0
 80171e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80171e6:	bfac      	ite	ge
 80171e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80171ea:	81a3      	strhlt	r3, [r4, #12]
 80171ec:	bd10      	pop	{r4, pc}

080171ee <__swrite>:
 80171ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171f2:	461f      	mov	r7, r3
 80171f4:	898b      	ldrh	r3, [r1, #12]
 80171f6:	05db      	lsls	r3, r3, #23
 80171f8:	4605      	mov	r5, r0
 80171fa:	460c      	mov	r4, r1
 80171fc:	4616      	mov	r6, r2
 80171fe:	d505      	bpl.n	801720c <__swrite+0x1e>
 8017200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017204:	2302      	movs	r3, #2
 8017206:	2200      	movs	r2, #0
 8017208:	f000 f8c4 	bl	8017394 <_lseek_r>
 801720c:	89a3      	ldrh	r3, [r4, #12]
 801720e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017212:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017216:	81a3      	strh	r3, [r4, #12]
 8017218:	4632      	mov	r2, r6
 801721a:	463b      	mov	r3, r7
 801721c:	4628      	mov	r0, r5
 801721e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017222:	f000 b8eb 	b.w	80173fc <_write_r>

08017226 <__sseek>:
 8017226:	b510      	push	{r4, lr}
 8017228:	460c      	mov	r4, r1
 801722a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801722e:	f000 f8b1 	bl	8017394 <_lseek_r>
 8017232:	1c43      	adds	r3, r0, #1
 8017234:	89a3      	ldrh	r3, [r4, #12]
 8017236:	bf15      	itete	ne
 8017238:	6560      	strne	r0, [r4, #84]	@ 0x54
 801723a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801723e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017242:	81a3      	strheq	r3, [r4, #12]
 8017244:	bf18      	it	ne
 8017246:	81a3      	strhne	r3, [r4, #12]
 8017248:	bd10      	pop	{r4, pc}

0801724a <__sclose>:
 801724a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801724e:	f000 b891 	b.w	8017374 <_close_r>

08017252 <memset>:
 8017252:	4402      	add	r2, r0
 8017254:	4603      	mov	r3, r0
 8017256:	4293      	cmp	r3, r2
 8017258:	d100      	bne.n	801725c <memset+0xa>
 801725a:	4770      	bx	lr
 801725c:	f803 1b01 	strb.w	r1, [r3], #1
 8017260:	e7f9      	b.n	8017256 <memset+0x4>

08017262 <strncmp>:
 8017262:	b510      	push	{r4, lr}
 8017264:	b16a      	cbz	r2, 8017282 <strncmp+0x20>
 8017266:	3901      	subs	r1, #1
 8017268:	1884      	adds	r4, r0, r2
 801726a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801726e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017272:	429a      	cmp	r2, r3
 8017274:	d103      	bne.n	801727e <strncmp+0x1c>
 8017276:	42a0      	cmp	r0, r4
 8017278:	d001      	beq.n	801727e <strncmp+0x1c>
 801727a:	2a00      	cmp	r2, #0
 801727c:	d1f5      	bne.n	801726a <strncmp+0x8>
 801727e:	1ad0      	subs	r0, r2, r3
 8017280:	bd10      	pop	{r4, pc}
 8017282:	4610      	mov	r0, r2
 8017284:	e7fc      	b.n	8017280 <strncmp+0x1e>
	...

08017288 <strtok>:
 8017288:	4b16      	ldr	r3, [pc, #88]	@ (80172e4 <strtok+0x5c>)
 801728a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801728e:	681f      	ldr	r7, [r3, #0]
 8017290:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8017292:	4605      	mov	r5, r0
 8017294:	460e      	mov	r6, r1
 8017296:	b9ec      	cbnz	r4, 80172d4 <strtok+0x4c>
 8017298:	2050      	movs	r0, #80	@ 0x50
 801729a:	f7fe f863 	bl	8015364 <malloc>
 801729e:	4602      	mov	r2, r0
 80172a0:	6478      	str	r0, [r7, #68]	@ 0x44
 80172a2:	b920      	cbnz	r0, 80172ae <strtok+0x26>
 80172a4:	4b10      	ldr	r3, [pc, #64]	@ (80172e8 <strtok+0x60>)
 80172a6:	4811      	ldr	r0, [pc, #68]	@ (80172ec <strtok+0x64>)
 80172a8:	215b      	movs	r1, #91	@ 0x5b
 80172aa:	f000 f90b 	bl	80174c4 <__assert_func>
 80172ae:	e9c0 4400 	strd	r4, r4, [r0]
 80172b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80172b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80172ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80172be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80172c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80172c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80172ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80172ce:	6184      	str	r4, [r0, #24]
 80172d0:	7704      	strb	r4, [r0, #28]
 80172d2:	6244      	str	r4, [r0, #36]	@ 0x24
 80172d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80172d6:	4631      	mov	r1, r6
 80172d8:	4628      	mov	r0, r5
 80172da:	2301      	movs	r3, #1
 80172dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172e0:	f000 b806 	b.w	80172f0 <__strtok_r>
 80172e4:	200002a4 	.word	0x200002a4
 80172e8:	0801e14a 	.word	0x0801e14a
 80172ec:	0801e161 	.word	0x0801e161

080172f0 <__strtok_r>:
 80172f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80172f2:	4604      	mov	r4, r0
 80172f4:	b908      	cbnz	r0, 80172fa <__strtok_r+0xa>
 80172f6:	6814      	ldr	r4, [r2, #0]
 80172f8:	b144      	cbz	r4, 801730c <__strtok_r+0x1c>
 80172fa:	4620      	mov	r0, r4
 80172fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8017300:	460f      	mov	r7, r1
 8017302:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017306:	b91e      	cbnz	r6, 8017310 <__strtok_r+0x20>
 8017308:	b965      	cbnz	r5, 8017324 <__strtok_r+0x34>
 801730a:	6015      	str	r5, [r2, #0]
 801730c:	2000      	movs	r0, #0
 801730e:	e005      	b.n	801731c <__strtok_r+0x2c>
 8017310:	42b5      	cmp	r5, r6
 8017312:	d1f6      	bne.n	8017302 <__strtok_r+0x12>
 8017314:	2b00      	cmp	r3, #0
 8017316:	d1f0      	bne.n	80172fa <__strtok_r+0xa>
 8017318:	6014      	str	r4, [r2, #0]
 801731a:	7003      	strb	r3, [r0, #0]
 801731c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801731e:	461c      	mov	r4, r3
 8017320:	e00c      	b.n	801733c <__strtok_r+0x4c>
 8017322:	b915      	cbnz	r5, 801732a <__strtok_r+0x3a>
 8017324:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017328:	460e      	mov	r6, r1
 801732a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801732e:	42ab      	cmp	r3, r5
 8017330:	d1f7      	bne.n	8017322 <__strtok_r+0x32>
 8017332:	2b00      	cmp	r3, #0
 8017334:	d0f3      	beq.n	801731e <__strtok_r+0x2e>
 8017336:	2300      	movs	r3, #0
 8017338:	f804 3c01 	strb.w	r3, [r4, #-1]
 801733c:	6014      	str	r4, [r2, #0]
 801733e:	e7ed      	b.n	801731c <__strtok_r+0x2c>

08017340 <strstr>:
 8017340:	780a      	ldrb	r2, [r1, #0]
 8017342:	b570      	push	{r4, r5, r6, lr}
 8017344:	b96a      	cbnz	r2, 8017362 <strstr+0x22>
 8017346:	bd70      	pop	{r4, r5, r6, pc}
 8017348:	429a      	cmp	r2, r3
 801734a:	d109      	bne.n	8017360 <strstr+0x20>
 801734c:	460c      	mov	r4, r1
 801734e:	4605      	mov	r5, r0
 8017350:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017354:	2b00      	cmp	r3, #0
 8017356:	d0f6      	beq.n	8017346 <strstr+0x6>
 8017358:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801735c:	429e      	cmp	r6, r3
 801735e:	d0f7      	beq.n	8017350 <strstr+0x10>
 8017360:	3001      	adds	r0, #1
 8017362:	7803      	ldrb	r3, [r0, #0]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d1ef      	bne.n	8017348 <strstr+0x8>
 8017368:	4618      	mov	r0, r3
 801736a:	e7ec      	b.n	8017346 <strstr+0x6>

0801736c <_localeconv_r>:
 801736c:	4800      	ldr	r0, [pc, #0]	@ (8017370 <_localeconv_r+0x4>)
 801736e:	4770      	bx	lr
 8017370:	20000228 	.word	0x20000228

08017374 <_close_r>:
 8017374:	b538      	push	{r3, r4, r5, lr}
 8017376:	4d06      	ldr	r5, [pc, #24]	@ (8017390 <_close_r+0x1c>)
 8017378:	2300      	movs	r3, #0
 801737a:	4604      	mov	r4, r0
 801737c:	4608      	mov	r0, r1
 801737e:	602b      	str	r3, [r5, #0]
 8017380:	f7ee faa4 	bl	80058cc <_close>
 8017384:	1c43      	adds	r3, r0, #1
 8017386:	d102      	bne.n	801738e <_close_r+0x1a>
 8017388:	682b      	ldr	r3, [r5, #0]
 801738a:	b103      	cbz	r3, 801738e <_close_r+0x1a>
 801738c:	6023      	str	r3, [r4, #0]
 801738e:	bd38      	pop	{r3, r4, r5, pc}
 8017390:	20002e00 	.word	0x20002e00

08017394 <_lseek_r>:
 8017394:	b538      	push	{r3, r4, r5, lr}
 8017396:	4d07      	ldr	r5, [pc, #28]	@ (80173b4 <_lseek_r+0x20>)
 8017398:	4604      	mov	r4, r0
 801739a:	4608      	mov	r0, r1
 801739c:	4611      	mov	r1, r2
 801739e:	2200      	movs	r2, #0
 80173a0:	602a      	str	r2, [r5, #0]
 80173a2:	461a      	mov	r2, r3
 80173a4:	f7ee fab9 	bl	800591a <_lseek>
 80173a8:	1c43      	adds	r3, r0, #1
 80173aa:	d102      	bne.n	80173b2 <_lseek_r+0x1e>
 80173ac:	682b      	ldr	r3, [r5, #0]
 80173ae:	b103      	cbz	r3, 80173b2 <_lseek_r+0x1e>
 80173b0:	6023      	str	r3, [r4, #0]
 80173b2:	bd38      	pop	{r3, r4, r5, pc}
 80173b4:	20002e00 	.word	0x20002e00

080173b8 <_read_r>:
 80173b8:	b538      	push	{r3, r4, r5, lr}
 80173ba:	4d07      	ldr	r5, [pc, #28]	@ (80173d8 <_read_r+0x20>)
 80173bc:	4604      	mov	r4, r0
 80173be:	4608      	mov	r0, r1
 80173c0:	4611      	mov	r1, r2
 80173c2:	2200      	movs	r2, #0
 80173c4:	602a      	str	r2, [r5, #0]
 80173c6:	461a      	mov	r2, r3
 80173c8:	f7ee fa47 	bl	800585a <_read>
 80173cc:	1c43      	adds	r3, r0, #1
 80173ce:	d102      	bne.n	80173d6 <_read_r+0x1e>
 80173d0:	682b      	ldr	r3, [r5, #0]
 80173d2:	b103      	cbz	r3, 80173d6 <_read_r+0x1e>
 80173d4:	6023      	str	r3, [r4, #0]
 80173d6:	bd38      	pop	{r3, r4, r5, pc}
 80173d8:	20002e00 	.word	0x20002e00

080173dc <_sbrk_r>:
 80173dc:	b538      	push	{r3, r4, r5, lr}
 80173de:	4d06      	ldr	r5, [pc, #24]	@ (80173f8 <_sbrk_r+0x1c>)
 80173e0:	2300      	movs	r3, #0
 80173e2:	4604      	mov	r4, r0
 80173e4:	4608      	mov	r0, r1
 80173e6:	602b      	str	r3, [r5, #0]
 80173e8:	f7ee faa4 	bl	8005934 <_sbrk>
 80173ec:	1c43      	adds	r3, r0, #1
 80173ee:	d102      	bne.n	80173f6 <_sbrk_r+0x1a>
 80173f0:	682b      	ldr	r3, [r5, #0]
 80173f2:	b103      	cbz	r3, 80173f6 <_sbrk_r+0x1a>
 80173f4:	6023      	str	r3, [r4, #0]
 80173f6:	bd38      	pop	{r3, r4, r5, pc}
 80173f8:	20002e00 	.word	0x20002e00

080173fc <_write_r>:
 80173fc:	b538      	push	{r3, r4, r5, lr}
 80173fe:	4d07      	ldr	r5, [pc, #28]	@ (801741c <_write_r+0x20>)
 8017400:	4604      	mov	r4, r0
 8017402:	4608      	mov	r0, r1
 8017404:	4611      	mov	r1, r2
 8017406:	2200      	movs	r2, #0
 8017408:	602a      	str	r2, [r5, #0]
 801740a:	461a      	mov	r2, r3
 801740c:	f7ee fa42 	bl	8005894 <_write>
 8017410:	1c43      	adds	r3, r0, #1
 8017412:	d102      	bne.n	801741a <_write_r+0x1e>
 8017414:	682b      	ldr	r3, [r5, #0]
 8017416:	b103      	cbz	r3, 801741a <_write_r+0x1e>
 8017418:	6023      	str	r3, [r4, #0]
 801741a:	bd38      	pop	{r3, r4, r5, pc}
 801741c:	20002e00 	.word	0x20002e00

08017420 <__errno>:
 8017420:	4b01      	ldr	r3, [pc, #4]	@ (8017428 <__errno+0x8>)
 8017422:	6818      	ldr	r0, [r3, #0]
 8017424:	4770      	bx	lr
 8017426:	bf00      	nop
 8017428:	200002a4 	.word	0x200002a4

0801742c <__libc_init_array>:
 801742c:	b570      	push	{r4, r5, r6, lr}
 801742e:	4d0d      	ldr	r5, [pc, #52]	@ (8017464 <__libc_init_array+0x38>)
 8017430:	4c0d      	ldr	r4, [pc, #52]	@ (8017468 <__libc_init_array+0x3c>)
 8017432:	1b64      	subs	r4, r4, r5
 8017434:	10a4      	asrs	r4, r4, #2
 8017436:	2600      	movs	r6, #0
 8017438:	42a6      	cmp	r6, r4
 801743a:	d109      	bne.n	8017450 <__libc_init_array+0x24>
 801743c:	4d0b      	ldr	r5, [pc, #44]	@ (801746c <__libc_init_array+0x40>)
 801743e:	4c0c      	ldr	r4, [pc, #48]	@ (8017470 <__libc_init_array+0x44>)
 8017440:	f004 fb92 	bl	801bb68 <_init>
 8017444:	1b64      	subs	r4, r4, r5
 8017446:	10a4      	asrs	r4, r4, #2
 8017448:	2600      	movs	r6, #0
 801744a:	42a6      	cmp	r6, r4
 801744c:	d105      	bne.n	801745a <__libc_init_array+0x2e>
 801744e:	bd70      	pop	{r4, r5, r6, pc}
 8017450:	f855 3b04 	ldr.w	r3, [r5], #4
 8017454:	4798      	blx	r3
 8017456:	3601      	adds	r6, #1
 8017458:	e7ee      	b.n	8017438 <__libc_init_array+0xc>
 801745a:	f855 3b04 	ldr.w	r3, [r5], #4
 801745e:	4798      	blx	r3
 8017460:	3601      	adds	r6, #1
 8017462:	e7f2      	b.n	801744a <__libc_init_array+0x1e>
 8017464:	0801e640 	.word	0x0801e640
 8017468:	0801e640 	.word	0x0801e640
 801746c:	0801e640 	.word	0x0801e640
 8017470:	0801e644 	.word	0x0801e644

08017474 <__retarget_lock_init_recursive>:
 8017474:	4770      	bx	lr

08017476 <__retarget_lock_acquire_recursive>:
 8017476:	4770      	bx	lr

08017478 <__retarget_lock_release_recursive>:
 8017478:	4770      	bx	lr

0801747a <strcpy>:
 801747a:	4603      	mov	r3, r0
 801747c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017480:	f803 2b01 	strb.w	r2, [r3], #1
 8017484:	2a00      	cmp	r2, #0
 8017486:	d1f9      	bne.n	801747c <strcpy+0x2>
 8017488:	4770      	bx	lr

0801748a <memcpy>:
 801748a:	440a      	add	r2, r1
 801748c:	4291      	cmp	r1, r2
 801748e:	f100 33ff 	add.w	r3, r0, #4294967295
 8017492:	d100      	bne.n	8017496 <memcpy+0xc>
 8017494:	4770      	bx	lr
 8017496:	b510      	push	{r4, lr}
 8017498:	f811 4b01 	ldrb.w	r4, [r1], #1
 801749c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80174a0:	4291      	cmp	r1, r2
 80174a2:	d1f9      	bne.n	8017498 <memcpy+0xe>
 80174a4:	bd10      	pop	{r4, pc}
	...

080174a8 <nan>:
 80174a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80174b0 <nan+0x8>
 80174ac:	4770      	bx	lr
 80174ae:	bf00      	nop
 80174b0:	00000000 	.word	0x00000000
 80174b4:	7ff80000 	.word	0x7ff80000

080174b8 <nanf>:
 80174b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80174c0 <nanf+0x8>
 80174bc:	4770      	bx	lr
 80174be:	bf00      	nop
 80174c0:	7fc00000 	.word	0x7fc00000

080174c4 <__assert_func>:
 80174c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80174c6:	4614      	mov	r4, r2
 80174c8:	461a      	mov	r2, r3
 80174ca:	4b09      	ldr	r3, [pc, #36]	@ (80174f0 <__assert_func+0x2c>)
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	4605      	mov	r5, r0
 80174d0:	68d8      	ldr	r0, [r3, #12]
 80174d2:	b954      	cbnz	r4, 80174ea <__assert_func+0x26>
 80174d4:	4b07      	ldr	r3, [pc, #28]	@ (80174f4 <__assert_func+0x30>)
 80174d6:	461c      	mov	r4, r3
 80174d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80174dc:	9100      	str	r1, [sp, #0]
 80174de:	462b      	mov	r3, r5
 80174e0:	4905      	ldr	r1, [pc, #20]	@ (80174f8 <__assert_func+0x34>)
 80174e2:	f002 f8b1 	bl	8019648 <fiprintf>
 80174e6:	f002 f8db 	bl	80196a0 <abort>
 80174ea:	4b04      	ldr	r3, [pc, #16]	@ (80174fc <__assert_func+0x38>)
 80174ec:	e7f4      	b.n	80174d8 <__assert_func+0x14>
 80174ee:	bf00      	nop
 80174f0:	200002a4 	.word	0x200002a4
 80174f4:	0801e1fe 	.word	0x0801e1fe
 80174f8:	0801e1d0 	.word	0x0801e1d0
 80174fc:	0801e1c3 	.word	0x0801e1c3

08017500 <quorem>:
 8017500:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017504:	6903      	ldr	r3, [r0, #16]
 8017506:	690c      	ldr	r4, [r1, #16]
 8017508:	42a3      	cmp	r3, r4
 801750a:	4607      	mov	r7, r0
 801750c:	db7e      	blt.n	801760c <quorem+0x10c>
 801750e:	3c01      	subs	r4, #1
 8017510:	f101 0814 	add.w	r8, r1, #20
 8017514:	00a3      	lsls	r3, r4, #2
 8017516:	f100 0514 	add.w	r5, r0, #20
 801751a:	9300      	str	r3, [sp, #0]
 801751c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017520:	9301      	str	r3, [sp, #4]
 8017522:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017526:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801752a:	3301      	adds	r3, #1
 801752c:	429a      	cmp	r2, r3
 801752e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017532:	fbb2 f6f3 	udiv	r6, r2, r3
 8017536:	d32e      	bcc.n	8017596 <quorem+0x96>
 8017538:	f04f 0a00 	mov.w	sl, #0
 801753c:	46c4      	mov	ip, r8
 801753e:	46ae      	mov	lr, r5
 8017540:	46d3      	mov	fp, sl
 8017542:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017546:	b298      	uxth	r0, r3
 8017548:	fb06 a000 	mla	r0, r6, r0, sl
 801754c:	0c02      	lsrs	r2, r0, #16
 801754e:	0c1b      	lsrs	r3, r3, #16
 8017550:	fb06 2303 	mla	r3, r6, r3, r2
 8017554:	f8de 2000 	ldr.w	r2, [lr]
 8017558:	b280      	uxth	r0, r0
 801755a:	b292      	uxth	r2, r2
 801755c:	1a12      	subs	r2, r2, r0
 801755e:	445a      	add	r2, fp
 8017560:	f8de 0000 	ldr.w	r0, [lr]
 8017564:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017568:	b29b      	uxth	r3, r3
 801756a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801756e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8017572:	b292      	uxth	r2, r2
 8017574:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8017578:	45e1      	cmp	r9, ip
 801757a:	f84e 2b04 	str.w	r2, [lr], #4
 801757e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8017582:	d2de      	bcs.n	8017542 <quorem+0x42>
 8017584:	9b00      	ldr	r3, [sp, #0]
 8017586:	58eb      	ldr	r3, [r5, r3]
 8017588:	b92b      	cbnz	r3, 8017596 <quorem+0x96>
 801758a:	9b01      	ldr	r3, [sp, #4]
 801758c:	3b04      	subs	r3, #4
 801758e:	429d      	cmp	r5, r3
 8017590:	461a      	mov	r2, r3
 8017592:	d32f      	bcc.n	80175f4 <quorem+0xf4>
 8017594:	613c      	str	r4, [r7, #16]
 8017596:	4638      	mov	r0, r7
 8017598:	f001 fc58 	bl	8018e4c <__mcmp>
 801759c:	2800      	cmp	r0, #0
 801759e:	db25      	blt.n	80175ec <quorem+0xec>
 80175a0:	4629      	mov	r1, r5
 80175a2:	2000      	movs	r0, #0
 80175a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80175a8:	f8d1 c000 	ldr.w	ip, [r1]
 80175ac:	fa1f fe82 	uxth.w	lr, r2
 80175b0:	fa1f f38c 	uxth.w	r3, ip
 80175b4:	eba3 030e 	sub.w	r3, r3, lr
 80175b8:	4403      	add	r3, r0
 80175ba:	0c12      	lsrs	r2, r2, #16
 80175bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80175c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80175c4:	b29b      	uxth	r3, r3
 80175c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80175ca:	45c1      	cmp	r9, r8
 80175cc:	f841 3b04 	str.w	r3, [r1], #4
 80175d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80175d4:	d2e6      	bcs.n	80175a4 <quorem+0xa4>
 80175d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80175da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80175de:	b922      	cbnz	r2, 80175ea <quorem+0xea>
 80175e0:	3b04      	subs	r3, #4
 80175e2:	429d      	cmp	r5, r3
 80175e4:	461a      	mov	r2, r3
 80175e6:	d30b      	bcc.n	8017600 <quorem+0x100>
 80175e8:	613c      	str	r4, [r7, #16]
 80175ea:	3601      	adds	r6, #1
 80175ec:	4630      	mov	r0, r6
 80175ee:	b003      	add	sp, #12
 80175f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f4:	6812      	ldr	r2, [r2, #0]
 80175f6:	3b04      	subs	r3, #4
 80175f8:	2a00      	cmp	r2, #0
 80175fa:	d1cb      	bne.n	8017594 <quorem+0x94>
 80175fc:	3c01      	subs	r4, #1
 80175fe:	e7c6      	b.n	801758e <quorem+0x8e>
 8017600:	6812      	ldr	r2, [r2, #0]
 8017602:	3b04      	subs	r3, #4
 8017604:	2a00      	cmp	r2, #0
 8017606:	d1ef      	bne.n	80175e8 <quorem+0xe8>
 8017608:	3c01      	subs	r4, #1
 801760a:	e7ea      	b.n	80175e2 <quorem+0xe2>
 801760c:	2000      	movs	r0, #0
 801760e:	e7ee      	b.n	80175ee <quorem+0xee>

08017610 <_dtoa_r>:
 8017610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017614:	69c7      	ldr	r7, [r0, #28]
 8017616:	b099      	sub	sp, #100	@ 0x64
 8017618:	ed8d 0b02 	vstr	d0, [sp, #8]
 801761c:	ec55 4b10 	vmov	r4, r5, d0
 8017620:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8017622:	9109      	str	r1, [sp, #36]	@ 0x24
 8017624:	4683      	mov	fp, r0
 8017626:	920e      	str	r2, [sp, #56]	@ 0x38
 8017628:	9313      	str	r3, [sp, #76]	@ 0x4c
 801762a:	b97f      	cbnz	r7, 801764c <_dtoa_r+0x3c>
 801762c:	2010      	movs	r0, #16
 801762e:	f7fd fe99 	bl	8015364 <malloc>
 8017632:	4602      	mov	r2, r0
 8017634:	f8cb 001c 	str.w	r0, [fp, #28]
 8017638:	b920      	cbnz	r0, 8017644 <_dtoa_r+0x34>
 801763a:	4ba7      	ldr	r3, [pc, #668]	@ (80178d8 <_dtoa_r+0x2c8>)
 801763c:	21ef      	movs	r1, #239	@ 0xef
 801763e:	48a7      	ldr	r0, [pc, #668]	@ (80178dc <_dtoa_r+0x2cc>)
 8017640:	f7ff ff40 	bl	80174c4 <__assert_func>
 8017644:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8017648:	6007      	str	r7, [r0, #0]
 801764a:	60c7      	str	r7, [r0, #12]
 801764c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017650:	6819      	ldr	r1, [r3, #0]
 8017652:	b159      	cbz	r1, 801766c <_dtoa_r+0x5c>
 8017654:	685a      	ldr	r2, [r3, #4]
 8017656:	604a      	str	r2, [r1, #4]
 8017658:	2301      	movs	r3, #1
 801765a:	4093      	lsls	r3, r2
 801765c:	608b      	str	r3, [r1, #8]
 801765e:	4658      	mov	r0, fp
 8017660:	f001 f970 	bl	8018944 <_Bfree>
 8017664:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017668:	2200      	movs	r2, #0
 801766a:	601a      	str	r2, [r3, #0]
 801766c:	1e2b      	subs	r3, r5, #0
 801766e:	bfb9      	ittee	lt
 8017670:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8017674:	9303      	strlt	r3, [sp, #12]
 8017676:	2300      	movge	r3, #0
 8017678:	6033      	strge	r3, [r6, #0]
 801767a:	9f03      	ldr	r7, [sp, #12]
 801767c:	4b98      	ldr	r3, [pc, #608]	@ (80178e0 <_dtoa_r+0x2d0>)
 801767e:	bfbc      	itt	lt
 8017680:	2201      	movlt	r2, #1
 8017682:	6032      	strlt	r2, [r6, #0]
 8017684:	43bb      	bics	r3, r7
 8017686:	d112      	bne.n	80176ae <_dtoa_r+0x9e>
 8017688:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801768a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801768e:	6013      	str	r3, [r2, #0]
 8017690:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017694:	4323      	orrs	r3, r4
 8017696:	f000 854d 	beq.w	8018134 <_dtoa_r+0xb24>
 801769a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801769c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80178f4 <_dtoa_r+0x2e4>
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	f000 854f 	beq.w	8018144 <_dtoa_r+0xb34>
 80176a6:	f10a 0303 	add.w	r3, sl, #3
 80176aa:	f000 bd49 	b.w	8018140 <_dtoa_r+0xb30>
 80176ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80176b2:	2200      	movs	r2, #0
 80176b4:	ec51 0b17 	vmov	r0, r1, d7
 80176b8:	2300      	movs	r3, #0
 80176ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80176be:	f7e9 f9db 	bl	8000a78 <__aeabi_dcmpeq>
 80176c2:	4680      	mov	r8, r0
 80176c4:	b158      	cbz	r0, 80176de <_dtoa_r+0xce>
 80176c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80176c8:	2301      	movs	r3, #1
 80176ca:	6013      	str	r3, [r2, #0]
 80176cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80176ce:	b113      	cbz	r3, 80176d6 <_dtoa_r+0xc6>
 80176d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80176d2:	4b84      	ldr	r3, [pc, #528]	@ (80178e4 <_dtoa_r+0x2d4>)
 80176d4:	6013      	str	r3, [r2, #0]
 80176d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80178f8 <_dtoa_r+0x2e8>
 80176da:	f000 bd33 	b.w	8018144 <_dtoa_r+0xb34>
 80176de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80176e2:	aa16      	add	r2, sp, #88	@ 0x58
 80176e4:	a917      	add	r1, sp, #92	@ 0x5c
 80176e6:	4658      	mov	r0, fp
 80176e8:	f001 fcd0 	bl	801908c <__d2b>
 80176ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80176f0:	4681      	mov	r9, r0
 80176f2:	2e00      	cmp	r6, #0
 80176f4:	d077      	beq.n	80177e6 <_dtoa_r+0x1d6>
 80176f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80176f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80176fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017704:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8017708:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801770c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8017710:	4619      	mov	r1, r3
 8017712:	2200      	movs	r2, #0
 8017714:	4b74      	ldr	r3, [pc, #464]	@ (80178e8 <_dtoa_r+0x2d8>)
 8017716:	f7e8 fd8f 	bl	8000238 <__aeabi_dsub>
 801771a:	a369      	add	r3, pc, #420	@ (adr r3, 80178c0 <_dtoa_r+0x2b0>)
 801771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017720:	f7e8 ff42 	bl	80005a8 <__aeabi_dmul>
 8017724:	a368      	add	r3, pc, #416	@ (adr r3, 80178c8 <_dtoa_r+0x2b8>)
 8017726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801772a:	f7e8 fd87 	bl	800023c <__adddf3>
 801772e:	4604      	mov	r4, r0
 8017730:	4630      	mov	r0, r6
 8017732:	460d      	mov	r5, r1
 8017734:	f7e8 fece 	bl	80004d4 <__aeabi_i2d>
 8017738:	a365      	add	r3, pc, #404	@ (adr r3, 80178d0 <_dtoa_r+0x2c0>)
 801773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801773e:	f7e8 ff33 	bl	80005a8 <__aeabi_dmul>
 8017742:	4602      	mov	r2, r0
 8017744:	460b      	mov	r3, r1
 8017746:	4620      	mov	r0, r4
 8017748:	4629      	mov	r1, r5
 801774a:	f7e8 fd77 	bl	800023c <__adddf3>
 801774e:	4604      	mov	r4, r0
 8017750:	460d      	mov	r5, r1
 8017752:	f7e9 f9d9 	bl	8000b08 <__aeabi_d2iz>
 8017756:	2200      	movs	r2, #0
 8017758:	4607      	mov	r7, r0
 801775a:	2300      	movs	r3, #0
 801775c:	4620      	mov	r0, r4
 801775e:	4629      	mov	r1, r5
 8017760:	f7e9 f994 	bl	8000a8c <__aeabi_dcmplt>
 8017764:	b140      	cbz	r0, 8017778 <_dtoa_r+0x168>
 8017766:	4638      	mov	r0, r7
 8017768:	f7e8 feb4 	bl	80004d4 <__aeabi_i2d>
 801776c:	4622      	mov	r2, r4
 801776e:	462b      	mov	r3, r5
 8017770:	f7e9 f982 	bl	8000a78 <__aeabi_dcmpeq>
 8017774:	b900      	cbnz	r0, 8017778 <_dtoa_r+0x168>
 8017776:	3f01      	subs	r7, #1
 8017778:	2f16      	cmp	r7, #22
 801777a:	d851      	bhi.n	8017820 <_dtoa_r+0x210>
 801777c:	4b5b      	ldr	r3, [pc, #364]	@ (80178ec <_dtoa_r+0x2dc>)
 801777e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801778a:	f7e9 f97f 	bl	8000a8c <__aeabi_dcmplt>
 801778e:	2800      	cmp	r0, #0
 8017790:	d048      	beq.n	8017824 <_dtoa_r+0x214>
 8017792:	3f01      	subs	r7, #1
 8017794:	2300      	movs	r3, #0
 8017796:	9312      	str	r3, [sp, #72]	@ 0x48
 8017798:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801779a:	1b9b      	subs	r3, r3, r6
 801779c:	1e5a      	subs	r2, r3, #1
 801779e:	bf44      	itt	mi
 80177a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80177a4:	2300      	movmi	r3, #0
 80177a6:	9208      	str	r2, [sp, #32]
 80177a8:	bf54      	ite	pl
 80177aa:	f04f 0800 	movpl.w	r8, #0
 80177ae:	9308      	strmi	r3, [sp, #32]
 80177b0:	2f00      	cmp	r7, #0
 80177b2:	db39      	blt.n	8017828 <_dtoa_r+0x218>
 80177b4:	9b08      	ldr	r3, [sp, #32]
 80177b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80177b8:	443b      	add	r3, r7
 80177ba:	9308      	str	r3, [sp, #32]
 80177bc:	2300      	movs	r3, #0
 80177be:	930a      	str	r3, [sp, #40]	@ 0x28
 80177c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177c2:	2b09      	cmp	r3, #9
 80177c4:	d864      	bhi.n	8017890 <_dtoa_r+0x280>
 80177c6:	2b05      	cmp	r3, #5
 80177c8:	bfc4      	itt	gt
 80177ca:	3b04      	subgt	r3, #4
 80177cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80177ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177d0:	f1a3 0302 	sub.w	r3, r3, #2
 80177d4:	bfcc      	ite	gt
 80177d6:	2400      	movgt	r4, #0
 80177d8:	2401      	movle	r4, #1
 80177da:	2b03      	cmp	r3, #3
 80177dc:	d863      	bhi.n	80178a6 <_dtoa_r+0x296>
 80177de:	e8df f003 	tbb	[pc, r3]
 80177e2:	372a      	.short	0x372a
 80177e4:	5535      	.short	0x5535
 80177e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80177ea:	441e      	add	r6, r3
 80177ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80177f0:	2b20      	cmp	r3, #32
 80177f2:	bfc1      	itttt	gt
 80177f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80177f8:	409f      	lslgt	r7, r3
 80177fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80177fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8017802:	bfd6      	itet	le
 8017804:	f1c3 0320 	rsble	r3, r3, #32
 8017808:	ea47 0003 	orrgt.w	r0, r7, r3
 801780c:	fa04 f003 	lslle.w	r0, r4, r3
 8017810:	f7e8 fe50 	bl	80004b4 <__aeabi_ui2d>
 8017814:	2201      	movs	r2, #1
 8017816:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801781a:	3e01      	subs	r6, #1
 801781c:	9214      	str	r2, [sp, #80]	@ 0x50
 801781e:	e777      	b.n	8017710 <_dtoa_r+0x100>
 8017820:	2301      	movs	r3, #1
 8017822:	e7b8      	b.n	8017796 <_dtoa_r+0x186>
 8017824:	9012      	str	r0, [sp, #72]	@ 0x48
 8017826:	e7b7      	b.n	8017798 <_dtoa_r+0x188>
 8017828:	427b      	negs	r3, r7
 801782a:	930a      	str	r3, [sp, #40]	@ 0x28
 801782c:	2300      	movs	r3, #0
 801782e:	eba8 0807 	sub.w	r8, r8, r7
 8017832:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017834:	e7c4      	b.n	80177c0 <_dtoa_r+0x1b0>
 8017836:	2300      	movs	r3, #0
 8017838:	930b      	str	r3, [sp, #44]	@ 0x2c
 801783a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801783c:	2b00      	cmp	r3, #0
 801783e:	dc35      	bgt.n	80178ac <_dtoa_r+0x29c>
 8017840:	2301      	movs	r3, #1
 8017842:	9300      	str	r3, [sp, #0]
 8017844:	9307      	str	r3, [sp, #28]
 8017846:	461a      	mov	r2, r3
 8017848:	920e      	str	r2, [sp, #56]	@ 0x38
 801784a:	e00b      	b.n	8017864 <_dtoa_r+0x254>
 801784c:	2301      	movs	r3, #1
 801784e:	e7f3      	b.n	8017838 <_dtoa_r+0x228>
 8017850:	2300      	movs	r3, #0
 8017852:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017856:	18fb      	adds	r3, r7, r3
 8017858:	9300      	str	r3, [sp, #0]
 801785a:	3301      	adds	r3, #1
 801785c:	2b01      	cmp	r3, #1
 801785e:	9307      	str	r3, [sp, #28]
 8017860:	bfb8      	it	lt
 8017862:	2301      	movlt	r3, #1
 8017864:	f8db 001c 	ldr.w	r0, [fp, #28]
 8017868:	2100      	movs	r1, #0
 801786a:	2204      	movs	r2, #4
 801786c:	f102 0514 	add.w	r5, r2, #20
 8017870:	429d      	cmp	r5, r3
 8017872:	d91f      	bls.n	80178b4 <_dtoa_r+0x2a4>
 8017874:	6041      	str	r1, [r0, #4]
 8017876:	4658      	mov	r0, fp
 8017878:	f001 f824 	bl	80188c4 <_Balloc>
 801787c:	4682      	mov	sl, r0
 801787e:	2800      	cmp	r0, #0
 8017880:	d13c      	bne.n	80178fc <_dtoa_r+0x2ec>
 8017882:	4b1b      	ldr	r3, [pc, #108]	@ (80178f0 <_dtoa_r+0x2e0>)
 8017884:	4602      	mov	r2, r0
 8017886:	f240 11af 	movw	r1, #431	@ 0x1af
 801788a:	e6d8      	b.n	801763e <_dtoa_r+0x2e>
 801788c:	2301      	movs	r3, #1
 801788e:	e7e0      	b.n	8017852 <_dtoa_r+0x242>
 8017890:	2401      	movs	r4, #1
 8017892:	2300      	movs	r3, #0
 8017894:	9309      	str	r3, [sp, #36]	@ 0x24
 8017896:	940b      	str	r4, [sp, #44]	@ 0x2c
 8017898:	f04f 33ff 	mov.w	r3, #4294967295
 801789c:	9300      	str	r3, [sp, #0]
 801789e:	9307      	str	r3, [sp, #28]
 80178a0:	2200      	movs	r2, #0
 80178a2:	2312      	movs	r3, #18
 80178a4:	e7d0      	b.n	8017848 <_dtoa_r+0x238>
 80178a6:	2301      	movs	r3, #1
 80178a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80178aa:	e7f5      	b.n	8017898 <_dtoa_r+0x288>
 80178ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80178ae:	9300      	str	r3, [sp, #0]
 80178b0:	9307      	str	r3, [sp, #28]
 80178b2:	e7d7      	b.n	8017864 <_dtoa_r+0x254>
 80178b4:	3101      	adds	r1, #1
 80178b6:	0052      	lsls	r2, r2, #1
 80178b8:	e7d8      	b.n	801786c <_dtoa_r+0x25c>
 80178ba:	bf00      	nop
 80178bc:	f3af 8000 	nop.w
 80178c0:	636f4361 	.word	0x636f4361
 80178c4:	3fd287a7 	.word	0x3fd287a7
 80178c8:	8b60c8b3 	.word	0x8b60c8b3
 80178cc:	3fc68a28 	.word	0x3fc68a28
 80178d0:	509f79fb 	.word	0x509f79fb
 80178d4:	3fd34413 	.word	0x3fd34413
 80178d8:	0801e14a 	.word	0x0801e14a
 80178dc:	0801e20c 	.word	0x0801e20c
 80178e0:	7ff00000 	.word	0x7ff00000
 80178e4:	0801e122 	.word	0x0801e122
 80178e8:	3ff80000 	.word	0x3ff80000
 80178ec:	0801e368 	.word	0x0801e368
 80178f0:	0801e264 	.word	0x0801e264
 80178f4:	0801e208 	.word	0x0801e208
 80178f8:	0801e121 	.word	0x0801e121
 80178fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8017900:	6018      	str	r0, [r3, #0]
 8017902:	9b07      	ldr	r3, [sp, #28]
 8017904:	2b0e      	cmp	r3, #14
 8017906:	f200 80a4 	bhi.w	8017a52 <_dtoa_r+0x442>
 801790a:	2c00      	cmp	r4, #0
 801790c:	f000 80a1 	beq.w	8017a52 <_dtoa_r+0x442>
 8017910:	2f00      	cmp	r7, #0
 8017912:	dd33      	ble.n	801797c <_dtoa_r+0x36c>
 8017914:	4bad      	ldr	r3, [pc, #692]	@ (8017bcc <_dtoa_r+0x5bc>)
 8017916:	f007 020f 	and.w	r2, r7, #15
 801791a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801791e:	ed93 7b00 	vldr	d7, [r3]
 8017922:	05f8      	lsls	r0, r7, #23
 8017924:	ed8d 7b04 	vstr	d7, [sp, #16]
 8017928:	ea4f 1427 	mov.w	r4, r7, asr #4
 801792c:	d516      	bpl.n	801795c <_dtoa_r+0x34c>
 801792e:	4ba8      	ldr	r3, [pc, #672]	@ (8017bd0 <_dtoa_r+0x5c0>)
 8017930:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017938:	f7e8 ff60 	bl	80007fc <__aeabi_ddiv>
 801793c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017940:	f004 040f 	and.w	r4, r4, #15
 8017944:	2603      	movs	r6, #3
 8017946:	4da2      	ldr	r5, [pc, #648]	@ (8017bd0 <_dtoa_r+0x5c0>)
 8017948:	b954      	cbnz	r4, 8017960 <_dtoa_r+0x350>
 801794a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801794e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017952:	f7e8 ff53 	bl	80007fc <__aeabi_ddiv>
 8017956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801795a:	e028      	b.n	80179ae <_dtoa_r+0x39e>
 801795c:	2602      	movs	r6, #2
 801795e:	e7f2      	b.n	8017946 <_dtoa_r+0x336>
 8017960:	07e1      	lsls	r1, r4, #31
 8017962:	d508      	bpl.n	8017976 <_dtoa_r+0x366>
 8017964:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017968:	e9d5 2300 	ldrd	r2, r3, [r5]
 801796c:	f7e8 fe1c 	bl	80005a8 <__aeabi_dmul>
 8017970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017974:	3601      	adds	r6, #1
 8017976:	1064      	asrs	r4, r4, #1
 8017978:	3508      	adds	r5, #8
 801797a:	e7e5      	b.n	8017948 <_dtoa_r+0x338>
 801797c:	f000 80d2 	beq.w	8017b24 <_dtoa_r+0x514>
 8017980:	427c      	negs	r4, r7
 8017982:	4b92      	ldr	r3, [pc, #584]	@ (8017bcc <_dtoa_r+0x5bc>)
 8017984:	4d92      	ldr	r5, [pc, #584]	@ (8017bd0 <_dtoa_r+0x5c0>)
 8017986:	f004 020f 	and.w	r2, r4, #15
 801798a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017992:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8017996:	f7e8 fe07 	bl	80005a8 <__aeabi_dmul>
 801799a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801799e:	1124      	asrs	r4, r4, #4
 80179a0:	2300      	movs	r3, #0
 80179a2:	2602      	movs	r6, #2
 80179a4:	2c00      	cmp	r4, #0
 80179a6:	f040 80b2 	bne.w	8017b0e <_dtoa_r+0x4fe>
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d1d3      	bne.n	8017956 <_dtoa_r+0x346>
 80179ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80179b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	f000 80b7 	beq.w	8017b28 <_dtoa_r+0x518>
 80179ba:	4b86      	ldr	r3, [pc, #536]	@ (8017bd4 <_dtoa_r+0x5c4>)
 80179bc:	2200      	movs	r2, #0
 80179be:	4620      	mov	r0, r4
 80179c0:	4629      	mov	r1, r5
 80179c2:	f7e9 f863 	bl	8000a8c <__aeabi_dcmplt>
 80179c6:	2800      	cmp	r0, #0
 80179c8:	f000 80ae 	beq.w	8017b28 <_dtoa_r+0x518>
 80179cc:	9b07      	ldr	r3, [sp, #28]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	f000 80aa 	beq.w	8017b28 <_dtoa_r+0x518>
 80179d4:	9b00      	ldr	r3, [sp, #0]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	dd37      	ble.n	8017a4a <_dtoa_r+0x43a>
 80179da:	1e7b      	subs	r3, r7, #1
 80179dc:	9304      	str	r3, [sp, #16]
 80179de:	4620      	mov	r0, r4
 80179e0:	4b7d      	ldr	r3, [pc, #500]	@ (8017bd8 <_dtoa_r+0x5c8>)
 80179e2:	2200      	movs	r2, #0
 80179e4:	4629      	mov	r1, r5
 80179e6:	f7e8 fddf 	bl	80005a8 <__aeabi_dmul>
 80179ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80179ee:	9c00      	ldr	r4, [sp, #0]
 80179f0:	3601      	adds	r6, #1
 80179f2:	4630      	mov	r0, r6
 80179f4:	f7e8 fd6e 	bl	80004d4 <__aeabi_i2d>
 80179f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80179fc:	f7e8 fdd4 	bl	80005a8 <__aeabi_dmul>
 8017a00:	4b76      	ldr	r3, [pc, #472]	@ (8017bdc <_dtoa_r+0x5cc>)
 8017a02:	2200      	movs	r2, #0
 8017a04:	f7e8 fc1a 	bl	800023c <__adddf3>
 8017a08:	4605      	mov	r5, r0
 8017a0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8017a0e:	2c00      	cmp	r4, #0
 8017a10:	f040 808d 	bne.w	8017b2e <_dtoa_r+0x51e>
 8017a14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017a18:	4b71      	ldr	r3, [pc, #452]	@ (8017be0 <_dtoa_r+0x5d0>)
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	f7e8 fc0c 	bl	8000238 <__aeabi_dsub>
 8017a20:	4602      	mov	r2, r0
 8017a22:	460b      	mov	r3, r1
 8017a24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017a28:	462a      	mov	r2, r5
 8017a2a:	4633      	mov	r3, r6
 8017a2c:	f7e9 f84c 	bl	8000ac8 <__aeabi_dcmpgt>
 8017a30:	2800      	cmp	r0, #0
 8017a32:	f040 828b 	bne.w	8017f4c <_dtoa_r+0x93c>
 8017a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017a3a:	462a      	mov	r2, r5
 8017a3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017a40:	f7e9 f824 	bl	8000a8c <__aeabi_dcmplt>
 8017a44:	2800      	cmp	r0, #0
 8017a46:	f040 8128 	bne.w	8017c9a <_dtoa_r+0x68a>
 8017a4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8017a4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017a52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	f2c0 815a 	blt.w	8017d0e <_dtoa_r+0x6fe>
 8017a5a:	2f0e      	cmp	r7, #14
 8017a5c:	f300 8157 	bgt.w	8017d0e <_dtoa_r+0x6fe>
 8017a60:	4b5a      	ldr	r3, [pc, #360]	@ (8017bcc <_dtoa_r+0x5bc>)
 8017a62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017a66:	ed93 7b00 	vldr	d7, [r3]
 8017a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	ed8d 7b00 	vstr	d7, [sp]
 8017a72:	da03      	bge.n	8017a7c <_dtoa_r+0x46c>
 8017a74:	9b07      	ldr	r3, [sp, #28]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	f340 8101 	ble.w	8017c7e <_dtoa_r+0x66e>
 8017a7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8017a80:	4656      	mov	r6, sl
 8017a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a86:	4620      	mov	r0, r4
 8017a88:	4629      	mov	r1, r5
 8017a8a:	f7e8 feb7 	bl	80007fc <__aeabi_ddiv>
 8017a8e:	f7e9 f83b 	bl	8000b08 <__aeabi_d2iz>
 8017a92:	4680      	mov	r8, r0
 8017a94:	f7e8 fd1e 	bl	80004d4 <__aeabi_i2d>
 8017a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a9c:	f7e8 fd84 	bl	80005a8 <__aeabi_dmul>
 8017aa0:	4602      	mov	r2, r0
 8017aa2:	460b      	mov	r3, r1
 8017aa4:	4620      	mov	r0, r4
 8017aa6:	4629      	mov	r1, r5
 8017aa8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8017aac:	f7e8 fbc4 	bl	8000238 <__aeabi_dsub>
 8017ab0:	f806 4b01 	strb.w	r4, [r6], #1
 8017ab4:	9d07      	ldr	r5, [sp, #28]
 8017ab6:	eba6 040a 	sub.w	r4, r6, sl
 8017aba:	42a5      	cmp	r5, r4
 8017abc:	4602      	mov	r2, r0
 8017abe:	460b      	mov	r3, r1
 8017ac0:	f040 8117 	bne.w	8017cf2 <_dtoa_r+0x6e2>
 8017ac4:	f7e8 fbba 	bl	800023c <__adddf3>
 8017ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017acc:	4604      	mov	r4, r0
 8017ace:	460d      	mov	r5, r1
 8017ad0:	f7e8 fffa 	bl	8000ac8 <__aeabi_dcmpgt>
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	f040 80f9 	bne.w	8017ccc <_dtoa_r+0x6bc>
 8017ada:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017ade:	4620      	mov	r0, r4
 8017ae0:	4629      	mov	r1, r5
 8017ae2:	f7e8 ffc9 	bl	8000a78 <__aeabi_dcmpeq>
 8017ae6:	b118      	cbz	r0, 8017af0 <_dtoa_r+0x4e0>
 8017ae8:	f018 0f01 	tst.w	r8, #1
 8017aec:	f040 80ee 	bne.w	8017ccc <_dtoa_r+0x6bc>
 8017af0:	4649      	mov	r1, r9
 8017af2:	4658      	mov	r0, fp
 8017af4:	f000 ff26 	bl	8018944 <_Bfree>
 8017af8:	2300      	movs	r3, #0
 8017afa:	7033      	strb	r3, [r6, #0]
 8017afc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017afe:	3701      	adds	r7, #1
 8017b00:	601f      	str	r7, [r3, #0]
 8017b02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	f000 831d 	beq.w	8018144 <_dtoa_r+0xb34>
 8017b0a:	601e      	str	r6, [r3, #0]
 8017b0c:	e31a      	b.n	8018144 <_dtoa_r+0xb34>
 8017b0e:	07e2      	lsls	r2, r4, #31
 8017b10:	d505      	bpl.n	8017b1e <_dtoa_r+0x50e>
 8017b12:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017b16:	f7e8 fd47 	bl	80005a8 <__aeabi_dmul>
 8017b1a:	3601      	adds	r6, #1
 8017b1c:	2301      	movs	r3, #1
 8017b1e:	1064      	asrs	r4, r4, #1
 8017b20:	3508      	adds	r5, #8
 8017b22:	e73f      	b.n	80179a4 <_dtoa_r+0x394>
 8017b24:	2602      	movs	r6, #2
 8017b26:	e742      	b.n	80179ae <_dtoa_r+0x39e>
 8017b28:	9c07      	ldr	r4, [sp, #28]
 8017b2a:	9704      	str	r7, [sp, #16]
 8017b2c:	e761      	b.n	80179f2 <_dtoa_r+0x3e2>
 8017b2e:	4b27      	ldr	r3, [pc, #156]	@ (8017bcc <_dtoa_r+0x5bc>)
 8017b30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8017b32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017b36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017b3a:	4454      	add	r4, sl
 8017b3c:	2900      	cmp	r1, #0
 8017b3e:	d053      	beq.n	8017be8 <_dtoa_r+0x5d8>
 8017b40:	4928      	ldr	r1, [pc, #160]	@ (8017be4 <_dtoa_r+0x5d4>)
 8017b42:	2000      	movs	r0, #0
 8017b44:	f7e8 fe5a 	bl	80007fc <__aeabi_ddiv>
 8017b48:	4633      	mov	r3, r6
 8017b4a:	462a      	mov	r2, r5
 8017b4c:	f7e8 fb74 	bl	8000238 <__aeabi_dsub>
 8017b50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017b54:	4656      	mov	r6, sl
 8017b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017b5a:	f7e8 ffd5 	bl	8000b08 <__aeabi_d2iz>
 8017b5e:	4605      	mov	r5, r0
 8017b60:	f7e8 fcb8 	bl	80004d4 <__aeabi_i2d>
 8017b64:	4602      	mov	r2, r0
 8017b66:	460b      	mov	r3, r1
 8017b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017b6c:	f7e8 fb64 	bl	8000238 <__aeabi_dsub>
 8017b70:	3530      	adds	r5, #48	@ 0x30
 8017b72:	4602      	mov	r2, r0
 8017b74:	460b      	mov	r3, r1
 8017b76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017b7a:	f806 5b01 	strb.w	r5, [r6], #1
 8017b7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017b82:	f7e8 ff83 	bl	8000a8c <__aeabi_dcmplt>
 8017b86:	2800      	cmp	r0, #0
 8017b88:	d171      	bne.n	8017c6e <_dtoa_r+0x65e>
 8017b8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b8e:	4911      	ldr	r1, [pc, #68]	@ (8017bd4 <_dtoa_r+0x5c4>)
 8017b90:	2000      	movs	r0, #0
 8017b92:	f7e8 fb51 	bl	8000238 <__aeabi_dsub>
 8017b96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017b9a:	f7e8 ff77 	bl	8000a8c <__aeabi_dcmplt>
 8017b9e:	2800      	cmp	r0, #0
 8017ba0:	f040 8095 	bne.w	8017cce <_dtoa_r+0x6be>
 8017ba4:	42a6      	cmp	r6, r4
 8017ba6:	f43f af50 	beq.w	8017a4a <_dtoa_r+0x43a>
 8017baa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017bae:	4b0a      	ldr	r3, [pc, #40]	@ (8017bd8 <_dtoa_r+0x5c8>)
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	f7e8 fcf9 	bl	80005a8 <__aeabi_dmul>
 8017bb6:	4b08      	ldr	r3, [pc, #32]	@ (8017bd8 <_dtoa_r+0x5c8>)
 8017bb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017bbc:	2200      	movs	r2, #0
 8017bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017bc2:	f7e8 fcf1 	bl	80005a8 <__aeabi_dmul>
 8017bc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017bca:	e7c4      	b.n	8017b56 <_dtoa_r+0x546>
 8017bcc:	0801e368 	.word	0x0801e368
 8017bd0:	0801e340 	.word	0x0801e340
 8017bd4:	3ff00000 	.word	0x3ff00000
 8017bd8:	40240000 	.word	0x40240000
 8017bdc:	401c0000 	.word	0x401c0000
 8017be0:	40140000 	.word	0x40140000
 8017be4:	3fe00000 	.word	0x3fe00000
 8017be8:	4631      	mov	r1, r6
 8017bea:	4628      	mov	r0, r5
 8017bec:	f7e8 fcdc 	bl	80005a8 <__aeabi_dmul>
 8017bf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8017bf4:	9415      	str	r4, [sp, #84]	@ 0x54
 8017bf6:	4656      	mov	r6, sl
 8017bf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017bfc:	f7e8 ff84 	bl	8000b08 <__aeabi_d2iz>
 8017c00:	4605      	mov	r5, r0
 8017c02:	f7e8 fc67 	bl	80004d4 <__aeabi_i2d>
 8017c06:	4602      	mov	r2, r0
 8017c08:	460b      	mov	r3, r1
 8017c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c0e:	f7e8 fb13 	bl	8000238 <__aeabi_dsub>
 8017c12:	3530      	adds	r5, #48	@ 0x30
 8017c14:	f806 5b01 	strb.w	r5, [r6], #1
 8017c18:	4602      	mov	r2, r0
 8017c1a:	460b      	mov	r3, r1
 8017c1c:	42a6      	cmp	r6, r4
 8017c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017c22:	f04f 0200 	mov.w	r2, #0
 8017c26:	d124      	bne.n	8017c72 <_dtoa_r+0x662>
 8017c28:	4bac      	ldr	r3, [pc, #688]	@ (8017edc <_dtoa_r+0x8cc>)
 8017c2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8017c2e:	f7e8 fb05 	bl	800023c <__adddf3>
 8017c32:	4602      	mov	r2, r0
 8017c34:	460b      	mov	r3, r1
 8017c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c3a:	f7e8 ff45 	bl	8000ac8 <__aeabi_dcmpgt>
 8017c3e:	2800      	cmp	r0, #0
 8017c40:	d145      	bne.n	8017cce <_dtoa_r+0x6be>
 8017c42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8017c46:	49a5      	ldr	r1, [pc, #660]	@ (8017edc <_dtoa_r+0x8cc>)
 8017c48:	2000      	movs	r0, #0
 8017c4a:	f7e8 faf5 	bl	8000238 <__aeabi_dsub>
 8017c4e:	4602      	mov	r2, r0
 8017c50:	460b      	mov	r3, r1
 8017c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c56:	f7e8 ff19 	bl	8000a8c <__aeabi_dcmplt>
 8017c5a:	2800      	cmp	r0, #0
 8017c5c:	f43f aef5 	beq.w	8017a4a <_dtoa_r+0x43a>
 8017c60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8017c62:	1e73      	subs	r3, r6, #1
 8017c64:	9315      	str	r3, [sp, #84]	@ 0x54
 8017c66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017c6a:	2b30      	cmp	r3, #48	@ 0x30
 8017c6c:	d0f8      	beq.n	8017c60 <_dtoa_r+0x650>
 8017c6e:	9f04      	ldr	r7, [sp, #16]
 8017c70:	e73e      	b.n	8017af0 <_dtoa_r+0x4e0>
 8017c72:	4b9b      	ldr	r3, [pc, #620]	@ (8017ee0 <_dtoa_r+0x8d0>)
 8017c74:	f7e8 fc98 	bl	80005a8 <__aeabi_dmul>
 8017c78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c7c:	e7bc      	b.n	8017bf8 <_dtoa_r+0x5e8>
 8017c7e:	d10c      	bne.n	8017c9a <_dtoa_r+0x68a>
 8017c80:	4b98      	ldr	r3, [pc, #608]	@ (8017ee4 <_dtoa_r+0x8d4>)
 8017c82:	2200      	movs	r2, #0
 8017c84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017c88:	f7e8 fc8e 	bl	80005a8 <__aeabi_dmul>
 8017c8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017c90:	f7e8 ff10 	bl	8000ab4 <__aeabi_dcmpge>
 8017c94:	2800      	cmp	r0, #0
 8017c96:	f000 8157 	beq.w	8017f48 <_dtoa_r+0x938>
 8017c9a:	2400      	movs	r4, #0
 8017c9c:	4625      	mov	r5, r4
 8017c9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ca0:	43db      	mvns	r3, r3
 8017ca2:	9304      	str	r3, [sp, #16]
 8017ca4:	4656      	mov	r6, sl
 8017ca6:	2700      	movs	r7, #0
 8017ca8:	4621      	mov	r1, r4
 8017caa:	4658      	mov	r0, fp
 8017cac:	f000 fe4a 	bl	8018944 <_Bfree>
 8017cb0:	2d00      	cmp	r5, #0
 8017cb2:	d0dc      	beq.n	8017c6e <_dtoa_r+0x65e>
 8017cb4:	b12f      	cbz	r7, 8017cc2 <_dtoa_r+0x6b2>
 8017cb6:	42af      	cmp	r7, r5
 8017cb8:	d003      	beq.n	8017cc2 <_dtoa_r+0x6b2>
 8017cba:	4639      	mov	r1, r7
 8017cbc:	4658      	mov	r0, fp
 8017cbe:	f000 fe41 	bl	8018944 <_Bfree>
 8017cc2:	4629      	mov	r1, r5
 8017cc4:	4658      	mov	r0, fp
 8017cc6:	f000 fe3d 	bl	8018944 <_Bfree>
 8017cca:	e7d0      	b.n	8017c6e <_dtoa_r+0x65e>
 8017ccc:	9704      	str	r7, [sp, #16]
 8017cce:	4633      	mov	r3, r6
 8017cd0:	461e      	mov	r6, r3
 8017cd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017cd6:	2a39      	cmp	r2, #57	@ 0x39
 8017cd8:	d107      	bne.n	8017cea <_dtoa_r+0x6da>
 8017cda:	459a      	cmp	sl, r3
 8017cdc:	d1f8      	bne.n	8017cd0 <_dtoa_r+0x6c0>
 8017cde:	9a04      	ldr	r2, [sp, #16]
 8017ce0:	3201      	adds	r2, #1
 8017ce2:	9204      	str	r2, [sp, #16]
 8017ce4:	2230      	movs	r2, #48	@ 0x30
 8017ce6:	f88a 2000 	strb.w	r2, [sl]
 8017cea:	781a      	ldrb	r2, [r3, #0]
 8017cec:	3201      	adds	r2, #1
 8017cee:	701a      	strb	r2, [r3, #0]
 8017cf0:	e7bd      	b.n	8017c6e <_dtoa_r+0x65e>
 8017cf2:	4b7b      	ldr	r3, [pc, #492]	@ (8017ee0 <_dtoa_r+0x8d0>)
 8017cf4:	2200      	movs	r2, #0
 8017cf6:	f7e8 fc57 	bl	80005a8 <__aeabi_dmul>
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	2300      	movs	r3, #0
 8017cfe:	4604      	mov	r4, r0
 8017d00:	460d      	mov	r5, r1
 8017d02:	f7e8 feb9 	bl	8000a78 <__aeabi_dcmpeq>
 8017d06:	2800      	cmp	r0, #0
 8017d08:	f43f aebb 	beq.w	8017a82 <_dtoa_r+0x472>
 8017d0c:	e6f0      	b.n	8017af0 <_dtoa_r+0x4e0>
 8017d0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017d10:	2a00      	cmp	r2, #0
 8017d12:	f000 80db 	beq.w	8017ecc <_dtoa_r+0x8bc>
 8017d16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d18:	2a01      	cmp	r2, #1
 8017d1a:	f300 80bf 	bgt.w	8017e9c <_dtoa_r+0x88c>
 8017d1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017d20:	2a00      	cmp	r2, #0
 8017d22:	f000 80b7 	beq.w	8017e94 <_dtoa_r+0x884>
 8017d26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8017d2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017d2c:	4646      	mov	r6, r8
 8017d2e:	9a08      	ldr	r2, [sp, #32]
 8017d30:	2101      	movs	r1, #1
 8017d32:	441a      	add	r2, r3
 8017d34:	4658      	mov	r0, fp
 8017d36:	4498      	add	r8, r3
 8017d38:	9208      	str	r2, [sp, #32]
 8017d3a:	f000 ff01 	bl	8018b40 <__i2b>
 8017d3e:	4605      	mov	r5, r0
 8017d40:	b15e      	cbz	r6, 8017d5a <_dtoa_r+0x74a>
 8017d42:	9b08      	ldr	r3, [sp, #32]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	dd08      	ble.n	8017d5a <_dtoa_r+0x74a>
 8017d48:	42b3      	cmp	r3, r6
 8017d4a:	9a08      	ldr	r2, [sp, #32]
 8017d4c:	bfa8      	it	ge
 8017d4e:	4633      	movge	r3, r6
 8017d50:	eba8 0803 	sub.w	r8, r8, r3
 8017d54:	1af6      	subs	r6, r6, r3
 8017d56:	1ad3      	subs	r3, r2, r3
 8017d58:	9308      	str	r3, [sp, #32]
 8017d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017d5c:	b1f3      	cbz	r3, 8017d9c <_dtoa_r+0x78c>
 8017d5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	f000 80b7 	beq.w	8017ed4 <_dtoa_r+0x8c4>
 8017d66:	b18c      	cbz	r4, 8017d8c <_dtoa_r+0x77c>
 8017d68:	4629      	mov	r1, r5
 8017d6a:	4622      	mov	r2, r4
 8017d6c:	4658      	mov	r0, fp
 8017d6e:	f000 ffa7 	bl	8018cc0 <__pow5mult>
 8017d72:	464a      	mov	r2, r9
 8017d74:	4601      	mov	r1, r0
 8017d76:	4605      	mov	r5, r0
 8017d78:	4658      	mov	r0, fp
 8017d7a:	f000 fef7 	bl	8018b6c <__multiply>
 8017d7e:	4649      	mov	r1, r9
 8017d80:	9004      	str	r0, [sp, #16]
 8017d82:	4658      	mov	r0, fp
 8017d84:	f000 fdde 	bl	8018944 <_Bfree>
 8017d88:	9b04      	ldr	r3, [sp, #16]
 8017d8a:	4699      	mov	r9, r3
 8017d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017d8e:	1b1a      	subs	r2, r3, r4
 8017d90:	d004      	beq.n	8017d9c <_dtoa_r+0x78c>
 8017d92:	4649      	mov	r1, r9
 8017d94:	4658      	mov	r0, fp
 8017d96:	f000 ff93 	bl	8018cc0 <__pow5mult>
 8017d9a:	4681      	mov	r9, r0
 8017d9c:	2101      	movs	r1, #1
 8017d9e:	4658      	mov	r0, fp
 8017da0:	f000 fece 	bl	8018b40 <__i2b>
 8017da4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017da6:	4604      	mov	r4, r0
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	f000 81cf 	beq.w	801814c <_dtoa_r+0xb3c>
 8017dae:	461a      	mov	r2, r3
 8017db0:	4601      	mov	r1, r0
 8017db2:	4658      	mov	r0, fp
 8017db4:	f000 ff84 	bl	8018cc0 <__pow5mult>
 8017db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017dba:	2b01      	cmp	r3, #1
 8017dbc:	4604      	mov	r4, r0
 8017dbe:	f300 8095 	bgt.w	8017eec <_dtoa_r+0x8dc>
 8017dc2:	9b02      	ldr	r3, [sp, #8]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	f040 8087 	bne.w	8017ed8 <_dtoa_r+0x8c8>
 8017dca:	9b03      	ldr	r3, [sp, #12]
 8017dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	f040 8089 	bne.w	8017ee8 <_dtoa_r+0x8d8>
 8017dd6:	9b03      	ldr	r3, [sp, #12]
 8017dd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017ddc:	0d1b      	lsrs	r3, r3, #20
 8017dde:	051b      	lsls	r3, r3, #20
 8017de0:	b12b      	cbz	r3, 8017dee <_dtoa_r+0x7de>
 8017de2:	9b08      	ldr	r3, [sp, #32]
 8017de4:	3301      	adds	r3, #1
 8017de6:	9308      	str	r3, [sp, #32]
 8017de8:	f108 0801 	add.w	r8, r8, #1
 8017dec:	2301      	movs	r3, #1
 8017dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8017df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	f000 81b0 	beq.w	8018158 <_dtoa_r+0xb48>
 8017df8:	6923      	ldr	r3, [r4, #16]
 8017dfa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017dfe:	6918      	ldr	r0, [r3, #16]
 8017e00:	f000 fe52 	bl	8018aa8 <__hi0bits>
 8017e04:	f1c0 0020 	rsb	r0, r0, #32
 8017e08:	9b08      	ldr	r3, [sp, #32]
 8017e0a:	4418      	add	r0, r3
 8017e0c:	f010 001f 	ands.w	r0, r0, #31
 8017e10:	d077      	beq.n	8017f02 <_dtoa_r+0x8f2>
 8017e12:	f1c0 0320 	rsb	r3, r0, #32
 8017e16:	2b04      	cmp	r3, #4
 8017e18:	dd6b      	ble.n	8017ef2 <_dtoa_r+0x8e2>
 8017e1a:	9b08      	ldr	r3, [sp, #32]
 8017e1c:	f1c0 001c 	rsb	r0, r0, #28
 8017e20:	4403      	add	r3, r0
 8017e22:	4480      	add	r8, r0
 8017e24:	4406      	add	r6, r0
 8017e26:	9308      	str	r3, [sp, #32]
 8017e28:	f1b8 0f00 	cmp.w	r8, #0
 8017e2c:	dd05      	ble.n	8017e3a <_dtoa_r+0x82a>
 8017e2e:	4649      	mov	r1, r9
 8017e30:	4642      	mov	r2, r8
 8017e32:	4658      	mov	r0, fp
 8017e34:	f000 ff9e 	bl	8018d74 <__lshift>
 8017e38:	4681      	mov	r9, r0
 8017e3a:	9b08      	ldr	r3, [sp, #32]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	dd05      	ble.n	8017e4c <_dtoa_r+0x83c>
 8017e40:	4621      	mov	r1, r4
 8017e42:	461a      	mov	r2, r3
 8017e44:	4658      	mov	r0, fp
 8017e46:	f000 ff95 	bl	8018d74 <__lshift>
 8017e4a:	4604      	mov	r4, r0
 8017e4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d059      	beq.n	8017f06 <_dtoa_r+0x8f6>
 8017e52:	4621      	mov	r1, r4
 8017e54:	4648      	mov	r0, r9
 8017e56:	f000 fff9 	bl	8018e4c <__mcmp>
 8017e5a:	2800      	cmp	r0, #0
 8017e5c:	da53      	bge.n	8017f06 <_dtoa_r+0x8f6>
 8017e5e:	1e7b      	subs	r3, r7, #1
 8017e60:	9304      	str	r3, [sp, #16]
 8017e62:	4649      	mov	r1, r9
 8017e64:	2300      	movs	r3, #0
 8017e66:	220a      	movs	r2, #10
 8017e68:	4658      	mov	r0, fp
 8017e6a:	f000 fd8d 	bl	8018988 <__multadd>
 8017e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017e70:	4681      	mov	r9, r0
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	f000 8172 	beq.w	801815c <_dtoa_r+0xb4c>
 8017e78:	2300      	movs	r3, #0
 8017e7a:	4629      	mov	r1, r5
 8017e7c:	220a      	movs	r2, #10
 8017e7e:	4658      	mov	r0, fp
 8017e80:	f000 fd82 	bl	8018988 <__multadd>
 8017e84:	9b00      	ldr	r3, [sp, #0]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	4605      	mov	r5, r0
 8017e8a:	dc67      	bgt.n	8017f5c <_dtoa_r+0x94c>
 8017e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e8e:	2b02      	cmp	r3, #2
 8017e90:	dc41      	bgt.n	8017f16 <_dtoa_r+0x906>
 8017e92:	e063      	b.n	8017f5c <_dtoa_r+0x94c>
 8017e94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8017e96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8017e9a:	e746      	b.n	8017d2a <_dtoa_r+0x71a>
 8017e9c:	9b07      	ldr	r3, [sp, #28]
 8017e9e:	1e5c      	subs	r4, r3, #1
 8017ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017ea2:	42a3      	cmp	r3, r4
 8017ea4:	bfbf      	itttt	lt
 8017ea6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8017ea8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8017eaa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8017eac:	1ae3      	sublt	r3, r4, r3
 8017eae:	bfb4      	ite	lt
 8017eb0:	18d2      	addlt	r2, r2, r3
 8017eb2:	1b1c      	subge	r4, r3, r4
 8017eb4:	9b07      	ldr	r3, [sp, #28]
 8017eb6:	bfbc      	itt	lt
 8017eb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8017eba:	2400      	movlt	r4, #0
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	bfb5      	itete	lt
 8017ec0:	eba8 0603 	sublt.w	r6, r8, r3
 8017ec4:	9b07      	ldrge	r3, [sp, #28]
 8017ec6:	2300      	movlt	r3, #0
 8017ec8:	4646      	movge	r6, r8
 8017eca:	e730      	b.n	8017d2e <_dtoa_r+0x71e>
 8017ecc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8017ece:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8017ed0:	4646      	mov	r6, r8
 8017ed2:	e735      	b.n	8017d40 <_dtoa_r+0x730>
 8017ed4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017ed6:	e75c      	b.n	8017d92 <_dtoa_r+0x782>
 8017ed8:	2300      	movs	r3, #0
 8017eda:	e788      	b.n	8017dee <_dtoa_r+0x7de>
 8017edc:	3fe00000 	.word	0x3fe00000
 8017ee0:	40240000 	.word	0x40240000
 8017ee4:	40140000 	.word	0x40140000
 8017ee8:	9b02      	ldr	r3, [sp, #8]
 8017eea:	e780      	b.n	8017dee <_dtoa_r+0x7de>
 8017eec:	2300      	movs	r3, #0
 8017eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8017ef0:	e782      	b.n	8017df8 <_dtoa_r+0x7e8>
 8017ef2:	d099      	beq.n	8017e28 <_dtoa_r+0x818>
 8017ef4:	9a08      	ldr	r2, [sp, #32]
 8017ef6:	331c      	adds	r3, #28
 8017ef8:	441a      	add	r2, r3
 8017efa:	4498      	add	r8, r3
 8017efc:	441e      	add	r6, r3
 8017efe:	9208      	str	r2, [sp, #32]
 8017f00:	e792      	b.n	8017e28 <_dtoa_r+0x818>
 8017f02:	4603      	mov	r3, r0
 8017f04:	e7f6      	b.n	8017ef4 <_dtoa_r+0x8e4>
 8017f06:	9b07      	ldr	r3, [sp, #28]
 8017f08:	9704      	str	r7, [sp, #16]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	dc20      	bgt.n	8017f50 <_dtoa_r+0x940>
 8017f0e:	9300      	str	r3, [sp, #0]
 8017f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017f12:	2b02      	cmp	r3, #2
 8017f14:	dd1e      	ble.n	8017f54 <_dtoa_r+0x944>
 8017f16:	9b00      	ldr	r3, [sp, #0]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	f47f aec0 	bne.w	8017c9e <_dtoa_r+0x68e>
 8017f1e:	4621      	mov	r1, r4
 8017f20:	2205      	movs	r2, #5
 8017f22:	4658      	mov	r0, fp
 8017f24:	f000 fd30 	bl	8018988 <__multadd>
 8017f28:	4601      	mov	r1, r0
 8017f2a:	4604      	mov	r4, r0
 8017f2c:	4648      	mov	r0, r9
 8017f2e:	f000 ff8d 	bl	8018e4c <__mcmp>
 8017f32:	2800      	cmp	r0, #0
 8017f34:	f77f aeb3 	ble.w	8017c9e <_dtoa_r+0x68e>
 8017f38:	4656      	mov	r6, sl
 8017f3a:	2331      	movs	r3, #49	@ 0x31
 8017f3c:	f806 3b01 	strb.w	r3, [r6], #1
 8017f40:	9b04      	ldr	r3, [sp, #16]
 8017f42:	3301      	adds	r3, #1
 8017f44:	9304      	str	r3, [sp, #16]
 8017f46:	e6ae      	b.n	8017ca6 <_dtoa_r+0x696>
 8017f48:	9c07      	ldr	r4, [sp, #28]
 8017f4a:	9704      	str	r7, [sp, #16]
 8017f4c:	4625      	mov	r5, r4
 8017f4e:	e7f3      	b.n	8017f38 <_dtoa_r+0x928>
 8017f50:	9b07      	ldr	r3, [sp, #28]
 8017f52:	9300      	str	r3, [sp, #0]
 8017f54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	f000 8104 	beq.w	8018164 <_dtoa_r+0xb54>
 8017f5c:	2e00      	cmp	r6, #0
 8017f5e:	dd05      	ble.n	8017f6c <_dtoa_r+0x95c>
 8017f60:	4629      	mov	r1, r5
 8017f62:	4632      	mov	r2, r6
 8017f64:	4658      	mov	r0, fp
 8017f66:	f000 ff05 	bl	8018d74 <__lshift>
 8017f6a:	4605      	mov	r5, r0
 8017f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d05a      	beq.n	8018028 <_dtoa_r+0xa18>
 8017f72:	6869      	ldr	r1, [r5, #4]
 8017f74:	4658      	mov	r0, fp
 8017f76:	f000 fca5 	bl	80188c4 <_Balloc>
 8017f7a:	4606      	mov	r6, r0
 8017f7c:	b928      	cbnz	r0, 8017f8a <_dtoa_r+0x97a>
 8017f7e:	4b84      	ldr	r3, [pc, #528]	@ (8018190 <_dtoa_r+0xb80>)
 8017f80:	4602      	mov	r2, r0
 8017f82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8017f86:	f7ff bb5a 	b.w	801763e <_dtoa_r+0x2e>
 8017f8a:	692a      	ldr	r2, [r5, #16]
 8017f8c:	3202      	adds	r2, #2
 8017f8e:	0092      	lsls	r2, r2, #2
 8017f90:	f105 010c 	add.w	r1, r5, #12
 8017f94:	300c      	adds	r0, #12
 8017f96:	f7ff fa78 	bl	801748a <memcpy>
 8017f9a:	2201      	movs	r2, #1
 8017f9c:	4631      	mov	r1, r6
 8017f9e:	4658      	mov	r0, fp
 8017fa0:	f000 fee8 	bl	8018d74 <__lshift>
 8017fa4:	f10a 0301 	add.w	r3, sl, #1
 8017fa8:	9307      	str	r3, [sp, #28]
 8017faa:	9b00      	ldr	r3, [sp, #0]
 8017fac:	4453      	add	r3, sl
 8017fae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017fb0:	9b02      	ldr	r3, [sp, #8]
 8017fb2:	f003 0301 	and.w	r3, r3, #1
 8017fb6:	462f      	mov	r7, r5
 8017fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8017fba:	4605      	mov	r5, r0
 8017fbc:	9b07      	ldr	r3, [sp, #28]
 8017fbe:	4621      	mov	r1, r4
 8017fc0:	3b01      	subs	r3, #1
 8017fc2:	4648      	mov	r0, r9
 8017fc4:	9300      	str	r3, [sp, #0]
 8017fc6:	f7ff fa9b 	bl	8017500 <quorem>
 8017fca:	4639      	mov	r1, r7
 8017fcc:	9002      	str	r0, [sp, #8]
 8017fce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8017fd2:	4648      	mov	r0, r9
 8017fd4:	f000 ff3a 	bl	8018e4c <__mcmp>
 8017fd8:	462a      	mov	r2, r5
 8017fda:	9008      	str	r0, [sp, #32]
 8017fdc:	4621      	mov	r1, r4
 8017fde:	4658      	mov	r0, fp
 8017fe0:	f000 ff50 	bl	8018e84 <__mdiff>
 8017fe4:	68c2      	ldr	r2, [r0, #12]
 8017fe6:	4606      	mov	r6, r0
 8017fe8:	bb02      	cbnz	r2, 801802c <_dtoa_r+0xa1c>
 8017fea:	4601      	mov	r1, r0
 8017fec:	4648      	mov	r0, r9
 8017fee:	f000 ff2d 	bl	8018e4c <__mcmp>
 8017ff2:	4602      	mov	r2, r0
 8017ff4:	4631      	mov	r1, r6
 8017ff6:	4658      	mov	r0, fp
 8017ff8:	920e      	str	r2, [sp, #56]	@ 0x38
 8017ffa:	f000 fca3 	bl	8018944 <_Bfree>
 8017ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018000:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018002:	9e07      	ldr	r6, [sp, #28]
 8018004:	ea43 0102 	orr.w	r1, r3, r2
 8018008:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801800a:	4319      	orrs	r1, r3
 801800c:	d110      	bne.n	8018030 <_dtoa_r+0xa20>
 801800e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018012:	d029      	beq.n	8018068 <_dtoa_r+0xa58>
 8018014:	9b08      	ldr	r3, [sp, #32]
 8018016:	2b00      	cmp	r3, #0
 8018018:	dd02      	ble.n	8018020 <_dtoa_r+0xa10>
 801801a:	9b02      	ldr	r3, [sp, #8]
 801801c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8018020:	9b00      	ldr	r3, [sp, #0]
 8018022:	f883 8000 	strb.w	r8, [r3]
 8018026:	e63f      	b.n	8017ca8 <_dtoa_r+0x698>
 8018028:	4628      	mov	r0, r5
 801802a:	e7bb      	b.n	8017fa4 <_dtoa_r+0x994>
 801802c:	2201      	movs	r2, #1
 801802e:	e7e1      	b.n	8017ff4 <_dtoa_r+0x9e4>
 8018030:	9b08      	ldr	r3, [sp, #32]
 8018032:	2b00      	cmp	r3, #0
 8018034:	db04      	blt.n	8018040 <_dtoa_r+0xa30>
 8018036:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018038:	430b      	orrs	r3, r1
 801803a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801803c:	430b      	orrs	r3, r1
 801803e:	d120      	bne.n	8018082 <_dtoa_r+0xa72>
 8018040:	2a00      	cmp	r2, #0
 8018042:	dded      	ble.n	8018020 <_dtoa_r+0xa10>
 8018044:	4649      	mov	r1, r9
 8018046:	2201      	movs	r2, #1
 8018048:	4658      	mov	r0, fp
 801804a:	f000 fe93 	bl	8018d74 <__lshift>
 801804e:	4621      	mov	r1, r4
 8018050:	4681      	mov	r9, r0
 8018052:	f000 fefb 	bl	8018e4c <__mcmp>
 8018056:	2800      	cmp	r0, #0
 8018058:	dc03      	bgt.n	8018062 <_dtoa_r+0xa52>
 801805a:	d1e1      	bne.n	8018020 <_dtoa_r+0xa10>
 801805c:	f018 0f01 	tst.w	r8, #1
 8018060:	d0de      	beq.n	8018020 <_dtoa_r+0xa10>
 8018062:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8018066:	d1d8      	bne.n	801801a <_dtoa_r+0xa0a>
 8018068:	9a00      	ldr	r2, [sp, #0]
 801806a:	2339      	movs	r3, #57	@ 0x39
 801806c:	7013      	strb	r3, [r2, #0]
 801806e:	4633      	mov	r3, r6
 8018070:	461e      	mov	r6, r3
 8018072:	3b01      	subs	r3, #1
 8018074:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8018078:	2a39      	cmp	r2, #57	@ 0x39
 801807a:	d052      	beq.n	8018122 <_dtoa_r+0xb12>
 801807c:	3201      	adds	r2, #1
 801807e:	701a      	strb	r2, [r3, #0]
 8018080:	e612      	b.n	8017ca8 <_dtoa_r+0x698>
 8018082:	2a00      	cmp	r2, #0
 8018084:	dd07      	ble.n	8018096 <_dtoa_r+0xa86>
 8018086:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801808a:	d0ed      	beq.n	8018068 <_dtoa_r+0xa58>
 801808c:	9a00      	ldr	r2, [sp, #0]
 801808e:	f108 0301 	add.w	r3, r8, #1
 8018092:	7013      	strb	r3, [r2, #0]
 8018094:	e608      	b.n	8017ca8 <_dtoa_r+0x698>
 8018096:	9b07      	ldr	r3, [sp, #28]
 8018098:	9a07      	ldr	r2, [sp, #28]
 801809a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801809e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80180a0:	4293      	cmp	r3, r2
 80180a2:	d028      	beq.n	80180f6 <_dtoa_r+0xae6>
 80180a4:	4649      	mov	r1, r9
 80180a6:	2300      	movs	r3, #0
 80180a8:	220a      	movs	r2, #10
 80180aa:	4658      	mov	r0, fp
 80180ac:	f000 fc6c 	bl	8018988 <__multadd>
 80180b0:	42af      	cmp	r7, r5
 80180b2:	4681      	mov	r9, r0
 80180b4:	f04f 0300 	mov.w	r3, #0
 80180b8:	f04f 020a 	mov.w	r2, #10
 80180bc:	4639      	mov	r1, r7
 80180be:	4658      	mov	r0, fp
 80180c0:	d107      	bne.n	80180d2 <_dtoa_r+0xac2>
 80180c2:	f000 fc61 	bl	8018988 <__multadd>
 80180c6:	4607      	mov	r7, r0
 80180c8:	4605      	mov	r5, r0
 80180ca:	9b07      	ldr	r3, [sp, #28]
 80180cc:	3301      	adds	r3, #1
 80180ce:	9307      	str	r3, [sp, #28]
 80180d0:	e774      	b.n	8017fbc <_dtoa_r+0x9ac>
 80180d2:	f000 fc59 	bl	8018988 <__multadd>
 80180d6:	4629      	mov	r1, r5
 80180d8:	4607      	mov	r7, r0
 80180da:	2300      	movs	r3, #0
 80180dc:	220a      	movs	r2, #10
 80180de:	4658      	mov	r0, fp
 80180e0:	f000 fc52 	bl	8018988 <__multadd>
 80180e4:	4605      	mov	r5, r0
 80180e6:	e7f0      	b.n	80180ca <_dtoa_r+0xaba>
 80180e8:	9b00      	ldr	r3, [sp, #0]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	bfcc      	ite	gt
 80180ee:	461e      	movgt	r6, r3
 80180f0:	2601      	movle	r6, #1
 80180f2:	4456      	add	r6, sl
 80180f4:	2700      	movs	r7, #0
 80180f6:	4649      	mov	r1, r9
 80180f8:	2201      	movs	r2, #1
 80180fa:	4658      	mov	r0, fp
 80180fc:	f000 fe3a 	bl	8018d74 <__lshift>
 8018100:	4621      	mov	r1, r4
 8018102:	4681      	mov	r9, r0
 8018104:	f000 fea2 	bl	8018e4c <__mcmp>
 8018108:	2800      	cmp	r0, #0
 801810a:	dcb0      	bgt.n	801806e <_dtoa_r+0xa5e>
 801810c:	d102      	bne.n	8018114 <_dtoa_r+0xb04>
 801810e:	f018 0f01 	tst.w	r8, #1
 8018112:	d1ac      	bne.n	801806e <_dtoa_r+0xa5e>
 8018114:	4633      	mov	r3, r6
 8018116:	461e      	mov	r6, r3
 8018118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801811c:	2a30      	cmp	r2, #48	@ 0x30
 801811e:	d0fa      	beq.n	8018116 <_dtoa_r+0xb06>
 8018120:	e5c2      	b.n	8017ca8 <_dtoa_r+0x698>
 8018122:	459a      	cmp	sl, r3
 8018124:	d1a4      	bne.n	8018070 <_dtoa_r+0xa60>
 8018126:	9b04      	ldr	r3, [sp, #16]
 8018128:	3301      	adds	r3, #1
 801812a:	9304      	str	r3, [sp, #16]
 801812c:	2331      	movs	r3, #49	@ 0x31
 801812e:	f88a 3000 	strb.w	r3, [sl]
 8018132:	e5b9      	b.n	8017ca8 <_dtoa_r+0x698>
 8018134:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018136:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8018194 <_dtoa_r+0xb84>
 801813a:	b11b      	cbz	r3, 8018144 <_dtoa_r+0xb34>
 801813c:	f10a 0308 	add.w	r3, sl, #8
 8018140:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8018142:	6013      	str	r3, [r2, #0]
 8018144:	4650      	mov	r0, sl
 8018146:	b019      	add	sp, #100	@ 0x64
 8018148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801814c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801814e:	2b01      	cmp	r3, #1
 8018150:	f77f ae37 	ble.w	8017dc2 <_dtoa_r+0x7b2>
 8018154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018156:	930a      	str	r3, [sp, #40]	@ 0x28
 8018158:	2001      	movs	r0, #1
 801815a:	e655      	b.n	8017e08 <_dtoa_r+0x7f8>
 801815c:	9b00      	ldr	r3, [sp, #0]
 801815e:	2b00      	cmp	r3, #0
 8018160:	f77f aed6 	ble.w	8017f10 <_dtoa_r+0x900>
 8018164:	4656      	mov	r6, sl
 8018166:	4621      	mov	r1, r4
 8018168:	4648      	mov	r0, r9
 801816a:	f7ff f9c9 	bl	8017500 <quorem>
 801816e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8018172:	f806 8b01 	strb.w	r8, [r6], #1
 8018176:	9b00      	ldr	r3, [sp, #0]
 8018178:	eba6 020a 	sub.w	r2, r6, sl
 801817c:	4293      	cmp	r3, r2
 801817e:	ddb3      	ble.n	80180e8 <_dtoa_r+0xad8>
 8018180:	4649      	mov	r1, r9
 8018182:	2300      	movs	r3, #0
 8018184:	220a      	movs	r2, #10
 8018186:	4658      	mov	r0, fp
 8018188:	f000 fbfe 	bl	8018988 <__multadd>
 801818c:	4681      	mov	r9, r0
 801818e:	e7ea      	b.n	8018166 <_dtoa_r+0xb56>
 8018190:	0801e264 	.word	0x0801e264
 8018194:	0801e1ff 	.word	0x0801e1ff

08018198 <_free_r>:
 8018198:	b538      	push	{r3, r4, r5, lr}
 801819a:	4605      	mov	r5, r0
 801819c:	2900      	cmp	r1, #0
 801819e:	d041      	beq.n	8018224 <_free_r+0x8c>
 80181a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80181a4:	1f0c      	subs	r4, r1, #4
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	bfb8      	it	lt
 80181aa:	18e4      	addlt	r4, r4, r3
 80181ac:	f7fd f98c 	bl	80154c8 <__malloc_lock>
 80181b0:	4a1d      	ldr	r2, [pc, #116]	@ (8018228 <_free_r+0x90>)
 80181b2:	6813      	ldr	r3, [r2, #0]
 80181b4:	b933      	cbnz	r3, 80181c4 <_free_r+0x2c>
 80181b6:	6063      	str	r3, [r4, #4]
 80181b8:	6014      	str	r4, [r2, #0]
 80181ba:	4628      	mov	r0, r5
 80181bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181c0:	f7fd b988 	b.w	80154d4 <__malloc_unlock>
 80181c4:	42a3      	cmp	r3, r4
 80181c6:	d908      	bls.n	80181da <_free_r+0x42>
 80181c8:	6820      	ldr	r0, [r4, #0]
 80181ca:	1821      	adds	r1, r4, r0
 80181cc:	428b      	cmp	r3, r1
 80181ce:	bf01      	itttt	eq
 80181d0:	6819      	ldreq	r1, [r3, #0]
 80181d2:	685b      	ldreq	r3, [r3, #4]
 80181d4:	1809      	addeq	r1, r1, r0
 80181d6:	6021      	streq	r1, [r4, #0]
 80181d8:	e7ed      	b.n	80181b6 <_free_r+0x1e>
 80181da:	461a      	mov	r2, r3
 80181dc:	685b      	ldr	r3, [r3, #4]
 80181de:	b10b      	cbz	r3, 80181e4 <_free_r+0x4c>
 80181e0:	42a3      	cmp	r3, r4
 80181e2:	d9fa      	bls.n	80181da <_free_r+0x42>
 80181e4:	6811      	ldr	r1, [r2, #0]
 80181e6:	1850      	adds	r0, r2, r1
 80181e8:	42a0      	cmp	r0, r4
 80181ea:	d10b      	bne.n	8018204 <_free_r+0x6c>
 80181ec:	6820      	ldr	r0, [r4, #0]
 80181ee:	4401      	add	r1, r0
 80181f0:	1850      	adds	r0, r2, r1
 80181f2:	4283      	cmp	r3, r0
 80181f4:	6011      	str	r1, [r2, #0]
 80181f6:	d1e0      	bne.n	80181ba <_free_r+0x22>
 80181f8:	6818      	ldr	r0, [r3, #0]
 80181fa:	685b      	ldr	r3, [r3, #4]
 80181fc:	6053      	str	r3, [r2, #4]
 80181fe:	4408      	add	r0, r1
 8018200:	6010      	str	r0, [r2, #0]
 8018202:	e7da      	b.n	80181ba <_free_r+0x22>
 8018204:	d902      	bls.n	801820c <_free_r+0x74>
 8018206:	230c      	movs	r3, #12
 8018208:	602b      	str	r3, [r5, #0]
 801820a:	e7d6      	b.n	80181ba <_free_r+0x22>
 801820c:	6820      	ldr	r0, [r4, #0]
 801820e:	1821      	adds	r1, r4, r0
 8018210:	428b      	cmp	r3, r1
 8018212:	bf04      	itt	eq
 8018214:	6819      	ldreq	r1, [r3, #0]
 8018216:	685b      	ldreq	r3, [r3, #4]
 8018218:	6063      	str	r3, [r4, #4]
 801821a:	bf04      	itt	eq
 801821c:	1809      	addeq	r1, r1, r0
 801821e:	6021      	streq	r1, [r4, #0]
 8018220:	6054      	str	r4, [r2, #4]
 8018222:	e7ca      	b.n	80181ba <_free_r+0x22>
 8018224:	bd38      	pop	{r3, r4, r5, pc}
 8018226:	bf00      	nop
 8018228:	20002cc0 	.word	0x20002cc0

0801822c <rshift>:
 801822c:	6903      	ldr	r3, [r0, #16]
 801822e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018232:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018236:	ea4f 1261 	mov.w	r2, r1, asr #5
 801823a:	f100 0414 	add.w	r4, r0, #20
 801823e:	dd45      	ble.n	80182cc <rshift+0xa0>
 8018240:	f011 011f 	ands.w	r1, r1, #31
 8018244:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018248:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801824c:	d10c      	bne.n	8018268 <rshift+0x3c>
 801824e:	f100 0710 	add.w	r7, r0, #16
 8018252:	4629      	mov	r1, r5
 8018254:	42b1      	cmp	r1, r6
 8018256:	d334      	bcc.n	80182c2 <rshift+0x96>
 8018258:	1a9b      	subs	r3, r3, r2
 801825a:	009b      	lsls	r3, r3, #2
 801825c:	1eea      	subs	r2, r5, #3
 801825e:	4296      	cmp	r6, r2
 8018260:	bf38      	it	cc
 8018262:	2300      	movcc	r3, #0
 8018264:	4423      	add	r3, r4
 8018266:	e015      	b.n	8018294 <rshift+0x68>
 8018268:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801826c:	f1c1 0820 	rsb	r8, r1, #32
 8018270:	40cf      	lsrs	r7, r1
 8018272:	f105 0e04 	add.w	lr, r5, #4
 8018276:	46a1      	mov	r9, r4
 8018278:	4576      	cmp	r6, lr
 801827a:	46f4      	mov	ip, lr
 801827c:	d815      	bhi.n	80182aa <rshift+0x7e>
 801827e:	1a9a      	subs	r2, r3, r2
 8018280:	0092      	lsls	r2, r2, #2
 8018282:	3a04      	subs	r2, #4
 8018284:	3501      	adds	r5, #1
 8018286:	42ae      	cmp	r6, r5
 8018288:	bf38      	it	cc
 801828a:	2200      	movcc	r2, #0
 801828c:	18a3      	adds	r3, r4, r2
 801828e:	50a7      	str	r7, [r4, r2]
 8018290:	b107      	cbz	r7, 8018294 <rshift+0x68>
 8018292:	3304      	adds	r3, #4
 8018294:	1b1a      	subs	r2, r3, r4
 8018296:	42a3      	cmp	r3, r4
 8018298:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801829c:	bf08      	it	eq
 801829e:	2300      	moveq	r3, #0
 80182a0:	6102      	str	r2, [r0, #16]
 80182a2:	bf08      	it	eq
 80182a4:	6143      	streq	r3, [r0, #20]
 80182a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182aa:	f8dc c000 	ldr.w	ip, [ip]
 80182ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80182b2:	ea4c 0707 	orr.w	r7, ip, r7
 80182b6:	f849 7b04 	str.w	r7, [r9], #4
 80182ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80182be:	40cf      	lsrs	r7, r1
 80182c0:	e7da      	b.n	8018278 <rshift+0x4c>
 80182c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80182c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80182ca:	e7c3      	b.n	8018254 <rshift+0x28>
 80182cc:	4623      	mov	r3, r4
 80182ce:	e7e1      	b.n	8018294 <rshift+0x68>

080182d0 <__hexdig_fun>:
 80182d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80182d4:	2b09      	cmp	r3, #9
 80182d6:	d802      	bhi.n	80182de <__hexdig_fun+0xe>
 80182d8:	3820      	subs	r0, #32
 80182da:	b2c0      	uxtb	r0, r0
 80182dc:	4770      	bx	lr
 80182de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80182e2:	2b05      	cmp	r3, #5
 80182e4:	d801      	bhi.n	80182ea <__hexdig_fun+0x1a>
 80182e6:	3847      	subs	r0, #71	@ 0x47
 80182e8:	e7f7      	b.n	80182da <__hexdig_fun+0xa>
 80182ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80182ee:	2b05      	cmp	r3, #5
 80182f0:	d801      	bhi.n	80182f6 <__hexdig_fun+0x26>
 80182f2:	3827      	subs	r0, #39	@ 0x27
 80182f4:	e7f1      	b.n	80182da <__hexdig_fun+0xa>
 80182f6:	2000      	movs	r0, #0
 80182f8:	4770      	bx	lr
	...

080182fc <__gethex>:
 80182fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018300:	b085      	sub	sp, #20
 8018302:	468a      	mov	sl, r1
 8018304:	9302      	str	r3, [sp, #8]
 8018306:	680b      	ldr	r3, [r1, #0]
 8018308:	9001      	str	r0, [sp, #4]
 801830a:	4690      	mov	r8, r2
 801830c:	1c9c      	adds	r4, r3, #2
 801830e:	46a1      	mov	r9, r4
 8018310:	f814 0b01 	ldrb.w	r0, [r4], #1
 8018314:	2830      	cmp	r0, #48	@ 0x30
 8018316:	d0fa      	beq.n	801830e <__gethex+0x12>
 8018318:	eba9 0303 	sub.w	r3, r9, r3
 801831c:	f1a3 0b02 	sub.w	fp, r3, #2
 8018320:	f7ff ffd6 	bl	80182d0 <__hexdig_fun>
 8018324:	4605      	mov	r5, r0
 8018326:	2800      	cmp	r0, #0
 8018328:	d168      	bne.n	80183fc <__gethex+0x100>
 801832a:	49a0      	ldr	r1, [pc, #640]	@ (80185ac <__gethex+0x2b0>)
 801832c:	2201      	movs	r2, #1
 801832e:	4648      	mov	r0, r9
 8018330:	f7fe ff97 	bl	8017262 <strncmp>
 8018334:	4607      	mov	r7, r0
 8018336:	2800      	cmp	r0, #0
 8018338:	d167      	bne.n	801840a <__gethex+0x10e>
 801833a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801833e:	4626      	mov	r6, r4
 8018340:	f7ff ffc6 	bl	80182d0 <__hexdig_fun>
 8018344:	2800      	cmp	r0, #0
 8018346:	d062      	beq.n	801840e <__gethex+0x112>
 8018348:	4623      	mov	r3, r4
 801834a:	7818      	ldrb	r0, [r3, #0]
 801834c:	2830      	cmp	r0, #48	@ 0x30
 801834e:	4699      	mov	r9, r3
 8018350:	f103 0301 	add.w	r3, r3, #1
 8018354:	d0f9      	beq.n	801834a <__gethex+0x4e>
 8018356:	f7ff ffbb 	bl	80182d0 <__hexdig_fun>
 801835a:	fab0 f580 	clz	r5, r0
 801835e:	096d      	lsrs	r5, r5, #5
 8018360:	f04f 0b01 	mov.w	fp, #1
 8018364:	464a      	mov	r2, r9
 8018366:	4616      	mov	r6, r2
 8018368:	3201      	adds	r2, #1
 801836a:	7830      	ldrb	r0, [r6, #0]
 801836c:	f7ff ffb0 	bl	80182d0 <__hexdig_fun>
 8018370:	2800      	cmp	r0, #0
 8018372:	d1f8      	bne.n	8018366 <__gethex+0x6a>
 8018374:	498d      	ldr	r1, [pc, #564]	@ (80185ac <__gethex+0x2b0>)
 8018376:	2201      	movs	r2, #1
 8018378:	4630      	mov	r0, r6
 801837a:	f7fe ff72 	bl	8017262 <strncmp>
 801837e:	2800      	cmp	r0, #0
 8018380:	d13f      	bne.n	8018402 <__gethex+0x106>
 8018382:	b944      	cbnz	r4, 8018396 <__gethex+0x9a>
 8018384:	1c74      	adds	r4, r6, #1
 8018386:	4622      	mov	r2, r4
 8018388:	4616      	mov	r6, r2
 801838a:	3201      	adds	r2, #1
 801838c:	7830      	ldrb	r0, [r6, #0]
 801838e:	f7ff ff9f 	bl	80182d0 <__hexdig_fun>
 8018392:	2800      	cmp	r0, #0
 8018394:	d1f8      	bne.n	8018388 <__gethex+0x8c>
 8018396:	1ba4      	subs	r4, r4, r6
 8018398:	00a7      	lsls	r7, r4, #2
 801839a:	7833      	ldrb	r3, [r6, #0]
 801839c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80183a0:	2b50      	cmp	r3, #80	@ 0x50
 80183a2:	d13e      	bne.n	8018422 <__gethex+0x126>
 80183a4:	7873      	ldrb	r3, [r6, #1]
 80183a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80183a8:	d033      	beq.n	8018412 <__gethex+0x116>
 80183aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80183ac:	d034      	beq.n	8018418 <__gethex+0x11c>
 80183ae:	1c71      	adds	r1, r6, #1
 80183b0:	2400      	movs	r4, #0
 80183b2:	7808      	ldrb	r0, [r1, #0]
 80183b4:	f7ff ff8c 	bl	80182d0 <__hexdig_fun>
 80183b8:	1e43      	subs	r3, r0, #1
 80183ba:	b2db      	uxtb	r3, r3
 80183bc:	2b18      	cmp	r3, #24
 80183be:	d830      	bhi.n	8018422 <__gethex+0x126>
 80183c0:	f1a0 0210 	sub.w	r2, r0, #16
 80183c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80183c8:	f7ff ff82 	bl	80182d0 <__hexdig_fun>
 80183cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80183d0:	fa5f fc8c 	uxtb.w	ip, ip
 80183d4:	f1bc 0f18 	cmp.w	ip, #24
 80183d8:	f04f 030a 	mov.w	r3, #10
 80183dc:	d91e      	bls.n	801841c <__gethex+0x120>
 80183de:	b104      	cbz	r4, 80183e2 <__gethex+0xe6>
 80183e0:	4252      	negs	r2, r2
 80183e2:	4417      	add	r7, r2
 80183e4:	f8ca 1000 	str.w	r1, [sl]
 80183e8:	b1ed      	cbz	r5, 8018426 <__gethex+0x12a>
 80183ea:	f1bb 0f00 	cmp.w	fp, #0
 80183ee:	bf0c      	ite	eq
 80183f0:	2506      	moveq	r5, #6
 80183f2:	2500      	movne	r5, #0
 80183f4:	4628      	mov	r0, r5
 80183f6:	b005      	add	sp, #20
 80183f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183fc:	2500      	movs	r5, #0
 80183fe:	462c      	mov	r4, r5
 8018400:	e7b0      	b.n	8018364 <__gethex+0x68>
 8018402:	2c00      	cmp	r4, #0
 8018404:	d1c7      	bne.n	8018396 <__gethex+0x9a>
 8018406:	4627      	mov	r7, r4
 8018408:	e7c7      	b.n	801839a <__gethex+0x9e>
 801840a:	464e      	mov	r6, r9
 801840c:	462f      	mov	r7, r5
 801840e:	2501      	movs	r5, #1
 8018410:	e7c3      	b.n	801839a <__gethex+0x9e>
 8018412:	2400      	movs	r4, #0
 8018414:	1cb1      	adds	r1, r6, #2
 8018416:	e7cc      	b.n	80183b2 <__gethex+0xb6>
 8018418:	2401      	movs	r4, #1
 801841a:	e7fb      	b.n	8018414 <__gethex+0x118>
 801841c:	fb03 0002 	mla	r0, r3, r2, r0
 8018420:	e7ce      	b.n	80183c0 <__gethex+0xc4>
 8018422:	4631      	mov	r1, r6
 8018424:	e7de      	b.n	80183e4 <__gethex+0xe8>
 8018426:	eba6 0309 	sub.w	r3, r6, r9
 801842a:	3b01      	subs	r3, #1
 801842c:	4629      	mov	r1, r5
 801842e:	2b07      	cmp	r3, #7
 8018430:	dc0a      	bgt.n	8018448 <__gethex+0x14c>
 8018432:	9801      	ldr	r0, [sp, #4]
 8018434:	f000 fa46 	bl	80188c4 <_Balloc>
 8018438:	4604      	mov	r4, r0
 801843a:	b940      	cbnz	r0, 801844e <__gethex+0x152>
 801843c:	4b5c      	ldr	r3, [pc, #368]	@ (80185b0 <__gethex+0x2b4>)
 801843e:	4602      	mov	r2, r0
 8018440:	21e4      	movs	r1, #228	@ 0xe4
 8018442:	485c      	ldr	r0, [pc, #368]	@ (80185b4 <__gethex+0x2b8>)
 8018444:	f7ff f83e 	bl	80174c4 <__assert_func>
 8018448:	3101      	adds	r1, #1
 801844a:	105b      	asrs	r3, r3, #1
 801844c:	e7ef      	b.n	801842e <__gethex+0x132>
 801844e:	f100 0a14 	add.w	sl, r0, #20
 8018452:	2300      	movs	r3, #0
 8018454:	4655      	mov	r5, sl
 8018456:	469b      	mov	fp, r3
 8018458:	45b1      	cmp	r9, r6
 801845a:	d337      	bcc.n	80184cc <__gethex+0x1d0>
 801845c:	f845 bb04 	str.w	fp, [r5], #4
 8018460:	eba5 050a 	sub.w	r5, r5, sl
 8018464:	10ad      	asrs	r5, r5, #2
 8018466:	6125      	str	r5, [r4, #16]
 8018468:	4658      	mov	r0, fp
 801846a:	f000 fb1d 	bl	8018aa8 <__hi0bits>
 801846e:	016d      	lsls	r5, r5, #5
 8018470:	f8d8 6000 	ldr.w	r6, [r8]
 8018474:	1a2d      	subs	r5, r5, r0
 8018476:	42b5      	cmp	r5, r6
 8018478:	dd54      	ble.n	8018524 <__gethex+0x228>
 801847a:	1bad      	subs	r5, r5, r6
 801847c:	4629      	mov	r1, r5
 801847e:	4620      	mov	r0, r4
 8018480:	f000 feb1 	bl	80191e6 <__any_on>
 8018484:	4681      	mov	r9, r0
 8018486:	b178      	cbz	r0, 80184a8 <__gethex+0x1ac>
 8018488:	1e6b      	subs	r3, r5, #1
 801848a:	1159      	asrs	r1, r3, #5
 801848c:	f003 021f 	and.w	r2, r3, #31
 8018490:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8018494:	f04f 0901 	mov.w	r9, #1
 8018498:	fa09 f202 	lsl.w	r2, r9, r2
 801849c:	420a      	tst	r2, r1
 801849e:	d003      	beq.n	80184a8 <__gethex+0x1ac>
 80184a0:	454b      	cmp	r3, r9
 80184a2:	dc36      	bgt.n	8018512 <__gethex+0x216>
 80184a4:	f04f 0902 	mov.w	r9, #2
 80184a8:	4629      	mov	r1, r5
 80184aa:	4620      	mov	r0, r4
 80184ac:	f7ff febe 	bl	801822c <rshift>
 80184b0:	442f      	add	r7, r5
 80184b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80184b6:	42bb      	cmp	r3, r7
 80184b8:	da42      	bge.n	8018540 <__gethex+0x244>
 80184ba:	9801      	ldr	r0, [sp, #4]
 80184bc:	4621      	mov	r1, r4
 80184be:	f000 fa41 	bl	8018944 <_Bfree>
 80184c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80184c4:	2300      	movs	r3, #0
 80184c6:	6013      	str	r3, [r2, #0]
 80184c8:	25a3      	movs	r5, #163	@ 0xa3
 80184ca:	e793      	b.n	80183f4 <__gethex+0xf8>
 80184cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80184d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80184d2:	d012      	beq.n	80184fa <__gethex+0x1fe>
 80184d4:	2b20      	cmp	r3, #32
 80184d6:	d104      	bne.n	80184e2 <__gethex+0x1e6>
 80184d8:	f845 bb04 	str.w	fp, [r5], #4
 80184dc:	f04f 0b00 	mov.w	fp, #0
 80184e0:	465b      	mov	r3, fp
 80184e2:	7830      	ldrb	r0, [r6, #0]
 80184e4:	9303      	str	r3, [sp, #12]
 80184e6:	f7ff fef3 	bl	80182d0 <__hexdig_fun>
 80184ea:	9b03      	ldr	r3, [sp, #12]
 80184ec:	f000 000f 	and.w	r0, r0, #15
 80184f0:	4098      	lsls	r0, r3
 80184f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80184f6:	3304      	adds	r3, #4
 80184f8:	e7ae      	b.n	8018458 <__gethex+0x15c>
 80184fa:	45b1      	cmp	r9, r6
 80184fc:	d8ea      	bhi.n	80184d4 <__gethex+0x1d8>
 80184fe:	492b      	ldr	r1, [pc, #172]	@ (80185ac <__gethex+0x2b0>)
 8018500:	9303      	str	r3, [sp, #12]
 8018502:	2201      	movs	r2, #1
 8018504:	4630      	mov	r0, r6
 8018506:	f7fe feac 	bl	8017262 <strncmp>
 801850a:	9b03      	ldr	r3, [sp, #12]
 801850c:	2800      	cmp	r0, #0
 801850e:	d1e1      	bne.n	80184d4 <__gethex+0x1d8>
 8018510:	e7a2      	b.n	8018458 <__gethex+0x15c>
 8018512:	1ea9      	subs	r1, r5, #2
 8018514:	4620      	mov	r0, r4
 8018516:	f000 fe66 	bl	80191e6 <__any_on>
 801851a:	2800      	cmp	r0, #0
 801851c:	d0c2      	beq.n	80184a4 <__gethex+0x1a8>
 801851e:	f04f 0903 	mov.w	r9, #3
 8018522:	e7c1      	b.n	80184a8 <__gethex+0x1ac>
 8018524:	da09      	bge.n	801853a <__gethex+0x23e>
 8018526:	1b75      	subs	r5, r6, r5
 8018528:	4621      	mov	r1, r4
 801852a:	9801      	ldr	r0, [sp, #4]
 801852c:	462a      	mov	r2, r5
 801852e:	f000 fc21 	bl	8018d74 <__lshift>
 8018532:	1b7f      	subs	r7, r7, r5
 8018534:	4604      	mov	r4, r0
 8018536:	f100 0a14 	add.w	sl, r0, #20
 801853a:	f04f 0900 	mov.w	r9, #0
 801853e:	e7b8      	b.n	80184b2 <__gethex+0x1b6>
 8018540:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018544:	42bd      	cmp	r5, r7
 8018546:	dd6f      	ble.n	8018628 <__gethex+0x32c>
 8018548:	1bed      	subs	r5, r5, r7
 801854a:	42ae      	cmp	r6, r5
 801854c:	dc34      	bgt.n	80185b8 <__gethex+0x2bc>
 801854e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018552:	2b02      	cmp	r3, #2
 8018554:	d022      	beq.n	801859c <__gethex+0x2a0>
 8018556:	2b03      	cmp	r3, #3
 8018558:	d024      	beq.n	80185a4 <__gethex+0x2a8>
 801855a:	2b01      	cmp	r3, #1
 801855c:	d115      	bne.n	801858a <__gethex+0x28e>
 801855e:	42ae      	cmp	r6, r5
 8018560:	d113      	bne.n	801858a <__gethex+0x28e>
 8018562:	2e01      	cmp	r6, #1
 8018564:	d10b      	bne.n	801857e <__gethex+0x282>
 8018566:	9a02      	ldr	r2, [sp, #8]
 8018568:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801856c:	6013      	str	r3, [r2, #0]
 801856e:	2301      	movs	r3, #1
 8018570:	6123      	str	r3, [r4, #16]
 8018572:	f8ca 3000 	str.w	r3, [sl]
 8018576:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018578:	2562      	movs	r5, #98	@ 0x62
 801857a:	601c      	str	r4, [r3, #0]
 801857c:	e73a      	b.n	80183f4 <__gethex+0xf8>
 801857e:	1e71      	subs	r1, r6, #1
 8018580:	4620      	mov	r0, r4
 8018582:	f000 fe30 	bl	80191e6 <__any_on>
 8018586:	2800      	cmp	r0, #0
 8018588:	d1ed      	bne.n	8018566 <__gethex+0x26a>
 801858a:	9801      	ldr	r0, [sp, #4]
 801858c:	4621      	mov	r1, r4
 801858e:	f000 f9d9 	bl	8018944 <_Bfree>
 8018592:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018594:	2300      	movs	r3, #0
 8018596:	6013      	str	r3, [r2, #0]
 8018598:	2550      	movs	r5, #80	@ 0x50
 801859a:	e72b      	b.n	80183f4 <__gethex+0xf8>
 801859c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d1f3      	bne.n	801858a <__gethex+0x28e>
 80185a2:	e7e0      	b.n	8018566 <__gethex+0x26a>
 80185a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d1dd      	bne.n	8018566 <__gethex+0x26a>
 80185aa:	e7ee      	b.n	801858a <__gethex+0x28e>
 80185ac:	0801dfbc 	.word	0x0801dfbc
 80185b0:	0801e264 	.word	0x0801e264
 80185b4:	0801e275 	.word	0x0801e275
 80185b8:	1e6f      	subs	r7, r5, #1
 80185ba:	f1b9 0f00 	cmp.w	r9, #0
 80185be:	d130      	bne.n	8018622 <__gethex+0x326>
 80185c0:	b127      	cbz	r7, 80185cc <__gethex+0x2d0>
 80185c2:	4639      	mov	r1, r7
 80185c4:	4620      	mov	r0, r4
 80185c6:	f000 fe0e 	bl	80191e6 <__any_on>
 80185ca:	4681      	mov	r9, r0
 80185cc:	117a      	asrs	r2, r7, #5
 80185ce:	2301      	movs	r3, #1
 80185d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80185d4:	f007 071f 	and.w	r7, r7, #31
 80185d8:	40bb      	lsls	r3, r7
 80185da:	4213      	tst	r3, r2
 80185dc:	4629      	mov	r1, r5
 80185de:	4620      	mov	r0, r4
 80185e0:	bf18      	it	ne
 80185e2:	f049 0902 	orrne.w	r9, r9, #2
 80185e6:	f7ff fe21 	bl	801822c <rshift>
 80185ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80185ee:	1b76      	subs	r6, r6, r5
 80185f0:	2502      	movs	r5, #2
 80185f2:	f1b9 0f00 	cmp.w	r9, #0
 80185f6:	d047      	beq.n	8018688 <__gethex+0x38c>
 80185f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80185fc:	2b02      	cmp	r3, #2
 80185fe:	d015      	beq.n	801862c <__gethex+0x330>
 8018600:	2b03      	cmp	r3, #3
 8018602:	d017      	beq.n	8018634 <__gethex+0x338>
 8018604:	2b01      	cmp	r3, #1
 8018606:	d109      	bne.n	801861c <__gethex+0x320>
 8018608:	f019 0f02 	tst.w	r9, #2
 801860c:	d006      	beq.n	801861c <__gethex+0x320>
 801860e:	f8da 3000 	ldr.w	r3, [sl]
 8018612:	ea49 0903 	orr.w	r9, r9, r3
 8018616:	f019 0f01 	tst.w	r9, #1
 801861a:	d10e      	bne.n	801863a <__gethex+0x33e>
 801861c:	f045 0510 	orr.w	r5, r5, #16
 8018620:	e032      	b.n	8018688 <__gethex+0x38c>
 8018622:	f04f 0901 	mov.w	r9, #1
 8018626:	e7d1      	b.n	80185cc <__gethex+0x2d0>
 8018628:	2501      	movs	r5, #1
 801862a:	e7e2      	b.n	80185f2 <__gethex+0x2f6>
 801862c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801862e:	f1c3 0301 	rsb	r3, r3, #1
 8018632:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018636:	2b00      	cmp	r3, #0
 8018638:	d0f0      	beq.n	801861c <__gethex+0x320>
 801863a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801863e:	f104 0314 	add.w	r3, r4, #20
 8018642:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018646:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801864a:	f04f 0c00 	mov.w	ip, #0
 801864e:	4618      	mov	r0, r3
 8018650:	f853 2b04 	ldr.w	r2, [r3], #4
 8018654:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018658:	d01b      	beq.n	8018692 <__gethex+0x396>
 801865a:	3201      	adds	r2, #1
 801865c:	6002      	str	r2, [r0, #0]
 801865e:	2d02      	cmp	r5, #2
 8018660:	f104 0314 	add.w	r3, r4, #20
 8018664:	d13c      	bne.n	80186e0 <__gethex+0x3e4>
 8018666:	f8d8 2000 	ldr.w	r2, [r8]
 801866a:	3a01      	subs	r2, #1
 801866c:	42b2      	cmp	r2, r6
 801866e:	d109      	bne.n	8018684 <__gethex+0x388>
 8018670:	1171      	asrs	r1, r6, #5
 8018672:	2201      	movs	r2, #1
 8018674:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018678:	f006 061f 	and.w	r6, r6, #31
 801867c:	fa02 f606 	lsl.w	r6, r2, r6
 8018680:	421e      	tst	r6, r3
 8018682:	d13a      	bne.n	80186fa <__gethex+0x3fe>
 8018684:	f045 0520 	orr.w	r5, r5, #32
 8018688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801868a:	601c      	str	r4, [r3, #0]
 801868c:	9b02      	ldr	r3, [sp, #8]
 801868e:	601f      	str	r7, [r3, #0]
 8018690:	e6b0      	b.n	80183f4 <__gethex+0xf8>
 8018692:	4299      	cmp	r1, r3
 8018694:	f843 cc04 	str.w	ip, [r3, #-4]
 8018698:	d8d9      	bhi.n	801864e <__gethex+0x352>
 801869a:	68a3      	ldr	r3, [r4, #8]
 801869c:	459b      	cmp	fp, r3
 801869e:	db17      	blt.n	80186d0 <__gethex+0x3d4>
 80186a0:	6861      	ldr	r1, [r4, #4]
 80186a2:	9801      	ldr	r0, [sp, #4]
 80186a4:	3101      	adds	r1, #1
 80186a6:	f000 f90d 	bl	80188c4 <_Balloc>
 80186aa:	4681      	mov	r9, r0
 80186ac:	b918      	cbnz	r0, 80186b6 <__gethex+0x3ba>
 80186ae:	4b1a      	ldr	r3, [pc, #104]	@ (8018718 <__gethex+0x41c>)
 80186b0:	4602      	mov	r2, r0
 80186b2:	2184      	movs	r1, #132	@ 0x84
 80186b4:	e6c5      	b.n	8018442 <__gethex+0x146>
 80186b6:	6922      	ldr	r2, [r4, #16]
 80186b8:	3202      	adds	r2, #2
 80186ba:	f104 010c 	add.w	r1, r4, #12
 80186be:	0092      	lsls	r2, r2, #2
 80186c0:	300c      	adds	r0, #12
 80186c2:	f7fe fee2 	bl	801748a <memcpy>
 80186c6:	4621      	mov	r1, r4
 80186c8:	9801      	ldr	r0, [sp, #4]
 80186ca:	f000 f93b 	bl	8018944 <_Bfree>
 80186ce:	464c      	mov	r4, r9
 80186d0:	6923      	ldr	r3, [r4, #16]
 80186d2:	1c5a      	adds	r2, r3, #1
 80186d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80186d8:	6122      	str	r2, [r4, #16]
 80186da:	2201      	movs	r2, #1
 80186dc:	615a      	str	r2, [r3, #20]
 80186de:	e7be      	b.n	801865e <__gethex+0x362>
 80186e0:	6922      	ldr	r2, [r4, #16]
 80186e2:	455a      	cmp	r2, fp
 80186e4:	dd0b      	ble.n	80186fe <__gethex+0x402>
 80186e6:	2101      	movs	r1, #1
 80186e8:	4620      	mov	r0, r4
 80186ea:	f7ff fd9f 	bl	801822c <rshift>
 80186ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80186f2:	3701      	adds	r7, #1
 80186f4:	42bb      	cmp	r3, r7
 80186f6:	f6ff aee0 	blt.w	80184ba <__gethex+0x1be>
 80186fa:	2501      	movs	r5, #1
 80186fc:	e7c2      	b.n	8018684 <__gethex+0x388>
 80186fe:	f016 061f 	ands.w	r6, r6, #31
 8018702:	d0fa      	beq.n	80186fa <__gethex+0x3fe>
 8018704:	4453      	add	r3, sl
 8018706:	f1c6 0620 	rsb	r6, r6, #32
 801870a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801870e:	f000 f9cb 	bl	8018aa8 <__hi0bits>
 8018712:	42b0      	cmp	r0, r6
 8018714:	dbe7      	blt.n	80186e6 <__gethex+0x3ea>
 8018716:	e7f0      	b.n	80186fa <__gethex+0x3fe>
 8018718:	0801e264 	.word	0x0801e264

0801871c <L_shift>:
 801871c:	f1c2 0208 	rsb	r2, r2, #8
 8018720:	0092      	lsls	r2, r2, #2
 8018722:	b570      	push	{r4, r5, r6, lr}
 8018724:	f1c2 0620 	rsb	r6, r2, #32
 8018728:	6843      	ldr	r3, [r0, #4]
 801872a:	6804      	ldr	r4, [r0, #0]
 801872c:	fa03 f506 	lsl.w	r5, r3, r6
 8018730:	432c      	orrs	r4, r5
 8018732:	40d3      	lsrs	r3, r2
 8018734:	6004      	str	r4, [r0, #0]
 8018736:	f840 3f04 	str.w	r3, [r0, #4]!
 801873a:	4288      	cmp	r0, r1
 801873c:	d3f4      	bcc.n	8018728 <L_shift+0xc>
 801873e:	bd70      	pop	{r4, r5, r6, pc}

08018740 <__match>:
 8018740:	b530      	push	{r4, r5, lr}
 8018742:	6803      	ldr	r3, [r0, #0]
 8018744:	3301      	adds	r3, #1
 8018746:	f811 4b01 	ldrb.w	r4, [r1], #1
 801874a:	b914      	cbnz	r4, 8018752 <__match+0x12>
 801874c:	6003      	str	r3, [r0, #0]
 801874e:	2001      	movs	r0, #1
 8018750:	bd30      	pop	{r4, r5, pc}
 8018752:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018756:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801875a:	2d19      	cmp	r5, #25
 801875c:	bf98      	it	ls
 801875e:	3220      	addls	r2, #32
 8018760:	42a2      	cmp	r2, r4
 8018762:	d0f0      	beq.n	8018746 <__match+0x6>
 8018764:	2000      	movs	r0, #0
 8018766:	e7f3      	b.n	8018750 <__match+0x10>

08018768 <__hexnan>:
 8018768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801876c:	680b      	ldr	r3, [r1, #0]
 801876e:	6801      	ldr	r1, [r0, #0]
 8018770:	115e      	asrs	r6, r3, #5
 8018772:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018776:	f013 031f 	ands.w	r3, r3, #31
 801877a:	b087      	sub	sp, #28
 801877c:	bf18      	it	ne
 801877e:	3604      	addne	r6, #4
 8018780:	2500      	movs	r5, #0
 8018782:	1f37      	subs	r7, r6, #4
 8018784:	4682      	mov	sl, r0
 8018786:	4690      	mov	r8, r2
 8018788:	9301      	str	r3, [sp, #4]
 801878a:	f846 5c04 	str.w	r5, [r6, #-4]
 801878e:	46b9      	mov	r9, r7
 8018790:	463c      	mov	r4, r7
 8018792:	9502      	str	r5, [sp, #8]
 8018794:	46ab      	mov	fp, r5
 8018796:	784a      	ldrb	r2, [r1, #1]
 8018798:	1c4b      	adds	r3, r1, #1
 801879a:	9303      	str	r3, [sp, #12]
 801879c:	b342      	cbz	r2, 80187f0 <__hexnan+0x88>
 801879e:	4610      	mov	r0, r2
 80187a0:	9105      	str	r1, [sp, #20]
 80187a2:	9204      	str	r2, [sp, #16]
 80187a4:	f7ff fd94 	bl	80182d0 <__hexdig_fun>
 80187a8:	2800      	cmp	r0, #0
 80187aa:	d151      	bne.n	8018850 <__hexnan+0xe8>
 80187ac:	9a04      	ldr	r2, [sp, #16]
 80187ae:	9905      	ldr	r1, [sp, #20]
 80187b0:	2a20      	cmp	r2, #32
 80187b2:	d818      	bhi.n	80187e6 <__hexnan+0x7e>
 80187b4:	9b02      	ldr	r3, [sp, #8]
 80187b6:	459b      	cmp	fp, r3
 80187b8:	dd13      	ble.n	80187e2 <__hexnan+0x7a>
 80187ba:	454c      	cmp	r4, r9
 80187bc:	d206      	bcs.n	80187cc <__hexnan+0x64>
 80187be:	2d07      	cmp	r5, #7
 80187c0:	dc04      	bgt.n	80187cc <__hexnan+0x64>
 80187c2:	462a      	mov	r2, r5
 80187c4:	4649      	mov	r1, r9
 80187c6:	4620      	mov	r0, r4
 80187c8:	f7ff ffa8 	bl	801871c <L_shift>
 80187cc:	4544      	cmp	r4, r8
 80187ce:	d952      	bls.n	8018876 <__hexnan+0x10e>
 80187d0:	2300      	movs	r3, #0
 80187d2:	f1a4 0904 	sub.w	r9, r4, #4
 80187d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80187da:	f8cd b008 	str.w	fp, [sp, #8]
 80187de:	464c      	mov	r4, r9
 80187e0:	461d      	mov	r5, r3
 80187e2:	9903      	ldr	r1, [sp, #12]
 80187e4:	e7d7      	b.n	8018796 <__hexnan+0x2e>
 80187e6:	2a29      	cmp	r2, #41	@ 0x29
 80187e8:	d157      	bne.n	801889a <__hexnan+0x132>
 80187ea:	3102      	adds	r1, #2
 80187ec:	f8ca 1000 	str.w	r1, [sl]
 80187f0:	f1bb 0f00 	cmp.w	fp, #0
 80187f4:	d051      	beq.n	801889a <__hexnan+0x132>
 80187f6:	454c      	cmp	r4, r9
 80187f8:	d206      	bcs.n	8018808 <__hexnan+0xa0>
 80187fa:	2d07      	cmp	r5, #7
 80187fc:	dc04      	bgt.n	8018808 <__hexnan+0xa0>
 80187fe:	462a      	mov	r2, r5
 8018800:	4649      	mov	r1, r9
 8018802:	4620      	mov	r0, r4
 8018804:	f7ff ff8a 	bl	801871c <L_shift>
 8018808:	4544      	cmp	r4, r8
 801880a:	d936      	bls.n	801887a <__hexnan+0x112>
 801880c:	f1a8 0204 	sub.w	r2, r8, #4
 8018810:	4623      	mov	r3, r4
 8018812:	f853 1b04 	ldr.w	r1, [r3], #4
 8018816:	f842 1f04 	str.w	r1, [r2, #4]!
 801881a:	429f      	cmp	r7, r3
 801881c:	d2f9      	bcs.n	8018812 <__hexnan+0xaa>
 801881e:	1b3b      	subs	r3, r7, r4
 8018820:	f023 0303 	bic.w	r3, r3, #3
 8018824:	3304      	adds	r3, #4
 8018826:	3401      	adds	r4, #1
 8018828:	3e03      	subs	r6, #3
 801882a:	42b4      	cmp	r4, r6
 801882c:	bf88      	it	hi
 801882e:	2304      	movhi	r3, #4
 8018830:	4443      	add	r3, r8
 8018832:	2200      	movs	r2, #0
 8018834:	f843 2b04 	str.w	r2, [r3], #4
 8018838:	429f      	cmp	r7, r3
 801883a:	d2fb      	bcs.n	8018834 <__hexnan+0xcc>
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	b91b      	cbnz	r3, 8018848 <__hexnan+0xe0>
 8018840:	4547      	cmp	r7, r8
 8018842:	d128      	bne.n	8018896 <__hexnan+0x12e>
 8018844:	2301      	movs	r3, #1
 8018846:	603b      	str	r3, [r7, #0]
 8018848:	2005      	movs	r0, #5
 801884a:	b007      	add	sp, #28
 801884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018850:	3501      	adds	r5, #1
 8018852:	2d08      	cmp	r5, #8
 8018854:	f10b 0b01 	add.w	fp, fp, #1
 8018858:	dd06      	ble.n	8018868 <__hexnan+0x100>
 801885a:	4544      	cmp	r4, r8
 801885c:	d9c1      	bls.n	80187e2 <__hexnan+0x7a>
 801885e:	2300      	movs	r3, #0
 8018860:	f844 3c04 	str.w	r3, [r4, #-4]
 8018864:	2501      	movs	r5, #1
 8018866:	3c04      	subs	r4, #4
 8018868:	6822      	ldr	r2, [r4, #0]
 801886a:	f000 000f 	and.w	r0, r0, #15
 801886e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018872:	6020      	str	r0, [r4, #0]
 8018874:	e7b5      	b.n	80187e2 <__hexnan+0x7a>
 8018876:	2508      	movs	r5, #8
 8018878:	e7b3      	b.n	80187e2 <__hexnan+0x7a>
 801887a:	9b01      	ldr	r3, [sp, #4]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d0dd      	beq.n	801883c <__hexnan+0xd4>
 8018880:	f1c3 0320 	rsb	r3, r3, #32
 8018884:	f04f 32ff 	mov.w	r2, #4294967295
 8018888:	40da      	lsrs	r2, r3
 801888a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801888e:	4013      	ands	r3, r2
 8018890:	f846 3c04 	str.w	r3, [r6, #-4]
 8018894:	e7d2      	b.n	801883c <__hexnan+0xd4>
 8018896:	3f04      	subs	r7, #4
 8018898:	e7d0      	b.n	801883c <__hexnan+0xd4>
 801889a:	2004      	movs	r0, #4
 801889c:	e7d5      	b.n	801884a <__hexnan+0xe2>

0801889e <__ascii_mbtowc>:
 801889e:	b082      	sub	sp, #8
 80188a0:	b901      	cbnz	r1, 80188a4 <__ascii_mbtowc+0x6>
 80188a2:	a901      	add	r1, sp, #4
 80188a4:	b142      	cbz	r2, 80188b8 <__ascii_mbtowc+0x1a>
 80188a6:	b14b      	cbz	r3, 80188bc <__ascii_mbtowc+0x1e>
 80188a8:	7813      	ldrb	r3, [r2, #0]
 80188aa:	600b      	str	r3, [r1, #0]
 80188ac:	7812      	ldrb	r2, [r2, #0]
 80188ae:	1e10      	subs	r0, r2, #0
 80188b0:	bf18      	it	ne
 80188b2:	2001      	movne	r0, #1
 80188b4:	b002      	add	sp, #8
 80188b6:	4770      	bx	lr
 80188b8:	4610      	mov	r0, r2
 80188ba:	e7fb      	b.n	80188b4 <__ascii_mbtowc+0x16>
 80188bc:	f06f 0001 	mvn.w	r0, #1
 80188c0:	e7f8      	b.n	80188b4 <__ascii_mbtowc+0x16>
	...

080188c4 <_Balloc>:
 80188c4:	b570      	push	{r4, r5, r6, lr}
 80188c6:	69c6      	ldr	r6, [r0, #28]
 80188c8:	4604      	mov	r4, r0
 80188ca:	460d      	mov	r5, r1
 80188cc:	b976      	cbnz	r6, 80188ec <_Balloc+0x28>
 80188ce:	2010      	movs	r0, #16
 80188d0:	f7fc fd48 	bl	8015364 <malloc>
 80188d4:	4602      	mov	r2, r0
 80188d6:	61e0      	str	r0, [r4, #28]
 80188d8:	b920      	cbnz	r0, 80188e4 <_Balloc+0x20>
 80188da:	4b18      	ldr	r3, [pc, #96]	@ (801893c <_Balloc+0x78>)
 80188dc:	4818      	ldr	r0, [pc, #96]	@ (8018940 <_Balloc+0x7c>)
 80188de:	216b      	movs	r1, #107	@ 0x6b
 80188e0:	f7fe fdf0 	bl	80174c4 <__assert_func>
 80188e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80188e8:	6006      	str	r6, [r0, #0]
 80188ea:	60c6      	str	r6, [r0, #12]
 80188ec:	69e6      	ldr	r6, [r4, #28]
 80188ee:	68f3      	ldr	r3, [r6, #12]
 80188f0:	b183      	cbz	r3, 8018914 <_Balloc+0x50>
 80188f2:	69e3      	ldr	r3, [r4, #28]
 80188f4:	68db      	ldr	r3, [r3, #12]
 80188f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80188fa:	b9b8      	cbnz	r0, 801892c <_Balloc+0x68>
 80188fc:	2101      	movs	r1, #1
 80188fe:	fa01 f605 	lsl.w	r6, r1, r5
 8018902:	1d72      	adds	r2, r6, #5
 8018904:	0092      	lsls	r2, r2, #2
 8018906:	4620      	mov	r0, r4
 8018908:	f000 fed1 	bl	80196ae <_calloc_r>
 801890c:	b160      	cbz	r0, 8018928 <_Balloc+0x64>
 801890e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018912:	e00e      	b.n	8018932 <_Balloc+0x6e>
 8018914:	2221      	movs	r2, #33	@ 0x21
 8018916:	2104      	movs	r1, #4
 8018918:	4620      	mov	r0, r4
 801891a:	f000 fec8 	bl	80196ae <_calloc_r>
 801891e:	69e3      	ldr	r3, [r4, #28]
 8018920:	60f0      	str	r0, [r6, #12]
 8018922:	68db      	ldr	r3, [r3, #12]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d1e4      	bne.n	80188f2 <_Balloc+0x2e>
 8018928:	2000      	movs	r0, #0
 801892a:	bd70      	pop	{r4, r5, r6, pc}
 801892c:	6802      	ldr	r2, [r0, #0]
 801892e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018932:	2300      	movs	r3, #0
 8018934:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018938:	e7f7      	b.n	801892a <_Balloc+0x66>
 801893a:	bf00      	nop
 801893c:	0801e14a 	.word	0x0801e14a
 8018940:	0801e2d5 	.word	0x0801e2d5

08018944 <_Bfree>:
 8018944:	b570      	push	{r4, r5, r6, lr}
 8018946:	69c6      	ldr	r6, [r0, #28]
 8018948:	4605      	mov	r5, r0
 801894a:	460c      	mov	r4, r1
 801894c:	b976      	cbnz	r6, 801896c <_Bfree+0x28>
 801894e:	2010      	movs	r0, #16
 8018950:	f7fc fd08 	bl	8015364 <malloc>
 8018954:	4602      	mov	r2, r0
 8018956:	61e8      	str	r0, [r5, #28]
 8018958:	b920      	cbnz	r0, 8018964 <_Bfree+0x20>
 801895a:	4b09      	ldr	r3, [pc, #36]	@ (8018980 <_Bfree+0x3c>)
 801895c:	4809      	ldr	r0, [pc, #36]	@ (8018984 <_Bfree+0x40>)
 801895e:	218f      	movs	r1, #143	@ 0x8f
 8018960:	f7fe fdb0 	bl	80174c4 <__assert_func>
 8018964:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018968:	6006      	str	r6, [r0, #0]
 801896a:	60c6      	str	r6, [r0, #12]
 801896c:	b13c      	cbz	r4, 801897e <_Bfree+0x3a>
 801896e:	69eb      	ldr	r3, [r5, #28]
 8018970:	6862      	ldr	r2, [r4, #4]
 8018972:	68db      	ldr	r3, [r3, #12]
 8018974:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018978:	6021      	str	r1, [r4, #0]
 801897a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801897e:	bd70      	pop	{r4, r5, r6, pc}
 8018980:	0801e14a 	.word	0x0801e14a
 8018984:	0801e2d5 	.word	0x0801e2d5

08018988 <__multadd>:
 8018988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801898c:	690d      	ldr	r5, [r1, #16]
 801898e:	4607      	mov	r7, r0
 8018990:	460c      	mov	r4, r1
 8018992:	461e      	mov	r6, r3
 8018994:	f101 0c14 	add.w	ip, r1, #20
 8018998:	2000      	movs	r0, #0
 801899a:	f8dc 3000 	ldr.w	r3, [ip]
 801899e:	b299      	uxth	r1, r3
 80189a0:	fb02 6101 	mla	r1, r2, r1, r6
 80189a4:	0c1e      	lsrs	r6, r3, #16
 80189a6:	0c0b      	lsrs	r3, r1, #16
 80189a8:	fb02 3306 	mla	r3, r2, r6, r3
 80189ac:	b289      	uxth	r1, r1
 80189ae:	3001      	adds	r0, #1
 80189b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80189b4:	4285      	cmp	r5, r0
 80189b6:	f84c 1b04 	str.w	r1, [ip], #4
 80189ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80189be:	dcec      	bgt.n	801899a <__multadd+0x12>
 80189c0:	b30e      	cbz	r6, 8018a06 <__multadd+0x7e>
 80189c2:	68a3      	ldr	r3, [r4, #8]
 80189c4:	42ab      	cmp	r3, r5
 80189c6:	dc19      	bgt.n	80189fc <__multadd+0x74>
 80189c8:	6861      	ldr	r1, [r4, #4]
 80189ca:	4638      	mov	r0, r7
 80189cc:	3101      	adds	r1, #1
 80189ce:	f7ff ff79 	bl	80188c4 <_Balloc>
 80189d2:	4680      	mov	r8, r0
 80189d4:	b928      	cbnz	r0, 80189e2 <__multadd+0x5a>
 80189d6:	4602      	mov	r2, r0
 80189d8:	4b0c      	ldr	r3, [pc, #48]	@ (8018a0c <__multadd+0x84>)
 80189da:	480d      	ldr	r0, [pc, #52]	@ (8018a10 <__multadd+0x88>)
 80189dc:	21ba      	movs	r1, #186	@ 0xba
 80189de:	f7fe fd71 	bl	80174c4 <__assert_func>
 80189e2:	6922      	ldr	r2, [r4, #16]
 80189e4:	3202      	adds	r2, #2
 80189e6:	f104 010c 	add.w	r1, r4, #12
 80189ea:	0092      	lsls	r2, r2, #2
 80189ec:	300c      	adds	r0, #12
 80189ee:	f7fe fd4c 	bl	801748a <memcpy>
 80189f2:	4621      	mov	r1, r4
 80189f4:	4638      	mov	r0, r7
 80189f6:	f7ff ffa5 	bl	8018944 <_Bfree>
 80189fa:	4644      	mov	r4, r8
 80189fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018a00:	3501      	adds	r5, #1
 8018a02:	615e      	str	r6, [r3, #20]
 8018a04:	6125      	str	r5, [r4, #16]
 8018a06:	4620      	mov	r0, r4
 8018a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a0c:	0801e264 	.word	0x0801e264
 8018a10:	0801e2d5 	.word	0x0801e2d5

08018a14 <__s2b>:
 8018a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018a18:	460c      	mov	r4, r1
 8018a1a:	4615      	mov	r5, r2
 8018a1c:	461f      	mov	r7, r3
 8018a1e:	2209      	movs	r2, #9
 8018a20:	3308      	adds	r3, #8
 8018a22:	4606      	mov	r6, r0
 8018a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8018a28:	2100      	movs	r1, #0
 8018a2a:	2201      	movs	r2, #1
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	db09      	blt.n	8018a44 <__s2b+0x30>
 8018a30:	4630      	mov	r0, r6
 8018a32:	f7ff ff47 	bl	80188c4 <_Balloc>
 8018a36:	b940      	cbnz	r0, 8018a4a <__s2b+0x36>
 8018a38:	4602      	mov	r2, r0
 8018a3a:	4b19      	ldr	r3, [pc, #100]	@ (8018aa0 <__s2b+0x8c>)
 8018a3c:	4819      	ldr	r0, [pc, #100]	@ (8018aa4 <__s2b+0x90>)
 8018a3e:	21d3      	movs	r1, #211	@ 0xd3
 8018a40:	f7fe fd40 	bl	80174c4 <__assert_func>
 8018a44:	0052      	lsls	r2, r2, #1
 8018a46:	3101      	adds	r1, #1
 8018a48:	e7f0      	b.n	8018a2c <__s2b+0x18>
 8018a4a:	9b08      	ldr	r3, [sp, #32]
 8018a4c:	6143      	str	r3, [r0, #20]
 8018a4e:	2d09      	cmp	r5, #9
 8018a50:	f04f 0301 	mov.w	r3, #1
 8018a54:	6103      	str	r3, [r0, #16]
 8018a56:	dd16      	ble.n	8018a86 <__s2b+0x72>
 8018a58:	f104 0909 	add.w	r9, r4, #9
 8018a5c:	46c8      	mov	r8, r9
 8018a5e:	442c      	add	r4, r5
 8018a60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018a64:	4601      	mov	r1, r0
 8018a66:	3b30      	subs	r3, #48	@ 0x30
 8018a68:	220a      	movs	r2, #10
 8018a6a:	4630      	mov	r0, r6
 8018a6c:	f7ff ff8c 	bl	8018988 <__multadd>
 8018a70:	45a0      	cmp	r8, r4
 8018a72:	d1f5      	bne.n	8018a60 <__s2b+0x4c>
 8018a74:	f1a5 0408 	sub.w	r4, r5, #8
 8018a78:	444c      	add	r4, r9
 8018a7a:	1b2d      	subs	r5, r5, r4
 8018a7c:	1963      	adds	r3, r4, r5
 8018a7e:	42bb      	cmp	r3, r7
 8018a80:	db04      	blt.n	8018a8c <__s2b+0x78>
 8018a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a86:	340a      	adds	r4, #10
 8018a88:	2509      	movs	r5, #9
 8018a8a:	e7f6      	b.n	8018a7a <__s2b+0x66>
 8018a8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018a90:	4601      	mov	r1, r0
 8018a92:	3b30      	subs	r3, #48	@ 0x30
 8018a94:	220a      	movs	r2, #10
 8018a96:	4630      	mov	r0, r6
 8018a98:	f7ff ff76 	bl	8018988 <__multadd>
 8018a9c:	e7ee      	b.n	8018a7c <__s2b+0x68>
 8018a9e:	bf00      	nop
 8018aa0:	0801e264 	.word	0x0801e264
 8018aa4:	0801e2d5 	.word	0x0801e2d5

08018aa8 <__hi0bits>:
 8018aa8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018aac:	4603      	mov	r3, r0
 8018aae:	bf36      	itet	cc
 8018ab0:	0403      	lslcc	r3, r0, #16
 8018ab2:	2000      	movcs	r0, #0
 8018ab4:	2010      	movcc	r0, #16
 8018ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018aba:	bf3c      	itt	cc
 8018abc:	021b      	lslcc	r3, r3, #8
 8018abe:	3008      	addcc	r0, #8
 8018ac0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018ac4:	bf3c      	itt	cc
 8018ac6:	011b      	lslcc	r3, r3, #4
 8018ac8:	3004      	addcc	r0, #4
 8018aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018ace:	bf3c      	itt	cc
 8018ad0:	009b      	lslcc	r3, r3, #2
 8018ad2:	3002      	addcc	r0, #2
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	db05      	blt.n	8018ae4 <__hi0bits+0x3c>
 8018ad8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018adc:	f100 0001 	add.w	r0, r0, #1
 8018ae0:	bf08      	it	eq
 8018ae2:	2020      	moveq	r0, #32
 8018ae4:	4770      	bx	lr

08018ae6 <__lo0bits>:
 8018ae6:	6803      	ldr	r3, [r0, #0]
 8018ae8:	4602      	mov	r2, r0
 8018aea:	f013 0007 	ands.w	r0, r3, #7
 8018aee:	d00b      	beq.n	8018b08 <__lo0bits+0x22>
 8018af0:	07d9      	lsls	r1, r3, #31
 8018af2:	d421      	bmi.n	8018b38 <__lo0bits+0x52>
 8018af4:	0798      	lsls	r0, r3, #30
 8018af6:	bf49      	itett	mi
 8018af8:	085b      	lsrmi	r3, r3, #1
 8018afa:	089b      	lsrpl	r3, r3, #2
 8018afc:	2001      	movmi	r0, #1
 8018afe:	6013      	strmi	r3, [r2, #0]
 8018b00:	bf5c      	itt	pl
 8018b02:	6013      	strpl	r3, [r2, #0]
 8018b04:	2002      	movpl	r0, #2
 8018b06:	4770      	bx	lr
 8018b08:	b299      	uxth	r1, r3
 8018b0a:	b909      	cbnz	r1, 8018b10 <__lo0bits+0x2a>
 8018b0c:	0c1b      	lsrs	r3, r3, #16
 8018b0e:	2010      	movs	r0, #16
 8018b10:	b2d9      	uxtb	r1, r3
 8018b12:	b909      	cbnz	r1, 8018b18 <__lo0bits+0x32>
 8018b14:	3008      	adds	r0, #8
 8018b16:	0a1b      	lsrs	r3, r3, #8
 8018b18:	0719      	lsls	r1, r3, #28
 8018b1a:	bf04      	itt	eq
 8018b1c:	091b      	lsreq	r3, r3, #4
 8018b1e:	3004      	addeq	r0, #4
 8018b20:	0799      	lsls	r1, r3, #30
 8018b22:	bf04      	itt	eq
 8018b24:	089b      	lsreq	r3, r3, #2
 8018b26:	3002      	addeq	r0, #2
 8018b28:	07d9      	lsls	r1, r3, #31
 8018b2a:	d403      	bmi.n	8018b34 <__lo0bits+0x4e>
 8018b2c:	085b      	lsrs	r3, r3, #1
 8018b2e:	f100 0001 	add.w	r0, r0, #1
 8018b32:	d003      	beq.n	8018b3c <__lo0bits+0x56>
 8018b34:	6013      	str	r3, [r2, #0]
 8018b36:	4770      	bx	lr
 8018b38:	2000      	movs	r0, #0
 8018b3a:	4770      	bx	lr
 8018b3c:	2020      	movs	r0, #32
 8018b3e:	4770      	bx	lr

08018b40 <__i2b>:
 8018b40:	b510      	push	{r4, lr}
 8018b42:	460c      	mov	r4, r1
 8018b44:	2101      	movs	r1, #1
 8018b46:	f7ff febd 	bl	80188c4 <_Balloc>
 8018b4a:	4602      	mov	r2, r0
 8018b4c:	b928      	cbnz	r0, 8018b5a <__i2b+0x1a>
 8018b4e:	4b05      	ldr	r3, [pc, #20]	@ (8018b64 <__i2b+0x24>)
 8018b50:	4805      	ldr	r0, [pc, #20]	@ (8018b68 <__i2b+0x28>)
 8018b52:	f240 1145 	movw	r1, #325	@ 0x145
 8018b56:	f7fe fcb5 	bl	80174c4 <__assert_func>
 8018b5a:	2301      	movs	r3, #1
 8018b5c:	6144      	str	r4, [r0, #20]
 8018b5e:	6103      	str	r3, [r0, #16]
 8018b60:	bd10      	pop	{r4, pc}
 8018b62:	bf00      	nop
 8018b64:	0801e264 	.word	0x0801e264
 8018b68:	0801e2d5 	.word	0x0801e2d5

08018b6c <__multiply>:
 8018b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b70:	4614      	mov	r4, r2
 8018b72:	690a      	ldr	r2, [r1, #16]
 8018b74:	6923      	ldr	r3, [r4, #16]
 8018b76:	429a      	cmp	r2, r3
 8018b78:	bfa8      	it	ge
 8018b7a:	4623      	movge	r3, r4
 8018b7c:	460f      	mov	r7, r1
 8018b7e:	bfa4      	itt	ge
 8018b80:	460c      	movge	r4, r1
 8018b82:	461f      	movge	r7, r3
 8018b84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8018b88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8018b8c:	68a3      	ldr	r3, [r4, #8]
 8018b8e:	6861      	ldr	r1, [r4, #4]
 8018b90:	eb0a 0609 	add.w	r6, sl, r9
 8018b94:	42b3      	cmp	r3, r6
 8018b96:	b085      	sub	sp, #20
 8018b98:	bfb8      	it	lt
 8018b9a:	3101      	addlt	r1, #1
 8018b9c:	f7ff fe92 	bl	80188c4 <_Balloc>
 8018ba0:	b930      	cbnz	r0, 8018bb0 <__multiply+0x44>
 8018ba2:	4602      	mov	r2, r0
 8018ba4:	4b44      	ldr	r3, [pc, #272]	@ (8018cb8 <__multiply+0x14c>)
 8018ba6:	4845      	ldr	r0, [pc, #276]	@ (8018cbc <__multiply+0x150>)
 8018ba8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018bac:	f7fe fc8a 	bl	80174c4 <__assert_func>
 8018bb0:	f100 0514 	add.w	r5, r0, #20
 8018bb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8018bb8:	462b      	mov	r3, r5
 8018bba:	2200      	movs	r2, #0
 8018bbc:	4543      	cmp	r3, r8
 8018bbe:	d321      	bcc.n	8018c04 <__multiply+0x98>
 8018bc0:	f107 0114 	add.w	r1, r7, #20
 8018bc4:	f104 0214 	add.w	r2, r4, #20
 8018bc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8018bcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8018bd0:	9302      	str	r3, [sp, #8]
 8018bd2:	1b13      	subs	r3, r2, r4
 8018bd4:	3b15      	subs	r3, #21
 8018bd6:	f023 0303 	bic.w	r3, r3, #3
 8018bda:	3304      	adds	r3, #4
 8018bdc:	f104 0715 	add.w	r7, r4, #21
 8018be0:	42ba      	cmp	r2, r7
 8018be2:	bf38      	it	cc
 8018be4:	2304      	movcc	r3, #4
 8018be6:	9301      	str	r3, [sp, #4]
 8018be8:	9b02      	ldr	r3, [sp, #8]
 8018bea:	9103      	str	r1, [sp, #12]
 8018bec:	428b      	cmp	r3, r1
 8018bee:	d80c      	bhi.n	8018c0a <__multiply+0x9e>
 8018bf0:	2e00      	cmp	r6, #0
 8018bf2:	dd03      	ble.n	8018bfc <__multiply+0x90>
 8018bf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d05b      	beq.n	8018cb4 <__multiply+0x148>
 8018bfc:	6106      	str	r6, [r0, #16]
 8018bfe:	b005      	add	sp, #20
 8018c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c04:	f843 2b04 	str.w	r2, [r3], #4
 8018c08:	e7d8      	b.n	8018bbc <__multiply+0x50>
 8018c0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8018c0e:	f1ba 0f00 	cmp.w	sl, #0
 8018c12:	d024      	beq.n	8018c5e <__multiply+0xf2>
 8018c14:	f104 0e14 	add.w	lr, r4, #20
 8018c18:	46a9      	mov	r9, r5
 8018c1a:	f04f 0c00 	mov.w	ip, #0
 8018c1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018c22:	f8d9 3000 	ldr.w	r3, [r9]
 8018c26:	fa1f fb87 	uxth.w	fp, r7
 8018c2a:	b29b      	uxth	r3, r3
 8018c2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8018c30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8018c34:	f8d9 7000 	ldr.w	r7, [r9]
 8018c38:	4463      	add	r3, ip
 8018c3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018c3e:	fb0a c70b 	mla	r7, sl, fp, ip
 8018c42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8018c46:	b29b      	uxth	r3, r3
 8018c48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018c4c:	4572      	cmp	r2, lr
 8018c4e:	f849 3b04 	str.w	r3, [r9], #4
 8018c52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8018c56:	d8e2      	bhi.n	8018c1e <__multiply+0xb2>
 8018c58:	9b01      	ldr	r3, [sp, #4]
 8018c5a:	f845 c003 	str.w	ip, [r5, r3]
 8018c5e:	9b03      	ldr	r3, [sp, #12]
 8018c60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018c64:	3104      	adds	r1, #4
 8018c66:	f1b9 0f00 	cmp.w	r9, #0
 8018c6a:	d021      	beq.n	8018cb0 <__multiply+0x144>
 8018c6c:	682b      	ldr	r3, [r5, #0]
 8018c6e:	f104 0c14 	add.w	ip, r4, #20
 8018c72:	46ae      	mov	lr, r5
 8018c74:	f04f 0a00 	mov.w	sl, #0
 8018c78:	f8bc b000 	ldrh.w	fp, [ip]
 8018c7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8018c80:	fb09 770b 	mla	r7, r9, fp, r7
 8018c84:	4457      	add	r7, sl
 8018c86:	b29b      	uxth	r3, r3
 8018c88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8018c8c:	f84e 3b04 	str.w	r3, [lr], #4
 8018c90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8018c94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018c98:	f8be 3000 	ldrh.w	r3, [lr]
 8018c9c:	fb09 330a 	mla	r3, r9, sl, r3
 8018ca0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8018ca4:	4562      	cmp	r2, ip
 8018ca6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018caa:	d8e5      	bhi.n	8018c78 <__multiply+0x10c>
 8018cac:	9f01      	ldr	r7, [sp, #4]
 8018cae:	51eb      	str	r3, [r5, r7]
 8018cb0:	3504      	adds	r5, #4
 8018cb2:	e799      	b.n	8018be8 <__multiply+0x7c>
 8018cb4:	3e01      	subs	r6, #1
 8018cb6:	e79b      	b.n	8018bf0 <__multiply+0x84>
 8018cb8:	0801e264 	.word	0x0801e264
 8018cbc:	0801e2d5 	.word	0x0801e2d5

08018cc0 <__pow5mult>:
 8018cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018cc4:	4615      	mov	r5, r2
 8018cc6:	f012 0203 	ands.w	r2, r2, #3
 8018cca:	4607      	mov	r7, r0
 8018ccc:	460e      	mov	r6, r1
 8018cce:	d007      	beq.n	8018ce0 <__pow5mult+0x20>
 8018cd0:	4c25      	ldr	r4, [pc, #148]	@ (8018d68 <__pow5mult+0xa8>)
 8018cd2:	3a01      	subs	r2, #1
 8018cd4:	2300      	movs	r3, #0
 8018cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018cda:	f7ff fe55 	bl	8018988 <__multadd>
 8018cde:	4606      	mov	r6, r0
 8018ce0:	10ad      	asrs	r5, r5, #2
 8018ce2:	d03d      	beq.n	8018d60 <__pow5mult+0xa0>
 8018ce4:	69fc      	ldr	r4, [r7, #28]
 8018ce6:	b97c      	cbnz	r4, 8018d08 <__pow5mult+0x48>
 8018ce8:	2010      	movs	r0, #16
 8018cea:	f7fc fb3b 	bl	8015364 <malloc>
 8018cee:	4602      	mov	r2, r0
 8018cf0:	61f8      	str	r0, [r7, #28]
 8018cf2:	b928      	cbnz	r0, 8018d00 <__pow5mult+0x40>
 8018cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8018d6c <__pow5mult+0xac>)
 8018cf6:	481e      	ldr	r0, [pc, #120]	@ (8018d70 <__pow5mult+0xb0>)
 8018cf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8018cfc:	f7fe fbe2 	bl	80174c4 <__assert_func>
 8018d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018d04:	6004      	str	r4, [r0, #0]
 8018d06:	60c4      	str	r4, [r0, #12]
 8018d08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8018d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018d10:	b94c      	cbnz	r4, 8018d26 <__pow5mult+0x66>
 8018d12:	f240 2171 	movw	r1, #625	@ 0x271
 8018d16:	4638      	mov	r0, r7
 8018d18:	f7ff ff12 	bl	8018b40 <__i2b>
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018d22:	4604      	mov	r4, r0
 8018d24:	6003      	str	r3, [r0, #0]
 8018d26:	f04f 0900 	mov.w	r9, #0
 8018d2a:	07eb      	lsls	r3, r5, #31
 8018d2c:	d50a      	bpl.n	8018d44 <__pow5mult+0x84>
 8018d2e:	4631      	mov	r1, r6
 8018d30:	4622      	mov	r2, r4
 8018d32:	4638      	mov	r0, r7
 8018d34:	f7ff ff1a 	bl	8018b6c <__multiply>
 8018d38:	4631      	mov	r1, r6
 8018d3a:	4680      	mov	r8, r0
 8018d3c:	4638      	mov	r0, r7
 8018d3e:	f7ff fe01 	bl	8018944 <_Bfree>
 8018d42:	4646      	mov	r6, r8
 8018d44:	106d      	asrs	r5, r5, #1
 8018d46:	d00b      	beq.n	8018d60 <__pow5mult+0xa0>
 8018d48:	6820      	ldr	r0, [r4, #0]
 8018d4a:	b938      	cbnz	r0, 8018d5c <__pow5mult+0x9c>
 8018d4c:	4622      	mov	r2, r4
 8018d4e:	4621      	mov	r1, r4
 8018d50:	4638      	mov	r0, r7
 8018d52:	f7ff ff0b 	bl	8018b6c <__multiply>
 8018d56:	6020      	str	r0, [r4, #0]
 8018d58:	f8c0 9000 	str.w	r9, [r0]
 8018d5c:	4604      	mov	r4, r0
 8018d5e:	e7e4      	b.n	8018d2a <__pow5mult+0x6a>
 8018d60:	4630      	mov	r0, r6
 8018d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018d66:	bf00      	nop
 8018d68:	0801e330 	.word	0x0801e330
 8018d6c:	0801e14a 	.word	0x0801e14a
 8018d70:	0801e2d5 	.word	0x0801e2d5

08018d74 <__lshift>:
 8018d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d78:	460c      	mov	r4, r1
 8018d7a:	6849      	ldr	r1, [r1, #4]
 8018d7c:	6923      	ldr	r3, [r4, #16]
 8018d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018d82:	68a3      	ldr	r3, [r4, #8]
 8018d84:	4607      	mov	r7, r0
 8018d86:	4691      	mov	r9, r2
 8018d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018d8c:	f108 0601 	add.w	r6, r8, #1
 8018d90:	42b3      	cmp	r3, r6
 8018d92:	db0b      	blt.n	8018dac <__lshift+0x38>
 8018d94:	4638      	mov	r0, r7
 8018d96:	f7ff fd95 	bl	80188c4 <_Balloc>
 8018d9a:	4605      	mov	r5, r0
 8018d9c:	b948      	cbnz	r0, 8018db2 <__lshift+0x3e>
 8018d9e:	4602      	mov	r2, r0
 8018da0:	4b28      	ldr	r3, [pc, #160]	@ (8018e44 <__lshift+0xd0>)
 8018da2:	4829      	ldr	r0, [pc, #164]	@ (8018e48 <__lshift+0xd4>)
 8018da4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018da8:	f7fe fb8c 	bl	80174c4 <__assert_func>
 8018dac:	3101      	adds	r1, #1
 8018dae:	005b      	lsls	r3, r3, #1
 8018db0:	e7ee      	b.n	8018d90 <__lshift+0x1c>
 8018db2:	2300      	movs	r3, #0
 8018db4:	f100 0114 	add.w	r1, r0, #20
 8018db8:	f100 0210 	add.w	r2, r0, #16
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	4553      	cmp	r3, sl
 8018dc0:	db33      	blt.n	8018e2a <__lshift+0xb6>
 8018dc2:	6920      	ldr	r0, [r4, #16]
 8018dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018dc8:	f104 0314 	add.w	r3, r4, #20
 8018dcc:	f019 091f 	ands.w	r9, r9, #31
 8018dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018dd8:	d02b      	beq.n	8018e32 <__lshift+0xbe>
 8018dda:	f1c9 0e20 	rsb	lr, r9, #32
 8018dde:	468a      	mov	sl, r1
 8018de0:	2200      	movs	r2, #0
 8018de2:	6818      	ldr	r0, [r3, #0]
 8018de4:	fa00 f009 	lsl.w	r0, r0, r9
 8018de8:	4310      	orrs	r0, r2
 8018dea:	f84a 0b04 	str.w	r0, [sl], #4
 8018dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8018df2:	459c      	cmp	ip, r3
 8018df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8018df8:	d8f3      	bhi.n	8018de2 <__lshift+0x6e>
 8018dfa:	ebac 0304 	sub.w	r3, ip, r4
 8018dfe:	3b15      	subs	r3, #21
 8018e00:	f023 0303 	bic.w	r3, r3, #3
 8018e04:	3304      	adds	r3, #4
 8018e06:	f104 0015 	add.w	r0, r4, #21
 8018e0a:	4584      	cmp	ip, r0
 8018e0c:	bf38      	it	cc
 8018e0e:	2304      	movcc	r3, #4
 8018e10:	50ca      	str	r2, [r1, r3]
 8018e12:	b10a      	cbz	r2, 8018e18 <__lshift+0xa4>
 8018e14:	f108 0602 	add.w	r6, r8, #2
 8018e18:	3e01      	subs	r6, #1
 8018e1a:	4638      	mov	r0, r7
 8018e1c:	612e      	str	r6, [r5, #16]
 8018e1e:	4621      	mov	r1, r4
 8018e20:	f7ff fd90 	bl	8018944 <_Bfree>
 8018e24:	4628      	mov	r0, r5
 8018e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8018e2e:	3301      	adds	r3, #1
 8018e30:	e7c5      	b.n	8018dbe <__lshift+0x4a>
 8018e32:	3904      	subs	r1, #4
 8018e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8018e3c:	459c      	cmp	ip, r3
 8018e3e:	d8f9      	bhi.n	8018e34 <__lshift+0xc0>
 8018e40:	e7ea      	b.n	8018e18 <__lshift+0xa4>
 8018e42:	bf00      	nop
 8018e44:	0801e264 	.word	0x0801e264
 8018e48:	0801e2d5 	.word	0x0801e2d5

08018e4c <__mcmp>:
 8018e4c:	690a      	ldr	r2, [r1, #16]
 8018e4e:	4603      	mov	r3, r0
 8018e50:	6900      	ldr	r0, [r0, #16]
 8018e52:	1a80      	subs	r0, r0, r2
 8018e54:	b530      	push	{r4, r5, lr}
 8018e56:	d10e      	bne.n	8018e76 <__mcmp+0x2a>
 8018e58:	3314      	adds	r3, #20
 8018e5a:	3114      	adds	r1, #20
 8018e5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8018e60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8018e64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018e68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018e6c:	4295      	cmp	r5, r2
 8018e6e:	d003      	beq.n	8018e78 <__mcmp+0x2c>
 8018e70:	d205      	bcs.n	8018e7e <__mcmp+0x32>
 8018e72:	f04f 30ff 	mov.w	r0, #4294967295
 8018e76:	bd30      	pop	{r4, r5, pc}
 8018e78:	42a3      	cmp	r3, r4
 8018e7a:	d3f3      	bcc.n	8018e64 <__mcmp+0x18>
 8018e7c:	e7fb      	b.n	8018e76 <__mcmp+0x2a>
 8018e7e:	2001      	movs	r0, #1
 8018e80:	e7f9      	b.n	8018e76 <__mcmp+0x2a>
	...

08018e84 <__mdiff>:
 8018e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e88:	4689      	mov	r9, r1
 8018e8a:	4606      	mov	r6, r0
 8018e8c:	4611      	mov	r1, r2
 8018e8e:	4648      	mov	r0, r9
 8018e90:	4614      	mov	r4, r2
 8018e92:	f7ff ffdb 	bl	8018e4c <__mcmp>
 8018e96:	1e05      	subs	r5, r0, #0
 8018e98:	d112      	bne.n	8018ec0 <__mdiff+0x3c>
 8018e9a:	4629      	mov	r1, r5
 8018e9c:	4630      	mov	r0, r6
 8018e9e:	f7ff fd11 	bl	80188c4 <_Balloc>
 8018ea2:	4602      	mov	r2, r0
 8018ea4:	b928      	cbnz	r0, 8018eb2 <__mdiff+0x2e>
 8018ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8018fa4 <__mdiff+0x120>)
 8018ea8:	f240 2137 	movw	r1, #567	@ 0x237
 8018eac:	483e      	ldr	r0, [pc, #248]	@ (8018fa8 <__mdiff+0x124>)
 8018eae:	f7fe fb09 	bl	80174c4 <__assert_func>
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018eb8:	4610      	mov	r0, r2
 8018eba:	b003      	add	sp, #12
 8018ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ec0:	bfbc      	itt	lt
 8018ec2:	464b      	movlt	r3, r9
 8018ec4:	46a1      	movlt	r9, r4
 8018ec6:	4630      	mov	r0, r6
 8018ec8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8018ecc:	bfba      	itte	lt
 8018ece:	461c      	movlt	r4, r3
 8018ed0:	2501      	movlt	r5, #1
 8018ed2:	2500      	movge	r5, #0
 8018ed4:	f7ff fcf6 	bl	80188c4 <_Balloc>
 8018ed8:	4602      	mov	r2, r0
 8018eda:	b918      	cbnz	r0, 8018ee4 <__mdiff+0x60>
 8018edc:	4b31      	ldr	r3, [pc, #196]	@ (8018fa4 <__mdiff+0x120>)
 8018ede:	f240 2145 	movw	r1, #581	@ 0x245
 8018ee2:	e7e3      	b.n	8018eac <__mdiff+0x28>
 8018ee4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8018ee8:	6926      	ldr	r6, [r4, #16]
 8018eea:	60c5      	str	r5, [r0, #12]
 8018eec:	f109 0310 	add.w	r3, r9, #16
 8018ef0:	f109 0514 	add.w	r5, r9, #20
 8018ef4:	f104 0e14 	add.w	lr, r4, #20
 8018ef8:	f100 0b14 	add.w	fp, r0, #20
 8018efc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8018f00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8018f04:	9301      	str	r3, [sp, #4]
 8018f06:	46d9      	mov	r9, fp
 8018f08:	f04f 0c00 	mov.w	ip, #0
 8018f0c:	9b01      	ldr	r3, [sp, #4]
 8018f0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8018f12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8018f16:	9301      	str	r3, [sp, #4]
 8018f18:	fa1f f38a 	uxth.w	r3, sl
 8018f1c:	4619      	mov	r1, r3
 8018f1e:	b283      	uxth	r3, r0
 8018f20:	1acb      	subs	r3, r1, r3
 8018f22:	0c00      	lsrs	r0, r0, #16
 8018f24:	4463      	add	r3, ip
 8018f26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8018f2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8018f2e:	b29b      	uxth	r3, r3
 8018f30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8018f34:	4576      	cmp	r6, lr
 8018f36:	f849 3b04 	str.w	r3, [r9], #4
 8018f3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018f3e:	d8e5      	bhi.n	8018f0c <__mdiff+0x88>
 8018f40:	1b33      	subs	r3, r6, r4
 8018f42:	3b15      	subs	r3, #21
 8018f44:	f023 0303 	bic.w	r3, r3, #3
 8018f48:	3415      	adds	r4, #21
 8018f4a:	3304      	adds	r3, #4
 8018f4c:	42a6      	cmp	r6, r4
 8018f4e:	bf38      	it	cc
 8018f50:	2304      	movcc	r3, #4
 8018f52:	441d      	add	r5, r3
 8018f54:	445b      	add	r3, fp
 8018f56:	461e      	mov	r6, r3
 8018f58:	462c      	mov	r4, r5
 8018f5a:	4544      	cmp	r4, r8
 8018f5c:	d30e      	bcc.n	8018f7c <__mdiff+0xf8>
 8018f5e:	f108 0103 	add.w	r1, r8, #3
 8018f62:	1b49      	subs	r1, r1, r5
 8018f64:	f021 0103 	bic.w	r1, r1, #3
 8018f68:	3d03      	subs	r5, #3
 8018f6a:	45a8      	cmp	r8, r5
 8018f6c:	bf38      	it	cc
 8018f6e:	2100      	movcc	r1, #0
 8018f70:	440b      	add	r3, r1
 8018f72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018f76:	b191      	cbz	r1, 8018f9e <__mdiff+0x11a>
 8018f78:	6117      	str	r7, [r2, #16]
 8018f7a:	e79d      	b.n	8018eb8 <__mdiff+0x34>
 8018f7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8018f80:	46e6      	mov	lr, ip
 8018f82:	0c08      	lsrs	r0, r1, #16
 8018f84:	fa1c fc81 	uxtah	ip, ip, r1
 8018f88:	4471      	add	r1, lr
 8018f8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8018f8e:	b289      	uxth	r1, r1
 8018f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8018f94:	f846 1b04 	str.w	r1, [r6], #4
 8018f98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8018f9c:	e7dd      	b.n	8018f5a <__mdiff+0xd6>
 8018f9e:	3f01      	subs	r7, #1
 8018fa0:	e7e7      	b.n	8018f72 <__mdiff+0xee>
 8018fa2:	bf00      	nop
 8018fa4:	0801e264 	.word	0x0801e264
 8018fa8:	0801e2d5 	.word	0x0801e2d5

08018fac <__ulp>:
 8018fac:	b082      	sub	sp, #8
 8018fae:	ed8d 0b00 	vstr	d0, [sp]
 8018fb2:	9a01      	ldr	r2, [sp, #4]
 8018fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8018ff4 <__ulp+0x48>)
 8018fb6:	4013      	ands	r3, r2
 8018fb8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	dc08      	bgt.n	8018fd2 <__ulp+0x26>
 8018fc0:	425b      	negs	r3, r3
 8018fc2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8018fc6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8018fca:	da04      	bge.n	8018fd6 <__ulp+0x2a>
 8018fcc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8018fd0:	4113      	asrs	r3, r2
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	e008      	b.n	8018fe8 <__ulp+0x3c>
 8018fd6:	f1a2 0314 	sub.w	r3, r2, #20
 8018fda:	2b1e      	cmp	r3, #30
 8018fdc:	bfda      	itte	le
 8018fde:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8018fe2:	40da      	lsrle	r2, r3
 8018fe4:	2201      	movgt	r2, #1
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	4619      	mov	r1, r3
 8018fea:	4610      	mov	r0, r2
 8018fec:	ec41 0b10 	vmov	d0, r0, r1
 8018ff0:	b002      	add	sp, #8
 8018ff2:	4770      	bx	lr
 8018ff4:	7ff00000 	.word	0x7ff00000

08018ff8 <__b2d>:
 8018ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ffc:	6906      	ldr	r6, [r0, #16]
 8018ffe:	f100 0814 	add.w	r8, r0, #20
 8019002:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8019006:	1f37      	subs	r7, r6, #4
 8019008:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801900c:	4610      	mov	r0, r2
 801900e:	f7ff fd4b 	bl	8018aa8 <__hi0bits>
 8019012:	f1c0 0320 	rsb	r3, r0, #32
 8019016:	280a      	cmp	r0, #10
 8019018:	600b      	str	r3, [r1, #0]
 801901a:	491b      	ldr	r1, [pc, #108]	@ (8019088 <__b2d+0x90>)
 801901c:	dc15      	bgt.n	801904a <__b2d+0x52>
 801901e:	f1c0 0c0b 	rsb	ip, r0, #11
 8019022:	fa22 f30c 	lsr.w	r3, r2, ip
 8019026:	45b8      	cmp	r8, r7
 8019028:	ea43 0501 	orr.w	r5, r3, r1
 801902c:	bf34      	ite	cc
 801902e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019032:	2300      	movcs	r3, #0
 8019034:	3015      	adds	r0, #21
 8019036:	fa02 f000 	lsl.w	r0, r2, r0
 801903a:	fa23 f30c 	lsr.w	r3, r3, ip
 801903e:	4303      	orrs	r3, r0
 8019040:	461c      	mov	r4, r3
 8019042:	ec45 4b10 	vmov	d0, r4, r5
 8019046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801904a:	45b8      	cmp	r8, r7
 801904c:	bf3a      	itte	cc
 801904e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019052:	f1a6 0708 	subcc.w	r7, r6, #8
 8019056:	2300      	movcs	r3, #0
 8019058:	380b      	subs	r0, #11
 801905a:	d012      	beq.n	8019082 <__b2d+0x8a>
 801905c:	f1c0 0120 	rsb	r1, r0, #32
 8019060:	fa23 f401 	lsr.w	r4, r3, r1
 8019064:	4082      	lsls	r2, r0
 8019066:	4322      	orrs	r2, r4
 8019068:	4547      	cmp	r7, r8
 801906a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801906e:	bf8c      	ite	hi
 8019070:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019074:	2200      	movls	r2, #0
 8019076:	4083      	lsls	r3, r0
 8019078:	40ca      	lsrs	r2, r1
 801907a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801907e:	4313      	orrs	r3, r2
 8019080:	e7de      	b.n	8019040 <__b2d+0x48>
 8019082:	ea42 0501 	orr.w	r5, r2, r1
 8019086:	e7db      	b.n	8019040 <__b2d+0x48>
 8019088:	3ff00000 	.word	0x3ff00000

0801908c <__d2b>:
 801908c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019090:	460f      	mov	r7, r1
 8019092:	2101      	movs	r1, #1
 8019094:	ec59 8b10 	vmov	r8, r9, d0
 8019098:	4616      	mov	r6, r2
 801909a:	f7ff fc13 	bl	80188c4 <_Balloc>
 801909e:	4604      	mov	r4, r0
 80190a0:	b930      	cbnz	r0, 80190b0 <__d2b+0x24>
 80190a2:	4602      	mov	r2, r0
 80190a4:	4b23      	ldr	r3, [pc, #140]	@ (8019134 <__d2b+0xa8>)
 80190a6:	4824      	ldr	r0, [pc, #144]	@ (8019138 <__d2b+0xac>)
 80190a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80190ac:	f7fe fa0a 	bl	80174c4 <__assert_func>
 80190b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80190b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80190b8:	b10d      	cbz	r5, 80190be <__d2b+0x32>
 80190ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80190be:	9301      	str	r3, [sp, #4]
 80190c0:	f1b8 0300 	subs.w	r3, r8, #0
 80190c4:	d023      	beq.n	801910e <__d2b+0x82>
 80190c6:	4668      	mov	r0, sp
 80190c8:	9300      	str	r3, [sp, #0]
 80190ca:	f7ff fd0c 	bl	8018ae6 <__lo0bits>
 80190ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80190d2:	b1d0      	cbz	r0, 801910a <__d2b+0x7e>
 80190d4:	f1c0 0320 	rsb	r3, r0, #32
 80190d8:	fa02 f303 	lsl.w	r3, r2, r3
 80190dc:	430b      	orrs	r3, r1
 80190de:	40c2      	lsrs	r2, r0
 80190e0:	6163      	str	r3, [r4, #20]
 80190e2:	9201      	str	r2, [sp, #4]
 80190e4:	9b01      	ldr	r3, [sp, #4]
 80190e6:	61a3      	str	r3, [r4, #24]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	bf0c      	ite	eq
 80190ec:	2201      	moveq	r2, #1
 80190ee:	2202      	movne	r2, #2
 80190f0:	6122      	str	r2, [r4, #16]
 80190f2:	b1a5      	cbz	r5, 801911e <__d2b+0x92>
 80190f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80190f8:	4405      	add	r5, r0
 80190fa:	603d      	str	r5, [r7, #0]
 80190fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8019100:	6030      	str	r0, [r6, #0]
 8019102:	4620      	mov	r0, r4
 8019104:	b003      	add	sp, #12
 8019106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801910a:	6161      	str	r1, [r4, #20]
 801910c:	e7ea      	b.n	80190e4 <__d2b+0x58>
 801910e:	a801      	add	r0, sp, #4
 8019110:	f7ff fce9 	bl	8018ae6 <__lo0bits>
 8019114:	9b01      	ldr	r3, [sp, #4]
 8019116:	6163      	str	r3, [r4, #20]
 8019118:	3020      	adds	r0, #32
 801911a:	2201      	movs	r2, #1
 801911c:	e7e8      	b.n	80190f0 <__d2b+0x64>
 801911e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019122:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019126:	6038      	str	r0, [r7, #0]
 8019128:	6918      	ldr	r0, [r3, #16]
 801912a:	f7ff fcbd 	bl	8018aa8 <__hi0bits>
 801912e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019132:	e7e5      	b.n	8019100 <__d2b+0x74>
 8019134:	0801e264 	.word	0x0801e264
 8019138:	0801e2d5 	.word	0x0801e2d5

0801913c <__ratio>:
 801913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019140:	b085      	sub	sp, #20
 8019142:	e9cd 1000 	strd	r1, r0, [sp]
 8019146:	a902      	add	r1, sp, #8
 8019148:	f7ff ff56 	bl	8018ff8 <__b2d>
 801914c:	9800      	ldr	r0, [sp, #0]
 801914e:	a903      	add	r1, sp, #12
 8019150:	ec55 4b10 	vmov	r4, r5, d0
 8019154:	f7ff ff50 	bl	8018ff8 <__b2d>
 8019158:	9b01      	ldr	r3, [sp, #4]
 801915a:	6919      	ldr	r1, [r3, #16]
 801915c:	9b00      	ldr	r3, [sp, #0]
 801915e:	691b      	ldr	r3, [r3, #16]
 8019160:	1ac9      	subs	r1, r1, r3
 8019162:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8019166:	1a9b      	subs	r3, r3, r2
 8019168:	ec5b ab10 	vmov	sl, fp, d0
 801916c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8019170:	2b00      	cmp	r3, #0
 8019172:	bfce      	itee	gt
 8019174:	462a      	movgt	r2, r5
 8019176:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801917a:	465a      	movle	r2, fp
 801917c:	462f      	mov	r7, r5
 801917e:	46d9      	mov	r9, fp
 8019180:	bfcc      	ite	gt
 8019182:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019186:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801918a:	464b      	mov	r3, r9
 801918c:	4652      	mov	r2, sl
 801918e:	4620      	mov	r0, r4
 8019190:	4639      	mov	r1, r7
 8019192:	f7e7 fb33 	bl	80007fc <__aeabi_ddiv>
 8019196:	ec41 0b10 	vmov	d0, r0, r1
 801919a:	b005      	add	sp, #20
 801919c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191a0 <__copybits>:
 80191a0:	3901      	subs	r1, #1
 80191a2:	b570      	push	{r4, r5, r6, lr}
 80191a4:	1149      	asrs	r1, r1, #5
 80191a6:	6914      	ldr	r4, [r2, #16]
 80191a8:	3101      	adds	r1, #1
 80191aa:	f102 0314 	add.w	r3, r2, #20
 80191ae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80191b2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80191b6:	1f05      	subs	r5, r0, #4
 80191b8:	42a3      	cmp	r3, r4
 80191ba:	d30c      	bcc.n	80191d6 <__copybits+0x36>
 80191bc:	1aa3      	subs	r3, r4, r2
 80191be:	3b11      	subs	r3, #17
 80191c0:	f023 0303 	bic.w	r3, r3, #3
 80191c4:	3211      	adds	r2, #17
 80191c6:	42a2      	cmp	r2, r4
 80191c8:	bf88      	it	hi
 80191ca:	2300      	movhi	r3, #0
 80191cc:	4418      	add	r0, r3
 80191ce:	2300      	movs	r3, #0
 80191d0:	4288      	cmp	r0, r1
 80191d2:	d305      	bcc.n	80191e0 <__copybits+0x40>
 80191d4:	bd70      	pop	{r4, r5, r6, pc}
 80191d6:	f853 6b04 	ldr.w	r6, [r3], #4
 80191da:	f845 6f04 	str.w	r6, [r5, #4]!
 80191de:	e7eb      	b.n	80191b8 <__copybits+0x18>
 80191e0:	f840 3b04 	str.w	r3, [r0], #4
 80191e4:	e7f4      	b.n	80191d0 <__copybits+0x30>

080191e6 <__any_on>:
 80191e6:	f100 0214 	add.w	r2, r0, #20
 80191ea:	6900      	ldr	r0, [r0, #16]
 80191ec:	114b      	asrs	r3, r1, #5
 80191ee:	4298      	cmp	r0, r3
 80191f0:	b510      	push	{r4, lr}
 80191f2:	db11      	blt.n	8019218 <__any_on+0x32>
 80191f4:	dd0a      	ble.n	801920c <__any_on+0x26>
 80191f6:	f011 011f 	ands.w	r1, r1, #31
 80191fa:	d007      	beq.n	801920c <__any_on+0x26>
 80191fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019200:	fa24 f001 	lsr.w	r0, r4, r1
 8019204:	fa00 f101 	lsl.w	r1, r0, r1
 8019208:	428c      	cmp	r4, r1
 801920a:	d10b      	bne.n	8019224 <__any_on+0x3e>
 801920c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019210:	4293      	cmp	r3, r2
 8019212:	d803      	bhi.n	801921c <__any_on+0x36>
 8019214:	2000      	movs	r0, #0
 8019216:	bd10      	pop	{r4, pc}
 8019218:	4603      	mov	r3, r0
 801921a:	e7f7      	b.n	801920c <__any_on+0x26>
 801921c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019220:	2900      	cmp	r1, #0
 8019222:	d0f5      	beq.n	8019210 <__any_on+0x2a>
 8019224:	2001      	movs	r0, #1
 8019226:	e7f6      	b.n	8019216 <__any_on+0x30>

08019228 <__ascii_wctomb>:
 8019228:	4603      	mov	r3, r0
 801922a:	4608      	mov	r0, r1
 801922c:	b141      	cbz	r1, 8019240 <__ascii_wctomb+0x18>
 801922e:	2aff      	cmp	r2, #255	@ 0xff
 8019230:	d904      	bls.n	801923c <__ascii_wctomb+0x14>
 8019232:	228a      	movs	r2, #138	@ 0x8a
 8019234:	601a      	str	r2, [r3, #0]
 8019236:	f04f 30ff 	mov.w	r0, #4294967295
 801923a:	4770      	bx	lr
 801923c:	700a      	strb	r2, [r1, #0]
 801923e:	2001      	movs	r0, #1
 8019240:	4770      	bx	lr

08019242 <__ssputs_r>:
 8019242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019246:	688e      	ldr	r6, [r1, #8]
 8019248:	461f      	mov	r7, r3
 801924a:	42be      	cmp	r6, r7
 801924c:	680b      	ldr	r3, [r1, #0]
 801924e:	4682      	mov	sl, r0
 8019250:	460c      	mov	r4, r1
 8019252:	4690      	mov	r8, r2
 8019254:	d82d      	bhi.n	80192b2 <__ssputs_r+0x70>
 8019256:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801925a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801925e:	d026      	beq.n	80192ae <__ssputs_r+0x6c>
 8019260:	6965      	ldr	r5, [r4, #20]
 8019262:	6909      	ldr	r1, [r1, #16]
 8019264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019268:	eba3 0901 	sub.w	r9, r3, r1
 801926c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019270:	1c7b      	adds	r3, r7, #1
 8019272:	444b      	add	r3, r9
 8019274:	106d      	asrs	r5, r5, #1
 8019276:	429d      	cmp	r5, r3
 8019278:	bf38      	it	cc
 801927a:	461d      	movcc	r5, r3
 801927c:	0553      	lsls	r3, r2, #21
 801927e:	d527      	bpl.n	80192d0 <__ssputs_r+0x8e>
 8019280:	4629      	mov	r1, r5
 8019282:	f7fc f8a1 	bl	80153c8 <_malloc_r>
 8019286:	4606      	mov	r6, r0
 8019288:	b360      	cbz	r0, 80192e4 <__ssputs_r+0xa2>
 801928a:	6921      	ldr	r1, [r4, #16]
 801928c:	464a      	mov	r2, r9
 801928e:	f7fe f8fc 	bl	801748a <memcpy>
 8019292:	89a3      	ldrh	r3, [r4, #12]
 8019294:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8019298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801929c:	81a3      	strh	r3, [r4, #12]
 801929e:	6126      	str	r6, [r4, #16]
 80192a0:	6165      	str	r5, [r4, #20]
 80192a2:	444e      	add	r6, r9
 80192a4:	eba5 0509 	sub.w	r5, r5, r9
 80192a8:	6026      	str	r6, [r4, #0]
 80192aa:	60a5      	str	r5, [r4, #8]
 80192ac:	463e      	mov	r6, r7
 80192ae:	42be      	cmp	r6, r7
 80192b0:	d900      	bls.n	80192b4 <__ssputs_r+0x72>
 80192b2:	463e      	mov	r6, r7
 80192b4:	6820      	ldr	r0, [r4, #0]
 80192b6:	4632      	mov	r2, r6
 80192b8:	4641      	mov	r1, r8
 80192ba:	f000 f9d7 	bl	801966c <memmove>
 80192be:	68a3      	ldr	r3, [r4, #8]
 80192c0:	1b9b      	subs	r3, r3, r6
 80192c2:	60a3      	str	r3, [r4, #8]
 80192c4:	6823      	ldr	r3, [r4, #0]
 80192c6:	4433      	add	r3, r6
 80192c8:	6023      	str	r3, [r4, #0]
 80192ca:	2000      	movs	r0, #0
 80192cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192d0:	462a      	mov	r2, r5
 80192d2:	f000 fa00 	bl	80196d6 <_realloc_r>
 80192d6:	4606      	mov	r6, r0
 80192d8:	2800      	cmp	r0, #0
 80192da:	d1e0      	bne.n	801929e <__ssputs_r+0x5c>
 80192dc:	6921      	ldr	r1, [r4, #16]
 80192de:	4650      	mov	r0, sl
 80192e0:	f7fe ff5a 	bl	8018198 <_free_r>
 80192e4:	230c      	movs	r3, #12
 80192e6:	f8ca 3000 	str.w	r3, [sl]
 80192ea:	89a3      	ldrh	r3, [r4, #12]
 80192ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80192f0:	81a3      	strh	r3, [r4, #12]
 80192f2:	f04f 30ff 	mov.w	r0, #4294967295
 80192f6:	e7e9      	b.n	80192cc <__ssputs_r+0x8a>

080192f8 <_svfiprintf_r>:
 80192f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192fc:	4698      	mov	r8, r3
 80192fe:	898b      	ldrh	r3, [r1, #12]
 8019300:	061b      	lsls	r3, r3, #24
 8019302:	b09d      	sub	sp, #116	@ 0x74
 8019304:	4607      	mov	r7, r0
 8019306:	460d      	mov	r5, r1
 8019308:	4614      	mov	r4, r2
 801930a:	d510      	bpl.n	801932e <_svfiprintf_r+0x36>
 801930c:	690b      	ldr	r3, [r1, #16]
 801930e:	b973      	cbnz	r3, 801932e <_svfiprintf_r+0x36>
 8019310:	2140      	movs	r1, #64	@ 0x40
 8019312:	f7fc f859 	bl	80153c8 <_malloc_r>
 8019316:	6028      	str	r0, [r5, #0]
 8019318:	6128      	str	r0, [r5, #16]
 801931a:	b930      	cbnz	r0, 801932a <_svfiprintf_r+0x32>
 801931c:	230c      	movs	r3, #12
 801931e:	603b      	str	r3, [r7, #0]
 8019320:	f04f 30ff 	mov.w	r0, #4294967295
 8019324:	b01d      	add	sp, #116	@ 0x74
 8019326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801932a:	2340      	movs	r3, #64	@ 0x40
 801932c:	616b      	str	r3, [r5, #20]
 801932e:	2300      	movs	r3, #0
 8019330:	9309      	str	r3, [sp, #36]	@ 0x24
 8019332:	2320      	movs	r3, #32
 8019334:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019338:	f8cd 800c 	str.w	r8, [sp, #12]
 801933c:	2330      	movs	r3, #48	@ 0x30
 801933e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80194dc <_svfiprintf_r+0x1e4>
 8019342:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019346:	f04f 0901 	mov.w	r9, #1
 801934a:	4623      	mov	r3, r4
 801934c:	469a      	mov	sl, r3
 801934e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019352:	b10a      	cbz	r2, 8019358 <_svfiprintf_r+0x60>
 8019354:	2a25      	cmp	r2, #37	@ 0x25
 8019356:	d1f9      	bne.n	801934c <_svfiprintf_r+0x54>
 8019358:	ebba 0b04 	subs.w	fp, sl, r4
 801935c:	d00b      	beq.n	8019376 <_svfiprintf_r+0x7e>
 801935e:	465b      	mov	r3, fp
 8019360:	4622      	mov	r2, r4
 8019362:	4629      	mov	r1, r5
 8019364:	4638      	mov	r0, r7
 8019366:	f7ff ff6c 	bl	8019242 <__ssputs_r>
 801936a:	3001      	adds	r0, #1
 801936c:	f000 80a7 	beq.w	80194be <_svfiprintf_r+0x1c6>
 8019370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019372:	445a      	add	r2, fp
 8019374:	9209      	str	r2, [sp, #36]	@ 0x24
 8019376:	f89a 3000 	ldrb.w	r3, [sl]
 801937a:	2b00      	cmp	r3, #0
 801937c:	f000 809f 	beq.w	80194be <_svfiprintf_r+0x1c6>
 8019380:	2300      	movs	r3, #0
 8019382:	f04f 32ff 	mov.w	r2, #4294967295
 8019386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801938a:	f10a 0a01 	add.w	sl, sl, #1
 801938e:	9304      	str	r3, [sp, #16]
 8019390:	9307      	str	r3, [sp, #28]
 8019392:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019396:	931a      	str	r3, [sp, #104]	@ 0x68
 8019398:	4654      	mov	r4, sl
 801939a:	2205      	movs	r2, #5
 801939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193a0:	484e      	ldr	r0, [pc, #312]	@ (80194dc <_svfiprintf_r+0x1e4>)
 80193a2:	f7e6 feed 	bl	8000180 <memchr>
 80193a6:	9a04      	ldr	r2, [sp, #16]
 80193a8:	b9d8      	cbnz	r0, 80193e2 <_svfiprintf_r+0xea>
 80193aa:	06d0      	lsls	r0, r2, #27
 80193ac:	bf44      	itt	mi
 80193ae:	2320      	movmi	r3, #32
 80193b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80193b4:	0711      	lsls	r1, r2, #28
 80193b6:	bf44      	itt	mi
 80193b8:	232b      	movmi	r3, #43	@ 0x2b
 80193ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80193be:	f89a 3000 	ldrb.w	r3, [sl]
 80193c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80193c4:	d015      	beq.n	80193f2 <_svfiprintf_r+0xfa>
 80193c6:	9a07      	ldr	r2, [sp, #28]
 80193c8:	4654      	mov	r4, sl
 80193ca:	2000      	movs	r0, #0
 80193cc:	f04f 0c0a 	mov.w	ip, #10
 80193d0:	4621      	mov	r1, r4
 80193d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80193d6:	3b30      	subs	r3, #48	@ 0x30
 80193d8:	2b09      	cmp	r3, #9
 80193da:	d94b      	bls.n	8019474 <_svfiprintf_r+0x17c>
 80193dc:	b1b0      	cbz	r0, 801940c <_svfiprintf_r+0x114>
 80193de:	9207      	str	r2, [sp, #28]
 80193e0:	e014      	b.n	801940c <_svfiprintf_r+0x114>
 80193e2:	eba0 0308 	sub.w	r3, r0, r8
 80193e6:	fa09 f303 	lsl.w	r3, r9, r3
 80193ea:	4313      	orrs	r3, r2
 80193ec:	9304      	str	r3, [sp, #16]
 80193ee:	46a2      	mov	sl, r4
 80193f0:	e7d2      	b.n	8019398 <_svfiprintf_r+0xa0>
 80193f2:	9b03      	ldr	r3, [sp, #12]
 80193f4:	1d19      	adds	r1, r3, #4
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	9103      	str	r1, [sp, #12]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	bfbb      	ittet	lt
 80193fe:	425b      	neglt	r3, r3
 8019400:	f042 0202 	orrlt.w	r2, r2, #2
 8019404:	9307      	strge	r3, [sp, #28]
 8019406:	9307      	strlt	r3, [sp, #28]
 8019408:	bfb8      	it	lt
 801940a:	9204      	strlt	r2, [sp, #16]
 801940c:	7823      	ldrb	r3, [r4, #0]
 801940e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019410:	d10a      	bne.n	8019428 <_svfiprintf_r+0x130>
 8019412:	7863      	ldrb	r3, [r4, #1]
 8019414:	2b2a      	cmp	r3, #42	@ 0x2a
 8019416:	d132      	bne.n	801947e <_svfiprintf_r+0x186>
 8019418:	9b03      	ldr	r3, [sp, #12]
 801941a:	1d1a      	adds	r2, r3, #4
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	9203      	str	r2, [sp, #12]
 8019420:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019424:	3402      	adds	r4, #2
 8019426:	9305      	str	r3, [sp, #20]
 8019428:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80194ec <_svfiprintf_r+0x1f4>
 801942c:	7821      	ldrb	r1, [r4, #0]
 801942e:	2203      	movs	r2, #3
 8019430:	4650      	mov	r0, sl
 8019432:	f7e6 fea5 	bl	8000180 <memchr>
 8019436:	b138      	cbz	r0, 8019448 <_svfiprintf_r+0x150>
 8019438:	9b04      	ldr	r3, [sp, #16]
 801943a:	eba0 000a 	sub.w	r0, r0, sl
 801943e:	2240      	movs	r2, #64	@ 0x40
 8019440:	4082      	lsls	r2, r0
 8019442:	4313      	orrs	r3, r2
 8019444:	3401      	adds	r4, #1
 8019446:	9304      	str	r3, [sp, #16]
 8019448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801944c:	4824      	ldr	r0, [pc, #144]	@ (80194e0 <_svfiprintf_r+0x1e8>)
 801944e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019452:	2206      	movs	r2, #6
 8019454:	f7e6 fe94 	bl	8000180 <memchr>
 8019458:	2800      	cmp	r0, #0
 801945a:	d036      	beq.n	80194ca <_svfiprintf_r+0x1d2>
 801945c:	4b21      	ldr	r3, [pc, #132]	@ (80194e4 <_svfiprintf_r+0x1ec>)
 801945e:	bb1b      	cbnz	r3, 80194a8 <_svfiprintf_r+0x1b0>
 8019460:	9b03      	ldr	r3, [sp, #12]
 8019462:	3307      	adds	r3, #7
 8019464:	f023 0307 	bic.w	r3, r3, #7
 8019468:	3308      	adds	r3, #8
 801946a:	9303      	str	r3, [sp, #12]
 801946c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801946e:	4433      	add	r3, r6
 8019470:	9309      	str	r3, [sp, #36]	@ 0x24
 8019472:	e76a      	b.n	801934a <_svfiprintf_r+0x52>
 8019474:	fb0c 3202 	mla	r2, ip, r2, r3
 8019478:	460c      	mov	r4, r1
 801947a:	2001      	movs	r0, #1
 801947c:	e7a8      	b.n	80193d0 <_svfiprintf_r+0xd8>
 801947e:	2300      	movs	r3, #0
 8019480:	3401      	adds	r4, #1
 8019482:	9305      	str	r3, [sp, #20]
 8019484:	4619      	mov	r1, r3
 8019486:	f04f 0c0a 	mov.w	ip, #10
 801948a:	4620      	mov	r0, r4
 801948c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019490:	3a30      	subs	r2, #48	@ 0x30
 8019492:	2a09      	cmp	r2, #9
 8019494:	d903      	bls.n	801949e <_svfiprintf_r+0x1a6>
 8019496:	2b00      	cmp	r3, #0
 8019498:	d0c6      	beq.n	8019428 <_svfiprintf_r+0x130>
 801949a:	9105      	str	r1, [sp, #20]
 801949c:	e7c4      	b.n	8019428 <_svfiprintf_r+0x130>
 801949e:	fb0c 2101 	mla	r1, ip, r1, r2
 80194a2:	4604      	mov	r4, r0
 80194a4:	2301      	movs	r3, #1
 80194a6:	e7f0      	b.n	801948a <_svfiprintf_r+0x192>
 80194a8:	ab03      	add	r3, sp, #12
 80194aa:	9300      	str	r3, [sp, #0]
 80194ac:	462a      	mov	r2, r5
 80194ae:	4b0e      	ldr	r3, [pc, #56]	@ (80194e8 <_svfiprintf_r+0x1f0>)
 80194b0:	a904      	add	r1, sp, #16
 80194b2:	4638      	mov	r0, r7
 80194b4:	f7fc ffa8 	bl	8016408 <_printf_float>
 80194b8:	1c42      	adds	r2, r0, #1
 80194ba:	4606      	mov	r6, r0
 80194bc:	d1d6      	bne.n	801946c <_svfiprintf_r+0x174>
 80194be:	89ab      	ldrh	r3, [r5, #12]
 80194c0:	065b      	lsls	r3, r3, #25
 80194c2:	f53f af2d 	bmi.w	8019320 <_svfiprintf_r+0x28>
 80194c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80194c8:	e72c      	b.n	8019324 <_svfiprintf_r+0x2c>
 80194ca:	ab03      	add	r3, sp, #12
 80194cc:	9300      	str	r3, [sp, #0]
 80194ce:	462a      	mov	r2, r5
 80194d0:	4b05      	ldr	r3, [pc, #20]	@ (80194e8 <_svfiprintf_r+0x1f0>)
 80194d2:	a904      	add	r1, sp, #16
 80194d4:	4638      	mov	r0, r7
 80194d6:	f7fd fa2f 	bl	8016938 <_printf_i>
 80194da:	e7ed      	b.n	80194b8 <_svfiprintf_r+0x1c0>
 80194dc:	0801e430 	.word	0x0801e430
 80194e0:	0801e43a 	.word	0x0801e43a
 80194e4:	08016409 	.word	0x08016409
 80194e8:	08019243 	.word	0x08019243
 80194ec:	0801e436 	.word	0x0801e436

080194f0 <__sflush_r>:
 80194f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80194f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194f8:	0716      	lsls	r6, r2, #28
 80194fa:	4605      	mov	r5, r0
 80194fc:	460c      	mov	r4, r1
 80194fe:	d454      	bmi.n	80195aa <__sflush_r+0xba>
 8019500:	684b      	ldr	r3, [r1, #4]
 8019502:	2b00      	cmp	r3, #0
 8019504:	dc02      	bgt.n	801950c <__sflush_r+0x1c>
 8019506:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8019508:	2b00      	cmp	r3, #0
 801950a:	dd48      	ble.n	801959e <__sflush_r+0xae>
 801950c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801950e:	2e00      	cmp	r6, #0
 8019510:	d045      	beq.n	801959e <__sflush_r+0xae>
 8019512:	2300      	movs	r3, #0
 8019514:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8019518:	682f      	ldr	r7, [r5, #0]
 801951a:	6a21      	ldr	r1, [r4, #32]
 801951c:	602b      	str	r3, [r5, #0]
 801951e:	d030      	beq.n	8019582 <__sflush_r+0x92>
 8019520:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019522:	89a3      	ldrh	r3, [r4, #12]
 8019524:	0759      	lsls	r1, r3, #29
 8019526:	d505      	bpl.n	8019534 <__sflush_r+0x44>
 8019528:	6863      	ldr	r3, [r4, #4]
 801952a:	1ad2      	subs	r2, r2, r3
 801952c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801952e:	b10b      	cbz	r3, 8019534 <__sflush_r+0x44>
 8019530:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019532:	1ad2      	subs	r2, r2, r3
 8019534:	2300      	movs	r3, #0
 8019536:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019538:	6a21      	ldr	r1, [r4, #32]
 801953a:	4628      	mov	r0, r5
 801953c:	47b0      	blx	r6
 801953e:	1c43      	adds	r3, r0, #1
 8019540:	89a3      	ldrh	r3, [r4, #12]
 8019542:	d106      	bne.n	8019552 <__sflush_r+0x62>
 8019544:	6829      	ldr	r1, [r5, #0]
 8019546:	291d      	cmp	r1, #29
 8019548:	d82b      	bhi.n	80195a2 <__sflush_r+0xb2>
 801954a:	4a2a      	ldr	r2, [pc, #168]	@ (80195f4 <__sflush_r+0x104>)
 801954c:	410a      	asrs	r2, r1
 801954e:	07d6      	lsls	r6, r2, #31
 8019550:	d427      	bmi.n	80195a2 <__sflush_r+0xb2>
 8019552:	2200      	movs	r2, #0
 8019554:	6062      	str	r2, [r4, #4]
 8019556:	04d9      	lsls	r1, r3, #19
 8019558:	6922      	ldr	r2, [r4, #16]
 801955a:	6022      	str	r2, [r4, #0]
 801955c:	d504      	bpl.n	8019568 <__sflush_r+0x78>
 801955e:	1c42      	adds	r2, r0, #1
 8019560:	d101      	bne.n	8019566 <__sflush_r+0x76>
 8019562:	682b      	ldr	r3, [r5, #0]
 8019564:	b903      	cbnz	r3, 8019568 <__sflush_r+0x78>
 8019566:	6560      	str	r0, [r4, #84]	@ 0x54
 8019568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801956a:	602f      	str	r7, [r5, #0]
 801956c:	b1b9      	cbz	r1, 801959e <__sflush_r+0xae>
 801956e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019572:	4299      	cmp	r1, r3
 8019574:	d002      	beq.n	801957c <__sflush_r+0x8c>
 8019576:	4628      	mov	r0, r5
 8019578:	f7fe fe0e 	bl	8018198 <_free_r>
 801957c:	2300      	movs	r3, #0
 801957e:	6363      	str	r3, [r4, #52]	@ 0x34
 8019580:	e00d      	b.n	801959e <__sflush_r+0xae>
 8019582:	2301      	movs	r3, #1
 8019584:	4628      	mov	r0, r5
 8019586:	47b0      	blx	r6
 8019588:	4602      	mov	r2, r0
 801958a:	1c50      	adds	r0, r2, #1
 801958c:	d1c9      	bne.n	8019522 <__sflush_r+0x32>
 801958e:	682b      	ldr	r3, [r5, #0]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d0c6      	beq.n	8019522 <__sflush_r+0x32>
 8019594:	2b1d      	cmp	r3, #29
 8019596:	d001      	beq.n	801959c <__sflush_r+0xac>
 8019598:	2b16      	cmp	r3, #22
 801959a:	d11e      	bne.n	80195da <__sflush_r+0xea>
 801959c:	602f      	str	r7, [r5, #0]
 801959e:	2000      	movs	r0, #0
 80195a0:	e022      	b.n	80195e8 <__sflush_r+0xf8>
 80195a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195a6:	b21b      	sxth	r3, r3
 80195a8:	e01b      	b.n	80195e2 <__sflush_r+0xf2>
 80195aa:	690f      	ldr	r7, [r1, #16]
 80195ac:	2f00      	cmp	r7, #0
 80195ae:	d0f6      	beq.n	801959e <__sflush_r+0xae>
 80195b0:	0793      	lsls	r3, r2, #30
 80195b2:	680e      	ldr	r6, [r1, #0]
 80195b4:	bf08      	it	eq
 80195b6:	694b      	ldreq	r3, [r1, #20]
 80195b8:	600f      	str	r7, [r1, #0]
 80195ba:	bf18      	it	ne
 80195bc:	2300      	movne	r3, #0
 80195be:	eba6 0807 	sub.w	r8, r6, r7
 80195c2:	608b      	str	r3, [r1, #8]
 80195c4:	f1b8 0f00 	cmp.w	r8, #0
 80195c8:	dde9      	ble.n	801959e <__sflush_r+0xae>
 80195ca:	6a21      	ldr	r1, [r4, #32]
 80195cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80195ce:	4643      	mov	r3, r8
 80195d0:	463a      	mov	r2, r7
 80195d2:	4628      	mov	r0, r5
 80195d4:	47b0      	blx	r6
 80195d6:	2800      	cmp	r0, #0
 80195d8:	dc08      	bgt.n	80195ec <__sflush_r+0xfc>
 80195da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195e2:	81a3      	strh	r3, [r4, #12]
 80195e4:	f04f 30ff 	mov.w	r0, #4294967295
 80195e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ec:	4407      	add	r7, r0
 80195ee:	eba8 0800 	sub.w	r8, r8, r0
 80195f2:	e7e7      	b.n	80195c4 <__sflush_r+0xd4>
 80195f4:	dfbffffe 	.word	0xdfbffffe

080195f8 <_fflush_r>:
 80195f8:	b538      	push	{r3, r4, r5, lr}
 80195fa:	690b      	ldr	r3, [r1, #16]
 80195fc:	4605      	mov	r5, r0
 80195fe:	460c      	mov	r4, r1
 8019600:	b913      	cbnz	r3, 8019608 <_fflush_r+0x10>
 8019602:	2500      	movs	r5, #0
 8019604:	4628      	mov	r0, r5
 8019606:	bd38      	pop	{r3, r4, r5, pc}
 8019608:	b118      	cbz	r0, 8019612 <_fflush_r+0x1a>
 801960a:	6a03      	ldr	r3, [r0, #32]
 801960c:	b90b      	cbnz	r3, 8019612 <_fflush_r+0x1a>
 801960e:	f7fd fd53 	bl	80170b8 <__sinit>
 8019612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019616:	2b00      	cmp	r3, #0
 8019618:	d0f3      	beq.n	8019602 <_fflush_r+0xa>
 801961a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801961c:	07d0      	lsls	r0, r2, #31
 801961e:	d404      	bmi.n	801962a <_fflush_r+0x32>
 8019620:	0599      	lsls	r1, r3, #22
 8019622:	d402      	bmi.n	801962a <_fflush_r+0x32>
 8019624:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019626:	f7fd ff26 	bl	8017476 <__retarget_lock_acquire_recursive>
 801962a:	4628      	mov	r0, r5
 801962c:	4621      	mov	r1, r4
 801962e:	f7ff ff5f 	bl	80194f0 <__sflush_r>
 8019632:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019634:	07da      	lsls	r2, r3, #31
 8019636:	4605      	mov	r5, r0
 8019638:	d4e4      	bmi.n	8019604 <_fflush_r+0xc>
 801963a:	89a3      	ldrh	r3, [r4, #12]
 801963c:	059b      	lsls	r3, r3, #22
 801963e:	d4e1      	bmi.n	8019604 <_fflush_r+0xc>
 8019640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019642:	f7fd ff19 	bl	8017478 <__retarget_lock_release_recursive>
 8019646:	e7dd      	b.n	8019604 <_fflush_r+0xc>

08019648 <fiprintf>:
 8019648:	b40e      	push	{r1, r2, r3}
 801964a:	b503      	push	{r0, r1, lr}
 801964c:	4601      	mov	r1, r0
 801964e:	ab03      	add	r3, sp, #12
 8019650:	4805      	ldr	r0, [pc, #20]	@ (8019668 <fiprintf+0x20>)
 8019652:	f853 2b04 	ldr.w	r2, [r3], #4
 8019656:	6800      	ldr	r0, [r0, #0]
 8019658:	9301      	str	r3, [sp, #4]
 801965a:	f000 f893 	bl	8019784 <_vfiprintf_r>
 801965e:	b002      	add	sp, #8
 8019660:	f85d eb04 	ldr.w	lr, [sp], #4
 8019664:	b003      	add	sp, #12
 8019666:	4770      	bx	lr
 8019668:	200002a4 	.word	0x200002a4

0801966c <memmove>:
 801966c:	4288      	cmp	r0, r1
 801966e:	b510      	push	{r4, lr}
 8019670:	eb01 0402 	add.w	r4, r1, r2
 8019674:	d902      	bls.n	801967c <memmove+0x10>
 8019676:	4284      	cmp	r4, r0
 8019678:	4623      	mov	r3, r4
 801967a:	d807      	bhi.n	801968c <memmove+0x20>
 801967c:	1e43      	subs	r3, r0, #1
 801967e:	42a1      	cmp	r1, r4
 8019680:	d008      	beq.n	8019694 <memmove+0x28>
 8019682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019686:	f803 2f01 	strb.w	r2, [r3, #1]!
 801968a:	e7f8      	b.n	801967e <memmove+0x12>
 801968c:	4402      	add	r2, r0
 801968e:	4601      	mov	r1, r0
 8019690:	428a      	cmp	r2, r1
 8019692:	d100      	bne.n	8019696 <memmove+0x2a>
 8019694:	bd10      	pop	{r4, pc}
 8019696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801969a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801969e:	e7f7      	b.n	8019690 <memmove+0x24>

080196a0 <abort>:
 80196a0:	b508      	push	{r3, lr}
 80196a2:	2006      	movs	r0, #6
 80196a4:	f000 fa42 	bl	8019b2c <raise>
 80196a8:	2001      	movs	r0, #1
 80196aa:	f7ec f8cb 	bl	8005844 <_exit>

080196ae <_calloc_r>:
 80196ae:	b570      	push	{r4, r5, r6, lr}
 80196b0:	fba1 5402 	umull	r5, r4, r1, r2
 80196b4:	b93c      	cbnz	r4, 80196c6 <_calloc_r+0x18>
 80196b6:	4629      	mov	r1, r5
 80196b8:	f7fb fe86 	bl	80153c8 <_malloc_r>
 80196bc:	4606      	mov	r6, r0
 80196be:	b928      	cbnz	r0, 80196cc <_calloc_r+0x1e>
 80196c0:	2600      	movs	r6, #0
 80196c2:	4630      	mov	r0, r6
 80196c4:	bd70      	pop	{r4, r5, r6, pc}
 80196c6:	220c      	movs	r2, #12
 80196c8:	6002      	str	r2, [r0, #0]
 80196ca:	e7f9      	b.n	80196c0 <_calloc_r+0x12>
 80196cc:	462a      	mov	r2, r5
 80196ce:	4621      	mov	r1, r4
 80196d0:	f7fd fdbf 	bl	8017252 <memset>
 80196d4:	e7f5      	b.n	80196c2 <_calloc_r+0x14>

080196d6 <_realloc_r>:
 80196d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196da:	4680      	mov	r8, r0
 80196dc:	4615      	mov	r5, r2
 80196de:	460c      	mov	r4, r1
 80196e0:	b921      	cbnz	r1, 80196ec <_realloc_r+0x16>
 80196e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196e6:	4611      	mov	r1, r2
 80196e8:	f7fb be6e 	b.w	80153c8 <_malloc_r>
 80196ec:	b92a      	cbnz	r2, 80196fa <_realloc_r+0x24>
 80196ee:	f7fe fd53 	bl	8018198 <_free_r>
 80196f2:	2400      	movs	r4, #0
 80196f4:	4620      	mov	r0, r4
 80196f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196fa:	f000 fa33 	bl	8019b64 <_malloc_usable_size_r>
 80196fe:	4285      	cmp	r5, r0
 8019700:	4606      	mov	r6, r0
 8019702:	d802      	bhi.n	801970a <_realloc_r+0x34>
 8019704:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8019708:	d8f4      	bhi.n	80196f4 <_realloc_r+0x1e>
 801970a:	4629      	mov	r1, r5
 801970c:	4640      	mov	r0, r8
 801970e:	f7fb fe5b 	bl	80153c8 <_malloc_r>
 8019712:	4607      	mov	r7, r0
 8019714:	2800      	cmp	r0, #0
 8019716:	d0ec      	beq.n	80196f2 <_realloc_r+0x1c>
 8019718:	42b5      	cmp	r5, r6
 801971a:	462a      	mov	r2, r5
 801971c:	4621      	mov	r1, r4
 801971e:	bf28      	it	cs
 8019720:	4632      	movcs	r2, r6
 8019722:	f7fd feb2 	bl	801748a <memcpy>
 8019726:	4621      	mov	r1, r4
 8019728:	4640      	mov	r0, r8
 801972a:	f7fe fd35 	bl	8018198 <_free_r>
 801972e:	463c      	mov	r4, r7
 8019730:	e7e0      	b.n	80196f4 <_realloc_r+0x1e>

08019732 <__sfputc_r>:
 8019732:	6893      	ldr	r3, [r2, #8]
 8019734:	3b01      	subs	r3, #1
 8019736:	2b00      	cmp	r3, #0
 8019738:	b410      	push	{r4}
 801973a:	6093      	str	r3, [r2, #8]
 801973c:	da08      	bge.n	8019750 <__sfputc_r+0x1e>
 801973e:	6994      	ldr	r4, [r2, #24]
 8019740:	42a3      	cmp	r3, r4
 8019742:	db01      	blt.n	8019748 <__sfputc_r+0x16>
 8019744:	290a      	cmp	r1, #10
 8019746:	d103      	bne.n	8019750 <__sfputc_r+0x1e>
 8019748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801974c:	f000 b932 	b.w	80199b4 <__swbuf_r>
 8019750:	6813      	ldr	r3, [r2, #0]
 8019752:	1c58      	adds	r0, r3, #1
 8019754:	6010      	str	r0, [r2, #0]
 8019756:	7019      	strb	r1, [r3, #0]
 8019758:	4608      	mov	r0, r1
 801975a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801975e:	4770      	bx	lr

08019760 <__sfputs_r>:
 8019760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019762:	4606      	mov	r6, r0
 8019764:	460f      	mov	r7, r1
 8019766:	4614      	mov	r4, r2
 8019768:	18d5      	adds	r5, r2, r3
 801976a:	42ac      	cmp	r4, r5
 801976c:	d101      	bne.n	8019772 <__sfputs_r+0x12>
 801976e:	2000      	movs	r0, #0
 8019770:	e007      	b.n	8019782 <__sfputs_r+0x22>
 8019772:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019776:	463a      	mov	r2, r7
 8019778:	4630      	mov	r0, r6
 801977a:	f7ff ffda 	bl	8019732 <__sfputc_r>
 801977e:	1c43      	adds	r3, r0, #1
 8019780:	d1f3      	bne.n	801976a <__sfputs_r+0xa>
 8019782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019784 <_vfiprintf_r>:
 8019784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019788:	460d      	mov	r5, r1
 801978a:	b09d      	sub	sp, #116	@ 0x74
 801978c:	4614      	mov	r4, r2
 801978e:	4698      	mov	r8, r3
 8019790:	4606      	mov	r6, r0
 8019792:	b118      	cbz	r0, 801979c <_vfiprintf_r+0x18>
 8019794:	6a03      	ldr	r3, [r0, #32]
 8019796:	b90b      	cbnz	r3, 801979c <_vfiprintf_r+0x18>
 8019798:	f7fd fc8e 	bl	80170b8 <__sinit>
 801979c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801979e:	07d9      	lsls	r1, r3, #31
 80197a0:	d405      	bmi.n	80197ae <_vfiprintf_r+0x2a>
 80197a2:	89ab      	ldrh	r3, [r5, #12]
 80197a4:	059a      	lsls	r2, r3, #22
 80197a6:	d402      	bmi.n	80197ae <_vfiprintf_r+0x2a>
 80197a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80197aa:	f7fd fe64 	bl	8017476 <__retarget_lock_acquire_recursive>
 80197ae:	89ab      	ldrh	r3, [r5, #12]
 80197b0:	071b      	lsls	r3, r3, #28
 80197b2:	d501      	bpl.n	80197b8 <_vfiprintf_r+0x34>
 80197b4:	692b      	ldr	r3, [r5, #16]
 80197b6:	b99b      	cbnz	r3, 80197e0 <_vfiprintf_r+0x5c>
 80197b8:	4629      	mov	r1, r5
 80197ba:	4630      	mov	r0, r6
 80197bc:	f000 f938 	bl	8019a30 <__swsetup_r>
 80197c0:	b170      	cbz	r0, 80197e0 <_vfiprintf_r+0x5c>
 80197c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80197c4:	07dc      	lsls	r4, r3, #31
 80197c6:	d504      	bpl.n	80197d2 <_vfiprintf_r+0x4e>
 80197c8:	f04f 30ff 	mov.w	r0, #4294967295
 80197cc:	b01d      	add	sp, #116	@ 0x74
 80197ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197d2:	89ab      	ldrh	r3, [r5, #12]
 80197d4:	0598      	lsls	r0, r3, #22
 80197d6:	d4f7      	bmi.n	80197c8 <_vfiprintf_r+0x44>
 80197d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80197da:	f7fd fe4d 	bl	8017478 <__retarget_lock_release_recursive>
 80197de:	e7f3      	b.n	80197c8 <_vfiprintf_r+0x44>
 80197e0:	2300      	movs	r3, #0
 80197e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80197e4:	2320      	movs	r3, #32
 80197e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80197ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80197ee:	2330      	movs	r3, #48	@ 0x30
 80197f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80199a0 <_vfiprintf_r+0x21c>
 80197f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80197f8:	f04f 0901 	mov.w	r9, #1
 80197fc:	4623      	mov	r3, r4
 80197fe:	469a      	mov	sl, r3
 8019800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019804:	b10a      	cbz	r2, 801980a <_vfiprintf_r+0x86>
 8019806:	2a25      	cmp	r2, #37	@ 0x25
 8019808:	d1f9      	bne.n	80197fe <_vfiprintf_r+0x7a>
 801980a:	ebba 0b04 	subs.w	fp, sl, r4
 801980e:	d00b      	beq.n	8019828 <_vfiprintf_r+0xa4>
 8019810:	465b      	mov	r3, fp
 8019812:	4622      	mov	r2, r4
 8019814:	4629      	mov	r1, r5
 8019816:	4630      	mov	r0, r6
 8019818:	f7ff ffa2 	bl	8019760 <__sfputs_r>
 801981c:	3001      	adds	r0, #1
 801981e:	f000 80a7 	beq.w	8019970 <_vfiprintf_r+0x1ec>
 8019822:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019824:	445a      	add	r2, fp
 8019826:	9209      	str	r2, [sp, #36]	@ 0x24
 8019828:	f89a 3000 	ldrb.w	r3, [sl]
 801982c:	2b00      	cmp	r3, #0
 801982e:	f000 809f 	beq.w	8019970 <_vfiprintf_r+0x1ec>
 8019832:	2300      	movs	r3, #0
 8019834:	f04f 32ff 	mov.w	r2, #4294967295
 8019838:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801983c:	f10a 0a01 	add.w	sl, sl, #1
 8019840:	9304      	str	r3, [sp, #16]
 8019842:	9307      	str	r3, [sp, #28]
 8019844:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019848:	931a      	str	r3, [sp, #104]	@ 0x68
 801984a:	4654      	mov	r4, sl
 801984c:	2205      	movs	r2, #5
 801984e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019852:	4853      	ldr	r0, [pc, #332]	@ (80199a0 <_vfiprintf_r+0x21c>)
 8019854:	f7e6 fc94 	bl	8000180 <memchr>
 8019858:	9a04      	ldr	r2, [sp, #16]
 801985a:	b9d8      	cbnz	r0, 8019894 <_vfiprintf_r+0x110>
 801985c:	06d1      	lsls	r1, r2, #27
 801985e:	bf44      	itt	mi
 8019860:	2320      	movmi	r3, #32
 8019862:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019866:	0713      	lsls	r3, r2, #28
 8019868:	bf44      	itt	mi
 801986a:	232b      	movmi	r3, #43	@ 0x2b
 801986c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019870:	f89a 3000 	ldrb.w	r3, [sl]
 8019874:	2b2a      	cmp	r3, #42	@ 0x2a
 8019876:	d015      	beq.n	80198a4 <_vfiprintf_r+0x120>
 8019878:	9a07      	ldr	r2, [sp, #28]
 801987a:	4654      	mov	r4, sl
 801987c:	2000      	movs	r0, #0
 801987e:	f04f 0c0a 	mov.w	ip, #10
 8019882:	4621      	mov	r1, r4
 8019884:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019888:	3b30      	subs	r3, #48	@ 0x30
 801988a:	2b09      	cmp	r3, #9
 801988c:	d94b      	bls.n	8019926 <_vfiprintf_r+0x1a2>
 801988e:	b1b0      	cbz	r0, 80198be <_vfiprintf_r+0x13a>
 8019890:	9207      	str	r2, [sp, #28]
 8019892:	e014      	b.n	80198be <_vfiprintf_r+0x13a>
 8019894:	eba0 0308 	sub.w	r3, r0, r8
 8019898:	fa09 f303 	lsl.w	r3, r9, r3
 801989c:	4313      	orrs	r3, r2
 801989e:	9304      	str	r3, [sp, #16]
 80198a0:	46a2      	mov	sl, r4
 80198a2:	e7d2      	b.n	801984a <_vfiprintf_r+0xc6>
 80198a4:	9b03      	ldr	r3, [sp, #12]
 80198a6:	1d19      	adds	r1, r3, #4
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	9103      	str	r1, [sp, #12]
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	bfbb      	ittet	lt
 80198b0:	425b      	neglt	r3, r3
 80198b2:	f042 0202 	orrlt.w	r2, r2, #2
 80198b6:	9307      	strge	r3, [sp, #28]
 80198b8:	9307      	strlt	r3, [sp, #28]
 80198ba:	bfb8      	it	lt
 80198bc:	9204      	strlt	r2, [sp, #16]
 80198be:	7823      	ldrb	r3, [r4, #0]
 80198c0:	2b2e      	cmp	r3, #46	@ 0x2e
 80198c2:	d10a      	bne.n	80198da <_vfiprintf_r+0x156>
 80198c4:	7863      	ldrb	r3, [r4, #1]
 80198c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80198c8:	d132      	bne.n	8019930 <_vfiprintf_r+0x1ac>
 80198ca:	9b03      	ldr	r3, [sp, #12]
 80198cc:	1d1a      	adds	r2, r3, #4
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	9203      	str	r2, [sp, #12]
 80198d2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80198d6:	3402      	adds	r4, #2
 80198d8:	9305      	str	r3, [sp, #20]
 80198da:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80199b0 <_vfiprintf_r+0x22c>
 80198de:	7821      	ldrb	r1, [r4, #0]
 80198e0:	2203      	movs	r2, #3
 80198e2:	4650      	mov	r0, sl
 80198e4:	f7e6 fc4c 	bl	8000180 <memchr>
 80198e8:	b138      	cbz	r0, 80198fa <_vfiprintf_r+0x176>
 80198ea:	9b04      	ldr	r3, [sp, #16]
 80198ec:	eba0 000a 	sub.w	r0, r0, sl
 80198f0:	2240      	movs	r2, #64	@ 0x40
 80198f2:	4082      	lsls	r2, r0
 80198f4:	4313      	orrs	r3, r2
 80198f6:	3401      	adds	r4, #1
 80198f8:	9304      	str	r3, [sp, #16]
 80198fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80198fe:	4829      	ldr	r0, [pc, #164]	@ (80199a4 <_vfiprintf_r+0x220>)
 8019900:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019904:	2206      	movs	r2, #6
 8019906:	f7e6 fc3b 	bl	8000180 <memchr>
 801990a:	2800      	cmp	r0, #0
 801990c:	d03f      	beq.n	801998e <_vfiprintf_r+0x20a>
 801990e:	4b26      	ldr	r3, [pc, #152]	@ (80199a8 <_vfiprintf_r+0x224>)
 8019910:	bb1b      	cbnz	r3, 801995a <_vfiprintf_r+0x1d6>
 8019912:	9b03      	ldr	r3, [sp, #12]
 8019914:	3307      	adds	r3, #7
 8019916:	f023 0307 	bic.w	r3, r3, #7
 801991a:	3308      	adds	r3, #8
 801991c:	9303      	str	r3, [sp, #12]
 801991e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019920:	443b      	add	r3, r7
 8019922:	9309      	str	r3, [sp, #36]	@ 0x24
 8019924:	e76a      	b.n	80197fc <_vfiprintf_r+0x78>
 8019926:	fb0c 3202 	mla	r2, ip, r2, r3
 801992a:	460c      	mov	r4, r1
 801992c:	2001      	movs	r0, #1
 801992e:	e7a8      	b.n	8019882 <_vfiprintf_r+0xfe>
 8019930:	2300      	movs	r3, #0
 8019932:	3401      	adds	r4, #1
 8019934:	9305      	str	r3, [sp, #20]
 8019936:	4619      	mov	r1, r3
 8019938:	f04f 0c0a 	mov.w	ip, #10
 801993c:	4620      	mov	r0, r4
 801993e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019942:	3a30      	subs	r2, #48	@ 0x30
 8019944:	2a09      	cmp	r2, #9
 8019946:	d903      	bls.n	8019950 <_vfiprintf_r+0x1cc>
 8019948:	2b00      	cmp	r3, #0
 801994a:	d0c6      	beq.n	80198da <_vfiprintf_r+0x156>
 801994c:	9105      	str	r1, [sp, #20]
 801994e:	e7c4      	b.n	80198da <_vfiprintf_r+0x156>
 8019950:	fb0c 2101 	mla	r1, ip, r1, r2
 8019954:	4604      	mov	r4, r0
 8019956:	2301      	movs	r3, #1
 8019958:	e7f0      	b.n	801993c <_vfiprintf_r+0x1b8>
 801995a:	ab03      	add	r3, sp, #12
 801995c:	9300      	str	r3, [sp, #0]
 801995e:	462a      	mov	r2, r5
 8019960:	4b12      	ldr	r3, [pc, #72]	@ (80199ac <_vfiprintf_r+0x228>)
 8019962:	a904      	add	r1, sp, #16
 8019964:	4630      	mov	r0, r6
 8019966:	f7fc fd4f 	bl	8016408 <_printf_float>
 801996a:	4607      	mov	r7, r0
 801996c:	1c78      	adds	r0, r7, #1
 801996e:	d1d6      	bne.n	801991e <_vfiprintf_r+0x19a>
 8019970:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019972:	07d9      	lsls	r1, r3, #31
 8019974:	d405      	bmi.n	8019982 <_vfiprintf_r+0x1fe>
 8019976:	89ab      	ldrh	r3, [r5, #12]
 8019978:	059a      	lsls	r2, r3, #22
 801997a:	d402      	bmi.n	8019982 <_vfiprintf_r+0x1fe>
 801997c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801997e:	f7fd fd7b 	bl	8017478 <__retarget_lock_release_recursive>
 8019982:	89ab      	ldrh	r3, [r5, #12]
 8019984:	065b      	lsls	r3, r3, #25
 8019986:	f53f af1f 	bmi.w	80197c8 <_vfiprintf_r+0x44>
 801998a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801998c:	e71e      	b.n	80197cc <_vfiprintf_r+0x48>
 801998e:	ab03      	add	r3, sp, #12
 8019990:	9300      	str	r3, [sp, #0]
 8019992:	462a      	mov	r2, r5
 8019994:	4b05      	ldr	r3, [pc, #20]	@ (80199ac <_vfiprintf_r+0x228>)
 8019996:	a904      	add	r1, sp, #16
 8019998:	4630      	mov	r0, r6
 801999a:	f7fc ffcd 	bl	8016938 <_printf_i>
 801999e:	e7e4      	b.n	801996a <_vfiprintf_r+0x1e6>
 80199a0:	0801e430 	.word	0x0801e430
 80199a4:	0801e43a 	.word	0x0801e43a
 80199a8:	08016409 	.word	0x08016409
 80199ac:	08019761 	.word	0x08019761
 80199b0:	0801e436 	.word	0x0801e436

080199b4 <__swbuf_r>:
 80199b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199b6:	460e      	mov	r6, r1
 80199b8:	4614      	mov	r4, r2
 80199ba:	4605      	mov	r5, r0
 80199bc:	b118      	cbz	r0, 80199c6 <__swbuf_r+0x12>
 80199be:	6a03      	ldr	r3, [r0, #32]
 80199c0:	b90b      	cbnz	r3, 80199c6 <__swbuf_r+0x12>
 80199c2:	f7fd fb79 	bl	80170b8 <__sinit>
 80199c6:	69a3      	ldr	r3, [r4, #24]
 80199c8:	60a3      	str	r3, [r4, #8]
 80199ca:	89a3      	ldrh	r3, [r4, #12]
 80199cc:	071a      	lsls	r2, r3, #28
 80199ce:	d501      	bpl.n	80199d4 <__swbuf_r+0x20>
 80199d0:	6923      	ldr	r3, [r4, #16]
 80199d2:	b943      	cbnz	r3, 80199e6 <__swbuf_r+0x32>
 80199d4:	4621      	mov	r1, r4
 80199d6:	4628      	mov	r0, r5
 80199d8:	f000 f82a 	bl	8019a30 <__swsetup_r>
 80199dc:	b118      	cbz	r0, 80199e6 <__swbuf_r+0x32>
 80199de:	f04f 37ff 	mov.w	r7, #4294967295
 80199e2:	4638      	mov	r0, r7
 80199e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80199e6:	6823      	ldr	r3, [r4, #0]
 80199e8:	6922      	ldr	r2, [r4, #16]
 80199ea:	1a98      	subs	r0, r3, r2
 80199ec:	6963      	ldr	r3, [r4, #20]
 80199ee:	b2f6      	uxtb	r6, r6
 80199f0:	4283      	cmp	r3, r0
 80199f2:	4637      	mov	r7, r6
 80199f4:	dc05      	bgt.n	8019a02 <__swbuf_r+0x4e>
 80199f6:	4621      	mov	r1, r4
 80199f8:	4628      	mov	r0, r5
 80199fa:	f7ff fdfd 	bl	80195f8 <_fflush_r>
 80199fe:	2800      	cmp	r0, #0
 8019a00:	d1ed      	bne.n	80199de <__swbuf_r+0x2a>
 8019a02:	68a3      	ldr	r3, [r4, #8]
 8019a04:	3b01      	subs	r3, #1
 8019a06:	60a3      	str	r3, [r4, #8]
 8019a08:	6823      	ldr	r3, [r4, #0]
 8019a0a:	1c5a      	adds	r2, r3, #1
 8019a0c:	6022      	str	r2, [r4, #0]
 8019a0e:	701e      	strb	r6, [r3, #0]
 8019a10:	6962      	ldr	r2, [r4, #20]
 8019a12:	1c43      	adds	r3, r0, #1
 8019a14:	429a      	cmp	r2, r3
 8019a16:	d004      	beq.n	8019a22 <__swbuf_r+0x6e>
 8019a18:	89a3      	ldrh	r3, [r4, #12]
 8019a1a:	07db      	lsls	r3, r3, #31
 8019a1c:	d5e1      	bpl.n	80199e2 <__swbuf_r+0x2e>
 8019a1e:	2e0a      	cmp	r6, #10
 8019a20:	d1df      	bne.n	80199e2 <__swbuf_r+0x2e>
 8019a22:	4621      	mov	r1, r4
 8019a24:	4628      	mov	r0, r5
 8019a26:	f7ff fde7 	bl	80195f8 <_fflush_r>
 8019a2a:	2800      	cmp	r0, #0
 8019a2c:	d0d9      	beq.n	80199e2 <__swbuf_r+0x2e>
 8019a2e:	e7d6      	b.n	80199de <__swbuf_r+0x2a>

08019a30 <__swsetup_r>:
 8019a30:	b538      	push	{r3, r4, r5, lr}
 8019a32:	4b29      	ldr	r3, [pc, #164]	@ (8019ad8 <__swsetup_r+0xa8>)
 8019a34:	4605      	mov	r5, r0
 8019a36:	6818      	ldr	r0, [r3, #0]
 8019a38:	460c      	mov	r4, r1
 8019a3a:	b118      	cbz	r0, 8019a44 <__swsetup_r+0x14>
 8019a3c:	6a03      	ldr	r3, [r0, #32]
 8019a3e:	b90b      	cbnz	r3, 8019a44 <__swsetup_r+0x14>
 8019a40:	f7fd fb3a 	bl	80170b8 <__sinit>
 8019a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a48:	0719      	lsls	r1, r3, #28
 8019a4a:	d422      	bmi.n	8019a92 <__swsetup_r+0x62>
 8019a4c:	06da      	lsls	r2, r3, #27
 8019a4e:	d407      	bmi.n	8019a60 <__swsetup_r+0x30>
 8019a50:	2209      	movs	r2, #9
 8019a52:	602a      	str	r2, [r5, #0]
 8019a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019a58:	81a3      	strh	r3, [r4, #12]
 8019a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8019a5e:	e033      	b.n	8019ac8 <__swsetup_r+0x98>
 8019a60:	0758      	lsls	r0, r3, #29
 8019a62:	d512      	bpl.n	8019a8a <__swsetup_r+0x5a>
 8019a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019a66:	b141      	cbz	r1, 8019a7a <__swsetup_r+0x4a>
 8019a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019a6c:	4299      	cmp	r1, r3
 8019a6e:	d002      	beq.n	8019a76 <__swsetup_r+0x46>
 8019a70:	4628      	mov	r0, r5
 8019a72:	f7fe fb91 	bl	8018198 <_free_r>
 8019a76:	2300      	movs	r3, #0
 8019a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8019a7a:	89a3      	ldrh	r3, [r4, #12]
 8019a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019a80:	81a3      	strh	r3, [r4, #12]
 8019a82:	2300      	movs	r3, #0
 8019a84:	6063      	str	r3, [r4, #4]
 8019a86:	6923      	ldr	r3, [r4, #16]
 8019a88:	6023      	str	r3, [r4, #0]
 8019a8a:	89a3      	ldrh	r3, [r4, #12]
 8019a8c:	f043 0308 	orr.w	r3, r3, #8
 8019a90:	81a3      	strh	r3, [r4, #12]
 8019a92:	6923      	ldr	r3, [r4, #16]
 8019a94:	b94b      	cbnz	r3, 8019aaa <__swsetup_r+0x7a>
 8019a96:	89a3      	ldrh	r3, [r4, #12]
 8019a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019aa0:	d003      	beq.n	8019aaa <__swsetup_r+0x7a>
 8019aa2:	4621      	mov	r1, r4
 8019aa4:	4628      	mov	r0, r5
 8019aa6:	f000 f88b 	bl	8019bc0 <__smakebuf_r>
 8019aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019aae:	f013 0201 	ands.w	r2, r3, #1
 8019ab2:	d00a      	beq.n	8019aca <__swsetup_r+0x9a>
 8019ab4:	2200      	movs	r2, #0
 8019ab6:	60a2      	str	r2, [r4, #8]
 8019ab8:	6962      	ldr	r2, [r4, #20]
 8019aba:	4252      	negs	r2, r2
 8019abc:	61a2      	str	r2, [r4, #24]
 8019abe:	6922      	ldr	r2, [r4, #16]
 8019ac0:	b942      	cbnz	r2, 8019ad4 <__swsetup_r+0xa4>
 8019ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019ac6:	d1c5      	bne.n	8019a54 <__swsetup_r+0x24>
 8019ac8:	bd38      	pop	{r3, r4, r5, pc}
 8019aca:	0799      	lsls	r1, r3, #30
 8019acc:	bf58      	it	pl
 8019ace:	6962      	ldrpl	r2, [r4, #20]
 8019ad0:	60a2      	str	r2, [r4, #8]
 8019ad2:	e7f4      	b.n	8019abe <__swsetup_r+0x8e>
 8019ad4:	2000      	movs	r0, #0
 8019ad6:	e7f7      	b.n	8019ac8 <__swsetup_r+0x98>
 8019ad8:	200002a4 	.word	0x200002a4

08019adc <_raise_r>:
 8019adc:	291f      	cmp	r1, #31
 8019ade:	b538      	push	{r3, r4, r5, lr}
 8019ae0:	4605      	mov	r5, r0
 8019ae2:	460c      	mov	r4, r1
 8019ae4:	d904      	bls.n	8019af0 <_raise_r+0x14>
 8019ae6:	2316      	movs	r3, #22
 8019ae8:	6003      	str	r3, [r0, #0]
 8019aea:	f04f 30ff 	mov.w	r0, #4294967295
 8019aee:	bd38      	pop	{r3, r4, r5, pc}
 8019af0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019af2:	b112      	cbz	r2, 8019afa <_raise_r+0x1e>
 8019af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019af8:	b94b      	cbnz	r3, 8019b0e <_raise_r+0x32>
 8019afa:	4628      	mov	r0, r5
 8019afc:	f000 f830 	bl	8019b60 <_getpid_r>
 8019b00:	4622      	mov	r2, r4
 8019b02:	4601      	mov	r1, r0
 8019b04:	4628      	mov	r0, r5
 8019b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019b0a:	f000 b817 	b.w	8019b3c <_kill_r>
 8019b0e:	2b01      	cmp	r3, #1
 8019b10:	d00a      	beq.n	8019b28 <_raise_r+0x4c>
 8019b12:	1c59      	adds	r1, r3, #1
 8019b14:	d103      	bne.n	8019b1e <_raise_r+0x42>
 8019b16:	2316      	movs	r3, #22
 8019b18:	6003      	str	r3, [r0, #0]
 8019b1a:	2001      	movs	r0, #1
 8019b1c:	e7e7      	b.n	8019aee <_raise_r+0x12>
 8019b1e:	2100      	movs	r1, #0
 8019b20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019b24:	4620      	mov	r0, r4
 8019b26:	4798      	blx	r3
 8019b28:	2000      	movs	r0, #0
 8019b2a:	e7e0      	b.n	8019aee <_raise_r+0x12>

08019b2c <raise>:
 8019b2c:	4b02      	ldr	r3, [pc, #8]	@ (8019b38 <raise+0xc>)
 8019b2e:	4601      	mov	r1, r0
 8019b30:	6818      	ldr	r0, [r3, #0]
 8019b32:	f7ff bfd3 	b.w	8019adc <_raise_r>
 8019b36:	bf00      	nop
 8019b38:	200002a4 	.word	0x200002a4

08019b3c <_kill_r>:
 8019b3c:	b538      	push	{r3, r4, r5, lr}
 8019b3e:	4d07      	ldr	r5, [pc, #28]	@ (8019b5c <_kill_r+0x20>)
 8019b40:	2300      	movs	r3, #0
 8019b42:	4604      	mov	r4, r0
 8019b44:	4608      	mov	r0, r1
 8019b46:	4611      	mov	r1, r2
 8019b48:	602b      	str	r3, [r5, #0]
 8019b4a:	f7eb fe6b 	bl	8005824 <_kill>
 8019b4e:	1c43      	adds	r3, r0, #1
 8019b50:	d102      	bne.n	8019b58 <_kill_r+0x1c>
 8019b52:	682b      	ldr	r3, [r5, #0]
 8019b54:	b103      	cbz	r3, 8019b58 <_kill_r+0x1c>
 8019b56:	6023      	str	r3, [r4, #0]
 8019b58:	bd38      	pop	{r3, r4, r5, pc}
 8019b5a:	bf00      	nop
 8019b5c:	20002e00 	.word	0x20002e00

08019b60 <_getpid_r>:
 8019b60:	f7eb be58 	b.w	8005814 <_getpid>

08019b64 <_malloc_usable_size_r>:
 8019b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b68:	1f18      	subs	r0, r3, #4
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	bfbc      	itt	lt
 8019b6e:	580b      	ldrlt	r3, [r1, r0]
 8019b70:	18c0      	addlt	r0, r0, r3
 8019b72:	4770      	bx	lr

08019b74 <__swhatbuf_r>:
 8019b74:	b570      	push	{r4, r5, r6, lr}
 8019b76:	460c      	mov	r4, r1
 8019b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b7c:	2900      	cmp	r1, #0
 8019b7e:	b096      	sub	sp, #88	@ 0x58
 8019b80:	4615      	mov	r5, r2
 8019b82:	461e      	mov	r6, r3
 8019b84:	da0d      	bge.n	8019ba2 <__swhatbuf_r+0x2e>
 8019b86:	89a3      	ldrh	r3, [r4, #12]
 8019b88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019b8c:	f04f 0100 	mov.w	r1, #0
 8019b90:	bf14      	ite	ne
 8019b92:	2340      	movne	r3, #64	@ 0x40
 8019b94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8019b98:	2000      	movs	r0, #0
 8019b9a:	6031      	str	r1, [r6, #0]
 8019b9c:	602b      	str	r3, [r5, #0]
 8019b9e:	b016      	add	sp, #88	@ 0x58
 8019ba0:	bd70      	pop	{r4, r5, r6, pc}
 8019ba2:	466a      	mov	r2, sp
 8019ba4:	f000 f848 	bl	8019c38 <_fstat_r>
 8019ba8:	2800      	cmp	r0, #0
 8019baa:	dbec      	blt.n	8019b86 <__swhatbuf_r+0x12>
 8019bac:	9901      	ldr	r1, [sp, #4]
 8019bae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019bb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8019bb6:	4259      	negs	r1, r3
 8019bb8:	4159      	adcs	r1, r3
 8019bba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019bbe:	e7eb      	b.n	8019b98 <__swhatbuf_r+0x24>

08019bc0 <__smakebuf_r>:
 8019bc0:	898b      	ldrh	r3, [r1, #12]
 8019bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019bc4:	079d      	lsls	r5, r3, #30
 8019bc6:	4606      	mov	r6, r0
 8019bc8:	460c      	mov	r4, r1
 8019bca:	d507      	bpl.n	8019bdc <__smakebuf_r+0x1c>
 8019bcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019bd0:	6023      	str	r3, [r4, #0]
 8019bd2:	6123      	str	r3, [r4, #16]
 8019bd4:	2301      	movs	r3, #1
 8019bd6:	6163      	str	r3, [r4, #20]
 8019bd8:	b003      	add	sp, #12
 8019bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bdc:	ab01      	add	r3, sp, #4
 8019bde:	466a      	mov	r2, sp
 8019be0:	f7ff ffc8 	bl	8019b74 <__swhatbuf_r>
 8019be4:	9f00      	ldr	r7, [sp, #0]
 8019be6:	4605      	mov	r5, r0
 8019be8:	4639      	mov	r1, r7
 8019bea:	4630      	mov	r0, r6
 8019bec:	f7fb fbec 	bl	80153c8 <_malloc_r>
 8019bf0:	b948      	cbnz	r0, 8019c06 <__smakebuf_r+0x46>
 8019bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bf6:	059a      	lsls	r2, r3, #22
 8019bf8:	d4ee      	bmi.n	8019bd8 <__smakebuf_r+0x18>
 8019bfa:	f023 0303 	bic.w	r3, r3, #3
 8019bfe:	f043 0302 	orr.w	r3, r3, #2
 8019c02:	81a3      	strh	r3, [r4, #12]
 8019c04:	e7e2      	b.n	8019bcc <__smakebuf_r+0xc>
 8019c06:	89a3      	ldrh	r3, [r4, #12]
 8019c08:	6020      	str	r0, [r4, #0]
 8019c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019c0e:	81a3      	strh	r3, [r4, #12]
 8019c10:	9b01      	ldr	r3, [sp, #4]
 8019c12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019c16:	b15b      	cbz	r3, 8019c30 <__smakebuf_r+0x70>
 8019c18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c1c:	4630      	mov	r0, r6
 8019c1e:	f000 f81d 	bl	8019c5c <_isatty_r>
 8019c22:	b128      	cbz	r0, 8019c30 <__smakebuf_r+0x70>
 8019c24:	89a3      	ldrh	r3, [r4, #12]
 8019c26:	f023 0303 	bic.w	r3, r3, #3
 8019c2a:	f043 0301 	orr.w	r3, r3, #1
 8019c2e:	81a3      	strh	r3, [r4, #12]
 8019c30:	89a3      	ldrh	r3, [r4, #12]
 8019c32:	431d      	orrs	r5, r3
 8019c34:	81a5      	strh	r5, [r4, #12]
 8019c36:	e7cf      	b.n	8019bd8 <__smakebuf_r+0x18>

08019c38 <_fstat_r>:
 8019c38:	b538      	push	{r3, r4, r5, lr}
 8019c3a:	4d07      	ldr	r5, [pc, #28]	@ (8019c58 <_fstat_r+0x20>)
 8019c3c:	2300      	movs	r3, #0
 8019c3e:	4604      	mov	r4, r0
 8019c40:	4608      	mov	r0, r1
 8019c42:	4611      	mov	r1, r2
 8019c44:	602b      	str	r3, [r5, #0]
 8019c46:	f7eb fe4d 	bl	80058e4 <_fstat>
 8019c4a:	1c43      	adds	r3, r0, #1
 8019c4c:	d102      	bne.n	8019c54 <_fstat_r+0x1c>
 8019c4e:	682b      	ldr	r3, [r5, #0]
 8019c50:	b103      	cbz	r3, 8019c54 <_fstat_r+0x1c>
 8019c52:	6023      	str	r3, [r4, #0]
 8019c54:	bd38      	pop	{r3, r4, r5, pc}
 8019c56:	bf00      	nop
 8019c58:	20002e00 	.word	0x20002e00

08019c5c <_isatty_r>:
 8019c5c:	b538      	push	{r3, r4, r5, lr}
 8019c5e:	4d06      	ldr	r5, [pc, #24]	@ (8019c78 <_isatty_r+0x1c>)
 8019c60:	2300      	movs	r3, #0
 8019c62:	4604      	mov	r4, r0
 8019c64:	4608      	mov	r0, r1
 8019c66:	602b      	str	r3, [r5, #0]
 8019c68:	f7eb fe4c 	bl	8005904 <_isatty>
 8019c6c:	1c43      	adds	r3, r0, #1
 8019c6e:	d102      	bne.n	8019c76 <_isatty_r+0x1a>
 8019c70:	682b      	ldr	r3, [r5, #0]
 8019c72:	b103      	cbz	r3, 8019c76 <_isatty_r+0x1a>
 8019c74:	6023      	str	r3, [r4, #0]
 8019c76:	bd38      	pop	{r3, r4, r5, pc}
 8019c78:	20002e00 	.word	0x20002e00
 8019c7c:	00000000 	.word	0x00000000

08019c80 <log>:
 8019c80:	b538      	push	{r3, r4, r5, lr}
 8019c82:	ed2d 8b02 	vpush	{d8}
 8019c86:	ec55 4b10 	vmov	r4, r5, d0
 8019c8a:	f000 fb7d 	bl	801a388 <__ieee754_log>
 8019c8e:	4622      	mov	r2, r4
 8019c90:	462b      	mov	r3, r5
 8019c92:	4620      	mov	r0, r4
 8019c94:	4629      	mov	r1, r5
 8019c96:	eeb0 8a40 	vmov.f32	s16, s0
 8019c9a:	eef0 8a60 	vmov.f32	s17, s1
 8019c9e:	f7e6 ff1d 	bl	8000adc <__aeabi_dcmpun>
 8019ca2:	b998      	cbnz	r0, 8019ccc <log+0x4c>
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	4620      	mov	r0, r4
 8019caa:	4629      	mov	r1, r5
 8019cac:	f7e6 ff0c 	bl	8000ac8 <__aeabi_dcmpgt>
 8019cb0:	b960      	cbnz	r0, 8019ccc <log+0x4c>
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	4620      	mov	r0, r4
 8019cb8:	4629      	mov	r1, r5
 8019cba:	f7e6 fedd 	bl	8000a78 <__aeabi_dcmpeq>
 8019cbe:	b160      	cbz	r0, 8019cda <log+0x5a>
 8019cc0:	f7fd fbae 	bl	8017420 <__errno>
 8019cc4:	ed9f 8b0a 	vldr	d8, [pc, #40]	@ 8019cf0 <log+0x70>
 8019cc8:	2322      	movs	r3, #34	@ 0x22
 8019cca:	6003      	str	r3, [r0, #0]
 8019ccc:	eeb0 0a48 	vmov.f32	s0, s16
 8019cd0:	eef0 0a68 	vmov.f32	s1, s17
 8019cd4:	ecbd 8b02 	vpop	{d8}
 8019cd8:	bd38      	pop	{r3, r4, r5, pc}
 8019cda:	f7fd fba1 	bl	8017420 <__errno>
 8019cde:	ecbd 8b02 	vpop	{d8}
 8019ce2:	2321      	movs	r3, #33	@ 0x21
 8019ce4:	6003      	str	r3, [r0, #0]
 8019ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019cea:	4803      	ldr	r0, [pc, #12]	@ (8019cf8 <log+0x78>)
 8019cec:	f7fd bbdc 	b.w	80174a8 <nan>
 8019cf0:	00000000 	.word	0x00000000
 8019cf4:	fff00000 	.word	0xfff00000
 8019cf8:	0801e1fe 	.word	0x0801e1fe
 8019cfc:	00000000 	.word	0x00000000

08019d00 <cos>:
 8019d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d02:	ec53 2b10 	vmov	r2, r3, d0
 8019d06:	4826      	ldr	r0, [pc, #152]	@ (8019da0 <cos+0xa0>)
 8019d08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019d0c:	4281      	cmp	r1, r0
 8019d0e:	d806      	bhi.n	8019d1e <cos+0x1e>
 8019d10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8019d98 <cos+0x98>
 8019d14:	b005      	add	sp, #20
 8019d16:	f85d eb04 	ldr.w	lr, [sp], #4
 8019d1a:	f000 b9b1 	b.w	801a080 <__kernel_cos>
 8019d1e:	4821      	ldr	r0, [pc, #132]	@ (8019da4 <cos+0xa4>)
 8019d20:	4281      	cmp	r1, r0
 8019d22:	d908      	bls.n	8019d36 <cos+0x36>
 8019d24:	4610      	mov	r0, r2
 8019d26:	4619      	mov	r1, r3
 8019d28:	f7e6 fa86 	bl	8000238 <__aeabi_dsub>
 8019d2c:	ec41 0b10 	vmov	d0, r0, r1
 8019d30:	b005      	add	sp, #20
 8019d32:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d36:	4668      	mov	r0, sp
 8019d38:	f000 fcde 	bl	801a6f8 <__ieee754_rem_pio2>
 8019d3c:	f000 0003 	and.w	r0, r0, #3
 8019d40:	2801      	cmp	r0, #1
 8019d42:	d00b      	beq.n	8019d5c <cos+0x5c>
 8019d44:	2802      	cmp	r0, #2
 8019d46:	d015      	beq.n	8019d74 <cos+0x74>
 8019d48:	b9d8      	cbnz	r0, 8019d82 <cos+0x82>
 8019d4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d4e:	ed9d 0b00 	vldr	d0, [sp]
 8019d52:	f000 f995 	bl	801a080 <__kernel_cos>
 8019d56:	ec51 0b10 	vmov	r0, r1, d0
 8019d5a:	e7e7      	b.n	8019d2c <cos+0x2c>
 8019d5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d60:	ed9d 0b00 	vldr	d0, [sp]
 8019d64:	f000 fa54 	bl	801a210 <__kernel_sin>
 8019d68:	ec53 2b10 	vmov	r2, r3, d0
 8019d6c:	4610      	mov	r0, r2
 8019d6e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8019d72:	e7db      	b.n	8019d2c <cos+0x2c>
 8019d74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d78:	ed9d 0b00 	vldr	d0, [sp]
 8019d7c:	f000 f980 	bl	801a080 <__kernel_cos>
 8019d80:	e7f2      	b.n	8019d68 <cos+0x68>
 8019d82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019d86:	ed9d 0b00 	vldr	d0, [sp]
 8019d8a:	2001      	movs	r0, #1
 8019d8c:	f000 fa40 	bl	801a210 <__kernel_sin>
 8019d90:	e7e1      	b.n	8019d56 <cos+0x56>
 8019d92:	bf00      	nop
 8019d94:	f3af 8000 	nop.w
	...
 8019da0:	3fe921fb 	.word	0x3fe921fb
 8019da4:	7fefffff 	.word	0x7fefffff

08019da8 <sin>:
 8019da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019daa:	ec53 2b10 	vmov	r2, r3, d0
 8019dae:	4826      	ldr	r0, [pc, #152]	@ (8019e48 <sin+0xa0>)
 8019db0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019db4:	4281      	cmp	r1, r0
 8019db6:	d807      	bhi.n	8019dc8 <sin+0x20>
 8019db8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8019e40 <sin+0x98>
 8019dbc:	2000      	movs	r0, #0
 8019dbe:	b005      	add	sp, #20
 8019dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8019dc4:	f000 ba24 	b.w	801a210 <__kernel_sin>
 8019dc8:	4820      	ldr	r0, [pc, #128]	@ (8019e4c <sin+0xa4>)
 8019dca:	4281      	cmp	r1, r0
 8019dcc:	d908      	bls.n	8019de0 <sin+0x38>
 8019dce:	4610      	mov	r0, r2
 8019dd0:	4619      	mov	r1, r3
 8019dd2:	f7e6 fa31 	bl	8000238 <__aeabi_dsub>
 8019dd6:	ec41 0b10 	vmov	d0, r0, r1
 8019dda:	b005      	add	sp, #20
 8019ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8019de0:	4668      	mov	r0, sp
 8019de2:	f000 fc89 	bl	801a6f8 <__ieee754_rem_pio2>
 8019de6:	f000 0003 	and.w	r0, r0, #3
 8019dea:	2801      	cmp	r0, #1
 8019dec:	d00c      	beq.n	8019e08 <sin+0x60>
 8019dee:	2802      	cmp	r0, #2
 8019df0:	d011      	beq.n	8019e16 <sin+0x6e>
 8019df2:	b9e8      	cbnz	r0, 8019e30 <sin+0x88>
 8019df4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019df8:	ed9d 0b00 	vldr	d0, [sp]
 8019dfc:	2001      	movs	r0, #1
 8019dfe:	f000 fa07 	bl	801a210 <__kernel_sin>
 8019e02:	ec51 0b10 	vmov	r0, r1, d0
 8019e06:	e7e6      	b.n	8019dd6 <sin+0x2e>
 8019e08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019e0c:	ed9d 0b00 	vldr	d0, [sp]
 8019e10:	f000 f936 	bl	801a080 <__kernel_cos>
 8019e14:	e7f5      	b.n	8019e02 <sin+0x5a>
 8019e16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019e1a:	ed9d 0b00 	vldr	d0, [sp]
 8019e1e:	2001      	movs	r0, #1
 8019e20:	f000 f9f6 	bl	801a210 <__kernel_sin>
 8019e24:	ec53 2b10 	vmov	r2, r3, d0
 8019e28:	4610      	mov	r0, r2
 8019e2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8019e2e:	e7d2      	b.n	8019dd6 <sin+0x2e>
 8019e30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8019e34:	ed9d 0b00 	vldr	d0, [sp]
 8019e38:	f000 f922 	bl	801a080 <__kernel_cos>
 8019e3c:	e7f2      	b.n	8019e24 <sin+0x7c>
 8019e3e:	bf00      	nop
	...
 8019e48:	3fe921fb 	.word	0x3fe921fb
 8019e4c:	7fefffff 	.word	0x7fefffff

08019e50 <expf>:
 8019e50:	b508      	push	{r3, lr}
 8019e52:	ed2d 8b02 	vpush	{d8}
 8019e56:	eef0 8a40 	vmov.f32	s17, s0
 8019e5a:	f000 fe85 	bl	801ab68 <__ieee754_expf>
 8019e5e:	eeb0 8a40 	vmov.f32	s16, s0
 8019e62:	eeb0 0a68 	vmov.f32	s0, s17
 8019e66:	f000 f87d 	bl	8019f64 <finitef>
 8019e6a:	b160      	cbz	r0, 8019e86 <expf+0x36>
 8019e6c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8019eac <expf+0x5c>
 8019e70:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e78:	dd0a      	ble.n	8019e90 <expf+0x40>
 8019e7a:	f7fd fad1 	bl	8017420 <__errno>
 8019e7e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8019eb0 <expf+0x60>
 8019e82:	2322      	movs	r3, #34	@ 0x22
 8019e84:	6003      	str	r3, [r0, #0]
 8019e86:	eeb0 0a48 	vmov.f32	s0, s16
 8019e8a:	ecbd 8b02 	vpop	{d8}
 8019e8e:	bd08      	pop	{r3, pc}
 8019e90:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8019eb4 <expf+0x64>
 8019e94:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e9c:	d5f3      	bpl.n	8019e86 <expf+0x36>
 8019e9e:	f7fd fabf 	bl	8017420 <__errno>
 8019ea2:	2322      	movs	r3, #34	@ 0x22
 8019ea4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8019eb8 <expf+0x68>
 8019ea8:	6003      	str	r3, [r0, #0]
 8019eaa:	e7ec      	b.n	8019e86 <expf+0x36>
 8019eac:	42b17217 	.word	0x42b17217
 8019eb0:	7f800000 	.word	0x7f800000
 8019eb4:	c2cff1b5 	.word	0xc2cff1b5
 8019eb8:	00000000 	.word	0x00000000

08019ebc <fmin>:
 8019ebc:	b508      	push	{r3, lr}
 8019ebe:	ed2d 8b04 	vpush	{d8-d9}
 8019ec2:	eeb0 8a40 	vmov.f32	s16, s0
 8019ec6:	eef0 8a60 	vmov.f32	s17, s1
 8019eca:	eeb0 9a41 	vmov.f32	s18, s2
 8019ece:	eef0 9a61 	vmov.f32	s19, s3
 8019ed2:	f000 f81d 	bl	8019f10 <__fpclassifyd>
 8019ed6:	b950      	cbnz	r0, 8019eee <fmin+0x32>
 8019ed8:	eeb0 8a49 	vmov.f32	s16, s18
 8019edc:	eef0 8a69 	vmov.f32	s17, s19
 8019ee0:	eeb0 0a48 	vmov.f32	s0, s16
 8019ee4:	eef0 0a68 	vmov.f32	s1, s17
 8019ee8:	ecbd 8b04 	vpop	{d8-d9}
 8019eec:	bd08      	pop	{r3, pc}
 8019eee:	eeb0 0a49 	vmov.f32	s0, s18
 8019ef2:	eef0 0a69 	vmov.f32	s1, s19
 8019ef6:	f000 f80b 	bl	8019f10 <__fpclassifyd>
 8019efa:	2800      	cmp	r0, #0
 8019efc:	d0f0      	beq.n	8019ee0 <fmin+0x24>
 8019efe:	ec53 2b19 	vmov	r2, r3, d9
 8019f02:	ec51 0b18 	vmov	r0, r1, d8
 8019f06:	f7e6 fdc1 	bl	8000a8c <__aeabi_dcmplt>
 8019f0a:	2800      	cmp	r0, #0
 8019f0c:	d0e4      	beq.n	8019ed8 <fmin+0x1c>
 8019f0e:	e7e7      	b.n	8019ee0 <fmin+0x24>

08019f10 <__fpclassifyd>:
 8019f10:	ec51 0b10 	vmov	r0, r1, d0
 8019f14:	b510      	push	{r4, lr}
 8019f16:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8019f1a:	460b      	mov	r3, r1
 8019f1c:	d019      	beq.n	8019f52 <__fpclassifyd+0x42>
 8019f1e:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8019f22:	490e      	ldr	r1, [pc, #56]	@ (8019f5c <__fpclassifyd+0x4c>)
 8019f24:	428a      	cmp	r2, r1
 8019f26:	d90e      	bls.n	8019f46 <__fpclassifyd+0x36>
 8019f28:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8019f2c:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8019f30:	428a      	cmp	r2, r1
 8019f32:	d908      	bls.n	8019f46 <__fpclassifyd+0x36>
 8019f34:	4a0a      	ldr	r2, [pc, #40]	@ (8019f60 <__fpclassifyd+0x50>)
 8019f36:	4213      	tst	r3, r2
 8019f38:	d007      	beq.n	8019f4a <__fpclassifyd+0x3a>
 8019f3a:	4294      	cmp	r4, r2
 8019f3c:	d107      	bne.n	8019f4e <__fpclassifyd+0x3e>
 8019f3e:	fab0 f080 	clz	r0, r0
 8019f42:	0940      	lsrs	r0, r0, #5
 8019f44:	bd10      	pop	{r4, pc}
 8019f46:	2004      	movs	r0, #4
 8019f48:	e7fc      	b.n	8019f44 <__fpclassifyd+0x34>
 8019f4a:	2003      	movs	r0, #3
 8019f4c:	e7fa      	b.n	8019f44 <__fpclassifyd+0x34>
 8019f4e:	2000      	movs	r0, #0
 8019f50:	e7f8      	b.n	8019f44 <__fpclassifyd+0x34>
 8019f52:	2800      	cmp	r0, #0
 8019f54:	d1ee      	bne.n	8019f34 <__fpclassifyd+0x24>
 8019f56:	2002      	movs	r0, #2
 8019f58:	e7f4      	b.n	8019f44 <__fpclassifyd+0x34>
 8019f5a:	bf00      	nop
 8019f5c:	7fdfffff 	.word	0x7fdfffff
 8019f60:	7ff00000 	.word	0x7ff00000

08019f64 <finitef>:
 8019f64:	ee10 3a10 	vmov	r3, s0
 8019f68:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8019f6c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8019f70:	bfac      	ite	ge
 8019f72:	2000      	movge	r0, #0
 8019f74:	2001      	movlt	r0, #1
 8019f76:	4770      	bx	lr

08019f78 <cosl>:
 8019f78:	f7ff bec2 	b.w	8019d00 <cos>

08019f7c <sinl>:
 8019f7c:	f7ff bf14 	b.w	8019da8 <sin>

08019f80 <acosl>:
 8019f80:	f000 bdb6 	b.w	801aaf0 <acos>
 8019f84:	0000      	movs	r0, r0
	...

08019f88 <floor>:
 8019f88:	ec51 0b10 	vmov	r0, r1, d0
 8019f8c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f94:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8019f98:	2e13      	cmp	r6, #19
 8019f9a:	460c      	mov	r4, r1
 8019f9c:	4605      	mov	r5, r0
 8019f9e:	4680      	mov	r8, r0
 8019fa0:	dc34      	bgt.n	801a00c <floor+0x84>
 8019fa2:	2e00      	cmp	r6, #0
 8019fa4:	da17      	bge.n	8019fd6 <floor+0x4e>
 8019fa6:	a332      	add	r3, pc, #200	@ (adr r3, 801a070 <floor+0xe8>)
 8019fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fac:	f7e6 f946 	bl	800023c <__adddf3>
 8019fb0:	2200      	movs	r2, #0
 8019fb2:	2300      	movs	r3, #0
 8019fb4:	f7e6 fd88 	bl	8000ac8 <__aeabi_dcmpgt>
 8019fb8:	b150      	cbz	r0, 8019fd0 <floor+0x48>
 8019fba:	2c00      	cmp	r4, #0
 8019fbc:	da55      	bge.n	801a06a <floor+0xe2>
 8019fbe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8019fc2:	432c      	orrs	r4, r5
 8019fc4:	2500      	movs	r5, #0
 8019fc6:	42ac      	cmp	r4, r5
 8019fc8:	4c2b      	ldr	r4, [pc, #172]	@ (801a078 <floor+0xf0>)
 8019fca:	bf08      	it	eq
 8019fcc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8019fd0:	4621      	mov	r1, r4
 8019fd2:	4628      	mov	r0, r5
 8019fd4:	e023      	b.n	801a01e <floor+0x96>
 8019fd6:	4f29      	ldr	r7, [pc, #164]	@ (801a07c <floor+0xf4>)
 8019fd8:	4137      	asrs	r7, r6
 8019fda:	ea01 0307 	and.w	r3, r1, r7
 8019fde:	4303      	orrs	r3, r0
 8019fe0:	d01d      	beq.n	801a01e <floor+0x96>
 8019fe2:	a323      	add	r3, pc, #140	@ (adr r3, 801a070 <floor+0xe8>)
 8019fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019fe8:	f7e6 f928 	bl	800023c <__adddf3>
 8019fec:	2200      	movs	r2, #0
 8019fee:	2300      	movs	r3, #0
 8019ff0:	f7e6 fd6a 	bl	8000ac8 <__aeabi_dcmpgt>
 8019ff4:	2800      	cmp	r0, #0
 8019ff6:	d0eb      	beq.n	8019fd0 <floor+0x48>
 8019ff8:	2c00      	cmp	r4, #0
 8019ffa:	bfbe      	ittt	lt
 8019ffc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801a000:	4133      	asrlt	r3, r6
 801a002:	18e4      	addlt	r4, r4, r3
 801a004:	ea24 0407 	bic.w	r4, r4, r7
 801a008:	2500      	movs	r5, #0
 801a00a:	e7e1      	b.n	8019fd0 <floor+0x48>
 801a00c:	2e33      	cmp	r6, #51	@ 0x33
 801a00e:	dd0a      	ble.n	801a026 <floor+0x9e>
 801a010:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801a014:	d103      	bne.n	801a01e <floor+0x96>
 801a016:	4602      	mov	r2, r0
 801a018:	460b      	mov	r3, r1
 801a01a:	f7e6 f90f 	bl	800023c <__adddf3>
 801a01e:	ec41 0b10 	vmov	d0, r0, r1
 801a022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a026:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801a02a:	f04f 37ff 	mov.w	r7, #4294967295
 801a02e:	40df      	lsrs	r7, r3
 801a030:	4207      	tst	r7, r0
 801a032:	d0f4      	beq.n	801a01e <floor+0x96>
 801a034:	a30e      	add	r3, pc, #56	@ (adr r3, 801a070 <floor+0xe8>)
 801a036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a03a:	f7e6 f8ff 	bl	800023c <__adddf3>
 801a03e:	2200      	movs	r2, #0
 801a040:	2300      	movs	r3, #0
 801a042:	f7e6 fd41 	bl	8000ac8 <__aeabi_dcmpgt>
 801a046:	2800      	cmp	r0, #0
 801a048:	d0c2      	beq.n	8019fd0 <floor+0x48>
 801a04a:	2c00      	cmp	r4, #0
 801a04c:	da0a      	bge.n	801a064 <floor+0xdc>
 801a04e:	2e14      	cmp	r6, #20
 801a050:	d101      	bne.n	801a056 <floor+0xce>
 801a052:	3401      	adds	r4, #1
 801a054:	e006      	b.n	801a064 <floor+0xdc>
 801a056:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801a05a:	2301      	movs	r3, #1
 801a05c:	40b3      	lsls	r3, r6
 801a05e:	441d      	add	r5, r3
 801a060:	4545      	cmp	r5, r8
 801a062:	d3f6      	bcc.n	801a052 <floor+0xca>
 801a064:	ea25 0507 	bic.w	r5, r5, r7
 801a068:	e7b2      	b.n	8019fd0 <floor+0x48>
 801a06a:	2500      	movs	r5, #0
 801a06c:	462c      	mov	r4, r5
 801a06e:	e7af      	b.n	8019fd0 <floor+0x48>
 801a070:	8800759c 	.word	0x8800759c
 801a074:	7e37e43c 	.word	0x7e37e43c
 801a078:	bff00000 	.word	0xbff00000
 801a07c:	000fffff 	.word	0x000fffff

0801a080 <__kernel_cos>:
 801a080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a084:	ec57 6b10 	vmov	r6, r7, d0
 801a088:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801a08c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 801a090:	ed8d 1b00 	vstr	d1, [sp]
 801a094:	d206      	bcs.n	801a0a4 <__kernel_cos+0x24>
 801a096:	4630      	mov	r0, r6
 801a098:	4639      	mov	r1, r7
 801a09a:	f7e6 fd35 	bl	8000b08 <__aeabi_d2iz>
 801a09e:	2800      	cmp	r0, #0
 801a0a0:	f000 8088 	beq.w	801a1b4 <__kernel_cos+0x134>
 801a0a4:	4632      	mov	r2, r6
 801a0a6:	463b      	mov	r3, r7
 801a0a8:	4630      	mov	r0, r6
 801a0aa:	4639      	mov	r1, r7
 801a0ac:	f7e6 fa7c 	bl	80005a8 <__aeabi_dmul>
 801a0b0:	4b51      	ldr	r3, [pc, #324]	@ (801a1f8 <__kernel_cos+0x178>)
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	4604      	mov	r4, r0
 801a0b6:	460d      	mov	r5, r1
 801a0b8:	f7e6 fa76 	bl	80005a8 <__aeabi_dmul>
 801a0bc:	a340      	add	r3, pc, #256	@ (adr r3, 801a1c0 <__kernel_cos+0x140>)
 801a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0c2:	4682      	mov	sl, r0
 801a0c4:	468b      	mov	fp, r1
 801a0c6:	4620      	mov	r0, r4
 801a0c8:	4629      	mov	r1, r5
 801a0ca:	f7e6 fa6d 	bl	80005a8 <__aeabi_dmul>
 801a0ce:	a33e      	add	r3, pc, #248	@ (adr r3, 801a1c8 <__kernel_cos+0x148>)
 801a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0d4:	f7e6 f8b2 	bl	800023c <__adddf3>
 801a0d8:	4622      	mov	r2, r4
 801a0da:	462b      	mov	r3, r5
 801a0dc:	f7e6 fa64 	bl	80005a8 <__aeabi_dmul>
 801a0e0:	a33b      	add	r3, pc, #236	@ (adr r3, 801a1d0 <__kernel_cos+0x150>)
 801a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0e6:	f7e6 f8a7 	bl	8000238 <__aeabi_dsub>
 801a0ea:	4622      	mov	r2, r4
 801a0ec:	462b      	mov	r3, r5
 801a0ee:	f7e6 fa5b 	bl	80005a8 <__aeabi_dmul>
 801a0f2:	a339      	add	r3, pc, #228	@ (adr r3, 801a1d8 <__kernel_cos+0x158>)
 801a0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0f8:	f7e6 f8a0 	bl	800023c <__adddf3>
 801a0fc:	4622      	mov	r2, r4
 801a0fe:	462b      	mov	r3, r5
 801a100:	f7e6 fa52 	bl	80005a8 <__aeabi_dmul>
 801a104:	a336      	add	r3, pc, #216	@ (adr r3, 801a1e0 <__kernel_cos+0x160>)
 801a106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a10a:	f7e6 f895 	bl	8000238 <__aeabi_dsub>
 801a10e:	4622      	mov	r2, r4
 801a110:	462b      	mov	r3, r5
 801a112:	f7e6 fa49 	bl	80005a8 <__aeabi_dmul>
 801a116:	a334      	add	r3, pc, #208	@ (adr r3, 801a1e8 <__kernel_cos+0x168>)
 801a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a11c:	f7e6 f88e 	bl	800023c <__adddf3>
 801a120:	4622      	mov	r2, r4
 801a122:	462b      	mov	r3, r5
 801a124:	f7e6 fa40 	bl	80005a8 <__aeabi_dmul>
 801a128:	4622      	mov	r2, r4
 801a12a:	462b      	mov	r3, r5
 801a12c:	f7e6 fa3c 	bl	80005a8 <__aeabi_dmul>
 801a130:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a134:	4604      	mov	r4, r0
 801a136:	460d      	mov	r5, r1
 801a138:	4630      	mov	r0, r6
 801a13a:	4639      	mov	r1, r7
 801a13c:	f7e6 fa34 	bl	80005a8 <__aeabi_dmul>
 801a140:	460b      	mov	r3, r1
 801a142:	4602      	mov	r2, r0
 801a144:	4629      	mov	r1, r5
 801a146:	4620      	mov	r0, r4
 801a148:	f7e6 f876 	bl	8000238 <__aeabi_dsub>
 801a14c:	4b2b      	ldr	r3, [pc, #172]	@ (801a1fc <__kernel_cos+0x17c>)
 801a14e:	4598      	cmp	r8, r3
 801a150:	4606      	mov	r6, r0
 801a152:	460f      	mov	r7, r1
 801a154:	d810      	bhi.n	801a178 <__kernel_cos+0xf8>
 801a156:	4602      	mov	r2, r0
 801a158:	460b      	mov	r3, r1
 801a15a:	4650      	mov	r0, sl
 801a15c:	4659      	mov	r1, fp
 801a15e:	f7e6 f86b 	bl	8000238 <__aeabi_dsub>
 801a162:	460b      	mov	r3, r1
 801a164:	4926      	ldr	r1, [pc, #152]	@ (801a200 <__kernel_cos+0x180>)
 801a166:	4602      	mov	r2, r0
 801a168:	2000      	movs	r0, #0
 801a16a:	f7e6 f865 	bl	8000238 <__aeabi_dsub>
 801a16e:	ec41 0b10 	vmov	d0, r0, r1
 801a172:	b003      	add	sp, #12
 801a174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a178:	4b22      	ldr	r3, [pc, #136]	@ (801a204 <__kernel_cos+0x184>)
 801a17a:	4921      	ldr	r1, [pc, #132]	@ (801a200 <__kernel_cos+0x180>)
 801a17c:	4598      	cmp	r8, r3
 801a17e:	bf8c      	ite	hi
 801a180:	4d21      	ldrhi	r5, [pc, #132]	@ (801a208 <__kernel_cos+0x188>)
 801a182:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801a186:	2400      	movs	r4, #0
 801a188:	4622      	mov	r2, r4
 801a18a:	462b      	mov	r3, r5
 801a18c:	2000      	movs	r0, #0
 801a18e:	f7e6 f853 	bl	8000238 <__aeabi_dsub>
 801a192:	4622      	mov	r2, r4
 801a194:	4680      	mov	r8, r0
 801a196:	4689      	mov	r9, r1
 801a198:	462b      	mov	r3, r5
 801a19a:	4650      	mov	r0, sl
 801a19c:	4659      	mov	r1, fp
 801a19e:	f7e6 f84b 	bl	8000238 <__aeabi_dsub>
 801a1a2:	4632      	mov	r2, r6
 801a1a4:	463b      	mov	r3, r7
 801a1a6:	f7e6 f847 	bl	8000238 <__aeabi_dsub>
 801a1aa:	4602      	mov	r2, r0
 801a1ac:	460b      	mov	r3, r1
 801a1ae:	4640      	mov	r0, r8
 801a1b0:	4649      	mov	r1, r9
 801a1b2:	e7da      	b.n	801a16a <__kernel_cos+0xea>
 801a1b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 801a1f0 <__kernel_cos+0x170>
 801a1b8:	e7db      	b.n	801a172 <__kernel_cos+0xf2>
 801a1ba:	bf00      	nop
 801a1bc:	f3af 8000 	nop.w
 801a1c0:	be8838d4 	.word	0xbe8838d4
 801a1c4:	bda8fae9 	.word	0xbda8fae9
 801a1c8:	bdb4b1c4 	.word	0xbdb4b1c4
 801a1cc:	3e21ee9e 	.word	0x3e21ee9e
 801a1d0:	809c52ad 	.word	0x809c52ad
 801a1d4:	3e927e4f 	.word	0x3e927e4f
 801a1d8:	19cb1590 	.word	0x19cb1590
 801a1dc:	3efa01a0 	.word	0x3efa01a0
 801a1e0:	16c15177 	.word	0x16c15177
 801a1e4:	3f56c16c 	.word	0x3f56c16c
 801a1e8:	5555554c 	.word	0x5555554c
 801a1ec:	3fa55555 	.word	0x3fa55555
 801a1f0:	00000000 	.word	0x00000000
 801a1f4:	3ff00000 	.word	0x3ff00000
 801a1f8:	3fe00000 	.word	0x3fe00000
 801a1fc:	3fd33332 	.word	0x3fd33332
 801a200:	3ff00000 	.word	0x3ff00000
 801a204:	3fe90000 	.word	0x3fe90000
 801a208:	3fd20000 	.word	0x3fd20000
 801a20c:	00000000 	.word	0x00000000

0801a210 <__kernel_sin>:
 801a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a214:	ec55 4b10 	vmov	r4, r5, d0
 801a218:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801a21c:	b085      	sub	sp, #20
 801a21e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801a222:	ed8d 1b02 	vstr	d1, [sp, #8]
 801a226:	4680      	mov	r8, r0
 801a228:	d205      	bcs.n	801a236 <__kernel_sin+0x26>
 801a22a:	4620      	mov	r0, r4
 801a22c:	4629      	mov	r1, r5
 801a22e:	f7e6 fc6b 	bl	8000b08 <__aeabi_d2iz>
 801a232:	2800      	cmp	r0, #0
 801a234:	d052      	beq.n	801a2dc <__kernel_sin+0xcc>
 801a236:	4622      	mov	r2, r4
 801a238:	462b      	mov	r3, r5
 801a23a:	4620      	mov	r0, r4
 801a23c:	4629      	mov	r1, r5
 801a23e:	f7e6 f9b3 	bl	80005a8 <__aeabi_dmul>
 801a242:	4682      	mov	sl, r0
 801a244:	468b      	mov	fp, r1
 801a246:	4602      	mov	r2, r0
 801a248:	460b      	mov	r3, r1
 801a24a:	4620      	mov	r0, r4
 801a24c:	4629      	mov	r1, r5
 801a24e:	f7e6 f9ab 	bl	80005a8 <__aeabi_dmul>
 801a252:	a342      	add	r3, pc, #264	@ (adr r3, 801a35c <__kernel_sin+0x14c>)
 801a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a258:	e9cd 0100 	strd	r0, r1, [sp]
 801a25c:	4650      	mov	r0, sl
 801a25e:	4659      	mov	r1, fp
 801a260:	f7e6 f9a2 	bl	80005a8 <__aeabi_dmul>
 801a264:	a33f      	add	r3, pc, #252	@ (adr r3, 801a364 <__kernel_sin+0x154>)
 801a266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a26a:	f7e5 ffe5 	bl	8000238 <__aeabi_dsub>
 801a26e:	4652      	mov	r2, sl
 801a270:	465b      	mov	r3, fp
 801a272:	f7e6 f999 	bl	80005a8 <__aeabi_dmul>
 801a276:	a33d      	add	r3, pc, #244	@ (adr r3, 801a36c <__kernel_sin+0x15c>)
 801a278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a27c:	f7e5 ffde 	bl	800023c <__adddf3>
 801a280:	4652      	mov	r2, sl
 801a282:	465b      	mov	r3, fp
 801a284:	f7e6 f990 	bl	80005a8 <__aeabi_dmul>
 801a288:	a33a      	add	r3, pc, #232	@ (adr r3, 801a374 <__kernel_sin+0x164>)
 801a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a28e:	f7e5 ffd3 	bl	8000238 <__aeabi_dsub>
 801a292:	4652      	mov	r2, sl
 801a294:	465b      	mov	r3, fp
 801a296:	f7e6 f987 	bl	80005a8 <__aeabi_dmul>
 801a29a:	a338      	add	r3, pc, #224	@ (adr r3, 801a37c <__kernel_sin+0x16c>)
 801a29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2a0:	f7e5 ffcc 	bl	800023c <__adddf3>
 801a2a4:	4606      	mov	r6, r0
 801a2a6:	460f      	mov	r7, r1
 801a2a8:	f1b8 0f00 	cmp.w	r8, #0
 801a2ac:	d11b      	bne.n	801a2e6 <__kernel_sin+0xd6>
 801a2ae:	4602      	mov	r2, r0
 801a2b0:	460b      	mov	r3, r1
 801a2b2:	4650      	mov	r0, sl
 801a2b4:	4659      	mov	r1, fp
 801a2b6:	f7e6 f977 	bl	80005a8 <__aeabi_dmul>
 801a2ba:	a325      	add	r3, pc, #148	@ (adr r3, 801a350 <__kernel_sin+0x140>)
 801a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a2c0:	f7e5 ffba 	bl	8000238 <__aeabi_dsub>
 801a2c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a2c8:	f7e6 f96e 	bl	80005a8 <__aeabi_dmul>
 801a2cc:	4602      	mov	r2, r0
 801a2ce:	460b      	mov	r3, r1
 801a2d0:	4620      	mov	r0, r4
 801a2d2:	4629      	mov	r1, r5
 801a2d4:	f7e5 ffb2 	bl	800023c <__adddf3>
 801a2d8:	4604      	mov	r4, r0
 801a2da:	460d      	mov	r5, r1
 801a2dc:	ec45 4b10 	vmov	d0, r4, r5
 801a2e0:	b005      	add	sp, #20
 801a2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a2ea:	4b1b      	ldr	r3, [pc, #108]	@ (801a358 <__kernel_sin+0x148>)
 801a2ec:	2200      	movs	r2, #0
 801a2ee:	f7e6 f95b 	bl	80005a8 <__aeabi_dmul>
 801a2f2:	4632      	mov	r2, r6
 801a2f4:	4680      	mov	r8, r0
 801a2f6:	4689      	mov	r9, r1
 801a2f8:	463b      	mov	r3, r7
 801a2fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a2fe:	f7e6 f953 	bl	80005a8 <__aeabi_dmul>
 801a302:	4602      	mov	r2, r0
 801a304:	460b      	mov	r3, r1
 801a306:	4640      	mov	r0, r8
 801a308:	4649      	mov	r1, r9
 801a30a:	f7e5 ff95 	bl	8000238 <__aeabi_dsub>
 801a30e:	4652      	mov	r2, sl
 801a310:	465b      	mov	r3, fp
 801a312:	f7e6 f949 	bl	80005a8 <__aeabi_dmul>
 801a316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801a31a:	f7e5 ff8d 	bl	8000238 <__aeabi_dsub>
 801a31e:	a30c      	add	r3, pc, #48	@ (adr r3, 801a350 <__kernel_sin+0x140>)
 801a320:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a324:	4606      	mov	r6, r0
 801a326:	460f      	mov	r7, r1
 801a328:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a32c:	f7e6 f93c 	bl	80005a8 <__aeabi_dmul>
 801a330:	4602      	mov	r2, r0
 801a332:	460b      	mov	r3, r1
 801a334:	4630      	mov	r0, r6
 801a336:	4639      	mov	r1, r7
 801a338:	f7e5 ff80 	bl	800023c <__adddf3>
 801a33c:	4602      	mov	r2, r0
 801a33e:	460b      	mov	r3, r1
 801a340:	4620      	mov	r0, r4
 801a342:	4629      	mov	r1, r5
 801a344:	f7e5 ff78 	bl	8000238 <__aeabi_dsub>
 801a348:	e7c6      	b.n	801a2d8 <__kernel_sin+0xc8>
 801a34a:	bf00      	nop
 801a34c:	f3af 8000 	nop.w
 801a350:	55555549 	.word	0x55555549
 801a354:	3fc55555 	.word	0x3fc55555
 801a358:	3fe00000 	.word	0x3fe00000
 801a35c:	5acfd57c 	.word	0x5acfd57c
 801a360:	3de5d93a 	.word	0x3de5d93a
 801a364:	8a2b9ceb 	.word	0x8a2b9ceb
 801a368:	3e5ae5e6 	.word	0x3e5ae5e6
 801a36c:	57b1fe7d 	.word	0x57b1fe7d
 801a370:	3ec71de3 	.word	0x3ec71de3
 801a374:	19c161d5 	.word	0x19c161d5
 801a378:	3f2a01a0 	.word	0x3f2a01a0
 801a37c:	1110f8a6 	.word	0x1110f8a6
 801a380:	3f811111 	.word	0x3f811111
 801a384:	00000000 	.word	0x00000000

0801a388 <__ieee754_log>:
 801a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a38c:	ec51 0b10 	vmov	r0, r1, d0
 801a390:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 801a394:	b087      	sub	sp, #28
 801a396:	460d      	mov	r5, r1
 801a398:	da26      	bge.n	801a3e8 <__ieee754_log+0x60>
 801a39a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a39e:	4303      	orrs	r3, r0
 801a3a0:	4602      	mov	r2, r0
 801a3a2:	d10a      	bne.n	801a3ba <__ieee754_log+0x32>
 801a3a4:	49ce      	ldr	r1, [pc, #824]	@ (801a6e0 <__ieee754_log+0x358>)
 801a3a6:	2200      	movs	r2, #0
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	2000      	movs	r0, #0
 801a3ac:	f7e6 fa26 	bl	80007fc <__aeabi_ddiv>
 801a3b0:	ec41 0b10 	vmov	d0, r0, r1
 801a3b4:	b007      	add	sp, #28
 801a3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3ba:	2900      	cmp	r1, #0
 801a3bc:	da05      	bge.n	801a3ca <__ieee754_log+0x42>
 801a3be:	460b      	mov	r3, r1
 801a3c0:	f7e5 ff3a 	bl	8000238 <__aeabi_dsub>
 801a3c4:	2200      	movs	r2, #0
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	e7f0      	b.n	801a3ac <__ieee754_log+0x24>
 801a3ca:	4bc6      	ldr	r3, [pc, #792]	@ (801a6e4 <__ieee754_log+0x35c>)
 801a3cc:	2200      	movs	r2, #0
 801a3ce:	f7e6 f8eb 	bl	80005a8 <__aeabi_dmul>
 801a3d2:	f06f 0335 	mvn.w	r3, #53	@ 0x35
 801a3d6:	460d      	mov	r5, r1
 801a3d8:	4ac3      	ldr	r2, [pc, #780]	@ (801a6e8 <__ieee754_log+0x360>)
 801a3da:	4295      	cmp	r5, r2
 801a3dc:	dd06      	ble.n	801a3ec <__ieee754_log+0x64>
 801a3de:	4602      	mov	r2, r0
 801a3e0:	460b      	mov	r3, r1
 801a3e2:	f7e5 ff2b 	bl	800023c <__adddf3>
 801a3e6:	e7e3      	b.n	801a3b0 <__ieee754_log+0x28>
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	e7f5      	b.n	801a3d8 <__ieee754_log+0x50>
 801a3ec:	152c      	asrs	r4, r5, #20
 801a3ee:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 801a3f2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801a3f6:	441c      	add	r4, r3
 801a3f8:	f505 2315 	add.w	r3, r5, #610304	@ 0x95000
 801a3fc:	f603 7364 	addw	r3, r3, #3940	@ 0xf64
 801a400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801a404:	f083 527f 	eor.w	r2, r3, #1069547520	@ 0x3fc00000
 801a408:	f482 1240 	eor.w	r2, r2, #3145728	@ 0x300000
 801a40c:	ea42 0105 	orr.w	r1, r2, r5
 801a410:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801a414:	2200      	movs	r2, #0
 801a416:	4bb5      	ldr	r3, [pc, #724]	@ (801a6ec <__ieee754_log+0x364>)
 801a418:	f7e5 ff0e 	bl	8000238 <__aeabi_dsub>
 801a41c:	1cab      	adds	r3, r5, #2
 801a41e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a422:	2b02      	cmp	r3, #2
 801a424:	4682      	mov	sl, r0
 801a426:	468b      	mov	fp, r1
 801a428:	f04f 0200 	mov.w	r2, #0
 801a42c:	dc53      	bgt.n	801a4d6 <__ieee754_log+0x14e>
 801a42e:	2300      	movs	r3, #0
 801a430:	f7e6 fb22 	bl	8000a78 <__aeabi_dcmpeq>
 801a434:	b1d0      	cbz	r0, 801a46c <__ieee754_log+0xe4>
 801a436:	2c00      	cmp	r4, #0
 801a438:	f000 8120 	beq.w	801a67c <__ieee754_log+0x2f4>
 801a43c:	4620      	mov	r0, r4
 801a43e:	f7e6 f849 	bl	80004d4 <__aeabi_i2d>
 801a442:	a391      	add	r3, pc, #580	@ (adr r3, 801a688 <__ieee754_log+0x300>)
 801a444:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a448:	4606      	mov	r6, r0
 801a44a:	460f      	mov	r7, r1
 801a44c:	f7e6 f8ac 	bl	80005a8 <__aeabi_dmul>
 801a450:	a38f      	add	r3, pc, #572	@ (adr r3, 801a690 <__ieee754_log+0x308>)
 801a452:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a456:	4604      	mov	r4, r0
 801a458:	460d      	mov	r5, r1
 801a45a:	4630      	mov	r0, r6
 801a45c:	4639      	mov	r1, r7
 801a45e:	f7e6 f8a3 	bl	80005a8 <__aeabi_dmul>
 801a462:	4602      	mov	r2, r0
 801a464:	460b      	mov	r3, r1
 801a466:	4620      	mov	r0, r4
 801a468:	4629      	mov	r1, r5
 801a46a:	e7ba      	b.n	801a3e2 <__ieee754_log+0x5a>
 801a46c:	a38a      	add	r3, pc, #552	@ (adr r3, 801a698 <__ieee754_log+0x310>)
 801a46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a472:	4650      	mov	r0, sl
 801a474:	4659      	mov	r1, fp
 801a476:	f7e6 f897 	bl	80005a8 <__aeabi_dmul>
 801a47a:	4602      	mov	r2, r0
 801a47c:	460b      	mov	r3, r1
 801a47e:	2000      	movs	r0, #0
 801a480:	499b      	ldr	r1, [pc, #620]	@ (801a6f0 <__ieee754_log+0x368>)
 801a482:	f7e5 fed9 	bl	8000238 <__aeabi_dsub>
 801a486:	4652      	mov	r2, sl
 801a488:	4606      	mov	r6, r0
 801a48a:	460f      	mov	r7, r1
 801a48c:	465b      	mov	r3, fp
 801a48e:	4650      	mov	r0, sl
 801a490:	4659      	mov	r1, fp
 801a492:	f7e6 f889 	bl	80005a8 <__aeabi_dmul>
 801a496:	4602      	mov	r2, r0
 801a498:	460b      	mov	r3, r1
 801a49a:	4630      	mov	r0, r6
 801a49c:	4639      	mov	r1, r7
 801a49e:	f7e6 f883 	bl	80005a8 <__aeabi_dmul>
 801a4a2:	4606      	mov	r6, r0
 801a4a4:	460f      	mov	r7, r1
 801a4a6:	b914      	cbnz	r4, 801a4ae <__ieee754_log+0x126>
 801a4a8:	4632      	mov	r2, r6
 801a4aa:	463b      	mov	r3, r7
 801a4ac:	e0a0      	b.n	801a5f0 <__ieee754_log+0x268>
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	f7e6 f810 	bl	80004d4 <__aeabi_i2d>
 801a4b4:	a374      	add	r3, pc, #464	@ (adr r3, 801a688 <__ieee754_log+0x300>)
 801a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ba:	4680      	mov	r8, r0
 801a4bc:	4689      	mov	r9, r1
 801a4be:	f7e6 f873 	bl	80005a8 <__aeabi_dmul>
 801a4c2:	a373      	add	r3, pc, #460	@ (adr r3, 801a690 <__ieee754_log+0x308>)
 801a4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4c8:	4604      	mov	r4, r0
 801a4ca:	460d      	mov	r5, r1
 801a4cc:	4640      	mov	r0, r8
 801a4ce:	4649      	mov	r1, r9
 801a4d0:	f7e6 f86a 	bl	80005a8 <__aeabi_dmul>
 801a4d4:	e0a5      	b.n	801a622 <__ieee754_log+0x29a>
 801a4d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801a4da:	f7e5 feaf 	bl	800023c <__adddf3>
 801a4de:	4602      	mov	r2, r0
 801a4e0:	460b      	mov	r3, r1
 801a4e2:	4650      	mov	r0, sl
 801a4e4:	4659      	mov	r1, fp
 801a4e6:	f7e6 f989 	bl	80007fc <__aeabi_ddiv>
 801a4ea:	e9cd 0100 	strd	r0, r1, [sp]
 801a4ee:	4620      	mov	r0, r4
 801a4f0:	f7e5 fff0 	bl	80004d4 <__aeabi_i2d>
 801a4f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a4f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a4fc:	4610      	mov	r0, r2
 801a4fe:	4619      	mov	r1, r3
 801a500:	f7e6 f852 	bl	80005a8 <__aeabi_dmul>
 801a504:	4602      	mov	r2, r0
 801a506:	460b      	mov	r3, r1
 801a508:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801a50c:	f7e6 f84c 	bl	80005a8 <__aeabi_dmul>
 801a510:	a363      	add	r3, pc, #396	@ (adr r3, 801a6a0 <__ieee754_log+0x318>)
 801a512:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a516:	4680      	mov	r8, r0
 801a518:	4689      	mov	r9, r1
 801a51a:	f7e6 f845 	bl	80005a8 <__aeabi_dmul>
 801a51e:	a362      	add	r3, pc, #392	@ (adr r3, 801a6a8 <__ieee754_log+0x320>)
 801a520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a524:	f7e5 fe8a 	bl	800023c <__adddf3>
 801a528:	4642      	mov	r2, r8
 801a52a:	464b      	mov	r3, r9
 801a52c:	f7e6 f83c 	bl	80005a8 <__aeabi_dmul>
 801a530:	a35f      	add	r3, pc, #380	@ (adr r3, 801a6b0 <__ieee754_log+0x328>)
 801a532:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a536:	f7e5 fe81 	bl	800023c <__adddf3>
 801a53a:	4642      	mov	r2, r8
 801a53c:	464b      	mov	r3, r9
 801a53e:	f7e6 f833 	bl	80005a8 <__aeabi_dmul>
 801a542:	a35d      	add	r3, pc, #372	@ (adr r3, 801a6b8 <__ieee754_log+0x330>)
 801a544:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a548:	f7e5 fe78 	bl	800023c <__adddf3>
 801a54c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a550:	f7e6 f82a 	bl	80005a8 <__aeabi_dmul>
 801a554:	a35a      	add	r3, pc, #360	@ (adr r3, 801a6c0 <__ieee754_log+0x338>)
 801a556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a55a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a55e:	4640      	mov	r0, r8
 801a560:	4649      	mov	r1, r9
 801a562:	f7e6 f821 	bl	80005a8 <__aeabi_dmul>
 801a566:	a358      	add	r3, pc, #352	@ (adr r3, 801a6c8 <__ieee754_log+0x340>)
 801a568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a56c:	f7e5 fe66 	bl	800023c <__adddf3>
 801a570:	4642      	mov	r2, r8
 801a572:	464b      	mov	r3, r9
 801a574:	f7e6 f818 	bl	80005a8 <__aeabi_dmul>
 801a578:	a355      	add	r3, pc, #340	@ (adr r3, 801a6d0 <__ieee754_log+0x348>)
 801a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a57e:	f7e5 fe5d 	bl	800023c <__adddf3>
 801a582:	4642      	mov	r2, r8
 801a584:	464b      	mov	r3, r9
 801a586:	f7e6 f80f 	bl	80005a8 <__aeabi_dmul>
 801a58a:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 801a58e:	4602      	mov	r2, r0
 801a590:	460b      	mov	r3, r1
 801a592:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 801a596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801a59a:	f7e5 fe4f 	bl	800023c <__adddf3>
 801a59e:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 801a5a2:	3551      	adds	r5, #81	@ 0x51
 801a5a4:	4335      	orrs	r5, r6
 801a5a6:	2d00      	cmp	r5, #0
 801a5a8:	4680      	mov	r8, r0
 801a5aa:	4689      	mov	r9, r1
 801a5ac:	dd48      	ble.n	801a640 <__ieee754_log+0x2b8>
 801a5ae:	4b50      	ldr	r3, [pc, #320]	@ (801a6f0 <__ieee754_log+0x368>)
 801a5b0:	2200      	movs	r2, #0
 801a5b2:	4650      	mov	r0, sl
 801a5b4:	4659      	mov	r1, fp
 801a5b6:	f7e5 fff7 	bl	80005a8 <__aeabi_dmul>
 801a5ba:	4652      	mov	r2, sl
 801a5bc:	465b      	mov	r3, fp
 801a5be:	f7e5 fff3 	bl	80005a8 <__aeabi_dmul>
 801a5c2:	4602      	mov	r2, r0
 801a5c4:	460b      	mov	r3, r1
 801a5c6:	4606      	mov	r6, r0
 801a5c8:	460f      	mov	r7, r1
 801a5ca:	4640      	mov	r0, r8
 801a5cc:	4649      	mov	r1, r9
 801a5ce:	f7e5 fe35 	bl	800023c <__adddf3>
 801a5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a5d6:	f7e5 ffe7 	bl	80005a8 <__aeabi_dmul>
 801a5da:	4680      	mov	r8, r0
 801a5dc:	4689      	mov	r9, r1
 801a5de:	b964      	cbnz	r4, 801a5fa <__ieee754_log+0x272>
 801a5e0:	4602      	mov	r2, r0
 801a5e2:	460b      	mov	r3, r1
 801a5e4:	4630      	mov	r0, r6
 801a5e6:	4639      	mov	r1, r7
 801a5e8:	f7e5 fe26 	bl	8000238 <__aeabi_dsub>
 801a5ec:	4602      	mov	r2, r0
 801a5ee:	460b      	mov	r3, r1
 801a5f0:	4650      	mov	r0, sl
 801a5f2:	4659      	mov	r1, fp
 801a5f4:	f7e5 fe20 	bl	8000238 <__aeabi_dsub>
 801a5f8:	e6da      	b.n	801a3b0 <__ieee754_log+0x28>
 801a5fa:	a323      	add	r3, pc, #140	@ (adr r3, 801a688 <__ieee754_log+0x300>)
 801a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a604:	f7e5 ffd0 	bl	80005a8 <__aeabi_dmul>
 801a608:	a321      	add	r3, pc, #132	@ (adr r3, 801a690 <__ieee754_log+0x308>)
 801a60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a60e:	4604      	mov	r4, r0
 801a610:	460d      	mov	r5, r1
 801a612:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a616:	f7e5 ffc7 	bl	80005a8 <__aeabi_dmul>
 801a61a:	4642      	mov	r2, r8
 801a61c:	464b      	mov	r3, r9
 801a61e:	f7e5 fe0d 	bl	800023c <__adddf3>
 801a622:	4602      	mov	r2, r0
 801a624:	460b      	mov	r3, r1
 801a626:	4630      	mov	r0, r6
 801a628:	4639      	mov	r1, r7
 801a62a:	f7e5 fe05 	bl	8000238 <__aeabi_dsub>
 801a62e:	4652      	mov	r2, sl
 801a630:	465b      	mov	r3, fp
 801a632:	f7e5 fe01 	bl	8000238 <__aeabi_dsub>
 801a636:	4602      	mov	r2, r0
 801a638:	460b      	mov	r3, r1
 801a63a:	4620      	mov	r0, r4
 801a63c:	4629      	mov	r1, r5
 801a63e:	e7d9      	b.n	801a5f4 <__ieee754_log+0x26c>
 801a640:	4602      	mov	r2, r0
 801a642:	460b      	mov	r3, r1
 801a644:	4650      	mov	r0, sl
 801a646:	4659      	mov	r1, fp
 801a648:	f7e5 fdf6 	bl	8000238 <__aeabi_dsub>
 801a64c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a650:	f7e5 ffaa 	bl	80005a8 <__aeabi_dmul>
 801a654:	4606      	mov	r6, r0
 801a656:	460f      	mov	r7, r1
 801a658:	2c00      	cmp	r4, #0
 801a65a:	f43f af25 	beq.w	801a4a8 <__ieee754_log+0x120>
 801a65e:	a30a      	add	r3, pc, #40	@ (adr r3, 801a688 <__ieee754_log+0x300>)
 801a660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a668:	f7e5 ff9e 	bl	80005a8 <__aeabi_dmul>
 801a66c:	a308      	add	r3, pc, #32	@ (adr r3, 801a690 <__ieee754_log+0x308>)
 801a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a672:	4604      	mov	r4, r0
 801a674:	460d      	mov	r5, r1
 801a676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a67a:	e729      	b.n	801a4d0 <__ieee754_log+0x148>
 801a67c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801a6d8 <__ieee754_log+0x350>
 801a680:	e698      	b.n	801a3b4 <__ieee754_log+0x2c>
 801a682:	bf00      	nop
 801a684:	f3af 8000 	nop.w
 801a688:	fee00000 	.word	0xfee00000
 801a68c:	3fe62e42 	.word	0x3fe62e42
 801a690:	35793c76 	.word	0x35793c76
 801a694:	3dea39ef 	.word	0x3dea39ef
 801a698:	55555555 	.word	0x55555555
 801a69c:	3fd55555 	.word	0x3fd55555
 801a6a0:	df3e5244 	.word	0xdf3e5244
 801a6a4:	3fc2f112 	.word	0x3fc2f112
 801a6a8:	96cb03de 	.word	0x96cb03de
 801a6ac:	3fc74664 	.word	0x3fc74664
 801a6b0:	94229359 	.word	0x94229359
 801a6b4:	3fd24924 	.word	0x3fd24924
 801a6b8:	55555593 	.word	0x55555593
 801a6bc:	3fe55555 	.word	0x3fe55555
 801a6c0:	d078c69f 	.word	0xd078c69f
 801a6c4:	3fc39a09 	.word	0x3fc39a09
 801a6c8:	1d8e78af 	.word	0x1d8e78af
 801a6cc:	3fcc71c5 	.word	0x3fcc71c5
 801a6d0:	9997fa04 	.word	0x9997fa04
 801a6d4:	3fd99999 	.word	0x3fd99999
	...
 801a6e0:	c3500000 	.word	0xc3500000
 801a6e4:	43500000 	.word	0x43500000
 801a6e8:	7fefffff 	.word	0x7fefffff
 801a6ec:	3ff00000 	.word	0x3ff00000
 801a6f0:	3fe00000 	.word	0x3fe00000
 801a6f4:	00000000 	.word	0x00000000

0801a6f8 <__ieee754_rem_pio2>:
 801a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6fc:	ec57 6b10 	vmov	r6, r7, d0
 801a700:	4bc5      	ldr	r3, [pc, #788]	@ (801aa18 <__ieee754_rem_pio2+0x320>)
 801a702:	b08d      	sub	sp, #52	@ 0x34
 801a704:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801a708:	4598      	cmp	r8, r3
 801a70a:	4604      	mov	r4, r0
 801a70c:	9704      	str	r7, [sp, #16]
 801a70e:	d807      	bhi.n	801a720 <__ieee754_rem_pio2+0x28>
 801a710:	2200      	movs	r2, #0
 801a712:	2300      	movs	r3, #0
 801a714:	ed80 0b00 	vstr	d0, [r0]
 801a718:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801a71c:	2500      	movs	r5, #0
 801a71e:	e028      	b.n	801a772 <__ieee754_rem_pio2+0x7a>
 801a720:	4bbe      	ldr	r3, [pc, #760]	@ (801aa1c <__ieee754_rem_pio2+0x324>)
 801a722:	4598      	cmp	r8, r3
 801a724:	d878      	bhi.n	801a818 <__ieee754_rem_pio2+0x120>
 801a726:	9b04      	ldr	r3, [sp, #16]
 801a728:	4dbd      	ldr	r5, [pc, #756]	@ (801aa20 <__ieee754_rem_pio2+0x328>)
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	4630      	mov	r0, r6
 801a72e:	a3ac      	add	r3, pc, #688	@ (adr r3, 801a9e0 <__ieee754_rem_pio2+0x2e8>)
 801a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a734:	4639      	mov	r1, r7
 801a736:	dd38      	ble.n	801a7aa <__ieee754_rem_pio2+0xb2>
 801a738:	f7e5 fd7e 	bl	8000238 <__aeabi_dsub>
 801a73c:	45a8      	cmp	r8, r5
 801a73e:	4606      	mov	r6, r0
 801a740:	460f      	mov	r7, r1
 801a742:	d01a      	beq.n	801a77a <__ieee754_rem_pio2+0x82>
 801a744:	a3a8      	add	r3, pc, #672	@ (adr r3, 801a9e8 <__ieee754_rem_pio2+0x2f0>)
 801a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a74a:	f7e5 fd75 	bl	8000238 <__aeabi_dsub>
 801a74e:	4602      	mov	r2, r0
 801a750:	460b      	mov	r3, r1
 801a752:	4680      	mov	r8, r0
 801a754:	4689      	mov	r9, r1
 801a756:	4630      	mov	r0, r6
 801a758:	4639      	mov	r1, r7
 801a75a:	f7e5 fd6d 	bl	8000238 <__aeabi_dsub>
 801a75e:	a3a2      	add	r3, pc, #648	@ (adr r3, 801a9e8 <__ieee754_rem_pio2+0x2f0>)
 801a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a764:	f7e5 fd68 	bl	8000238 <__aeabi_dsub>
 801a768:	e9c4 8900 	strd	r8, r9, [r4]
 801a76c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a770:	2501      	movs	r5, #1
 801a772:	4628      	mov	r0, r5
 801a774:	b00d      	add	sp, #52	@ 0x34
 801a776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a77a:	a39d      	add	r3, pc, #628	@ (adr r3, 801a9f0 <__ieee754_rem_pio2+0x2f8>)
 801a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a780:	f7e5 fd5a 	bl	8000238 <__aeabi_dsub>
 801a784:	a39c      	add	r3, pc, #624	@ (adr r3, 801a9f8 <__ieee754_rem_pio2+0x300>)
 801a786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a78a:	4606      	mov	r6, r0
 801a78c:	460f      	mov	r7, r1
 801a78e:	f7e5 fd53 	bl	8000238 <__aeabi_dsub>
 801a792:	4602      	mov	r2, r0
 801a794:	460b      	mov	r3, r1
 801a796:	4680      	mov	r8, r0
 801a798:	4689      	mov	r9, r1
 801a79a:	4630      	mov	r0, r6
 801a79c:	4639      	mov	r1, r7
 801a79e:	f7e5 fd4b 	bl	8000238 <__aeabi_dsub>
 801a7a2:	a395      	add	r3, pc, #596	@ (adr r3, 801a9f8 <__ieee754_rem_pio2+0x300>)
 801a7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7a8:	e7dc      	b.n	801a764 <__ieee754_rem_pio2+0x6c>
 801a7aa:	f7e5 fd47 	bl	800023c <__adddf3>
 801a7ae:	45a8      	cmp	r8, r5
 801a7b0:	4606      	mov	r6, r0
 801a7b2:	460f      	mov	r7, r1
 801a7b4:	d018      	beq.n	801a7e8 <__ieee754_rem_pio2+0xf0>
 801a7b6:	a38c      	add	r3, pc, #560	@ (adr r3, 801a9e8 <__ieee754_rem_pio2+0x2f0>)
 801a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7bc:	f7e5 fd3e 	bl	800023c <__adddf3>
 801a7c0:	4602      	mov	r2, r0
 801a7c2:	460b      	mov	r3, r1
 801a7c4:	4680      	mov	r8, r0
 801a7c6:	4689      	mov	r9, r1
 801a7c8:	4630      	mov	r0, r6
 801a7ca:	4639      	mov	r1, r7
 801a7cc:	f7e5 fd34 	bl	8000238 <__aeabi_dsub>
 801a7d0:	a385      	add	r3, pc, #532	@ (adr r3, 801a9e8 <__ieee754_rem_pio2+0x2f0>)
 801a7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7d6:	f7e5 fd31 	bl	800023c <__adddf3>
 801a7da:	f04f 35ff 	mov.w	r5, #4294967295
 801a7de:	e9c4 8900 	strd	r8, r9, [r4]
 801a7e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a7e6:	e7c4      	b.n	801a772 <__ieee754_rem_pio2+0x7a>
 801a7e8:	a381      	add	r3, pc, #516	@ (adr r3, 801a9f0 <__ieee754_rem_pio2+0x2f8>)
 801a7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ee:	f7e5 fd25 	bl	800023c <__adddf3>
 801a7f2:	a381      	add	r3, pc, #516	@ (adr r3, 801a9f8 <__ieee754_rem_pio2+0x300>)
 801a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7f8:	4606      	mov	r6, r0
 801a7fa:	460f      	mov	r7, r1
 801a7fc:	f7e5 fd1e 	bl	800023c <__adddf3>
 801a800:	4602      	mov	r2, r0
 801a802:	460b      	mov	r3, r1
 801a804:	4680      	mov	r8, r0
 801a806:	4689      	mov	r9, r1
 801a808:	4630      	mov	r0, r6
 801a80a:	4639      	mov	r1, r7
 801a80c:	f7e5 fd14 	bl	8000238 <__aeabi_dsub>
 801a810:	a379      	add	r3, pc, #484	@ (adr r3, 801a9f8 <__ieee754_rem_pio2+0x300>)
 801a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a816:	e7de      	b.n	801a7d6 <__ieee754_rem_pio2+0xde>
 801a818:	4b82      	ldr	r3, [pc, #520]	@ (801aa24 <__ieee754_rem_pio2+0x32c>)
 801a81a:	4598      	cmp	r8, r3
 801a81c:	f200 80d1 	bhi.w	801a9c2 <__ieee754_rem_pio2+0x2ca>
 801a820:	f000 f99a 	bl	801ab58 <fabs>
 801a824:	ec57 6b10 	vmov	r6, r7, d0
 801a828:	a375      	add	r3, pc, #468	@ (adr r3, 801aa00 <__ieee754_rem_pio2+0x308>)
 801a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a82e:	4630      	mov	r0, r6
 801a830:	4639      	mov	r1, r7
 801a832:	f7e5 feb9 	bl	80005a8 <__aeabi_dmul>
 801a836:	4b7c      	ldr	r3, [pc, #496]	@ (801aa28 <__ieee754_rem_pio2+0x330>)
 801a838:	2200      	movs	r2, #0
 801a83a:	f7e5 fcff 	bl	800023c <__adddf3>
 801a83e:	f7e6 f963 	bl	8000b08 <__aeabi_d2iz>
 801a842:	4605      	mov	r5, r0
 801a844:	f7e5 fe46 	bl	80004d4 <__aeabi_i2d>
 801a848:	4602      	mov	r2, r0
 801a84a:	460b      	mov	r3, r1
 801a84c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801a850:	a363      	add	r3, pc, #396	@ (adr r3, 801a9e0 <__ieee754_rem_pio2+0x2e8>)
 801a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a856:	f7e5 fea7 	bl	80005a8 <__aeabi_dmul>
 801a85a:	4602      	mov	r2, r0
 801a85c:	460b      	mov	r3, r1
 801a85e:	4630      	mov	r0, r6
 801a860:	4639      	mov	r1, r7
 801a862:	f7e5 fce9 	bl	8000238 <__aeabi_dsub>
 801a866:	a360      	add	r3, pc, #384	@ (adr r3, 801a9e8 <__ieee754_rem_pio2+0x2f0>)
 801a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a86c:	4682      	mov	sl, r0
 801a86e:	468b      	mov	fp, r1
 801a870:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a874:	f7e5 fe98 	bl	80005a8 <__aeabi_dmul>
 801a878:	2d1f      	cmp	r5, #31
 801a87a:	4606      	mov	r6, r0
 801a87c:	460f      	mov	r7, r1
 801a87e:	dc0c      	bgt.n	801a89a <__ieee754_rem_pio2+0x1a2>
 801a880:	4b6a      	ldr	r3, [pc, #424]	@ (801aa2c <__ieee754_rem_pio2+0x334>)
 801a882:	1e6a      	subs	r2, r5, #1
 801a884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a888:	4543      	cmp	r3, r8
 801a88a:	d006      	beq.n	801a89a <__ieee754_rem_pio2+0x1a2>
 801a88c:	4632      	mov	r2, r6
 801a88e:	463b      	mov	r3, r7
 801a890:	4650      	mov	r0, sl
 801a892:	4659      	mov	r1, fp
 801a894:	f7e5 fcd0 	bl	8000238 <__aeabi_dsub>
 801a898:	e00e      	b.n	801a8b8 <__ieee754_rem_pio2+0x1c0>
 801a89a:	463b      	mov	r3, r7
 801a89c:	4632      	mov	r2, r6
 801a89e:	4650      	mov	r0, sl
 801a8a0:	4659      	mov	r1, fp
 801a8a2:	f7e5 fcc9 	bl	8000238 <__aeabi_dsub>
 801a8a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a8aa:	9305      	str	r3, [sp, #20]
 801a8ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a8b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801a8b4:	2b10      	cmp	r3, #16
 801a8b6:	dc02      	bgt.n	801a8be <__ieee754_rem_pio2+0x1c6>
 801a8b8:	e9c4 0100 	strd	r0, r1, [r4]
 801a8bc:	e039      	b.n	801a932 <__ieee754_rem_pio2+0x23a>
 801a8be:	a34c      	add	r3, pc, #304	@ (adr r3, 801a9f0 <__ieee754_rem_pio2+0x2f8>)
 801a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a8c8:	f7e5 fe6e 	bl	80005a8 <__aeabi_dmul>
 801a8cc:	4606      	mov	r6, r0
 801a8ce:	460f      	mov	r7, r1
 801a8d0:	4602      	mov	r2, r0
 801a8d2:	460b      	mov	r3, r1
 801a8d4:	4650      	mov	r0, sl
 801a8d6:	4659      	mov	r1, fp
 801a8d8:	f7e5 fcae 	bl	8000238 <__aeabi_dsub>
 801a8dc:	4602      	mov	r2, r0
 801a8de:	460b      	mov	r3, r1
 801a8e0:	4680      	mov	r8, r0
 801a8e2:	4689      	mov	r9, r1
 801a8e4:	4650      	mov	r0, sl
 801a8e6:	4659      	mov	r1, fp
 801a8e8:	f7e5 fca6 	bl	8000238 <__aeabi_dsub>
 801a8ec:	4632      	mov	r2, r6
 801a8ee:	463b      	mov	r3, r7
 801a8f0:	f7e5 fca2 	bl	8000238 <__aeabi_dsub>
 801a8f4:	a340      	add	r3, pc, #256	@ (adr r3, 801a9f8 <__ieee754_rem_pio2+0x300>)
 801a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a8fa:	4606      	mov	r6, r0
 801a8fc:	460f      	mov	r7, r1
 801a8fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a902:	f7e5 fe51 	bl	80005a8 <__aeabi_dmul>
 801a906:	4632      	mov	r2, r6
 801a908:	463b      	mov	r3, r7
 801a90a:	f7e5 fc95 	bl	8000238 <__aeabi_dsub>
 801a90e:	4602      	mov	r2, r0
 801a910:	460b      	mov	r3, r1
 801a912:	4606      	mov	r6, r0
 801a914:	460f      	mov	r7, r1
 801a916:	4640      	mov	r0, r8
 801a918:	4649      	mov	r1, r9
 801a91a:	f7e5 fc8d 	bl	8000238 <__aeabi_dsub>
 801a91e:	9a05      	ldr	r2, [sp, #20]
 801a920:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a924:	1ad3      	subs	r3, r2, r3
 801a926:	2b31      	cmp	r3, #49	@ 0x31
 801a928:	dc20      	bgt.n	801a96c <__ieee754_rem_pio2+0x274>
 801a92a:	e9c4 0100 	strd	r0, r1, [r4]
 801a92e:	46c2      	mov	sl, r8
 801a930:	46cb      	mov	fp, r9
 801a932:	e9d4 8900 	ldrd	r8, r9, [r4]
 801a936:	4650      	mov	r0, sl
 801a938:	4642      	mov	r2, r8
 801a93a:	464b      	mov	r3, r9
 801a93c:	4659      	mov	r1, fp
 801a93e:	f7e5 fc7b 	bl	8000238 <__aeabi_dsub>
 801a942:	463b      	mov	r3, r7
 801a944:	4632      	mov	r2, r6
 801a946:	f7e5 fc77 	bl	8000238 <__aeabi_dsub>
 801a94a:	9b04      	ldr	r3, [sp, #16]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a952:	f6bf af0e 	bge.w	801a772 <__ieee754_rem_pio2+0x7a>
 801a956:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 801a95a:	6063      	str	r3, [r4, #4]
 801a95c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a960:	f8c4 8000 	str.w	r8, [r4]
 801a964:	60a0      	str	r0, [r4, #8]
 801a966:	60e3      	str	r3, [r4, #12]
 801a968:	426d      	negs	r5, r5
 801a96a:	e702      	b.n	801a772 <__ieee754_rem_pio2+0x7a>
 801a96c:	a326      	add	r3, pc, #152	@ (adr r3, 801aa08 <__ieee754_rem_pio2+0x310>)
 801a96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a972:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a976:	f7e5 fe17 	bl	80005a8 <__aeabi_dmul>
 801a97a:	4606      	mov	r6, r0
 801a97c:	460f      	mov	r7, r1
 801a97e:	4602      	mov	r2, r0
 801a980:	460b      	mov	r3, r1
 801a982:	4640      	mov	r0, r8
 801a984:	4649      	mov	r1, r9
 801a986:	f7e5 fc57 	bl	8000238 <__aeabi_dsub>
 801a98a:	4602      	mov	r2, r0
 801a98c:	460b      	mov	r3, r1
 801a98e:	4682      	mov	sl, r0
 801a990:	468b      	mov	fp, r1
 801a992:	4640      	mov	r0, r8
 801a994:	4649      	mov	r1, r9
 801a996:	f7e5 fc4f 	bl	8000238 <__aeabi_dsub>
 801a99a:	4632      	mov	r2, r6
 801a99c:	463b      	mov	r3, r7
 801a99e:	f7e5 fc4b 	bl	8000238 <__aeabi_dsub>
 801a9a2:	a31b      	add	r3, pc, #108	@ (adr r3, 801aa10 <__ieee754_rem_pio2+0x318>)
 801a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a8:	4606      	mov	r6, r0
 801a9aa:	460f      	mov	r7, r1
 801a9ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801a9b0:	f7e5 fdfa 	bl	80005a8 <__aeabi_dmul>
 801a9b4:	4632      	mov	r2, r6
 801a9b6:	463b      	mov	r3, r7
 801a9b8:	f7e5 fc3e 	bl	8000238 <__aeabi_dsub>
 801a9bc:	4606      	mov	r6, r0
 801a9be:	460f      	mov	r7, r1
 801a9c0:	e764      	b.n	801a88c <__ieee754_rem_pio2+0x194>
 801a9c2:	4b1b      	ldr	r3, [pc, #108]	@ (801aa30 <__ieee754_rem_pio2+0x338>)
 801a9c4:	4598      	cmp	r8, r3
 801a9c6:	d935      	bls.n	801aa34 <__ieee754_rem_pio2+0x33c>
 801a9c8:	4632      	mov	r2, r6
 801a9ca:	463b      	mov	r3, r7
 801a9cc:	4630      	mov	r0, r6
 801a9ce:	4639      	mov	r1, r7
 801a9d0:	f7e5 fc32 	bl	8000238 <__aeabi_dsub>
 801a9d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801a9d8:	e9c4 0100 	strd	r0, r1, [r4]
 801a9dc:	e69e      	b.n	801a71c <__ieee754_rem_pio2+0x24>
 801a9de:	bf00      	nop
 801a9e0:	54400000 	.word	0x54400000
 801a9e4:	3ff921fb 	.word	0x3ff921fb
 801a9e8:	1a626331 	.word	0x1a626331
 801a9ec:	3dd0b461 	.word	0x3dd0b461
 801a9f0:	1a600000 	.word	0x1a600000
 801a9f4:	3dd0b461 	.word	0x3dd0b461
 801a9f8:	2e037073 	.word	0x2e037073
 801a9fc:	3ba3198a 	.word	0x3ba3198a
 801aa00:	6dc9c883 	.word	0x6dc9c883
 801aa04:	3fe45f30 	.word	0x3fe45f30
 801aa08:	2e000000 	.word	0x2e000000
 801aa0c:	3ba3198a 	.word	0x3ba3198a
 801aa10:	252049c1 	.word	0x252049c1
 801aa14:	397b839a 	.word	0x397b839a
 801aa18:	3fe921fb 	.word	0x3fe921fb
 801aa1c:	4002d97b 	.word	0x4002d97b
 801aa20:	3ff921fb 	.word	0x3ff921fb
 801aa24:	413921fb 	.word	0x413921fb
 801aa28:	3fe00000 	.word	0x3fe00000
 801aa2c:	0801e444 	.word	0x0801e444
 801aa30:	7fefffff 	.word	0x7fefffff
 801aa34:	ea4f 5528 	mov.w	r5, r8, asr #20
 801aa38:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 801aa3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 801aa40:	4630      	mov	r0, r6
 801aa42:	460f      	mov	r7, r1
 801aa44:	f7e6 f860 	bl	8000b08 <__aeabi_d2iz>
 801aa48:	f7e5 fd44 	bl	80004d4 <__aeabi_i2d>
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	460b      	mov	r3, r1
 801aa50:	4630      	mov	r0, r6
 801aa52:	4639      	mov	r1, r7
 801aa54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801aa58:	f7e5 fbee 	bl	8000238 <__aeabi_dsub>
 801aa5c:	4b22      	ldr	r3, [pc, #136]	@ (801aae8 <__ieee754_rem_pio2+0x3f0>)
 801aa5e:	2200      	movs	r2, #0
 801aa60:	f7e5 fda2 	bl	80005a8 <__aeabi_dmul>
 801aa64:	460f      	mov	r7, r1
 801aa66:	4606      	mov	r6, r0
 801aa68:	f7e6 f84e 	bl	8000b08 <__aeabi_d2iz>
 801aa6c:	f7e5 fd32 	bl	80004d4 <__aeabi_i2d>
 801aa70:	4602      	mov	r2, r0
 801aa72:	460b      	mov	r3, r1
 801aa74:	4630      	mov	r0, r6
 801aa76:	4639      	mov	r1, r7
 801aa78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801aa7c:	f7e5 fbdc 	bl	8000238 <__aeabi_dsub>
 801aa80:	4b19      	ldr	r3, [pc, #100]	@ (801aae8 <__ieee754_rem_pio2+0x3f0>)
 801aa82:	2200      	movs	r2, #0
 801aa84:	f7e5 fd90 	bl	80005a8 <__aeabi_dmul>
 801aa88:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801aa8c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 801aa90:	f04f 0803 	mov.w	r8, #3
 801aa94:	2600      	movs	r6, #0
 801aa96:	2700      	movs	r7, #0
 801aa98:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801aa9c:	4632      	mov	r2, r6
 801aa9e:	463b      	mov	r3, r7
 801aaa0:	46c2      	mov	sl, r8
 801aaa2:	f108 38ff 	add.w	r8, r8, #4294967295
 801aaa6:	f7e5 ffe7 	bl	8000a78 <__aeabi_dcmpeq>
 801aaaa:	2800      	cmp	r0, #0
 801aaac:	d1f4      	bne.n	801aa98 <__ieee754_rem_pio2+0x3a0>
 801aaae:	4b0f      	ldr	r3, [pc, #60]	@ (801aaec <__ieee754_rem_pio2+0x3f4>)
 801aab0:	9301      	str	r3, [sp, #4]
 801aab2:	2302      	movs	r3, #2
 801aab4:	9300      	str	r3, [sp, #0]
 801aab6:	462a      	mov	r2, r5
 801aab8:	4653      	mov	r3, sl
 801aaba:	4621      	mov	r1, r4
 801aabc:	a806      	add	r0, sp, #24
 801aabe:	f000 f947 	bl	801ad50 <__kernel_rem_pio2>
 801aac2:	9b04      	ldr	r3, [sp, #16]
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	4605      	mov	r5, r0
 801aac8:	f6bf ae53 	bge.w	801a772 <__ieee754_rem_pio2+0x7a>
 801aacc:	e9d4 2100 	ldrd	r2, r1, [r4]
 801aad0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801aad4:	e9c4 2300 	strd	r2, r3, [r4]
 801aad8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801aadc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801aae0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801aae4:	e740      	b.n	801a968 <__ieee754_rem_pio2+0x270>
 801aae6:	bf00      	nop
 801aae8:	41700000 	.word	0x41700000
 801aaec:	0801e4c4 	.word	0x0801e4c4

0801aaf0 <acos>:
 801aaf0:	b538      	push	{r3, r4, r5, lr}
 801aaf2:	ed2d 8b02 	vpush	{d8}
 801aaf6:	ec55 4b10 	vmov	r4, r5, d0
 801aafa:	f000 fc81 	bl	801b400 <__ieee754_acos>
 801aafe:	4622      	mov	r2, r4
 801ab00:	462b      	mov	r3, r5
 801ab02:	4620      	mov	r0, r4
 801ab04:	4629      	mov	r1, r5
 801ab06:	eeb0 8a40 	vmov.f32	s16, s0
 801ab0a:	eef0 8a60 	vmov.f32	s17, s1
 801ab0e:	f7e5 ffe5 	bl	8000adc <__aeabi_dcmpun>
 801ab12:	b9a8      	cbnz	r0, 801ab40 <acos+0x50>
 801ab14:	ec45 4b10 	vmov	d0, r4, r5
 801ab18:	f000 f81e 	bl	801ab58 <fabs>
 801ab1c:	4b0c      	ldr	r3, [pc, #48]	@ (801ab50 <acos+0x60>)
 801ab1e:	ec51 0b10 	vmov	r0, r1, d0
 801ab22:	2200      	movs	r2, #0
 801ab24:	f7e5 ffd0 	bl	8000ac8 <__aeabi_dcmpgt>
 801ab28:	b150      	cbz	r0, 801ab40 <acos+0x50>
 801ab2a:	f7fc fc79 	bl	8017420 <__errno>
 801ab2e:	ecbd 8b02 	vpop	{d8}
 801ab32:	2321      	movs	r3, #33	@ 0x21
 801ab34:	6003      	str	r3, [r0, #0]
 801ab36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab3a:	4806      	ldr	r0, [pc, #24]	@ (801ab54 <acos+0x64>)
 801ab3c:	f7fc bcb4 	b.w	80174a8 <nan>
 801ab40:	eeb0 0a48 	vmov.f32	s0, s16
 801ab44:	eef0 0a68 	vmov.f32	s1, s17
 801ab48:	ecbd 8b02 	vpop	{d8}
 801ab4c:	bd38      	pop	{r3, r4, r5, pc}
 801ab4e:	bf00      	nop
 801ab50:	3ff00000 	.word	0x3ff00000
 801ab54:	0801e1fe 	.word	0x0801e1fe

0801ab58 <fabs>:
 801ab58:	ec51 0b10 	vmov	r0, r1, d0
 801ab5c:	4602      	mov	r2, r0
 801ab5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ab62:	ec43 2b10 	vmov	d0, r2, r3
 801ab66:	4770      	bx	lr

0801ab68 <__ieee754_expf>:
 801ab68:	ee10 2a10 	vmov	r2, s0
 801ab6c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801ab70:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ab74:	d902      	bls.n	801ab7c <__ieee754_expf+0x14>
 801ab76:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ab7a:	4770      	bx	lr
 801ab7c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801ab80:	d106      	bne.n	801ab90 <__ieee754_expf+0x28>
 801ab82:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801acbc <__ieee754_expf+0x154>
 801ab86:	2900      	cmp	r1, #0
 801ab88:	bf18      	it	ne
 801ab8a:	eeb0 0a67 	vmovne.f32	s0, s15
 801ab8e:	4770      	bx	lr
 801ab90:	484b      	ldr	r0, [pc, #300]	@ (801acc0 <__ieee754_expf+0x158>)
 801ab92:	4282      	cmp	r2, r0
 801ab94:	dd02      	ble.n	801ab9c <__ieee754_expf+0x34>
 801ab96:	2000      	movs	r0, #0
 801ab98:	f000 b8d4 	b.w	801ad44 <__math_oflowf>
 801ab9c:	2a00      	cmp	r2, #0
 801ab9e:	da05      	bge.n	801abac <__ieee754_expf+0x44>
 801aba0:	4a48      	ldr	r2, [pc, #288]	@ (801acc4 <__ieee754_expf+0x15c>)
 801aba2:	4293      	cmp	r3, r2
 801aba4:	d902      	bls.n	801abac <__ieee754_expf+0x44>
 801aba6:	2000      	movs	r0, #0
 801aba8:	f000 b8c6 	b.w	801ad38 <__math_uflowf>
 801abac:	4a46      	ldr	r2, [pc, #280]	@ (801acc8 <__ieee754_expf+0x160>)
 801abae:	4293      	cmp	r3, r2
 801abb0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801abb4:	d952      	bls.n	801ac5c <__ieee754_expf+0xf4>
 801abb6:	4a45      	ldr	r2, [pc, #276]	@ (801accc <__ieee754_expf+0x164>)
 801abb8:	4293      	cmp	r3, r2
 801abba:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801abbe:	d834      	bhi.n	801ac2a <__ieee754_expf+0xc2>
 801abc0:	4b43      	ldr	r3, [pc, #268]	@ (801acd0 <__ieee754_expf+0x168>)
 801abc2:	4413      	add	r3, r2
 801abc4:	ed93 7a00 	vldr	s14, [r3]
 801abc8:	4b42      	ldr	r3, [pc, #264]	@ (801acd4 <__ieee754_expf+0x16c>)
 801abca:	4413      	add	r3, r2
 801abcc:	ee30 7a47 	vsub.f32	s14, s0, s14
 801abd0:	f1c1 0201 	rsb	r2, r1, #1
 801abd4:	edd3 7a00 	vldr	s15, [r3]
 801abd8:	1a52      	subs	r2, r2, r1
 801abda:	ee37 0a67 	vsub.f32	s0, s14, s15
 801abde:	ee20 6a00 	vmul.f32	s12, s0, s0
 801abe2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801acd8 <__ieee754_expf+0x170>
 801abe6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801acdc <__ieee754_expf+0x174>
 801abea:	eee6 6a05 	vfma.f32	s13, s12, s10
 801abee:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801ace0 <__ieee754_expf+0x178>
 801abf2:	eea6 5a86 	vfma.f32	s10, s13, s12
 801abf6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801ace4 <__ieee754_expf+0x17c>
 801abfa:	eee5 6a06 	vfma.f32	s13, s10, s12
 801abfe:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801ace8 <__ieee754_expf+0x180>
 801ac02:	eea6 5a86 	vfma.f32	s10, s13, s12
 801ac06:	eef0 6a40 	vmov.f32	s13, s0
 801ac0a:	eee5 6a46 	vfms.f32	s13, s10, s12
 801ac0e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801ac12:	ee20 5a26 	vmul.f32	s10, s0, s13
 801ac16:	bb92      	cbnz	r2, 801ac7e <__ieee754_expf+0x116>
 801ac18:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801ac1c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801ac20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801ac24:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801ac28:	4770      	bx	lr
 801ac2a:	4b30      	ldr	r3, [pc, #192]	@ (801acec <__ieee754_expf+0x184>)
 801ac2c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801acf0 <__ieee754_expf+0x188>
 801ac30:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801acf4 <__ieee754_expf+0x18c>
 801ac34:	4413      	add	r3, r2
 801ac36:	edd3 7a00 	vldr	s15, [r3]
 801ac3a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ac3e:	eeb0 7a40 	vmov.f32	s14, s0
 801ac42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ac46:	ee17 2a90 	vmov	r2, s15
 801ac4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac4e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801ac52:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801acf8 <__ieee754_expf+0x190>
 801ac56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801ac5a:	e7be      	b.n	801abda <__ieee754_expf+0x72>
 801ac5c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801ac60:	d20b      	bcs.n	801ac7a <__ieee754_expf+0x112>
 801ac62:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801acfc <__ieee754_expf+0x194>
 801ac66:	ee70 6a26 	vadd.f32	s13, s0, s13
 801ac6a:	eef4 6ae5 	vcmpe.f32	s13, s11
 801ac6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ac72:	dd02      	ble.n	801ac7a <__ieee754_expf+0x112>
 801ac74:	ee30 0a25 	vadd.f32	s0, s0, s11
 801ac78:	4770      	bx	lr
 801ac7a:	2200      	movs	r2, #0
 801ac7c:	e7af      	b.n	801abde <__ieee754_expf+0x76>
 801ac7e:	ee36 6a66 	vsub.f32	s12, s12, s13
 801ac82:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801ac86:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801ac8a:	bfb8      	it	lt
 801ac8c:	3264      	addlt	r2, #100	@ 0x64
 801ac8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ac92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ac96:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801ac9a:	ee17 3a90 	vmov	r3, s15
 801ac9e:	bfab      	itete	ge
 801aca0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801aca4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801aca8:	ee00 3a10 	vmovge	s0, r3
 801acac:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801ad00 <__ieee754_expf+0x198>
 801acb0:	bfbc      	itt	lt
 801acb2:	ee00 3a10 	vmovlt	s0, r3
 801acb6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801acba:	4770      	bx	lr
 801acbc:	00000000 	.word	0x00000000
 801acc0:	42b17217 	.word	0x42b17217
 801acc4:	42cff1b5 	.word	0x42cff1b5
 801acc8:	3eb17218 	.word	0x3eb17218
 801accc:	3f851591 	.word	0x3f851591
 801acd0:	0801e5d4 	.word	0x0801e5d4
 801acd4:	0801e5cc 	.word	0x0801e5cc
 801acd8:	3331bb4c 	.word	0x3331bb4c
 801acdc:	b5ddea0e 	.word	0xb5ddea0e
 801ace0:	388ab355 	.word	0x388ab355
 801ace4:	bb360b61 	.word	0xbb360b61
 801ace8:	3e2aaaab 	.word	0x3e2aaaab
 801acec:	0801e5dc 	.word	0x0801e5dc
 801acf0:	3fb8aa3b 	.word	0x3fb8aa3b
 801acf4:	3f317180 	.word	0x3f317180
 801acf8:	3717f7d1 	.word	0x3717f7d1
 801acfc:	7149f2ca 	.word	0x7149f2ca
 801ad00:	0d800000 	.word	0x0d800000

0801ad04 <with_errnof>:
 801ad04:	b510      	push	{r4, lr}
 801ad06:	ed2d 8b02 	vpush	{d8}
 801ad0a:	eeb0 8a40 	vmov.f32	s16, s0
 801ad0e:	4604      	mov	r4, r0
 801ad10:	f7fc fb86 	bl	8017420 <__errno>
 801ad14:	eeb0 0a48 	vmov.f32	s0, s16
 801ad18:	ecbd 8b02 	vpop	{d8}
 801ad1c:	6004      	str	r4, [r0, #0]
 801ad1e:	bd10      	pop	{r4, pc}

0801ad20 <xflowf>:
 801ad20:	b130      	cbz	r0, 801ad30 <xflowf+0x10>
 801ad22:	eef1 7a40 	vneg.f32	s15, s0
 801ad26:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ad2a:	2022      	movs	r0, #34	@ 0x22
 801ad2c:	f7ff bfea 	b.w	801ad04 <with_errnof>
 801ad30:	eef0 7a40 	vmov.f32	s15, s0
 801ad34:	e7f7      	b.n	801ad26 <xflowf+0x6>
	...

0801ad38 <__math_uflowf>:
 801ad38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ad40 <__math_uflowf+0x8>
 801ad3c:	f7ff bff0 	b.w	801ad20 <xflowf>
 801ad40:	10000000 	.word	0x10000000

0801ad44 <__math_oflowf>:
 801ad44:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ad4c <__math_oflowf+0x8>
 801ad48:	f7ff bfea 	b.w	801ad20 <xflowf>
 801ad4c:	70000000 	.word	0x70000000

0801ad50 <__kernel_rem_pio2>:
 801ad50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad54:	ed2d 8b02 	vpush	{d8}
 801ad58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 801ad5c:	f112 0f14 	cmn.w	r2, #20
 801ad60:	9306      	str	r3, [sp, #24]
 801ad62:	9104      	str	r1, [sp, #16]
 801ad64:	4bbe      	ldr	r3, [pc, #760]	@ (801b060 <__kernel_rem_pio2+0x310>)
 801ad66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 801ad68:	9008      	str	r0, [sp, #32]
 801ad6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ad6e:	9300      	str	r3, [sp, #0]
 801ad70:	9b06      	ldr	r3, [sp, #24]
 801ad72:	f103 33ff 	add.w	r3, r3, #4294967295
 801ad76:	bfa8      	it	ge
 801ad78:	1ed4      	subge	r4, r2, #3
 801ad7a:	9305      	str	r3, [sp, #20]
 801ad7c:	bfb2      	itee	lt
 801ad7e:	2400      	movlt	r4, #0
 801ad80:	2318      	movge	r3, #24
 801ad82:	fb94 f4f3 	sdivge	r4, r4, r3
 801ad86:	f06f 0317 	mvn.w	r3, #23
 801ad8a:	fb04 3303 	mla	r3, r4, r3, r3
 801ad8e:	eb03 0b02 	add.w	fp, r3, r2
 801ad92:	9b00      	ldr	r3, [sp, #0]
 801ad94:	9a05      	ldr	r2, [sp, #20]
 801ad96:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 801b050 <__kernel_rem_pio2+0x300>
 801ad9a:	eb03 0802 	add.w	r8, r3, r2
 801ad9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ada0:	1aa7      	subs	r7, r4, r2
 801ada2:	ae20      	add	r6, sp, #128	@ 0x80
 801ada4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801ada8:	2500      	movs	r5, #0
 801adaa:	4545      	cmp	r5, r8
 801adac:	dd13      	ble.n	801add6 <__kernel_rem_pio2+0x86>
 801adae:	9b06      	ldr	r3, [sp, #24]
 801adb0:	aa20      	add	r2, sp, #128	@ 0x80
 801adb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801adb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801adba:	f04f 0800 	mov.w	r8, #0
 801adbe:	9b00      	ldr	r3, [sp, #0]
 801adc0:	4598      	cmp	r8, r3
 801adc2:	dc31      	bgt.n	801ae28 <__kernel_rem_pio2+0xd8>
 801adc4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 801b050 <__kernel_rem_pio2+0x300>
 801adc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801adcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 801add0:	462f      	mov	r7, r5
 801add2:	2600      	movs	r6, #0
 801add4:	e01b      	b.n	801ae0e <__kernel_rem_pio2+0xbe>
 801add6:	42ef      	cmn	r7, r5
 801add8:	d407      	bmi.n	801adea <__kernel_rem_pio2+0x9a>
 801adda:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801adde:	f7e5 fb79 	bl	80004d4 <__aeabi_i2d>
 801ade2:	e8e6 0102 	strd	r0, r1, [r6], #8
 801ade6:	3501      	adds	r5, #1
 801ade8:	e7df      	b.n	801adaa <__kernel_rem_pio2+0x5a>
 801adea:	ec51 0b18 	vmov	r0, r1, d8
 801adee:	e7f8      	b.n	801ade2 <__kernel_rem_pio2+0x92>
 801adf0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801adf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801adf8:	f7e5 fbd6 	bl	80005a8 <__aeabi_dmul>
 801adfc:	4602      	mov	r2, r0
 801adfe:	460b      	mov	r3, r1
 801ae00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ae04:	f7e5 fa1a 	bl	800023c <__adddf3>
 801ae08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ae0c:	3601      	adds	r6, #1
 801ae0e:	9b05      	ldr	r3, [sp, #20]
 801ae10:	429e      	cmp	r6, r3
 801ae12:	f1a7 0708 	sub.w	r7, r7, #8
 801ae16:	ddeb      	ble.n	801adf0 <__kernel_rem_pio2+0xa0>
 801ae18:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ae1c:	f108 0801 	add.w	r8, r8, #1
 801ae20:	ecaa 7b02 	vstmia	sl!, {d7}
 801ae24:	3508      	adds	r5, #8
 801ae26:	e7ca      	b.n	801adbe <__kernel_rem_pio2+0x6e>
 801ae28:	9b00      	ldr	r3, [sp, #0]
 801ae2a:	f8dd 8000 	ldr.w	r8, [sp]
 801ae2e:	aa0c      	add	r2, sp, #48	@ 0x30
 801ae30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ae34:	930a      	str	r3, [sp, #40]	@ 0x28
 801ae36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 801ae38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ae3c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae3e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801ae42:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ae44:	ab98      	add	r3, sp, #608	@ 0x260
 801ae46:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ae4a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801ae4e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ae52:	ac0c      	add	r4, sp, #48	@ 0x30
 801ae54:	ab70      	add	r3, sp, #448	@ 0x1c0
 801ae56:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801ae5a:	46a1      	mov	r9, r4
 801ae5c:	46c2      	mov	sl, r8
 801ae5e:	f1ba 0f00 	cmp.w	sl, #0
 801ae62:	f1a5 0508 	sub.w	r5, r5, #8
 801ae66:	dc77      	bgt.n	801af58 <__kernel_rem_pio2+0x208>
 801ae68:	4658      	mov	r0, fp
 801ae6a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801ae6e:	f000 fd23 	bl	801b8b8 <scalbn>
 801ae72:	ec57 6b10 	vmov	r6, r7, d0
 801ae76:	2200      	movs	r2, #0
 801ae78:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801ae7c:	4630      	mov	r0, r6
 801ae7e:	4639      	mov	r1, r7
 801ae80:	f7e5 fb92 	bl	80005a8 <__aeabi_dmul>
 801ae84:	ec41 0b10 	vmov	d0, r0, r1
 801ae88:	f7ff f87e 	bl	8019f88 <floor>
 801ae8c:	4b75      	ldr	r3, [pc, #468]	@ (801b064 <__kernel_rem_pio2+0x314>)
 801ae8e:	ec51 0b10 	vmov	r0, r1, d0
 801ae92:	2200      	movs	r2, #0
 801ae94:	f7e5 fb88 	bl	80005a8 <__aeabi_dmul>
 801ae98:	4602      	mov	r2, r0
 801ae9a:	460b      	mov	r3, r1
 801ae9c:	4630      	mov	r0, r6
 801ae9e:	4639      	mov	r1, r7
 801aea0:	f7e5 f9ca 	bl	8000238 <__aeabi_dsub>
 801aea4:	460f      	mov	r7, r1
 801aea6:	4606      	mov	r6, r0
 801aea8:	f7e5 fe2e 	bl	8000b08 <__aeabi_d2iz>
 801aeac:	9002      	str	r0, [sp, #8]
 801aeae:	f7e5 fb11 	bl	80004d4 <__aeabi_i2d>
 801aeb2:	4602      	mov	r2, r0
 801aeb4:	460b      	mov	r3, r1
 801aeb6:	4630      	mov	r0, r6
 801aeb8:	4639      	mov	r1, r7
 801aeba:	f7e5 f9bd 	bl	8000238 <__aeabi_dsub>
 801aebe:	f1bb 0f00 	cmp.w	fp, #0
 801aec2:	4606      	mov	r6, r0
 801aec4:	460f      	mov	r7, r1
 801aec6:	dd6c      	ble.n	801afa2 <__kernel_rem_pio2+0x252>
 801aec8:	f108 31ff 	add.w	r1, r8, #4294967295
 801aecc:	ab0c      	add	r3, sp, #48	@ 0x30
 801aece:	9d02      	ldr	r5, [sp, #8]
 801aed0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801aed4:	f1cb 0018 	rsb	r0, fp, #24
 801aed8:	fa43 f200 	asr.w	r2, r3, r0
 801aedc:	4415      	add	r5, r2
 801aede:	4082      	lsls	r2, r0
 801aee0:	1a9b      	subs	r3, r3, r2
 801aee2:	aa0c      	add	r2, sp, #48	@ 0x30
 801aee4:	9502      	str	r5, [sp, #8]
 801aee6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801aeea:	f1cb 0217 	rsb	r2, fp, #23
 801aeee:	fa43 f902 	asr.w	r9, r3, r2
 801aef2:	f1b9 0f00 	cmp.w	r9, #0
 801aef6:	dd64      	ble.n	801afc2 <__kernel_rem_pio2+0x272>
 801aef8:	9b02      	ldr	r3, [sp, #8]
 801aefa:	2200      	movs	r2, #0
 801aefc:	3301      	adds	r3, #1
 801aefe:	9302      	str	r3, [sp, #8]
 801af00:	4615      	mov	r5, r2
 801af02:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801af06:	4590      	cmp	r8, r2
 801af08:	f300 80b8 	bgt.w	801b07c <__kernel_rem_pio2+0x32c>
 801af0c:	f1bb 0f00 	cmp.w	fp, #0
 801af10:	dd07      	ble.n	801af22 <__kernel_rem_pio2+0x1d2>
 801af12:	f1bb 0f01 	cmp.w	fp, #1
 801af16:	f000 80bf 	beq.w	801b098 <__kernel_rem_pio2+0x348>
 801af1a:	f1bb 0f02 	cmp.w	fp, #2
 801af1e:	f000 80c6 	beq.w	801b0ae <__kernel_rem_pio2+0x35e>
 801af22:	f1b9 0f02 	cmp.w	r9, #2
 801af26:	d14c      	bne.n	801afc2 <__kernel_rem_pio2+0x272>
 801af28:	4632      	mov	r2, r6
 801af2a:	463b      	mov	r3, r7
 801af2c:	494e      	ldr	r1, [pc, #312]	@ (801b068 <__kernel_rem_pio2+0x318>)
 801af2e:	2000      	movs	r0, #0
 801af30:	f7e5 f982 	bl	8000238 <__aeabi_dsub>
 801af34:	4606      	mov	r6, r0
 801af36:	460f      	mov	r7, r1
 801af38:	2d00      	cmp	r5, #0
 801af3a:	d042      	beq.n	801afc2 <__kernel_rem_pio2+0x272>
 801af3c:	4658      	mov	r0, fp
 801af3e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 801b058 <__kernel_rem_pio2+0x308>
 801af42:	f000 fcb9 	bl	801b8b8 <scalbn>
 801af46:	4630      	mov	r0, r6
 801af48:	4639      	mov	r1, r7
 801af4a:	ec53 2b10 	vmov	r2, r3, d0
 801af4e:	f7e5 f973 	bl	8000238 <__aeabi_dsub>
 801af52:	4606      	mov	r6, r0
 801af54:	460f      	mov	r7, r1
 801af56:	e034      	b.n	801afc2 <__kernel_rem_pio2+0x272>
 801af58:	4b44      	ldr	r3, [pc, #272]	@ (801b06c <__kernel_rem_pio2+0x31c>)
 801af5a:	2200      	movs	r2, #0
 801af5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af60:	f7e5 fb22 	bl	80005a8 <__aeabi_dmul>
 801af64:	f7e5 fdd0 	bl	8000b08 <__aeabi_d2iz>
 801af68:	f7e5 fab4 	bl	80004d4 <__aeabi_i2d>
 801af6c:	4b40      	ldr	r3, [pc, #256]	@ (801b070 <__kernel_rem_pio2+0x320>)
 801af6e:	2200      	movs	r2, #0
 801af70:	4606      	mov	r6, r0
 801af72:	460f      	mov	r7, r1
 801af74:	f7e5 fb18 	bl	80005a8 <__aeabi_dmul>
 801af78:	4602      	mov	r2, r0
 801af7a:	460b      	mov	r3, r1
 801af7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801af80:	f7e5 f95a 	bl	8000238 <__aeabi_dsub>
 801af84:	f7e5 fdc0 	bl	8000b08 <__aeabi_d2iz>
 801af88:	e9d5 2300 	ldrd	r2, r3, [r5]
 801af8c:	f849 0b04 	str.w	r0, [r9], #4
 801af90:	4639      	mov	r1, r7
 801af92:	4630      	mov	r0, r6
 801af94:	f7e5 f952 	bl	800023c <__adddf3>
 801af98:	f10a 3aff 	add.w	sl, sl, #4294967295
 801af9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801afa0:	e75d      	b.n	801ae5e <__kernel_rem_pio2+0x10e>
 801afa2:	d107      	bne.n	801afb4 <__kernel_rem_pio2+0x264>
 801afa4:	f108 33ff 	add.w	r3, r8, #4294967295
 801afa8:	aa0c      	add	r2, sp, #48	@ 0x30
 801afaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801afae:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801afb2:	e79e      	b.n	801aef2 <__kernel_rem_pio2+0x1a2>
 801afb4:	4b2f      	ldr	r3, [pc, #188]	@ (801b074 <__kernel_rem_pio2+0x324>)
 801afb6:	2200      	movs	r2, #0
 801afb8:	f7e5 fd7c 	bl	8000ab4 <__aeabi_dcmpge>
 801afbc:	2800      	cmp	r0, #0
 801afbe:	d143      	bne.n	801b048 <__kernel_rem_pio2+0x2f8>
 801afc0:	4681      	mov	r9, r0
 801afc2:	2200      	movs	r2, #0
 801afc4:	2300      	movs	r3, #0
 801afc6:	4630      	mov	r0, r6
 801afc8:	4639      	mov	r1, r7
 801afca:	f7e5 fd55 	bl	8000a78 <__aeabi_dcmpeq>
 801afce:	2800      	cmp	r0, #0
 801afd0:	f000 80bf 	beq.w	801b152 <__kernel_rem_pio2+0x402>
 801afd4:	f108 33ff 	add.w	r3, r8, #4294967295
 801afd8:	2200      	movs	r2, #0
 801afda:	9900      	ldr	r1, [sp, #0]
 801afdc:	428b      	cmp	r3, r1
 801afde:	da6e      	bge.n	801b0be <__kernel_rem_pio2+0x36e>
 801afe0:	2a00      	cmp	r2, #0
 801afe2:	f000 8089 	beq.w	801b0f8 <__kernel_rem_pio2+0x3a8>
 801afe6:	f108 38ff 	add.w	r8, r8, #4294967295
 801afea:	ab0c      	add	r3, sp, #48	@ 0x30
 801afec:	f1ab 0b18 	sub.w	fp, fp, #24
 801aff0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d0f6      	beq.n	801afe6 <__kernel_rem_pio2+0x296>
 801aff8:	4658      	mov	r0, fp
 801affa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801b058 <__kernel_rem_pio2+0x308>
 801affe:	f000 fc5b 	bl	801b8b8 <scalbn>
 801b002:	f108 0301 	add.w	r3, r8, #1
 801b006:	00da      	lsls	r2, r3, #3
 801b008:	9205      	str	r2, [sp, #20]
 801b00a:	ec55 4b10 	vmov	r4, r5, d0
 801b00e:	aa70      	add	r2, sp, #448	@ 0x1c0
 801b010:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801b06c <__kernel_rem_pio2+0x31c>
 801b014:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801b018:	4646      	mov	r6, r8
 801b01a:	f04f 0a00 	mov.w	sl, #0
 801b01e:	2e00      	cmp	r6, #0
 801b020:	f280 80cf 	bge.w	801b1c2 <__kernel_rem_pio2+0x472>
 801b024:	4644      	mov	r4, r8
 801b026:	2c00      	cmp	r4, #0
 801b028:	f2c0 80fd 	blt.w	801b226 <__kernel_rem_pio2+0x4d6>
 801b02c:	4b12      	ldr	r3, [pc, #72]	@ (801b078 <__kernel_rem_pio2+0x328>)
 801b02e:	461f      	mov	r7, r3
 801b030:	ab70      	add	r3, sp, #448	@ 0x1c0
 801b032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b036:	9306      	str	r3, [sp, #24]
 801b038:	f04f 0a00 	mov.w	sl, #0
 801b03c:	f04f 0b00 	mov.w	fp, #0
 801b040:	2600      	movs	r6, #0
 801b042:	eba8 0504 	sub.w	r5, r8, r4
 801b046:	e0e2      	b.n	801b20e <__kernel_rem_pio2+0x4be>
 801b048:	f04f 0902 	mov.w	r9, #2
 801b04c:	e754      	b.n	801aef8 <__kernel_rem_pio2+0x1a8>
 801b04e:	bf00      	nop
	...
 801b05c:	3ff00000 	.word	0x3ff00000
 801b060:	0801e628 	.word	0x0801e628
 801b064:	40200000 	.word	0x40200000
 801b068:	3ff00000 	.word	0x3ff00000
 801b06c:	3e700000 	.word	0x3e700000
 801b070:	41700000 	.word	0x41700000
 801b074:	3fe00000 	.word	0x3fe00000
 801b078:	0801e5e8 	.word	0x0801e5e8
 801b07c:	f854 3b04 	ldr.w	r3, [r4], #4
 801b080:	b945      	cbnz	r5, 801b094 <__kernel_rem_pio2+0x344>
 801b082:	b123      	cbz	r3, 801b08e <__kernel_rem_pio2+0x33e>
 801b084:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801b088:	f844 3c04 	str.w	r3, [r4, #-4]
 801b08c:	2301      	movs	r3, #1
 801b08e:	3201      	adds	r2, #1
 801b090:	461d      	mov	r5, r3
 801b092:	e738      	b.n	801af06 <__kernel_rem_pio2+0x1b6>
 801b094:	1acb      	subs	r3, r1, r3
 801b096:	e7f7      	b.n	801b088 <__kernel_rem_pio2+0x338>
 801b098:	f108 32ff 	add.w	r2, r8, #4294967295
 801b09c:	ab0c      	add	r3, sp, #48	@ 0x30
 801b09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b0a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b0a6:	a90c      	add	r1, sp, #48	@ 0x30
 801b0a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801b0ac:	e739      	b.n	801af22 <__kernel_rem_pio2+0x1d2>
 801b0ae:	f108 32ff 	add.w	r2, r8, #4294967295
 801b0b2:	ab0c      	add	r3, sp, #48	@ 0x30
 801b0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b0b8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801b0bc:	e7f3      	b.n	801b0a6 <__kernel_rem_pio2+0x356>
 801b0be:	a90c      	add	r1, sp, #48	@ 0x30
 801b0c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801b0c4:	3b01      	subs	r3, #1
 801b0c6:	430a      	orrs	r2, r1
 801b0c8:	e787      	b.n	801afda <__kernel_rem_pio2+0x28a>
 801b0ca:	3401      	adds	r4, #1
 801b0cc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b0d0:	2a00      	cmp	r2, #0
 801b0d2:	d0fa      	beq.n	801b0ca <__kernel_rem_pio2+0x37a>
 801b0d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b0d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801b0da:	eb0d 0503 	add.w	r5, sp, r3
 801b0de:	9b06      	ldr	r3, [sp, #24]
 801b0e0:	aa20      	add	r2, sp, #128	@ 0x80
 801b0e2:	4443      	add	r3, r8
 801b0e4:	f108 0701 	add.w	r7, r8, #1
 801b0e8:	3d98      	subs	r5, #152	@ 0x98
 801b0ea:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801b0ee:	4444      	add	r4, r8
 801b0f0:	42bc      	cmp	r4, r7
 801b0f2:	da04      	bge.n	801b0fe <__kernel_rem_pio2+0x3ae>
 801b0f4:	46a0      	mov	r8, r4
 801b0f6:	e6a2      	b.n	801ae3e <__kernel_rem_pio2+0xee>
 801b0f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b0fa:	2401      	movs	r4, #1
 801b0fc:	e7e6      	b.n	801b0cc <__kernel_rem_pio2+0x37c>
 801b0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b100:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801b104:	f7e5 f9e6 	bl	80004d4 <__aeabi_i2d>
 801b108:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 801b3d0 <__kernel_rem_pio2+0x680>
 801b10c:	e8e6 0102 	strd	r0, r1, [r6], #8
 801b110:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b114:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801b118:	46b2      	mov	sl, r6
 801b11a:	f04f 0800 	mov.w	r8, #0
 801b11e:	9b05      	ldr	r3, [sp, #20]
 801b120:	4598      	cmp	r8, r3
 801b122:	dd05      	ble.n	801b130 <__kernel_rem_pio2+0x3e0>
 801b124:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b128:	3701      	adds	r7, #1
 801b12a:	eca5 7b02 	vstmia	r5!, {d7}
 801b12e:	e7df      	b.n	801b0f0 <__kernel_rem_pio2+0x3a0>
 801b130:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801b134:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801b138:	f7e5 fa36 	bl	80005a8 <__aeabi_dmul>
 801b13c:	4602      	mov	r2, r0
 801b13e:	460b      	mov	r3, r1
 801b140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b144:	f7e5 f87a 	bl	800023c <__adddf3>
 801b148:	f108 0801 	add.w	r8, r8, #1
 801b14c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b150:	e7e5      	b.n	801b11e <__kernel_rem_pio2+0x3ce>
 801b152:	f1cb 0000 	rsb	r0, fp, #0
 801b156:	ec47 6b10 	vmov	d0, r6, r7
 801b15a:	f000 fbad 	bl	801b8b8 <scalbn>
 801b15e:	ec55 4b10 	vmov	r4, r5, d0
 801b162:	4b9d      	ldr	r3, [pc, #628]	@ (801b3d8 <__kernel_rem_pio2+0x688>)
 801b164:	2200      	movs	r2, #0
 801b166:	4620      	mov	r0, r4
 801b168:	4629      	mov	r1, r5
 801b16a:	f7e5 fca3 	bl	8000ab4 <__aeabi_dcmpge>
 801b16e:	b300      	cbz	r0, 801b1b2 <__kernel_rem_pio2+0x462>
 801b170:	4b9a      	ldr	r3, [pc, #616]	@ (801b3dc <__kernel_rem_pio2+0x68c>)
 801b172:	2200      	movs	r2, #0
 801b174:	4620      	mov	r0, r4
 801b176:	4629      	mov	r1, r5
 801b178:	f7e5 fa16 	bl	80005a8 <__aeabi_dmul>
 801b17c:	f7e5 fcc4 	bl	8000b08 <__aeabi_d2iz>
 801b180:	4606      	mov	r6, r0
 801b182:	f7e5 f9a7 	bl	80004d4 <__aeabi_i2d>
 801b186:	4b94      	ldr	r3, [pc, #592]	@ (801b3d8 <__kernel_rem_pio2+0x688>)
 801b188:	2200      	movs	r2, #0
 801b18a:	f7e5 fa0d 	bl	80005a8 <__aeabi_dmul>
 801b18e:	460b      	mov	r3, r1
 801b190:	4602      	mov	r2, r0
 801b192:	4629      	mov	r1, r5
 801b194:	4620      	mov	r0, r4
 801b196:	f7e5 f84f 	bl	8000238 <__aeabi_dsub>
 801b19a:	f7e5 fcb5 	bl	8000b08 <__aeabi_d2iz>
 801b19e:	ab0c      	add	r3, sp, #48	@ 0x30
 801b1a0:	f10b 0b18 	add.w	fp, fp, #24
 801b1a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801b1a8:	f108 0801 	add.w	r8, r8, #1
 801b1ac:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 801b1b0:	e722      	b.n	801aff8 <__kernel_rem_pio2+0x2a8>
 801b1b2:	4620      	mov	r0, r4
 801b1b4:	4629      	mov	r1, r5
 801b1b6:	f7e5 fca7 	bl	8000b08 <__aeabi_d2iz>
 801b1ba:	ab0c      	add	r3, sp, #48	@ 0x30
 801b1bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 801b1c0:	e71a      	b.n	801aff8 <__kernel_rem_pio2+0x2a8>
 801b1c2:	ab0c      	add	r3, sp, #48	@ 0x30
 801b1c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801b1c8:	f7e5 f984 	bl	80004d4 <__aeabi_i2d>
 801b1cc:	4622      	mov	r2, r4
 801b1ce:	462b      	mov	r3, r5
 801b1d0:	f7e5 f9ea 	bl	80005a8 <__aeabi_dmul>
 801b1d4:	4652      	mov	r2, sl
 801b1d6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801b1da:	465b      	mov	r3, fp
 801b1dc:	4620      	mov	r0, r4
 801b1de:	4629      	mov	r1, r5
 801b1e0:	f7e5 f9e2 	bl	80005a8 <__aeabi_dmul>
 801b1e4:	3e01      	subs	r6, #1
 801b1e6:	4604      	mov	r4, r0
 801b1e8:	460d      	mov	r5, r1
 801b1ea:	e718      	b.n	801b01e <__kernel_rem_pio2+0x2ce>
 801b1ec:	9906      	ldr	r1, [sp, #24]
 801b1ee:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801b1f2:	9106      	str	r1, [sp, #24]
 801b1f4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 801b1f8:	f7e5 f9d6 	bl	80005a8 <__aeabi_dmul>
 801b1fc:	4602      	mov	r2, r0
 801b1fe:	460b      	mov	r3, r1
 801b200:	4650      	mov	r0, sl
 801b202:	4659      	mov	r1, fp
 801b204:	f7e5 f81a 	bl	800023c <__adddf3>
 801b208:	3601      	adds	r6, #1
 801b20a:	4682      	mov	sl, r0
 801b20c:	468b      	mov	fp, r1
 801b20e:	9b00      	ldr	r3, [sp, #0]
 801b210:	429e      	cmp	r6, r3
 801b212:	dc01      	bgt.n	801b218 <__kernel_rem_pio2+0x4c8>
 801b214:	42b5      	cmp	r5, r6
 801b216:	dae9      	bge.n	801b1ec <__kernel_rem_pio2+0x49c>
 801b218:	ab48      	add	r3, sp, #288	@ 0x120
 801b21a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801b21e:	e9c5 ab00 	strd	sl, fp, [r5]
 801b222:	3c01      	subs	r4, #1
 801b224:	e6ff      	b.n	801b026 <__kernel_rem_pio2+0x2d6>
 801b226:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801b228:	2b02      	cmp	r3, #2
 801b22a:	dc0b      	bgt.n	801b244 <__kernel_rem_pio2+0x4f4>
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	dc39      	bgt.n	801b2a4 <__kernel_rem_pio2+0x554>
 801b230:	d05d      	beq.n	801b2ee <__kernel_rem_pio2+0x59e>
 801b232:	9b02      	ldr	r3, [sp, #8]
 801b234:	f003 0007 	and.w	r0, r3, #7
 801b238:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801b23c:	ecbd 8b02 	vpop	{d8}
 801b240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b244:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801b246:	2b03      	cmp	r3, #3
 801b248:	d1f3      	bne.n	801b232 <__kernel_rem_pio2+0x4e2>
 801b24a:	9b05      	ldr	r3, [sp, #20]
 801b24c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 801b250:	eb0d 0403 	add.w	r4, sp, r3
 801b254:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 801b258:	4625      	mov	r5, r4
 801b25a:	46c2      	mov	sl, r8
 801b25c:	f1ba 0f00 	cmp.w	sl, #0
 801b260:	f1a5 0508 	sub.w	r5, r5, #8
 801b264:	dc6b      	bgt.n	801b33e <__kernel_rem_pio2+0x5ee>
 801b266:	4645      	mov	r5, r8
 801b268:	2d01      	cmp	r5, #1
 801b26a:	f1a4 0408 	sub.w	r4, r4, #8
 801b26e:	f300 8087 	bgt.w	801b380 <__kernel_rem_pio2+0x630>
 801b272:	9c05      	ldr	r4, [sp, #20]
 801b274:	ab48      	add	r3, sp, #288	@ 0x120
 801b276:	441c      	add	r4, r3
 801b278:	2000      	movs	r0, #0
 801b27a:	2100      	movs	r1, #0
 801b27c:	f1b8 0f01 	cmp.w	r8, #1
 801b280:	f300 809c 	bgt.w	801b3bc <__kernel_rem_pio2+0x66c>
 801b284:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 801b288:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801b28c:	f1b9 0f00 	cmp.w	r9, #0
 801b290:	f040 80a6 	bne.w	801b3e0 <__kernel_rem_pio2+0x690>
 801b294:	9b04      	ldr	r3, [sp, #16]
 801b296:	e9c3 7800 	strd	r7, r8, [r3]
 801b29a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801b29e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801b2a2:	e7c6      	b.n	801b232 <__kernel_rem_pio2+0x4e2>
 801b2a4:	9d05      	ldr	r5, [sp, #20]
 801b2a6:	ab48      	add	r3, sp, #288	@ 0x120
 801b2a8:	441d      	add	r5, r3
 801b2aa:	4644      	mov	r4, r8
 801b2ac:	2000      	movs	r0, #0
 801b2ae:	2100      	movs	r1, #0
 801b2b0:	2c00      	cmp	r4, #0
 801b2b2:	da35      	bge.n	801b320 <__kernel_rem_pio2+0x5d0>
 801b2b4:	f1b9 0f00 	cmp.w	r9, #0
 801b2b8:	d038      	beq.n	801b32c <__kernel_rem_pio2+0x5dc>
 801b2ba:	4602      	mov	r2, r0
 801b2bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b2c0:	9c04      	ldr	r4, [sp, #16]
 801b2c2:	e9c4 2300 	strd	r2, r3, [r4]
 801b2c6:	4602      	mov	r2, r0
 801b2c8:	460b      	mov	r3, r1
 801b2ca:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801b2ce:	f7e4 ffb3 	bl	8000238 <__aeabi_dsub>
 801b2d2:	ad4a      	add	r5, sp, #296	@ 0x128
 801b2d4:	2401      	movs	r4, #1
 801b2d6:	45a0      	cmp	r8, r4
 801b2d8:	da2b      	bge.n	801b332 <__kernel_rem_pio2+0x5e2>
 801b2da:	f1b9 0f00 	cmp.w	r9, #0
 801b2de:	d002      	beq.n	801b2e6 <__kernel_rem_pio2+0x596>
 801b2e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b2e4:	4619      	mov	r1, r3
 801b2e6:	9b04      	ldr	r3, [sp, #16]
 801b2e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801b2ec:	e7a1      	b.n	801b232 <__kernel_rem_pio2+0x4e2>
 801b2ee:	9c05      	ldr	r4, [sp, #20]
 801b2f0:	ab48      	add	r3, sp, #288	@ 0x120
 801b2f2:	441c      	add	r4, r3
 801b2f4:	2000      	movs	r0, #0
 801b2f6:	2100      	movs	r1, #0
 801b2f8:	f1b8 0f00 	cmp.w	r8, #0
 801b2fc:	da09      	bge.n	801b312 <__kernel_rem_pio2+0x5c2>
 801b2fe:	f1b9 0f00 	cmp.w	r9, #0
 801b302:	d002      	beq.n	801b30a <__kernel_rem_pio2+0x5ba>
 801b304:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b308:	4619      	mov	r1, r3
 801b30a:	9b04      	ldr	r3, [sp, #16]
 801b30c:	e9c3 0100 	strd	r0, r1, [r3]
 801b310:	e78f      	b.n	801b232 <__kernel_rem_pio2+0x4e2>
 801b312:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b316:	f7e4 ff91 	bl	800023c <__adddf3>
 801b31a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b31e:	e7eb      	b.n	801b2f8 <__kernel_rem_pio2+0x5a8>
 801b320:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801b324:	f7e4 ff8a 	bl	800023c <__adddf3>
 801b328:	3c01      	subs	r4, #1
 801b32a:	e7c1      	b.n	801b2b0 <__kernel_rem_pio2+0x560>
 801b32c:	4602      	mov	r2, r0
 801b32e:	460b      	mov	r3, r1
 801b330:	e7c6      	b.n	801b2c0 <__kernel_rem_pio2+0x570>
 801b332:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801b336:	f7e4 ff81 	bl	800023c <__adddf3>
 801b33a:	3401      	adds	r4, #1
 801b33c:	e7cb      	b.n	801b2d6 <__kernel_rem_pio2+0x586>
 801b33e:	ed95 7b00 	vldr	d7, [r5]
 801b342:	ed8d 7b00 	vstr	d7, [sp]
 801b346:	ed95 7b02 	vldr	d7, [r5, #8]
 801b34a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b34e:	ec53 2b17 	vmov	r2, r3, d7
 801b352:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b356:	f7e4 ff71 	bl	800023c <__adddf3>
 801b35a:	4602      	mov	r2, r0
 801b35c:	460b      	mov	r3, r1
 801b35e:	4606      	mov	r6, r0
 801b360:	460f      	mov	r7, r1
 801b362:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b366:	f7e4 ff67 	bl	8000238 <__aeabi_dsub>
 801b36a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b36e:	f7e4 ff65 	bl	800023c <__adddf3>
 801b372:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b376:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801b37a:	e9c5 6700 	strd	r6, r7, [r5]
 801b37e:	e76d      	b.n	801b25c <__kernel_rem_pio2+0x50c>
 801b380:	ed94 7b00 	vldr	d7, [r4]
 801b384:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 801b388:	ec51 0b17 	vmov	r0, r1, d7
 801b38c:	4652      	mov	r2, sl
 801b38e:	465b      	mov	r3, fp
 801b390:	ed8d 7b00 	vstr	d7, [sp]
 801b394:	f7e4 ff52 	bl	800023c <__adddf3>
 801b398:	4602      	mov	r2, r0
 801b39a:	460b      	mov	r3, r1
 801b39c:	4606      	mov	r6, r0
 801b39e:	460f      	mov	r7, r1
 801b3a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b3a4:	f7e4 ff48 	bl	8000238 <__aeabi_dsub>
 801b3a8:	4652      	mov	r2, sl
 801b3aa:	465b      	mov	r3, fp
 801b3ac:	f7e4 ff46 	bl	800023c <__adddf3>
 801b3b0:	3d01      	subs	r5, #1
 801b3b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801b3b6:	e9c4 6700 	strd	r6, r7, [r4]
 801b3ba:	e755      	b.n	801b268 <__kernel_rem_pio2+0x518>
 801b3bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801b3c0:	f7e4 ff3c 	bl	800023c <__adddf3>
 801b3c4:	f108 38ff 	add.w	r8, r8, #4294967295
 801b3c8:	e758      	b.n	801b27c <__kernel_rem_pio2+0x52c>
 801b3ca:	bf00      	nop
 801b3cc:	f3af 8000 	nop.w
	...
 801b3d8:	41700000 	.word	0x41700000
 801b3dc:	3e700000 	.word	0x3e700000
 801b3e0:	9b04      	ldr	r3, [sp, #16]
 801b3e2:	9a04      	ldr	r2, [sp, #16]
 801b3e4:	601f      	str	r7, [r3, #0]
 801b3e6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801b3ea:	605c      	str	r4, [r3, #4]
 801b3ec:	609d      	str	r5, [r3, #8]
 801b3ee:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801b3f2:	60d3      	str	r3, [r2, #12]
 801b3f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801b3f8:	6110      	str	r0, [r2, #16]
 801b3fa:	6153      	str	r3, [r2, #20]
 801b3fc:	e719      	b.n	801b232 <__kernel_rem_pio2+0x4e2>
 801b3fe:	bf00      	nop

0801b400 <__ieee754_acos>:
 801b400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b404:	ec55 4b10 	vmov	r4, r5, d0
 801b408:	49b7      	ldr	r1, [pc, #732]	@ (801b6e8 <__ieee754_acos+0x2e8>)
 801b40a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801b40e:	428b      	cmp	r3, r1
 801b410:	d919      	bls.n	801b446 <__ieee754_acos+0x46>
 801b412:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 801b416:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801b41a:	4323      	orrs	r3, r4
 801b41c:	d106      	bne.n	801b42c <__ieee754_acos+0x2c>
 801b41e:	2d00      	cmp	r5, #0
 801b420:	f340 8210 	ble.w	801b844 <__ieee754_acos+0x444>
 801b424:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 801b678 <__ieee754_acos+0x278>
 801b428:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b42c:	4622      	mov	r2, r4
 801b42e:	462b      	mov	r3, r5
 801b430:	4620      	mov	r0, r4
 801b432:	4629      	mov	r1, r5
 801b434:	f7e4 ff00 	bl	8000238 <__aeabi_dsub>
 801b438:	4602      	mov	r2, r0
 801b43a:	460b      	mov	r3, r1
 801b43c:	f7e5 f9de 	bl	80007fc <__aeabi_ddiv>
 801b440:	ec41 0b10 	vmov	d0, r0, r1
 801b444:	e7f0      	b.n	801b428 <__ieee754_acos+0x28>
 801b446:	49a9      	ldr	r1, [pc, #676]	@ (801b6ec <__ieee754_acos+0x2ec>)
 801b448:	428b      	cmp	r3, r1
 801b44a:	f200 8085 	bhi.w	801b558 <__ieee754_acos+0x158>
 801b44e:	4aa8      	ldr	r2, [pc, #672]	@ (801b6f0 <__ieee754_acos+0x2f0>)
 801b450:	4293      	cmp	r3, r2
 801b452:	f240 81fa 	bls.w	801b84a <__ieee754_acos+0x44a>
 801b456:	4622      	mov	r2, r4
 801b458:	462b      	mov	r3, r5
 801b45a:	4620      	mov	r0, r4
 801b45c:	4629      	mov	r1, r5
 801b45e:	f7e5 f8a3 	bl	80005a8 <__aeabi_dmul>
 801b462:	a387      	add	r3, pc, #540	@ (adr r3, 801b680 <__ieee754_acos+0x280>)
 801b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b468:	4606      	mov	r6, r0
 801b46a:	460f      	mov	r7, r1
 801b46c:	f7e5 f89c 	bl	80005a8 <__aeabi_dmul>
 801b470:	a385      	add	r3, pc, #532	@ (adr r3, 801b688 <__ieee754_acos+0x288>)
 801b472:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b476:	f7e4 fee1 	bl	800023c <__adddf3>
 801b47a:	4632      	mov	r2, r6
 801b47c:	463b      	mov	r3, r7
 801b47e:	f7e5 f893 	bl	80005a8 <__aeabi_dmul>
 801b482:	a383      	add	r3, pc, #524	@ (adr r3, 801b690 <__ieee754_acos+0x290>)
 801b484:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b488:	f7e4 fed6 	bl	8000238 <__aeabi_dsub>
 801b48c:	4632      	mov	r2, r6
 801b48e:	463b      	mov	r3, r7
 801b490:	f7e5 f88a 	bl	80005a8 <__aeabi_dmul>
 801b494:	a380      	add	r3, pc, #512	@ (adr r3, 801b698 <__ieee754_acos+0x298>)
 801b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b49a:	f7e4 fecf 	bl	800023c <__adddf3>
 801b49e:	4632      	mov	r2, r6
 801b4a0:	463b      	mov	r3, r7
 801b4a2:	f7e5 f881 	bl	80005a8 <__aeabi_dmul>
 801b4a6:	a37e      	add	r3, pc, #504	@ (adr r3, 801b6a0 <__ieee754_acos+0x2a0>)
 801b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4ac:	f7e4 fec4 	bl	8000238 <__aeabi_dsub>
 801b4b0:	4632      	mov	r2, r6
 801b4b2:	463b      	mov	r3, r7
 801b4b4:	f7e5 f878 	bl	80005a8 <__aeabi_dmul>
 801b4b8:	a37b      	add	r3, pc, #492	@ (adr r3, 801b6a8 <__ieee754_acos+0x2a8>)
 801b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4be:	f7e4 febd 	bl	800023c <__adddf3>
 801b4c2:	4632      	mov	r2, r6
 801b4c4:	463b      	mov	r3, r7
 801b4c6:	f7e5 f86f 	bl	80005a8 <__aeabi_dmul>
 801b4ca:	a379      	add	r3, pc, #484	@ (adr r3, 801b6b0 <__ieee754_acos+0x2b0>)
 801b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4d0:	4680      	mov	r8, r0
 801b4d2:	4689      	mov	r9, r1
 801b4d4:	4630      	mov	r0, r6
 801b4d6:	4639      	mov	r1, r7
 801b4d8:	f7e5 f866 	bl	80005a8 <__aeabi_dmul>
 801b4dc:	a376      	add	r3, pc, #472	@ (adr r3, 801b6b8 <__ieee754_acos+0x2b8>)
 801b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4e2:	f7e4 fea9 	bl	8000238 <__aeabi_dsub>
 801b4e6:	4632      	mov	r2, r6
 801b4e8:	463b      	mov	r3, r7
 801b4ea:	f7e5 f85d 	bl	80005a8 <__aeabi_dmul>
 801b4ee:	a374      	add	r3, pc, #464	@ (adr r3, 801b6c0 <__ieee754_acos+0x2c0>)
 801b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4f4:	f7e4 fea2 	bl	800023c <__adddf3>
 801b4f8:	4632      	mov	r2, r6
 801b4fa:	463b      	mov	r3, r7
 801b4fc:	f7e5 f854 	bl	80005a8 <__aeabi_dmul>
 801b500:	a371      	add	r3, pc, #452	@ (adr r3, 801b6c8 <__ieee754_acos+0x2c8>)
 801b502:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b506:	f7e4 fe97 	bl	8000238 <__aeabi_dsub>
 801b50a:	4632      	mov	r2, r6
 801b50c:	463b      	mov	r3, r7
 801b50e:	f7e5 f84b 	bl	80005a8 <__aeabi_dmul>
 801b512:	4b78      	ldr	r3, [pc, #480]	@ (801b6f4 <__ieee754_acos+0x2f4>)
 801b514:	2200      	movs	r2, #0
 801b516:	f7e4 fe91 	bl	800023c <__adddf3>
 801b51a:	4602      	mov	r2, r0
 801b51c:	460b      	mov	r3, r1
 801b51e:	4640      	mov	r0, r8
 801b520:	4649      	mov	r1, r9
 801b522:	f7e5 f96b 	bl	80007fc <__aeabi_ddiv>
 801b526:	4622      	mov	r2, r4
 801b528:	462b      	mov	r3, r5
 801b52a:	f7e5 f83d 	bl	80005a8 <__aeabi_dmul>
 801b52e:	4602      	mov	r2, r0
 801b530:	460b      	mov	r3, r1
 801b532:	a167      	add	r1, pc, #412	@ (adr r1, 801b6d0 <__ieee754_acos+0x2d0>)
 801b534:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b538:	f7e4 fe7e 	bl	8000238 <__aeabi_dsub>
 801b53c:	4602      	mov	r2, r0
 801b53e:	460b      	mov	r3, r1
 801b540:	4620      	mov	r0, r4
 801b542:	4629      	mov	r1, r5
 801b544:	f7e4 fe78 	bl	8000238 <__aeabi_dsub>
 801b548:	4602      	mov	r2, r0
 801b54a:	460b      	mov	r3, r1
 801b54c:	a162      	add	r1, pc, #392	@ (adr r1, 801b6d8 <__ieee754_acos+0x2d8>)
 801b54e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b552:	f7e4 fe71 	bl	8000238 <__aeabi_dsub>
 801b556:	e773      	b.n	801b440 <__ieee754_acos+0x40>
 801b558:	2d00      	cmp	r5, #0
 801b55a:	f280 80cf 	bge.w	801b6fc <__ieee754_acos+0x2fc>
 801b55e:	4b65      	ldr	r3, [pc, #404]	@ (801b6f4 <__ieee754_acos+0x2f4>)
 801b560:	2200      	movs	r2, #0
 801b562:	4620      	mov	r0, r4
 801b564:	4629      	mov	r1, r5
 801b566:	f7e4 fe69 	bl	800023c <__adddf3>
 801b56a:	4b63      	ldr	r3, [pc, #396]	@ (801b6f8 <__ieee754_acos+0x2f8>)
 801b56c:	2200      	movs	r2, #0
 801b56e:	f7e5 f81b 	bl	80005a8 <__aeabi_dmul>
 801b572:	a343      	add	r3, pc, #268	@ (adr r3, 801b680 <__ieee754_acos+0x280>)
 801b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b578:	4604      	mov	r4, r0
 801b57a:	460d      	mov	r5, r1
 801b57c:	f7e5 f814 	bl	80005a8 <__aeabi_dmul>
 801b580:	a341      	add	r3, pc, #260	@ (adr r3, 801b688 <__ieee754_acos+0x288>)
 801b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b586:	f7e4 fe59 	bl	800023c <__adddf3>
 801b58a:	4622      	mov	r2, r4
 801b58c:	462b      	mov	r3, r5
 801b58e:	f7e5 f80b 	bl	80005a8 <__aeabi_dmul>
 801b592:	a33f      	add	r3, pc, #252	@ (adr r3, 801b690 <__ieee754_acos+0x290>)
 801b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b598:	f7e4 fe4e 	bl	8000238 <__aeabi_dsub>
 801b59c:	4622      	mov	r2, r4
 801b59e:	462b      	mov	r3, r5
 801b5a0:	f7e5 f802 	bl	80005a8 <__aeabi_dmul>
 801b5a4:	a33c      	add	r3, pc, #240	@ (adr r3, 801b698 <__ieee754_acos+0x298>)
 801b5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5aa:	f7e4 fe47 	bl	800023c <__adddf3>
 801b5ae:	4622      	mov	r2, r4
 801b5b0:	462b      	mov	r3, r5
 801b5b2:	f7e4 fff9 	bl	80005a8 <__aeabi_dmul>
 801b5b6:	a33a      	add	r3, pc, #232	@ (adr r3, 801b6a0 <__ieee754_acos+0x2a0>)
 801b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5bc:	f7e4 fe3c 	bl	8000238 <__aeabi_dsub>
 801b5c0:	4622      	mov	r2, r4
 801b5c2:	462b      	mov	r3, r5
 801b5c4:	f7e4 fff0 	bl	80005a8 <__aeabi_dmul>
 801b5c8:	a337      	add	r3, pc, #220	@ (adr r3, 801b6a8 <__ieee754_acos+0x2a8>)
 801b5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5ce:	f7e4 fe35 	bl	800023c <__adddf3>
 801b5d2:	4622      	mov	r2, r4
 801b5d4:	462b      	mov	r3, r5
 801b5d6:	f7e4 ffe7 	bl	80005a8 <__aeabi_dmul>
 801b5da:	a335      	add	r3, pc, #212	@ (adr r3, 801b6b0 <__ieee754_acos+0x2b0>)
 801b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e0:	4606      	mov	r6, r0
 801b5e2:	460f      	mov	r7, r1
 801b5e4:	4620      	mov	r0, r4
 801b5e6:	4629      	mov	r1, r5
 801b5e8:	f7e4 ffde 	bl	80005a8 <__aeabi_dmul>
 801b5ec:	a332      	add	r3, pc, #200	@ (adr r3, 801b6b8 <__ieee754_acos+0x2b8>)
 801b5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5f2:	f7e4 fe21 	bl	8000238 <__aeabi_dsub>
 801b5f6:	4622      	mov	r2, r4
 801b5f8:	462b      	mov	r3, r5
 801b5fa:	f7e4 ffd5 	bl	80005a8 <__aeabi_dmul>
 801b5fe:	a330      	add	r3, pc, #192	@ (adr r3, 801b6c0 <__ieee754_acos+0x2c0>)
 801b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b604:	f7e4 fe1a 	bl	800023c <__adddf3>
 801b608:	4622      	mov	r2, r4
 801b60a:	462b      	mov	r3, r5
 801b60c:	f7e4 ffcc 	bl	80005a8 <__aeabi_dmul>
 801b610:	a32d      	add	r3, pc, #180	@ (adr r3, 801b6c8 <__ieee754_acos+0x2c8>)
 801b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b616:	f7e4 fe0f 	bl	8000238 <__aeabi_dsub>
 801b61a:	4622      	mov	r2, r4
 801b61c:	462b      	mov	r3, r5
 801b61e:	f7e4 ffc3 	bl	80005a8 <__aeabi_dmul>
 801b622:	4b34      	ldr	r3, [pc, #208]	@ (801b6f4 <__ieee754_acos+0x2f4>)
 801b624:	2200      	movs	r2, #0
 801b626:	f7e4 fe09 	bl	800023c <__adddf3>
 801b62a:	ec45 4b10 	vmov	d0, r4, r5
 801b62e:	4680      	mov	r8, r0
 801b630:	4689      	mov	r9, r1
 801b632:	f000 f9bf 	bl	801b9b4 <__ieee754_sqrt>
 801b636:	ec55 4b10 	vmov	r4, r5, d0
 801b63a:	4642      	mov	r2, r8
 801b63c:	464b      	mov	r3, r9
 801b63e:	4630      	mov	r0, r6
 801b640:	4639      	mov	r1, r7
 801b642:	f7e5 f8db 	bl	80007fc <__aeabi_ddiv>
 801b646:	4622      	mov	r2, r4
 801b648:	462b      	mov	r3, r5
 801b64a:	f7e4 ffad 	bl	80005a8 <__aeabi_dmul>
 801b64e:	a320      	add	r3, pc, #128	@ (adr r3, 801b6d0 <__ieee754_acos+0x2d0>)
 801b650:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b654:	f7e4 fdf0 	bl	8000238 <__aeabi_dsub>
 801b658:	4622      	mov	r2, r4
 801b65a:	462b      	mov	r3, r5
 801b65c:	f7e4 fdee 	bl	800023c <__adddf3>
 801b660:	4602      	mov	r2, r0
 801b662:	460b      	mov	r3, r1
 801b664:	f7e4 fdea 	bl	800023c <__adddf3>
 801b668:	4602      	mov	r2, r0
 801b66a:	460b      	mov	r3, r1
 801b66c:	a11c      	add	r1, pc, #112	@ (adr r1, 801b6e0 <__ieee754_acos+0x2e0>)
 801b66e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b672:	e76e      	b.n	801b552 <__ieee754_acos+0x152>
 801b674:	f3af 8000 	nop.w
	...
 801b680:	0dfdf709 	.word	0x0dfdf709
 801b684:	3f023de1 	.word	0x3f023de1
 801b688:	7501b288 	.word	0x7501b288
 801b68c:	3f49efe0 	.word	0x3f49efe0
 801b690:	b5688f3b 	.word	0xb5688f3b
 801b694:	3fa48228 	.word	0x3fa48228
 801b698:	0e884455 	.word	0x0e884455
 801b69c:	3fc9c155 	.word	0x3fc9c155
 801b6a0:	03eb6f7d 	.word	0x03eb6f7d
 801b6a4:	3fd4d612 	.word	0x3fd4d612
 801b6a8:	55555555 	.word	0x55555555
 801b6ac:	3fc55555 	.word	0x3fc55555
 801b6b0:	b12e9282 	.word	0xb12e9282
 801b6b4:	3fb3b8c5 	.word	0x3fb3b8c5
 801b6b8:	1b8d0159 	.word	0x1b8d0159
 801b6bc:	3fe6066c 	.word	0x3fe6066c
 801b6c0:	9c598ac8 	.word	0x9c598ac8
 801b6c4:	40002ae5 	.word	0x40002ae5
 801b6c8:	1c8a2d4b 	.word	0x1c8a2d4b
 801b6cc:	40033a27 	.word	0x40033a27
 801b6d0:	33145c07 	.word	0x33145c07
 801b6d4:	3c91a626 	.word	0x3c91a626
 801b6d8:	54442d18 	.word	0x54442d18
 801b6dc:	3ff921fb 	.word	0x3ff921fb
 801b6e0:	54442d18 	.word	0x54442d18
 801b6e4:	400921fb 	.word	0x400921fb
 801b6e8:	3fefffff 	.word	0x3fefffff
 801b6ec:	3fdfffff 	.word	0x3fdfffff
 801b6f0:	3c600000 	.word	0x3c600000
 801b6f4:	3ff00000 	.word	0x3ff00000
 801b6f8:	3fe00000 	.word	0x3fe00000
 801b6fc:	4622      	mov	r2, r4
 801b6fe:	462b      	mov	r3, r5
 801b700:	496b      	ldr	r1, [pc, #428]	@ (801b8b0 <__ieee754_acos+0x4b0>)
 801b702:	2000      	movs	r0, #0
 801b704:	f7e4 fd98 	bl	8000238 <__aeabi_dsub>
 801b708:	4b6a      	ldr	r3, [pc, #424]	@ (801b8b4 <__ieee754_acos+0x4b4>)
 801b70a:	2200      	movs	r2, #0
 801b70c:	f7e4 ff4c 	bl	80005a8 <__aeabi_dmul>
 801b710:	4604      	mov	r4, r0
 801b712:	460d      	mov	r5, r1
 801b714:	ec45 4b10 	vmov	d0, r4, r5
 801b718:	f000 f94c 	bl	801b9b4 <__ieee754_sqrt>
 801b71c:	a34c      	add	r3, pc, #304	@ (adr r3, 801b850 <__ieee754_acos+0x450>)
 801b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b722:	4620      	mov	r0, r4
 801b724:	4629      	mov	r1, r5
 801b726:	ec59 8b10 	vmov	r8, r9, d0
 801b72a:	f7e4 ff3d 	bl	80005a8 <__aeabi_dmul>
 801b72e:	a34a      	add	r3, pc, #296	@ (adr r3, 801b858 <__ieee754_acos+0x458>)
 801b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b734:	f7e4 fd82 	bl	800023c <__adddf3>
 801b738:	4622      	mov	r2, r4
 801b73a:	462b      	mov	r3, r5
 801b73c:	f7e4 ff34 	bl	80005a8 <__aeabi_dmul>
 801b740:	a347      	add	r3, pc, #284	@ (adr r3, 801b860 <__ieee754_acos+0x460>)
 801b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b746:	f7e4 fd77 	bl	8000238 <__aeabi_dsub>
 801b74a:	4622      	mov	r2, r4
 801b74c:	462b      	mov	r3, r5
 801b74e:	f7e4 ff2b 	bl	80005a8 <__aeabi_dmul>
 801b752:	a345      	add	r3, pc, #276	@ (adr r3, 801b868 <__ieee754_acos+0x468>)
 801b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b758:	f7e4 fd70 	bl	800023c <__adddf3>
 801b75c:	4622      	mov	r2, r4
 801b75e:	462b      	mov	r3, r5
 801b760:	f7e4 ff22 	bl	80005a8 <__aeabi_dmul>
 801b764:	a342      	add	r3, pc, #264	@ (adr r3, 801b870 <__ieee754_acos+0x470>)
 801b766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b76a:	f7e4 fd65 	bl	8000238 <__aeabi_dsub>
 801b76e:	4622      	mov	r2, r4
 801b770:	462b      	mov	r3, r5
 801b772:	f7e4 ff19 	bl	80005a8 <__aeabi_dmul>
 801b776:	a340      	add	r3, pc, #256	@ (adr r3, 801b878 <__ieee754_acos+0x478>)
 801b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b77c:	f7e4 fd5e 	bl	800023c <__adddf3>
 801b780:	4622      	mov	r2, r4
 801b782:	462b      	mov	r3, r5
 801b784:	f7e4 ff10 	bl	80005a8 <__aeabi_dmul>
 801b788:	a33d      	add	r3, pc, #244	@ (adr r3, 801b880 <__ieee754_acos+0x480>)
 801b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b78e:	4682      	mov	sl, r0
 801b790:	468b      	mov	fp, r1
 801b792:	4620      	mov	r0, r4
 801b794:	4629      	mov	r1, r5
 801b796:	f7e4 ff07 	bl	80005a8 <__aeabi_dmul>
 801b79a:	a33b      	add	r3, pc, #236	@ (adr r3, 801b888 <__ieee754_acos+0x488>)
 801b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7a0:	f7e4 fd4a 	bl	8000238 <__aeabi_dsub>
 801b7a4:	4622      	mov	r2, r4
 801b7a6:	462b      	mov	r3, r5
 801b7a8:	f7e4 fefe 	bl	80005a8 <__aeabi_dmul>
 801b7ac:	a338      	add	r3, pc, #224	@ (adr r3, 801b890 <__ieee754_acos+0x490>)
 801b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7b2:	f7e4 fd43 	bl	800023c <__adddf3>
 801b7b6:	4622      	mov	r2, r4
 801b7b8:	462b      	mov	r3, r5
 801b7ba:	f7e4 fef5 	bl	80005a8 <__aeabi_dmul>
 801b7be:	a336      	add	r3, pc, #216	@ (adr r3, 801b898 <__ieee754_acos+0x498>)
 801b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7c4:	f7e4 fd38 	bl	8000238 <__aeabi_dsub>
 801b7c8:	4622      	mov	r2, r4
 801b7ca:	462b      	mov	r3, r5
 801b7cc:	f7e4 feec 	bl	80005a8 <__aeabi_dmul>
 801b7d0:	4b37      	ldr	r3, [pc, #220]	@ (801b8b0 <__ieee754_acos+0x4b0>)
 801b7d2:	2200      	movs	r2, #0
 801b7d4:	f7e4 fd32 	bl	800023c <__adddf3>
 801b7d8:	4602      	mov	r2, r0
 801b7da:	460b      	mov	r3, r1
 801b7dc:	4650      	mov	r0, sl
 801b7de:	4659      	mov	r1, fp
 801b7e0:	f7e5 f80c 	bl	80007fc <__aeabi_ddiv>
 801b7e4:	4642      	mov	r2, r8
 801b7e6:	464b      	mov	r3, r9
 801b7e8:	f7e4 fede 	bl	80005a8 <__aeabi_dmul>
 801b7ec:	2600      	movs	r6, #0
 801b7ee:	4682      	mov	sl, r0
 801b7f0:	468b      	mov	fp, r1
 801b7f2:	4632      	mov	r2, r6
 801b7f4:	464b      	mov	r3, r9
 801b7f6:	4630      	mov	r0, r6
 801b7f8:	4649      	mov	r1, r9
 801b7fa:	f7e4 fed5 	bl	80005a8 <__aeabi_dmul>
 801b7fe:	4602      	mov	r2, r0
 801b800:	460b      	mov	r3, r1
 801b802:	4620      	mov	r0, r4
 801b804:	4629      	mov	r1, r5
 801b806:	f7e4 fd17 	bl	8000238 <__aeabi_dsub>
 801b80a:	4632      	mov	r2, r6
 801b80c:	4604      	mov	r4, r0
 801b80e:	460d      	mov	r5, r1
 801b810:	464b      	mov	r3, r9
 801b812:	4640      	mov	r0, r8
 801b814:	4649      	mov	r1, r9
 801b816:	f7e4 fd11 	bl	800023c <__adddf3>
 801b81a:	4602      	mov	r2, r0
 801b81c:	460b      	mov	r3, r1
 801b81e:	4620      	mov	r0, r4
 801b820:	4629      	mov	r1, r5
 801b822:	f7e4 ffeb 	bl	80007fc <__aeabi_ddiv>
 801b826:	4602      	mov	r2, r0
 801b828:	460b      	mov	r3, r1
 801b82a:	4650      	mov	r0, sl
 801b82c:	4659      	mov	r1, fp
 801b82e:	f7e4 fd05 	bl	800023c <__adddf3>
 801b832:	4632      	mov	r2, r6
 801b834:	464b      	mov	r3, r9
 801b836:	f7e4 fd01 	bl	800023c <__adddf3>
 801b83a:	4602      	mov	r2, r0
 801b83c:	460b      	mov	r3, r1
 801b83e:	f7e4 fcfd 	bl	800023c <__adddf3>
 801b842:	e5fd      	b.n	801b440 <__ieee754_acos+0x40>
 801b844:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 801b8a0 <__ieee754_acos+0x4a0>
 801b848:	e5ee      	b.n	801b428 <__ieee754_acos+0x28>
 801b84a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 801b8a8 <__ieee754_acos+0x4a8>
 801b84e:	e5eb      	b.n	801b428 <__ieee754_acos+0x28>
 801b850:	0dfdf709 	.word	0x0dfdf709
 801b854:	3f023de1 	.word	0x3f023de1
 801b858:	7501b288 	.word	0x7501b288
 801b85c:	3f49efe0 	.word	0x3f49efe0
 801b860:	b5688f3b 	.word	0xb5688f3b
 801b864:	3fa48228 	.word	0x3fa48228
 801b868:	0e884455 	.word	0x0e884455
 801b86c:	3fc9c155 	.word	0x3fc9c155
 801b870:	03eb6f7d 	.word	0x03eb6f7d
 801b874:	3fd4d612 	.word	0x3fd4d612
 801b878:	55555555 	.word	0x55555555
 801b87c:	3fc55555 	.word	0x3fc55555
 801b880:	b12e9282 	.word	0xb12e9282
 801b884:	3fb3b8c5 	.word	0x3fb3b8c5
 801b888:	1b8d0159 	.word	0x1b8d0159
 801b88c:	3fe6066c 	.word	0x3fe6066c
 801b890:	9c598ac8 	.word	0x9c598ac8
 801b894:	40002ae5 	.word	0x40002ae5
 801b898:	1c8a2d4b 	.word	0x1c8a2d4b
 801b89c:	40033a27 	.word	0x40033a27
 801b8a0:	54442d18 	.word	0x54442d18
 801b8a4:	400921fb 	.word	0x400921fb
 801b8a8:	54442d18 	.word	0x54442d18
 801b8ac:	3ff921fb 	.word	0x3ff921fb
 801b8b0:	3ff00000 	.word	0x3ff00000
 801b8b4:	3fe00000 	.word	0x3fe00000

0801b8b8 <scalbn>:
 801b8b8:	b570      	push	{r4, r5, r6, lr}
 801b8ba:	ec55 4b10 	vmov	r4, r5, d0
 801b8be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801b8c2:	4606      	mov	r6, r0
 801b8c4:	462b      	mov	r3, r5
 801b8c6:	b991      	cbnz	r1, 801b8ee <scalbn+0x36>
 801b8c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801b8cc:	4323      	orrs	r3, r4
 801b8ce:	d03d      	beq.n	801b94c <scalbn+0x94>
 801b8d0:	4b35      	ldr	r3, [pc, #212]	@ (801b9a8 <scalbn+0xf0>)
 801b8d2:	4620      	mov	r0, r4
 801b8d4:	4629      	mov	r1, r5
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	f7e4 fe66 	bl	80005a8 <__aeabi_dmul>
 801b8dc:	4b33      	ldr	r3, [pc, #204]	@ (801b9ac <scalbn+0xf4>)
 801b8de:	429e      	cmp	r6, r3
 801b8e0:	4604      	mov	r4, r0
 801b8e2:	460d      	mov	r5, r1
 801b8e4:	da0f      	bge.n	801b906 <scalbn+0x4e>
 801b8e6:	a328      	add	r3, pc, #160	@ (adr r3, 801b988 <scalbn+0xd0>)
 801b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ec:	e01e      	b.n	801b92c <scalbn+0x74>
 801b8ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801b8f2:	4291      	cmp	r1, r2
 801b8f4:	d10b      	bne.n	801b90e <scalbn+0x56>
 801b8f6:	4622      	mov	r2, r4
 801b8f8:	4620      	mov	r0, r4
 801b8fa:	4629      	mov	r1, r5
 801b8fc:	f7e4 fc9e 	bl	800023c <__adddf3>
 801b900:	4604      	mov	r4, r0
 801b902:	460d      	mov	r5, r1
 801b904:	e022      	b.n	801b94c <scalbn+0x94>
 801b906:	460b      	mov	r3, r1
 801b908:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801b90c:	3936      	subs	r1, #54	@ 0x36
 801b90e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801b912:	4296      	cmp	r6, r2
 801b914:	dd0d      	ble.n	801b932 <scalbn+0x7a>
 801b916:	2d00      	cmp	r5, #0
 801b918:	a11d      	add	r1, pc, #116	@ (adr r1, 801b990 <scalbn+0xd8>)
 801b91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b91e:	da02      	bge.n	801b926 <scalbn+0x6e>
 801b920:	a11d      	add	r1, pc, #116	@ (adr r1, 801b998 <scalbn+0xe0>)
 801b922:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b926:	a31a      	add	r3, pc, #104	@ (adr r3, 801b990 <scalbn+0xd8>)
 801b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b92c:	f7e4 fe3c 	bl	80005a8 <__aeabi_dmul>
 801b930:	e7e6      	b.n	801b900 <scalbn+0x48>
 801b932:	1872      	adds	r2, r6, r1
 801b934:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 801b938:	428a      	cmp	r2, r1
 801b93a:	dcec      	bgt.n	801b916 <scalbn+0x5e>
 801b93c:	2a00      	cmp	r2, #0
 801b93e:	dd08      	ble.n	801b952 <scalbn+0x9a>
 801b940:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b944:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801b948:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b94c:	ec45 4b10 	vmov	d0, r4, r5
 801b950:	bd70      	pop	{r4, r5, r6, pc}
 801b952:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801b956:	da08      	bge.n	801b96a <scalbn+0xb2>
 801b958:	2d00      	cmp	r5, #0
 801b95a:	a10b      	add	r1, pc, #44	@ (adr r1, 801b988 <scalbn+0xd0>)
 801b95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b960:	dac1      	bge.n	801b8e6 <scalbn+0x2e>
 801b962:	a10f      	add	r1, pc, #60	@ (adr r1, 801b9a0 <scalbn+0xe8>)
 801b964:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b968:	e7bd      	b.n	801b8e6 <scalbn+0x2e>
 801b96a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801b96e:	3236      	adds	r2, #54	@ 0x36
 801b970:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801b974:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801b978:	4620      	mov	r0, r4
 801b97a:	4b0d      	ldr	r3, [pc, #52]	@ (801b9b0 <scalbn+0xf8>)
 801b97c:	4629      	mov	r1, r5
 801b97e:	2200      	movs	r2, #0
 801b980:	e7d4      	b.n	801b92c <scalbn+0x74>
 801b982:	bf00      	nop
 801b984:	f3af 8000 	nop.w
 801b988:	c2f8f359 	.word	0xc2f8f359
 801b98c:	01a56e1f 	.word	0x01a56e1f
 801b990:	8800759c 	.word	0x8800759c
 801b994:	7e37e43c 	.word	0x7e37e43c
 801b998:	8800759c 	.word	0x8800759c
 801b99c:	fe37e43c 	.word	0xfe37e43c
 801b9a0:	c2f8f359 	.word	0xc2f8f359
 801b9a4:	81a56e1f 	.word	0x81a56e1f
 801b9a8:	43500000 	.word	0x43500000
 801b9ac:	ffff3cb0 	.word	0xffff3cb0
 801b9b0:	3c900000 	.word	0x3c900000

0801b9b4 <__ieee754_sqrt>:
 801b9b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9b8:	4a68      	ldr	r2, [pc, #416]	@ (801bb5c <__ieee754_sqrt+0x1a8>)
 801b9ba:	ec55 4b10 	vmov	r4, r5, d0
 801b9be:	43aa      	bics	r2, r5
 801b9c0:	462b      	mov	r3, r5
 801b9c2:	4621      	mov	r1, r4
 801b9c4:	d110      	bne.n	801b9e8 <__ieee754_sqrt+0x34>
 801b9c6:	4622      	mov	r2, r4
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	4629      	mov	r1, r5
 801b9cc:	f7e4 fdec 	bl	80005a8 <__aeabi_dmul>
 801b9d0:	4602      	mov	r2, r0
 801b9d2:	460b      	mov	r3, r1
 801b9d4:	4620      	mov	r0, r4
 801b9d6:	4629      	mov	r1, r5
 801b9d8:	f7e4 fc30 	bl	800023c <__adddf3>
 801b9dc:	4604      	mov	r4, r0
 801b9de:	460d      	mov	r5, r1
 801b9e0:	ec45 4b10 	vmov	d0, r4, r5
 801b9e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9e8:	2d00      	cmp	r5, #0
 801b9ea:	dc0e      	bgt.n	801ba0a <__ieee754_sqrt+0x56>
 801b9ec:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801b9f0:	4322      	orrs	r2, r4
 801b9f2:	d0f5      	beq.n	801b9e0 <__ieee754_sqrt+0x2c>
 801b9f4:	b19d      	cbz	r5, 801ba1e <__ieee754_sqrt+0x6a>
 801b9f6:	4622      	mov	r2, r4
 801b9f8:	4620      	mov	r0, r4
 801b9fa:	4629      	mov	r1, r5
 801b9fc:	f7e4 fc1c 	bl	8000238 <__aeabi_dsub>
 801ba00:	4602      	mov	r2, r0
 801ba02:	460b      	mov	r3, r1
 801ba04:	f7e4 fefa 	bl	80007fc <__aeabi_ddiv>
 801ba08:	e7e8      	b.n	801b9dc <__ieee754_sqrt+0x28>
 801ba0a:	152a      	asrs	r2, r5, #20
 801ba0c:	d115      	bne.n	801ba3a <__ieee754_sqrt+0x86>
 801ba0e:	2000      	movs	r0, #0
 801ba10:	e009      	b.n	801ba26 <__ieee754_sqrt+0x72>
 801ba12:	0acb      	lsrs	r3, r1, #11
 801ba14:	3a15      	subs	r2, #21
 801ba16:	0549      	lsls	r1, r1, #21
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d0fa      	beq.n	801ba12 <__ieee754_sqrt+0x5e>
 801ba1c:	e7f7      	b.n	801ba0e <__ieee754_sqrt+0x5a>
 801ba1e:	462a      	mov	r2, r5
 801ba20:	e7fa      	b.n	801ba18 <__ieee754_sqrt+0x64>
 801ba22:	005b      	lsls	r3, r3, #1
 801ba24:	3001      	adds	r0, #1
 801ba26:	02dc      	lsls	r4, r3, #11
 801ba28:	d5fb      	bpl.n	801ba22 <__ieee754_sqrt+0x6e>
 801ba2a:	1e44      	subs	r4, r0, #1
 801ba2c:	1b12      	subs	r2, r2, r4
 801ba2e:	f1c0 0420 	rsb	r4, r0, #32
 801ba32:	fa21 f404 	lsr.w	r4, r1, r4
 801ba36:	4323      	orrs	r3, r4
 801ba38:	4081      	lsls	r1, r0
 801ba3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ba3e:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801ba42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ba46:	07d2      	lsls	r2, r2, #31
 801ba48:	bf5c      	itt	pl
 801ba4a:	005b      	lslpl	r3, r3, #1
 801ba4c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801ba50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ba54:	bf58      	it	pl
 801ba56:	0049      	lslpl	r1, r1, #1
 801ba58:	2600      	movs	r6, #0
 801ba5a:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801ba5e:	106d      	asrs	r5, r5, #1
 801ba60:	0049      	lsls	r1, r1, #1
 801ba62:	2016      	movs	r0, #22
 801ba64:	4632      	mov	r2, r6
 801ba66:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801ba6a:	1917      	adds	r7, r2, r4
 801ba6c:	429f      	cmp	r7, r3
 801ba6e:	bfde      	ittt	le
 801ba70:	193a      	addle	r2, r7, r4
 801ba72:	1bdb      	suble	r3, r3, r7
 801ba74:	1936      	addle	r6, r6, r4
 801ba76:	0fcf      	lsrs	r7, r1, #31
 801ba78:	3801      	subs	r0, #1
 801ba7a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801ba7e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801ba82:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801ba86:	d1f0      	bne.n	801ba6a <__ieee754_sqrt+0xb6>
 801ba88:	4604      	mov	r4, r0
 801ba8a:	2720      	movs	r7, #32
 801ba8c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801ba90:	429a      	cmp	r2, r3
 801ba92:	eb00 0e0c 	add.w	lr, r0, ip
 801ba96:	db02      	blt.n	801ba9e <__ieee754_sqrt+0xea>
 801ba98:	d113      	bne.n	801bac2 <__ieee754_sqrt+0x10e>
 801ba9a:	458e      	cmp	lr, r1
 801ba9c:	d811      	bhi.n	801bac2 <__ieee754_sqrt+0x10e>
 801ba9e:	f1be 0f00 	cmp.w	lr, #0
 801baa2:	eb0e 000c 	add.w	r0, lr, ip
 801baa6:	da42      	bge.n	801bb2e <__ieee754_sqrt+0x17a>
 801baa8:	2800      	cmp	r0, #0
 801baaa:	db40      	blt.n	801bb2e <__ieee754_sqrt+0x17a>
 801baac:	f102 0801 	add.w	r8, r2, #1
 801bab0:	1a9b      	subs	r3, r3, r2
 801bab2:	458e      	cmp	lr, r1
 801bab4:	bf88      	it	hi
 801bab6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801baba:	eba1 010e 	sub.w	r1, r1, lr
 801babe:	4464      	add	r4, ip
 801bac0:	4642      	mov	r2, r8
 801bac2:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801bac6:	3f01      	subs	r7, #1
 801bac8:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801bacc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801bad0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801bad4:	d1dc      	bne.n	801ba90 <__ieee754_sqrt+0xdc>
 801bad6:	4319      	orrs	r1, r3
 801bad8:	d01b      	beq.n	801bb12 <__ieee754_sqrt+0x15e>
 801bada:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801bb60 <__ieee754_sqrt+0x1ac>
 801bade:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801bb64 <__ieee754_sqrt+0x1b0>
 801bae2:	e9da 0100 	ldrd	r0, r1, [sl]
 801bae6:	e9db 2300 	ldrd	r2, r3, [fp]
 801baea:	f7e4 fba5 	bl	8000238 <__aeabi_dsub>
 801baee:	e9da 8900 	ldrd	r8, r9, [sl]
 801baf2:	4602      	mov	r2, r0
 801baf4:	460b      	mov	r3, r1
 801baf6:	4640      	mov	r0, r8
 801baf8:	4649      	mov	r1, r9
 801bafa:	f7e4 ffd1 	bl	8000aa0 <__aeabi_dcmple>
 801bafe:	b140      	cbz	r0, 801bb12 <__ieee754_sqrt+0x15e>
 801bb00:	f1b4 3fff 	cmp.w	r4, #4294967295
 801bb04:	e9da 0100 	ldrd	r0, r1, [sl]
 801bb08:	e9db 2300 	ldrd	r2, r3, [fp]
 801bb0c:	d111      	bne.n	801bb32 <__ieee754_sqrt+0x17e>
 801bb0e:	3601      	adds	r6, #1
 801bb10:	463c      	mov	r4, r7
 801bb12:	1072      	asrs	r2, r6, #1
 801bb14:	0863      	lsrs	r3, r4, #1
 801bb16:	07f1      	lsls	r1, r6, #31
 801bb18:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801bb1c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801bb20:	bf48      	it	mi
 801bb22:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801bb26:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801bb2a:	4618      	mov	r0, r3
 801bb2c:	e756      	b.n	801b9dc <__ieee754_sqrt+0x28>
 801bb2e:	4690      	mov	r8, r2
 801bb30:	e7be      	b.n	801bab0 <__ieee754_sqrt+0xfc>
 801bb32:	f7e4 fb83 	bl	800023c <__adddf3>
 801bb36:	e9da 8900 	ldrd	r8, r9, [sl]
 801bb3a:	4602      	mov	r2, r0
 801bb3c:	460b      	mov	r3, r1
 801bb3e:	4640      	mov	r0, r8
 801bb40:	4649      	mov	r1, r9
 801bb42:	f7e4 ffa3 	bl	8000a8c <__aeabi_dcmplt>
 801bb46:	b120      	cbz	r0, 801bb52 <__ieee754_sqrt+0x19e>
 801bb48:	1ca0      	adds	r0, r4, #2
 801bb4a:	bf08      	it	eq
 801bb4c:	3601      	addeq	r6, #1
 801bb4e:	3402      	adds	r4, #2
 801bb50:	e7df      	b.n	801bb12 <__ieee754_sqrt+0x15e>
 801bb52:	1c63      	adds	r3, r4, #1
 801bb54:	f023 0401 	bic.w	r4, r3, #1
 801bb58:	e7db      	b.n	801bb12 <__ieee754_sqrt+0x15e>
 801bb5a:	bf00      	nop
 801bb5c:	7ff00000 	.word	0x7ff00000
 801bb60:	20000300 	.word	0x20000300
 801bb64:	200002f8 	.word	0x200002f8

0801bb68 <_init>:
 801bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb6a:	bf00      	nop
 801bb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb6e:	bc08      	pop	{r3}
 801bb70:	469e      	mov	lr, r3
 801bb72:	4770      	bx	lr

0801bb74 <_fini>:
 801bb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb76:	bf00      	nop
 801bb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bb7a:	bc08      	pop	{r3}
 801bb7c:	469e      	mov	lr, r3
 801bb7e:	4770      	bx	lr
